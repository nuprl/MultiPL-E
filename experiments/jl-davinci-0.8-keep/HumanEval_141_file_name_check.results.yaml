name: HumanEval_141_file_name_check
language: jl
results:
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    count = 0\n    dot_count\
    \ = 0\n    i = 1\n    while i <= length(file_name)\n        if file_name[i] ==\
    \ '.'\n            dot_count += 1\n        end\n        if '0' <= file_name[i]\
    \ <= '9'\n            count += 1\n        end\n        i += 1\n    end\n    if\
    \ count > 3 || dot_count != 1\n        return \"No\"\n    end\n    dot_position\
    \ = search('.', file_name).offset\n    substring_before_dot = file_name[1:dot_position-1]\n\
    \    substring_after_dot = file_name[dot_position+1:end]\n    return if substring_before_dot\
    \ == \"\" || substring_after_dot == \"\" || \n        substring_after_dot != \"\
    txt\" && substring_after_dot != \"exe\" && substring_after_dot != \"dll\" || \n\
    \        !('a' <= substring_before_dot[1] <= 'z' || 'A' <= substring_before_dot[1]\
    \ <= 'Z')\n        \"No\"\n    else\n        \"Yes\"\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpf7bj5isu.jl:46\n  Test threw exception\n\
    \  Expression: candidate(\"example.txt\") == \"Yes\"\n  UndefVarError: search\
    \ not defined\n  Stacktrace:\n   [1] file_name_check(file_name::String)\n    \
    \ @ Main /tmp/tmpf7bj5isu.jl:30\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf7bj5isu.jl:46 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf7bj5isu.jl:45\ntest set:\
    \ Error During Test at /tmp/tmpf7bj5isu.jl:47\n  Test threw exception\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\n  UndefVarError: search not defined\n\
    \  Stacktrace:\n   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmpf7bj5isu.jl:30\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf7bj5isu.jl:47 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf7bj5isu.jl:45\ntest set:\
    \ Error During Test at /tmp/tmpf7bj5isu.jl:48\n  Test threw exception\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\n  UndefVarError: search not defined\n \
    \ Stacktrace:\n   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmpf7bj5isu.jl:30\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf7bj5isu.jl:48 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf7bj5isu.jl:45\ntest set:\
    \ Error During Test at /tmp/tmpf7bj5isu.jl:49\n  Test threw exception\n  Expression:\
    \ candidate(\"K.dll\") == \"Yes\"\n  UndefVarError: search not defined\n  Stacktrace:\n\
    \   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmpf7bj5isu.jl:30\n\
    \   [2] macro expans"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 18 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf7bj5isu.jl:43\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # We first check if\
    \ the file's name contains more than 3 digits.\n    # Here, we compute the number\
    \ of digits by converting the file's name to a character\n    # array and then\
    \ computing the length of the array, minus the length of all digits.\n    # Then,\
    \ we check if the file's name contains exactly one dot.\n    # If the number of\
    \ dots is neither 0 nor 1, then we return No.\n    # Finally, we check if the\
    \ substring before the dot is empty, and it starts with a \n    # letter from\
    \ the latin alphapet ('a'-'z' and 'A'-'Z').\n    # Note that the dot is removed\
    \ after splitting the file's name and that the extension\n    # is converted to\
    \ lowercase for the comparison.\n    # If a condition is not met, then we return\
    \ No.\n    if length(string.(collect(0:9))) - length(file_name) != 3 && length(split(file_name,\
    \ \".\")) == 1\n        && (split(file_name, \".\")[1] != \"\" && in('a':'z',\
    \ file_name[1]) || in('A':'z', file_name[1]))\n        && lowercase(split(file_name,\
    \ \".\")[2]) in ['txt', 'exe', 'dll']\n        return \"Yes\"\n    else\n    \
    \    return \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"\
    1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid identifier name \"&&\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3vp4t8z7.jl:26\nin expression starting at\
    \ /tmp/tmp3vp4t8z7.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    nums = ['0','1','2','3','4','5','6','7','8','9']\n\
    \    ext_list = ['txt', 'exe', 'dll']\n    char_list = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpx56ulnkw.jl:16\nin expression\
    \ starting at /tmp/tmpx56ulnkw.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # Your code goes here\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp_io2iy5m.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp_io2iy5m.jl:16\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp_io2iy5m.jl:22 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp_io2iy5m.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp_io2iy5m.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp_io2iy5m.jl:16\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp_io2iy5m.jl:23 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    dots = 0\n    digits\
    \ = 0\n    letter = false\n    extension = false\n    for i in file_name\n   \
    \     if i == '.'\n            dots += 1\n        elseif isdigit(i)\n        \
    \    digits += 1\n        elseif isalpha(i)\n            letter = true\n     \
    \   end\n    end\n    if dots == 1 && digits < 4 && letter == true && dot_pos\
    \ = findfirst(file_name, '.') > 1\n        ext = file_name[dot_pos+1:end]\n  \
    \      if ext == \"txt\" || ext == \"exe\" || ext == \"dll\"\n            return\
    \ \"Yes\"\n        end\n    end\n    return \"No\"\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") ==\
    \ \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmppidwxxrk.jl:28\nin expression starting at /tmp/tmppidwxxrk.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    count_num = 0\n    dot_index\
    \ = -1\n    for i in 1:length(file_name)\n        if isdigit(file_name[i]) \n\
    \            count_num += 1\n        end\n        if file_name[i] == '.'\n   \
    \         dot_index = i\n        end\n    end\n    if count_num > 3\n        return\
    \ \"No\"\n    end\n    if dot_index == -1\n        return \"No\"\n    end\n  \
    \  if (file_name[1] < 'a' || file_name[1] > 'z') && (file_name[1] < 'A' || file_name[1]\
    \ > 'Z')\n        return \"No\"\n    end\n    if (file_name[dot_index+1:end] !=\
    \ \"txt\") && (file_name[dot_index+1:end] != \"exe\") && (file_name[dot_index+1:end]\
    \ != \"dll\")\n        return \"No\"\n    end\n    return \"Yes\"\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxoapodeq.jl:59\n  Expression: candidate(\"\
    all.exe.txt\") == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxoapodeq.jl:59 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxoapodeq.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpxoapodeq.jl:65\n  Expression: candidate(\"final..txt\") ==\
    \ \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxoapodeq.jl:65 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxoapodeq.jl:43\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   24     2     26\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 24 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxoapodeq.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # Your code goes here\n\
    end\n\"\"\"Create a function which takes two strings (s1 and s2) as arguments,\
    \ and returns\n    a string (s) in which s is the longest common substring of\
    \ both s1 and s2.\n    Example:\n    longest_common_substring(\"abcdefg\", \"\
    efghijk\") # => \"efg\"\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"\
    1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpkwvciodt.jl:17\nin expression starting at /tmp/tmpkwvciodt.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    digits_number = 0\n\
    \    is_dot_found = false\n    is_name_valid = false\n    for ch in file_name\n\
    \        if '0' <= ch <= '9'\n            digits_number += 1\n        elseif ch\
    \ == '.'\n            is_dot_found = true\n        end\n    end\n    if digits_number\
    \ <= 3 && is_dot_found\n        parts = split(file_name, '.')\n        if length(parts)\
    \ == 2\n            if 'a' <= parts[1][1] <= 'z' || 'A' <= parts[1][1] <= 'Z'\n\
    \                is_name_valid = true\n            end\n        end\n    end\n\
    \    if is_name_valid\n        return \"Yes\"\n    else\n        return \"No\"\
    \n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpn1tr3fb0.jl:46\n  Expression: candidate(\"\
    s1sdf3.asd\") == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn1tr3fb0.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn1tr3fb0.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpn1tr3fb0.jl:53\n  Expression: candidate(\"this_is_valid.wow\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn1tr3fb0.jl:53 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn1tr3fb0.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpn1tr3fb0.jl:55\n  Expression: candidate(\"this_is_valid.txtexe\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn1tr3fb0.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn1tr3fb0.jl:43\ntest set: Error\
    \ During Test at /tmp/tmpn1tr3fb0.jl:68\n  Test threw exception\n  Expression:\
    \ candidate(\".txt\") == \"No\"\n  BoundsError: attempt to access empty SubString{String}\
    \ at index [1]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] getindex(s::SubString{String}, i::Int64)\n     @ Base ./strings/substring.jl:83\n\
    \   [3] file_name_check(file_name::String)\n     @ Main /tmp/tmpn1tr3fb0.jl:28\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpn1tr3fb0.jl:68 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/jul"
  stderr: "ERROR: LoadError: Some tests did not pass: 21 passed, 4 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn1tr3fb0.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    counter = 0\n    for\
    \ i in file_name\n        if ('0' <= i <= '9')\n            counter += 1\n   \
    \     end\n    end\n    if (counter > 3)\n        return \"No\"\n    end\n   \
    \ return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0j9pvpcg.jl:32\n  Expression: candidate(\"\
    1example.dll\") == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0j9pvpcg.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0j9pvpcg.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp0j9pvpcg.jl:33\n  Expression: candidate(\"s1sdf3.asd\") ==\
    \ \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0j9pvpcg.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0j9pvpcg.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp0j9pvpcg.jl:37\n  Expression: candidate(\"_Y.txt\") == \"\
    No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp0j9pvpcg.jl:37 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0j9pvpcg.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp0j9pvpcg.jl:38\n  Expression: candidate(\"?aREYA.exe\") ==\
    \ \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0j9pvpcg.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0j9pvpcg.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp0j9pvpcg.jl:39\n  Expression: candidate(\"/this_is_valid.dll\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/juli"
  stderr: "ERROR: LoadError: Some tests did not pass: 12 passed, 14 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0j9pvpcg.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    count_digits = 0\n \
    \   file_name = lowercase(file_name)\n    for c in file_name\n        if c in\
    \ '0123456789'\n            count_digits += 1\n        end\n    end\n    if count_digits\
    \ > 3\n        return \"No\"\n    end\n    parts = split(file_name, \".\")\n \
    \   if length(parts) != 2\n        return \"No\"\n    end\n    first, second =\
    \ parts\n    if length(first) == 0 || first[1] \u2209 'abcdefghijklmnopqrstuvwxyz'\n\
    \        return \"No\"\n    end\n    if second \u2209 [\"txt\", \"exe\", \"dll\"\
    ]\n        return \"No\"\n    end\n    return \"Yes\"\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") ==\
    \ \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpj_v3ppbi.jl:18\nin expression\
    \ starting at /tmp/tmpj_v3ppbi.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if !(first(file_name)\
    \ in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ')\n        return \"\
    No\"\n    end\n    num_count = 0\n    dot_count = 0\n    for c in file_name\n\
    \        if c in '0123456789'\n            num_count += 1\n        elseif c ==\
    \ '.'\n            dot_count += 1\n        end\n    end\n    if num_count > 3\
    \ || dot_count != 1\n        return \"No\"\n    end\n    if split(file_name, '.')[2]\
    \ \u2209 [\"txt\", \"exe\", \"dll\"]\n        return \"No\"\n    end\n    return\
    \ \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpuax31scv.jl:15\nin expression\
    \ starting at /tmp/tmpuax31scv.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    reg = r\"[a-zA-Z]+\\\
    .[a-zA-Z]{3}\"\n    reg2 = r\"\\d\"\n    if length(matchall(reg, file_name)) ==\
    \ 1 && length(matchall(reg2, file_name)) <= 3\n        return \"Yes\"\n    else\n\
    \        return \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"\
    1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxntup8ti.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"example.txt\") == \"Yes\"\n  UndefVarError: matchall\
    \ not defined\n  Stacktrace:\n   [1] file_name_check(file_name::String)\n    \
    \ @ Main /tmp/tmpxntup8ti.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxntup8ti.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxntup8ti.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpxntup8ti.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\n  UndefVarError: matchall not defined\n\
    \  Stacktrace:\n   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmpxntup8ti.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxntup8ti.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxntup8ti.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpxntup8ti.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\n  UndefVarError: matchall not defined\n\
    \  Stacktrace:\n   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmpxntup8ti.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxntup8ti.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxntup8ti.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpxntup8ti.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"K.dll\") == \"Yes\"\n  UndefVarError: matchall not defined\n  Stacktrace:\n\
    \   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmpxntup8ti.jl:17\n\
    \   [2] macr"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 26 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxntup8ti.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # Begin solution\n \
    \   d_cnt = 0\n    num_cnt = 0\n    exts = [\"txt\", \"exe\", \"dll\"]\n    for\
    \ i = 1:length(file_name)\n        if (file_name[i] == '.')\n            d_cnt\
    \ += 1\n        elseif (file_name[i] in ['0':'9'])\n            num_cnt += 1\n\
    \        end\n    end\n    if (d_cnt != 1 || num_cnt > 3)\n        return \"No\"\
    \n    end\n    name, ext = split(file_name, '.')\n    if (ext in exts && length(name)\
    \ > 0 && name[1] in ['a':'z', 'A':'Z'])\n        return \"Yes\"\n    else\n  \
    \      return \"No\"\n    end\n    # End solution\nend\n \nusing Test\n\n@testset\
    \ begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") ==\
    \ \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyknv55lj.jl:43\n  Expression: candidate(\"\
    example.txt\") == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyknv55lj.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyknv55lj.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpyknv55lj.jl:46\n  Expression: candidate(\"K.dll\") == \"Yes\"\
    \n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyknv55lj.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyknv55lj.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpyknv55lj.jl:47\n  Expression: candidate(\"MY16FILE3.exe\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyknv55lj.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyknv55lj.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpyknv55lj.jl:53\n  Expression: candidate(\"this_is_valid.txt\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyknv55lj.jl:53 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyknv55lj.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpyknv55lj.jl:59\n  Expression: candidate(\"I563_No.exe\") ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/shar"
  stderr: "ERROR: LoadError: Some tests did not pass: 19 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyknv55lj.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    digits = collect(('0':'9'))\n\
    \    letters = collect(('a':'z', 'A':'Z'))\n    file_exts = [\"txt\", \"exe\"\
    , \"dll\"]\n    if sum(file_name .== digits) > 3\n        return \"No\"\n    end\n\
    \    dot_index = search(file_name, '.')\n    if dot_index == 0 || dot_index ==\
    \ length(file_name)\n        return \"No\"\n    end\n    if file_name[1] \u2209\
    \ letters\n        return \"No\"\n    end\n    substr_after_dot = file_name[dot_index+1:end]\n\
    \    if substr_after_dot \u2209 file_exts\n        return \"No\"\n    end\n  \
    \  return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpqm1efsru.jl:39\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  UndefVarError:\
    \ search not defined\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\\
    n     @ Main /tmp/tmpqm1efsru.jl:21\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpqm1efsru.jl:39 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpqm1efsru.jl:38\\ntest set:\
    \ Error During Test at /tmp/tmpqm1efsru.jl:40\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  UndefVarError: search not defined\\\
    n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @ Main /tmp/tmpqm1efsru.jl:21\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpqm1efsru.jl:40 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpqm1efsru.jl:38\\ntest set:\
    \ Error During Test at /tmp/tmpqm1efsru.jl:41\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  UndefVarError: search not defined\\\
    n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @ Main /tmp/tmpqm1efsru.jl:21\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpqm1efsru.jl:41 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpqm1efsru.jl:38\\ntest set:\
    \ Error During Test at /tmp/tmpqm1efsru.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(\"K.dll\") == \"Yes\"\\n  UndefVarError: search not defined\\n  Stacktrace:\\\
    n   [1] file_name_check(file_name::String)\\n "
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    file_name_chars = chars(file_name)\n\
    \    valid_chars = [\"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\"\
    \ \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\" \"t\" \"u\" \"v\" \"w\"\
    \ \"x\" \"y\" \"z\" \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\"\
    \ \"K\" \"L\" \"M\" \"N\" \"O\" \"P\" \"Q\" \"R\" \"S\" \"T\" \"U\" \"V\" \"W\"\
    \ \"X\" \"Y\" \"Z\"]\n    valid_types = [\"txt\", \"exe\", \"dll\"]\n    dot_counter\
    \ = 0\n    number_counter = 0\n    for i in file_name_chars\n        if i == \"\
    .\"\n            dot_counter += 1\n        end\n        if i \u2208 [\"0\" \"\
    1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\"]\n            number_counter\
    \ += 1\n        end\n    end\n    after_dot = file_name[(endof(split(file_name,\
    \ \".\"))-1):end]\n    before_dot = file_name[1:(endof(split(file_name, \".\"\
    ))-2)]\n    if dot_counter > 1\n        \"No\"\n    elseif dot_counter == 0\n\
    \        \"No\"\n    elseif length(file_name_chars) < 5\n        \"No\"\n    elseif\
    \ number_counter > 3\n        \"No\"\n    elseif !(any(valid_chars .== before_dot[1]))\n\
    \        \"No\"\n    elseif !(after_dot \u2208 valid_types)\n        \"No\"\n\
    \    else\n        \"Yes\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"\
    1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmjesct1y.jl:51\n  Test threw exception\n\
    \  Expression: candidate(\"example.txt\") == \"Yes\"\n  UndefVarError: chars not\
    \ defined\n  Stacktrace:\n   [1] file_name_check(file_name::String)\n     @ Main\
    \ /tmp/tmpmjesct1y.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmjesct1y.jl:51 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmjesct1y.jl:50\ntest set:\
    \ Error During Test at /tmp/tmpmjesct1y.jl:52\n  Test threw exception\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\n  UndefVarError: chars not defined\n\
    \  Stacktrace:\n   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmpmjesct1y.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmjesct1y.jl:52 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmjesct1y.jl:50\ntest set:\
    \ Error During Test at /tmp/tmpmjesct1y.jl:53\n  Test threw exception\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\n  UndefVarError: chars not defined\n  Stacktrace:\n\
    \   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmpmjesct1y.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmjesct1y.jl:53 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmjesct1y.jl:50\ntest set:\
    \ Error During Test at /tmp/tmpmjesct1y.jl:54\n  Test threw exception\n  Expression:\
    \ candidate(\"K.dll\") == \"Yes\"\n  UndefVarError: chars not defined\n  Stacktrace:\n\
    \   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmpmjesct1y.jl:15\n\
    \   [2] macro expansion\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 26 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmjesct1y.jl:48\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    while true\n       \
    \ i = 0\n        count = 0\n        while i != length(file_name)\n           \
    \ if file_name[i] != '.' && file_name[i] >= '0' && file_name[i] <= '9'\n     \
    \           count += 1\n            end\n            i += 1\n        end\n   \
    \     if count > 3\n            return \"No\"\n        end\n        count = 0\n\
    \        i = 0\n        while i != length(file_name)\n            if file_name[i]\
    \ == '.'\n                count += 1\n            end\n            i += 1\n  \
    \      end\n        if count != 1\n            return \"No\"\n        end\n  \
    \      count = 0\n        i = 0\n        while i != length(file_name)\n      \
    \      if file_name[i] != '.' && file_name[i] < '0' && file_name[i] > '9'\n  \
    \              count += 1\n            end\n            i += 1\n        end\n\
    \        if count == 0\n            return \"No\"\n        end\n        count\
    \ = 0\n        i = 0\n        while i != length(file_name)\n            if file_name[i]\
    \ == '.'\n                break\n            end\n            i += 1\n       \
    \ end\n        i += 1\n        while i != length(file_name)\n            if file_name[i]\
    \ != 't' && file_name[i] != 'x' && file_name[i] != 'e' && file_name[i] != 'd'\
    \ && file_name[i] != 'l'\n                return \"No\"\n            end\n   \
    \         i += 1\n        end\n        return \"Yes\"\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2_q6z88y.jl:72\n  Test threw exception\n\
    \  Expression: candidate(\"example.txt\") == \"Yes\"\n  BoundsError: attempt to\
    \ access 11-codeunit String at index [0]\n  Stacktrace:\n   [1] checkbounds\n\
    \     @ ./strings/basic.jl:216 [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102\
    \ [inlined]\n   [3] getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4]\
    \ file_name_check(file_name::String)\n     @ Main /tmp/tmp2_q6z88y.jl:19\n   [5]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp2_q6z88y.jl:72 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp2_q6z88y.jl:71\ntest set:\
    \ Error During Test at /tmp/tmp2_q6z88y.jl:73\n  Test threw exception\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\n  BoundsError: attempt to access 12-codeunit\
    \ String at index [0]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102 [inlined]\n   [3]\
    \ getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4] file_name_check(file_name::String)\n\
    \     @ Main /tmp/tmp2_q6z88y.jl:19\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp2_q6z88y.jl:73 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp2_q6z88y.jl:71\ntest set:\
    \ Error During Test at /tmp/tmp2_q6z88y.jl:74\n  Test threw exception\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\n  BoundsError: attempt to access 10-codeunit\
    \ String at index [0]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102 [inlined]\n   [3]\
    \ getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4] file_name_check(file_name::String)\n\
    \     @ Main /tmp/tmp2_q6z88y.jl:19\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 26 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2_q6z88y.jl:69\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    file_name_elements =\
    \ split(file_name, '.')\n    if(length(file_name_elements) != 2)\n        return\
    \ \"No\"\n    end\n    if(isletter(file_name_elements[1][1]) == false)\n     \
    \   return \"No\"\n    end\n    if(count(collect(file_name_elements[1]), (x) ->\
    \ isdigit(x)) > 3)\n        return \"No\"\n    end\n    if(file_name_elements[2]\
    \ != \"txt\" && file_name_elements[2] != \"exe\" && file_name_elements[2] != \"\
    dll\")\n        return \"No\"\n    end\n    return \"Yes\"\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp5tlm8y4h.jl:35\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ no method matching iterate(::var\"#1#2\")\\n  Closest candidates are:\\n   \
    \ iterate(!Matched::Union{LinRange, StepRangeLen}) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:826\\\
    n    iterate(!Matched::Union{LinRange, StepRangeLen}, !Matched::Integer) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:826\\\
    n    iterate(!Matched::T) where T<:Union{Base.KeySet{<:Any, <:Dict}, Base.ValueIterator{<:Dict}}\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/dict.jl:695\\n    ...\\n  Stacktrace:\\\
    n   [1] _simple_count(pred::Vector{Char}, itr::Function, init::Int64)\\n     @\
    \ Base ./reduce.jl:1205\\n   [2] count(f::Vector{Char}, itr::Function; init::Int64)\\\
    n     @ Base ./reduce.jl:1201\\n   [3] count(f::Vector{Char}, itr::Function)\\\
    n     @ Base ./reduce.jl:1201\\n   [4] file_name_check(file_name::String)\\n \
    \    @ Main /tmp/tmp5tlm8y4h.jl:22\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmp5tlm8y4h.jl:35 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmp5tlm8y4h.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmp5tlm8y4h.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: no method matching iterate(::var\"\
    #1#2\")\\n  Closest candidates are:\\n    iterate(!Matched::Union{LinRange, StepRangeLen})\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:826\\n    iterate(!Matched::Union{LinRange,\
    \ StepRangeLen}, !Matched::Integer) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:826\\\
    n    iterate(!Matched::T) where T<:Union{Base.KeySet{<:Any, <:Dict}, Base.ValueIterator{<:Dict}}\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/dict.jl:695\\n    ...\\n  Stacktrace:\\\
    n   [1] _simple_count(pred::Vector{Char}, itr::Function, init::Int64)\\n "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    digits_count = 0\n \
    \   dot_count = 0\n    space_count = 0\n    for character in file_name\n     \
    \   isdigit(character) && (digits_count += 1)\n        character == '.' && (dot_count\
    \ += 1)\n        isspace(character) && (space_count += 1)\n    end\n    digits_count\
    \ > 3 && return \"No\"\n    dot_count != 1 && return \"No\"\n    space_count !=\
    \ 0 && return \"No\"\n    !isletter(file_name[1]) && return \"No\"\n    substring_after_dot\
    \ = file_name[find(file_name, '.')+1:end]\n    !in([\"txt\", \"exe\", \"dll\"\
    ], substring_after_dot) && return \"No\"\n    return \"Yes\"\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpo_l2n7r8.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"example.txt\") == \"Yes\"\n  UndefVarError: find not\
    \ defined\n  Stacktrace:\n   [1] file_name_check(file_name::String)\n     @ Main\
    \ /tmp/tmpo_l2n7r8.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo_l2n7r8.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo_l2n7r8.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpo_l2n7r8.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\n  UndefVarError: find not defined\n  Stacktrace:\n\
    \   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmpo_l2n7r8.jl:27\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo_l2n7r8.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo_l2n7r8.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpo_l2n7r8.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"K.dll\") == \"Yes\"\n  UndefVarError: find not defined\n  Stacktrace:\n\
    \   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmpo_l2n7r8.jl:27\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo_l2n7r8.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo_l2n7r8.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpo_l2n7r8.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"MY16FILE3.exe\") == \"Yes\"\n  UndefVarError: find not defined\n\
    \  Stacktrace:\n   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmpo_l2n7r8.jl:27\n\
    \   [2] macro expansion\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 15 passed, 0 failed, 11 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo_l2n7r8.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if count(c->isdigit(c),\
    \ file_name) > 3\n        return \"No\"\n    end\n    num_dots = count(c->c=='.',\
    \ file_name)\n    if num_dots != 1\n        return \"No\"\n    end\n    parts\
    \ = split(file_name, '.')\n    if islowercase(parts[1][1]) || isuppercase(parts[1][1])\n\
    \        if parts[2] == \"txt\" || parts[2] == \"exe\" || parts[2] == \"dll\"\n\
    \            return \"Yes\"\n        end\n    end\n    return \"No\"\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpi1u1i102.jl:59\n  Test threw exception\n\
    \  Expression: candidate(\".txt\") == \"No\"\n  BoundsError: attempt to access\
    \ empty SubString{String} at index [1]\n  Stacktrace:\n   [1] checkbounds\n  \
    \   @ ./strings/basic.jl:216 [inlined]\n   [2] getindex(s::SubString{String},\
    \ i::Int64)\n     @ Base ./strings/substring.jl:83\n   [3] file_name_check(file_name::String)\n\
    \     @ Main /tmp/tmpi1u1i102.jl:23\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpi1u1i102.jl:59 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpi1u1i102.jl:34\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |   25      1     26\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 25 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi1u1i102.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    import Pkg; Pkg.add(\"\
    Regex\")\n    import Regex\n    return cond(r\"\\D{1}[^\\.]{1,}\\.(txt|exe|dll)$\"\
    \ =~ file_name, 'Yes', 'No')\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"\
    1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp3loqzr4_.jl:17\nin expression\
    \ starting at /tmp/tmp3loqzr4_.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpudvo8det.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpudvo8det.jl:16\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpudvo8det.jl:22 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpudvo8det.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpudvo8det.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpudvo8det.jl:16\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpudvo8det.jl:23 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    digits_in_name = length(r\"\
    \\d+\", file_name)\n    if digits_in_name > 3\n        return \"No\"\n    end\n\
    \    dot_in_name = length(r\"\\.\", file_name)\n    if dot_in_name != 1\n    \
    \    return \"No\"\n    end\n    file_type = search(r\"\\.(\\w+)$\", file_name)[1]\n\
    \    if (file_type == \"txt\") || (file_type == \"exe\") || (file_type == \"dll\"\
    )\n        return \"Yes\"\n    else\n        return \"No\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpuus4wlw8.jl:35\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ no method matching length(::Regex, ::String)\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\\
    n     @ Main /tmp/tmpuus4wlw8.jl:15\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpuus4wlw8.jl:35 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpuus4wlw8.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpuus4wlw8.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: no method matching length(::Regex,\
    \ ::String)\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n   \
    \  @ Main /tmp/tmpuus4wlw8.jl:15\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpuus4wlw8.jl:36 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpuus4wlw8.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpuus4wlw8.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: no method matching length(::Regex,\
    \ ::String)\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n   \
    \  @ Main /tmp/tmpuus4wlw8.jl:15\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpuus4wlw8.jl:37 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpuus4wlw8.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpuus4wlw8.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(\"K.dll\") == \"Yes\"\\n  MethodError: no method"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # write your code here\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpjenkzyw3.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpjenkzyw3.jl:16\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpjenkzyw3.jl:22 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpjenkzyw3.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpjenkzyw3.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpjenkzyw3.jl:16\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpjenkzyw3.jl:23 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    digits = 0\n    dot_index\
    \ = findfirst(file_name, '.')\n    for (index, char) in enumerate(file_name)\n\
    \        if !(('a' <= char <= 'z') || ('A' <= char <= 'Z'))\n            return\
    \ \"No\"\n        end\n        if ('0' <= char <= '9')\n            digits +=\
    \ 1\n        end\n    end\n    if digits > 3\n        return \"No\"\n    end\n\
    \    before_dot = file_name[1:dot_index - 1]\n    if length(before_dot) == 0\n\
    \        return \"No\"\n    end\n    after_dot = file_name[dot_index + 1:end]\n\
    \    if !(after_dot in [\"txt\", \"exe\", \"dll\"])\n        return \"No\"\n \
    \   end\n    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"\
    1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpjlpluxyq.jl:43\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ no method matching findfirst(::String, ::Char)\\n  Closest candidates are:\\\
    n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\\\
    n    findfirst(::AbstractString, !Matched::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:104\\\
    n    findfirst(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\\\
    n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @ Main /tmp/tmpjlpluxyq.jl:16\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpjlpluxyq.jl:43 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpjlpluxyq.jl:42\\ntest set:\
    \ Error During Test at /tmp/tmpjlpluxyq.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: no method matching findfirst(::String,\
    \ ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function, ::Any)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\\n    findfirst(::AbstractString,\
    \ !Matched::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:104\\\
    n    findfirst(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\\\
    n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @ Main /tmp/tmpjlpluxyq.jl:16\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpjlpluxyq.jl:44 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpjlpluxyq.jl:42\\ntest set:\
    \ Error During Test at /tmp/tmpjlpluxyq.jl:45\\n  Test threw exception\\n  Expre"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    file_name_regex = r\"\
    ^[a-zA-Z]{1}[a-zA-Z0-9]{0,2}\\.(txt|exe|dll)$\"\n    if match(file_name_regex,\
    \ file_name) != nothing\n        return \"Yes\"\n    else\n        return \"No\"\
    \n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyigqxwmw.jl:27\n  Expression: candidate(\"\
    example.txt\") == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyigqxwmw.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyigqxwmw.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpyigqxwmw.jl:31\n  Expression: candidate(\"MY16FILE3.exe\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyigqxwmw.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyigqxwmw.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpyigqxwmw.jl:37\n  Expression: candidate(\"this_is_valid.txt\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyigqxwmw.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyigqxwmw.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpyigqxwmw.jl:43\n  Expression: candidate(\"I563_No.exe\") ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyigqxwmw.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyigqxwmw.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpyigqxwmw.jl:44\n  Expression: candidate(\"Is3youfault.txt\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/"
  stderr: "ERROR: LoadError: Some tests did not pass: 20 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyigqxwmw.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    number_of_digits = 0\n\
    \    # TODO: return 'Yes' if the file's name is valid, and 'No' otherwise.\n \
    \   return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl5wagffn.jl:25\n  Expression: candidate(\"\
    1example.dll\") == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl5wagffn.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl5wagffn.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpl5wagffn.jl:26\n  Expression: candidate(\"s1sdf3.asd\") ==\
    \ \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl5wagffn.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl5wagffn.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpl5wagffn.jl:29\n  Expression: candidate(\"His12FILE94.exe\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl5wagffn.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl5wagffn.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpl5wagffn.jl:30\n  Expression: candidate(\"_Y.txt\") == \"\
    No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpl5wagffn.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl5wagffn.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpl5wagffn.jl:31\n  Expression: candidate(\"?aREYA.exe\") ==\
    \ \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/s"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 19 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl5wagffn.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if (count(r\"[0-9]\"\
    , file_name) > 3 || count(r\"\\.\", file_name) != 1)\n        return \"No\"\n\
    \    end\n    extension = split(file_name, r\"\\.\")[2]\n    if (startswith(file_name,\
    \ r\"[A-Za-z]\") && extension in [\"txt\", \"exe\", \"dll\"])\n        return\
    \ \"Yes\"\n    end\n    return \"No\"\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"\
    1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   26     26\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    return \"Yes\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbyrv7143.jl:23\n  Expression: candidate(\"\
    1example.dll\") == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbyrv7143.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbyrv7143.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpbyrv7143.jl:24\n  Expression: candidate(\"s1sdf3.asd\") ==\
    \ \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbyrv7143.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbyrv7143.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpbyrv7143.jl:27\n  Expression: candidate(\"His12FILE94.exe\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbyrv7143.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbyrv7143.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpbyrv7143.jl:28\n  Expression: candidate(\"_Y.txt\") == \"\
    No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpbyrv7143.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbyrv7143.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpbyrv7143.jl:29\n  Expression: candidate(\"?aREYA.exe\") ==\
    \ \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/s"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 19 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbyrv7143.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    # Number of digits\
    \ in the filename\n    n_digits = 0\n    for i in file_name\n        if '0' <=\
    \ i <= '9'\n            n_digits += 1\n        end\n    end\n    \n    # If the\
    \ filename does not meet the conditions: return 'No'\n    if n_digits > 3\n  \
    \      return \"No\"\n    end\n    \n    # The last index of the dot\n    dot_idx\
    \ = findfirst(x -> x == '.', file_name)\n    \n    # The extension\n    extension\
    \ = file_name[dot_idx+1:end]\n    \n    # If the extension does not meet the conditions:\
    \ return 'No'\n    if extension != \"txt\" && extension != \"exe\" && extension\
    \ != \"dll\"\n        return \"No\"\n    end\n    \n    # The name\n    name =\
    \ file_name[1:dot_idx-1]\n    \n    # If the name does not meet the conditions:\
    \ return 'No'\n    if name == \"\" || !((('a' <= name[1] <= 'z') || ('A' <= name[1]\
    \ <= 'Z')) && !(('0' <= name[1] <= '9')))\n        return \"No\"\n    end\n  \
    \  \n    # If all conditions are met: return 'Yes'\n    return \"Yes\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpoqvouqfo.jl:78\n  Test threw exception\n\
    \  Expression: candidate(\"final132\") == \"No\"\n  MethodError: no method matching\
    \ +(::Nothing, ::Int64)\n  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any,\
    \ !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    +(!Matched::T, ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:87\n\
    \    +(!Matched::T, ::Integer) where T<:AbstractChar at /shared/centos7/julia/1.7.3/share/julia/base/char.jl:237\n\
    \    ...\n  Stacktrace:\n   [1] file_name_check(file_name::String)\n     @ Main\
    \ /tmp/tmpoqvouqfo.jl:33\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpoqvouqfo.jl:78 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpoqvouqfo.jl:55\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |   25      1     26\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 25 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoqvouqfo.jl:53\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # write your code here\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpuk03cqax.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpuk03cqax.jl:16\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpuk03cqax.jl:22 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpuk03cqax.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpuk03cqax.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpuk03cqax.jl:16\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpuk03cqax.jl:23 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    file_name_check_fn(file_name)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphwc4vl7o.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"example.txt\") == \"Yes\"\n  UndefVarError: file_name_check_fn\
    \ not defined\n  Stacktrace:\n   [1] file_name_check(file_name::String)\n    \
    \ @ Main /tmp/tmphwc4vl7o.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphwc4vl7o.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphwc4vl7o.jl:21\ntest set:\
    \ Error During Test at /tmp/tmphwc4vl7o.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\n  UndefVarError: file_name_check_fn not\
    \ defined\n  Stacktrace:\n   [1] file_name_check(file_name::String)\n     @ Main\
    \ /tmp/tmphwc4vl7o.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphwc4vl7o.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphwc4vl7o.jl:21\ntest set:\
    \ Error During Test at /tmp/tmphwc4vl7o.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\n  UndefVarError: file_name_check_fn not\
    \ defined\n  Stacktrace:\n   [1] file_name_check(file_name::String)\n     @ Main\
    \ /tmp/tmphwc4vl7o.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphwc4vl7o.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphwc4vl7o.jl:21\ntest set:\
    \ Error During Test at /tmp/tmphwc4vl7o.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"K.dll\") == \"Yes\"\n  UndefVarError: file_name_check_fn not defined\n\
    \  Stacktrace:\n   [1] file_name_check(file_name::String)\n     @"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 26 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphwc4vl7o.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    state = 0\n  \
    \  current = 0\n    file_name_length = length(file_name)\n    counter = 0\n  \
    \  sub_before_dot = \"\"\n    sub_after_dot = \"\"\n    has_dot = false\n    is_valid\
    \ = false\n    \n    for i = 1:file_name_length\n        \n        if state ==\
    \ 0\n            if ('a' <= file_name[i] <= 'z') || ('A' <= file_name[i] <= 'Z')\n\
    \                state = 1\n                counter = 0\n                current\
    \ = 1\n                sub_before_dot = file_name[i]\n            else\n     \
    \           state = 0\n                counter = 0\n                current =\
    \ 0\n                sub_before_dot = \"\"\n            end\n        elseif state\
    \ == 1\n            if '0' <= file_name[i] <= '9'\n                state = 1\n\
    \                counter += 1\n                current = 1\n                sub_before_dot\
    \ = sub_before_dot * file_name[i]\n            elseif 'a' <= file_name[i] <= 'z'\
    \ || 'A' <= file_name[i] <= 'Z'\n                state = 1\n                counter\
    \ = 0\n                current = 1\n                sub_before_dot = sub_before_dot\
    \ * file_name[i]\n            elseif file_name[i] == '.'\n                state\
    \ = 2\n                counter = 0\n                current = 1\n            \
    \    sub_before_dot = sub_before_dot * file_name[i]\n                has_dot =\
    \ true\n            else\n                state = 0\n                counter =\
    \ 0\n                current = 0\n                sub_before_dot = \"\"\n    \
    \        end\n        elseif state == 2\n            if 'a' <= file_name[i] <=\
    \ 'z' || 'A' <= file_name[i] <= 'Z'\n                state = 3\n             \
    \   counter = 0\n                current = 1\n                sub_after_dot =\
    \ file_name[i]\n            else\n                state = 0\n                counter\
    \ = 0\n                current = 0\n                sub_before_dot = \"\"\n  \
    \              sub_after_dot = \"\"\n            end\n        elseif state ==\
    \ 3\n            if 'a' <= file_name\nusing Test\n\n@testset begin\n\ncandidate\
    \ = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"\
    1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwo5r1jwa.jl:1\nin expression starting at /tmp/tmpwo5r1jwa.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if number_of_numbers(file_name)\
    \ > 3 \n        return \"No\"\n    end\n    if !file_name_includes_dot(file_name)\n\
    \        return \"No\"\n    end\n    if !file_name_is_not_empty(file_name)\n \
    \       return \"No\"\n    end\n    if !file_name_starts_with_latin_letter(file_name)\n\
    \        return \"No\"\n    end\n    if !file_name_extension_is_valid(file_name)\n\
    \        return \"No\"\n    end\n    return \"Yes\"\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") ==\
    \ \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpstf00hcm.jl:37\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  UndefVarError:\
    \ number_of_numbers not defined\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\\
    n     @ Main /tmp/tmpstf00hcm.jl:15\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpstf00hcm.jl:37 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpstf00hcm.jl:36\\ntest set:\
    \ Error During Test at /tmp/tmpstf00hcm.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  UndefVarError: number_of_numbers not\
    \ defined\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpstf00hcm.jl:15\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpstf00hcm.jl:38 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpstf00hcm.jl:36\\ntest set:\
    \ Error During Test at /tmp/tmpstf00hcm.jl:39\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  UndefVarError: number_of_numbers not\
    \ defined\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpstf00hcm.jl:15\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpstf00hcm.jl:39 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpstf00hcm.jl:36\\ntest set:\
    \ Error During Test at /tmp/tmpstf00hcm.jl:40\\n  Test threw exception\\n  Expression:\
    \ candidate(\"K.dll\") == \"Yes\"\\n  UndefVarError: number_of_numbers not defined\\\
    n  Stacktrace:\\n"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if match(r\"^[a-zA-Z]\\\
    w*\\.(txt|exe|dll)$\", file_name) == nothing\n        return \"No\"\n    else\n\
    \        return \"Yes\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"\
    1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsc_xx1ip.jl:31\n  Expression: candidate(\"\
    His12FILE94.exe\") == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsc_xx1ip.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsc_xx1ip.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpsc_xx1ip.jl:44\n  Expression: candidate(\"no_one#knows.dll\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsc_xx1ip.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsc_xx1ip.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   24     2     26\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 24 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsc_xx1ip.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # Put your code here\n\
    \    return \"No\"\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp704kc0jv.jl:23\n  Expression: candidate(\"\
    example.txt\") == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp704kc0jv.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp704kc0jv.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp704kc0jv.jl:26\n  Expression: candidate(\"K.dll\") == \"Yes\"\
    \n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp704kc0jv.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp704kc0jv.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp704kc0jv.jl:27\n  Expression: candidate(\"MY16FILE3.exe\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp704kc0jv.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp704kc0jv.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp704kc0jv.jl:33\n  Expression: candidate(\"this_is_valid.txt\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp704kc0jv.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp704kc0jv.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp704kc0jv.jl:39\n  Expression: candidate(\"I563_No.exe\") ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/shar"
  stderr: "ERROR: LoadError: Some tests did not pass: 19 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp704kc0jv.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    digits = \"0\"::String\n\
    \    for i in '1'::'9'\n        digits *= i\n    end\n    name_parts = split(file_name,\
    \ '.')\n    if length(name_parts) != 2\n        return \"No\"\n    end\n    if\
    \ length(name_parts[1]) == 0\n        return \"No\"\n    end\n    if name_parts[1][1]\
    \ in digits\n        return \"No\"\n    end\n    if !(name_parts[2] in [\"txt\"\
    , \"exe\", \"dll\"])\n        return \"No\"\n    end\n    return \"Yes\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1dqt_ww1.jl:39\n  Test threw exception\n\
    \  Expression: candidate(\"example.txt\") == \"Yes\"\n  TypeError: in typeassert,\
    \ expected Type, got a value of type Char\n  Stacktrace:\n   [1] file_name_check(file_name::String)\n\
    \     @ Main /tmp/tmp1dqt_ww1.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1dqt_ww1.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1dqt_ww1.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp1dqt_ww1.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\n  TypeError: in typeassert, expected\
    \ Type, got a value of type Char\n  Stacktrace:\n   [1] file_name_check(file_name::String)\n\
    \     @ Main /tmp/tmp1dqt_ww1.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1dqt_ww1.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1dqt_ww1.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp1dqt_ww1.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\n  TypeError: in typeassert, expected Type,\
    \ got a value of type Char\n  Stacktrace:\n   [1] file_name_check(file_name::String)\n\
    \     @ Main /tmp/tmp1dqt_ww1.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1dqt_ww1.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1dqt_ww1.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp1dqt_ww1.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"K.dll\") == \"Yes\"\n  TypeError: in typeassert, expected Type,\
    \ got a v"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 26 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1dqt_ww1.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    return file_name[1]\
    \ in 'a'..'z' || file_name[1] in 'A'..'Z' ? 'Yes' : 'No'\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpbzisfpq4.jl:15\nin expression\
    \ starting at /tmp/tmpbzisfpq4.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if count(x->x in '0':'9',\
    \ file_name) > 3\n        return \"No\"\n    end\n    dot_index = indexin(\".\"\
    , file_name)\n    if dot_index == nothing\n        return \"No\"\n    end\n  \
    \  extension = file_name[dot_index+1:end]\n    if extension in [\"txt\", \"exe\"\
    , \"dll\"]\n        return \"Yes\"\n    else\n        return \"No\"\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmphte0fb5v.jl:34\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ no method matching indexin(::String, ::String)\\n  Closest candidates are:\\\
    n    indexin(::Any, !Matched::AbstractArray) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2352\\\
    n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @ Main /tmp/tmphte0fb5v.jl:18\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmphte0fb5v.jl:34 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmphte0fb5v.jl:33\\ntest set:\
    \ Error During Test at /tmp/tmphte0fb5v.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: no method matching indexin(::String,\
    \ ::String)\\n  Closest candidates are:\\n    indexin(::Any, !Matched::AbstractArray)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2352\\n  Stacktrace:\\\
    n   [1] file_name_check(file_name::String)\\n     @ Main /tmp/tmphte0fb5v.jl:18\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmphte0fb5v.jl:35 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmphte0fb5v.jl:33\\ntest set:\
    \ Error During Test at /tmp/tmphte0fb5v.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: no method matching indexin(::String,\
    \ ::String)\\n  Closest candidates are:\\n    indexin(::Any, !Matched::AbstractArray)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2352\\n  Stacktrace:\\\
    n   [1] file_name_check(file_name::String)\\n     @ Main /tmp/tmphte0fb5v.jl:18\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/s"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    \"\"\"For example, you can use the following code to test your function with the\
    \ above \n    examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n   \
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    \"\"\"\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nusing Test\n\n@testset begin\n\
    \ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\"\
    )\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\"\
    ) == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"\
    _Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\") == \"No\")\n\t@test(candidate(\"\
    /this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"this_is_valid.wow\") ==\
    \ \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"Yes\")\n\t@test(candidate(\"\
    this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"#this2_i4s_5valid.ten\"\
    ) == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\") == \"No\")\n\t@test(candidate(\"\
    this_is_12valid.6exe4.txt\") == \"No\")\n\t@test(candidate(\"all.exe.txt\") ==\
    \ \"No\")\n\t@test(candidate(\"I563_No.exe\") == \"Yes\")\n\t@test(candidate(\"\
    Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"no_one#knows.dll\") == \"\
    Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\")\n\t@test(candidate(\"\
    I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\") == \"No\")\n\t\
    @test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"_f4indsartal132.\"\
    ) == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"s.\"\
    ) == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpg3it0_t5.jl:241\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpg3it0_t5.jl:16\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpg3it0_t5.jl:241 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpg3it0_t5.jl:240\\ntest set:\
    \ Error During Test at /tmp/tmpg3it0_t5.jl:242\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpg3it0_t5.jl:16\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpg3it0_t5.jl:242 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/j"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    has_dot, number_of_digits,\
    \ has_extension = false, 0, false\n    for i in 1:length(file_name)\n        if\
    \ (file_name[i] == '.')\n            has_dot = true\n        elseif (('0' <= file_name[i])\
    \ && (file_name[i] <= '9'))\n            number_of_digits += 1\n        elseif\
    \ (has_dot)\n            extension = file_name[i:end]\n            has_extension\
    \ = (extension in [\"txt\", \"exe\", \"dll\"])\n        end\n    end\n    return\
    \ (has_dot && (number_of_digits <= 3) && has_extension) ? 'Yes' : 'No'\nend\n\"\
    \"\"\nTests\n\"\"\"\nassert(file_name_check(\"example.txt\") == 'Yes')\nassert(file_name_check(\"\
    1example.dll\") == 'No')\nassert(file_name_check(\"exam.ple.txt\") == 'No')\n\
    assert(file_name_check(\"my-example.txt\") == 'Yes')\nassert(file_name_check(\"\
    my-example.dll\") == 'Yes')\nassert(file_name_check(\"my-example.exe\") == 'Yes')\n\
    assert(file_name_check(\"my-exa.mp.le.dll\") == 'No')\nassert(file_name_check(\"\
    my-exa.mp.le.exe\") == 'No')\nassert(file_name_check(\"my-exa.mp.le.txt\") ==\
    \ 'No')\n \n\"\"\"Create a function which takes a string representing a name,\
    \ and returns \"Welcome back, <name>.\"\n    if the name is known and \"I don't\
    \ know you.\" otherwise.\n    Examples:\n    welcome_back(\"Ahmed\") # => \"Welcome\
    \ back, Ahmed.\"\n    welcome_back(\"John\") # => \"I don't know you.\"\n    \"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpnzzh7gfm.jl:26\nin expression\
    \ starting at /tmp/tmpnzzh7gfm.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    i = 0\n    cnt = 0\n\
    \    while i < length(file_name)\n        if isdigit(file_name[i])\n         \
    \   cnt += 1\n        end\n        i += 1\n    end\n    if cnt > 3 || count(x\
    \ -> x == '.', file_name) != 1 || file_name[1] in '0'::9\n        return \"No\"\
    \n    end\n    file_name = split(file_name, '.')\n    if file_name[2] in ['txt',\
    \ 'exe', 'dll']\n        return \"Yes\"\n    end\n    return \"No\"\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp7rad9fu1.jl:27\nin expression\
    \ starting at /tmp/tmp7rad9fu1.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    digits_count = 0\n \
    \   latin_letters_count = 0\n    dot_count = 0\n    sub_strings = split(file_name,\
    \ '.')\n    if length(sub_strings) > 2\n        return \"No\"\n    end\n    if\
    \ length(sub_strings) == 1\n        return \"No\"\n    end\n    for char in file_name\n\
    \        if char in '0':'9'\n            digits_count += 1\n        end\n    \
    \    if char in 'a':'z'\n            latin_letters_count += 1\n        end\n \
    \       if char in 'A':'Z'\n            latin_letters_count += 1\n        end\n\
    \        if char == '.'\n            dot_count += 1\n        end\n    end\n  \
    \  sub_string_after_dot = sub_strings[2]\n    if digits_count > 3\n        return\
    \ \"No\"\n    end\n    if dot_count != 1\n        return \"No\"\n    end\n   \
    \ if sub_strings[1] == \"\"\n        return \"No\"\n    end\n    if length(sub_strings[1])\
    \ == 1\n        if sub_strings[1] in 'a':'z'\n            if sub_string_after_dot\
    \ == \"txt\" || sub_string_after_dot == \"exe\" || sub_string_after_dot == \"\
    dll\"\n                return \"Yes\"\n            end\n        end\n        if\
    \ sub_strings[1] in 'A':'Z'\n            if sub_string_after_dot == \"txt\" ||\
    \ sub_string_after_dot == \"exe\" || sub_string_after_dot == \"dll\"\n       \
    \         return \"Yes\"\n            end\n        end\n    end\n    if latin_letters_count\
    \ == 0\n        return \"No\"\n    end\n    if sub_string_after_dot == \"txt\"\
    \ || sub_string_after_dot == \"exe\" || sub_string_after_dot == \"dll\"\n    \
    \    return \"Yes\"\n    end\n    return \"No\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\"\
    )\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\"\
    ) == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"\
    _Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\") == \"No\")\n\t@test(candidate(\"\
    /this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"this_is_valid.wow\") ==\
    \ \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"Yes\")\n\t@test(candidate(\"\
    this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"#this2_i4s_5valid.ten\"\
    ) == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\") == \"No\")\n\t@test(candidate(\"\
    this_is_12valid.6exe4.txt\") == \"No\")\n\t@test(candidate(\"all.exe.txt\") ==\
    \ \"No\")\n\t@test(candidate(\"I563_No.exe\") == \"Yes\")\n\t@test(candidate(\"\
    Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"no_one#knows.dll\") == \"\
    Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\")\n\t@test(candidate(\"\
    I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\") == \"No\")\n\t\
    @test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"_f4indsartal132.\"\
    ) == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"s.\"\
    ) == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7jab5may.jl:75\n  Expression: candidate(\"\
    1example.dll\") == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7jab5may.jl:75 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7jab5may.jl:73\ntest set: Test\
    \ Failed at /tmp/tmp7jab5may.jl:80\n  Expression: candidate(\"_Y.txt\") == \"\
    No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7jab5may.jl:80 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7jab5may.jl:73\ntest set: Test\
    \ Failed at /tmp/tmp7jab5may.jl:81\n  Expression: candidate(\"?aREYA.exe\") ==\
    \ \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7jab5may.jl:81 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7jab5may.jl:73\ntest set: Test\
    \ Failed at /tmp/tmp7jab5may.jl:82\n  Expression: candidate(\"/this_is_valid.dll\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7jab5may.jl:82 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7jab5may.jl:73\ntest set: Test\
    \ Failed at /tmp/tmp7jab5may.jl:87\n  Expression: candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/"
  stderr: "ERROR: LoadError: Some tests did not pass: 21 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7jab5may.jl:71\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    counter = 0\n    dot_counter\
    \ = 0\n    if length(file_name) == 0 return \"No\" end\n    for i = 1:length(file_name)\n\
    \        if ('0' <= file_name[i] <= '9')\n            counter += 1\n        end\n\
    \        if file_name[i] == '.'\n            dot_counter += 1\n        end\n \
    \   end\n    if counter > 3 return \"No\" end\n    if dot_counter != 1 return\
    \ \"No\" end\n    if !((file_name[1] >= 'a' && file_name[1] <= 'z') || (file_name[1]\
    \ >= 'A' && file_name[1] <= 'Z'))\n        return \"No\"\n    end\n    if length(file_name)\
    \ > 4 && file_name[end-3:end] == \".txt\"\n        return \"Yes\"\n    elseif\
    \ length(file_name) > 4 && file_name[end-3:end] == \".exe\"\n        return \"\
    Yes\"\n    elseif length(file_name) > 4 && file_name[end-3:end] == \".dll\"\n\
    \        return \"Yes\"\n    else\n        return \"No\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   26     26\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    digits = '0':'9'\n \
    \   letters = 'a':'z'\n    file_extensions = [\"txt\", \"exe\", \"dll\"]\n   \
    \ counter = 0\n    dot_counter = 0\n    for i in 1:length(file_name)\n       \
    \ if file_name[i] in digits\n            counter += 1\n        end\n        if\
    \ file_name[i] == '.'\n            dot_counter += 1\n        end\n    end\n  \
    \  if counter <= 3 && dot_counter == 1 && any(i in file_extensions for i in split(file_name,\
    \ '.')[2])\n        return \"Yes\"\n    else\n        return \"No\"\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7u9bjcr0.jl:39\n  Expression: candidate(\"\
    example.txt\") == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7u9bjcr0.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7u9bjcr0.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp7u9bjcr0.jl:42\n  Expression: candidate(\"K.dll\") == \"Yes\"\
    \n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7u9bjcr0.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7u9bjcr0.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp7u9bjcr0.jl:43\n  Expression: candidate(\"MY16FILE3.exe\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7u9bjcr0.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7u9bjcr0.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp7u9bjcr0.jl:49\n  Expression: candidate(\"this_is_valid.txt\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7u9bjcr0.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7u9bjcr0.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp7u9bjcr0.jl:55\n  Expression: candidate(\"I563_No.exe\") ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/shar"
  stderr: "ERROR: LoadError: Some tests did not pass: 19 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7u9bjcr0.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # TODO\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpu073k0v9.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpu073k0v9.jl:16\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpu073k0v9.jl:22 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpu073k0v9.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpu073k0v9.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpu073k0v9.jl:16\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpu073k0v9.jl:23 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    count_dot = 0 \n   \
    \ count_number = 0\n    for s in file_name\n        if s in \"0123456789\"\n \
    \           count_number = count_number + 1\n        end\n        if s == \".\"\
    \n            count_dot = count_dot + 1\n        end\n    end\n    if count_number\
    \ > 3\n        return \"No\"\n    end\n    if count_dot != 1\n        return \"\
    No\"\n    end\n    if count_dot == 1\n        file_name_split = split(file_name,\
    \ \".\")\n        if length(file_name_split[1]) == 0\n            return \"No\"\
    \n        end\n        if file_name_split[2] ! in [\"txt\", \"exe\", \"dll\"]\n\
    \            return \"No\"\n        end\n        if file_name_split[1][1] in \"\
    1234567890\"\n            return \"No\"\n        end\n    end\n    return \"Yes\"\
    \nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"[\" not allowed in \"in [\" at\
    \ /tmp/tmpksudha47.jl:36\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpksudha47.jl:36\n\
    in expression starting at /tmp/tmpksudha47.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if count(r\"\\d\", file_name)\
    \ > 3 || count(r\"\\.\", file_name) != 1\n        return \"No\"\n    end\n   \
    \ if length(file_name) == 1\n        return \"No\"\n    end\n    if is_match(r\"\
    [a-zA-Z]\", file_name[1]) != true\n        return \"No\"\n    end\n    file_name\
    \ = split(file_name, '.')\n    if !(file_name[2] in [\"txt\", \"exe\", \"dll\"\
    ])\n        return \"No\"\n    end\n    return \"Yes\"\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") ==\
    \ \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphtxjc71i.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"example.txt\") == \"Yes\"\n  UndefVarError: is_match\
    \ not defined\n  Stacktrace:\n   [1] file_name_check(file_name::String)\n    \
    \ @ Main /tmp/tmphtxjc71i.jl:21\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphtxjc71i.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphtxjc71i.jl:34\ntest set:\
    \ Error During Test at /tmp/tmphtxjc71i.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\n  UndefVarError: is_match not defined\n\
    \  Stacktrace:\n   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmphtxjc71i.jl:21\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphtxjc71i.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphtxjc71i.jl:34\ntest set:\
    \ Error During Test at /tmp/tmphtxjc71i.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\n  UndefVarError: is_match not defined\n\
    \  Stacktrace:\n   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmphtxjc71i.jl:21\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphtxjc71i.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphtxjc71i.jl:34\ntest set:\
    \ Error During Test at /tmp/tmphtxjc71i.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"K.dll\") == \"Yes\"\n  UndefVarError: is_match not defined\n  Stacktrace:\n\
    \   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmphtxjc71i.jl:21\n\
    \   [2] macr"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 18 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphtxjc71i.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if (file_name contains(\"\
    \\$\"))\n        return \"No\"\n    end\n    splitted_name = split(file_name,\
    \ \".\")\n    if length(splitted_name) != 2\n        return \"No\"\n    end\n\
    \    if (length(splitted_name[1]) == 0)\n        return \"No\"\n    end\n    if\
    \ (splitted_name[1][1] in ('0':'9'))\n        return \"No\"\n    end\n    if (splitted_name[2]\
    \ != \"txt\" && splitted_name[2] != \"exe\" && splitted_name[2] != \"dll\")\n\
    \        return \"No\"\n    end\n    count = 0\n    for character in splitted_name[1]\n\
    \        if (character in ('0':'9'))\n            count += 1\n        end\n  \
    \  end\n    if (count > 3)\n        return \"No\"\n    end\n    return \"Yes\"\
    \nend\n \nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2nvl8zwl.jl:15\nin expression starting at\
    \ /tmp/tmp2nvl8zwl.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # TODO: add your code\
    \ here\nend\n# test your code\nprintln(file_name_check(\"example.txt\"))\nprintln(file_name_check(\"\
    1example.dll\"))\nprintln(file_name_check(\"example1.txt\"))\n \n \n# This is\
    \ an example test, feel free to write your own test\n@testset \"basic tests\"\
    \ begin\n    @test file_name_check(\"example.txt\") == \"Yes\"\n    @test file_name_check(\"\
    1example.dll\") == \"No\"\n    @test file_name_check(\"example1.txt\") == \"Yes\"\
    \n    @test file_name_check(\"example.d\") == \"No\"\n    @test file_name_check(\"\
    example.dll\") == \"Yes\"\n    @test file_name_check(\"example.exe\") == \"Yes\"\
    \n    @test file_name_check(\"a.exe\") == \"Yes\"\n    @test file_name_check(\"\
    123.exe\") == \"No\"\n    @test file_name_check(\"a.dll\") == \"Yes\"\n    @test\
    \ file_name_check(\"a.txt\") == \"Yes\"\n    @test file_name_check(\"a.txt.exe\"\
    ) == \"No\"\n    @test file_name_check(\"a.txt1\") == \"No\"\n    @test file_name_check(\"\
    a.12\") == \"No\"\n    @test file_name_check(\"a.12txt\") == \"No\"\n    @test\
    \ file_name_check(\"a12.txt\") == \"Yes\"\n    @test file_name_check(\"a12.exe\"\
    ) == \"Yes\"\n    @test file_name_check(\"a12.dll\") == \"Yes\"\n    @test file_name_check(\"\
    a123.txt\") == \"No\"\n    @test file_name_check(\"a1234.txt\") == \"No\"\n  \
    \  @test file_name_check(\"a12345.txt\") == \"No\"\n    @test file_name_check(\"\
    a123456.txt\") == \"No\"\n    @test file_name_check(\"123.txt\") == \"No\"\n \
    \   @test file_name_check(\"1234.txt\nusing Test\n\n@testset begin\n\ncandidate\
    \ = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"\
    1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type String\nClosest candidates are:\n  convert(::Type{String},\
    \ !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \  convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \  convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \  ...\nStacktrace:\n [1] file_name_check(file_name::String)\n   @ Main /tmp/tmpavzxwxb0.jl:16\n\
    \ [2] top-level scope\n   @ /tmp/tmpavzxwxb0.jl:18\nin expression starting at\
    \ /tmp/tmpavzxwxb0.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    count = 0\n    for n\
    \ in file_name\n        if n in '0123456789'\n            count += 1\n       \
    \ end\n    end\n    if file_name[end] == '.'\n        return 'No'\n    end\n \
    \   if file_name[end] in '0123456789'\n        return 'No'\n    end\n    if count\
    \ > 3\n        return 'No'\n    end\n    if occursin('.', file_name) != 1\n  \
    \      return 'No'\n    end\n    if file_name[1] in '0123456789'\n        return\
    \ 'No'\n    end\n    if file_name[file_name.find('.')+1:end] in [\"txt\", \"exe\"\
    , \"dll\"]\n        return 'Yes'\n    end\n    return 'No'\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpjjqq9z68.jl:17\nin expression\
    \ starting at /tmp/tmpjjqq9z68.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    num_of_digits_in_file_name\
    \ = length(matchall(r\"[0-9]\", file_name))\n    num_of_dots_in_file_name = length(matchall(r\"\
    \\.\", file_name))\n    if num_of_digits_in_file_name < 3 && num_of_dots_in_file_name\
    \ == 1\n        substring_before_dot = match(r\"^[a-zA-Z]+\", file_name)\n   \
    \     substring_after_dot = match(r\"\\.[a-zA-Z]+$\", file_name)\n        if substring_before_dot\
    \ != \"\" && substring_after_dot in [\"txt\", \"exe\", \"dll\"]\n            return\
    \ \"Yes\"\n        end\n    end\n    return \"No\"\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") ==\
    \ \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmplorfipvk.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"example.txt\") == \"Yes\"\n  UndefVarError: matchall\
    \ not defined\n  Stacktrace:\n   [1] file_name_check(file_name::String)\n    \
    \ @ Main /tmp/tmplorfipvk.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplorfipvk.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplorfipvk.jl:30\ntest set:\
    \ Error During Test at /tmp/tmplorfipvk.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\n  UndefVarError: matchall not defined\n\
    \  Stacktrace:\n   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmplorfipvk.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplorfipvk.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplorfipvk.jl:30\ntest set:\
    \ Error During Test at /tmp/tmplorfipvk.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\n  UndefVarError: matchall not defined\n\
    \  Stacktrace:\n   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmplorfipvk.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplorfipvk.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplorfipvk.jl:30\ntest set:\
    \ Error During Test at /tmp/tmplorfipvk.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"K.dll\") == \"Yes\"\n  UndefVarError: matchall not defined\n  Stacktrace:\n\
    \   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmplorfipvk.jl:15\n\
    \   [2] macr"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 26 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplorfipvk.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    digits_count = count(c->isdigit(c),\
    \ file_name)\n    if digits_count > 3\n        return \"No\"\n    end\n    dot_count\
    \ = count(c->c == '.', file_name)\n    if dot_count != 1\n        return \"No\"\
    \n    end\n    dot_pos = findfirst(c->c == '.', file_name)\n    if dot_pos ==\
    \ 1\n        return \"No\"\n    end\n    if !(file_name[1] in ('a':'z') || file_name[1]\
    \ in ('A':'Z'))\n        return \"No\"\n    end\n    if !(file_name[dot_pos+1:end]\
    \ in [\"txt\", \"exe\", \"dll\"])\n        return \"No\"\n    end\n    return\
    \ \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   26     26\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    invalid_digits_count\
    \ = sum(c in '0123456789' for c in file_name)\n    is_valid = false\n    if invalid_digits_count\
    \ > 3\n        return \"No\"\n    end\n    if length(file_name) < 6\n        return\
    \ \"No\"\n    end\n    if file_name[1] in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\
    \        file_type = split(file_name, '.')[2]\n        if file_type in ['txt',\
    \ 'exe', 'dll']\n            is_valid = true\n        end\n    end\n    return\
    \ \"Yes\" * is_valid + \"No\" * (1 - is_valid)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\"\
    )\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\"\
    ) == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"\
    _Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\") == \"No\")\n\t@test(candidate(\"\
    /this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"this_is_valid.wow\") ==\
    \ \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"Yes\")\n\t@test(candidate(\"\
    this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"#this2_i4s_5valid.ten\"\
    ) == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\") == \"No\")\n\t@test(candidate(\"\
    this_is_12valid.6exe4.txt\") == \"No\")\n\t@test(candidate(\"all.exe.txt\") ==\
    \ \"No\")\n\t@test(candidate(\"I563_No.exe\") == \"Yes\")\n\t@test(candidate(\"\
    Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"no_one#knows.dll\") == \"\
    Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\")\n\t@test(candidate(\"\
    I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\") == \"No\")\n\t\
    @test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"_f4indsartal132.\"\
    ) == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"s.\"\
    ) == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpanf853ke.jl:15\nin expression\
    \ starting at /tmp/tmpanf853ke.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    file_name = upper(file_name)\n\
    \    temp = split(file_name, '.')\n    result = \"No\"\n    if length(temp) ==\
    \ 2 && length(filter(i->'0'<=i<='9', temp[1]))<=3\n        if temp[2] == \"TXT\"\
    \ || temp[2] == \"EXE\" || temp[2] == \"DLL\"\n            result = \"Yes\"\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\")\n\
    \t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\"\
    ) == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"\
    _Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\") == \"No\")\n\t@test(candidate(\"\
    /this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"this_is_valid.wow\") ==\
    \ \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"Yes\")\n\t@test(candidate(\"\
    this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"#this2_i4s_5valid.ten\"\
    ) == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\") == \"No\")\n\t@test(candidate(\"\
    this_is_12valid.6exe4.txt\") == \"No\")\n\t@test(candidate(\"all.exe.txt\") ==\
    \ \"No\")\n\t@test(candidate(\"I563_No.exe\") == \"Yes\")\n\t@test(candidate(\"\
    Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"no_one#knows.dll\") == \"\
    Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\")\n\t@test(candidate(\"\
    I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\") == \"No\")\n\t\
    @test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"_f4indsartal132.\"\
    ) == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"s.\"\
    ) == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpuf2l4qgb.jl:30\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  UndefVarError:\
    \ upper not defined\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\\
    n     @ Main /tmp/tmpuf2l4qgb.jl:15\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpuf2l4qgb.jl:30 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpuf2l4qgb.jl:29\\ntest set:\
    \ Error During Test at /tmp/tmpuf2l4qgb.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  UndefVarError: upper not defined\\\
    n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @ Main /tmp/tmpuf2l4qgb.jl:15\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpuf2l4qgb.jl:31 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpuf2l4qgb.jl:29\\ntest set:\
    \ Error During Test at /tmp/tmpuf2l4qgb.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  UndefVarError: upper not defined\\n\
    \  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @ Main /tmp/tmpuf2l4qgb.jl:15\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpuf2l4qgb.jl:32 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpuf2l4qgb.jl:29\\ntest set:\
    \ Error During Test at /tmp/tmpuf2l4qgb.jl:33\\n  Test threw exception\\n  Expression:\
    \ candidate(\"K.dll\") == \"Yes\"\\n  UndefVarError: upper not defined\\n  Stacktrace:\\\
    n   [1] file_name_check(file_name::String)\\n     "
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code goes here\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp36vhgxbb.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp36vhgxbb.jl:16\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp36vhgxbb.jl:22 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp36vhgxbb.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp36vhgxbb.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp36vhgxbb.jl:16\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp36vhgxbb.jl:23 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    name = file_name\n \
    \   digits = 0\n    if count(r\"[0-9]\", name) > 3\n        return \"No\"\n  \
    \  end\n    if count(r\"\\.\", name) != 1\n        return \"No\"\n    end\n  \
    \  if count(r\"[a-z]\", name) == 0 && count(r\"[A-Z]\", name) == 0\n        return\
    \ \"No\"\n    end\n    if match(r\"[^a-zA-Z0-9.]\", name) != nothing\n       \
    \ return \"No\"\n    end\n    i = 1\n    while i <= length(name)\n        c =\
    \ name[i]\n        if c in ['0','1','2','3','4','5','6','7','8','9']\n       \
    \     digits += 1\n        end\n        if digits > 3\n            return \"No\"\
    \n        end\n        i += 1\n    end\n    if match(r\"^[a-zA-Z]+\\.dll$\", name)\
    \ != nothing\n        return \"Yes\"\n    end\n    if match(r\"^[a-zA-Z]+\\.exe$\"\
    , name) != nothing\n        return \"Yes\"\n    end\n    if match(r\"^[a-zA-Z]+\\\
    .txt$\", name) != nothing\n        return \"Yes\"\n    end\n    return \"No\"\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl8iqni_k.jl:60\n  Expression: candidate(\"\
    MY16FILE3.exe\") == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl8iqni_k.jl:60 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl8iqni_k.jl:55\ntest set: Test\
    \ Failed at /tmp/tmpl8iqni_k.jl:66\n  Expression: candidate(\"this_is_valid.txt\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl8iqni_k.jl:66 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl8iqni_k.jl:55\ntest set: Test\
    \ Failed at /tmp/tmpl8iqni_k.jl:72\n  Expression: candidate(\"I563_No.exe\") ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl8iqni_k.jl:72 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl8iqni_k.jl:55\ntest set: Test\
    \ Failed at /tmp/tmpl8iqni_k.jl:73\n  Expression: candidate(\"Is3youfault.txt\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl8iqni_k.jl:73 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl8iqni_k.jl:55\ntest set: Test\
    \ Failed at /tmp/tmpl8iqni_k.jl:74\n  Expression: candidate(\"no_one#knows.dll\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/j"
  stderr: "ERROR: LoadError: Some tests did not pass: 21 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl8iqni_k.jl:53\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # put your code here\n\
    \    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8kr8snvv.jl:24\n  Expression: candidate(\"\
    1example.dll\") == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8kr8snvv.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8kr8snvv.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp8kr8snvv.jl:25\n  Expression: candidate(\"s1sdf3.asd\") ==\
    \ \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8kr8snvv.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8kr8snvv.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp8kr8snvv.jl:28\n  Expression: candidate(\"His12FILE94.exe\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8kr8snvv.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8kr8snvv.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp8kr8snvv.jl:29\n  Expression: candidate(\"_Y.txt\") == \"\
    No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8kr8snvv.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8kr8snvv.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp8kr8snvv.jl:30\n  Expression: candidate(\"?aREYA.exe\") ==\
    \ \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/s"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 19 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8kr8snvv.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    num_digits = sum(c in\
    \ '0123456789' for c in file_name)\n    num_dots = sum(c in '.' for c in file_name)\n\
    \    if num_digits > 3 || num_dots != 1 || !islatin(file_name[1])\n        return\
    \ \"No\"\n    end\n    file_end = file_name[(end-2):end]\n    if file_end in [\"\
    txt\", \"exe\", \"dll\"]\n        return \"Yes\"\n    else\n        return \"\
    No\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpu6yrjtc7.jl:15\nin expression\
    \ starting at /tmp/tmpu6yrjtc7.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # Write your code here\n\
    \    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_ulj8e7q.jl:24\n  Expression: candidate(\"\
    1example.dll\") == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_ulj8e7q.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_ulj8e7q.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp_ulj8e7q.jl:25\n  Expression: candidate(\"s1sdf3.asd\") ==\
    \ \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_ulj8e7q.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_ulj8e7q.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp_ulj8e7q.jl:28\n  Expression: candidate(\"His12FILE94.exe\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_ulj8e7q.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_ulj8e7q.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp_ulj8e7q.jl:29\n  Expression: candidate(\"_Y.txt\") == \"\
    No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_ulj8e7q.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_ulj8e7q.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp_ulj8e7q.jl:30\n  Expression: candidate(\"?aREYA.exe\") ==\
    \ \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/s"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 19 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_ulj8e7q.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    count = 0\n    for i\
    \ = 1:length(file_name)\n        if file_name[i] == '.'\n            count = count\
    \ + 1\n        end\n    end\n    if count == 1 && in('a':'z', file_name[1]) ==\
    \ true && \n       in('A':'Z', file_name[1]) == true &&\n       in('txt', file_name[end-2:end])\
    \ == true || \n       in('exe', file_name[end-2:end]) == true || \n       in('dll',\
    \ file_name[end-2:end]) == true \n        return 'Yes'\n    else\n        return\
    \ 'No'\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpop6dbqqx.jl:23\nin expression\
    \ starting at /tmp/tmpop6dbqqx.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if(contains(file_name,\"\
    .\") && count(x->x in \"0\"...\"9\", file_name)<=3 && count(x->x == '.', file_name)==1\
    \ && \n        first(file_name) in \"a\"...\"z\" && first(file_name) in \"A\"\
    ...\"Z\" && last(split(file_name,\".\")) in [\"txt\", \"exe\", \"dll\"])\n   \
    \     return \"Yes\"\n    else\n        return \"No\"\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5ts3ixtz.jl:15\nin expression starting at\
    \ /tmp/tmp5ts3ixtz.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    num_digits = 0\n   \
    \ num_dots = 0\n    num_letters = 0\n    index_of_first_letter = 0\n    index_of_dot\
    \ = 0\n    index_of_last_letter = 0\n    index_of_last_digit = 0\n    extension\
    \ = \"\"\n    for i = 1:length(file_name)\n        if '0' <= file_name[i] <= '9'\n\
    \            num_digits += 1\n            index_of_last_digit = i\n        elseif\
    \ 'a' <= file_name[i] <= 'z' || 'A' <= file_name[i] <= 'Z'\n            if num_letters\
    \ == 0\n                index_of_first_letter = i\n            end\n         \
    \   num_letters += 1\n            index_of_last_letter = i\n        elseif file_name[i]\
    \ == '.'\n            num_dots += 1\n            index_of_dot = i\n        end\n\
    \    end\n    if num_digits <= 3 && num_dots == 1 && index_of_dot > index_of_first_letter\n\
    \        extension = file_name[index_of_dot+1:index_of_last_letter]\n        if\
    \ extension == \"txt\" || extension == \"exe\" || extension == \"dll\"\n     \
    \       return \"Yes\"\n        end\n    end\n    return \"No\"\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqlv1cmup.jl:52\n  Expression: candidate(\"\
    1example.dll\") == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqlv1cmup.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqlv1cmup.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpqlv1cmup.jl:57\n  Expression: candidate(\"_Y.txt\") == \"\
    No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpqlv1cmup.jl:57 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqlv1cmup.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpqlv1cmup.jl:58\n  Expression: candidate(\"?aREYA.exe\") ==\
    \ \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqlv1cmup.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqlv1cmup.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpqlv1cmup.jl:59\n  Expression: candidate(\"/this_is_valid.dll\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqlv1cmup.jl:59 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqlv1cmup.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpqlv1cmup.jl:64\n  Expression: candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/"
  stderr: "ERROR: LoadError: Some tests did not pass: 21 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqlv1cmup.jl:48\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \nend\nusing Test\n\n\
    @testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpm6zh5091.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpm6zh5091.jl:16\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpm6zh5091.jl:22 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpm6zh5091.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpm6zh5091.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpm6zh5091.jl:16\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpm6zh5091.jl:23 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # write your code here\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpg6w0lhsu.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpg6w0lhsu.jl:16\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpg6w0lhsu.jl:22 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpg6w0lhsu.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpg6w0lhsu.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpg6w0lhsu.jl:16\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpg6w0lhsu.jl:23 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    n = count(x->isdigit(x),\
    \ file_name)\n    if n > 3\n        return \"No\"\n    end\n    if count(x->x\
    \ == '.', file_name) != 1\n        return \"No\"\n    end\n    if !in('a':'z',\
    \ file_name[1]) && !in('A':'Z', file_name[1])\n        return \"No\"\n    end\n\
    \    dot = findfirst(x->x == '.', file_name)\n    if dot == 1\n        return\
    \ \"No\"\n    end\n    if !in([\"txt\", \"exe\", \"dll\"], file_name[dot+1:end])\n\
    \        return \"No\"\n    end\n    return \"Yes\"\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") ==\
    \ \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfg3teb_k.jl:39\n  Expression: candidate(\"\
    example.txt\") == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfg3teb_k.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfg3teb_k.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpfg3teb_k.jl:42\n  Expression: candidate(\"K.dll\") == \"Yes\"\
    \n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfg3teb_k.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfg3teb_k.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpfg3teb_k.jl:43\n  Expression: candidate(\"MY16FILE3.exe\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfg3teb_k.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfg3teb_k.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpfg3teb_k.jl:49\n  Expression: candidate(\"this_is_valid.txt\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfg3teb_k.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfg3teb_k.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpfg3teb_k.jl:55\n  Expression: candidate(\"I563_No.exe\") ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/shar"
  stderr: "ERROR: LoadError: Some tests did not pass: 19 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfg3teb_k.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    count = 0\n    words\
    \ = file_name.split(\".\")\n    if length(words) == 2\n        for i in words[1]\n\
    \            if i in ('a':'z', 'A':'Z')\n                count += 1\n        \
    \    end\n        end\n        if count >= 1 && length(words[1]) == 3\n      \
    \      return \"Yes\"\n        else\n            return \"No\"\n        end\n\
    \    else\n        return \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\"\
    )\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\"\
    ) == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"\
    _Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\") == \"No\")\n\t@test(candidate(\"\
    /this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"this_is_valid.wow\") ==\
    \ \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"Yes\")\n\t@test(candidate(\"\
    this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"#this2_i4s_5valid.ten\"\
    ) == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\") == \"No\")\n\t@test(candidate(\"\
    this_is_12valid.6exe4.txt\") == \"No\")\n\t@test(candidate(\"all.exe.txt\") ==\
    \ \"No\")\n\t@test(candidate(\"I563_No.exe\") == \"Yes\")\n\t@test(candidate(\"\
    Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"no_one#knows.dll\") == \"\
    Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\")\n\t@test(candidate(\"\
    I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\") == \"No\")\n\t\
    @test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"_f4indsartal132.\"\
    ) == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"s.\"\
    ) == \"No\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_m42wadl.jl:37\n  Test threw exception\n\
    \  Expression: candidate(\"example.txt\") == \"Yes\"\n  type String has no field\
    \ split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n  \
    \ [2] file_name_check(file_name::String)\n     @ Main /tmp/tmp_m42wadl.jl:16\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_m42wadl.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_m42wadl.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp_m42wadl.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\n  type String has no field split\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] file_name_check(file_name::String)\n\
    \     @ Main /tmp/tmp_m42wadl.jl:16\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_m42wadl.jl:38 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_m42wadl.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp_m42wadl.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\n  type String has no field split\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] file_name_check(file_name::String)\n\
    \     @ Main /tmp/tmp_m42wadl.jl:16\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_m42wadl.jl:39 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_m42wadl.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp_m42wadl.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"K.dll\") == \"Yes\"\n  type S"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 26 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_m42wadl.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    valid_extensions = [\"\
    txt\", \"exe\", \"dll\"]\n    valid_name = false\n    is_empty = (file_name ==\
    \ \"\")\n    matches = match(r\"(?<=\\.)\\w+$\", file_name)\n    if length(match(r\"\
    \\d\", file_name)) <= 3 && \n    length(match(r\"\\.\", file_name)) == 1 &&\n\
    \    length(match(r\"^[a-zA-Z]\", file_name)) == 1 &&\n    !is_empty\n       \
    \ valid_name = true\n    end\n    for ext in valid_extensions\n        if matches\
    \ == ext\n            valid_name = true\n        end\n    end\n    if valid_name\n\
    \        return \"Yes\"\n    else\n        return \"No\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpu0qlfeva.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ no method matching length(::Nothing)\\n  Closest candidates are:\\n    length(!Matched::Union{Base.KeySet,\
    \ Base.ValueIterator}) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:58\\\
    n    length(!Matched::Union{LinearAlgebra.Adjoint{T, S}, LinearAlgebra.Transpose{T,\
    \ S}} where {T, S}) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/adjtrans.jl:171\\\
    n    length(!Matched::Base.InvasiveLinkedListSynchronized) at /shared/centos7/julia/1.7.3/share/julia/base/task.jl:604\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpu0qlfeva.jl:19\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpu0qlfeva.jl:41 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpu0qlfeva.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpu0qlfeva.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(\"K.dll\") == \"Yes\"\\n  MethodError: no method matching length(::Nothing)\\\
    n  Closest candidates are:\\n    length(!Matched::Union{Base.KeySet, Base.ValueIterator})\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:58\\n    length(!Matched::Union{LinearAlgebra.Adjoint{T,\
    \ S}, LinearAlgebra.Transpose{T, S}} where {T, S}) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/adjtrans.jl:171\\\
    n    length(!Matched::Base.InvasiveLinkedListSynchronized) at /shared/centos7/julia/1.7.3/share/julia/base/task.jl:604\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpu0qlfeva.jl:19\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpu0qlfeva.jl:44 [inlined]\\\
    n   [4] macro expansio"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    \    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp7np8c74g.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp7np8c74g.jl:16\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp7np8c74g.jl:25 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp7np8c74g.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmp7np8c74g.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp7np8c74g.jl:16\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp7np8c74g.jl:26 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    #...\n    #...\nusing\
    \ Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpz4tbx8a2.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpz4tbx8a2.jl:1\n\
    in expression starting at /tmp/tmpz4tbx8a2.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    cnt_digit = 0\n    cnt_dot\
    \ = 0\n    cnt_other = 0\n    cnt_ascii = 0\n    cnt_small = 0\n    cnt_big =\
    \ 0\n    for i in 1:length(file_name)\n        if '0' <= file_name[i] <= '9'\n\
    \            cnt_digit += 1\n        elseif file_name[i] == '.'\n            cnt_dot\
    \ += 1\n        elseif 'a' <= file_name[i] <= 'z'\n            cnt_small += 1\n\
    \        elseif 'A' <= file_name[i] <= 'Z'\n            cnt_big += 1\n       \
    \ else\n            cnt_other += 1\n        end\n    end\n    if cnt_dot == 1\
    \ && cnt_digit <= 3 && cnt_other == 0\n        dot_pos = -1\n        for i in\
    \ 1:length(file_name)\n            if file_name[i] == '.'\n                dot_pos\
    \ = i\n                break\n            end\n        end\n        if dot_pos\
    \ == 1\n            return \"No\"\n        end\n        substr = file_name[dot_pos+1:end]\n\
    \        if substr == \"txt\" || substr == \"exe\" || substr == \"dll\"\n    \
    \        if 'a' <= file_name[1] <= 'z' || 'A' <= file_name[1] <= 'Z'\n       \
    \         return \"Yes\"\n            end\n        end\n    end\n    return \"\
    No\"\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3a1rsa55.jl:69\n  Expression: candidate(\"\
    this_is_valid.txt\") == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3a1rsa55.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3a1rsa55.jl:58\ntest set: Test\
    \ Failed at /tmp/tmp3a1rsa55.jl:75\n  Expression: candidate(\"I563_No.exe\") ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3a1rsa55.jl:75 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3a1rsa55.jl:58\ntest set: Test\
    \ Failed at /tmp/tmp3a1rsa55.jl:77\n  Expression: candidate(\"no_one#knows.dll\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3a1rsa55.jl:77 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3a1rsa55.jl:58\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   23     3     26\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 23 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3a1rsa55.jl:56\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    has_dot = count(file_name,\
    \ '.') == 1\n    has_valid_extension = (file_name[end-2:end] in ['txt', 'exe',\
    \ 'dll'])\n    substring_before_dot = file_name[1:findlast(file_name, '.')]\n\
    \    if has_dot && has_valid_extension && isletter(substring_before_dot[1]) &&\
    \ count(substring_before_dot, '0':'9') <= 3\n        return \"Yes\"\n    else\n\
    \        return \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"\
    1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpxk4746dh.jl:16\nin expression\
    \ starting at /tmp/tmpxk4746dh.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    digits = Set('0'::Char:'9'::Char)\n\
    \    if count(c -> c in digits, file_name) > 3\n        return \"No\"\n    end\n\
    \    if count(c -> c == '.', file_name) != 1\n        return \"No\"\n    end\n\
    \    if file_name[1] in digits\n        return \"No\"\n    end\n    if file_name[end]\
    \ == '.'\n        return \"No\"\n    end\n    parts = split(file_name, '.')\n\
    \    if length(parts) != 2\n        return \"No\"\n    end\n    if parts[1] ==\
    \ \"\"\n        return \"No\"\n    end\n    if parts[2] in [\"txt\", \"exe\",\
    \ \"dll\"]\n        return \"Yes\"\n    end\n    return \"No\"\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpeh3pme3v.jl:51\n  Expression: candidate(\"\
    _Y.txt\") == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeh3pme3v.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeh3pme3v.jl:44\ntest set: Test\
    \ Failed at /tmp/tmpeh3pme3v.jl:52\n  Expression: candidate(\"?aREYA.exe\") ==\
    \ \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeh3pme3v.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeh3pme3v.jl:44\ntest set: Test\
    \ Failed at /tmp/tmpeh3pme3v.jl:53\n  Expression: candidate(\"/this_is_valid.dll\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeh3pme3v.jl:53 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeh3pme3v.jl:44\ntest set: Test\
    \ Failed at /tmp/tmpeh3pme3v.jl:58\n  Expression: candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeh3pme3v.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeh3pme3v.jl:44\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   22     4     26\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 22 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeh3pme3v.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # Number of digits in\
    \ file_name\n    count_digits = length(grep(r\"\\d\", file_name))\n    return\
    \ ((count_digits <= 3) && (count(file_name, '.') == 1) && (match(r\"[a-zA-Z]+\\\
    ..{3}\", file_name) != nothing)) ? \"Yes\" : \"No\"\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") ==\
    \ \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpp5imde7l.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"example.txt\") == \"Yes\"\n  UndefVarError: grep not\
    \ defined\n  Stacktrace:\n   [1] file_name_check(file_name::String)\n     @ Main\
    \ /tmp/tmpp5imde7l.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp5imde7l.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp5imde7l.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpp5imde7l.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\n  UndefVarError: grep not defined\n \
    \ Stacktrace:\n   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmpp5imde7l.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp5imde7l.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp5imde7l.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpp5imde7l.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\n  UndefVarError: grep not defined\n  Stacktrace:\n\
    \   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmpp5imde7l.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp5imde7l.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp5imde7l.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpp5imde7l.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"K.dll\") == \"Yes\"\n  UndefVarError: grep not defined\n  Stacktrace:\n\
    \   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmpp5imde7l.jl:16\n\
    \   [2] macro expansion\n    "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 26 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp5imde7l.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if count(r\"\\d\", file_name)\
    \ > 3\n        return \"No\"\n    end\n    if count(r\"\\.\", file_name) != 1\n\
    \        return \"No\"\n    end\n    if !(occursin(r\"^[a-zA-Z]\", file_name))\n\
    \        return \"No\"\n    end\n    if !(occursin(r\"\\.(txt|exe|dll)$\", file_name))\n\
    \        return \"No\"\n    end\n    return \"Yes\"\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") ==\
    \ \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   26     26\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    file_name = reverse(file_name)\n\
    \    if length(file_name)==3\n        #file_name = reverse(file_name)\n      \
    \  if count(x->x in 'a':'z'||x in 'A':'Z',file_name)==1\n            return \"\
    Yes\"\n        else\n            return \"No\"\n        end\n    elseif count(x->x=='.',file_name)==1\
    \ && count(x->x in '0':'9',file_name)<=3\n        if file_name[4]=='.'\n     \
    \       file_name = reverse(file_name)\n            if count(x->x in 'a':'z'||x\
    \ in 'A':'Z',file_name[1:3])==1\n                return \"Yes\"\n            else\n\
    \                return \"No\"\n            end\n        else\n            return\
    \ \"No\"\n        end\n    else\n        return \"No\"\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplgztgz2a.jl:43\n  Expression: candidate(\"\
    example.txt\") == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplgztgz2a.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplgztgz2a.jl:42\ntest set: Test\
    \ Failed at /tmp/tmplgztgz2a.jl:46\n  Expression: candidate(\"K.dll\") == \"Yes\"\
    \n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplgztgz2a.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplgztgz2a.jl:42\ntest set: Test\
    \ Failed at /tmp/tmplgztgz2a.jl:47\n  Expression: candidate(\"MY16FILE3.exe\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplgztgz2a.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplgztgz2a.jl:42\ntest set: Test\
    \ Failed at /tmp/tmplgztgz2a.jl:49\n  Expression: candidate(\"_Y.txt\") == \"\
    No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmplgztgz2a.jl:49 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplgztgz2a.jl:42\ntest set: Test\
    \ Failed at /tmp/tmplgztgz2a.jl:53\n  Expression: candidate(\"this_is_valid.txt\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/juli"
  stderr: "ERROR: LoadError: Some tests did not pass: 18 passed, 7 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplgztgz2a.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code goes here\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp7ltn2fk_.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp7ltn2fk_.jl:16\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp7ltn2fk_.jl:22 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp7ltn2fk_.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp7ltn2fk_.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp7ltn2fk_.jl:16\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp7ltn2fk_.jl:23 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    correct_extensions\
    \ = [\"txt\", \"exe\", \"dll\"]\n    count_digits = 0\n    count_dots = 0\n  \
    \  count_letter = 0\n    dot_position = 0\n    letter_position = 0\n    extension\
    \ = 0\n    \n    if length(file_name) == 0 \n        return \"No\"\n    end\n\
    \    for i = 1:length(file_name)\n        if file_name[i] in '0':'9'\n       \
    \     count_digits += 1\n        elseif file_name[i] == '.'\n            count_dots\
    \ += 1\n            dot_position = i\n        elseif file_name[i] in 'a':'z'\n\
    \            count_letter += 1\n            letter_position = i\n        elseif\
    \ file_name[i] in 'A':'Z'\n            count_letter += 1\n            letter_position\
    \ = i\n        end\n    end\n    if count_digits > 3 || count_dots != 1 || count_letter\
    \ == 0\n        return \"No\"\n    end\n    if dot_position < letter_position\n\
    \        extension = file_name[dot_position+1:end]\n        if extension in correct_extensions\n\
    \            return \"Yes\"\n        else\n            return \"No\"\n       \
    \ end\n    else\n        return \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\"\
    )\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\"\
    ) == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"\
    _Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\") == \"No\")\n\t@test(candidate(\"\
    /this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"this_is_valid.wow\") ==\
    \ \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"Yes\")\n\t@test(candidate(\"\
    this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"#this2_i4s_5valid.ten\"\
    ) == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\") == \"No\")\n\t@test(candidate(\"\
    this_is_12valid.6exe4.txt\") == \"No\")\n\t@test(candidate(\"all.exe.txt\") ==\
    \ \"No\")\n\t@test(candidate(\"I563_No.exe\") == \"Yes\")\n\t@test(candidate(\"\
    Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"no_one#knows.dll\") == \"\
    Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\")\n\t@test(candidate(\"\
    I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\") == \"No\")\n\t\
    @test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"_f4indsartal132.\"\
    ) == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"s.\"\
    ) == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyb4bmod3.jl:61\n  Expression: candidate(\"\
    1example.dll\") == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyb4bmod3.jl:61 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyb4bmod3.jl:59\ntest set: Test\
    \ Failed at /tmp/tmpyb4bmod3.jl:66\n  Expression: candidate(\"_Y.txt\") == \"\
    No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyb4bmod3.jl:66 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyb4bmod3.jl:59\ntest set: Test\
    \ Failed at /tmp/tmpyb4bmod3.jl:67\n  Expression: candidate(\"?aREYA.exe\") ==\
    \ \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyb4bmod3.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyb4bmod3.jl:59\ntest set: Test\
    \ Failed at /tmp/tmpyb4bmod3.jl:68\n  Expression: candidate(\"/this_is_valid.dll\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyb4bmod3.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyb4bmod3.jl:59\ntest set: Test\
    \ Failed at /tmp/tmpyb4bmod3.jl:73\n  Expression: candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/"
  stderr: "ERROR: LoadError: Some tests did not pass: 20 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyb4bmod3.jl:57\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n  nums = '0123456789'\n\
    \  types = [\"txt\", \"exe\", \"dll\"]\n  count = 0\n  yes = 'No'\n  if findfirst('.',\
    \ file_name) != nothing\n    name = split(file_name, '.')\n    if findfirst(r\"\
    ^[A-Za-z]\", name[1]) != nothing\n      for i in nums\n        if i in name[1]\n\
    \          count += 1\n        end\n      end\n      if count <= 3\n        if\
    \ name[2] in types\n          yes = 'Yes'\n        end\n      end\n    end\n \
    \ end\n  return yes\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp91noqyj_.jl:15\nin expression\
    \ starting at /tmp/tmp91noqyj_.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    n_digits = 0\n    n_dots\
    \ = 0\n    dot_found = false\n    empty_before_dot = true\n    empty_after_dot\
    \ = true\n    letter_found = false\n    for i in 1:length(file_name)\n       \
    \ if '0'<=file_name[i]<='9'\n            n_digits += 1\n        end\n        if\
    \ file_name[i] == '.'\n            n_dots += 1\n            dot_found = true\n\
    \        end\n        if dot_found\n            if 'a'<=file_name[i]<='z' || 'A'<=file_name[i]<='Z'\n\
    \                empty_after_dot = false\n            end\n        else\n    \
    \        if 'a'<=file_name[i]<='z' || 'A'<=file_name[i]<='Z'\n               \
    \ empty_before_dot = false\n                letter_found = true\n            end\n\
    \        end\n    end\n    if n_digits > 3 || n_dots != 1 || empty_before_dot\
    \ || empty_after_dot || !letter_found\n        return \"No\"\n    end\n    if\
    \ length(file_name) > 3 && file_name[end-2:end] in [\"txt\", \"exe\", \"dll\"\
    ]\n        return \"Yes\"\n    end\n    return \"No\"\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") ==\
    \ \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0fuqjqbj.jl:54\n  Expression: candidate(\"\
    1example.dll\") == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0fuqjqbj.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0fuqjqbj.jl:52\ntest set: Test\
    \ Failed at /tmp/tmp0fuqjqbj.jl:59\n  Expression: candidate(\"_Y.txt\") == \"\
    No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp0fuqjqbj.jl:59 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0fuqjqbj.jl:52\ntest set: Test\
    \ Failed at /tmp/tmp0fuqjqbj.jl:60\n  Expression: candidate(\"?aREYA.exe\") ==\
    \ \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0fuqjqbj.jl:60 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0fuqjqbj.jl:52\ntest set: Test\
    \ Failed at /tmp/tmp0fuqjqbj.jl:61\n  Expression: candidate(\"/this_is_valid.dll\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0fuqjqbj.jl:61 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0fuqjqbj.jl:52\ntest set: Test\
    \ Failed at /tmp/tmp0fuqjqbj.jl:64\n  Expression: candidate(\"this_is_valid.txtexe\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/"
  stderr: "ERROR: LoadError: Some tests did not pass: 20 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0fuqjqbj.jl:50\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    file_name_check(\"example.txt\") # => 'Yes'\nfile_name_check(\"1example.dll\"\
    ) # => 'No'\n \nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type String\nClosest candidates are:\n  convert(::Type{String},\
    \ !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \  convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \  convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \  ...\nStacktrace:\n [1] file_name_check(file_name::String)\n   @ Main /tmp/tmppxd8mupw.jl:16\n\
    \ [2] top-level scope\n   @ /tmp/tmppxd8mupw.jl:17\nin expression starting at\
    \ /tmp/tmppxd8mupw.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    valid1 = \"^[a-zA-Z]\\\
    w*\\.[a-zA-Z]{3,4}$\"\n    valid2 = \"^[a-zA-Z]\\w*\\.[a-zA-Z]{3,4}\\d{0,3}$\"\
    \n    if contains(file_name, valid1)\n        return \"Yes\"\n    elseif contains(file_name,\
    \ valid2)\n        return \"Yes\"\n    else\n        return \"No\"\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpos1lnrao.jl:15\nin expression starting at\
    \ /tmp/tmpos1lnrao.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if file_name == \"\"\
    \n        return \"Yes\"\n    end\nusing Test\n\n@testset begin\n\ncandidate =\
    \ file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"\
    1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkpz6l0e3.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkpz6l0e3.jl:1\n\
    in expression starting at /tmp/tmpkpz6l0e3.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # Your Code Here\nend\n\
    # You Can Use the Following Code for Testing\nfile_name_check(\"example.txt\"\
    ) # => 'Yes'\nfile_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\n \nusing Test\n\n@testset begin\n\ncandidate\
    \ = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"\
    1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type String\nClosest candidates are:\n  convert(::Type{String},\
    \ !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \  convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \  convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \  ...\nStacktrace:\n [1] file_name_check(file_name::String)\n   @ Main /tmp/tmpjg54rvu1.jl:16\n\
    \ [2] top-level scope\n   @ /tmp/tmpjg54rvu1.jl:18\nin expression starting at\
    \ /tmp/tmpjg54rvu1.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    num_dots = count(x ->\
    \ x == '.', file_name)\n    if num_dots != 1\n        return \"No\"\n    end\n\
    \    num_digits = count(x -> in('0':'9', x), file_name)\n    if num_digits > 3\n\
    \        return \"No\"\n    end\n    dot_index = findfirst(x -> x == '.', file_name)\n\
    \    if dot_index == 1\n        return \"No\"\n    end\n    prefix = file_name[1:dot_index-1]\n\
    \    first_letter = prefix[1]\n    if (in('a':'z', first_letter) || in('A':'Z',\
    \ first_letter)) == false\n        return \"No\"\n    end\n    suffix = file_name[dot_index+1:end]\n\
    \    if in(['txt', 'exe', 'dll'], suffix) == false\n        return \"No\"\n  \
    \  end\n    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp97z2m_tb.jl:33\nin expression\
    \ starting at /tmp/tmp97z2m_tb.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    count_num = 0\n    counter\
    \ = 0\n    if length(file_name) < 2\n        return 'No'\n    end\n    while counter\
    \ <= length(file_name)\n        if file_name[counter] == '.'\n            break\n\
    \        end\n        counter += 1\n    end\n    counter += 1\n    if counter\
    \ == length(file_name) + 1\n        return 'No'\n    end\n    while counter <=\
    \ length(file_name)\n        if file_name[counter] == '0' || file_name[counter]\
    \ == '1' || file_name[counter] == '2' ||\n        file_name[counter] == '3' ||\
    \ file_name[counter] == '4' || file_name[counter] == '5' ||\n        file_name[counter]\
    \ == '6' || file_name[counter] == '7' || file_name[counter] == '8' ||\n      \
    \  file_name[counter] == '9'\n            count_num += 1\n        end\n      \
    \  counter += 1\n    end\n    if count_num > 3\n        return 'No'\n    end\n\
    \    counter = 1\n    while counter <= length(file_name)\n        if file_name[counter]\
    \ == '0' || file_name[counter] == '1' || file_name[counter] == '2' ||\n      \
    \  file_name[counter] == '3' || file_name[counter] == '4' || file_name[counter]\
    \ == '5' ||\n        file_name[counter] == '6' || file_name[counter] == '7' ||\
    \ file_name[counter] == '8' ||\n        file_name[counter] == '9'\n          \
    \  break\n        end\n        counter += 1\n    end\n    if counter == length(file_name)\
    \ + 1\n        return 'No'\n    end\n    if file_name[end-2:end] != 'txt' && file_name[end-2:end]\
    \ != 'exe' && file_name[end-2:end] != 'dll'\n        return 'No'\n    end\n  \
    \  return 'Yes'\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpw2e091h7.jl:18\nin expression\
    \ starting at /tmp/tmpw2e091h7.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    names = split(file_name,\
    \ \".\")\n    if length(names) != 2\n        return \"No\"\n    end\n    if length(names[1])\
    \ == 0\n        return \"No\"\n    end\n    if count(x -> x \u2208 ('0':'9'),\
    \ names[1]) > 3\n        return \"No\"\n    end\n    if names[2] \u2209 [\"txt\"\
    , \"exe\", \"dll\"]\n        return \"No\"\n    end\n    return \"Yes\"\nend\n\
    \"\"\"Create a function which takes a string representing an email, and returns\
    \ true if the email \n    is valid, and returns false otherwise.\n    An email\
    \ is considered to be valid if and only if it contains exactly one '@' character,\
    \ \n    and there is exactly one dot '.' after this '@' character.\n    Examples:\n\
    \    email_check(\"myemail@google.com\") # => true\n    email_check(\"example.com\"\
    ) # => false\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpwsa8n8lc.jl:30\nin expression starting at /tmp/tmpwsa8n8lc.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    check1 = 0\n    check2\
    \ = 0\n    check3 = 0\n    check4 = 0\n    check5 = 0\n    extension = \"\"\n\
    \    if(length(file_name) > 3)\n        for i in file_name\n            if (i\
    \ in '0123456789')\n                check1 += 1\n            end\n        end\n\
    \    end\n    if (check1 < 4)\n        for i in file_name\n            if (i ==\
    \ '.')\n                check2 += 1\n            end\n        end\n    end\n \
    \   if (check2 == 1)\n        pre_dot = file_name[1:find(file_name, '.')-1]\n\
    \        if ((pre_dot != \"\") && (pre_dot[1] in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ))\n            check3 += 1\n        end\n    end\n    if (check3 == 1)\n    \
    \    post_dot = file_name[find(file_name, '.')+1:end]\n        if (post_dot in\
    \ [\"txt\", \"exe\", \"dll\"])\n            check4 += 1\n        end\n    end\n\
    \    if (check4 == 1)\n        check5 += 1\n    end\n    if (check5 == 1)\n  \
    \      extension = \"Yes\"\n    else\n        extension = \"No\"\n    end\n  \
    \  return extension\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpz2y6xv3x.jl:23\nin expression\
    \ starting at /tmp/tmpz2y6xv3x.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    \ \n\"\"\"Create a function which takes two strings representing two filenames,\n\
    \    and returns 'True' if both file names are valid, and returns 'False' otherwise.\n\
    \    Examples:\n    valid_names(\"example.txt\", \"example.txt\") # => true\n\
    \    valid_names(\"example.txt\", \"example.dll\") # => true\n    valid_names(\"\
    example.txt\", \"example.exe\") # => true\n    valid_names(\"example.txt\", \"\
    1example.txt\") # => false\n    valid_names(\"example.txt\", \"example.\") # =>\
    \ false\n    valid_names(\"example.txt\", \"example..txt\") # => false\n    \"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp0x3mrfo7.jl:18\nin expression starting at /tmp/tmp0x3mrfo7.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    len = length(file_name)\n\
    \    if len == 0\n        return \"No\"\n    end\n    count_dots = 0\n    count_digits\
    \ = 0\n    count_characters = 0\n    for i in 1:len\n        if file_name[i] ==\
    \ '.'\n            count_dots += 1\n        elseif file_name[i] in '0':'9'\n \
    \           count_digits += 1\n        elseif file_name[i] in 'a':'z' || file_name[i]\
    \ in 'A':'Z'\n            count_characters += 1\n        end\n    end\n    if\
    \ count_digits > 3 || count_dots != 1 || count_characters < 1\n        return\
    \ \"No\"\n    end\n    if file_name[len-3:len] in ['txt', 'exe', 'dll']\n    \
    \    return \"Yes\"\n    else\n        return \"No\"\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp66x_wfrf.jl:34\nin expression\
    \ starting at /tmp/tmp66x_wfrf.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n   \n   pattern1 = r\"[a-zA-Z]+\\\
    .[a-zA-Z]+\"\n   pattern2 = r\"[^0-9]+\"\n   pattern3 = r\"[^0-9]+\\.txt\"\n \
    \  pattern4 = r\"[^0-9]+\\.exe\"\n   pattern5 = r\"[^0-9]+\\.dll\"\n  \n   if\
    \ length(occurrences(file_name,r\"0-9\")) <= 3\n       return \"Yes\"\n   else\
    \ \n       return \"No\"\n   end\n   \n   if file_name[1] == match(pattern2,file_name)\n\
    \       return \"Yes\"\n   else \n       return \"No\"\n   end\n   \n   if file_name\
    \ == match(pattern1,file_name)\n       return \"Yes\"\n   else \n       return\
    \ \"No\"\n   end\n   \n   if file_name == match(pattern3,file_name)\n       return\
    \ \"Yes\"\n   else \n       return \"No\"\n   end\n   \n   if file_name == match(pattern4,file_name)\n\
    \       return \"Yes\"\n   else \n       return \"No\"\n   end\n   \n   if file_name\
    \ == match(pattern5,file_name)\n       return \"Yes\"\n   else \n       return\
    \ \"No\"\n   end\n   \nend\n    \n    \n    \nusing Test\n\n@testset begin\n\n\
    candidate = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\")\n\
    \t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\"\
    ) == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"\
    _Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\") == \"No\")\n\t@test(candidate(\"\
    /this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"this_is_valid.wow\") ==\
    \ \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"Yes\")\n\t@test(candidate(\"\
    this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"#this2_i4s_5valid.ten\"\
    ) == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\") == \"No\")\n\t@test(candidate(\"\
    this_is_12valid.6exe4.txt\") == \"No\")\n\t@test(candidate(\"all.exe.txt\") ==\
    \ \"No\")\n\t@test(candidate(\"I563_No.exe\") == \"Yes\")\n\t@test(candidate(\"\
    Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"no_one#knows.dll\") == \"\
    Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\")\n\t@test(candidate(\"\
    I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\") == \"No\")\n\t\
    @test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"_f4indsartal132.\"\
    ) == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"s.\"\
    ) == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmps48bf0oc.jl:67\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  UndefVarError:\
    \ occurrences not defined\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\\
    n     @ Main /tmp/tmps48bf0oc.jl:22\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmps48bf0oc.jl:67 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmps48bf0oc.jl:66\\ntest set:\
    \ Error During Test at /tmp/tmps48bf0oc.jl:68\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  UndefVarError: occurrences not defined\\\
    n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @ Main /tmp/tmps48bf0oc.jl:22\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmps48bf0oc.jl:68 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmps48bf0oc.jl:66\\ntest set:\
    \ Error During Test at /tmp/tmps48bf0oc.jl:69\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  UndefVarError: occurrences not defined\\\
    n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @ Main /tmp/tmps48bf0oc.jl:22\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmps48bf0oc.jl:69 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmps48bf0oc.jl:66\\ntest set:\
    \ Error During Test at /tmp/tmps48bf0oc.jl:70\\n  Test threw exception\\n  Expression:\
    \ candidate(\"K.dll\") == \"Yes\"\\n  UndefVarError: occurrences not defined\\\
    n  Stacktrace:\\n   [1] file_name_check(f"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \"\"\"\n    Return the\
    \ answer to the question \"Is the file's name valid?\"\n    \"\"\"\n    if count(x\
    \ -> x in '0':'9', file_name) > 3 \n        answer = \"No\"\n    elseif count(x\
    \ -> x == '.', file_name) != 1\n        answer = \"No\"\n    elseif !(file_name[1]\
    \ in 'a':'z' || file_name[1] in 'A':'Z')\n        answer = \"No\"\n    else\n\
    \        for i in 1:length(file_name)\n            if file_name[i] == '.'\n  \
    \              break\n            end\n        end\n        if file_name[i+1:end]\
    \ in [\"txt\", \"exe\", \"dll\"]\n            answer = \"Yes\"\n        else\n\
    \            answer = \"No\"\n        end\n    end\n    return answer\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzj0i42td.jl:43\n  Test threw exception\n\
    \  Expression: candidate(\"example.txt\") == \"Yes\"\n  UndefVarError: i not defined\n\
    \  Stacktrace:\n   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmpzj0i42td.jl:30\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzj0i42td.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzj0i42td.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpzj0i42td.jl:45\n  Test threw exception\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\n  UndefVarError: i not defined\n  Stacktrace:\n\
    \   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmpzj0i42td.jl:30\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzj0i42td.jl:45 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzj0i42td.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpzj0i42td.jl:46\n  Test threw exception\n  Expression:\
    \ candidate(\"K.dll\") == \"Yes\"\n  UndefVarError: i not defined\n  Stacktrace:\n\
    \   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmpzj0i42td.jl:30\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzj0i42td.jl:46 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzj0i42td.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpzj0i42td.jl:47\n  Test threw exception\n  Expression:\
    \ candidate(\"MY16FILE3.exe\") == \"Yes\"\n  UndefVarError: i not defined\n  Stacktrace:\n\
    \   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmpzj0i42td.jl:30\n\
    \   [2] macro expansion\n     @ /shared"
  stderr: "ERROR: LoadError: Some tests did not pass: 15 passed, 0 failed, 11 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzj0i42td.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # check there are more\
    \ than 3 digits\n    # if exists, return \"No\"\n    # check there is only one\
    \ dot\n    # if not, return \"No\"\n    # check substring before dot is not empty\
    \ and starts with letter\n    # if not, return \"No\"\n    # check substring after\
    \ dot is in ['txt', 'exe', 'dll']\n    # if not, return \"No\"\n    # if all is\
    \ okay, return \"Yes\"\n    \n    \n \n \n \n \n    \n    \n    \n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyiae8f2p.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyiae8f2p.jl:1\n\
    in expression starting at /tmp/tmpyiae8f2p.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if !occursin(r\"\\d\"\
    , file_name)\n        return \"Yes\"\n    else\n        return \"No\"\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfrlnj7dh.jl:30\n  Expression: candidate(\"\
    MY16FILE3.exe\") == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfrlnj7dh.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfrlnj7dh.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpfrlnj7dh.jl:32\n  Expression: candidate(\"_Y.txt\") == \"\
    No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpfrlnj7dh.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfrlnj7dh.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpfrlnj7dh.jl:33\n  Expression: candidate(\"?aREYA.exe\") ==\
    \ \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfrlnj7dh.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfrlnj7dh.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpfrlnj7dh.jl:34\n  Expression: candidate(\"/this_is_valid.dll\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfrlnj7dh.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfrlnj7dh.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpfrlnj7dh.jl:35\n  Expression: candidate(\"this_is_valid.wow\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/s"
  stderr: "ERROR: LoadError: Some tests did not pass: 14 passed, 12 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfrlnj7dh.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if contains(file_name,\
    \ r\"[0-9]{4}\")\n        return \"No\"\n    end\n    if count(file_name, '.')\
    \ != 1\n        return \"No\"\n    end\n    substring(file_name, r\"([a-zA-Z]*).(txt|exe|dll)\"\
    ) == file_name ? \"Yes\" : \"No\"\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"\
    1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmprl3ja0xc.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ objects of type String are not callable\\n  Stacktrace:\\n   [1] _simple_count(pred::String,\
    \ itr::Char, init::Int64)\\n     @ Base ./reduce.jl:1206\\n   [2] count(f::String,\
    \ itr::Char; init::Int64)\\n     @ Base ./reduce.jl:1201\\n   [3] count(f::String,\
    \ itr::Char)\\n     @ Base ./reduce.jl:1201\\n   [4] file_name_check(file_name::String)\\\
    n     @ Main /tmp/tmprl3ja0xc.jl:18\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmprl3ja0xc.jl:28 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmprl3ja0xc.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmprl3ja0xc.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: objects of type String\
    \ are not callable\\n  Stacktrace:\\n   [1] _simple_count(pred::String, itr::Char,\
    \ init::Int64)\\n     @ Base ./reduce.jl:1206\\n   [2] count(f::String, itr::Char;\
    \ init::Int64)\\n     @ Base ./reduce.jl:1201\\n   [3] count(f::String, itr::Char)\\\
    n     @ Base ./reduce.jl:1201\\n   [4] file_name_check(file_name::String)\\n \
    \    @ Main /tmp/tmprl3ja0xc.jl:18\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmprl3ja0xc.jl:29 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmprl3ja0xc.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmprl3ja0xc.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: objects of type String\
    \ are not callable\\n  Stacktrace:\\n   [1] _simple_count(pred::String, itr::Char,\
    \ init::Int64)\\n     @ Base ./reduce.jl:1206\\n   [2] count(f::String, itr::Ch"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    check_digit = count(x->x\
    \ in '0':'9', file_name) < 4\n    check_dot = count(x->x == '.', file_name) ==\
    \ 1\n    check_pre_dot = count(x->x == '.', file_name) > 0 && count(x->x in 'a':'z'\
    \ || x in 'A':'Z', file_name[1:file_name[file_name .== '.'][1]-1]) == file_name[file_name\
    \ .== '.'][1]-1\n    check_post_dot = count(x->x == '.', file_name) > 0 && count(x->x\
    \ in 'txt', file_name[file_name .== '.'][1]+1:end) == 1 ||\n                 \
    \                                        count(x->x in 'exe', file_name[file_name\
    \ .== '.'][1]+1:end) == 1 ||\n                                               \
    \          count(x->x in 'dll', file_name[file_name .== '.'][1]+1:end) == 1\n\
    \    return \"Yes\" if check_digit && check_dot && check_pre_dot && check_post_dot\
    \ else \"No\"\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpiuwpb7q5.jl:18\nin expression\
    \ starting at /tmp/tmpiuwpb7q5.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    count_digits = 0\n \
    \   count_dots = 0\n    count_non_letters = 0\n    for char in file_name\n   \
    \     if char in ['0','1','2','3','4','5','6','7','8','9']\n            count_digits\
    \ += 1\n        elseif char == '.'\n            count_dots += 1\n        elseif\
    \ char in '.'\n            count_non_letters += 1\n        end\n    end\n    if\
    \ count_digits > 3 || count_dots != 1 || count_non_letters > 0\n        return\
    \ \"No\"\n    else\n        after_dot = file_name[findlast(file_name,'.'):end]\n\
    \        if after_dot in [\".txt\",\".exe\",\".dll\"]\n            return \"Yes\"\
    \n        else\n            return \"No\"\n        end\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp83oz3qko.jl:43\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ no method matching findlast(::String, ::Char)\\n  Closest candidates are:\\\
    n    findlast(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2191\\\
    n    findlast(::AbstractString, !Matched::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:364\\\
    n    findlast(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2102\\\
    n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @ Main /tmp/tmp83oz3qko.jl:30\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp83oz3qko.jl:43 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp83oz3qko.jl:42\\ntest set:\
    \ Error During Test at /tmp/tmp83oz3qko.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: no method matching findlast(::String,\
    \ ::Char)\\n  Closest candidates are:\\n    findlast(!Matched::Function, ::Any)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2191\\n    findlast(::AbstractString,\
    \ !Matched::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:364\\\
    n    findlast(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2102\\\
    n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @ Main /tmp/tmp83oz3qko.jl:30\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp83oz3qko.jl:44 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp83oz3qko.jl:42\\ntest set:\
    \ Error During Test at /tmp/tmp83oz3qko.jl:45\\n  Test threw exception\\n  Expression:\
    \ c"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if count(x->x in ['0','1','2','3','4','5','6','7','8','9'],file_name)>3\n\
    \        return \"No\"\n    end\n    if count(x->x=='.',file_name)!=1\n      \
    \  return \"No\"\n    end\n    dot=findall(x->x=='.',file_name)[1]\n    if dot==1\n\
    \        return \"No\"\n    end\n    if dot==length(file_name)\n        return\
    \ \"No\"\n    end\n    file_name_without_ext=file_name[1:dot-1]\n    if !all(x->x\
    \ in ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'],file_name_without_ext[1])\n\
    \        return \"No\"\n    end\n    if file_name[dot+1:end] in [\"txt\",\"exe\"\
    ,\"dll\"]\n        return \"Yes\"\n    end\n    return \"No\"\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   26     26\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # Your code goes here\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp311e22mb.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp311e22mb.jl:16\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp311e22mb.jl:22 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp311e22mb.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp311e22mb.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp311e22mb.jl:16\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp311e22mb.jl:23 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    non_digit = 0\n    dot\
    \ = 0\n    extension = [\"txt\", \"exe\", \"dll\"]\n    for i in file_name\n \
    \       non_digit += 1 if i in ('a'-'z' and 'A'-'Z')\n        dot += 1 if i ==\
    \ '.'\n    end\n    if dot > 1 || dot == 0\n        return \"No\"\n    elseif\
    \ non_digit >= 3\n        return \"No\"\n    elseif findfirst(string(file_name,\"\
    .\",extension)) == nothing\n        return \"No\"\n    else\n        return \"\
    Yes\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmppie8wdra.jl:18 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppie8wdra.jl:19\n\
    in expression starting at /tmp/tmppie8wdra.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    count = 0\n    dot =\
    \ false\n    last_dot = 0\n    for c in file_name\n        if c == '.'\n     \
    \       dot = true\n            last_dot = count\n        end\n        if count\
    \ == 0 && (c < 'a' || c > 'z') && (c < 'A' || c > 'Z')\n            return \"\
    No\"\n        end\n        if c >= '0' && c <= '9'\n            return \"No\"\n\
    \        end\n        count += 1\n    end\n    if last_dot == 0 || count - last_dot\
    \ < 2 || last_dot > count - 2\n        return \"No\"\n    end\n    if file_name[last_dot+1:count]\
    \ != \"txt\" && file_name[last_dot+1:count] != \"exe\" && file_name[last_dot+1:count]\
    \ != \"dll\"\n        return \"No\"\n    end\n    return \"Yes\"\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6prw5v5j.jl:44\n  Expression: candidate(\"\
    example.txt\") == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6prw5v5j.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6prw5v5j.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp6prw5v5j.jl:47\n  Expression: candidate(\"K.dll\") == \"Yes\"\
    \n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6prw5v5j.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6prw5v5j.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp6prw5v5j.jl:48\n  Expression: candidate(\"MY16FILE3.exe\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6prw5v5j.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6prw5v5j.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp6prw5v5j.jl:54\n  Expression: candidate(\"this_is_valid.txt\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6prw5v5j.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6prw5v5j.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp6prw5v5j.jl:60\n  Expression: candidate(\"I563_No.exe\") ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/shar"
  stderr: "ERROR: LoadError: Some tests did not pass: 19 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6prw5v5j.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code goes here\n\
    end\n \nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmph6z4odxy.jl:23\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmph6z4odxy.jl:16\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmph6z4odxy.jl:23 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmph6z4odxy.jl:22\\ntest set:\
    \ Error During Test at /tmp/tmph6z4odxy.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmph6z4odxy.jl:16\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmph6z4odxy.jl:24 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    valid_extension = [\"\
    txt\", \"exe\", \"dll\"]\n    digits = '0':'9'\n    count_digits = 0\n    dot_found\
    \ = false\n    for i in file_name\n        if i in digits\n            count_digits\
    \ += 1\n        end\n        if i == '.'\n            dot_found = true\n     \
    \   end\n    end\n    if count_digits > 3\n        return \"No\"\n    end\n  \
    \  if dot_found == false\n        return \"No\"\n    end\n    parts = split(file_name,\
    \ '.')\n    if valid_extension[parts[2]] == false\n        return \"No\"\n   \
    \ end\n    for i in parts[1]\n        if !(i in 'a':'z' || i in 'A':'Z')\n   \
    \         return \"No\"\n        end\n    end\n    return \"Yes\"\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpiiywaw_c.jl:49\n  Test threw exception\n\
    \  Expression: candidate(\"example.txt\") == \"Yes\"\n  ArgumentError: invalid\
    \ index: \"txt\" of type SubString{String}\n  Stacktrace:\n    [1] to_index(i::SubString{String})\n\
    \      @ Base ./indices.jl:300\n    [2] to_index(A::Vector{String}, i::SubString{String})\n\
    \      @ Base ./indices.jl:277\n    [3] to_indices\n      @ ./indices.jl:333 [inlined]\n\
    \    [4] to_indices\n      @ ./indices.jl:325 [inlined]\n    [5] getindex\n  \
    \    @ ./abstractarray.jl:1218 [inlined]\n    [6] file_name_check(file_name::String)\n\
    \      @ Main /tmp/tmpiiywaw_c.jl:34\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpiiywaw_c.jl:49 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpiiywaw_c.jl:48\ntest set:\
    \ Error During Test at /tmp/tmpiiywaw_c.jl:50\n  Test threw exception\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\n  ArgumentError: invalid index: \"dll\"\
    \ of type SubString{String}\n  Stacktrace:\n    [1] to_index(i::SubString{String})\n\
    \      @ Base ./indices.jl:300\n    [2] to_index(A::Vector{String}, i::SubString{String})\n\
    \      @ Base ./indices.jl:277\n    [3] to_indices\n      @ ./indices.jl:333 [inlined]\n\
    \    [4] to_indices\n      @ ./indices.jl:325 [inlined]\n    [5] getindex\n  \
    \    @ ./abstractarray.jl:1218 [inlined]\n    [6] file_name_check(file_name::String)\n\
    \      @ Main /tmp/tmpiiywaw_c.jl:34\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpiiywaw_c.jl:50 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpiiywaw_c.jl:48\ntest set:\
    \ Error During Test at /tmp/tmpiiywaw_c.jl:51\n  Test threw exception\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\n  ArgumentE"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 0 failed, 20 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiiywaw_c.jl:46\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\n \
    \   return \"No\"\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvj20wh1v.jl:23\n  Expression: candidate(\"\
    example.txt\") == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvj20wh1v.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvj20wh1v.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpvj20wh1v.jl:26\n  Expression: candidate(\"K.dll\") == \"Yes\"\
    \n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvj20wh1v.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvj20wh1v.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpvj20wh1v.jl:27\n  Expression: candidate(\"MY16FILE3.exe\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvj20wh1v.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvj20wh1v.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpvj20wh1v.jl:33\n  Expression: candidate(\"this_is_valid.txt\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvj20wh1v.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvj20wh1v.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpvj20wh1v.jl:39\n  Expression: candidate(\"I563_No.exe\") ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/shar"
  stderr: "ERROR: LoadError: Some tests did not pass: 19 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvj20wh1v.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    valid_extensions = [\"\
    txt\", \"exe\", \"dll\"]\n    name_split = split(file_name, \".\")\n    if length(name_split)\
    \ != 2\n        return \"No\"\n    end\n    if search(r\"\\d\", name_split[1])[1]\
    \ > 3\n        return \"No\"\n    end\n    if ! in(name_split[2], valid_extensions)\n\
    \        return \"No\"\n    end\n    if ! (in(name_split[1][1], 'a':'z') || in(name_split[1][1],\
    \ 'A':'Z'))\n        return \"No\"\n    end\n    if length(name_split[1]) == 0\n\
    \        return \"No\"\n    end\n    return \"Yes\"\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") ==\
    \ \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpw14dchub.jl:39\n  Test threw exception\n\
    \  Expression: candidate(\"example.txt\") == \"Yes\"\n  UndefVarError: search\
    \ not defined\n  Stacktrace:\n   [1] file_name_check(file_name::String)\n    \
    \ @ Main /tmp/tmpw14dchub.jl:20\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw14dchub.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw14dchub.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpw14dchub.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\n  UndefVarError: search not defined\n\
    \  Stacktrace:\n   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmpw14dchub.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw14dchub.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw14dchub.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpw14dchub.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\n  UndefVarError: search not defined\n \
    \ Stacktrace:\n   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmpw14dchub.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw14dchub.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw14dchub.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpw14dchub.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"K.dll\") == \"Yes\"\n  UndefVarError: search not defined\n  Stacktrace:\n\
    \   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmpw14dchub.jl:20\n\
    \   [2] macro expans"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 0 failed, 22 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw14dchub.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if count(x->isdigit(x),\
    \ file_name)>3\n        return \"No\"\n    end\n    if count(x->(x=='.'), file_name)!=1\n\
    \        return \"No\"\n    end\n    if !isletter(file_name[1])\n        return\
    \ \"No\"\n    end\n    if split(file_name, '.')[2]!=\"txt\" && split(file_name,\
    \ '.')[2]!=\"exe\" && split(file_name, '.')[2]!=\"dll\"\n        return \"No\"\
    \n    end\n    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"\
    1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   26     26\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    valid_extensions = [\"\
    txt\", \"exe\", \"dll\"]\n    valid_count = 0\n    for ext in valid_extensions\n\
    \        if contains(file_name, \".\"*ext)\n            valid_count += 1\n   \
    \ end\n    if count(x->x in '0':'9', file_name) <= 3\n        valid_count += 1\n\
    \    end\n    if file_name[1] in 'a':'z'\n        valid_count += 1\n    end\n\
    \    if file_name[1] in 'A':'Z'\n        valid_count += 1\n    end\n    if valid_count\
    \ == 4\n        return \"Yes\"\n    else\n        return \"No\"\n    end\nend\n\
    file_name_check(\"example.txt\") # => 'Yes'\nfile_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\nusing Test\n\
    \n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpffasyrdc.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpffasyrdc.jl:1\n\
    in expression starting at /tmp/tmpffasyrdc.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    validExt = [\"txt\"\
    , \"exe\", \"dll\"]\n    extFound = false\n    count = 0\n    for i = 1:length(file_name)\n\
    \        if file_name[i] == '.'\n            if extFound == true || i == length(file_name)\
    \ || !(file_name[i+1] in 'a':'z' || file_name[i+1] in 'A':'Z')\n             \
    \   return \"No\"\n            end\n            extFound = true\n        elseif\
    \ file_name[i] in '0':'9'\n            count += 1\n            if count > 3\n\
    \                return \"No\"\n            end\n        elseif !(file_name[i]\
    \ in 'a':'z' || file_name[i] in 'A':'Z')\n            return \"No\"\n        end\n\
    \    end\n    if extFound == false || !(file_name[end-2:end] in validExt)\n  \
    \      return \"No\"\n    end\n    return \"Yes\"\nend\n\"\"\"Create a function\
    \ which takes a string representing a person's name, and returns\n    a string\
    \ representing the number of times this person's name appears in the black list.\n\
    \    The black list is a string in which each row represents a name and a number,\
    \ like this:\n    \"name_1 - number_1\n     name_2 - number_2\n     name_3 - number_3\"\
    \n    The string representing the name of a person in the black list should have\
    \ the same\n    letters, in the same order, but it can be written with different\
    \ capitalization. For\n    example, if the black list contains 'ABCD', then the\
    \ name 'AbCd' or 'abcd' will be\n    considered valid.\n    Examples:\n    black_list_check(\"\
    john\", \"john - 2, jane - 3, john - 4\") # => \"2\"\n    black_list_check(\"\
    Jane\", \"john - 2, jane - 3, john - 4\") # => \"3\"\n    black_list_check(\"\
    JohN\", \"john - 2, jane - 3, john - 4\") # => \"2\"\n    black_list_check(\"\
    steve\", \"john - 2, jane - 3, john -\nusing Test\n\n@testset begin\n\ncandidate\
    \ = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"\
    1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkikmnrk5.jl:38\nin expression starting at\
    \ /tmp/tmpkikmnrk5.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if count(x->x in '0':'9',\
    \ file_name)>3\n        return 'No'\n    end\n    if count(x->x=='.', file_name)!=1\n\
    \        return 'No'\n    end\n    if !('a'<=file_name[1]<='z' || 'A'<=file_name[1]<='Z')\n\
    \        return 'No'\n    end\n    sub_string=split(file_name, '.')\n    if sub_string[1]==\"\
    \"\n        return 'No'\n    end\n    if sub_string[2]=='txt' || sub_string[2]=='exe'\
    \ || sub_string[2]=='dll'\n        return 'Yes'\n    end\n    return 'No'\nend\n\
    \ \nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpczswj55e.jl:16\nin expression\
    \ starting at /tmp/tmpczswj55e.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    res = \"Yes\"\n    #check\
    \ for max 3 digits\n    for i in 0:length(file_name)\n        if in('0':'9', file_name[i])\
    \ && count_digits(file_name) > 3\n            res = \"No\"\n            break\n\
    \        end\n    end\n    #check that there is only one dot and it is not the\
    \ first or last character\n    dot_indices = [ind for (i, ind) in enumerate(file_name)\
    \ if ind == '.']\n    if (length(dot_indices) > 1) || (length(dot_indices) ==\
    \ 1 && dot_indices[1] == 1)\n        res = \"No\"\n    end\n    #check that the\
    \ name does not start with a digit\n    if in('0':'9', file_name[1])\n       \
    \ res = \"No\"\n    end\n    #check that it ends with a correct file extention\n\
    \    suffix = file_name[dot_indices[1]+1:end]\n    if suffix != \"txt\" && suffix\
    \ != \"exe\" && suffix != \"dll\"\n        res = \"No\"\n    end\n    return res\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgw1t3z_f.jl:44\n  Test threw exception\n\
    \  Expression: candidate(\"example.txt\") == \"Yes\"\n  BoundsError: attempt to\
    \ access 11-codeunit String at index [0]\n  Stacktrace:\n   [1] checkbounds\n\
    \     @ ./strings/basic.jl:216 [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102\
    \ [inlined]\n   [3] getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4]\
    \ file_name_check(file_name::String)\n     @ Main /tmp/tmpgw1t3z_f.jl:18\n   [5]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpgw1t3z_f.jl:44 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpgw1t3z_f.jl:43\ntest set:\
    \ Error During Test at /tmp/tmpgw1t3z_f.jl:45\n  Test threw exception\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\n  BoundsError: attempt to access 12-codeunit\
    \ String at index [0]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102 [inlined]\n   [3]\
    \ getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4] file_name_check(file_name::String)\n\
    \     @ Main /tmp/tmpgw1t3z_f.jl:18\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpgw1t3z_f.jl:45 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpgw1t3z_f.jl:43\ntest set:\
    \ Error During Test at /tmp/tmpgw1t3z_f.jl:46\n  Test threw exception\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\n  BoundsError: attempt to access 10-codeunit\
    \ String at index [0]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102 [inlined]\n   [3]\
    \ getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4] file_name_check(file_name::String)\n\
    \     @ Main /tmp/tmpgw1t3z_f.jl:18\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 26 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgw1t3z_f.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    dots = 0\n    digits\
    \ = 0\n    for c in file_name\n        if c == '.'\n            dots += 1\n  \
    \      elseif c in '0123456789'\n            digits += 1\n        end\n    end\n\
    \    if dots == 1 && digits <= 3\n        file_arr = split(file_name, '.')\n \
    \       if length(file_arr) == 2\n            if length(file_arr[1]) != 0 && file_arr[1][1]\
    \ in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n                if\
    \ file_arr[2] in ['txt', 'exe', 'dll']\n                    return 'Yes'\n   \
    \             end\n            end\n        end\n    end\n    return 'No'\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpm0qsjgdb.jl:20\nin expression\
    \ starting at /tmp/tmpm0qsjgdb.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    digits_count = 0\n \
    \   dot_count = 0\n    for c in file_name\n        digits_count += c in \"0123456789\"\
    \ ? 1 : 0\n        dot_count += c == '.' ? 1 : 0\n    end\n    if digits_count\
    \ > 3 || dot_count != 1\n        return \"No\"\n    end\n    file_name_split =\
    \ split(file_name, '.')\n    if isalpha(file_name_split[1][1]) == false || \n\
    \        (file_name_split[2] != \"txt\" && file_name_split[2] != \"exe\" && file_name_split[2]\
    \ != \"dll\")\n        return \"No\"\n    end\n    return \"Yes\"\nend\nfile_name_check(\"\
    example.txt\") # => 'Yes'\nfile_name_check(\"1example.dll\") # => 'No' (the name\
    \ should start with a latin alphapet letter)\nfile_name_check(\"hello.jpeg\")\
    \ # => 'No' (this file's name does not end with one of the accepted suffixes)\n\
    \ \n \n#####################################################################################################\n\
    \"\"\"Create a function which takes a string representing a file's name, and returns\
    \ a tuple \n    containing the file's extension and file's size. The file's size\
    \ is the number of bytes \n    in the file's contents.\n    If the file's name\
    \ is invalid, the function should return ('Invalid file name', -1).\n    A file's\
    \ name is considered to be valid if and only if all the following conditions \n\
    \    are met:\n    - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n    - The file's name contains exactly one dot '.'\n    - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_size(\"\
    example.txt\") # => (\"txt\", 7)\n    file_size(\"1example.dll\") # => (\"Invalid\
    \ file name\", -1)\n   \nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: isalpha not defined\nStacktrace:\n [1]\
    \ file_name_check(file_name::String)\n   @ Main /tmp/tmpw6s0f9jx.jl:25\n [2] top-level\
    \ scope\n   @ /tmp/tmpw6s0f9jx.jl:31\nin expression starting at /tmp/tmpw6s0f9jx.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    valid = \"No\"\n   \
    \ pattern = r\"(?=[^.]*[.][^.]+$)(?=(?:[0-9]+)[^a-zA-Z0-9]*$)(?=^(?!.{0,3}$)[a-zA-Z][^0-9]*$)(?=.*[.](?:txt|exe|dll)$)\"\
    \n    if re.match(pattern, file_name)\n        valid = \"Yes\"\n    end\n    return\
    \ valid\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t\
    @test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbh_wxxm2.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"example.txt\") == \"Yes\"\n  UndefVarError: re not\
    \ defined\n  Stacktrace:\n   [1] file_name_check(file_name::String)\n     @ Main\
    \ /tmp/tmpbh_wxxm2.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbh_wxxm2.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbh_wxxm2.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpbh_wxxm2.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\n  UndefVarError: re not defined\n  Stacktrace:\n\
    \   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmpbh_wxxm2.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbh_wxxm2.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbh_wxxm2.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpbh_wxxm2.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\n  UndefVarError: re not defined\n  Stacktrace:\n\
    \   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmpbh_wxxm2.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbh_wxxm2.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbh_wxxm2.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpbh_wxxm2.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"K.dll\") == \"Yes\"\n  UndefVarError: re not defined\n  Stacktrace:\n\
    \   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmpbh_wxxm2.jl:17\n\
    \   [2] macro expansion\n     @ /shar"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 26 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbh_wxxm2.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    digits = ['0', '1',\
    \ '2', '3', '4', '5', '6', '7', '8', '9']\n    if count(x -> x in digits, file_name)\
    \ > 3\n        return \"No\"\n    end\n    if length(filter(x -> x == '.', file_name))\
    \ != 1\n        return \"No\"\n    end\n    if findfirst(x -> x == '.', file_name)\
    \ == 1\n        return \"No\"\n    end\n    [first, second] = split(file_name,\
    \ '.')\n    if length(first) == 0\n        return \"No\"\n    end\n    if second\
    \ != \"txt\" && second != \"exe\" && second != \"dll\"\n        return \"No\"\n\
    \    end\n    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"\
    1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid assignment location \"[first, second]\"\
    \ around /tmp/tmphfv2x__8.jl:25\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphfv2x__8.jl:1\n\
    in expression starting at /tmp/tmphfv2x__8.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    cond1 = length(filter(x->x\
    \ in '0':'9', file_name)) <= 3\n    cond2 = count(x->x == '.', file_name) == 1\n\
    \    ind = findfirst(x->x == '.', file_name)\n    cond3 = ind != 1 && file_name[ind-1]\
    \ in 'a':'z' | 'A':'Z'\n    cond4 = findfirst(x->x in ['txt', 'exe', 'dll'], split(file_name,\
    \ '.')) != nothing\n    return cond1 && cond2 && cond3 && cond4 ? \"Yes\" : \"\
    No\"\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpfyqf2h71.jl:19\nin expression\
    \ starting at /tmp/tmpfyqf2h71.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # TODO: write your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t\
    @test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp5jb96p82.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp5jb96p82.jl:16\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp5jb96p82.jl:22 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp5jb96p82.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp5jb96p82.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp5jb96p82.jl:16\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp5jb96p82.jl:23 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    is_valid = false\n \
    \   nb_digits = 0\n    has_dot = false\n    nb_char_before_dot = 0\n    file_extension\
    \ = \"\"\n    for (index, char) in enumerate(file_name)\n        if char in digits\n\
    \            nb_digits += 1\n        elseif char == '.'\n            has_dot =\
    \ true\n            nb_char_before_dot = index\n        end\n    end\n    if has_dot\n\
    \        file_extension = file_name[nb_char_before_dot+1:end]\n    end\n    if\
    \ has_dot && nb_digits <= 3 && in('a':'z','A':'Z',file_name[1]) && in([\"txt\"\
    , \"exe\", \"dll\"], file_extension)\n        is_valid = true\n    end\n    if\
    \ is_valid\n        return \"Yes\"\n    else\n        return \"No\"\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpnt95c5lv.jl:45\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ no method matching iterate(::typeof(digits))\\n  Closest candidates are:\\n\
    \    iterate(!Matched::Union{LinRange, StepRangeLen}) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:826\\\
    n    iterate(!Matched::Union{LinRange, StepRangeLen}, !Matched::Integer) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:826\\\
    n    iterate(!Matched::T) where T<:Union{Base.KeySet{<:Any, <:Dict}, Base.ValueIterator{<:Dict}}\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/dict.jl:695\\n    ...\\n  Stacktrace:\\\
    n   [1] in(x::Char, itr::Function)\\n     @ Base ./operators.jl:1282\\n   [2]\
    \ file_name_check(file_name::String)\\n     @ Main /tmp/tmpnt95c5lv.jl:21\\n \
    \  [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpnt95c5lv.jl:45 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpnt95c5lv.jl:44\\ntest set:\
    \ Error During Test at /tmp/tmpnt95c5lv.jl:46\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: no method matching iterate(::typeof(digits))\\\
    n  Closest candidates are:\\n    iterate(!Matched::Union{LinRange, StepRangeLen})\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:826\\n    iterate(!Matched::Union{LinRange,\
    \ StepRangeLen}, !Matched::Integer) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:826\\\
    n    iterate(!Matched::T) where T<:Union{Base.KeySet{<:Any, <:Dict}, Base.ValueIterator{<:Dict}}\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/dict.jl:695\\n    ...\\n  Stacktrace:\\\
    n   [1] in(x::Char, itr::Function)\\n     @ Base ./operators.jl:1282\\n   [2]\
    \ file_name_check(file_name::String)\\n     @ Main /tmp/tmpnt95c5lv.jl:21\\n \
    \  [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpordoo89z.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpordoo89z.jl:16\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpordoo89z.jl:22 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpordoo89z.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpordoo89z.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpordoo89z.jl:16\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpordoo89z.jl:23 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # Your code goes here...\n\
    end\n \n \nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp8kyi9yyp.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp8kyi9yyp.jl:16\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp8kyi9yyp.jl:24 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp8kyi9yyp.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp8kyi9yyp.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp8kyi9yyp.jl:16\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp8kyi9yyp.jl:25 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    count = 0\n    for i\
    \ = 1:length(file_name)\n        if(!((file_name[i] >= 'a' && file_name[i] <=\
    \ 'z') || (file_name[i] >= 'A' && file_name[i] <= 'Z') || (file_name[i] >= '0'\
    \ && file_name[i] <= '9') || file_name[i] == '.'))\n            return \"No\"\n\
    \        end\n        if(file_name[i] >= '0' && file_name[i] <= '9')\n       \
    \     count += 1\n        end\n    end\n    if(count > 3)\n        return \"No\"\
    \n    end\n    if(file_name[1] < 'a' || file_name[1] > 'z')\n        return \"\
    No\"\n    end\n    dot_index = 0\n    for i = 1:length(file_name)\n        if(file_name[i]\
    \ == '.')\n            dot_index = i\n            break\n        end\n    end\n\
    \    if(file_name[dot_index+1:length(file_name)] != \"txt\" && file_name[dot_index+1:length(file_name)]\
    \ != \"exe\" && file_name[dot_index+1:length(file_name)] != \"dll\")\n       \
    \ return \"No\"\n    end\n    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\"\
    )\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\"\
    ) == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"\
    _Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\") == \"No\")\n\t@test(candidate(\"\
    /this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"this_is_valid.wow\") ==\
    \ \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"Yes\")\n\t@test(candidate(\"\
    this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"#this2_i4s_5valid.ten\"\
    ) == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\") == \"No\")\n\t@test(candidate(\"\
    this_is_12valid.6exe4.txt\") == \"No\")\n\t@test(candidate(\"all.exe.txt\") ==\
    \ \"No\")\n\t@test(candidate(\"I563_No.exe\") == \"Yes\")\n\t@test(candidate(\"\
    Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"no_one#knows.dll\") == \"\
    Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\")\n\t@test(candidate(\"\
    I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\") == \"No\")\n\t\
    @test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"_f4indsartal132.\"\
    ) == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"s.\"\
    ) == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzccmnirl.jl:50\n  Expression: candidate(\"\
    K.dll\") == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzccmnirl.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzccmnirl.jl:46\ntest set: Test\
    \ Failed at /tmp/tmpzccmnirl.jl:51\n  Expression: candidate(\"MY16FILE3.exe\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzccmnirl.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzccmnirl.jl:46\ntest set: Test\
    \ Failed at /tmp/tmpzccmnirl.jl:57\n  Expression: candidate(\"this_is_valid.txt\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzccmnirl.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzccmnirl.jl:46\ntest set: Test\
    \ Failed at /tmp/tmpzccmnirl.jl:63\n  Expression: candidate(\"I563_No.exe\") ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzccmnirl.jl:63 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzccmnirl.jl:46\ntest set: Test\
    \ Failed at /tmp/tmpzccmnirl.jl:64\n  Expression: candidate(\"Is3youfault.txt\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/"
  stderr: "ERROR: LoadError: Some tests did not pass: 20 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzccmnirl.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    digits_cnt = count(c->'0'<=c<='9',\
    \ file_name)\n    dots_cnt = count(c->c=='.', file_name)\n    before_dot = file_name[1:findfirst(c->c=='.',\
    \ file_name)]\n    after_dot = file_name[findfirst(c->c=='.', file_name)+1:end]\n\
    \    return (digits_cnt<=3 && dots_cnt==1 && !isempty(before_dot) && ('a'<=before_dot[1]<='z'\
    \ || 'A'<=before_dot[1]<='Z') && (after_dot in [\"txt\", \"exe\", \"dll\"])) ?\
    \ \"Yes\" : \"No\"\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4q28zmna.jl:48\n  Test threw exception\n\
    \  Expression: candidate(\"final132\") == \"No\"\n  MethodError: no method matching\
    \ (::Colon)(::Int64, ::Nothing)\n  Closest candidates are:\n    (::Colon)(::T,\
    \ ::Any, !Matched::T) where T<:Real at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:41\n\
    \    (::Colon)(::A, ::Any, !Matched::C) where {A<:Real, C<:Real} at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:10\n\
    \    (::Colon)(::T, ::Any, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:40\n\
    \    ...\n  Stacktrace:\n   [1] file_name_check(file_name::String)\n     @ Main\
    \ /tmp/tmp4q28zmna.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4q28zmna.jl:48 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4q28zmna.jl:25\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |   25      1     26\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 25 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4q28zmna.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    ```\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9v6uxyk5.jl:17\nin expression starting at\
    \ /tmp/tmp9v6uxyk5.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ > 3\n        return \"No\"\n    end\n    if file_name[end] == \".\"\n      \
    \  return \"No\"\n    end\n    if !(file_name[end-3:end] == \".txt\" || file_name[end-3:end]\
    \ == \".exe\" || file_name[end-3:end] == \".dll\")\n        return \"No\"\n  \
    \  end\n    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplj6pkwxn.jl:31\n  Expression: candidate(\"\
    example.txt\") == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplj6pkwxn.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplj6pkwxn.jl:30\ntest set: Test\
    \ Failed at /tmp/tmplj6pkwxn.jl:34\n  Expression: candidate(\"K.dll\") == \"Yes\"\
    \n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplj6pkwxn.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplj6pkwxn.jl:30\ntest set: Test\
    \ Failed at /tmp/tmplj6pkwxn.jl:35\n  Expression: candidate(\"MY16FILE3.exe\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplj6pkwxn.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplj6pkwxn.jl:30\ntest set: Test\
    \ Failed at /tmp/tmplj6pkwxn.jl:41\n  Expression: candidate(\"this_is_valid.txt\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplj6pkwxn.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplj6pkwxn.jl:30\ntest set: Test\
    \ Failed at /tmp/tmplj6pkwxn.jl:47\n  Expression: candidate(\"I563_No.exe\") ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/shar"
  stderr: "ERROR: LoadError: Some tests did not pass: 18 passed, 7 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplj6pkwxn.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    number_count = 0\n \
    \   dot_count = 0\n    valid_ext = [\"txt\", \"exe\", \"dll\"]\n    file_name_sp\
    \ = split(file_name, \".\")\n    if length(file_name_sp) > 2 || length(file_name_sp)\
    \ < 2\n        return \"No\"\n    end\n    for i in 1:length(file_name_sp[1])\n\
    \        if file_name_sp[1][i] >= '0' && file_name_sp[1][i] <= '9'\n         \
    \   number_count += 1\n        end\n    end\n    if number_count > 3\n       \
    \ return \"No\"\n    end\n    for i in 1:length(file_name_sp[2])\n        if file_name_sp[2][i]\
    \ == '.'\n            dot_count += 1\n        end\n    end\n    if dot_count >\
    \ 1\n        return \"No\"\n    end\n    if file_name_sp[1][1] >= '0' && file_name_sp[1][1]\
    \ <= '9'\n        return \"No\"\n    end\n    if !(file_name_sp[2] in valid_ext)\n\
    \        return \"No\"\n    end\n    return \"Yes\"\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") ==\
    \ \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpih1d231p.jl:57\n  Expression: candidate(\"\
    _Y.txt\") == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpih1d231p.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpih1d231p.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpih1d231p.jl:58\n  Expression: candidate(\"?aREYA.exe\") ==\
    \ \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpih1d231p.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpih1d231p.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpih1d231p.jl:59\n  Expression: candidate(\"/this_is_valid.dll\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpih1d231p.jl:59 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpih1d231p.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpih1d231p.jl:64\n  Expression: candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpih1d231p.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpih1d231p.jl:50\ntest set: Error\
    \ During Test at /tmp/tmpih1d231p.jl:75\n  Test threw exception\n  Expression:\
    \ candidate(\".txt\") == \"No\"\n  BoundsError: attempt to access empty SubString{String}\
    \ at index [1]\n  S"
  stderr: "ERROR: LoadError: Some tests did not pass: 21 passed, 4 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpih1d231p.jl:48\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    c = 0\n    for x in\
    \ file_name\n        if x in '0'::9\n            c += 1\n    if c > 3\n      \
    \  return 'No'\n    end\n    x = 0\n    for i in file_name\n        if i == '.'\n\
    \            x += 1\n    if x != 1\n        return 'No'\n    end\n    if file_name[1]\
    \ not in 'a'::'z'\n        return 'No'\n    end\n    if file_name[end-3:end] not\
    \ in ['txt', 'exe', 'dll']\n        return 'No'\n    end\n    return 'Yes'\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpawlevb3a.jl:20\nin expression\
    \ starting at /tmp/tmpawlevb3a.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    file_name_arr = split(file_name,\
    \ \".\")\n    splt_file_name = file_name_arr[1]\n    #if splt_file_name == \"\
    txt\" || splt_file_name == \"exe\" || splt_file_name == \"dll\"\n    if splt_file_name\
    \ in [\"txt\", \"exe\", \"dll\"]\n        is_correct = \"Yes\"\n    else\n   \
    \     is_correct = \"No\"\n    end\n    return is_correct\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9zu1z3_i.jl:30\n  Expression: candidate(\"\
    example.txt\") == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9zu1z3_i.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9zu1z3_i.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp9zu1z3_i.jl:33\n  Expression: candidate(\"K.dll\") == \"Yes\"\
    \n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9zu1z3_i.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9zu1z3_i.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp9zu1z3_i.jl:34\n  Expression: candidate(\"MY16FILE3.exe\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9zu1z3_i.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9zu1z3_i.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp9zu1z3_i.jl:40\n  Expression: candidate(\"this_is_valid.txt\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9zu1z3_i.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9zu1z3_i.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp9zu1z3_i.jl:46\n  Expression: candidate(\"I563_No.exe\") ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/shar"
  stderr: "ERROR: LoadError: Some tests did not pass: 19 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9zu1z3_i.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    count_digits = 0\n \
    \   has_dot = false\n    count_dots = 0\n    after_dot = \"\"\n    before_dot\
    \ = \"\"\n    for i in 1:length(file_name)\n        if file_name[i] == '.'\n \
    \           count_dots += 1\n            has_dot = true\n        end\n       \
    \ if has_dot\n            after_dot *= file_name[i]\n        else\n          \
    \  before_dot *= file_name[i]\n        end\n        if '0' <= file_name[i] <=\
    \ '9'\n            count_digits += 1\n        end\n    end\n    return 'Yes' *\
    \ (\n        count_digits <= 3 * has_dot * (count_dots == 1) * \n        ((before_dot\
    \ != \"\") * (('a' <= before_dot[1] <= 'z') || ('A' <= before_dot[1] <= 'Z')))\
    \ * \n        (after_dot in [\"txt\", \"exe\", \"dll\"])\n    )\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpqt9a0epm.jl:34\nin expression\
    \ starting at /tmp/tmpqt9a0epm.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if count(r\"\\d\", file_name)\
    \ > 3\n        return \"No\"\n    end\n    split_name = split(file_name, \".\"\
    )\n    if length(split_name) != 2\n        return \"No\"\n    end\n    if !(begin(split_name[1])\
    \ in ('a':'z', 'A':'Z'))\n        return \"No\"\n    end\n    if !(split_name[2]\
    \ in [\"txt\", \"exe\", \"dll\"])\n        return \"No\"\n    end\n    return\
    \ \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"begin\" at /tmp/tmpz1n4_3pg.jl:22 expected\
    \ \"end\", got \")\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpz1n4_3pg.jl:22\n\
    in expression starting at /tmp/tmpz1n4_3pg.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if  (count(r\"[0-9]\"\
    , file_name) > 3) || (count(r\"\\.\", file_name) != 1) ||\n        !(match(r\"\
    [a-zA-Z].*\", file_name)[1] <> \"\") ||\n        !(match(r\"\\.(txt|exe|dll)\"\
    , file_name)[1] <> \"\")\n        return \"No\"\n    end\n    return \"Yes\"\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \">\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi8j3i13t.jl:16\nin expression starting at\
    \ /tmp/tmpi8j3i13t.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    nums = '0':'9'\n   \
    \ letters = 'a':'z' 'A':'Z'\n    valid_substring = ['txt', 'exe', 'dll']\n   \
    \ substring = split(file_name, '.')\n    if length(substring) != 2\n        return\
    \ \"No\"\n    end\n    if length(substring[1]) == 0\n        return \"No\"\n \
    \   end\n    for char in substring[1]\n        if char in nums\n            return\
    \ \"No\"\n        end\n    end\n    if char in nums\n        return \"No\"\n \
    \   end\n    if substring[2] in valid_substring\n        return \"Yes\"\n    else\n\
    \        return \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"\
    1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmp8yj5dya5.jl:14 expected\
    \ \"end\", got \"'\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8yj5dya5.jl:16\n\
    in expression starting at /tmp/tmp8yj5dya5.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    x = length(file_name)\n\
    \    if (x > 3 && x < 10)\n        return \"No\"\n    end\n    return \"Yes\"\n\
    end\n \nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl_xyxpxb.jl:28\n  Expression: candidate(\"\
    1example.dll\") == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl_xyxpxb.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl_xyxpxb.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpl_xyxpxb.jl:29\n  Expression: candidate(\"s1sdf3.asd\") ==\
    \ \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl_xyxpxb.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl_xyxpxb.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpl_xyxpxb.jl:30\n  Expression: candidate(\"K.dll\") == \"Yes\"\
    \n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl_xyxpxb.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl_xyxpxb.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpl_xyxpxb.jl:32\n  Expression: candidate(\"His12FILE94.exe\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl_xyxpxb.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl_xyxpxb.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpl_xyxpxb.jl:34\n  Expression: candidate(\"?aREYA.exe\") ==\
    \ \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/s"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 17 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl_xyxpxb.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(occursin.(0:9,\
    \ file_name)) > 3\n        return \"No\"\n    end\n    if (occursin(\".\", file_name)\
    \ == 0)\n        return \"No\"\n    end\n    if (occursin(\".\", file_name) >\
    \ 1)\n        return \"No\"\n    end\n    ext = split(file_name, \".\")[2]\n \
    \   if ext != \"txt\" && ext != \"exe\" && ext != \"dll\"\n        return \"No\"\
    \n    end\n    if (split(file_name, \".\")[1] == \"\")\n        return \"No\"\n\
    \    end\n    if (occursin(\"a\"::String, split(file_name, \".\")[1]) == 0 &&\n\
    \        occursin(\"A\"::String, split(file_name, \".\")[1]) == 0)\n        return\
    \ \"No\"\n    end\n    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"\
    1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpvvx61j78.jl:42\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ no method matching occursin(::Int64, ::String)\\n  Closest candidates are:\\\
    n    occursin(!Matched::Union{AbstractChar, AbstractString}, ::AbstractString)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:622\\n   \
    \ occursin(!Matched::Regex, ::AbstractString; offset) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:264\\\
    n    occursin(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:636\\\
    n  Stacktrace:\\n    [1] _broadcast_getindex_evalf\\n      @ ./broadcast.jl:670\
    \ [inlined]\\n    [2] _broadcast_getindex\\n      @ ./broadcast.jl:643 [inlined]\\\
    n    [3] getindex\\n      @ ./broadcast.jl:597 [inlined]\\n    [4] copy\\n   \
    \   @ ./broadcast.jl:899 [inlined]\\n    [5] materialize\\n      @ ./broadcast.jl:860\
    \ [inlined]\\n    [6] file_name_check(file_name::String)\\n      @ Main /tmp/tmpvvx61j78.jl:15\\\
    n    [7] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n    [8] macro expansion\\n      @ /tmp/tmpvvx61j78.jl:42 [inlined]\\\
    n    [9] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [10] top-level scope\\n      @ /tmp/tmpvvx61j78.jl:41\\ntest\
    \ set: Error During Test at /tmp/tmpvvx61j78.jl:43\\n  Test threw exception\\\
    n  Expression: candidate(\"1example.dll\") == \"No\"\\n  MethodError: no method\
    \ matching occursin(::Int64, ::String)\\n  Closest candidates are:\\n    occursin(!Matched::Union{AbstractChar,\
    \ AbstractString}, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:622\\\
    n    occursin(!Matched::Regex, ::AbstractString; offset) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:264\\\
    n    occursin(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:636\\\
    n  Stacktrace:\\n    [1] _broadcast_getindex_evalf\\n      @ ./broadcast.jl:670\
    \ [inlined]\\n    [2] _broadcast_getindex\\n      @ ./broad"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if file_name_check_condition(file_name)\n\
    \        return \"Yes\"\n    else\n        return \"No\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmppmtljhzf.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"example.txt\") == \"Yes\"\n  UndefVarError: file_name_check_condition\
    \ not defined\n  Stacktrace:\n   [1] file_name_check(file_name::String)\n    \
    \ @ Main /tmp/tmppmtljhzf.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppmtljhzf.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppmtljhzf.jl:25\ntest set:\
    \ Error During Test at /tmp/tmppmtljhzf.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\n  UndefVarError: file_name_check_condition\
    \ not defined\n  Stacktrace:\n   [1] file_name_check(file_name::String)\n    \
    \ @ Main /tmp/tmppmtljhzf.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppmtljhzf.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppmtljhzf.jl:25\ntest set:\
    \ Error During Test at /tmp/tmppmtljhzf.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\n  UndefVarError: file_name_check_condition\
    \ not defined\n  Stacktrace:\n   [1] file_name_check(file_name::String)\n    \
    \ @ Main /tmp/tmppmtljhzf.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppmtljhzf.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppmtljhzf.jl:25\ntest set:\
    \ Error During Test at /tmp/tmppmtljhzf.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"K.dll\") == \"Yes\"\n  UndefVarError: file_name_check_condition\
    \ not defined\n  Stacktrace:\n   [1] file_name_che"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 26 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppmtljhzf.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if (0<=sum(x->x=='.'\
    \ ? 1 : 0, file_name)<=1)&&(sum(x->!(x in 'a':'z'||x in 'A':'Z') ? 1 : 0, file_name)==sum(x->x=='.'\
    \ ? 1 : 0, file_name))&&\n    (0<=sum(x->x in '0':'9' ? 1 : 0, file_name)<=3)&&((split(file_name,'.')[2]==\"\
    txt\")||(split(file_name,'.')[2]==\"exe\")||(split(file_name,'.')[2]==\"dll\"\
    ))\n        return \"Yes\"\n    else\n        return \"No\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpktwisago.jl:31\n  Expression: candidate(\"\
    MY16FILE3.exe\") == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpktwisago.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpktwisago.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpktwisago.jl:37\n  Expression: candidate(\"this_is_valid.txt\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpktwisago.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpktwisago.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpktwisago.jl:43\n  Expression: candidate(\"I563_No.exe\") ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpktwisago.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpktwisago.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpktwisago.jl:44\n  Expression: candidate(\"Is3youfault.txt\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpktwisago.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpktwisago.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpktwisago.jl:45\n  Expression: candidate(\"no_one#knows.dll\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/j"
  stderr: "ERROR: LoadError: Some tests did not pass: 20 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpktwisago.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if startswith(file_name,\
    \ '.') || contains(file_name, \"..\") || endswith(file_name, '.')\n        \"\
    No\"\n    else\n        arr = split(file_name, \".\")\n        if length(arr)\
    \ != 2\n            \"No\"\n        else\n            if !in('a':'z', arr[1][1])\
    \ && !in('A':'Z', arr[1][1])\n                \"No\"\n            else\n     \
    \           if count(x -> x in '0':'9', arr[1]) > 3\n                    \"No\"\
    \n                else\n                    if arr[2] in [\"txt\", \"exe\", \"\
    dll\"]\n                        \"Yes\"\n                    else\n          \
    \              \"No\"\n                    end\n                end\n        \
    \    end\n        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"\
    1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb703l0re.jl:43\n  Expression: candidate(\"\
    example.txt\") == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb703l0re.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb703l0re.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpb703l0re.jl:46\n  Expression: candidate(\"K.dll\") == \"Yes\"\
    \n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb703l0re.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb703l0re.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpb703l0re.jl:47\n  Expression: candidate(\"MY16FILE3.exe\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb703l0re.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb703l0re.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpb703l0re.jl:53\n  Expression: candidate(\"this_is_valid.txt\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb703l0re.jl:53 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb703l0re.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpb703l0re.jl:59\n  Expression: candidate(\"I563_No.exe\") ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/shar"
  stderr: "ERROR: LoadError: Some tests did not pass: 19 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb703l0re.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # find the latin alphapet\
    \ letter\n    latin_letters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    # find the substrings after the dot\n    endswith = [\"txt\", \"exe\", \"\
    dll\"]\n    # count the number of digits\n    digits = \"0123456789\"\n    # loop\
    \ for each character in file_name\n    for c in file_name\n        if c in digits\n\
    \            num_digits += 1\n        elseif c in latin_letters\n            start_letter\
    \ = c\n        elseif c == \".\"\n            num_dots += 1\n        end\n   \
    \ end\n    # loop for each element in endswith\n    for w in endswith\n      \
    \  if ends_with(file_name, w)\n            endswith_word = w\n        end\n  \
    \  end\n    # check the conditions\n    if num_digits <= 3 && num_dots == 1 &&\
    \ start_letter != \".\" && endswith_word in endswith\n        return \"Yes\"\n\
    \    else\n        return \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\"\
    )\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\"\
    ) == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"\
    _Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\") == \"No\")\n\t@test(candidate(\"\
    /this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"this_is_valid.wow\") ==\
    \ \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"Yes\")\n\t@test(candidate(\"\
    this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"#this2_i4s_5valid.ten\"\
    ) == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\") == \"No\")\n\t@test(candidate(\"\
    this_is_12valid.6exe4.txt\") == \"No\")\n\t@test(candidate(\"all.exe.txt\") ==\
    \ \"No\")\n\t@test(candidate(\"I563_No.exe\") == \"Yes\")\n\t@test(candidate(\"\
    Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"no_one#knows.dll\") == \"\
    Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\")\n\t@test(candidate(\"\
    I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\") == \"No\")\n\t\
    @test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"_f4indsartal132.\"\
    ) == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"s.\"\
    ) == \"No\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpoelhc71_.jl:49\n  Test threw exception\n\
    \  Expression: candidate(\"example.txt\") == \"Yes\"\n  UndefVarError: ends_with\
    \ not defined\n  Stacktrace:\n   [1] file_name_check(file_name::String)\n    \
    \ @ Main /tmp/tmpoelhc71_.jl:33\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpoelhc71_.jl:49 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpoelhc71_.jl:48\ntest set:\
    \ Error During Test at /tmp/tmpoelhc71_.jl:50\n  Test threw exception\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\n  UndefVarError: num_digits not defined\n\
    \  Stacktrace:\n   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmpoelhc71_.jl:24\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpoelhc71_.jl:50 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpoelhc71_.jl:48\ntest set:\
    \ Error During Test at /tmp/tmpoelhc71_.jl:51\n  Test threw exception\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\n  UndefVarError: num_digits not defined\n\
    \  Stacktrace:\n   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmpoelhc71_.jl:24\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpoelhc71_.jl:51 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpoelhc71_.jl:48\ntest set:\
    \ Error During Test at /tmp/tmpoelhc71_.jl:52\n  Test threw exception\n  Expression:\
    \ candidate(\"K.dll\") == \"Yes\"\n  UndefVarError: ends_with not defined\n  Stacktrace:\n\
    \   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmpoelhc71_.jl:33\n\
    \   [2"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 26 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoelhc71_.jl:46\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    return_value = \"No\"\
    \n    if count_digits(file_name) <= 3 && has_only_one_dot(file_name) && is_valid_before_dot(file_name)\
    \ && is_valid_after_dot(file_name)\n        return_value = \"Yes\"\n    end\n\
    \    return return_value\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_15282ys.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"example.txt\") == \"Yes\"\n  UndefVarError: count_digits\
    \ not defined\n  Stacktrace:\n   [1] file_name_check(file_name::String)\n    \
    \ @ Main /tmp/tmp_15282ys.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_15282ys.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_15282ys.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp_15282ys.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\n  UndefVarError: count_digits not defined\n\
    \  Stacktrace:\n   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmp_15282ys.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_15282ys.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_15282ys.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp_15282ys.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\n  UndefVarError: count_digits not defined\n\
    \  Stacktrace:\n   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmp_15282ys.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_15282ys.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_15282ys.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp_15282ys.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"K.dll\") == \"Yes\"\n  UndefVarError: count_digits not defined\n\
    \  Stacktrace:\n   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmp_15282ys.j"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 26 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_15282ys.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # Your code here.\n\
    end\n \n        \nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp_5u59u84.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp_5u59u84.jl:16\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp_5u59u84.jl:24 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp_5u59u84.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp_5u59u84.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp_5u59u84.jl:16\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp_5u59u84.jl:25 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    count = 0\n    counter\
    \ = 0\n    letter = false\n    dot = false\n    valid = false\n    l_index = 0\n\
    \    r_index = 0\n    d_index = 0\n    l_sub = \"\"\n    r_sub = \"\"\n    while\
    \ count < length(file_name) \n        if !letter && isalpha(file_name[count+1])\n\
    \            letter = true\n            l_index = count\n        end\n       \
    \ if !dot && file_name[count+1] == '.'\n            dot = true\n            d_index\
    \ = count\n        end\n        if file_name[count+1] == '.' && !dot \n      \
    \      dot = true\n            d_index = count\n        end\n        if !isdigit(file_name[count+1])\
    \ && letter && !dot\n            counter += 1\n        end\n        count += 1\n\
    \    end\n    if counter <= 3\n        l_sub = file_name[l_index+1:d_index]\n\
    \        r_sub = file_name[d_index+1:length(file_name)]\n        if l_sub != \"\
    \" && (r_sub == \"txt\" || r_sub == \"exe\" || r_sub == \"dll\")\n           \
    \ valid = true\n        end\n    end\n    if valid\n        return \"Yes\"\n \
    \   else\n        return \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\")\n\
    \t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\"\
    ) == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"\
    _Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\") == \"No\")\n\t@test(candidate(\"\
    /this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"this_is_valid.wow\") ==\
    \ \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"Yes\")\n\t@test(candidate(\"\
    this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"#this2_i4s_5valid.ten\"\
    ) == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\") == \"No\")\n\t@test(candidate(\"\
    this_is_12valid.6exe4.txt\") == \"No\")\n\t@test(candidate(\"all.exe.txt\") ==\
    \ \"No\")\n\t@test(candidate(\"I563_No.exe\") == \"Yes\")\n\t@test(candidate(\"\
    Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"no_one#knows.dll\") == \"\
    Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\")\n\t@test(candidate(\"\
    I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\") == \"No\")\n\t\
    @test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"_f4indsartal132.\"\
    ) == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"s.\"\
    ) == \"No\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8dxmdpq6.jl:61\n  Test threw exception\n\
    \  Expression: candidate(\"example.txt\") == \"Yes\"\n  UndefVarError: isalpha\
    \ not defined\n  Stacktrace:\n   [1] file_name_check(file_name::String)\n    \
    \ @ Main /tmp/tmp8dxmdpq6.jl:26\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8dxmdpq6.jl:61 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8dxmdpq6.jl:60\ntest set:\
    \ Error During Test at /tmp/tmp8dxmdpq6.jl:62\n  Test threw exception\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\n  UndefVarError: isalpha not defined\n\
    \  Stacktrace:\n   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmp8dxmdpq6.jl:26\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8dxmdpq6.jl:62 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8dxmdpq6.jl:60\ntest set:\
    \ Error During Test at /tmp/tmp8dxmdpq6.jl:63\n  Test threw exception\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\n  UndefVarError: isalpha not defined\n\
    \  Stacktrace:\n   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmp8dxmdpq6.jl:26\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8dxmdpq6.jl:63 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8dxmdpq6.jl:60\ntest set:\
    \ Error During Test at /tmp/tmp8dxmdpq6.jl:64\n  Test threw exception\n  Expression:\
    \ candidate(\"K.dll\") == \"Yes\"\n  UndefVarError: isalpha not defined\n  Stacktrace:\n\
    \   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmp8dxmdpq6.jl:26\n\
    \   [2] macro ex"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 26 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8dxmdpq6.jl:58\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    #place your code here\n\
    end\n\"\"\"Create a function which takes a string representing a full name, and\
    \ returns a string containing\n    the initials.\n    The initials are the first\
    \ letter of each word in the name.\n    Example:\n    initials(\"Ernest Hemingway\"\
    ) # => \"EH\"\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp07zaasc_.jl:17\nin expression starting at /tmp/tmp07zaasc_.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    digits_count = findall(r\"\
    \\d\", file_name)\n    file_parts = split(file_name, \".\")\n    if length(digits_count)\
    \ > 3 || length(file_parts) != 2 || \n        file_parts[1] \u2209 [\"txt\", \"\
    exe\", \"dll\"] || !match(r\"^[a-zA-Z]\", file_parts[1]) \n        return \"No\"\
    \n    else\n        return \"Yes\"\n    end\nend\nfile_name_check(\"example.txt\"\
    )\nfile_name_check(\"1example.dll\")\nusing Test\n\n@testset begin\n\ncandidate\
    \ = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"\
    1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp63f7pa8o.jl:31\n  Expression: candidate(\"\
    example.txt\") == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp63f7pa8o.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp63f7pa8o.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp63f7pa8o.jl:34\n  Expression: candidate(\"K.dll\") == \"Yes\"\
    \n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp63f7pa8o.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp63f7pa8o.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp63f7pa8o.jl:35\n  Expression: candidate(\"MY16FILE3.exe\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp63f7pa8o.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp63f7pa8o.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp63f7pa8o.jl:41\n  Expression: candidate(\"this_is_valid.txt\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp63f7pa8o.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp63f7pa8o.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp63f7pa8o.jl:47\n  Expression: candidate(\"I563_No.exe\") ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/shar"
  stderr: "ERROR: LoadError: Some tests did not pass: 19 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp63f7pa8o.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # Returns \"Yes\" or\
    \ \"No\" depending on if the given file name is valid.\n    #\n    # Inputs:\n\
    \    #       file_name::String; the file name to be checked.\n    # Outputs:\n\
    \    #       check::String; \"Yes\" if the file name is valid, and \"No\" otherwise.\n\
    \    #\n    # Parameters:\n    #       check::String; the result to be returned.\n\
    \    #       c::Char; the current character being checked.\n    #       i::Int;\
    \ the current position of the character being checked.\n    #       count::Int;\
    \ the number of occurrences of numbers in the file name.\n    #       has_dot::Bool;\
    \ denotes if the file name has a dot or not.\n    #       is_valid::Bool; denotes\
    \ if the file name is valid or not.\n    check = \"No\"\n    count = 0\n    has_dot\
    \ = false\n    is_valid = true\n    for (i, c) in enumerate(file_name)\n     \
    \   if '0' <= c <= '9'\n            count += 1\n        elseif c == '.'\n    \
    \        has_dot = true\n        elseif i == 0 && !(('a' <= c <= 'z') || ('A'\
    \ <= c <= 'Z'))\n            is_valid = false\n        end\n    end\n    if count\
    \ <= 3 && has_dot && is_valid\n        if file_name[end-2:end] == \".txt\" ||\
    \ file_name[end-2:end] == \".exe\" || file_name[end-3:end] == \".dll\"\n     \
    \       check = \"Yes\"\n        end\n    end\n    return check\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyvvfdehx.jl:54\n  Expression: candidate(\"\
    example.txt\") == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyvvfdehx.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyvvfdehx.jl:53\ntest set: Test\
    \ Failed at /tmp/tmpyvvfdehx.jl:55\n  Expression: candidate(\"1example.dll\")\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyvvfdehx.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyvvfdehx.jl:53\ntest set: Test\
    \ Failed at /tmp/tmpyvvfdehx.jl:58\n  Expression: candidate(\"MY16FILE3.exe\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyvvfdehx.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyvvfdehx.jl:53\ntest set: Test\
    \ Failed at /tmp/tmpyvvfdehx.jl:62\n  Expression: candidate(\"/this_is_valid.dll\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyvvfdehx.jl:62 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyvvfdehx.jl:53\ntest set: Test\
    \ Failed at /tmp/tmpyvvfdehx.jl:64\n  Expression: candidate(\"this_is_valid.txt\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/juli"
  stderr: "ERROR: LoadError: Some tests did not pass: 18 passed, 7 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyvvfdehx.jl:51\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    nums = [\"0\",\"1\"\
    ,\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"]\n    nums_count = 0\n    dot_count\
    \ = 0\n    for i in 1:length(file_name)\n        if file_name[i] in nums\n   \
    \         nums_count += 1\n        end\n        if file_name[i] == \".\"\n   \
    \         dot_count += 1\n        end\n    end\n    if nums_count <= 3 && dot_count\
    \ == 1\n        if file_name[1] in string(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"\
    ,\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\"\
    ,\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"\
    ,\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\"\
    ,\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\")\n            return \"Yes\"\n    \
    \    else\n            return \"No\"\n        end\n    else\n        return \"\
    No\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo93mnr0r.jl:41\n  Expression: candidate(\"\
    example.txt\") == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo93mnr0r.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo93mnr0r.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpo93mnr0r.jl:44\n  Expression: candidate(\"K.dll\") == \"Yes\"\
    \n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo93mnr0r.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo93mnr0r.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpo93mnr0r.jl:45\n  Expression: candidate(\"MY16FILE3.exe\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo93mnr0r.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo93mnr0r.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpo93mnr0r.jl:51\n  Expression: candidate(\"this_is_valid.txt\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo93mnr0r.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo93mnr0r.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpo93mnr0r.jl:57\n  Expression: candidate(\"I563_No.exe\") ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/shar"
  stderr: "ERROR: LoadError: Some tests did not pass: 19 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo93mnr0r.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    valid_extensions = [\"\
    txt\", \"exe\", \"dll\"]\n    split_name = split(file_name, '.')\n    if length(split_name)\
    \ != 2\n        return \"No\"\n    end\n    basename, extension = split_name\n\
    \    if !isletter(basename[1]) || !(extension in valid_extensions) || count(x\
    \ -> x >= '0' && x <= '9', basename) > 3\n        return \"No\"\n    end\n   \
    \ return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpt78hjzio.jl:55\n  Test threw exception\n\
    \  Expression: candidate(\".txt\") == \"No\"\n  BoundsError: attempt to access\
    \ empty SubString{String} at index [1]\n  Stacktrace:\n   [1] checkbounds\n  \
    \   @ ./strings/basic.jl:216 [inlined]\n   [2] getindex(s::SubString{String},\
    \ i::Int64)\n     @ Base ./strings/substring.jl:83\n   [3] file_name_check(file_name::String)\n\
    \     @ Main /tmp/tmpt78hjzio.jl:21\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpt78hjzio.jl:55 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpt78hjzio.jl:30\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |   25      1     26\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 25 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt78hjzio.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # extract the substring\
    \ before the dot\n    ext = rx\"\\.(?<ext>\\w+)\"\n    sub_1 = match(ext, file_name)\n\
    \    if sub_1 === nothing # The file's name contains exactly one dot '.'\n   \
    \     return \"No\"\n    end\n    sub_1 = get(sub_1).ext\n    if sub_1 in [\"\
    txt\", \"exe\", \"dll\"] # The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n        # extract the substring after the dot\n     \
    \   sub_2 = rx\"(?<sub_2>\\w+)\"\n        sub_2 = match(sub_2, file_name)\n  \
    \      sub_2 = get(sub_2).sub_2\n        if length(sub_2) <= 3 # There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n            if\
    \ sub_2 === \"0\" # the substring before the dot should not be empty\n       \
    \         return \"No\"\n            end\n            if rx\"\\d\" === sub_2 #\
    \ the substring before the dot starts with a letter from the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n                return \"No\"\n            end\n            return\
    \ \"Yes\"\n        end\n    end\n    return \"No\"\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") ==\
    \ \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @rx_str not defined\nStacktrace:\n [1]\
    \ top-level scope\n   @ :0\n [2] #macroexpand#51\n   @ ./expr.jl:115 [inlined]\n\
    \ [3] macroexpand\n   @ ./expr.jl:114 [inlined]\n [4] docm(source::LineNumberNode,\
    \ mod::Module, meta::Any, ex::Any, define::Bool) (repeats 2 times)\n   @ Base.Docs\
    \ ./docs/Docs.jl:537\n [5] var\"@doc\"(::LineNumberNode, ::Module, ::String, ::Vararg{Any})\n\
    \   @ Core ./boot.jl:517\nin expression starting at /tmp/tmpqco3194v.jl:1\nin\
    \ expression starting at /tmp/tmpqco3194v.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    temp = replace(file_name,\
    \ r\"[^\\d]+\", \"\")\n    if length(temp) > 3\n        return \"No\"\n    end\n\
    \    temp = replace(file_name, r\"[^\\.]+\", \"\")\n    if length(temp) != 1\n\
    \        return \"No\"\n    end\n    if !(startswith(file_name, r\"[a-zA-Z]+\"\
    ) && endswith(file_name, r\"txt|exe|dll\"))\n        return \"No\"\n    end\n\
    \    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpkzc0t1uy.jl:33\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ no method matching replace(::String, ::Regex, ::String)\\n  Closest candidates\
    \ are:\\n    replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\\\
    n    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\\\
    n    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpkzc0t1uy.jl:15\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpkzc0t1uy.jl:33 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpkzc0t1uy.jl:32\\ntest set:\
    \ Error During Test at /tmp/tmpkzc0t1uy.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: no method matching replace(::String,\
    \ ::Regex, ::String)\\n  Closest candidates are:\\n    replace(!Matched::Union{Function,\
    \ Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\\\
    n    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\\\
    n    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpkzc0t1uy.jl:15\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpkzc0t1uy.jl:34 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if match(r\"^[a-zA-Z]\\\
    w{0,2}\\.(txt|exe|dll)$\", file_name) != nothing\n        return \"Yes\"\n   \
    \ else\n        return \"No\"\n    end\nend\nfile_name_check(\"example.txt\")\
    \ # => 'Yes'\nfile_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpce05gjnf.jl:28\n  Expression: candidate(\"\
    example.txt\") == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpce05gjnf.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpce05gjnf.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpce05gjnf.jl:32\n  Expression: candidate(\"MY16FILE3.exe\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpce05gjnf.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpce05gjnf.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpce05gjnf.jl:38\n  Expression: candidate(\"this_is_valid.txt\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpce05gjnf.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpce05gjnf.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpce05gjnf.jl:44\n  Expression: candidate(\"I563_No.exe\") ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpce05gjnf.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpce05gjnf.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpce05gjnf.jl:45\n  Expression: candidate(\"Is3youfault.txt\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/"
  stderr: "ERROR: LoadError: Some tests did not pass: 20 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpce05gjnf.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    digit_count = 0\n  \
    \  dot_found = false\n    file_extension = \"\"\n    for c in file_name\n    \
    \    if c in '0':1:10\n            digit_count += 1\n        elseif c == '.'\n\
    \            dot_found = true\n        elseif digit_count > 3\n            return\
    \ \"No\"\n        elseif dot_found\n            file_extension = c\n        elseif\
    \ c in 'a':'z' || c in 'A':'Z'\n            continue\n        else\n         \
    \   return \"No\"\n        end\n    end\n    return \"Yes\"\nend\n \n \n \n\"\"\
    \"Create a function which returns the logarithm of a given number (base 10)\n\
    \    Examples:\n    my_log(10) # => 1.0\n    my_log(100) # => 2.0\n    my_log(1000)\
    \ # => 3.0\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpcuuhyfwj.jl:38\nin expression starting at /tmp/tmpcuuhyfwj.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if count(x->isdigit(x),\
    \ file_name) > 3\n        return \"No\"\n    end\n    name_split = split(file_name,\
    \ '.')\n    if length(name_split) != 2 || length(name_split[1]) == 0 || isalpha(name_split[1][1])\n\
    \        return \"No\"\n    end\n    if name_split[2] != \"txt\" && name_split[2]\
    \ != \"exe\" && name_split[2] != \"dll\"\n        return \"No\"\n    end\n   \
    \ return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpshunsorl.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"example.txt\") == \"Yes\"\n  UndefVarError: isalpha\
    \ not defined\n  Stacktrace:\n   [1] file_name_check(file_name::String)\n    \
    \ @ Main /tmp/tmpshunsorl.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpshunsorl.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpshunsorl.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpshunsorl.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\n  UndefVarError: isalpha not defined\n\
    \  Stacktrace:\n   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmpshunsorl.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpshunsorl.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpshunsorl.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpshunsorl.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\n  UndefVarError: isalpha not defined\n\
    \  Stacktrace:\n   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmpshunsorl.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpshunsorl.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpshunsorl.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpshunsorl.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"K.dll\") == \"Yes\"\n  UndefVarError: isalpha not defined\n  Stacktrace:\n\
    \   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmpshunsorl.jl:19\n\
    \   [2] macro ex"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 0 failed, 17 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpshunsorl.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    i = 0\n    dot_counter\
    \ = 0\n    digits_counter = 0\n    is_invalid = true\n    for i in 1:length(file_name)\n\
    \        if file_name[i] == '.'\n            dot_counter += 1\n        end\n \
    \       if isdigit(file_name[i])\n            digits_counter += 1\n        end\n\
    \    end\n    if digits_counter <= 3 && dot_counter == 1 && (isletter(file_name[1])\
    \ || isletter(file_name[2])) &&\n        (file_name[length(file_name)-2:length(file_name)]\
    \ == \"txt\" || file_name[length(file_name)-2:length(file_name)] == \"exe\" ||\
    \ file_name[length(file_name)-2:length(file_name)] == \"dll\")\n        is_invalid\
    \ = false\n    end\n    if is_invalid == false\n        return \"Yes\"\n    else\n\
    \        return \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"\
    1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpek8y8w1l.jl:43\n  Expression: candidate(\"\
    1example.dll\") == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpek8y8w1l.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpek8y8w1l.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpek8y8w1l.jl:48\n  Expression: candidate(\"_Y.txt\") == \"\
    No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpek8y8w1l.jl:48 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpek8y8w1l.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpek8y8w1l.jl:49\n  Expression: candidate(\"?aREYA.exe\") ==\
    \ \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpek8y8w1l.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpek8y8w1l.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpek8y8w1l.jl:50\n  Expression: candidate(\"/this_is_valid.dll\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpek8y8w1l.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpek8y8w1l.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpek8y8w1l.jl:53\n  Expression: candidate(\"this_is_valid.txtexe\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/"
  stderr: "ERROR: LoadError: Some tests did not pass: 18 passed, 7 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpek8y8w1l.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if ismatch(r\"^[A-Za-z]\\\
    w{0,3}\\.(txt|exe|dll)$\", file_name)\n        return \"Yes\"\n    else\n    \
    \    return \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"\
    1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmwxj32wt.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"example.txt\") == \"Yes\"\n  UndefVarError: ismatch\
    \ not defined\n  Stacktrace:\n   [1] file_name_check(file_name::String)\n    \
    \ @ Main /tmp/tmpmwxj32wt.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmwxj32wt.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmwxj32wt.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpmwxj32wt.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\n  UndefVarError: ismatch not defined\n\
    \  Stacktrace:\n   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmpmwxj32wt.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmwxj32wt.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmwxj32wt.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpmwxj32wt.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\n  UndefVarError: ismatch not defined\n\
    \  Stacktrace:\n   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmpmwxj32wt.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmwxj32wt.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmwxj32wt.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpmwxj32wt.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"K.dll\") == \"Yes\"\n  UndefVarError: ismatch not defined\n  Stacktrace:\n\
    \   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmpmwxj32wt.jl:15\n\
    \   [2] macro ex"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 26 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmwxj32wt.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    digits = [\"0\",\"1\"\
    ,\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"]\n    sub_exts = [\"txt\", \"\
    exe\", \"dll\"]\n    count = 0\n    dot_idx = 0\n    temp = 0\n    for i in 1:length(file_name)\n\
    \        if file_name[i] in digits\n            count += 1\n        end\n    \
    \    if file_name[i] == '.'\n            dot_idx = i\n        end\n    end\n \
    \   if count > 3\n        return \"No\"\n    end\n    if count == 0\n        return\
    \ \"No\"\n    end\n    if (dot_idx == 1) || (dot_idx == length(file_name))\n \
    \       return \"No\"\n    end\n    if count == length(file_name)\n        return\
    \ \"No\"\n    end\n    sub = \"\"\n    for i in 1:dot_idx-1\n        sub = sub\
    \ * file_name[i]\n    end\n    #println(sub)\n    if (sub[1] >= 'a' && sub[1]\
    \ <= 'z') || (sub[1] >= 'A' && sub[1] <= 'Z')\n        for i in 1:length(sub_exts)\n\
    \            if (sub_exts[i] == file_name[dot_idx+1:end])\n                return\
    \ \"Yes\"\n            end\n        end\n    end\n    return \"No\"\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbxugh571.jl:59\n  Expression: candidate(\"\
    example.txt\") == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbxugh571.jl:59 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbxugh571.jl:58\ntest set: Test\
    \ Failed at /tmp/tmpbxugh571.jl:62\n  Expression: candidate(\"K.dll\") == \"Yes\"\
    \n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbxugh571.jl:62 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbxugh571.jl:58\ntest set: Test\
    \ Failed at /tmp/tmpbxugh571.jl:63\n  Expression: candidate(\"MY16FILE3.exe\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbxugh571.jl:63 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbxugh571.jl:58\ntest set: Test\
    \ Failed at /tmp/tmpbxugh571.jl:69\n  Expression: candidate(\"this_is_valid.txt\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbxugh571.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbxugh571.jl:58\ntest set: Test\
    \ Failed at /tmp/tmpbxugh571.jl:75\n  Expression: candidate(\"I563_No.exe\") ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/shar"
  stderr: "ERROR: LoadError: Some tests did not pass: 19 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbxugh571.jl:56\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if count(isdigit, file_name)\
    \ > 3\n        return \"No\"\n    end\n    if count(isalpha, file_name) == 0\n\
    \        return \"No\"\n    end\n    if count(x -> x == '.', file_name) != 1\n\
    \        return \"No\"\n    end\n    if length(filter(isdigit, file_name)) ==\
    \ length(file_name)\n        return \"No\"\n    end\n    if file_name[end-2:end]\
    \ != \"txt\" && file_name[end-2:end] != \"exe\" && file_name[end-2:end] != \"\
    dll\"\n        return \"No\"\n    end\n    return \"Yes\"\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjiglv1a7.jl:37\n  Test threw exception\n\
    \  Expression: candidate(\"example.txt\") == \"Yes\"\n  UndefVarError: isalpha\
    \ not defined\n  Stacktrace:\n   [1] file_name_check(file_name::String)\n    \
    \ @ Main /tmp/tmpjiglv1a7.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjiglv1a7.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjiglv1a7.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpjiglv1a7.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\n  UndefVarError: isalpha not defined\n\
    \  Stacktrace:\n   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmpjiglv1a7.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjiglv1a7.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjiglv1a7.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpjiglv1a7.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\n  UndefVarError: isalpha not defined\n\
    \  Stacktrace:\n   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmpjiglv1a7.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjiglv1a7.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjiglv1a7.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpjiglv1a7.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"K.dll\") == \"Yes\"\n  UndefVarError: isalpha not defined\n  Stacktrace:\n\
    \   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmpjiglv1a7.jl:18\n\
    \   [2] macro ex"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 21 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjiglv1a7.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    check = split(file_name,\
    \ \".\")\n    if length(check) > 2\n        return \"No\"\n    end\n    if (check[1][1]\
    \ in '0':'9')\n        return \"No\"\n    end\n    if !(check[2] in [\"txt\",\
    \ \"exe\", \"dll\"])\n        return \"No\"\n    end\n    return \"Yes\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvfsgxjw2.jl:37\n  Expression: candidate(\"\
    His12FILE94.exe\") == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvfsgxjw2.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvfsgxjw2.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpvfsgxjw2.jl:38\n  Expression: candidate(\"_Y.txt\") == \"\
    No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpvfsgxjw2.jl:38 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvfsgxjw2.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpvfsgxjw2.jl:39\n  Expression: candidate(\"?aREYA.exe\") ==\
    \ \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvfsgxjw2.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvfsgxjw2.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpvfsgxjw2.jl:40\n  Expression: candidate(\"/this_is_valid.dll\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvfsgxjw2.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvfsgxjw2.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpvfsgxjw2.jl:45\n  Expression: candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 19 passed, 5 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvfsgxjw2.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if !contains(file_name,\
    \ '.') || length(file_name) < 5\n        return \"No\"\n    end\n    file_name\
    \ = split(file_name, '.')\n    if !('a'<=file_name[1][1]<='z' || 'A'<=file_name[1][1]<='Z')\n\
    \        return \"No\"\n    end\n    if !(file_name[2] in [\"txt\", \"exe\", \"\
    dll\"])\n        return \"No\"\n    end\n    if length(regexp(r'[0-9]', file_name[1]))\
    \ > 3\n        return \"No\"\n    end\n    return \"Yes\"\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwovlqzol.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"example.txt\") == \"Yes\"\n  UndefVarError: r not defined\n\
    \  Stacktrace:\n   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmpwovlqzol.jl:25\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwovlqzol.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwovlqzol.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwovlqzol.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"K.dll\") == \"Yes\"\n  UndefVarError: r not defined\n  Stacktrace:\n\
    \   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmpwovlqzol.jl:25\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwovlqzol.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwovlqzol.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwovlqzol.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"MY16FILE3.exe\") == \"Yes\"\n  UndefVarError: r not defined\n  Stacktrace:\n\
    \   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmpwovlqzol.jl:25\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwovlqzol.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwovlqzol.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwovlqzol.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"His12FILE94.exe\") == \"No\"\n  UndefVarError: r not defined\n \
    \ Stacktrace:\n   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmpwovlqzol.jl:25\n\
    \   [2] macro expansion\n     @ /s"
  stderr: "ERROR: LoadError: Some tests did not pass: 17 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwovlqzol.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    for i in 1:length(file_name)\n\
    \        if file_name[i] > '0' && file_name[i] < '9'\n            if file_name[i+1]\
    \ > '0' && file_name[i+1] < '9'\n                if file_name[i+2] > '0' && file_name[i+2]\
    \ < '9'\n                    return \"No\"\n                end\n            end\n\
    \        end\n    end\n    dot_index = 0\n    for i in 1:length(file_name)\n \
    \       if file_name[i] == '.'\n            dot_index = i\n        end\n    end\n\
    \    first_part = file_name[1:dot_index-1]\n    if (length(first_part) == 0)\n\
    \        return \"No\"\n    end\n    second_part = file_name[dot_index+1:end]\n\
    \    if (second_part != \"txt\" && second_part != \"exe\" && second_part != \"\
    dll\")\n        return \"No\"\n    end\n    if (file_name[1] > 'a' && file_name[1]\
    \ < 'z') || (file_name[1] > 'A' && file_name[1] < 'Z')\n        return \"Yes\"\
    \n    else\n        return \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\"\
    )\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\"\
    ) == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"\
    _Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\") == \"No\")\n\t@test(candidate(\"\
    /this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"this_is_valid.wow\") ==\
    \ \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"Yes\")\n\t@test(candidate(\"\
    this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"#this2_i4s_5valid.ten\"\
    ) == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\") == \"No\")\n\t@test(candidate(\"\
    this_is_12valid.6exe4.txt\") == \"No\")\n\t@test(candidate(\"all.exe.txt\") ==\
    \ \"No\")\n\t@test(candidate(\"I563_No.exe\") == \"Yes\")\n\t@test(candidate(\"\
    Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"no_one#knows.dll\") == \"\
    Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\")\n\t@test(candidate(\"\
    I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\") == \"No\")\n\t\
    @test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"_f4indsartal132.\"\
    ) == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"s.\"\
    ) == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpd_k3hx74.jl:54\n  Expression: candidate(\"\
    His12FILE94.exe\") == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd_k3hx74.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd_k3hx74.jl:48\ntest set: Test\
    \ Failed at /tmp/tmpd_k3hx74.jl:63\n  Expression: candidate(\"this_is_12valid.6exe4.txt\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd_k3hx74.jl:63 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd_k3hx74.jl:48\ntest set: Test\
    \ Failed at /tmp/tmpd_k3hx74.jl:65\n  Expression: candidate(\"I563_No.exe\") ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd_k3hx74.jl:65 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd_k3hx74.jl:48\ntest set: Test\
    \ Failed at /tmp/tmpd_k3hx74.jl:70\n  Expression: candidate(\"final..txt\") ==\
    \ \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd_k3hx74.jl:70 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd_k3hx74.jl:48\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   22     4     26\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 22 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd_k3hx74.jl:46\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # Calculate the amount\
    \ of digits in the file name\n    count_digits = sum( [isletter(c) ? 0 : 1 for\
    \ c in file_name] ) \n    # Check if the amount of digits is greater than 3.\n\
    \    if count_digits > 3\n        return \"No\"\n    end\nusing Test\n\n@testset\
    \ begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") ==\
    \ \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgqbk4zn_.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgqbk4zn_.jl:1\n\
    in expression starting at /tmp/tmpgqbk4zn_.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    num_digits = 0\n   \
    \ for ch in file_name\n        if '0' <= ch <= '9'\n            num_digits +=\
    \ 1\n        end\n    end\n    if num_digits > 3\n        return \"No\"\n    end\n\
    \    dot_pos = findfirst(x -> x == '.', file_name)\n    if dot_pos == nothing\n\
    \        return \"No\"\n    end\n    before_dot = file_name[1:dot_pos-1]\n   \
    \ if !contains(['a'-'z', 'A'-'Z'], before_dot[1]) || before_dot == \"\"\n    \
    \    return \"No\"\n    end\n    after_dot = file_name[dot_pos+1:end]\n    if\
    \ !contains([\"txt\", \"exe\", \"dll\"], after_dot)\n        return \"No\"\n \
    \   end\n    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"\
    1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpt1ofnk9v.jl:43\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ no method matching contains(::Vector{Int64}, ::Char)\\n  Closest candidates\
    \ are:\\n    contains(!Matched::AbstractString, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:100\\\
    n    contains(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:161\\\
    n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @ Main /tmp/tmpt1ofnk9v.jl:29\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpt1ofnk9v.jl:43 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpt1ofnk9v.jl:42\\ntest set:\
    \ Error During Test at /tmp/tmpt1ofnk9v.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: no method matching contains(::Vector{Int64},\
    \ ::Char)\\n  Closest candidates are:\\n    contains(!Matched::AbstractString,\
    \ ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:100\\\
    n    contains(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:161\\\
    n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @ Main /tmp/tmpt1ofnk9v.jl:29\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpt1ofnk9v.jl:44 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpt1ofnk9v.jl:42\\ntest set:\
    \ Error During Test at /tmp/tmpt1ofnk9v.jl:45\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: no method matching contains(::Vector{Int64},\
    \ ::Char)\\n  Closest candidates are:\\n    contains(!Matched::AbstractString,\
    \ ::Any) at /shared/centos7/julia/1.7.3/s"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    count = 0\n    #1. Check\
    \ if there are not more than 3 digits in the file's name\n    for i = 1:length(file_name)\n\
    \        if '0' <= file_name[i] <= '9'\n            count += 1\n        end\n\
    \    end\n    if count > 3\n        return \"No\"\n    end\n    #2. Check if the\
    \ file's name contains exactly one dot\n    count = 0\n    for i = 1:length(file_name)\n\
    \        if file_name[i] == '.'\n            count += 1\n        end\n    end\n\
    \    if count != 1\n        return \"No\"\n    end\n    #3. Check if the substring\
    \ before the dot is not empty and start with a letter\n    dot_index = findfirst(file_name,\
    \ '.')\n    if dot_index == 1 || dot_index == length(file_name)\n        return\
    \ \"No\"\n    end\n    substring_before_dot = file_name[1:dot_index-1]\n    if\
    \ (substring_before_dot[1] >= 'a' && substring_before_dot[1] <= 'z') || \n   \
    \     (substring_before_dot[1] >= 'A' && substring_before_dot[1] <= 'Z')\n   \
    \     #4. Check if the substring after the dot should be one of these: ['txt',\
    \ 'exe', 'dll']\n        substring_after_dot = file_name[dot_index+1:end]\n  \
    \      if substring_after_dot == \"txt\" || substring_after_dot == \"exe\" ||\
    \ substring_after_dot == \"dll\"\n            return \"Yes\"\n        end\n  \
    \  end\n    return \"No\"\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmptr1ktqac.jl:56\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ no method matching findfirst(::String, ::Char)\\n  Closest candidates are:\\\
    n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\\\
    n    findfirst(::AbstractString, !Matched::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:104\\\
    n    findfirst(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\\\
    n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @ Main /tmp/tmptr1ktqac.jl:36\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmptr1ktqac.jl:56 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmptr1ktqac.jl:55\\ntest set:\
    \ Error During Test at /tmp/tmptr1ktqac.jl:57\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: no method matching findfirst(::String,\
    \ ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function, ::Any)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\\n    findfirst(::AbstractString,\
    \ !Matched::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:104\\\
    n    findfirst(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\\\
    n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @ Main /tmp/tmptr1ktqac.jl:36\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmptr1ktqac.jl:57 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmptr1ktqac.jl:55\\ntest set:\
    \ Error During Test at /tmp/tmptr1ktqac.jl:58\\n  Test threw exception\\n  Expre"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    n = 0\n    z = 0\n \
    \   k = 0\n    for i in file_name\n        if i in '0':9\n            n = n +\
    \ 1\n        end\n        if i == '.'\n            z = z + 1\n        end\n  \
    \  end\n    if (n > 3) || (z != 1)\n        k = 1\n    end\n    if k == 1\n  \
    \      return \"No\"\n    else\n        return \"Yes\"\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpn3gdlwjp.jl:40\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ no method matching (::Colon)(::Char, ::Int64)\\n  Closest candidates are:\\\
    n    (::Colon)(::T, ::Any, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:40\\\
    n    (::Colon)(!Matched::T, ::Real, !Matched::T) where T<:AbstractFloat at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:18\\\
    n    (::Colon)(!Matched::T, ::T) where T<:Real at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:5\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpn3gdlwjp.jl:19\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpn3gdlwjp.jl:40 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpn3gdlwjp.jl:39\\ntest set:\
    \ Error During Test at /tmp/tmpn3gdlwjp.jl:41\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: no method matching (::Colon)(::Char,\
    \ ::Int64)\\n  Closest candidates are:\\n    (::Colon)(::T, ::Any, !Matched::T)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:40\\n    (::Colon)(!Matched::T,\
    \ ::Real, !Matched::T) where T<:AbstractFloat at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:18\\\
    n    (::Colon)(!Matched::T, ::T) where T<:Real at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:5\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpn3gdlwjp.jl:19\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpn3gdlwjp.jl:41 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpn3gdlwjp.jl:39\\ntest set:\
    \ Er"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    string = \"\"\n    count\
    \ = 0\n    if (split(file_name, '.')[1] == \"txt\" || split(file_name, '.')[1]\
    \ == \"exe\" || split(file_name, '.')[1] == \"dll\") \n        string = \"Yes\"\
    \n    else \n        string = \"No\"\n    end \n    if (split(file_name, '.')[1]\
    \ == \"\") \n        string = \"No\"\n    end \n    if (split(file_name, '.')[1]\
    \ == \"exe\" || split(file_name, '.')[1] == \"dll\")\n        if (split(file_name,\
    \ '.')[2] != \"\") \n            string = \"No\"\n        end \n    end \n   \
    \ if !(isalpha(split(file_name, '.')[1][1])) \n        string = \"No\"\n    end\
    \ \n    for letter in file_name \n        if isdigit(letter) \n            count\
    \ = count + 1\n        end \n    end \n    if (count > 3) \n        string = \"\
    No\"\n    end \n    return string\nend \nusing Test\n\n@testset begin\n\ncandidate\
    \ = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"\
    1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpr740izii.jl:48\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  UndefVarError:\
    \ isalpha not defined\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\\
    n     @ Main /tmp/tmpr740izii.jl:30\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpr740izii.jl:48 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpr740izii.jl:47\\ntest set:\
    \ Error During Test at /tmp/tmpr740izii.jl:49\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  UndefVarError: isalpha not defined\\\
    n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @ Main /tmp/tmpr740izii.jl:30\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpr740izii.jl:49 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpr740izii.jl:47\\ntest set:\
    \ Error During Test at /tmp/tmpr740izii.jl:50\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  UndefVarError: isalpha not defined\\\
    n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @ Main /tmp/tmpr740izii.jl:30\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpr740izii.jl:50 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpr740izii.jl:47\\ntest set:\
    \ Error During Test at /tmp/tmpr740izii.jl:51\\n  Test threw exception\\n  Expression:\
    \ candidate(\"K.dll\") == \"Yes\"\\n  UndefVarError: isalpha not defined\\n  Stacktrace:\\\
    n   [1] file_name_check(file_name::String"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if !startswith(file_name,\
    \ [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\"\
    , \"w\", \"x\", \"y\", \"z\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\"\
    , \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\"\
    , \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"]) || !occursin(file_name,\
    \ \".\") || length(split(file_name, \".\")) != 2 ||  length(filter(r -> r in '0':'9',\
    \ file_name))>3\n        return \"No\"\n    elseif contains(split(file_name, \"\
    .\")[2], [\"txt\", \"exe\", \"dll\"])\n        return \"Yes\"\n    else\n    \
    \    return \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"\
    1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp_p915ze1.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ no method matching startswith(::String, ::Vector{String})\\n  Closest candidates\
    \ are:\\n    startswith(::AbstractString, !Matched::Union{AbstractChar, Tuple{Vararg{AbstractChar}},\
    \ Set{<:AbstractChar}, AbstractVector{<:AbstractChar}}) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:25\\\
    n    startswith(::Union{SubString{String}, String}, !Matched::Union{SubString{String},\
    \ String}) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:48\\\
    n    startswith(::AbstractString, !Matched::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:21\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp_p915ze1.jl:15\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp_p915ze1.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp_p915ze1.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmp_p915ze1.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: no method matching startswith(::String,\
    \ ::Vector{String})\\n  Closest candidates are:\\n    startswith(::AbstractString,\
    \ !Matched::Union{AbstractChar, Tuple{Vararg{AbstractChar}}, Set{<:AbstractChar},\
    \ AbstractVector{<:AbstractChar}}) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:25\\\
    n    startswith(::Union{SubString{String}, String}, !Matched::Union{SubString{String},\
    \ String}) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:48\\\
    n    startswith(::AbstractString, !Matched::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:21\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp_p915ze1.jl:15\\n   [2] macro expansion\\"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # Write your code here!\n\
    end\n@testset \"Example Tests\" begin\n    @test file_name_check(\"example.txt\"\
    ) == \"Yes\"\n    @test file_name_check(\"1example.dll\") == \"No\"\n    @test\
    \ file_name_check(\"1example1.txt\") == \"No\"\n    @test file_name_check(\"example.dll\"\
    ) == \"Yes\"\n    @test file_name_check(\"1.dll\") == \"No\"\n    @test file_name_check(\"\
    example1.exe\") == \"Yes\"\n    @test file_name_check(\"1example2.exe\") == \"\
    No\"\n    @test file_name_check(\"example.txt.exe\") == \"No\"\n    @test file_name_check(\"\
    example1.txt1\") == \"No\"\n    @test file_name_check(\"example.exe.txt\") ==\
    \ \"No\"\n    @test file_name_check(\"example.txt.txt\") == \"No\"\n    @test\
    \ file_name_check(\"example1.txt.exe\") == \"No\"\n    @test file_name_check(\"\
    example.txt1.exe\") == \"No\"\n    @test file_name_check(\"example1.txt.txt\"\
    ) == \"No\"\n    @test file_name_check(\"example1.txt.exe\") == \"No\"\n    @test\
    \ file_name_check(\"example.exe1.txt\") == \"No\"\n    @test file_name_check(\"\
    example.txt1.exe\") == \"No\"\n    @test file_name_check(\"example1.txt1.exe\"\
    ) == \"No\"\n    @test file_name_check(\"example1.exe1.txt\") == \"No\"\n    @test\
    \ file_name_check(\"example1.exe1.exe\") == \"No\"\n    @test file_name_check(\"\
    example1.exe1.dll\") == \"No\"\n    @test file_name_check(\"example.dll1.txt\"\
    ) == \"No\"\n    @test file_name_check(\"example.dll1.exe\") == \"No\"\n    @test\
    \ file_name_check(\"example.dll1.dll\") == \"No\"\n    @test\nusing Test\n\n@testset\
    \ begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") ==\
    \ \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"begin\" at /tmp/tmp3i56zbsu.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3i56zbsu.jl:17\n\
    in expression starting at /tmp/tmp3i56zbsu.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \"\"\"Function that\
    \ checks if a file name is valid or not. \n    \"\"\"\n    is_valid = \"\"\n \
    \   file_dot = file_name.find(\".\")\n    if file_dot != -1\n        file_name_split\
    \ = split(file_name, \".\")\n        if (file_name_split[1] == \"txt\") || (file_name_split[1]\
    \ == \"exe\") || (file_name_split[1] == \"dll\")\n            file_number = length(filter(x\
    \ -> x in '0':'9', file_name_split[1]))\n            if file_number <= 3\n   \
    \             is_valid = \"Yes\"\n            else\n                is_valid =\
    \ \"No\"\n            end\n        else\n            is_valid = \"No\"\n     \
    \   end\n    else\n        is_valid = \"No\"\n    end\n    return is_valid\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7rhak15u.jl:41\n  Test threw exception\n\
    \  Expression: candidate(\"example.txt\") == \"Yes\"\n  type String has no field\
    \ find\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2]\
    \ file_name_check(file_name::String)\n     @ Main /tmp/tmp7rhak15u.jl:18\n   [3]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7rhak15u.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7rhak15u.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp7rhak15u.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\n  type String has no field find\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] file_name_check(file_name::String)\n\
    \     @ Main /tmp/tmp7rhak15u.jl:18\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7rhak15u.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7rhak15u.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp7rhak15u.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\n  type String has no field find\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] file_name_check(file_name::String)\n\
    \     @ Main /tmp/tmp7rhak15u.jl:18\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7rhak15u.jl:43 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7rhak15u.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp7rhak15u.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(\"K.dll\") == \"Yes\"\n  type Stri"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 26 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7rhak15u.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    digits_in_name=0\n \
    \   for i in 1:length(file_name)\n        if file_name[i] in 0:9\n           \
    \ digits_in_name+=1\n        end\n    end\n    if digits_in_name>3\n        return\
    \ \"No\"\n    end\n    if !(\".\" in file_name)\n        return \"No\"\n    end\n\
    \    name_before_dot = split(file_name, '.')[1]\n    if !(name_before_dot[1] in\
    \ 'a':'z' || name_before_dot[1] in 'A':'Z')\n        return \"No\"\n    end\n\
    \    if name_before_dot==\"\"\n        return \"No\"\n    end\n    name_after_dot\
    \ = split(file_name, '.')[2]\n    if !(name_after_dot in [\"txt\", \"exe\", \"\
    dll\"])\n        return \"No\"\n    end\n    return \"Yes\"\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpgn3zij2a.jl:45\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n   [1] error(s::String)\\n     @\
    \ Base ./error.jl:33\\n   [2] in(#unused#::String, #unused#::String)\\n     @\
    \ Base ./strings/search.jl:638\\n   [3] file_name_check(file_name::String)\\n\
    \     @ Main /tmp/tmpgn3zij2a.jl:24\\n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [5] macro expansion\\n     @ /tmp/tmpgn3zij2a.jl:45 [inlined]\\\
    n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [7] top-level scope\\n     @ /tmp/tmpgn3zij2a.jl:44\\ntest set:\
    \ Error During Test at /tmp/tmpgn3zij2a.jl:46\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  use occursin(x, y) for string containment\\\
    n  Stacktrace:\\n   [1] error(s::String)\\n     @ Base ./error.jl:33\\n   [2]\
    \ in(#unused#::String, #unused#::String)\\n     @ Base ./strings/search.jl:638\\\
    n   [3] file_name_check(file_name::String)\\n     @ Main /tmp/tmpgn3zij2a.jl:24\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [5] macro expansion\\n     @ /tmp/tmpgn3zij2a.jl:46 [inlined]\\\
    n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [7] top-level scope\\n     @ /tmp/tmpgn3zij2a.jl:44\\ntest set:\
    \ Error During Test at /tmp/tmpgn3zij2a.jl:47\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  use occursin(x, y) for string containment\\\
    n  Stacktrace:\\n   [1] error(s::String)\\n     @ Base ./error.jl:33\\n   [2]\
    \ in(#unused#::String, #unused#::String)\\n     @ Base ./strings/search.jl:638\\\
    n   [3] file_name_check(file_name::String)\\n     @ Main /tmp/tmpgn3zij2a.jl:24\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [5] macro expansion"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    digits = \"0123456789\"\
    \n    letters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n   \
    \ result = \"Yes\"\n    if contains(file_name, '.') == false\n        result =\
    \ \"No\"\n    else\n        first, second = split(file_name, '.')\n        if\
    \ starts_with(second, letters) == false || contains(second, digits) == true\n\
    \            result = \"No\"\n        elseif sum(map(s -> s in digits, first))\
    \ > 3\n            result = \"No\"\n        elseif second != \"txt\" && second\
    \ != \"exe\" && second != \"dll\"\n            result = \"No\"\n        end\n\
    \    end\n    return result\nend\n \nusing Test\n\n@testset begin\n\ncandidate\
    \ = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"\
    1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_knhe2u1.jl:38\n  Test threw exception\n\
    \  Expression: candidate(\"example.txt\") == \"Yes\"\n  UndefVarError: starts_with\
    \ not defined\n  Stacktrace:\n   [1] file_name_check(file_name::String)\n    \
    \ @ Main /tmp/tmp_knhe2u1.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_knhe2u1.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_knhe2u1.jl:37\ntest set:\
    \ Error During Test at /tmp/tmp_knhe2u1.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\n  UndefVarError: starts_with not defined\n\
    \  Stacktrace:\n   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmp_knhe2u1.jl:22\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_knhe2u1.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_knhe2u1.jl:37\ntest set:\
    \ Error During Test at /tmp/tmp_knhe2u1.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\n  UndefVarError: starts_with not defined\n\
    \  Stacktrace:\n   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmp_knhe2u1.jl:22\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_knhe2u1.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_knhe2u1.jl:37\ntest set:\
    \ Error During Test at /tmp/tmp_knhe2u1.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"K.dll\") == \"Yes\"\n  UndefVarError: starts_with not defined\n\
    \  Stacktrace:\n   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmp_knhe2u1.jl:22"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 25 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_knhe2u1.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # YOUR CODE HERE\n \
    \   pass\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t\
    @test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpfc2gq295.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"example.txt\") == \"Yes\"\n  UndefVarError: pass not\
    \ defined\n  Stacktrace:\n   [1] file_name_check(file_name::String)\n     @ Main\
    \ /tmp/tmpfc2gq295.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfc2gq295.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfc2gq295.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpfc2gq295.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\n  UndefVarError: pass not defined\n \
    \ Stacktrace:\n   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmpfc2gq295.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfc2gq295.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfc2gq295.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpfc2gq295.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\n  UndefVarError: pass not defined\n  Stacktrace:\n\
    \   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmpfc2gq295.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfc2gq295.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfc2gq295.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpfc2gq295.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"K.dll\") == \"Yes\"\n  UndefVarError: pass not defined\n  Stacktrace:\n\
    \   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmpfc2gq295.jl:16\n\
    \   [2] macro expansion\n    "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 26 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfc2gq295.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if isempty(regexp(file_name,\
    \ r\"^[a-zA-Z][^.]*\\.(?:txt|exe|dll)$\"))\n        return \"No\"\n    else\n\
    \        return \"Yes\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"\
    1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmprbmmo0rz.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"example.txt\") == \"Yes\"\n  UndefVarError: regexp\
    \ not defined\n  Stacktrace:\n   [1] file_name_check(file_name::String)\n    \
    \ @ Main /tmp/tmprbmmo0rz.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprbmmo0rz.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprbmmo0rz.jl:25\ntest set:\
    \ Error During Test at /tmp/tmprbmmo0rz.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\n  UndefVarError: regexp not defined\n\
    \  Stacktrace:\n   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmprbmmo0rz.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprbmmo0rz.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprbmmo0rz.jl:25\ntest set:\
    \ Error During Test at /tmp/tmprbmmo0rz.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\n  UndefVarError: regexp not defined\n \
    \ Stacktrace:\n   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmprbmmo0rz.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprbmmo0rz.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprbmmo0rz.jl:25\ntest set:\
    \ Error During Test at /tmp/tmprbmmo0rz.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"K.dll\") == \"Yes\"\n  UndefVarError: regexp not defined\n  Stacktrace:\n\
    \   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmprbmmo0rz.jl:15\n\
    \   [2] macro expans"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 26 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprbmmo0rz.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    num_digits = length([c\
    \ for c in file_name if c in \"0123456789\"])\n    if num_digits > 3\n       \
    \ return \"No\"\n    end\n    num_dots = length([c for c in file_name if c ==\
    \ '.'])\n    if num_dots != 1\n        return \"No\"\n    end\n    substrings\
    \ = split(file_name, '.')\n    if substrings[1] != \"txt\" && substrings[1] !=\
    \ \"exe\" && substrings[1] != \"dll\"\n        return \"No\"\n    end\n    first_char\
    \ = substrings[1][1]\n    if !(first_char in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    )\n        return \"No\"\n    end\n    return \"Yes\"\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") ==\
    \ \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2517lp9q.jl:38\n  Expression: candidate(\"\
    example.txt\") == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2517lp9q.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2517lp9q.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp2517lp9q.jl:41\n  Expression: candidate(\"K.dll\") == \"Yes\"\
    \n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2517lp9q.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2517lp9q.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp2517lp9q.jl:42\n  Expression: candidate(\"MY16FILE3.exe\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2517lp9q.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2517lp9q.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp2517lp9q.jl:48\n  Expression: candidate(\"this_is_valid.txt\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2517lp9q.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2517lp9q.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp2517lp9q.jl:54\n  Expression: candidate(\"I563_No.exe\") ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/shar"
  stderr: "ERROR: LoadError: Some tests did not pass: 19 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2517lp9q.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if count(r\"\\d\", file_name)\
    \ > 3\n        return \"No\"\n    end\n    file_name_no_extension, extension =\
    \ split(file_name, '.')\n    if extension in [\"txt\", \"exe\", \"dll\"] && ismatch(r\"\
    [a-zA-Z]\", file_name_no_extension)\n        return \"Yes\"\n    end\n    return\
    \ \"No\"\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t\
    @test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpudox21qo.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"example.txt\") == \"Yes\"\n  UndefVarError: ismatch\
    \ not defined\n  Stacktrace:\n   [1] file_name_check(file_name::String)\n    \
    \ @ Main /tmp/tmpudox21qo.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpudox21qo.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpudox21qo.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpudox21qo.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\n  UndefVarError: ismatch not defined\n\
    \  Stacktrace:\n   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmpudox21qo.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpudox21qo.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpudox21qo.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpudox21qo.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"K.dll\") == \"Yes\"\n  UndefVarError: ismatch not defined\n  Stacktrace:\n\
    \   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmpudox21qo.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpudox21qo.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpudox21qo.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpudox21qo.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"MY16FILE3.exe\") == \"Yes\"\n  UndefVarError: ismatch not defined\n\
    \  Stacktrace:\n   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmpudox21qo.jl:19\n\
    \   [2] macr"
  stderr: "ERROR: LoadError: Some tests did not pass: 11 passed, 0 failed, 15 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpudox21qo.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # type assertion\n \
    \   if !(contains(r\"^[a-zA-Z][a-zA-Z0-9]*\\.txt$\", file_name) || \n        \
    \  contains(r\"^[a-zA-Z][a-zA-Z0-9]*\\.exe$\", file_name) || \n          contains(r\"\
    ^[a-zA-Z][a-zA-Z0-9]*\\.dll$\", file_name))\n        return \"No\"\n    end\n\
    \    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpg1mis34s.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ no method matching contains(::Regex, ::String)\\n  Closest candidates are:\\\
    n    contains(!Matched::AbstractString, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:100\\\
    n    contains(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:161\\\
    n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @ Main /tmp/tmpg1mis34s.jl:16\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpg1mis34s.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpg1mis34s.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpg1mis34s.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: no method matching contains(::Regex,\
    \ ::String)\\n  Closest candidates are:\\n    contains(!Matched::AbstractString,\
    \ ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:100\\\
    n    contains(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:161\\\
    n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @ Main /tmp/tmpg1mis34s.jl:16\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpg1mis34s.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpg1mis34s.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpg1mis34s.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: no method matching contains(::Regex,\
    \ ::String)\\n  Closest candidates are:\\n    contains(!Matched::AbstractString,\
    \ ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/st"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    num_digits = sum(i in\
    \ '0':'9' for i in file_name)\n    if num_digits > 3\n        return \"No\"\n\
    \    end\n    dot_idx = findfirst(x -> x == '.', file_name)\n    if dot_idx ==\
    \ nothing\n        return \"No\"\n    end\n    if dot_idx == 1\n        return\
    \ \"No\"\n    end\n    filename_before_dot = file_name[1:dot_idx-1]\n    if all(i\
    \ in 'a':'z' for i in filename_before_dot) || all(i in 'A':'Z' for i in filename_before_dot)\n\
    \        filename_after_dot = file_name[dot_idx+1:end]\n        if filename_after_dot\
    \ in [\"txt\", \"exe\", \"dll\"]\n            return \"Yes\"\n        end\n  \
    \  end\n    return \"No\"\nend\n        \nusing Test\n\n@testset begin\n\ncandidate\
    \ = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"\
    1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_hgyj3mv.jl:45\n  Expression: candidate(\"\
    MY16FILE3.exe\") == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_hgyj3mv.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_hgyj3mv.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp_hgyj3mv.jl:51\n  Expression: candidate(\"this_is_valid.txt\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_hgyj3mv.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_hgyj3mv.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp_hgyj3mv.jl:57\n  Expression: candidate(\"I563_No.exe\") ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_hgyj3mv.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_hgyj3mv.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp_hgyj3mv.jl:58\n  Expression: candidate(\"Is3youfault.txt\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_hgyj3mv.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_hgyj3mv.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp_hgyj3mv.jl:59\n  Expression: candidate(\"no_one#knows.dll\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/j"
  stderr: "ERROR: LoadError: Some tests did not pass: 21 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_hgyj3mv.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    valid_extensions = [\"\
    txt\", \"exe\", \"dll\"]\n    letters = ['a' : 'z' ; 'A' : 'Z']\n    digits =\
    \ '0' : '9'\n    all_alphabet = letters ++ digits\n    ext = split(file_name,\
    \ \".\")[2]\n    if ismatch(r\"\\d{4,}\", file_name) || !in(ext, valid_extensions)\
    \ || !isalpha(file_name[1])\n        return \"No\"\n    else\n        return \"\
    Yes\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmx4q08gu.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"example.txt\") == \"Yes\"\n  UndefVarError: ++ not\
    \ defined\n  Stacktrace:\n   [1] file_name_check(file_name::String)\n     @ Main\
    \ /tmp/tmpmx4q08gu.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmx4q08gu.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmx4q08gu.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpmx4q08gu.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\n  UndefVarError: ++ not defined\n  Stacktrace:\n\
    \   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmpmx4q08gu.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmx4q08gu.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmx4q08gu.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpmx4q08gu.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\n  UndefVarError: ++ not defined\n  Stacktrace:\n\
    \   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmpmx4q08gu.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmx4q08gu.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmx4q08gu.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpmx4q08gu.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"K.dll\") == \"Yes\"\n  UndefVarError: ++ not defined\n  Stacktrace:\n\
    \   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmpmx4q08gu.jl:18\n\
    \   [2] macro expansion\n     @ /shar"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 26 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmx4q08gu.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    isvalid = false\n  \
    \  if count(r\"\\d\", file_name) > 3\n        return \"No\"\n    end\n    if count(r\"\
    \\.\", file_name) != 1\n        return \"No\"\n    end\n    if count(r\"\\.\"\
    , file_name) != 1\n        return \"No\"\n    end\n    if ismatch(r\"^[A-Za-z]+\"\
    , file_name)\n        if ismatch(r\"\\.[\\w]+$\", file_name)\n            isvalid\
    \ = true\n        end\n    end\n    if isvalid\n        return \"Yes\"\n    else\n\
    \        return \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"\
    1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7wp3jo0w.jl:41\n  Test threw exception\n\
    \  Expression: candidate(\"example.txt\") == \"Yes\"\n  UndefVarError: ismatch\
    \ not defined\n  Stacktrace:\n   [1] file_name_check(file_name::String)\n    \
    \ @ Main /tmp/tmp7wp3jo0w.jl:25\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7wp3jo0w.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7wp3jo0w.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp7wp3jo0w.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\n  UndefVarError: ismatch not defined\n\
    \  Stacktrace:\n   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmp7wp3jo0w.jl:25\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7wp3jo0w.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7wp3jo0w.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp7wp3jo0w.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\n  UndefVarError: ismatch not defined\n\
    \  Stacktrace:\n   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmp7wp3jo0w.jl:25\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7wp3jo0w.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7wp3jo0w.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp7wp3jo0w.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(\"K.dll\") == \"Yes\"\n  UndefVarError: ismatch not defined\n  Stacktrace:\n\
    \   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmp7wp3jo0w.jl:25\n\
    \   [2] macro ex"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 18 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7wp3jo0w.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    digits_count = 0\n \
    \   dot_count = 0\n    has_valid_extension = false\n    has_valid_pre_extension\
    \ = false\n    for c in file_name\n        if c in '0'::9\n            digits_count\
    \ += 1\n        elseif c == '.'\n            dot_count += 1\n        elseif digits_count\
    \ == 0\n            if c in 'a'::'z' || c in 'A'::'Z'\n                has_valid_pre_extension\
    \ = true\n            end\n        end\n    end\n    if digits_count <= 3 && dot_count\
    \ == 1 && has_valid_pre_extension\n        has_valid_extension = file_name[end-2:end]\
    \ in [\"txt\", \"exe\", \"dll\"]\n    end\n    if has_valid_extension\n      \
    \  return \"Yes\"\n    else\n        return \"No\"\n    end\nend\nprintln(file_name_check(\"\
    example.txt\"))\nprintln(file_name_check(\"1example.dll\"))\nusing Test\n\n@testset\
    \ begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") ==\
    \ \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: TypeError: in typeassert, expected Type, got a value\
    \ of type Int64\nStacktrace:\n [1] file_name_check(file_name::String)\n   @ Main\
    \ /tmp/tmpgabru6on.jl:20\n [2] top-level scope\n   @ /tmp/tmpgabru6on.jl:39\n\
    in expression starting at /tmp/tmpgabru6on.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    return if_else(endswith.([\"\
    txt\", \"exe\", \"dll\"], file_name[match(r\"\\.(\\w+)$\", file_name).captures[1]]),\n\
    \        if_else(match(r\"^[A-Za-z][A-Za-z0-9]*\\.\\w+$\", file_name) != nothing,\n\
    \            if_else(count(r\"\\d\", file_name) <= 3,\n                \"Yes\"\
    , \"No\"\n            ), \"No\"\n        ), \"No\"\n    )\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpodt4b0ve.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ no method matching getindex(::String, ::SubString{String})\\n  Closest candidates\
    \ are:\\n    getindex(::AbstractString, !Matched::Colon) at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:189\\\
    n    getindex(::String, !Matched::Int64) at /shared/centos7/julia/1.7.3/share/julia/base/strings/string.jl:222\\\
    n    getindex(::AbstractString, !Matched::Integer) at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:184\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpodt4b0ve.jl:15\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpodt4b0ve.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpodt4b0ve.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpodt4b0ve.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: no method matching getindex(::String,\
    \ ::SubString{String})\\n  Closest candidates are:\\n    getindex(::AbstractString,\
    \ !Matched::Colon) at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:189\\\
    n    getindex(::String, !Matched::Int64) at /shared/centos7/julia/1.7.3/share/julia/base/strings/string.jl:222\\\
    n    getindex(::AbstractString, !Matched::Integer) at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:184\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpodt4b0ve.jl:15\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpodt4b0ve.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # Your code goes here\n\
    \    # ...\n    return \nend\n \nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmphi27ts1h.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmphi27ts1h.jl:17\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmphi27ts1h.jl:25 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmphi27ts1h.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmphi27ts1h.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmphi27ts1h.jl:17\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmphi27ts1h.jl:26 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpo7mp32yy.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpo7mp32yy.jl:16\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpo7mp32yy.jl:22 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpo7mp32yy.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpo7mp32yy.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpo7mp32yy.jl:16\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpo7mp32yy.jl:23 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    str_splited = split(file_name,\
    \ \".\")\n    if length(str_splited) != 2\n        return \"No\"\n    end\n  \
    \  if length(filter(i->i in 0:9, str_splited[1])) > 3\n        return \"No\"\n\
    \    end\n    if length(str_splited[1]) == 0\n        return \"No\"\n    end\n\
    \    if !(str_splited[1][1] in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    )\n        return \"No\"\n    end\n    if !(str_splited[2] in [\"txt\", \"exe\"\
    , \"dll\"])\n        return \"No\"\n    end\n    return \"Yes\"\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcwizy55_.jl:43\n  Expression: candidate(\"\
    His12FILE94.exe\") == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcwizy55_.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcwizy55_.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   25     1     26\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 25 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcwizy55_.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if count(r\"[0-9]\"\
    , file_name) > 3\n        return \"No\"\n    end\n    file_name_split = split(file_name,\
    \ '.')\n    if length(file_name_split) != 2\n        return \"No\"\n    end\n\
    \    if !match(r\"[a-zA-Z]\", file_name_split[1])\n        return \"No\"\n   \
    \ end\n    if file_name_split[2] \u2209 [\"txt\", \"exe\", \"dll\"]\n        return\
    \ \"No\"\n    end\n    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"\
    1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpijfep0fh.jl:35\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ no method matching !(::RegexMatch)\\n  Closest candidates are:\\n    !(!Matched::Function)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:1117\\n    !(!Matched::Bool)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/bool.jl:35\\n    !(!Matched::Missing)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:101\\n  Stacktrace:\\\
    n   [1] file_name_check(file_name::String)\\n     @ Main /tmp/tmpijfep0fh.jl:22\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpijfep0fh.jl:35 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpijfep0fh.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpijfep0fh.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: no method matching !(::RegexMatch)\\\
    n  Closest candidates are:\\n    !(!Matched::Function) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:1117\\\
    n    !(!Matched::Bool) at /shared/centos7/julia/1.7.3/share/julia/base/bool.jl:35\\\
    n    !(!Matched::Missing) at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:101\\\
    n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @ Main /tmp/tmpijfep0fh.jl:22\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpijfep0fh.jl:36 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpijfep0fh.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpijfep0fh.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: no method matching !(::RegexMatch)\\\
    n  Closest candidates are:\\n    !(!Match"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    @assert length(file_name)\
    \ > 0\n    if length(file_name) < 4\n        return \"No\"\n    end\n    if length(file_name)\
    \ > 15\n        return \"No\"\n    end\n    if length(findall(r\"[\\d]\", file_name))\
    \ > 3\n        return \"No\"\n    end\n    if length(findall(r\"\\.\", file_name))\
    \ != 1\n        return \"No\"\n    end\n    if length(findall(r\"^[a-zA-Z]\",\
    \ split(file_name, \".\")[1])) != 1\n        return \"No\"\n    end\n    if split(file_name,\
    \ \".\")[2] != \"txt\" && split(file_name, \".\")[2] != \"exe\" && split(file_name,\
    \ \".\")[2] != \"dll\"\n        return \"No\"\n    end\n    return \"Yes\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa_rim_g2.jl:51\n  Expression: candidate(\"\
    this_is_valid.txt\") == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa_rim_g2.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa_rim_g2.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpa_rim_g2.jl:59\n  Expression: candidate(\"no_one#knows.dll\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa_rim_g2.jl:59 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa_rim_g2.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   24     2     26\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 24 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa_rim_g2.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if count(x->x in '0':'9',\
    \ file_name)>3 || count(x->x=='.', file_name)!=1 ||\n    occursin(file_name[1],\
    \ '0':'9') || file_name[end-3:end] in [\"txt\", \"exe\", \"dll\"]\n        return\
    \ \"No\"\n    else\n        return \"Yes\"\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") ==\
    \ \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmph9vw1lk8.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"example.txt\") == \"Yes\"\n  MethodError: no method\
    \ matching occursin(::Char, ::StepRange{Char, Int64})\n  Closest candidates are:\n\
    \    occursin(::Union{AbstractChar, AbstractString}, !Matched::AbstractString)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:622\n    occursin(::Any)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:636\n  Stacktrace:\n\
    \   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmph9vw1lk8.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph9vw1lk8.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph9vw1lk8.jl:26\ntest set:\
    \ Error During Test at /tmp/tmph9vw1lk8.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\n  MethodError: no method matching occursin(::Char,\
    \ ::StepRange{Char, Int64})\n  Closest candidates are:\n    occursin(::Union{AbstractChar,\
    \ AbstractString}, !Matched::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:622\n\
    \    occursin(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:636\n\
    \  Stacktrace:\n   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmph9vw1lk8.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph9vw1lk8.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph9vw1lk8.jl:26\ntest set:\
    \ Error During Test at /tmp/tmph9vw1lk8.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\n  MethodError: no method matching occursin(::Char,\
    \ ::StepRange{Char, Int64})\n  Closest candidates are:\n    occursin(::Union{A"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 18 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph9vw1lk8.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    cnt = 0\n    if '.'\
    \ in file_name\n        if length(split(file_name, '.')) == 2\n            if\
    \ file_name[1] in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n   \
    \             if file_name[end-2:end] in ['txt', 'exe', 'dll']\n             \
    \       for i in file_name\n                        if '0' <= i <= '9'\n     \
    \                       cnt += 1\n                    end\n                  \
    \  if cnt <= 3\n                        return 'Yes'\n                    else\n\
    \                        return 'No'\n                    end\n              \
    \  else\n                    return 'No'\n                end\n            else\n\
    \                return 'No'\n            end\n        else\n            return\
    \ 'No'\n        end\n    else\n        return 'No'\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp78lbpspg.jl:18\nin expression\
    \ starting at /tmp/tmp78lbpspg.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    n = length(file_name)\n\
    \    count = 0\n    for i in file_name\n        if isdigit(i)\n            count\
    \ += 1\n        end\n    end\n    count <= 3 || error(\"Invalid name\")\n    split(file_name,\
    \ '.') == 2 || error(\"Invalid name\")\n    isletter(file_name[1]) || error(\"\
    Invalid name\")\n    s = findfirst(isequal('.'), file_name)\n    ext = file_name[s+1:end]\n\
    \    ext in [\"txt\", \"exe\", \"dll\"] || error(\"Invalid name\")\n    return\
    \ \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpih106cw5.jl:35\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  Invalid\
    \ name\\n  Stacktrace:\\n   [1] error(s::String)\\n     @ Base ./error.jl:33\\\
    n   [2] file_name_check(file_name::String)\\n     @ Main /tmp/tmpih106cw5.jl:23\\\
    n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpih106cw5.jl:35 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpih106cw5.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpih106cw5.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  Invalid name\\n  Stacktrace:\\n  \
    \ [1] error(s::String)\\n     @ Base ./error.jl:33\\n   [2] file_name_check(file_name::String)\\\
    n     @ Main /tmp/tmpih106cw5.jl:23\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpih106cw5.jl:36 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpih106cw5.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpih106cw5.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  Invalid name\\n  Stacktrace:\\n   [1]\
    \ error(s::String)\\n     @ Base ./error.jl:33\\n   [2] file_name_check(file_name::String)\\\
    n     @ Main /tmp/tmpih106cw5.jl:23\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpih106cw5.jl:37 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpih106cw5.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpih106cw5.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(\"K.dll\") == \"Yes\"\\n  I"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    result = \"Yes\"\n \
    \   s = file_name\n    counter = 0\n    for i in 1:length(s)\n        if !isalpha(s[i])\n\
    \            if s[i] in '0123456789'\n                counter += 1\n         \
    \   end\n        end\n    end\n    if counter > 3\n        result = \"No\"\n \
    \   end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp35mc0brf.jl:20\nin expression\
    \ starting at /tmp/tmp35mc0brf.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    digit_count = 0\n  \
    \  dot_count = 0\n    latin_letter_count = 0\n    latin_letter_index = 0\n   \
    \ dot_index = 0\n    extension = \"\"\n    for i in 1:length(file_name)\n    \
    \    if '0' <= file_name[i] <= '9'\n            digit_count += 1\n        end\n\
    \        if file_name[i] == '.'\n            dot_count += 1\n            dot_index\
    \ = i\n        end\n        if ('a' <= file_name[i] <= 'z') || ('A' <= file_name[i]\
    \ <= 'Z')\n            latin_letter_count += 1\n            latin_letter_index\
    \ = i\n        end\n    end\n    if (dot_count == 1) && (latin_letter_count >=\
    \ 1) && (digit_count <= 3)\n        if (dot_index - latin_letter_index) >= 1\n\
    \            extension = file_name[dot_index+1:end]\n            if (\"txt\" ==\
    \ extension) || (\"exe\" == extension) || (\"dll\" == extension)\n           \
    \     return \"Yes\"\n            end\n        end\n    end\n    return \"No\"\
    \nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5_o581vj.jl:49\n  Expression: candidate(\"\
    example.txt\") == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5_o581vj.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5_o581vj.jl:48\ntest set: Test\
    \ Failed at /tmp/tmp5_o581vj.jl:52\n  Expression: candidate(\"K.dll\") == \"Yes\"\
    \n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5_o581vj.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5_o581vj.jl:48\ntest set: Test\
    \ Failed at /tmp/tmp5_o581vj.jl:53\n  Expression: candidate(\"MY16FILE3.exe\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5_o581vj.jl:53 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5_o581vj.jl:48\ntest set: Test\
    \ Failed at /tmp/tmp5_o581vj.jl:59\n  Expression: candidate(\"this_is_valid.txt\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5_o581vj.jl:59 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5_o581vj.jl:48\ntest set: Test\
    \ Failed at /tmp/tmp5_o581vj.jl:65\n  Expression: candidate(\"I563_No.exe\") ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/shar"
  stderr: "ERROR: LoadError: Some tests did not pass: 19 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5_o581vj.jl:46\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    do_with(file_name) do\
    \ file_name\n        (number_of_digits(file_name) <= 3) && \n        (count_substring(file_name,\
    \ \".\") == 1) && \n        (substring(file_name, first_index_of(file_name, \"\
    .\")) != \"\") && \n        (substring(file_name, last_index_of(file_name, \"\
    .\") + 1) in \n            (\"txt\", \"exe\", \"dll\")) ?\n            \"Yes\"\
    \ : \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9xescgk3.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"example.txt\") == \"Yes\"\n  UndefVarError: do_with\
    \ not defined\n  Stacktrace:\n   [1] file_name_check(file_name::String)\n    \
    \ @ Main /tmp/tmp9xescgk3.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9xescgk3.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9xescgk3.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp9xescgk3.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\n  UndefVarError: do_with not defined\n\
    \  Stacktrace:\n   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmp9xescgk3.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9xescgk3.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9xescgk3.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp9xescgk3.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\n  UndefVarError: do_with not defined\n\
    \  Stacktrace:\n   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmp9xescgk3.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9xescgk3.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9xescgk3.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp9xescgk3.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"K.dll\") == \"Yes\"\n  UndefVarError: do_with not defined\n  Stacktrace:\n\
    \   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmp9xescgk3.jl:15\n\
    \   [2] macro ex"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 26 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9xescgk3.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if count(x->x in '0':'9',\
    \ file_name) > 3\n        return \"No\"\n    end\n    if file_name[end] == '.'\n\
    \        return \"No\"\n    end\n    if count(x->x == '.', file_name) > 1\n  \
    \      return \"No\"\n    end\n    dot_position = find(x->x == '.', file_name)\n\
    \    extension = file_name[dot_position+1:end]\n    file_name = file_name[1:dot_position-1]\n\
    \    if !(file_name[1] in 'a':'z' || file_name[1] in 'A':'Z')\n        return\
    \ \"No\"\n    end\n    if extension in [\"txt\", \"exe\", \"dll\"]\n        return\
    \ \"Yes\"\n    else\n        return \"No\"\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") ==\
    \ \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp775ucdhv.jl:41\n  Test threw exception\n\
    \  Expression: candidate(\"example.txt\") == \"Yes\"\n  UndefVarError: find not\
    \ defined\n  Stacktrace:\n   [1] file_name_check(file_name::String)\n     @ Main\
    \ /tmp/tmp775ucdhv.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp775ucdhv.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp775ucdhv.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp775ucdhv.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\n  UndefVarError: find not defined\n \
    \ Stacktrace:\n   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmp775ucdhv.jl:24\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp775ucdhv.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp775ucdhv.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp775ucdhv.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\n  UndefVarError: find not defined\n  Stacktrace:\n\
    \   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmp775ucdhv.jl:24\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp775ucdhv.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp775ucdhv.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp775ucdhv.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(\"K.dll\") == \"Yes\"\n  UndefVarError: find not defined\n  Stacktrace:\n\
    \   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmp775ucdhv.jl:24\n\
    \   [2] macro expansion\n    "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 18 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp775ucdhv.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    numdigits = 0\n    numdots\
    \ = 0\n    for i in 1:length(file_name)\n        if isdigit(file_name[i])\n  \
    \          numdigits += 1\n        end\n        if file_name[i] == '.'\n     \
    \       numdots += 1\n        end\n    end\n    if numdigits > 3 || numdots !=\
    \ 1\n        return \"No\"\n    end\n    prefix = split(file_name, '.')[1]\n \
    \   if !isalpha(prefix[1]) || length(prefix) == 0\n        return \"No\"\n   \
    \ end\n    suffix = split(file_name, '.')[2]\n    if suffix != \"txt\" && suffix\
    \ != \"exe\" && suffix != \"dll\"\n        return \"No\"\n    end\n    return\
    \ \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp0zk1g3w_.jl:43\n  Test threw exception\n\
    \  Expression: candidate(\"example.txt\") == \"Yes\"\n  UndefVarError: isalpha\
    \ not defined\n  Stacktrace:\n   [1] file_name_check(file_name::String)\n    \
    \ @ Main /tmp/tmp0zk1g3w_.jl:29\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0zk1g3w_.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0zk1g3w_.jl:42\ntest set:\
    \ Error During Test at /tmp/tmp0zk1g3w_.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\n  UndefVarError: isalpha not defined\n\
    \  Stacktrace:\n   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmp0zk1g3w_.jl:29\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0zk1g3w_.jl:44 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0zk1g3w_.jl:42\ntest set:\
    \ Error During Test at /tmp/tmp0zk1g3w_.jl:45\n  Test threw exception\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\n  UndefVarError: isalpha not defined\n\
    \  Stacktrace:\n   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmp0zk1g3w_.jl:29\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0zk1g3w_.jl:45 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0zk1g3w_.jl:42\ntest set:\
    \ Error During Test at /tmp/tmp0zk1g3w_.jl:46\n  Test threw exception\n  Expression:\
    \ candidate(\"K.dll\") == \"Yes\"\n  UndefVarError: isalpha not defined\n  Stacktrace:\n\
    \   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmp0zk1g3w_.jl:29\n\
    \   [2] macro ex"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 18 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0zk1g3w_.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # write your code here\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpp9bchqkj.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpp9bchqkj.jl:16\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpp9bchqkj.jl:22 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpp9bchqkj.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpp9bchqkj.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpp9bchqkj.jl:16\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpp9bchqkj.jl:23 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    regex = r\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .(txt|exe|dll)$\"\n    match = match(regex, file_name)\n    isnothing(match) ?\
    \ \"No\" : \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpt1ydg4fo.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"example.txt\") == \"Yes\"\n  UndefVarError: match not\
    \ defined\n  Stacktrace:\n   [1] file_name_check(file_name::String)\n     @ Main\
    \ /tmp/tmpt1ydg4fo.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt1ydg4fo.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt1ydg4fo.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpt1ydg4fo.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\n  UndefVarError: match not defined\n\
    \  Stacktrace:\n   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmpt1ydg4fo.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt1ydg4fo.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt1ydg4fo.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpt1ydg4fo.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\n  UndefVarError: match not defined\n  Stacktrace:\n\
    \   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmpt1ydg4fo.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt1ydg4fo.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt1ydg4fo.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpt1ydg4fo.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"K.dll\") == \"Yes\"\n  UndefVarError: match not defined\n  Stacktrace:\n\
    \   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmpt1ydg4fo.jl:16\n\
    \   [2] macro expansion\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 26 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt1ydg4fo.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # first check if the\
    \ substring after the dot is valid:\n    dot_index = search(r\"\\.\", file_name)\n\
    \    if dot_index < length(file_name)\n        if(file_name[dot_index+1:end] in\
    \ [\"txt\", \"exe\", \"dll\"])\n            # if so, check if the substring before\
    \ the dot is valid:\n            if !isempty(regexp(\"^[a-zA-Z]\", file_name[1:dot_index]))\n\
    \                if !isempty(regexp(\"[0-9]{4,}\", file_name))\n             \
    \       return \"No\"\n                else\n                    return \"Yes\"\
    \n            else\n                return \"No\"\n        else\n            return\
    \ \"No\"\n    else\n        return \"No\"\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") ==\
    \ \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpro4hdsnc.jl:21 expected \"\
    end\", got \"else\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpro4hdsnc.jl:25\n\
    in expression starting at /tmp/tmpro4hdsnc.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    return 'No'\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpspsqw6am.jl:16\nin expression\
    \ starting at /tmp/tmpspsqw6am.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    x = file_name.split(\"\
    .\")\n    d = 0\n    c = 0\n    l = lowercase(x[1])\n    if l == \"exe\" || l\
    \ == \"txt\" || l == \"dll\"\n        if x[1] == l && x[2] == \"\"\n         \
    \   if isalphabetic(x[1][1])\n                for i in 1:size(x[1],1)\n      \
    \              if isdigit(x[1][i])\n                        d = d + 1\n      \
    \              end\n                end\n                if d > 3\n          \
    \          return \"No\"\n                else \n                    return \"\
    Yes\"\n                end\n            else\n                return \"No\"\n\
    \            end\n        else\n            return \"No\"\n        end\n    else\n\
    \        return \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"\
    1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpdr_a8qdr.jl:47\n  Test threw exception\n\
    \  Expression: candidate(\"example.txt\") == \"Yes\"\n  type String has no field\
    \ split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n  \
    \ [2] file_name_check(file_name::String)\n     @ Main /tmp/tmpdr_a8qdr.jl:15\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdr_a8qdr.jl:47 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdr_a8qdr.jl:46\ntest set:\
    \ Error During Test at /tmp/tmpdr_a8qdr.jl:48\n  Test threw exception\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\n  type String has no field split\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] file_name_check(file_name::String)\n\
    \     @ Main /tmp/tmpdr_a8qdr.jl:15\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdr_a8qdr.jl:48 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdr_a8qdr.jl:46\ntest set:\
    \ Error During Test at /tmp/tmpdr_a8qdr.jl:49\n  Test threw exception\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\n  type String has no field split\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] file_name_check(file_name::String)\n\
    \     @ Main /tmp/tmpdr_a8qdr.jl:15\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdr_a8qdr.jl:49 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdr_a8qdr.jl:46\ntest set:\
    \ Error During Test at /tmp/tmpdr_a8qdr.jl:50\n  Test threw exception\n  Expression:\
    \ candidate(\"K.dll\") == \"Yes\"\n  type S"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 26 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdr_a8qdr.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    number_of_digits = sum(isdigit(x)\
    \ for x in file_name)\n    letter_check = (file_name[1:end] == \"example.txt\"\
    ) | (file_name[1:end] == \"example.exe\") | (file_name[1:end] == \"example.dll\"\
    )\n    if number_of_digits <= 3 & file_name[1] in letters & file_name[end] ==\
    \ \".\" & letter_check == true\n        return \"Yes\"\n    else\n        return\
    \ \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp3zf10oyk.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ no method matching &(::Int64, ::Char)\\n  Closest candidates are:\\n    &(::Any,\
    \ ::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\\\
    n    &(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:336\\\
    n    &(::Integer) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:594\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp3zf10oyk.jl:17\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp3zf10oyk.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp3zf10oyk.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmp3zf10oyk.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: no method matching &(::Int64,\
    \ ::Char)\\n  Closest candidates are:\\n    &(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\\n    &(::T,\
    \ !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16,\
    \ UInt32, UInt64, UInt8} at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:336\\\
    n    &(::Integer) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:594\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp3zf10oyk.jl:17\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp3zf10oyk.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    (contains(file_name,\
    \ r\"[^.]{1,4}\\.txt\"), ismatch(r\"[a-zA-Z]{1,4}\\.txt\", file_name), count(file_name,\
    \ r\"[0-9]\") == 3, count(file_name, \".\") == 1)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") ==\
    \ \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2wfdxs0g.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"example.txt\") == \"Yes\"\n  UndefVarError: ismatch\
    \ not defined\n  Stacktrace:\n   [1] file_name_check(file_name::String)\n    \
    \ @ Main /tmp/tmp2wfdxs0g.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2wfdxs0g.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2wfdxs0g.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp2wfdxs0g.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\n  UndefVarError: ismatch not defined\n\
    \  Stacktrace:\n   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmp2wfdxs0g.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2wfdxs0g.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2wfdxs0g.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp2wfdxs0g.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\n  UndefVarError: ismatch not defined\n\
    \  Stacktrace:\n   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmp2wfdxs0g.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2wfdxs0g.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2wfdxs0g.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp2wfdxs0g.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"K.dll\") == \"Yes\"\n  UndefVarError: ismatch not defined\n  Stacktrace:\n\
    \   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmp2wfdxs0g.jl:15\n\
    \   [2] macro ex"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 26 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2wfdxs0g.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if count_digits(file_name)\
    \ > 3 || count_extensions(file_name) != 1 || \n        length(extract_extensions(file_name))\
    \ == 0 || \n        !valid_extension(extract_extensions(file_name)) || \n    \
    \    !valid_prefix(extract_prefix(file_name))\n        return \"No\"\n    end\n\
    \    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2gegqdvd.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"example.txt\") == \"Yes\"\n  UndefVarError: count_digits\
    \ not defined\n  Stacktrace:\n   [1] file_name_check(file_name::String)\n    \
    \ @ Main /tmp/tmp2gegqdvd.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2gegqdvd.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2gegqdvd.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp2gegqdvd.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\n  UndefVarError: count_digits not defined\n\
    \  Stacktrace:\n   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmp2gegqdvd.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2gegqdvd.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2gegqdvd.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp2gegqdvd.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\n  UndefVarError: count_digits not defined\n\
    \  Stacktrace:\n   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmp2gegqdvd.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2gegqdvd.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2gegqdvd.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp2gegqdvd.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"K.dll\") == \"Yes\"\n  UndefVarError: count_digits not defined\n\
    \  Stacktrace:\n   [1] file_name_check(file_name::String)\n     @ Main /tmp/tmp2gegqdvd.j"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 26 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2gegqdvd.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp8p3k03z4.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp8p3k03z4.jl:16\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp8p3k03z4.jl:22 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp8p3k03z4.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp8p3k03z4.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp8p3k03z4.jl:16\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp8p3k03z4.jl:23 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    file_name_parts = split(file_name,\
    \ \".\")\n    allowed_extensions = [\"txt\", \"exe\", \"dll\"]\n    before_dot\
    \ = file_name_parts[1]\n    after_dot = file_name_parts[2]\n    digits_count =\
    \ sum(i in \"0123456789\" for i in before_dot)\n    if digits_count > 3\n    \
    \    return \"No\"\n    end\n    if !(length(file_name_parts) == 2) || !(before_dot[1]\
    \ in \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\") || !(after_dot\
    \ in allowed_extensions)\n        return \"No\"\n    end\n    return \"Yes\"\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqqztdd5o.jl:55\n  Test threw exception\n\
    \  Expression: candidate(\"final132\") == \"No\"\n  BoundsError: attempt to access\
    \ 1-element Vector{SubString{String}} at index [2]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] file_name_check(file_name::String)\n\
    \     @ Main /tmp/tmpqqztdd5o.jl:18\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpqqztdd5o.jl:55 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpqqztdd5o.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpqqztdd5o.jl:57\n  Test threw exception\n  Expression:\
    \ candidate(\".txt\") == \"No\"\n  ArgumentError: reducing over an empty collection\
    \ is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n      @ Base ./reduce.jl:301\n\
    \    [2] mapreduce_empty(f::Function, op::Base.BottomRF{typeof(Base.add_sum)},\
    \ T::Type)\n      @ Base ./reduce.jl:344\n    [3] reduce_empty(op::Base.MappingRF{var\"\
    #1#2\", Base.BottomRF{typeof(Base.add_sum)}}, #unused#::Type{Char})\n      @ Base\
    \ ./reduce.jl:331\n    [4] reduce_empty_iter\n      @ ./reduce.jl:357 [inlined]\n\
    \    [5] reduce_empty_iter\n      @ ./reduce.jl:356 [inlined]\n    [6] foldl_impl\n\
    \      @ ./reduce.jl:49 [inlined]\n    [7] mapfoldl_impl\n      @ ./reduce.jl:44\
    \ [inlined]\n    [8] #mapfoldl#244\n      @ ./reduce.jl:162 [inlined]\n    [9]\
    \ mapfoldl\n      @ ./reduce.jl:162 [inlined]\n   [10] #mapreduce#248\n      @\
    \ ./reduce.jl:289 [inlined]\n   [11] mapreduce\n      @ ./reduce.jl:289 [inlined]\n\
    \   [12] #sum#251\n      @ ./reduce.jl:503 [inlined]\n   [13] sum\n      @ ./reduce.jl:503\
    \ [inlined]\n   [14] #sum#252\n      @ ./reduce.jl:532 [inlined]\n   [15] sum\n\
    \      @ ./reduce.jl:532 [inlined]\n   [16] file_name_check(file_name::String)\n\
    \      @ Main /tmp/tmpqqztdd5o.jl:19\n   [17] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [18] macro expans"
  stderr: "ERROR: LoadError: Some tests did not pass: 24 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqqztdd5o.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    count = 0\n    flag\
    \ = true\n    extension = \"\"\n    for c in file_name\n        if c >= '0' &&\
    \ c <= '9'\n            count += 1\n        end\n        if c == '.'\n       \
    \     flag = false\n        end\n        if flag\n            extension = extension\
    \ * c\n        end\n    end\n    if count <= 3\n        if file_name[1] >= 'A'\
    \ && file_name[1] <= 'Z' || file_name[1] >= 'a' && file_name[1] <= 'z'\n     \
    \       if extension == \"txt\" || extension == \"exe\" || extension == \"dll\"\
    \n                return \"Yes\"\n            end\n        end\n    end\n    return\
    \ \"No\"\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t\
    @test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpf_n2zkds.jl:43\n  Expression: candidate(\"\
    example.txt\") == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf_n2zkds.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf_n2zkds.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpf_n2zkds.jl:46\n  Expression: candidate(\"K.dll\") == \"Yes\"\
    \n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf_n2zkds.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf_n2zkds.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpf_n2zkds.jl:47\n  Expression: candidate(\"MY16FILE3.exe\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf_n2zkds.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf_n2zkds.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpf_n2zkds.jl:53\n  Expression: candidate(\"this_is_valid.txt\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf_n2zkds.jl:53 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf_n2zkds.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpf_n2zkds.jl:59\n  Expression: candidate(\"I563_No.exe\") ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/shar"
  stderr: "ERROR: LoadError: Some tests did not pass: 19 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf_n2zkds.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if(sum(isalpha.(file_name))\
    \ > 0)\n        if(sum(isalpha.(file_name)) == (length(file_name) - 3))\n    \
    \        if(sum(isdigit.(file_name)) <= 3)\n                if(count(x -> x ==\
    \ '.', file_name) == 1)\n                    if(contains(['txt', 'exe', 'dll'],\
    \ split(file_name, '.')[2]))\n                        return 'Yes'\n         \
    \           end\n                end\n            end\n        end\n    end\n\
    \    return 'No'\nend\nfile_name_check(\"example.txt\")\nusing Test\n\n@testset\
    \ begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") ==\
    \ \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmprq6z80a1.jl:19\nin expression\
    \ starting at /tmp/tmprq6z80a1.jl:19\n"
  exit_code: 1
  status: SyntaxError
