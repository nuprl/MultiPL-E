name: HumanEval_41_car_race_collision
language: jl
results:
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  # This is not a mathematically hard problem, but it's a great algorithmic problem.\n\
    \    # If you can't get it, then here's a hint:\n    # Observe that if two cars\
    \ collides, one of them will certainly be on its leftmost position,\n    # while\
    \ the other one will be on its rightmost position.\n    # Now, how do you sort\
    \ cars? Hint:  Bucket sort!\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp915madt9.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\\\
    n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmp915madt9.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp915madt9.jl:25 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp915madt9.jl:24\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    cars_ltr = [i for i in\
    \ 1:n] # cars driving left to right\n    cars_rtl = [i for i in 1:n] # cars driving\
    \ right to left\n    num_collisions = 0\n    for i in 1:n\n        if cars_ltr[i]\
    \ == cars_rtl[i]\n            num_collisions += 1\n        end\n    end\n    return\
    \ num_collisions\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpk947597s.jl:28\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk947597s.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk947597s.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpk947597s.jl:29\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk947597s.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk947597s.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpk947597s.jl:30\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 4 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk947597s.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk947597s.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpk947597s.jl:31\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 8 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk947597s.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk947597s.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpk947597s.jl:32\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 10 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk947597s.jl:32 [inline"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk947597s.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    north_to_south = []\n\
    \    south_to_north = []\n    for i = 1:n\n        append!(north_to_south,rand())\n\
    \        append!(south_to_north,rand())\n    end\n    north_to_south = sort(north_to_south)\n\
    \    south_to_north = sort(south_to_north)\n    sort!(north_to_south)\n    sort!(south_to_north)\n\
    \    collisions = 0\n    while !isempty(north_to_south) && !isempty(south_to_north)\n\
    \        if north_to_south[1] < south_to_north[1]\n            popfirst!(north_to_south)\n\
    \            popfirst!(south_to_north)\n            collisions += 1\n        else\n\
    \            popfirst!(north_to_south)\n        end\n    end\n    return collisions\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp89ylohzf.jl:40\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp89ylohzf.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp89ylohzf.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp89ylohzf.jl:41\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp89ylohzf.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp89ylohzf.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp89ylohzf.jl:42\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp89ylohzf.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp89ylohzf.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp89ylohzf.jl:43\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp89ylohzf.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp89ylohzf.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp89ylohzf.jl:44\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 10 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp89ylohzf.jl:44 [inline"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp89ylohzf.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n  if n > 0\n    return n*(n-1)\n\
    \  else\n    return 0\n  end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5hrcpn7g.jl:24\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5hrcpn7g.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5hrcpn7g.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp5hrcpn7g.jl:25\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 6 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5hrcpn7g.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5hrcpn7g.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp5hrcpn7g.jl:26\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 12 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5hrcpn7g.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5hrcpn7g.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp5hrcpn7g.jl:27\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 56 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5hrcpn7g.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5hrcpn7g.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp5hrcpn7g.jl:28\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 90 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5hrcpn7g.jl:28 [inli"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5hrcpn7g.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return(Int64(0))\nend\ncar_race_collision(2) == 1\ncar_race_collision(3) ==\
    \ 3\ncar_race_collision(100) == 4950\n@assert car_race_collision(100) == 4950\n\
    \ \nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: AssertionError: car_race_collision(100) == 4950\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq3190cnb.jl:19\nin expression starting at\
    \ /tmp/tmpq3190cnb.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \n    # A collision occurs\
    \ when the car in front of another car is going in the\n    # opposite direction.\
    \  \n    #\n    # Can prove that: if the i-th car in the right-to-left row is\
    \ going faster\n    # than the i-th car in the left-to-right row, then there will\
    \ be no collisions.\n    #\n    # The proof is by contradiction:\n    # \n   \
    \ # Assume that there is a collision.  Assume that the i-th car in the right-to-left\n\
    \    # row is going faster than the i-th car in the left-to-right row.\n    #\n\
    \    # The i-th car in the right-to-left row must then pass the j-th car in the\
    \ left-to-right\n    # row before being itself passed by the j-th car in the left-to-right\
    \ row.\n    # But, we said that there is a collision, and so the i-th car in the\
    \ right-to-left\n    # row must be passed by the j-th car in the left-to-right\
    \ row before it passes the j-th\n    # car in the left-to-right row.\n    #\n\
    \    # This contradiction proves that the assumption that the i-th car in the\
    \ right-to-left\n    # row is going faster than the i-th car in the left-to-right\
    \ row is false.\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnc5x6bjj.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnc5x6bjj.jl:1\n\
    in expression starting at /tmp/tmpnc5x6bjj.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # at t=0, we have n cars\
    \ driving left to right and n cars driving right to left,\n    # and the speed\
    \ of all cars is 1.\n    # at t=1, we have (n-1) cars driving left to right and\
    \ (n-1) cars driving right to left,\n    # and the speed of all cars is 2.\n \
    \   # at t=2, we have (n-2) cars driving left to right and (n-2) cars driving\
    \ right to left,\n    # and the speed of all cars is 3.\n    # at t=3, we have\
    \ (n-3) cars driving left to right and (n-3) cars driving right to left,\n   \
    \ # and the speed of all cars is 4.\n    # at t=4, we have (n-4) cars driving\
    \ left to right and (n-4) cars driving right to left,\n    # and the speed of\
    \ all cars is 5.\n    # ...\n    # at t=k, we have (n-k) cars driving left to\
    \ right and (n-k) cars driving right to left,\n    # and the speed of all cars\
    \ is (k+1).\n    # ...\n    # at t=n-1, we have 1 car driving left to right and\
    \ 1 car driving right to left,\n    # and the speed of all cars is n.\n    # at\
    \ t=n, we have 0 cars driving left to right and 0 cars driving right to left,\n\
    \    # and the speed of all cars is (n+1).\n    # so the total number of collisions\
    \ is n*(n+1)/2\n    n*(n+1)/2\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3vpslk_g.jl:39\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 3 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3vpslk_g.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3vpslk_g.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp3vpslk_g.jl:40\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 6 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3vpslk_g.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3vpslk_g.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp3vpslk_g.jl:41\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 10 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3vpslk_g.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3vpslk_g.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp3vpslk_g.jl:42\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 36 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3vpslk_g.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3vpslk_g.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp3vpslk_g.jl:43\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 55 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3vpslk_g.jl:43 [inli"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3vpslk_g.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    \"\"\"\n    This function outputs the number of such collisions.\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp2j3b_q4l.jl:15\nin expression starting at /tmp/tmp2j3b_q4l.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"*** Your code here\
    \ ***\"\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpjo4qd7y7.jl:20\\n  Test threw\
    \ exception\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    This function\
    \ returns the number of collisions in a car race where there are\n    n cars moving\
    \ in each direction.\n    \"\"\"\n    # phase 1:  sort the list of cars that are\
    \ going left to right, \n    # so that the cars that are closest to the origin\
    \ come earlier in the list\n    # (aka, sort the cars in increasing order of position)\n\
    \    # phase 2:  sort the list of cars that are going right to left\n    # so\
    \ that the cars that are furthest away from the origin are earlier in the list\n\
    \    # (aka, sort the cars in decreasing order of position)\n    # phase 3:  count\
    \ the number of collisions\n    # phase 4:  return the answer\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpxed74t7l.jl:31\\n  Test threw\
    \ exception\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # Your code here\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3w3so774.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3w3so774.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3w3so774.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp3w3so774.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3w3so774.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3w3so774.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp3w3so774.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3w3so774.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3w3so774.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp3w3so774.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3w3so774.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3w3so774.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp3w3so774.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3w3so774.jl:25 [inlined"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3w3so774.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # Your code here!\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    if n == 0\n        return\
    \ 0\n    end\n    return n - 1 + car_race_collision(n-1)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjnn_9ris.jl:23\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjnn_9ris.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjnn_9ris.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpjnn_9ris.jl:24\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjnn_9ris.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjnn_9ris.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpjnn_9ris.jl:25\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjnn_9ris.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjnn_9ris.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpjnn_9ris.jl:26\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjnn_9ris.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjnn_9ris.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpjnn_9ris.jl:27\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjnn_9ris.jl:27 [inlin"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjnn_9ris.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # TODO:  fill in the\
    \ correct value of your choosing.\n    return rand(Int64)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4db22hky.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1596623582943577732 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4db22hky.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4db22hky.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp4db22hky.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 278457490588225625 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4db22hky.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4db22hky.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp4db22hky.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ -2528436152007718707 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4db22hky.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4db22hky.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp4db22hky.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ -6036653844825745650 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4db22hky.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4db22hky.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp4db22hky.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ -4149483584331768 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4db22hky.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    n is the\
    \ number of cars on the road.\n    \"\"\"\n    cars_left_to_right = [i for i in\
    \ 0:n-1]\n    cars_right_to_left = [i for i in n-1:-1:0]\n    num_collisions =\
    \ 0\n    \"\"\"\n    You'll need to write code that achieves the following:\n\
    \    If a car moving right to left is at the same position as a car moving left\
    \ to right,\n    we increase num_collisions by 1.\n    \"\"\"\n    return num_collisions\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxuw0ximv.jl:31\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxuw0ximv.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxuw0ximv.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpxuw0ximv.jl:32\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxuw0ximv.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxuw0ximv.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpxuw0ximv.jl:33\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxuw0ximv.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxuw0ximv.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpxuw0ximv.jl:34\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxuw0ximv.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxuw0ximv.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpxuw0ximv.jl:35\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxuw0ximv.jl:35 [inlined"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxuw0ximv.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    if n < 1\n        return\
    \ 0\n    end\n    return n - 1\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpuuat7jgw.jl:23\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuuat7jgw.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuuat7jgw.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpuuat7jgw.jl:24\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 2 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuuat7jgw.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuuat7jgw.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpuuat7jgw.jl:25\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 3 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuuat7jgw.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuuat7jgw.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpuuat7jgw.jl:26\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 7 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuuat7jgw.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuuat7jgw.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpuuat7jgw.jl:27\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 9 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuuat7jgw.jl:27 [inlined"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuuat7jgw.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    nl = zeros(Int64, n)\
    \  # number of cars to the left (moving left to right)\n    nr = zeros(Int64,\
    \ n)  # number of cars to the right (moving right to left)\n    collisions = 0\n\
    \    @inbounds for i in 1:n\n        @inbounds for j in 1:n\n            if nl[i]\
    \ > nr[j]\n                collisions += 1\n            end\n        end\n   \
    \     nl[i] += 1\n        nr[j] += 1\n    end\n    return collisions\nend\n@benchmark\
    \ car_race_collision(1000)\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @benchmark not defined\nin expression\
    \ starting at /tmp/tmpqtdfyy7a.jl:27\nin expression starting at /tmp/tmpqtdfyy7a.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # we use this data structure\
    \ to represent the event of car i colliding with car j\n    Dict{Tuple{Int64,Int64},Int64}()\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    ctr = 0\n    # car_pos[i]\
    \ keeps track of the position of ith car, using the coordinates\n    # system\
    \ that the center of the road is at coordinate 0.\n    car_pos = zeros(Int64,\
    \ 2n)\n    # car_vel[i] keeps track of the velocity of ith car.  Positive means\
    \ left to right;\n    # negative means right to left.\n    car_vel = zeros(Int64,\
    \ 2n)\n    for i in 1:n\n        car_pos[i] = rand(-n, n)\n        car_vel[i]\
    \ = rand(-n, n)\n    end\n    for i in n+1:2n\n        car_pos[i] = rand(-n, n)\n\
    \        car_vel[i] = -rand(-n, n)\n    end\n    # We will run the simulation\
    \ for 2n time steps.\n    for t in 1:2n\n        for i in 1:2n\n            #\
    \ If a car is at position 0, that means it collides with the car on the opposite\n\
    \            # direction.\n            if car_pos[i] == 0\n                ctr\
    \ += 1\n            end\n            # Update the position of the car\n      \
    \      car_pos[i] += car_vel[i]\n        end\n    end\n    return ctr\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpuawbdoyj.jl:47\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  ArgumentError: invalid Array\
    \ dimensions\\n  Stacktrace:\\n    [1] Array\\n      @ ./boot.jl:459 [inlined]\\\
    n    [2] Array\\n      @ ./boot.jl:467 [inlined]\\n    [3] Array\\n      @ ./boot.jl:474\
    \ [inlined]\\n    [4] rand\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Random/src/Random.jl:289\
    \ [inlined]\\n    [5] rand\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Random/src/Random.jl:290\
    \ [inlined]\\n    [6] rand\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Random/src/Random.jl:278\
    \ [inlined]\\n    [7] car_race_collision(n::Int64)\\n      @ Main /tmp/tmpuawbdoyj.jl:21\\\
    n    [8] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n    [9] macro expansion\\n      @ /tmp/tmpuawbdoyj.jl:47 [inlined]\\\
    n   [10] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [11] top-level scope\\n      @ /tmp/tmpuawbdoyj.jl:46\\ntest\
    \ set: Error During Test at /tmp/tmpuawbdoyj.jl:48\\n  Test threw exception\\\
    n  Expression: candidate(3) == 9\\n  ArgumentError: invalid Array dimensions\\\
    n  Stacktrace:\\n    [1] Array\\n      @ ./boot.jl:459 [inlined]\\n    [2] Array\\\
    n      @ ./boot.jl:467 [inlined]\\n    [3] Array\\n      @ ./boot.jl:474 [inlined]\\\
    n    [4] rand\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Random/src/Random.jl:289\
    \ [inlined]\\n    [5] rand\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Random/src/Random.jl:290\
    \ [inlined]\\n    [6] rand\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Random/src/Random.jl:278\
    \ [inlined]\\n    [7] car_race_collision(n::Int64)\\n      @ Main /tmp/tmpuawbdoyj.jl:21\\\
    n    [8] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n    [9] macro expansion\\n      @ /tmp/tmpuawbdoyj.jl:48 [inlined]\\\
    n   [10] macro expansion\\n      @ /shared/centos7/julia/1.7.3/shar"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \n    # We use the following\
    \ code to generate a random number between 1 and 100.\n    # Note that the function\
    \ `rand()` does not take any arguments.\n    # For example, if `v = rand()`, then\
    \ `v` is a random number between 0 and 1.\n    v = rand()\n    v = Int64(ceil(v*100))\n\
    \    \n    # YOUR CODE HERE\n    return 0\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq7_wn_fe.jl:28\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq7_wn_fe.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq7_wn_fe.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpq7_wn_fe.jl:29\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq7_wn_fe.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq7_wn_fe.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpq7_wn_fe.jl:30\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq7_wn_fe.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq7_wn_fe.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpq7_wn_fe.jl:31\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq7_wn_fe.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq7_wn_fe.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpq7_wn_fe.jl:32\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq7_wn_fe.jl:32 [inlined"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq7_wn_fe.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # Note that if you want\
    \ to count a collision \n    # that happened twice, you must count it only once.\n\
    \    # In other words, you can't count a collision twice.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwqr0fosw.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwqr0fosw.jl:1\n\
    in expression starting at /tmp/tmpwqr0fosw.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxck6cp0n.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxck6cp0n.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxck6cp0n.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpxck6cp0n.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxck6cp0n.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxck6cp0n.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpxck6cp0n.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxck6cp0n.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxck6cp0n.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpxck6cp0n.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxck6cp0n.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxck6cp0n.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpxck6cp0n.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxck6cp0n.jl:25 [inlined"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxck6cp0n.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Choose a\
    \ random speed for each of the n cars that are moving in one direction\n    (left\
    \ to right).   When two cars collide, add 1 to the variable `collision`.\n   \
    \ After that, choose a random speed for each of the n cars that are moving in\n\
    \    the other direction (right to left).   When two cars collide, add 1 to the\
    \ variable `collision`.\n    Finally, return the number of collisions.\n    \"\
    \"\"\n    collision = 0\n    # YOUR CODE HERE\n    return collision\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2rcdzt57.jl:29\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2rcdzt57.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2rcdzt57.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp2rcdzt57.jl:30\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2rcdzt57.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2rcdzt57.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp2rcdzt57.jl:31\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2rcdzt57.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2rcdzt57.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp2rcdzt57.jl:32\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2rcdzt57.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2rcdzt57.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp2rcdzt57.jl:33\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2rcdzt57.jl:33 [inlined"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2rcdzt57.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    global_car_array = [0\
    \ for i in 1:n]\n    local_car_array = global_car_array\n    function car_collision(array::Array{Int64,1},\
    \ car::Int64)\n        if array[car] == 0\n            return 1\n        else\n\
    \            return 0\n        end\n    end\n    for i in 1:n\n        global_car_array[i]\
    \ = car_collision(local_car_array, i)\n        local_car_array = global_car_array\n\
    \    end\n    return sum(global_car_array)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprz7my4rt.jl:33\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprz7my4rt.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprz7my4rt.jl:32\ntest set: Test\
    \ Failed at /tmp/tmprz7my4rt.jl:34\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprz7my4rt.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprz7my4rt.jl:32\ntest set: Test\
    \ Failed at /tmp/tmprz7my4rt.jl:35\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 4 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprz7my4rt.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprz7my4rt.jl:32\ntest set: Test\
    \ Failed at /tmp/tmprz7my4rt.jl:36\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 8 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprz7my4rt.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprz7my4rt.jl:32\ntest set: Test\
    \ Failed at /tmp/tmprz7my4rt.jl:37\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 10 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprz7my4rt.jl:37 [inline"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprz7my4rt.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    This function\
    \ implements the naive approach to solve the problem.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_ooqhgxg.jl:1\nin expression starting at /tmp/tmp_ooqhgxg.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # The last car (the fastest\
    \ one) will always catch up with the second-to-last car,\n    # the second-to-last\
    \ car will always catch up with the third-to-last car, and so on.\n    # The first\
    \ car (the slowest) will always be the first to get caught.\n    return n - 1\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_nelpkeh.jl:23\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_nelpkeh.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_nelpkeh.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp_nelpkeh.jl:24\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 2 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_nelpkeh.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_nelpkeh.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp_nelpkeh.jl:25\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 3 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_nelpkeh.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_nelpkeh.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp_nelpkeh.jl:26\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 7 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_nelpkeh.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_nelpkeh.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp_nelpkeh.jl:27\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 9 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_nelpkeh.jl:27 [inlined"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_nelpkeh.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    return n*(n-1)/2\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpoiam26tc.jl:20\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoiam26tc.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoiam26tc.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpoiam26tc.jl:21\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoiam26tc.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoiam26tc.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpoiam26tc.jl:22\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoiam26tc.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoiam26tc.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpoiam26tc.jl:23\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoiam26tc.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoiam26tc.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpoiam26tc.jl:24\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoiam26tc.jl:24 [inlin"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoiam26tc.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\"\n    @param\
    \ n Int64\n    This function returns the number of collisions of a car race of\
    \ size n\n    \"\"\"\n    m = n\n    l = 1\n    r = n\n    collisions = 0\n  \
    \  while l <= r\n        if l == r\n            collisions += n - m\n        else\n\
    \            collisions += n - m + 1\n        end\n        l += 1\n        r -=\
    \ 1\n        m -= 1\n    end\n    return collisions\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi1znugwl.jl:38\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi1znugwl.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi1znugwl.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpi1znugwl.jl:39\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 2 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi1znugwl.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi1znugwl.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpi1znugwl.jl:40\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 3 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi1znugwl.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi1znugwl.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpi1znugwl.jl:41\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 10 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi1znugwl.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi1znugwl.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpi1znugwl.jl:42\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 15 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi1znugwl.jl:42 [inlin"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi1znugwl.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    if n == 0 \n        return\
    \ 0\n    end\n    n::Int64\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzw935go4.jl:23\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzw935go4.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzw935go4.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpzw935go4.jl:24\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzw935go4.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzw935go4.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpzw935go4.jl:25\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 4 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzw935go4.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzw935go4.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpzw935go4.jl:26\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 8 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzw935go4.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzw935go4.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpzw935go4.jl:27\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 10 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzw935go4.jl:27 [inline"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzw935go4.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    assert(n >= 0)\n    return\
    \ Int64(n * (n-1) / 2)\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpqgym2fek.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  UndefVarError: assert not defined\\\
    n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpqgym2fek.jl:13\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpqgym2fek.jl:21 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpqgym2fek.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpqgym2fek.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  UndefVarError: assert not defined\\n  Stacktrace:\\n \
    \  [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpqgym2fek.jl:13\\n  \
    \ [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpqgym2fek.jl:22 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpqgym2fek.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpqgym2fek.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  UndefVarError: assert not defined\\n  Stacktrace:\\n\
    \   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpqgym2fek.jl:13\\n \
    \  [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpqgym2fek.jl:23 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpqgym2fek.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpqgym2fek.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(8) == 64\\n  UndefVarError: assert not defined\\n  Stacktrace:\\n\
    \   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpqgym2fek.jl:13\\n \
    \  [2] macro expansion\\n     @ /shared/cent"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    n represents\
    \ the number of cars in each direction.\n    \"\"\"\n    return n*(n-1)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpihxy20g7.jl:23\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpihxy20g7.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpihxy20g7.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpihxy20g7.jl:24\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 6 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpihxy20g7.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpihxy20g7.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpihxy20g7.jl:25\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 12 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpihxy20g7.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpihxy20g7.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpihxy20g7.jl:26\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 56 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpihxy20g7.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpihxy20g7.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpihxy20g7.jl:27\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 90 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpihxy20g7.jl:27 [inli"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpihxy20g7.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Find the\
    \ smallest possible number of cars that can be on a road such that each\n    car\
    \ is guaranteed to hit another car (note: the other car does not have to be moving\
    \ in\n    the opposite direction)\nusing Test\n\n@testset begin\n\ncandidate =\
    \ car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprbtvvn8w.jl:1\nin expression starting at /tmp/tmprbtvvn8w.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    n = number\
    \ of cars in each set\n    \"\"\"\n    num_collisions = 0 # number of collisions\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7ycabl6x.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7ycabl6x.jl:1\n\
    in expression starting at /tmp/tmp7ycabl6x.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Input: n\
    \ cars, each of which is moving in a speed\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6dnzd28j.jl:1\nin expression starting at /tmp/tmp6dnzd28j.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    n_cars_left = n\n   \
    \ n_cars_right = n\n    n_collisions = 0\n    while n_cars_left>0 || n_cars_right>0\n\
    \        x_car_left = rand()\n        x_car_right = rand()\n        if n_cars_left>0\
    \ && n_cars_right>0 && x_car_left > x_car_right\n            n_collisions += 1\n\
    \        end\n        n_cars_left -= 1\n        n_cars_right -= 1\n    end\n \
    \   return n_collisions\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpaknqaock.jl:32\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaknqaock.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaknqaock.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpaknqaock.jl:33\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 2 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaknqaock.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaknqaock.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpaknqaock.jl:34\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 2 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaknqaock.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaknqaock.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpaknqaock.jl:35\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 3 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaknqaock.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaknqaock.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpaknqaock.jl:36\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 6 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaknqaock.jl:36 [inlined"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaknqaock.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \n    return n*(n-1)\
    \ #<-- your answer here\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsnwejcsu.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsnwejcsu.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsnwejcsu.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpsnwejcsu.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 6 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsnwejcsu.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsnwejcsu.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpsnwejcsu.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 12 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsnwejcsu.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsnwejcsu.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpsnwejcsu.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 56 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsnwejcsu.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsnwejcsu.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpsnwejcsu.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 90 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsnwejcsu.jl:25 [inli"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsnwejcsu.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    if n<=1\n        return\
    \ 0\n    end\n    n-1\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmvfx2trb.jl:23\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmvfx2trb.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmvfx2trb.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpmvfx2trb.jl:24\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 2 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmvfx2trb.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmvfx2trb.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpmvfx2trb.jl:25\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 3 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmvfx2trb.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmvfx2trb.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpmvfx2trb.jl:26\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 7 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmvfx2trb.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmvfx2trb.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpmvfx2trb.jl:27\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 9 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmvfx2trb.jl:27 [inlined"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmvfx2trb.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    return (n-1)*n/2\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8ynnavot.jl:20\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8ynnavot.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8ynnavot.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp8ynnavot.jl:21\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8ynnavot.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8ynnavot.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp8ynnavot.jl:22\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8ynnavot.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8ynnavot.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp8ynnavot.jl:23\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8ynnavot.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8ynnavot.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp8ynnavot.jl:24\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8ynnavot.jl:24 [inlin"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8ynnavot.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"a simple nested\
    \ loop with a counter\"\"\"\n    count = 0\n    for i in 1:n\n        for j in\
    \ 1:n\n            if i == j \n                continue \n            end\n  \
    \          count += 1\n        end\n    end\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph9vfu2b4.jl:30\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph9vfu2b4.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph9vfu2b4.jl:29\ntest set: Test\
    \ Failed at /tmp/tmph9vfu2b4.jl:31\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 6 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph9vfu2b4.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph9vfu2b4.jl:29\ntest set: Test\
    \ Failed at /tmp/tmph9vfu2b4.jl:32\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 12 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph9vfu2b4.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph9vfu2b4.jl:29\ntest set: Test\
    \ Failed at /tmp/tmph9vfu2b4.jl:33\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 56 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph9vfu2b4.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph9vfu2b4.jl:29\ntest set: Test\
    \ Failed at /tmp/tmph9vfu2b4.jl:34\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 90 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph9vfu2b4.jl:34 [inli"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph9vfu2b4.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # n is the number of\
    \ cars in each direction\n    # STUB:\n    for i = 1:n\n        for j = 1:n\n\
    \            if (i != j)\n                #println(\"i = \", i, \" and j = \"\
    , j)\n                count = count + 1\n            end\n        end\n    end\n\
    \    count\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpjer2y8t3.jl:30\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  UndefVarError: count not defined\\\
    n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpjer2y8t3.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpjer2y8t3.jl:30 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpjer2y8t3.jl:29\\ntest set:\
    \ Error During Test at /tmp/tmpjer2y8t3.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  UndefVarError: count not defined\\n  Stacktrace:\\n  \
    \ [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpjer2y8t3.jl:19\\n   [2]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpjer2y8t3.jl:31 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpjer2y8t3.jl:29\\ntest set:\
    \ Error During Test at /tmp/tmpjer2y8t3.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  UndefVarError: count not defined\\n  Stacktrace:\\n \
    \  [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpjer2y8t3.jl:19\\n  \
    \ [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpjer2y8t3.jl:32 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpjer2y8t3.jl:29\\ntest set:\
    \ Error During Test at /tmp/tmpjer2y8t3.jl:33\\n  Test threw exception\\n  Expression:\
    \ candidate(8) == 64\\n  UndefVarError: count not defined\\n  Stacktrace:\\n \
    \  [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpjer2y8t3.jl:19\\n  \
    \ [2] macro expansion\\n     @ /shared/centos7/"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Imagine a\
    \ road that's a perfectly straight infinitely long line.\n    n cars are driving\
    \ left to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\nusing Test\n\n\
    @testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps0eh17bo.jl:1\nin expression starting at /tmp/tmps0eh17bo.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfga0ibe1.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfga0ibe1.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfga0ibe1.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpfga0ibe1.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfga0ibe1.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfga0ibe1.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpfga0ibe1.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfga0ibe1.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfga0ibe1.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpfga0ibe1.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfga0ibe1.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfga0ibe1.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpfga0ibe1.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfga0ibe1.jl:25 [inlined"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfga0ibe1.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    return n*(n-1)/2\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe0ab6twf.jl:20\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe0ab6twf.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe0ab6twf.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpe0ab6twf.jl:21\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe0ab6twf.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe0ab6twf.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpe0ab6twf.jl:22\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe0ab6twf.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe0ab6twf.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpe0ab6twf.jl:23\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe0ab6twf.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe0ab6twf.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpe0ab6twf.jl:24\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe0ab6twf.jl:24 [inlin"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe0ab6twf.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Input: \n\
    \    n is the number of cars going left to right, as well as the number of cars\n\
    \    going right to left.\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp22rl7q3i.jl:1\nin expression starting at /tmp/tmp22rl7q3i.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    n = 3\n \
    \   -------\n    # left-to-right cars\n    A[1] = 2\n    A[2] = 4\n    A[3] =\
    \ 2\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz1h3cug4.jl:1\nin expression starting at /tmp/tmpz1h3cug4.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    It is assumed\
    \ that the road consists of the integers from\n    -10001 to +10001 (including\
    \ both -10001 and +10001).\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk5cxw21q.jl:1\nin expression starting at /tmp/tmpk5cxw21q.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Algorithm:\n\
    \    * Let's say there are n cars moving left to right.\n    * Each car has a\
    \ speed in MPH.\n    * Each car has a position in miles.\n    * We could represent\
    \ each car by a tuple (speed, position).\n    * The direction of a car is indicated\
    \ by the sign of its speed.\n    * We could represent the location of a car moving\
    \ left to right at\n    time t as a function of t, position(t) = speed * t + position0,\n\
    \    where position0 is the position of the car at time t = 0.\n    * Similarly,\
    \ we could represent the location of a car moving\n    right to left at time t\
    \ as position(t) = -speed * t + position0.\n    * For two cars moving left to\
    \ right, a collision takes place at\n    time t if their positions are the same:\n\
    \    speed1 * t + position01 = speed2 * t + position02.\n    * In other words,\
    \ the time of collision = (position02 - position01) / (speed1 - speed2).\n   \
    \ * In other words, a collision is only possible if speed1 != speed2.\n    * In\
    \ other words, a collision is possible only if speed1 and speed2 are both\n  \
    \  positive or both negative.\n    * In other words, in the first set of cars,\
    \ there are only collisions between\n    those cars that have the same sign of\
    \ speed.\n    * It follows that the number of collisions is the number of cars\
    \ with positive\n    speed times the number of cars with negative speed.\n   \
    \ \"\"\"\n    # Generate n speeds of the cars moving left to right.\n    left_to_right_speeds\
    \ = get_random_int_array(n, 1, 10)\n    # Generate n speeds of the cars moving\
    \ right to left.\n    right_to_left_speeds = get_random_int_array(n, 1, 10)\n\
    \    # Get the number of cars moving left to right\n    # that have positive speed.\n\
    \    n_positive_speed_left_to_right = 0\n    for i in 1:n\n        n_positive_speed_left_to_right\
    \ += 1 * (left_to_right_speeds[i] > 0)\n    end\n    # Get the\nusing Test\n\n\
    @testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpuvw8tkfd.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpuvw8tkfd.jl:1\n\
    in expression starting at /tmp/tmpuvw8tkfd.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    return 2*n - 1\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp629xr941.jl:20\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 3 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp629xr941.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp629xr941.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp629xr941.jl:21\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 5 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp629xr941.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp629xr941.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp629xr941.jl:22\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 7 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp629xr941.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp629xr941.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp629xr941.jl:23\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 15 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp629xr941.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp629xr941.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp629xr941.jl:24\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 19 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp629xr941.jl:24 [inlin"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp629xr941.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    if n == 0 \n        return\
    \ 0\n    end\n    if n % 2 == 0 \n        return n * (n-2) / 4\n    else\n   \
    \     return (n-1) * (n-1) / 4\n    end\nend\ncar_race_collision(4)\nusing Test\n\
    \n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw1izjuie.jl:28\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw1izjuie.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw1izjuie.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpw1izjuie.jl:29\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 1 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw1izjuie.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw1izjuie.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpw1izjuie.jl:30\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 2 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw1izjuie.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw1izjuie.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpw1izjuie.jl:31\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 12 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw1izjuie.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw1izjuie.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpw1izjuie.jl:32\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 20 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw1izjuie.jl:32 [inlin"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw1izjuie.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    return div(n*(n-1), 2)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq91mavqp.jl:20\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq91mavqp.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq91mavqp.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpq91mavqp.jl:21\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq91mavqp.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq91mavqp.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpq91mavqp.jl:22\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq91mavqp.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq91mavqp.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpq91mavqp.jl:23\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq91mavqp.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq91mavqp.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpq91mavqp.jl:24\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq91mavqp.jl:24 [inlin"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq91mavqp.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    The inputs\
    \ and outputs of the function should be self-explanatory.\n    \"\"\"\n    return\
    \ sum(car_collisions_nodrag(n))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmphqsua5pc.jl:23\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  UndefVarError: car_collisions_nodrag\
    \ not defined\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main\
    \ /tmp/tmphqsua5pc.jl:16\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmphqsua5pc.jl:23 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmphqsua5pc.jl:22\\ntest set:\
    \ Error During Test at /tmp/tmphqsua5pc.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  UndefVarError: car_collisions_nodrag not defined\\n  Stacktrace:\\\
    n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmphqsua5pc.jl:16\\n \
    \  [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmphqsua5pc.jl:24 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmphqsua5pc.jl:22\\ntest set:\
    \ Error During Test at /tmp/tmphqsua5pc.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  UndefVarError: car_collisions_nodrag not defined\\n \
    \ Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmphqsua5pc.jl:16\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmphqsua5pc.jl:25 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmphqsua5pc.jl:22\\ntest set:\
    \ Error During Test at /tmp/tmphqsua5pc.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(8) == 64\\n  UndefVarError: car_collisions_nodrag not defined\\n \
    \ Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tm"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    s = -1\n    c = 0\n \
    \   count = 0\n    for i = 1:n\n        s *= -1\n        c = 0\n        for j\
    \ = 1:n\n            if s * (i - j) > 0\n                c += 1\n            end\n\
    \        end\n        count += c\n    end\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpys8xk8oe.jl:33\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpys8xk8oe.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpys8xk8oe.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpys8xk8oe.jl:34\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpys8xk8oe.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpys8xk8oe.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpys8xk8oe.jl:35\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 4 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpys8xk8oe.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpys8xk8oe.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpys8xk8oe.jl:36\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 24 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpys8xk8oe.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpys8xk8oe.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpys8xk8oe.jl:37\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 40 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpys8xk8oe.jl:37 [inlin"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpys8xk8oe.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    if n==0 \n        return\
    \ 0\n    end\n    #all the right cars\n    right = Array{Int64}(n)\n    #all the\
    \ left cars\n    left = Array{Int64}(n)\n    #the car that leaves at the ith iteration\n\
    \    leave_right = zeros(Int64, n)\n    leave_left = zeros(Int64, n)\n    j =\
    \ 0\n    for i = n:-1:1\n        j += 1\n        right[j] = i\n        left[j]\
    \ = i\n        leave_right[i] = i - 1\n        leave_left[i] = i - 1\n    end\n\
    \    #the result\n    count = 0\n    #there are exactly 2n car move\n    for i\
    \ = 1:2n\n        #the first right car\n        if i == 1\n            first_car\
    \ = right[1]\n        end\n        #the first left car\n        if i == n + 1\n\
    \            first_car = left[1]\n        end\n        #update the first car\n\
    \        first_car = leave_right[first_car]\n        #update the last car\n  \
    \      last_car = leave_left[last_car]\n        #check if any right car is faster\
    \ than any left car\n        for k = 1:first_car\n            if last_car == 0\n\
    \                return count\n            end\n            #if the first car\
    \ from the right arrives before the last car from the left\n            if last_car\
    \ < k\n                #then we have a collision\n                count += 1\n\
    \            end\n            #update the first car\n            first_car = leave_right[first_car]\n\
    \            #update the last car\n            last_car = leave_left[last_car]\n\
    \        end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\n\
    candidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp18s759hv.jl:70\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: no method matching\
    \ (Array{Int64})(::Int64)\\n  Closest candidates are:\\n    (Array{T})(!Matched::LinearAlgebra.AbstractQ)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/qr.jl:563\\\
    n    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Tuple{Int64,\
    \ Int64}) where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\\\
    n    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmp18s759hv.jl:17\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp18s759hv.jl:70 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp18s759hv.jl:69\\ntest set:\
    \ Error During Test at /tmp/tmp18s759hv.jl:71\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: no method matching (Array{Int64})(::Int64)\\\
    n  Closest candidates are:\\n    (Array{T})(!Matched::LinearAlgebra.AbstractQ)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/qr.jl:563\\\
    n    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Tuple{Int64,\
    \ Int64}) where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\\\
    n    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmp18s759hv.jl:17\\\
    n   [2] macro expansion\\n     @ /shared/centos7/"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    assert n > 0\n    ##\
    \ the number of collisions\n    ## each car that's moving right to left at position\
    \ 0 has a collision\n    return n\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmp_32w6c4z.jl:12 expected\
    \ \"end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_32w6c4z.jl:13\n\
    in expression starting at /tmp/tmp_32w6c4z.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    if n < 0 \n        error(\"\
    ERROR: n must be non-negative\")\n    end\n    if n == 0\n        return 0\n \
    \   end\n    return n - 1\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmtytyvrf.jl:26\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmtytyvrf.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmtytyvrf.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpmtytyvrf.jl:27\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 2 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmtytyvrf.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmtytyvrf.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpmtytyvrf.jl:28\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 3 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmtytyvrf.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmtytyvrf.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpmtytyvrf.jl:29\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 7 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmtytyvrf.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmtytyvrf.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpmtytyvrf.jl:30\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 9 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmtytyvrf.jl:30 [inlined"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmtytyvrf.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # Todo: write your own\
    \ code\n    return n*(n-1)/2\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfri57ku7.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfri57ku7.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfri57ku7.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpfri57ku7.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfri57ku7.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfri57ku7.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpfri57ku7.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfri57ku7.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfri57ku7.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpfri57ku7.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfri57ku7.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfri57ku7.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpfri57ku7.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfri57ku7.jl:25 [inlin"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfri57ku7.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # if n is an odd number,\
    \ there is no collision.\n    if n%2 == 1\n        return 0\n    end\n    return\
    \ (n-1)*n/2\nend\n \nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnj7ow9io.jl:25\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnj7ow9io.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnj7ow9io.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpnj7ow9io.jl:26\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnj7ow9io.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnj7ow9io.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpnj7ow9io.jl:27\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnj7ow9io.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnj7ow9io.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpnj7ow9io.jl:28\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnj7ow9io.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnj7ow9io.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpnj7ow9io.jl:29\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnj7ow9io.jl:29 [inlin"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnj7ow9io.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Example:\
    \ if n=5, we're driving these 5 cars left to right:\n    [1,2,3,4,5]\n    and\
    \ these 5 cars right to left:\n    [5,4,3,2,1]\n    Cars 1 and 5 collide;  cars\
    \ 2 and 4 collide;\n    and cars 3 and 3 collide.  So the answer is 3.\n    \"\
    \"\"\n    return Int64(n - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0hk4b6iw.jl:28\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0hk4b6iw.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0hk4b6iw.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp0hk4b6iw.jl:29\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 2 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0hk4b6iw.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0hk4b6iw.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp0hk4b6iw.jl:30\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 3 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0hk4b6iw.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0hk4b6iw.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp0hk4b6iw.jl:31\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 7 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0hk4b6iw.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0hk4b6iw.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp0hk4b6iw.jl:32\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 9 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0hk4b6iw.jl:32 [inlined"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0hk4b6iw.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    ##\n    # PUT YOUR CODE\
    \ HERE\n    ##\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Returns the\
    \ number of collisions in a car race\n    where n cars are moving left to right\
    \ and n cars\n    are moving right to left simultaneously.\n    \"\"\"\n    #\
    \ The key is to realize that the cars can be\n    # sorted in increasing order.\
    \  Cars with lower\n    # numbers will pass all cars with larger numbers.\n  \
    \  # Imagine n cars moving left to right, and n cars\n    # moving right to left.\
    \  Then all cars on the left\n    # to right side are sorted in increasing order.\n\
    \    # Similarly, all cars on the right to left side\n    # are sorted in decreasing\
    \ order.  If there is\n    # a collision, the car numbers must be the same.\n\
    \    # So it becomes an instance of one sorted array\n    # intersection.  But\
    \ note that the input is NOT\n    # 2 sorted arrays.\n    # \n    # The solution\
    \ is:\n    #    for i in 1 to n\n    #        for j in 1 to n\n    #         \
    \   if i == j\n    #                add 1 to sum\n    #            end\n    #\
    \        end\n    #    end\n    #    return sum\n    #\n    # One can do this\
    \ in O(n^2) time and O(1) space.\n    # But we can do it in O(n) time and O(1)\
    \ space\n    # by noticing the above pattern.  A code sample\n    # is as follows:\n\
    \    sum = 0\n    for i in 1:n\n        sum += i\n    end\n    return sum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph_kn30yx.jl:56\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 3 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph_kn30yx.jl:56 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph_kn30yx.jl:55\ntest set: Test\
    \ Failed at /tmp/tmph_kn30yx.jl:57\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 6 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph_kn30yx.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph_kn30yx.jl:55\ntest set: Test\
    \ Failed at /tmp/tmph_kn30yx.jl:58\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 10 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph_kn30yx.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph_kn30yx.jl:55\ntest set: Test\
    \ Failed at /tmp/tmph_kn30yx.jl:59\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 36 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph_kn30yx.jl:59 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph_kn30yx.jl:55\ntest set: Test\
    \ Failed at /tmp/tmph_kn30yx.jl:60\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 55 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph_kn30yx.jl:60 [inli"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph_kn30yx.jl:53\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n  # we assume that the left-to-right\
    \ cars are `n' consecutive integers (i.e. 1, 2, 3,..., n)\n  # and the right-to-left\
    \ cars are the consecutive integers (i.e. n, n-1, n-2,..., 1)\n  # For example,\
    \ if there are three cars, the left-to-right cars are 1, 2, 3 and the\n  # right-to-left\
    \ cars are 3, 2, 1.  We assume that the cars have been sorted in\n  # the \"correct\"\
    \ order.\n  \n  n\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgy7hadod.jl:26\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgy7hadod.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgy7hadod.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpgy7hadod.jl:27\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgy7hadod.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgy7hadod.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpgy7hadod.jl:28\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 4 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgy7hadod.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgy7hadod.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpgy7hadod.jl:29\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 8 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgy7hadod.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgy7hadod.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpgy7hadod.jl:30\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 10 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgy7hadod.jl:30 [inline"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgy7hadod.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # basic tests\n    @assert\
    \ n >= 0\n    if n == 0\n        return 0\n    end\n    ##############\n    #\
    \ your code here\n    ##############\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa5xtjxkw.jl:28\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa5xtjxkw.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa5xtjxkw.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpa5xtjxkw.jl:29\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa5xtjxkw.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa5xtjxkw.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpa5xtjxkw.jl:30\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa5xtjxkw.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa5xtjxkw.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpa5xtjxkw.jl:31\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa5xtjxkw.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa5xtjxkw.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpa5xtjxkw.jl:32\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa5xtjxkw.jl:32 [inlined"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa5xtjxkw.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    ...\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid identifier name \"...\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpepjyaqjv.jl:13\nin expression starting at\
    \ /tmp/tmpepjyaqjv.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # This function is a\
    \ stub and needs to be replaced.\n    return 2*n\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpywdpnjtb.jl:22\n  Expression: candidate(3)\
    \ == 9\n   Evaluated: 6 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpywdpnjtb.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpywdpnjtb.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpywdpnjtb.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 8 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpywdpnjtb.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpywdpnjtb.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpywdpnjtb.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 16 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpywdpnjtb.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpywdpnjtb.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpywdpnjtb.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 20 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpywdpnjtb.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpywdpnjtb.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpywdpnjtb.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # calculate the number\
    \ of collisions\n    collisions = 0\n    for i in 0:n-1\n        for j in 0:n-1\n\
    \            if i < j\n                collisions += 1\n            end\n    \
    \    end\n    end\n    return collisions\nend\n@benchmark car_race_collision(9)\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @benchmark not defined\nin expression\
    \ starting at /tmp/tmp03_d8xoj.jl:24\nin expression starting at /tmp/tmp03_d8xoj.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    if n < 1 \n        return\
    \ 0\n    end\n    if n == 1\n        return 1\n    end\n    return 2^(n-1)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpt3kjhxue.jl:26\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt3kjhxue.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt3kjhxue.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpt3kjhxue.jl:27\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 4 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt3kjhxue.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt3kjhxue.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpt3kjhxue.jl:28\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 8 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt3kjhxue.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt3kjhxue.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpt3kjhxue.jl:29\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 128 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt3kjhxue.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt3kjhxue.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpt3kjhxue.jl:30\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 512 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt3kjhxue.jl:30 [inl"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt3kjhxue.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    #In the following, we\
    \ calculate the number of collisions.\n    #There are multiple ways to do this.\
    \  Here's one of them.\n    #Consider the left_to_right cars and the right_to_left\
    \ cars;\n    #if we sort them based on their speed, then the first\n    #right_to_left\
    \ car is guaranteed to collide with the first\n    #left_to_right car.  Similarly,\
    \ the second right_to_left car\n    #is guaranteed to collide with the second\
    \ left_to_right car.\n    #In general, the i-th right_to_left car is guaranteed\
    \ to collide\n    #with the i-th left_to_right car.  And it turns out that every\n\
    \    #collision is caused in this way.  So all we need to do to figure\n    #out\
    \ the number of collisions is to figure out the number of cars\n    #in each direction.\
    \  This is the same as asking how many ways\n    #there are to choose n items\
    \ from the set {1,2,...,2n}, which\n    #in turn is the same as asking how many\
    \ ways there are to choose\n    #n items from the set {1,2,...,2n} without replacement,\
    \ in which\n    #we are guaranteed to pick at least one item from each\n    #of\
    \ the two groups {1,2,...,n} and {n+1,n+2,...,2n}.\nusing Test\n\n@testset begin\n\
    \ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu2wrerfg.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu2wrerfg.jl:1\n\
    in expression starting at /tmp/tmpu2wrerfg.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  # please write your solution in the cell above this comment.\nend\n \nusing\
    \ Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp9ttf9rkn.jl:22\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    if n == 0 \n        return\
    \ 0\n    end\n    return n*(n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpoxlce1fb.jl:23\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoxlce1fb.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoxlce1fb.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpoxlce1fb.jl:24\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 6 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoxlce1fb.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoxlce1fb.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpoxlce1fb.jl:25\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 12 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoxlce1fb.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoxlce1fb.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpoxlce1fb.jl:26\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 56 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoxlce1fb.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoxlce1fb.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpoxlce1fb.jl:27\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 90 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoxlce1fb.jl:27 [inli"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoxlce1fb.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # if one of the sets\
    \ of cars is empty, there are no collisions\n    if n == 0 \n        return 0\n\
    \    end\n    \n    # if both sets of cars are filled with one car each, there\
    \ is one collision\n    if n == 1\n        return 1\n    end\n    \n    # if both\
    \ sets of cars have 2 cars, there are three possibilities for collisions:\n  \
    \  # first, the leftmost car from the left set collides with the rightmost car\n\
    \    # from the right set.  second, the leftmost car from the left set collides\
    \ with\n    # the second-to-the-rightmost car from the right set.  third, the\
    \ second-to-the-leftmost\n    # car from the left set collides with the rightmost\
    \ car from the right set.\n    if n == 2\n        return 3\n    end\n    \n  \
    \  # if both sets of cars have 3 cars, there are 5 possibilities for collisions.\n\
    \    # think about it a little bit and you will see why.\n    if n == 3\n    \
    \    return 5\n    end\n    \n    # if both sets of cars have 4 cars, there are\
    \ 7 possibilities for collisions.\n    # think about it a little bit and you will\
    \ see why.\n    if n == 4\n        return 7\n    end\n    \n    # if both sets\
    \ of cars have 5 cars, there are 9 possibilities for collisions.\n    # think\
    \ about it a little bit and you will see why.\n    if n == 5\n        return 9\n\
    \    end\n    \n    # if both sets of cars have 6 cars, there are 11 possibilities\
    \ for collisions.\n    # think about it a little bit and you will see why.\n \
    \   if n == 6\n        return 11\n    end\n    \n    # if both sets of cars have\
    \ 7 cars, there are 13 possibilities for collisions.\n    # think about it a little\
    \ bit and you will see why.\n    if n == 7\n        return 13\n    end\n    \n\
    \    # if both sets of cars have 8 cars, there are 15 possibilities for collisions.\n\
    \    # think about it a little bit and you will see why.\n    if n == 8\n    \
    \    return 15\n    end\n    \n    # if both sets of cars have 9 cars, there are\
    \ 17 possibilities for collisions.\n    # think about it\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgqjdewjt.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgqjdewjt.jl:1\n\
    in expression starting at /tmp/tmpgqjdewjt.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    c = 0\n    for i = 1:n\n\
    \        for j = 1:n\n            if i > j\n                c += 1\n         \
    \   end\n        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8bm2qh_0.jl:28\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8bm2qh_0.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8bm2qh_0.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp8bm2qh_0.jl:29\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8bm2qh_0.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8bm2qh_0.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp8bm2qh_0.jl:30\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8bm2qh_0.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8bm2qh_0.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp8bm2qh_0.jl:31\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8bm2qh_0.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8bm2qh_0.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp8bm2qh_0.jl:32\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8bm2qh_0.jl:32 [inlin"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8bm2qh_0.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # init all four arrays\n\
    \    left_car_pos = rand(1:n, n)\n    left_car_vel = rand(1:10, n)\n    right_car_pos\
    \ = rand(1:n, n)\n    right_car_vel = rand(1:10, n)\n    \n    # sort both the\
    \ pos and vel arrays at the same time\n    # note that sortperm returns the permutation\
    \ vector\n    left_car_pos_sortperm = sortperm(left_car_pos)\n    left_car_pos\
    \ = left_car_pos[left_car_pos_sortperm]\n    left_car_vel = left_car_vel[left_car_pos_sortperm]\n\
    \    \n    right_car_pos_sortperm = sortperm(right_car_pos)\n    right_car_pos\
    \ = right_car_pos[right_car_pos_sortperm]\n    right_car_vel = right_car_vel[right_car_pos_sortperm]\n\
    \    \n    # init the result variable\n    collisions = 0\n    \n    # keep two\
    \ pointers, one for each array\n    left_pointer = 1\n    right_pointer = 1\n\
    \    \n    # keep iterating as long as there are cars in either array\n    while\
    \ left_pointer <= n && right_pointer <= n\n        if left_car_pos[left_pointer]\
    \ < right_car_pos[right_pointer]\n            # moving left car is closer to the\
    \ middle than moving right car\n            if left_car_vel[left_pointer] > right_car_vel[right_pointer]\n\
    \                # the left car will pass the right car before they both reach\
    \ the middle, \n                # so they WILL NOT collide\n                left_pointer\
    \ += 1\n            else\n                # the left car is going to collide with\
    \ the right car, so increment \n                # the number of collisions\n \
    \               collisions += 1\n                right_pointer += 1\n        \
    \    end\n        else\n            # moving right car is closer to the middle\
    \ than moving left car\n            if left_car_vel[left_pointer] < right_car_vel[right_pointer]\n\
    \                # the right car will pass the left car before they both reach\
    \ the middle, \n                # so they WILL\nusing Test\n\n@testset begin\n\
    \ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5kdx1z1q.jl:1\nin expression starting at /tmp/tmp5kdx1z1q.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # Initialize variables\n\
    \    car_positions = zeros(Int64, n) # Keep track of the positions of the n cars\
    \ that are moving left to right\n    car_positions_r = zeros(Int64, n) # Keep\
    \ track of the positions of the n cars that are moving right to left\n    collisions\
    \ = 0 # Keep track of the number of collisions\n    \n    # Move the cars left\
    \ to right\n    for i in 1:n\n        car_positions[i] = car_positions[i-1] +\
    \ rand(1:10) # Move each car\n        for j in 1:n\n            # Check for collisions\n\
    \            if car_positions[i] > car_positions_r[j]\n                collisions\
    \ += 1\n            end\n        end\n    end\n    \n    # Move the cars right\
    \ to left\n    for i in 1:n\n        car_positions_r[i] = car_positions_r[i-1]\
    \ + rand(1:10) # Move each car\n        for j in 1:n\n            # Check for\
    \ collisions\n            if car_positions_r[i] < car_positions[j]\n         \
    \       collisions += 1\n            end\n        end\n    end\n    \n    # Return\
    \ the answer\n    return collisions\nend\n@benchmark car_race_collision(10)\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @benchmark not defined\nin expression\
    \ starting at /tmp/tmp5zx5vvuk.jl:43\nin expression starting at /tmp/tmp5zx5vvuk.jl:43\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    right_to_left = zeros(n)\n\
    \    left_to_right = zeros(n)\n    n_right_to_left = 0\n    n_left_to_right =\
    \ 0\n    n_collisions = 0\n    while n_right_to_left < n && n_left_to_right <\
    \ n\n        if right_to_left[n_right_to_left + 1] == left_to_right[n_left_to_right\
    \ + 1]\n            n_collisions += 1\n        end\n        if right_to_left[n_right_to_left\
    \ + 1] < left_to_right[n_left_to_right + 1]\n            n_right_to_left += 1\n\
    \        else\n            n_left_to_right += 1\n        end\n    end\n    return\
    \ n_collisions\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0_hxlcw6.jl:35\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0_hxlcw6.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0_hxlcw6.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp0_hxlcw6.jl:36\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0_hxlcw6.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0_hxlcw6.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp0_hxlcw6.jl:37\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 4 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0_hxlcw6.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0_hxlcw6.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp0_hxlcw6.jl:38\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 8 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0_hxlcw6.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0_hxlcw6.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp0_hxlcw6.jl:39\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 10 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0_hxlcw6.jl:39 [inline"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0_hxlcw6.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # Some random input\n\
    \    right_to_left = [i+1 for i in 1:n]\n    left_to_right = [i for i in n:-1:1]\n\
    \    # Now, add the cars to a dictionary.\n    # Again, this is just a random\
    \ idea.\n    car_location = Dict(zip(right_to_left, left_to_right))\n    # Make\
    \ a function that merges the list.\n    function merge_list(l1::Array{Int64,1},\
    \ l2::Array{Int64,1})::Array{Int64,1}\n        # Make the list of size (2n, 1)\n\
    \        l = zeros(Int64, (2n,1))\n        i, j = 1, 1\n        while true\n \
    \           if l1[i] < l2[j]\n                # put the current element into l\n\
    \                l[i+j-1] = l1[i]\n                i += 1\n            else\n\
    \                l[i+j-1] = l2[j]\n                j += 1\n            end\n \
    \           if i > length(l1)\n                return [l[1:end-length(l2)+j-1];\
    \ l2[j:end]]\n            elseif j > length(l2)\n                return [l[1:end-length(l1)+i-1];\
    \ l1[i:end]]\n            end\n        end\n    end\n    # Now merge the list.\n\
    \    n = left_to_right.length\n    mid = div(n, 2)\n    l1 = left_to_right[1:mid]\n\
    \    l2 = left_to_right[mid+1:end]\n    l1 = merge_list(l1, l2)\n    mid = div(n,\
    \ 2)\n    l1 = right_to_left[1:mid]\n    l2 = right_to_left[mid+1:end]\n    l2\
    \ = merge_list(l1, l2)\n    # Now count the collisions.\n    num_collisions =\
    \ 0\n    i, j = 1, 1\n    while true\n        if l1[i] < l2[j]\n\nusing Test\n\
    \n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_kqjuzjb.jl:1\nin expression starting at /tmp/tmp_kqjuzjb.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    N = n\n    c = 0 \n \
    \   while N > 0\n        c += N \n        N -= 1\n    end\n    return c\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0eswoevy.jl:26\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 3 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0eswoevy.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0eswoevy.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp0eswoevy.jl:27\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 6 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0eswoevy.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0eswoevy.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp0eswoevy.jl:28\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 10 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0eswoevy.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0eswoevy.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp0eswoevy.jl:29\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 36 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0eswoevy.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0eswoevy.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp0eswoevy.jl:30\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 55 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0eswoevy.jl:30 [inli"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0eswoevy.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    See the docstring\
    \ of this function.\n    \"\"\"\n    # The array that records the locations of\
    \ the cars driving right to left.\n    cars_driving_right_to_left = Vector{Float64}(n)\n\
    \    # The array that records the locations of the cars driving left to right.\n\
    \    cars_driving_left_to_right = Vector{Float64}(n)\n    # Initialize the cars.\n\
    \    # The right to left cars are initially uniformly spaced along the line\n\
    \    # of length n.\n    for i in 1:n\n        cars_driving_right_to_left[i] =\
    \ i\n    end\n    # The left to right cars are initially uniformly spaced along\
    \ the line\n    # of length n.\n    for i in 1:n\n        cars_driving_left_to_right[i]\
    \ = n+1-i\n    end\n    # The number of collisions.\n    num_collisions = 0\n\
    \    # The number of time steps.\n    num_time_steps = 100_000\n    # Every time\
    \ step, the cars advance by 1 unit.\n    for i in 1:num_time_steps\n        #\
    \ To keep track of whether a collision occurred, we will\n        # record the\
    \ locations of the cars before the time step,\n        # and compare them with\
    \ the locations of the cars after the time step.\n        car_locations_before_time_step\
    \ = Vector{Float64}(n)\n        car_locations_after_time_step = Vector{Float64}(n)\n\
    \        # The locations of the cars driving right to left.\n        car_locations_before_time_step\
    \ = cars_driving_right_to_left\n        # The locations of the cars driving left\
    \ to right.\n        car_locations_after_time_step = cars_driving_left_to_right\n\
    \        # The cars advance by 1 unit.\n        for i in 1:n\n            cars_driving_right_to_left[i]\
    \ = car_locations_before_time_step[i] + 1\n            cars_driving_left_to_right[i]\
    \ = car_locations_after_time_step[i] - 1\n        end\n        # Check if a collision\
    \ occurred.\n        for\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid iteration specification\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi6ewtypy.jl:54\nin expression starting at\
    \ /tmp/tmpi6ewtypy.jl:54\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \n    return n*(n-1)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm6xvwgrm.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm6xvwgrm.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm6xvwgrm.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpm6xvwgrm.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 6 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm6xvwgrm.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm6xvwgrm.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpm6xvwgrm.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 12 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm6xvwgrm.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm6xvwgrm.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpm6xvwgrm.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 56 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm6xvwgrm.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm6xvwgrm.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpm6xvwgrm.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 90 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm6xvwgrm.jl:25 [inli"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm6xvwgrm.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n  \"\"\"\n  Example input:\n\
    \  n = 7 \n  Example output: \n  0\n  \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4lbaja4h.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4lbaja4h.jl:1\n\
    in expression starting at /tmp/tmp4lbaja4h.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    n = 8 \n\
    \    cars_left = 0:2:14 \n    cars_right = 1:2:15 \n    n_collisions = 0 \n  \
    \  for i = 1:n\n        for j = 1:n\n            if cars_left[i] == cars_right[j]\n\
    \                n_collisions += 1 \n            end \n        end \n    end \n\
    \    \"\"\"\n    n_collisions = 0 \n    for car_left in 0:2:2n-2\n        for\
    \ car_right in 1:2:2n-1\n            if car_left == car_right\n              \
    \  n_collisions += 1 \n            end \n        end \n    end \n    return n_collisions\
    \ \nend \nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t\
    @test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1yg5330g.jl:41\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1yg5330g.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1yg5330g.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp1yg5330g.jl:42\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1yg5330g.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1yg5330g.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp1yg5330g.jl:43\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1yg5330g.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1yg5330g.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp1yg5330g.jl:44\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1yg5330g.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1yg5330g.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp1yg5330g.jl:45\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1yg5330g.jl:45 [inlined"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1yg5330g.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # let's use two arrays\
    \ to store the position of the cars: one for cars going left to right,\n    #\
    \ and one for cars going right to left\n    L = [i for i in 1:n]\n    R = [i for\
    \ i in n:-1:1]\n    collision_count = 0\n    i, j = 1, 1\n    while i <= n &&\
    \ j <= n\n        # a collision occurs when\n        # 1. the left-to-right car\
    \ has not collided with other left-to-right cars,\n        #    and\n        #\
    \ 2. the right-to-left car has not collided with other right-to-left cars,\n \
    \       #    and\n        # 3. the right-to-left car is to the left of the left-to-right\
    \ car\n        if L[i] == i && R[j] == n-j+1 && R[j] < L[i]\n            collision_count\
    \ += 1\n            i += 1\n            j += 1\n        elseif L[i] < R[j] # left-to-right\
    \ car is to the left of the right-to-left car\n            i += 1\n        else\
    \ # right-to-left car is to the left of the left-to-right car\n            j +=\
    \ 1\n        end\n    end\n    return collision_count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgsog0s10.jl:43\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgsog0s10.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgsog0s10.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpgsog0s10.jl:44\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 1 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgsog0s10.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgsog0s10.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpgsog0s10.jl:45\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 1 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgsog0s10.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgsog0s10.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpgsog0s10.jl:46\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 1 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgsog0s10.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgsog0s10.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpgsog0s10.jl:47\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 1 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgsog0s10.jl:47 [inlined"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgsog0s10.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    input:  n,\
    \ the number of cars driving left to right\n    output: number of cars colliding\n\
    \    \"\"\"\n    \n    # YOUR CODE HERE\nend\nusing Test\n\n@testset begin\n\n\
    candidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "b'test set: Error During Test at '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    left2right = [x for x\
    \ in 1:n]\n    right2left = reverse(left2right)\n    num_collisions = 0\n    for\
    \ i in 1:n\n        for j in 1:n\n            if right2left[j] == left2right[i]\n\
    \                num_collisions += 1\n            end\n        end\n    end\n\
    \    return num_collisions\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnm8jhc7_.jl:30\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnm8jhc7_.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnm8jhc7_.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpnm8jhc7_.jl:31\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnm8jhc7_.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnm8jhc7_.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpnm8jhc7_.jl:32\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 4 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnm8jhc7_.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnm8jhc7_.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpnm8jhc7_.jl:33\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 8 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnm8jhc7_.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnm8jhc7_.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpnm8jhc7_.jl:34\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 10 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnm8jhc7_.jl:34 [inline"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnm8jhc7_.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    return round(Int64, n\
    \ * (n - 1) / 2)\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy0jgp17u.jl:20\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy0jgp17u.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy0jgp17u.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpy0jgp17u.jl:21\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy0jgp17u.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy0jgp17u.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpy0jgp17u.jl:22\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy0jgp17u.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy0jgp17u.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpy0jgp17u.jl:23\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy0jgp17u.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy0jgp17u.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpy0jgp17u.jl:24\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy0jgp17u.jl:24 [inlin"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy0jgp17u.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    count = 0\n    for j\
    \ in 1:n\n        for i in 1:n\n            if j == i \n                continue\n\
    \            end\n            count += 1\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkqblgtpb.jl:29\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkqblgtpb.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkqblgtpb.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpkqblgtpb.jl:30\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 6 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkqblgtpb.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkqblgtpb.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpkqblgtpb.jl:31\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 12 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkqblgtpb.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkqblgtpb.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpkqblgtpb.jl:32\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 56 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkqblgtpb.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkqblgtpb.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpkqblgtpb.jl:33\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 90 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkqblgtpb.jl:33 [inli"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkqblgtpb.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    first_cars = [i for i\
    \ in 1:n] #first set of cars\n    second_cars = [i for i in 1:n] #second set of\
    \ cars\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpejg06vok.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpejg06vok.jl:1\n\
    in expression starting at /tmp/tmpejg06vok.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # TODO:  Finish me!\n\
    \    return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp08hl1_51.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp08hl1_51.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp08hl1_51.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp08hl1_51.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp08hl1_51.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp08hl1_51.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp08hl1_51.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp08hl1_51.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp08hl1_51.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp08hl1_51.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp08hl1_51.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp08hl1_51.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp08hl1_51.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp08hl1_51.jl:25 [inlined"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp08hl1_51.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    >>> car_race_collision(3)\n\
    \    1\n    >>> car_race_collision(5)\n    10\n    >>> car_race_collision(10)\n\
    \    55\n    \"\"\"\n \n    # Each car has 2 locations:  the starting point and\
    \ the ending point\n    # Let's call those locations 's' and 'e' respectively.\n\
    \    # For the left to right cars, we know they have starting points\n    # s_i\
    \ = i*2-1  and  ending points  e_i = i*2,  for i=1, 2, ..., n.\n    # For the\
    \ right to left cars, we know they have starting points\n    # s_i = 2n-i*2  and\
    \  ending points  e_i = 2n-i*2+1,  for i=1, 2, ..., n.\n    # Two cars collide\
    \ if  (s_a <= s_b <= e_a <= e_b)  or\n    #                      (s_b <= s_a <=\
    \ e_b <= e_a).\n    # The number of such collisions is the number of pairs of\
    \ integers i and j\n    # that satisfy either  (i<j and i*2-1 <= (2n-j*2) <= i*2\
    \ <= 2n-j*2+1)  or\n    #                     (j<i and j*2-1 <= (2n-i*2) <= j*2\
    \ <= 2n-i*2+1).\n    # We've already explained the first inequality  (i<j).\n\
    \    # The second inequality  (i*2-1 <= (2n-j*2))  is equivalent to  (n+1 <= i+j).\n\
    \    # The third inequality  (i*2 <= 2n-j*2+1)  is equivalent to  (i+j <= 2n).\n\
    \    # So the number of collisions is the number of pairs of integers\n    # i\
    \ and j that satisfy  (n+1 <= i+j <= 2n).\n    # A lower bound for that number\
    \ is the number of elements on a diagonal\n    # of a square n by n matrix.  Such\
    \ a diagonal has n elements.\n    # Thus, the number of\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpw_9v6gt7.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpw_9v6gt7.jl:1\n\
    in expression starting at /tmp/tmpw_9v6gt7.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    cars_left = [1:n]\n \
    \   cars_right = [-n:-1]\n    collisions = 0\n    while (length(cars_left) > 0\
    \ && length(cars_right) > 0)\n        next_car_left = popfirst!(cars_left)\n \
    \       next_car_right = popfirst!(cars_right)\n        if (next_car_left > next_car_right)\n\
    \            # keep going until they are equal\n            collisions += 1\n\
    \            push!(cars_left, next_car_left)\n            push!(cars_right, next_car_right)\n\
    \        elseif (next_car_left < next_car_right)\n            push!(cars_left,\
    \ next_car_left)\n            push!(cars_right, next_car_right)\n        else\n\
    \            # do nothing\n        end\n    end\n    return collisions\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # n is the number of\
    \ cars\n    # `allpos` and `allvel` are lists of the positions and velocities\
    \ of all cars\n    allpos = [i for i in 1:n]\n    allvel = [1 for i in 1:n]\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnyyvw26r.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnyyvw26r.jl:1\n\
    in expression starting at /tmp/tmpnyyvw26r.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # -- We'll start out\
    \ by taking a special look at the case where n = 1:\n    if n == 1\n        return\
    \ 0\n    end\n    # -- This is the first of many parts of this function that are\
    \ different\n    # -- in the case n = 1.  In the case n = 1, the cars do not collide.\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcgn6rj6h.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcgn6rj6h.jl:1\n\
    in expression starting at /tmp/tmpcgn6rj6h.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # What are our arguments?\n\
    \    # n: number of cars moving left to right\n    # and number of cars moving\
    \ right to left.\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0sj_up62.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0sj_up62.jl:1\n\
    in expression starting at /tmp/tmp0sj_up62.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    return ceil(Int64, n/2)\
    \ # YOUR CODE HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpg511iyj8.jl:20\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg511iyj8.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg511iyj8.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpg511iyj8.jl:21\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 2 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg511iyj8.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg511iyj8.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpg511iyj8.jl:22\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 2 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg511iyj8.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg511iyj8.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpg511iyj8.jl:23\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 4 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg511iyj8.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg511iyj8.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpg511iyj8.jl:24\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 5 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg511iyj8.jl:24 [inlined"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg511iyj8.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\"\n    Pre: n\
    \ must be a positive integer \n    Post: this function outputs the number of collisions\
    \ between n cars that\n    are moving left to right (headed towards a car that's\
    \ moving right to left)\n    as if they were a perfectly straight road.\n    \"\
    \"\"\n    #return 0\n    return n*(n-1)/2\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphf1tpj72.jl:27\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphf1tpj72.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphf1tpj72.jl:26\ntest set: Test\
    \ Failed at /tmp/tmphf1tpj72.jl:28\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphf1tpj72.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphf1tpj72.jl:26\ntest set: Test\
    \ Failed at /tmp/tmphf1tpj72.jl:29\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphf1tpj72.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphf1tpj72.jl:26\ntest set: Test\
    \ Failed at /tmp/tmphf1tpj72.jl:30\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphf1tpj72.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphf1tpj72.jl:26\ntest set: Test\
    \ Failed at /tmp/tmphf1tpj72.jl:31\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphf1tpj72.jl:31 [inlin"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphf1tpj72.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    num_collisions = 0\n\
    \    #\n    # YOUR CODE HERE\n    #\n    return num_collisions\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpv1mxw_6i.jl:24\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv1mxw_6i.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv1mxw_6i.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpv1mxw_6i.jl:25\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv1mxw_6i.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv1mxw_6i.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpv1mxw_6i.jl:26\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv1mxw_6i.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv1mxw_6i.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpv1mxw_6i.jl:27\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv1mxw_6i.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv1mxw_6i.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpv1mxw_6i.jl:28\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv1mxw_6i.jl:28 [inlined"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv1mxw_6i.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    if n == 0\n        return\
    \ 0\n    end\n    if n == 1\n        return 0\n    end\n    #Initialize a list\n\
    \    one_list = fill(0,n)\n    two_list = fill(0,n)\n    #Placing cars in the\
    \ list\n    for k in 1:n\n        one_list[k] = k\n        two_list[k] = 2*n -\
    \ k + 1\n    end\n    #Indexes of cars that have passed each other\n    pass_count\
    \ = fill(0,n)\n    #Run a loop to check if cars have passed each other\n    for\
    \ i in 1:n\n        for j in 1:n\n            if one_list[i] < two_list[j]\n \
    \               pass_count[i] = 1\n            end\n        end\n    end\n   \
    \ #Total number of cars that have passed each other\n    count = 0\n    for i\
    \ in 1:n\n        if pass_count[i] == 1\n            count += 1\n        end\n\
    \    end\n    #Return the result of the number of cars that have passed each other\n\
    \    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvjzk17sp.jl:52\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvjzk17sp.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvjzk17sp.jl:51\ntest set: Test\
    \ Failed at /tmp/tmpvjzk17sp.jl:53\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvjzk17sp.jl:53 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvjzk17sp.jl:51\ntest set: Test\
    \ Failed at /tmp/tmpvjzk17sp.jl:54\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 4 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvjzk17sp.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvjzk17sp.jl:51\ntest set: Test\
    \ Failed at /tmp/tmpvjzk17sp.jl:55\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 8 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvjzk17sp.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvjzk17sp.jl:51\ntest set: Test\
    \ Failed at /tmp/tmpvjzk17sp.jl:56\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 10 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvjzk17sp.jl:56 [inline"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvjzk17sp.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    left_to_right = zeros(Int64,\
    \ n)\n    right_to_left = zeros(Int64, n)\n    for i in 1:n\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n-i+1\n    end\n    return length(intersect(left_to_right,\
    \ right_to_left))\nend\n\"\"\"\n    Imagine you are in a subway car, and you are\
    \ looking out the window of the car\n    in a direction perpendicular to the car\
    \ (i.e. perpendicular to the direction of\n    motion of the car).   You see some\
    \ people and some cars.  In the time that it takes you\n    to count the people\
    \ and cars you see outside the window, all of the people and cars\n    outside\
    \ the window that you counted have gotten out of the way.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp56xana4m.jl:21\nin expression starting at\
    \ /tmp/tmp56xana4m.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \n    # CARS_A and CARS_B\
    \ are the two sets of cars.\n    # They are represented as 1D arrays of float64.\n\
    \    # First n elements correspond to n cars moving left to right\n    # Last\
    \ n elements correspond to n cars moving right to left.\n    # The distance of\
    \ a car from the origin is the value of the\n    # array element (e.g. CARS_A[i]\
    \ is the distance of the i-th car).\n    # The indices of the first n cars in\
    \ the array are 0, 1, 2, .., n-1\n    # The indices of the last n cars in the\
    \ array are n, n+1, n+2, .., 2n-1\n    CARS_A = zeros(2n)\n    CARS_B = zeros(2n)\n\
    \    \n    # CARS_A and CARS_B are passed as the arguments of the sorting function\n\
    \    # and will be sorted according to distances from the origin.\n    # So, CARS_A[0]\
    \ is the distance from the origin of the car that's closest to the origin\n  \
    \  # CARS_A[n-1] is the distance from the origin of the car that's furthest from\
    \ the origin\n    # CARS_A[n] is the distance from the origin of the car that's\
    \ second-closest to the origin\n    # CARS_A[2n-1] is the distance from the origin\
    \ of the car that's second-furthest from the origin\n    #\n    # As a result,\
    \ when CARS_A and CARS_B are sorted,\n    # the cars that are moving in the same\
    \ direction are adjacent to each other in CARS_A and CARS_B\n    # The cars that\
    \ are moving in the opposite direction are separated by n elements in CARS_A and\
    \ CARS_B\n    # This can be used to quickly compute the number of collisions between\
    \ the cars\n    sort!(CARS_A)\n    sort!(CARS_B)\n    \n    # The number of collisions\
    \ between the cars\n    num_collisions = 0\n    \n    # The index of the first\
    \ car in CARS_A and CARS_B\n    first_car_index = 0\n    \n    # We loop\nusing\
    \ Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpparbiahs.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpparbiahs.jl:1\n\
    in expression starting at /tmp/tmpparbiahs.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    return Int64(ceil(n*(n-1)/2.0))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbv_c9ucm.jl:20\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbv_c9ucm.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbv_c9ucm.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpbv_c9ucm.jl:21\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbv_c9ucm.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbv_c9ucm.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpbv_c9ucm.jl:22\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbv_c9ucm.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbv_c9ucm.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpbv_c9ucm.jl:23\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbv_c9ucm.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbv_c9ucm.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpbv_c9ucm.jl:24\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbv_c9ucm.jl:24 [inlin"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbv_c9ucm.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    What's the\
    \ time complexity of your algorithm?\n    \"\"\"\n    # your code goes here\n\
    end\ncar_race_collision(n) = 2n(n-1)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpz0o5eb8h.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type String to an object of type Int64\\n  Closest candidates are:\\\
    n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\\\
    n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpz0o5eb8h.jl:13\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpz0o5eb8h.jl:24 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpz0o5eb8h.jl:23\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    The number\
    \ of cars cannot be negative.\n    \"\"\"\n    if n < 0\n        throw(ArgumentError(\"\
    The number of cars cannot be negative\"))\n    end\n    \n    # reindex cars so\
    \ that we have cars 1 to n instead of 0 to n-1\n    # (the cars start on the negative\
    \ x-axis and drive left to right; the \n    # second set of cars start on the\
    \ positive x-axis and drive right to left)\n    # the negative cars move an equal\
    \ distance from each other\n    # the positive cars move an equal distance from\
    \ each other\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxw4a6r0z.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxw4a6r0z.jl:1\n\
    in expression starting at /tmp/tmpxw4a6r0z.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # Your code here\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpt2d8ezvt.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt2d8ezvt.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt2d8ezvt.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpt2d8ezvt.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt2d8ezvt.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt2d8ezvt.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpt2d8ezvt.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt2d8ezvt.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt2d8ezvt.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpt2d8ezvt.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt2d8ezvt.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt2d8ezvt.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpt2d8ezvt.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt2d8ezvt.jl:25 [inlined"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt2d8ezvt.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # pre: n is non-negative\n\
    \    # post: return the number of car races such that a car moving left to right\n\
    \    # hits a car moving right to left\n    return n*(n-1)//2\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp037mttn1.jl:23\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp037mttn1.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp037mttn1.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp037mttn1.jl:24\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp037mttn1.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp037mttn1.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp037mttn1.jl:25\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp037mttn1.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp037mttn1.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp037mttn1.jl:26\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp037mttn1.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp037mttn1.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp037mttn1.jl:27\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp037mttn1.jl:27 [inlin"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp037mttn1.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # your code here\n  \
    \  return sum(nums)\nend\n\"\"\"\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4u8m5zxb.jl:16\nin expression starting at\
    \ /tmp/tmp4u8m5zxb.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    Random.seed!(0); # To\
    \ avoid randomness and make each run the same\n    car_start = rand(-n^2:n^2,\
    \ n)\n    car_end = car_start + 10rand(n)\n    left_to_right = car_start .< car_end\n\
    \    right_to_left = .!left_to_right\n    function collision_count(car_start::Array{Int64,1},\
    \ \n                             car_end::Array{Int64,1}, \n                 \
    \            left_to_right::Array{Bool,1})::Int64\n        left_to_right_count\
    \ = count(left_to_right)\n        right_to_left_count = n - left_to_right_count\n\
    \        left_to_right_idx = find(left_to_right)\n        right_to_left_idx =\
    \ find(.!left_to_right)\n        cross_count = 0\n        for i in 1:left_to_right_count\n\
    \            cross_count += count(car_start[left_to_right_idx[i]] .< car_end[right_to_left_idx])\n\
    \        end\n        cross_count\n    end\n    return collision_count(car_start,\
    \ car_end, left_to_right)\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpo47ivm8f.jl:38\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  UndefVarError: Random not defined\\\
    n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpo47ivm8f.jl:13\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpo47ivm8f.jl:38 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpo47ivm8f.jl:37\\ntest set:\
    \ Error During Test at /tmp/tmpo47ivm8f.jl:39\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  UndefVarError: Random not defined\\n  Stacktrace:\\n \
    \  [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpo47ivm8f.jl:13\\n  \
    \ [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpo47ivm8f.jl:39 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpo47ivm8f.jl:37\\ntest set:\
    \ Error During Test at /tmp/tmpo47ivm8f.jl:40\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  UndefVarError: Random not defined\\n  Stacktrace:\\n\
    \   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpo47ivm8f.jl:13\\n \
    \  [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpo47ivm8f.jl:40 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpo47ivm8f.jl:37\\ntest set:\
    \ Error During Test at /tmp/tmpo47ivm8f.jl:41\\n  Test threw exception\\n  Expression:\
    \ candidate(8) == 64\\n  UndefVarError: Random not defined\\n  Stacktrace:\\n\
    \   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpo47ivm8f.jl:13\\n \
    \  [2] macro expansion\\n     @ /shared/cent"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    return Int64(n*(n-1)/2)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxh6s8uei.jl:20\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxh6s8uei.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxh6s8uei.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpxh6s8uei.jl:21\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxh6s8uei.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxh6s8uei.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpxh6s8uei.jl:22\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxh6s8uei.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxh6s8uei.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpxh6s8uei.jl:23\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxh6s8uei.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxh6s8uei.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpxh6s8uei.jl:24\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxh6s8uei.jl:24 [inlin"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxh6s8uei.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    left_car_positions =\
    \ [i for i in 1:n]\n    right_car_positions = [n - i + 1 for i in 1:n]\n    collision_counter\
    \ = 0\n    while n > 0\n        if left_car_positions[n] == right_car_positions[n]\n\
    \            collision_counter += 1\n        end\n        left_car_positions[n]\
    \ += 1\n        right_car_positions[n] -= 1\n        n -= 1\n    end\n    return\
    \ collision_counter\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi71g2ofc.jl:31\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi71g2ofc.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi71g2ofc.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpi71g2ofc.jl:32\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 1 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi71g2ofc.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi71g2ofc.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpi71g2ofc.jl:33\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi71g2ofc.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi71g2ofc.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpi71g2ofc.jl:34\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi71g2ofc.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi71g2ofc.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpi71g2ofc.jl:35\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi71g2ofc.jl:35 [inlined"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi71g2ofc.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    n is the\
    \ number of cars in each direction (left to right and right to left).\n    \"\"\
    \"\n    # num_collisions = 0\n    # insert code here.\n    return 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkgov7_2f.jl:25\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkgov7_2f.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkgov7_2f.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpkgov7_2f.jl:26\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkgov7_2f.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkgov7_2f.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpkgov7_2f.jl:27\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkgov7_2f.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkgov7_2f.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpkgov7_2f.jl:28\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkgov7_2f.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkgov7_2f.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpkgov7_2f.jl:29\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkgov7_2f.jl:29 [inlined"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkgov7_2f.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    if n <= 0\n        return\
    \ 0\n    end\n    return n - 1\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6h_5x_6e.jl:23\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6h_5x_6e.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6h_5x_6e.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp6h_5x_6e.jl:24\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 2 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6h_5x_6e.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6h_5x_6e.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp6h_5x_6e.jl:25\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 3 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6h_5x_6e.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6h_5x_6e.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp6h_5x_6e.jl:26\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 7 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6h_5x_6e.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6h_5x_6e.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp6h_5x_6e.jl:27\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 9 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6h_5x_6e.jl:27 [inlined"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6h_5x_6e.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    return (n^2 - n) / 2\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcidi9yro.jl:20\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcidi9yro.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcidi9yro.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpcidi9yro.jl:21\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcidi9yro.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcidi9yro.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpcidi9yro.jl:22\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcidi9yro.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcidi9yro.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpcidi9yro.jl:23\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcidi9yro.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcidi9yro.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpcidi9yro.jl:24\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcidi9yro.jl:24 [inlin"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcidi9yro.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    ncollisions = 0\n   \
    \ for i = 1:n \n        for j = i:n\n            ncollisions += 1\n        end\n\
    \    end\n    return ncollisions\nend\n\"\"\"\n    This function outputs a random\
    \ word of length n,\n    where each character is a random lowercase letter.\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmps8t_a30a.jl:21\nin expression starting at /tmp/tmps8t_a30a.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # 0. Initialization:\n\
    \    car_coordinates = SortedSet(rand(1:n) for _ in 1:n)\n    collision_count\
    \ = 0\n    # 1. Iterate through all cars to find the total number of collisions.\n\
    \    while !isempty(car_coordinates) \n        # 1.1 Get the current car coordinate\
    \ and delete it.\n        current_car_coordinate = pop!(car_coordinates)\n   \
    \     # 1.2 Record a collision if there's a car with an opposite sign.\n     \
    \   if current_car_coordinate in car_coordinates\n            collision_count\
    \ += 1\n        end\n    end\n    # 2. Output the total number of collisions.\n\
    \    return collision_count\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmptpb95s2m.jl:33\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  UndefVarError: SortedSet not\
    \ defined\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main\
    \ /tmp/tmptpb95s2m.jl:14\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmptpb95s2m.jl:33 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmptpb95s2m.jl:32\\ntest set:\
    \ Error During Test at /tmp/tmptpb95s2m.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  UndefVarError: SortedSet not defined\\n  Stacktrace:\\\
    n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmptpb95s2m.jl:14\\n \
    \  [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmptpb95s2m.jl:34 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmptpb95s2m.jl:32\\ntest set:\
    \ Error During Test at /tmp/tmptpb95s2m.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  UndefVarError: SortedSet not defined\\n  Stacktrace:\\\
    n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmptpb95s2m.jl:14\\n \
    \  [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmptpb95s2m.jl:35 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmptpb95s2m.jl:32\\ntest set:\
    \ Error During Test at /tmp/tmptpb95s2m.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(8) == 64\\n  UndefVarError: SortedSet not defined\\n  Stacktrace:\\\
    n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmptpb95s2m.jl:14\\n \
    \  [2] macro expansion\\n     @ "
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \n    # L, R are two\
    \ arrays.  L[i] contains the location of the ith car on the left-to-right side.\n\
    \    # R[i] contains the location of the ith car on the right-to-left side.\n\
    \    # We want to count the number of collisions between a car on the left-to-right\
    \ side and \n    # a car on the right-to-left side.\n    L = rand(n)\n    R =\
    \ rand(n)\n    \n    # here you go!\n    count = 0\n    i = 1\n    j = 1\n   \
    \ while i <= n && j <= n\n        if L[i] > R[j]\n            j += 1\n       \
    \ elseif L[i] < R[j]\n            i += 1\n        else\n            count += 1\n\
    \            i += 1\n            j += 1\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbp7bhsdj.jl:43\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbp7bhsdj.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbp7bhsdj.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpbp7bhsdj.jl:44\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbp7bhsdj.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbp7bhsdj.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpbp7bhsdj.jl:45\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbp7bhsdj.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbp7bhsdj.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpbp7bhsdj.jl:46\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbp7bhsdj.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbp7bhsdj.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpbp7bhsdj.jl:47\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbp7bhsdj.jl:47 [inlined"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbp7bhsdj.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    return n - 1\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp13qayp4x.jl:20\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp13qayp4x.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp13qayp4x.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp13qayp4x.jl:21\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 2 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp13qayp4x.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp13qayp4x.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp13qayp4x.jl:22\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 3 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp13qayp4x.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp13qayp4x.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp13qayp4x.jl:23\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 7 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp13qayp4x.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp13qayp4x.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp13qayp4x.jl:24\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 9 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp13qayp4x.jl:24 [inlined"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp13qayp4x.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    return 0 \nend\n# This\
    \ cell is just for testing your code.  It will not be graded.\n# You can see the\
    \ expected output when you press the left-hand side of the following cell.\n#\
    \ You can change the code inside the cell, and then press the left-hand side of\
    \ the cell again\n# to re-evaluate it.\n#\n# If the assertions in this cell are\
    \ failing, you've either made a mistake, or\n# the code isn't written in a way\
    \ that the test can pass.\n#\n# In the latter case, try to make a clever solution\
    \ that takes advantage of\n# the fact that the cars can't crash into each other.\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcsyfq4og.jl:30\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcsyfq4og.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcsyfq4og.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpcsyfq4og.jl:31\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcsyfq4og.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcsyfq4og.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpcsyfq4og.jl:32\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcsyfq4og.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcsyfq4og.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpcsyfq4og.jl:33\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcsyfq4og.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcsyfq4og.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpcsyfq4og.jl:34\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcsyfq4og.jl:34 [inlined"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcsyfq4og.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n   return 1\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpurf40huk.jl:20\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpurf40huk.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpurf40huk.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpurf40huk.jl:21\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 1 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpurf40huk.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpurf40huk.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpurf40huk.jl:22\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 1 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpurf40huk.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpurf40huk.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpurf40huk.jl:23\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 1 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpurf40huk.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpurf40huk.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpurf40huk.jl:24\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 1 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpurf40huk.jl:24 [inlined"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpurf40huk.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    n = number\
    \ of cars that are moving in each direction\n    \"\"\"\n    collisions = 0\n\
    \    global cars_left = [0:n-1]\n    global cars_right = [n:2n-1]\n    for i in\
    \ 0:n-1\n        for j in 0:n-1\n            if cars_left[i] == cars_right[j]\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n \nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpkzpo8229.jl:34\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  BoundsError: attempt to access\
    \ 1-element Vector{UnitRange{Int64}} at index [0]\\n  Stacktrace:\\n   [1] getindex(A::Vector{UnitRange{Int64}},\
    \ i1::Int64)\\n     @ Base ./array.jl:861\\n   [2] car_race_collision(n::Int64)\\\
    n     @ Main /tmp/tmpkzpo8229.jl:21\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpkzpo8229.jl:34 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpkzpo8229.jl:33\\ntest set:\
    \ Error During Test at /tmp/tmpkzpo8229.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  BoundsError: attempt to access 1-element Vector{UnitRange{Int64}}\
    \ at index [0]\\n  Stacktrace:\\n   [1] getindex(A::Vector{UnitRange{Int64}},\
    \ i1::Int64)\\n     @ Base ./array.jl:861\\n   [2] car_race_collision(n::Int64)\\\
    n     @ Main /tmp/tmpkzpo8229.jl:21\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpkzpo8229.jl:35 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpkzpo8229.jl:33\\ntest set:\
    \ Error During Test at /tmp/tmpkzpo8229.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  BoundsError: attempt to access 1-element Vector{UnitRange{Int64}}\
    \ at index [0]\\n  Stacktrace:\\n   [1] getindex(A::Vector{UnitRange{Int64}},\
    \ i1::Int64)\\n     @ Base ./array.jl:861\\n   [2] car_race_collision(n::Int64)\\\
    n     @ Main /tmp/tmpkzpo8229.jl:21\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpkzpo8229.jl:36 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/sha"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # This implementation\
    \ is not meant to be efficient.\n    # It's very straightforward in order to make\
    \ sure\n    # the concept is clear.\n    # Feel free to use this as a starting\
    \ point.\n    @assert n >= 0\n    # Fill this in.\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpunletyuc.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\\\
    n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpunletyuc.jl:17\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpunletyuc.jl:25 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpunletyuc.jl:24\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    if n == 0 return 0\n\
    \    if n == 1 return 0\n    sum( [ i for i=1:n-1] )\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvkb5n374.jl:1\nin expression starting at /tmp/tmpvkb5n374.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    n*(n-1)/2\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa_463rla.jl:20\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa_463rla.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa_463rla.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpa_463rla.jl:21\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa_463rla.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa_463rla.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpa_463rla.jl:22\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa_463rla.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa_463rla.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpa_463rla.jl:23\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa_463rla.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa_463rla.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpa_463rla.jl:24\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa_463rla.jl:24 [inlin"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa_463rla.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Approach:\n\
    \    ----------\n    1.  Imagine the n cars driving left to right as numbered\
    \ from 1 to n.\n    2.  Imagine the n cars driving right to left as numbered from\
    \ 1 to n.\n    3.  A car numbered i driving left to right will collide with a\
    \ car numbered i\n        driving right to left.\n    4.  Create an array of the\
    \ numbers from 1 to n.\n    5.  Create a second array that's the same as the first\
    \ one, only with elements in reversed order.\n    6.  Now, these two arrays represent\
    \ the two sets of cars, each carrying the numbers of their corresponding\n   \
    \     collision partners.\n    7.  Each time we move one car one step forward,\
    \ we may have caused one collision. \n    8.  In total, the number of collisions\
    \ equals the number of times we move a car one step forward.\n    9.  That's exactly\
    \ the length of the longest common subsequence of the two arrays.\n    \"\"\"\n\
    \    x = 1:n\n    y = n:-1:1\n    return length(lcs(x, y))\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpwmc0155v.jl:37\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  UndefVarError: lcs not defined\\\
    n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpwmc0155v.jl:30\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpwmc0155v.jl:37 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpwmc0155v.jl:36\\ntest set:\
    \ Error During Test at /tmp/tmpwmc0155v.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  UndefVarError: lcs not defined\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmpwmc0155v.jl:30\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpwmc0155v.jl:38 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpwmc0155v.jl:36\\ntest set:\
    \ Error During Test at /tmp/tmpwmc0155v.jl:39\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  UndefVarError: lcs not defined\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmpwmc0155v.jl:30\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpwmc0155v.jl:39 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpwmc0155v.jl:36\\ntest set:\
    \ Error During Test at /tmp/tmpwmc0155v.jl:40\\n  Test threw exception\\n  Expression:\
    \ candidate(8) == 64\\n  UndefVarError: lcs not defined\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmpwmc0155v.jl:30\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1."
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    if n==0\n        return\
    \ 0\n    end\n    nleft=randperm(n)\n    nright=randperm(n)\n    left=sort(nleft)\n\
    \    right=sort(nright)\n    i=1\n    j=1\n    collisions=0\n    while i<=n &&\
    \ j<=n\n        if left[i]<right[j]\n            i+=1\n        elseif left[i]>right[j]\n\
    \            j+=1\n        else\n            collisions+=1\n            i+=1\n\
    \            j+=1\n        end\n    end\n    return collisions\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpvxrtebsi.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  UndefVarError: randperm not\
    \ defined\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main\
    \ /tmp/tmpvxrtebsi.jl:16\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpvxrtebsi.jl:41 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpvxrtebsi.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpvxrtebsi.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  UndefVarError: randperm not defined\\n  Stacktrace:\\\
    n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpvxrtebsi.jl:16\\n \
    \  [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpvxrtebsi.jl:42 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpvxrtebsi.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpvxrtebsi.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  UndefVarError: randperm not defined\\n  Stacktrace:\\\
    n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpvxrtebsi.jl:16\\n \
    \  [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpvxrtebsi.jl:43 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpvxrtebsi.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpvxrtebsi.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(8) == 64\\n  UndefVarError: randperm not defined\\n  Stacktrace:\\\
    n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpvxrtebsi.jl:16\\n \
    \  [2] macro expansion\\n     @ /sha"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    When the\
    \ n cars are driving left to right, their start position is 1, 2, 3, ..., n.\n\
    \    When the n cars are driving right to left, their start position is n, n-1,\
    \ n-2, ..., 1.\n    \"\"\"\n    start_positions_right_to_left = n:-1:1\n    start_positions_left_to_right\
    \ = 1:n\n    \"\"\"\n    The cars are infinitely strong; therefore, the start\
    \ time of each car is 0.\n    \"\"\"\n    start_times_right_to_left = zeros(n)\n\
    \    start_times_left_to_right = zeros(n)\n    \"\"\"\n    For each car moving\
    \ left to right, the total travel distance is 2n - 1.\n    For each car moving\
    \ right to left, the total travel distance is 2n - 1.\n    So the total travel\
    \ time is (2n - 1) / 1.\n    \"\"\"\n    travel_time = (2n - 1) / 1.0\n    \"\"\
    \"\n    Each car moving left to right has its trajectory (2n - 1 - x, t), where\
    \ x is the start position\n    and t is the time.  Each car moving right to left\
    \ has its trajectory (x, t), where x is the start position\n    and t is the time.\
    \  So the first coordinate of the trajectory for each car is its start position.\n\
    \    \"\"\"\n    trajectories_right_to_left = [start_positions_right_to_left,\
    \ start_times_right_to_left]\n    trajectories_left_to_right = [start_positions_left_to_right,\
    \ start_times_left_to_right]\n    \"\"\"\n    When cars collide, the first coordinate\
    \ of the trajectory for each car is the same.\n    So we determine the number\
    \ of collisions by finding the number of points of intersections\n    between\
    \ the two sets of trajectories.\n    \"\"\"\n    return num_intersections(trajectories_right_to_left,\
    \ trajectories_left_to_right)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpvq_8apnl.jl:49\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  UndefVarError: num_intersections\
    \ not defined\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main\
    \ /tmp/tmpvq_8apnl.jl:42\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpvq_8apnl.jl:49 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpvq_8apnl.jl:48\\ntest set:\
    \ Error During Test at /tmp/tmpvq_8apnl.jl:50\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  UndefVarError: num_intersections not defined\\n  Stacktrace:\\\
    n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpvq_8apnl.jl:42\\n \
    \  [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpvq_8apnl.jl:50 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpvq_8apnl.jl:48\\ntest set:\
    \ Error During Test at /tmp/tmpvq_8apnl.jl:51\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  UndefVarError: num_intersections not defined\\n  Stacktrace:\\\
    n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpvq_8apnl.jl:42\\n \
    \  [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpvq_8apnl.jl:51 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpvq_8apnl.jl:48\\ntest set:\
    \ Error During Test at /tmp/tmpvq_8apnl.jl:52\\n  Test threw exception\\n  Expression:\
    \ candidate(8) == 64\\n  UndefVarError: num_intersections not defined\\n  Stacktrace:\\\
    n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpvq_8apnl.jl:42\\"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Imagine a\
    \ road that's a perfectly straight infinitely long line.\n    n cars are driving\
    \ left to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\nusing Test\n\n\
    @testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_awko_00.jl:1\nin expression starting at /tmp/tmp_awko_00.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    if n == 0 return 0 end\n\
    \    cars_left = rand(1:n, n)\n    cars_right = rand(1:n, n)\n    collisions =\
    \ 0\n    for i in cars_left\n        for j in cars_right\n            if i ==\
    \ j\n                collisions += 1\n            end\n        end\n    end\n\
    \    return collisions\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6djwmzg5.jl:31\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6djwmzg5.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6djwmzg5.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp6djwmzg5.jl:32\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 4 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6djwmzg5.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6djwmzg5.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp6djwmzg5.jl:33\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 4 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6djwmzg5.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6djwmzg5.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp6djwmzg5.jl:34\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 9 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6djwmzg5.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6djwmzg5.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp6djwmzg5.jl:35\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 13 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6djwmzg5.jl:35 [inline"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6djwmzg5.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    return car_race_collision_helper(n)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpca7u9j6d.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  UndefVarError: car_race_collision_helper\
    \ not defined\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main\
    \ /tmp/tmpca7u9j6d.jl:13\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpca7u9j6d.jl:20 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpca7u9j6d.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpca7u9j6d.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  UndefVarError: car_race_collision_helper not defined\\\
    n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpca7u9j6d.jl:13\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpca7u9j6d.jl:21 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpca7u9j6d.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpca7u9j6d.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  UndefVarError: car_race_collision_helper not defined\\\
    n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpca7u9j6d.jl:13\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpca7u9j6d.jl:22 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpca7u9j6d.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpca7u9j6d.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(8) == 64\\n  UndefVarError: car_race_collision_helper not defined\\\
    n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n   "
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    C = 0\n    for i in\
    \ 1:n\n        for j in 1:n\n            if i - j > 0\n                C += 1\n\
    \            end\n        end\n    end\n    return C\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpf3al_cgp.jl:31\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf3al_cgp.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf3al_cgp.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpf3al_cgp.jl:32\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf3al_cgp.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf3al_cgp.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpf3al_cgp.jl:33\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf3al_cgp.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf3al_cgp.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpf3al_cgp.jl:34\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf3al_cgp.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf3al_cgp.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpf3al_cgp.jl:35\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf3al_cgp.jl:35 [inlin"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf3al_cgp.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpyne19fpa.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    for i in 1:n\n      \
    \  for j in 1:n\n            println(\"Car \", i, \" hits car \", j)\n       \
    \ end\n    end\n    return n*n\nend\n@benchmark car_race_collision(5)\nusing Test\n\
    \n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @benchmark not defined\nin expression\
    \ starting at /tmp/tmpzucezv91.jl:20\nin expression starting at /tmp/tmpzucezv91.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    num_collisions = 0\n\
    \    for i = 1:n\n        for j = 1:n\n            if (i + j) % 2 == 0\n     \
    \           num_collisions += 1\n            end\n        end\n    end\n    return\
    \ num_collisions\nend\n        \n@show car_race_collision(0)\n@show car_race_collision(1)\n\
    @show car_race_collision(2)\n@show car_race_collision(3)\n@show car_race_collision(4)\n\
    @show car_race_collision(5)\n@show car_race_collision(6)\n@show car_race_collision(7)\n\
    @show car_race_collision(8)\n@show car_race_collision(9)\n@show car_race_collision(10)\n\
    @show car_race_collision(11)\n@show car_race_collision(12)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "car_race_collision(0) = 0\ncar_race_collision(1) = 1\ncar_race_collision(2)\
    \ = 2\ncar_race_collision(3) = 5\ncar_race_collision(4) = 8\ncar_race_collision(5)\
    \ = 13\ncar_race_collision(6) = 18\ncar_race_collision(7) = 25\ncar_race_collision(8)\
    \ = 32\ncar_race_collision(9) = 41\ncar_race_collision(10) = 50\ncar_race_collision(11)\
    \ = 61\ncar_race_collision(12) = 72\ntest set: Test Failed at /tmp/tmp2n_067j1.jl:42\n\
    \  Expression: candidate(2) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2n_067j1.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2n_067j1.jl:41\ntest set: Test\
    \ Failed at /tmp/tmp2n_067j1.jl:43\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 5 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2n_067j1.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2n_067j1.jl:41\ntest set: Test\
    \ Failed at /tmp/tmp2n_067j1.jl:44\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 8 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2n_067j1.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2n_067j1.jl:41\ntest set: Test\
    \ Failed at /tmp/tmp2n_067j1.jl:45\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 32 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2n_067j1.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.j"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2n_067j1.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    n: number\
    \ of cars driving in each direction.\n    \"\"\"\n    counts_per_pair = count_pairs(n)\n\
    \    return dot(counts_per_pair, counts_per_pair)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpqmvvd2o8.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  UndefVarError: count_pairs not\
    \ defined\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main\
    \ /tmp/tmpqmvvd2o8.jl:16\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpqmvvd2o8.jl:24 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpqmvvd2o8.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpqmvvd2o8.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  UndefVarError: count_pairs not defined\\n  Stacktrace:\\\
    n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpqmvvd2o8.jl:16\\n \
    \  [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpqmvvd2o8.jl:25 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpqmvvd2o8.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpqmvvd2o8.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  UndefVarError: count_pairs not defined\\n  Stacktrace:\\\
    n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpqmvvd2o8.jl:16\\n \
    \  [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpqmvvd2o8.jl:26 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpqmvvd2o8.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpqmvvd2o8.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(8) == 64\\n  UndefVarError: count_pairs not defined\\n  Stacktrace:\\\
    n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpqmvvd2o8.jl:16\\n \
    \  [2] macro expansion\\"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    if n == 0 || n == 1\n\
    \        return 0\n    end\n    return n * (n - 1) / 2\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvtvmqitq.jl:23\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvtvmqitq.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvtvmqitq.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpvtvmqitq.jl:24\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvtvmqitq.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvtvmqitq.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpvtvmqitq.jl:25\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvtvmqitq.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvtvmqitq.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpvtvmqitq.jl:26\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvtvmqitq.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvtvmqitq.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpvtvmqitq.jl:27\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvtvmqitq.jl:27 [inlin"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvtvmqitq.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # the left-to-right cars\
    \ start at -1, -2, ... , -n, while the\n    # right-to-left cars start at 1, 2,\
    \ ... , n\n    ltrcars = -collect(1:n)\n    rtlcars = collect(1:n)\n    collisions\
    \ = 0\n    # we will perform a maximum of (2n - 1) steps of the algorithm\n  \
    \  for i = 1:2n-1\n        # a collision happens if a left-to-right car and a\
    \ right-to-left car\n        # have the same position\n        for car in ltrcars\n\
    \            if car in rtlcars\n                collisions += 1\n            end\n\
    \        end\n        # now we move all cars in their direction\n        ltrcars\
    \ = map(car -> car - 1, ltrcars)\n        rtlcars = map(car -> car + 1, rtlcars)\n\
    \    end\n    return collisions\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpplordmad.jl:38\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpplordmad.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpplordmad.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpplordmad.jl:39\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpplordmad.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpplordmad.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpplordmad.jl:40\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpplordmad.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpplordmad.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpplordmad.jl:41\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpplordmad.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpplordmad.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpplordmad.jl:42\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpplordmad.jl:42 [inlined"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpplordmad.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Imagine a\
    \ road that's a perfectly straight infinitely long line.\n    n cars are driving\
    \ left to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\nusing Test\n\n\
    @testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0_zdjdxo.jl:1\nin expression starting at /tmp/tmp0_zdjdxo.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    if n == 0 \n        return\
    \ 0\n    end\n    n - 1\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxojz3gog.jl:23\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxojz3gog.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxojz3gog.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpxojz3gog.jl:24\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 2 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxojz3gog.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxojz3gog.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpxojz3gog.jl:25\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 3 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxojz3gog.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxojz3gog.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpxojz3gog.jl:26\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 7 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxojz3gog.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxojz3gog.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpxojz3gog.jl:27\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 9 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxojz3gog.jl:27 [inlined"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxojz3gog.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    return Int64(n * (n -\
    \ 1))/2\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_c31mbu7.jl:20\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_c31mbu7.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_c31mbu7.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp_c31mbu7.jl:21\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_c31mbu7.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_c31mbu7.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp_c31mbu7.jl:22\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_c31mbu7.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_c31mbu7.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp_c31mbu7.jl:23\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_c31mbu7.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_c31mbu7.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp_c31mbu7.jl:24\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_c31mbu7.jl:24 [inlin"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_c31mbu7.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    ####\n    #### YOUR CODE\
    \ HERE\n    ####\n    \nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpr9ksabej.jl:23\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\\\
    n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpr9ksabej.jl:17\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpr9ksabej.jl:23 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpr9ksabej.jl:22\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    This function\
    \ assumes that the indices of the cars are \n    from 1 to n.  This function outputs\
    \ a tuple of two arrays,\n    car_loc_l_to_r, and car_loc_r_to_l, where car_loc_l_to_r[i]\
    \ is\n    the location of the ith car driving left to right at the time of\n \
    \   the collision, and  car_loc_r_to_l[i] is the location of the ith\n    car\
    \ driving right to left at the time of the collision.\n    \"\"\"\n    function\
    \ car_race_collision_w_locations(n::Int64)::Tuple{Array{Int64,1},Array{Int64,1}}\
    \ \n \n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    if n == 0 return 0 end\n\
    \    if n == 1 return 0 end\n    return n - 1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqhzftxhb.jl:22\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqhzftxhb.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqhzftxhb.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpqhzftxhb.jl:23\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 2 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqhzftxhb.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqhzftxhb.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpqhzftxhb.jl:24\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 3 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqhzftxhb.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqhzftxhb.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpqhzftxhb.jl:25\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 7 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqhzftxhb.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqhzftxhb.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpqhzftxhb.jl:26\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 9 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqhzftxhb.jl:26 [inlined"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqhzftxhb.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    left_to_right = [rand(0:1e8:1e9)\
    \ for i in 1:n]\n    right_to_left = [rand(0:1e8:1e9) for i in 1:n]\n    num_collisions\
    \ = 0\n    for (i, x) in enumerate(left_to_right)\n        for (j, y) in enumerate(right_to_left)\n\
    \            if x >= y\n                num_collisions += 1\n            end\n\
    \        end\n    end\n    return num_collisions\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl4l88bks.jl:31\n  Expression: candidate(3)\
    \ == 9\n   Evaluated: 5 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl4l88bks.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl4l88bks.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpl4l88bks.jl:32\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 12 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl4l88bks.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl4l88bks.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpl4l88bks.jl:33\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 34 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl4l88bks.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl4l88bks.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpl4l88bks.jl:34\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 38 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl4l88bks.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl4l88bks.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl4l88bks.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    return 0 # this is not\
    \ quite right :) \nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb_bpd2ol.jl:20\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb_bpd2ol.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb_bpd2ol.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpb_bpd2ol.jl:21\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb_bpd2ol.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb_bpd2ol.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpb_bpd2ol.jl:22\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb_bpd2ol.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb_bpd2ol.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpb_bpd2ol.jl:23\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb_bpd2ol.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb_bpd2ol.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpb_bpd2ol.jl:24\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb_bpd2ol.jl:24 [inlined"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb_bpd2ol.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    if n == 0 \n        return\
    \ 0\n    end\n    if n == 1\n        return 0\n    end\n    # O(n\xB2) algorithm\n\
    \    # for i = 1:n\n    #     for j = 1:n\n    #         if i + j == n + 1\n \
    \   #             num_collisions += 1\n    #         end\n    #     end\n    #\
    \ end\n    # return num_collisions\n    # O(n) algorithm\n    return (n-1)*n /\
    \ 2\nend\n    \nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3igxbvw5.jl:37\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3igxbvw5.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3igxbvw5.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp3igxbvw5.jl:38\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3igxbvw5.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3igxbvw5.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp3igxbvw5.jl:39\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3igxbvw5.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3igxbvw5.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp3igxbvw5.jl:40\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3igxbvw5.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3igxbvw5.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp3igxbvw5.jl:41\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3igxbvw5.jl:41 [inlin"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3igxbvw5.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # Your code goes here.\n\
    end\n \n\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t\
    @test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfbar1wb_.jl:16\nin expression starting at\
    \ /tmp/tmpfbar1wb_.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    num_collisions = 0\n\
    \    while n > 0 \n        num_collisions += n\n        n -= 1\n    end\n    return\
    \ num_collisions\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprn8_kz01.jl:25\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 3 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprn8_kz01.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprn8_kz01.jl:24\ntest set: Test\
    \ Failed at /tmp/tmprn8_kz01.jl:26\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 6 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprn8_kz01.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprn8_kz01.jl:24\ntest set: Test\
    \ Failed at /tmp/tmprn8_kz01.jl:27\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 10 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprn8_kz01.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprn8_kz01.jl:24\ntest set: Test\
    \ Failed at /tmp/tmprn8_kz01.jl:28\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 36 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprn8_kz01.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprn8_kz01.jl:24\ntest set: Test\
    \ Failed at /tmp/tmprn8_kz01.jl:29\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 55 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprn8_kz01.jl:29 [inli"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprn8_kz01.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    n=n/2\n    cars_right_to_left=zeros(Int64,\
    \ n)\n    cars_left_to_right=zeros(Int64, n)\n    count=0\n    #print(n)\n   \
    \ for i in 1:n\n        cars_right_to_left[i]=i\n        cars_left_to_right[i]=n+i\n\
    \        #println(cars_right_to_left[i])\n        #println(cars_left_to_right[i])\n\
    \    end\n    #println(cars_right_to_left)\n    #println(cars_left_to_right)\n\
    \    for i in 1:n\n        for j in 1:n\n            if (cars_right_to_left[i]==cars_left_to_right[j])\n\
    \                count=count+1\n            end\n        end\n    end\n    return\
    \ count\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpqqndacp0.jl:40\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: no method matching\
    \ zeros(::Type{Int64}, ::Float64)\\n  Closest candidates are:\\n    zeros(::Type{T},\
    \ !Matched::Union{Integer, AbstractUnitRange}...) where T at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:521\\\
    n    zeros(::Type{T}, !Matched::Tuple{}) where T at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:529\\\
    n    zeros(::Type{T}, !Matched::Tuple{Vararg{Integer, N}}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:524\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpqqndacp0.jl:14\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpqqndacp0.jl:40 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpqqndacp0.jl:39\\ntest set:\
    \ Error During Test at /tmp/tmpqqndacp0.jl:41\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: no method matching zeros(::Type{Int64}, ::Float64)\\\
    n  Closest candidates are:\\n    zeros(::Type{T}, !Matched::Union{Integer, AbstractUnitRange}...)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:521\\n    zeros(::Type{T},\
    \ !Matched::Tuple{}) where T at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:529\\\
    n    zeros(::Type{T}, !Matched::Tuple{Vararg{Integer, N}}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:524\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpqqndacp0.jl:14\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpqqndacp0.jl:41 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    counts = 0\n    for i\
    \ = 1:n-1\n        for j = 1:n-1\n            if (i + j) == n\n              \
    \  counts += 1\n            end\n        end\n    end\n    return counts\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpoe3qejzb.jl:28\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoe3qejzb.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoe3qejzb.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpoe3qejzb.jl:29\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 2 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoe3qejzb.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoe3qejzb.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpoe3qejzb.jl:30\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 3 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoe3qejzb.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoe3qejzb.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpoe3qejzb.jl:31\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 7 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoe3qejzb.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoe3qejzb.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpoe3qejzb.jl:32\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 9 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoe3qejzb.jl:32 [inlined"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoe3qejzb.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    return n*(n-1)/2   #\
    \ calculate the sum of numbers from 1 to n-1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpeba6nigs.jl:20\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeba6nigs.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeba6nigs.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpeba6nigs.jl:21\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeba6nigs.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeba6nigs.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpeba6nigs.jl:22\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeba6nigs.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeba6nigs.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpeba6nigs.jl:23\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeba6nigs.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeba6nigs.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpeba6nigs.jl:24\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeba6nigs.jl:24 [inlin"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeba6nigs.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    left_to_right_cars =\
    \ [2i for i in 1:n]\n    right_to_left_cars = [2i-1 for i in 1:n]\n    collision_counter\
    \ = 0\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkymgkruv.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkymgkruv.jl:1\n\
    in expression starting at /tmp/tmpkymgkruv.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n  # ***** Put your implementation\
    \ here *****\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely\
    \ long line.\n    n cars are driving left to right;  simultaneously, a different\
    \ set of n cars\n    are driving right to left.   The two sets of cars start out\
    \ being very far from\n    each other.  All cars move in the same speed.  Two\
    \ cars are said to collide\n    when a car that's moving left to right hits a\
    \ car that's moving right to left.\n    However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    in their trajectory as if\
    \ they did not collide.\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0r9rbub9.jl:1\nin expression starting at /tmp/tmp0r9rbub9.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # n is the number of\
    \ cars driving from left to right and also the number of cars\n    # driving from\
    \ right to left\n    return Int64(n*(n-1)/2)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpg_vsfzkw.jl:22\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg_vsfzkw.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg_vsfzkw.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpg_vsfzkw.jl:23\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg_vsfzkw.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg_vsfzkw.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpg_vsfzkw.jl:24\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg_vsfzkw.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg_vsfzkw.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpg_vsfzkw.jl:25\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg_vsfzkw.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg_vsfzkw.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpg_vsfzkw.jl:26\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg_vsfzkw.jl:26 [inlin"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg_vsfzkw.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collision = 0\n    for\
    \ i = 1:n\n        for j = 1:n\n            if i == j \n                continue\n\
    \            end\n            if (i < j) && (j < n + 1 - i)\n                collision\
    \ += 1\n            end\n        end\n    end\n    return collision\nend\ncar_race_collision(1)\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppfsji1vm.jl:32\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppfsji1vm.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppfsji1vm.jl:31\ntest set: Test\
    \ Failed at /tmp/tmppfsji1vm.jl:33\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 1 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppfsji1vm.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppfsji1vm.jl:31\ntest set: Test\
    \ Failed at /tmp/tmppfsji1vm.jl:34\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 2 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppfsji1vm.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppfsji1vm.jl:31\ntest set: Test\
    \ Failed at /tmp/tmppfsji1vm.jl:35\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 12 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppfsji1vm.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppfsji1vm.jl:31\ntest set: Test\
    \ Failed at /tmp/tmppfsji1vm.jl:36\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 20 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppfsji1vm.jl:36 [inlin"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppfsji1vm.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Your code\
    \ here:  write the solution to the car race problem\n    \"\"\"\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp9h2dnjwp.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type String to an object of type Int64\\n  Closest candidates are:\\\
    n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\\\
    n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmp9h2dnjwp.jl:13\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp9h2dnjwp.jl:22 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp9h2dnjwp.jl:21\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    #\n    # TODO: write\
    \ this function.\n    #\n    # Hint: this problem is equivalent to counting the\
    \ number of\n    #       crossings of a certain set of lines.\n    #       See\
    \ the pedagogical notes for more details.\n    #\nusing Test\n\n@testset begin\n\
    \ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9pxeo40j.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9pxeo40j.jl:1\n\
    in expression starting at /tmp/tmp9pxeo40j.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # TODO: Write your code\
    \ here\nend\n\"\"\"\n    Given a list of integers, return True if all the integers\
    \ are the same.\n    Otherwise, return False.\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpb_uusvxg.jl:15\nin expression starting at /tmp/tmpb_uusvxg.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp0nebj_yx.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\\\
    n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmp0nebj_yx.jl:14\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp0nebj_yx.jl:20 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp0nebj_yx.jl:19\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    return n*(n-1)/2\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3o78izpc.jl:20\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3o78izpc.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3o78izpc.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp3o78izpc.jl:21\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3o78izpc.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3o78izpc.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp3o78izpc.jl:22\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3o78izpc.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3o78izpc.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp3o78izpc.jl:23\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3o78izpc.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3o78izpc.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp3o78izpc.jl:24\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3o78izpc.jl:24 [inlin"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3o78izpc.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    return n*(n-1)/2\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe9vjwoe3.jl:20\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe9vjwoe3.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe9vjwoe3.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpe9vjwoe3.jl:21\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe9vjwoe3.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe9vjwoe3.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpe9vjwoe3.jl:22\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe9vjwoe3.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe9vjwoe3.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpe9vjwoe3.jl:23\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe9vjwoe3.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe9vjwoe3.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpe9vjwoe3.jl:24\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe9vjwoe3.jl:24 [inlin"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe9vjwoe3.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    return n*(n-1)/2\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsr6izs0d.jl:20\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsr6izs0d.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsr6izs0d.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpsr6izs0d.jl:21\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsr6izs0d.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsr6izs0d.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpsr6izs0d.jl:22\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsr6izs0d.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsr6izs0d.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpsr6izs0d.jl:23\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsr6izs0d.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsr6izs0d.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpsr6izs0d.jl:24\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsr6izs0d.jl:24 [inlin"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsr6izs0d.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # TODO:  what is the\
    \ type of this function?\n    # TODO:  what's the body of this function?\n   \
    \ # HINT:  loop over all cars moving left to right,\n    # and check if any of\
    \ the cars moving right to left are at the same spot\n    # as the car moving\
    \ left to right.  If so, add 1 to the total number of \n    # collisions; otherwise,\
    \ don't.\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # TODO\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    return n\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp94zsc0yb.jl:20\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp94zsc0yb.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp94zsc0yb.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp94zsc0yb.jl:21\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp94zsc0yb.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp94zsc0yb.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp94zsc0yb.jl:22\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 4 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp94zsc0yb.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp94zsc0yb.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp94zsc0yb.jl:23\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 8 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp94zsc0yb.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp94zsc0yb.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp94zsc0yb.jl:24\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 10 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp94zsc0yb.jl:24 [inline"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp94zsc0yb.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    for i in 1:n\n      \
    \  for j in 1:n\n            if i<j\n                println(i,j)\n          \
    \  end\n        end\n    end\n    return 0\nend\ncar_race_collision(4)\nusing\
    \ Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "12\n13\n14\n23\n24\n34\n12\ntest set: Test Failed at /tmp/tmphgtiqmjd.jl:28\n\
    \  Expression: candidate(2) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphgtiqmjd.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphgtiqmjd.jl:27\n12\n13\n23\ntest\
    \ set: Test Failed at /tmp/tmphgtiqmjd.jl:29\n  Expression: candidate(3) == 9\n\
    \   Evaluated: 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphgtiqmjd.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphgtiqmjd.jl:27\n12\n13\n14\n23\n\
    24\n34\ntest set: Test Failed at /tmp/tmphgtiqmjd.jl:30\n  Expression: candidate(4)\
    \ == 16\n   Evaluated: 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphgtiqmjd.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphgtiqmjd.jl:27\n12\n13\n14\n15\n\
    16\n17\n18\n23\n24\n25\n26\n27\n28\n34\n35\n36\n37\n38\n45\n46\n47\n48\n56\n57\n\
    58\n67\n68\n78\ntest set: Test Failed at /tmp/tmphgtiqmjd.jl:31\n  Expression:\
    \ candidate(8) == 64\n   Evaluated: 0 == 64\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphgtiqmjd.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphgtiqmjd.jl:27\n12\n13\n14\n15\n\
    16\n17\n18\n19\n110\n23\n24\n25\n26\n27\n28\n29\n210\n34\n35\n36\n37\n38\n39\n\
    310\n45\n46\n47\n48\n49\n410\n56\n57\n58\n59\n510\n67\n68\n69\n610\n78\n79\n710\n\
    89\n810\n910\ntest set"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphgtiqmjd.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # assume n >= 0;  n=0\
    \ case is trivial.\n    # start with a trivial O(n^2) algorithm, then optimize\
    \ it to a faster one\n    \n    # The input is two arrays of length n:\n    #\
    \ left2right = [left2right_distances...]\n    # right2left = [right2left_distances...]\n\
    \    # left2right[i] = distance travelled by car i in the left to right direction.\n\
    \    # right2left[i] = distance travelled by car i in the right to left direction.\n\
    \    # We must return the number of times a left-to-right car i collides with\
    \ a right-to-left car j.\n    # note that the left-to-right car i collides with\
    \ the right-to-left car j iff\n    #     left2right[i] == right2left[j]\n    #\
    \ and\n    #     left2right[i] > left2right[j] if i < j\n    #     right2left[i]\
    \ > right2left[j] if i < j\n    #\n    # Let's call the set of left-to-right cars\
    \ L, and the set of right-to-left cars R.\n    # Assume we've sorted L and R in\
    \ non-decreasing order of their positions on the road.\n    # Then the number\
    \ of collisions is just the number of pairs (l,r) such that\n    # l in L and\
    \ r in R, and l.position == r.position and l.rank < r.rank\n    # This can be\
    \ computed in O(n) time using two pointers, one for each set.\n    #\n    # So,\
    \ we want to sort left2right and right2left, then count the number of \n    #\
    \ pairs (i,j) where left2right[i]==right2left[j] and i<j.  \n    # That's the\
    \ same as \n    #       sum([j-i for i,j in enumerate(argsort(left2right)) if\
    \ left2right[i]==right2left[j]])\n    # where argsort(a) is the array of indices\
    \ into a such that a[argsort(a)] is a sorted version of a.\n    # argsort\nusing\
    \ Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp52cf3h0f.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp52cf3h0f.jl:1\n\
    in expression starting at /tmp/tmp52cf3h0f.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    #This will store the\
    \ positions of the cars going left-to-right\n    left_to_right_positions = Int64[]\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5m44an8f.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5m44an8f.jl:1\n\
    in expression starting at /tmp/tmp5m44an8f.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # Initialize by adding\
    \ the coordinates of the cars on the left\n    colliding_pairs = n*(n-1)/2\n \
    \   return colliding_pairs\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp40x3itr5.jl:22\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp40x3itr5.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp40x3itr5.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp40x3itr5.jl:23\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp40x3itr5.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp40x3itr5.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp40x3itr5.jl:24\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp40x3itr5.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp40x3itr5.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp40x3itr5.jl:25\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp40x3itr5.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp40x3itr5.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp40x3itr5.jl:26\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp40x3itr5.jl:26 [inlin"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp40x3itr5.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    The cars\
    \ moving left to right are labeled 1 through n, and the cars moving right to left\
    \ are\n    labeled n+1 through 2n.  The position of the car labeled i at time\
    \ t is given by the function\n    f(i,t) = -it, where i is the label of the car,\
    \ and t is the time at which we want to know the position\n    of the car.  When\
    \ two cars have the same position, we count this as a collision.\n    \"\"\"\n\
    \    collisions = 0\n    for i in range(1, n+1)\n        for j in range(n+1, 2n+1)\n\
    \            if f(i,t) == f(j,t)\n                collisions += 1\n    return\
    \ collisions\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpqkc8757e.jl:21\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqkc8757e.jl:1\n\
    in expression starting at /tmp/tmpqkc8757e.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \n    for i in 1:n\n\
    \        for j in 1:n\n            i\n            j\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkr7hz1kn.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkr7hz1kn.jl:1\n\
    in expression starting at /tmp/tmpkr7hz1kn.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    #////////////////////////////////////////\n\
    \    #\n    #   YOUR CODE HERE\n    #\n    #////////////////////////////////////////\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    m = maximum(n, 0)\n \
    \   if m == 0\n        return 0\n    else\n        return (n*(n-1))/2\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp4ovfrt7s.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: objects of type\
    \ Int64 are not callable\\n  Maybe you forgot to use an operator such as *, ^,\
    \ %, / etc. ?\\n  Stacktrace:\\n   [1] mapreduce_first(f::Int64, op::Function,\
    \ x::Int64)\\n     @ Base ./reduce.jl:394\\n   [2] mapreduce(f::Int64, op::Function,\
    \ a::Int64)\\n     @ Base ./reduce.jl:421\\n   [3] maximum(f::Int64, a::Int64;\
    \ kw::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\\n     @\
    \ Base ./reduce.jl:678\\n   [4] maximum(f::Int64, a::Int64)\\n     @ Base ./reduce.jl:678\\\
    n   [5] car_race_collision(n::Int64)\\n     @ Main /tmp/tmp4ovfrt7s.jl:13\\n \
    \  [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [7] macro expansion\\n     @ /tmp/tmp4ovfrt7s.jl:25 [inlined]\\\
    n   [8] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [9] top-level scope\\n     @ /tmp/tmp4ovfrt7s.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmp4ovfrt7s.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: objects of type Int64 are not callable\\\
    n  Maybe you forgot to use an operator such as *, ^, %, / etc. ?\\n  Stacktrace:\\\
    n   [1] mapreduce_first(f::Int64, op::Function, x::Int64)\\n     @ Base ./reduce.jl:394\\\
    n   [2] mapreduce(f::Int64, op::Function, a::Int64)\\n     @ Base ./reduce.jl:421\\\
    n   [3] maximum(f::Int64, a::Int64; kw::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(),\
    \ Tuple{}}})\\n     @ Base ./reduce.jl:678\\n   [4] maximum(f::Int64, a::Int64)\\\
    n     @ Base ./reduce.jl:678\\n   [5] car_race_collision(n::Int64)\\n     @ Main\
    \ /tmp/tmp4ovfrt7s.jl:13\\n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [7] macro expansion\\n     @ /tmp/tmp4ovfrt7s.jl:26 [inlined]\\\
    n   [8] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [9] top-level scope\\n     "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    left  = ones(Int64, n)\n\
    \    right = ones(Int64, n)\n    @assert n >= 1\n    return countnz(left + right\
    \ .== 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp1aoc2do8.jl:23\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  UndefVarError: countnz not defined\\\
    n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmp1aoc2do8.jl:16\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp1aoc2do8.jl:23 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp1aoc2do8.jl:22\\ntest set:\
    \ Error During Test at /tmp/tmp1aoc2do8.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  UndefVarError: countnz not defined\\n  Stacktrace:\\n\
    \   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmp1aoc2do8.jl:16\\n \
    \  [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp1aoc2do8.jl:24 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp1aoc2do8.jl:22\\ntest set:\
    \ Error During Test at /tmp/tmp1aoc2do8.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  UndefVarError: countnz not defined\\n  Stacktrace:\\\
    n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmp1aoc2do8.jl:16\\n \
    \  [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp1aoc2do8.jl:25 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp1aoc2do8.jl:22\\ntest set:\
    \ Error During Test at /tmp/tmp1aoc2do8.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(8) == 64\\n  UndefVarError: countnz not defined\\n  Stacktrace:\\\
    n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmp1aoc2do8.jl:16\\n \
    \  [2] macro expansion\\n     @ /shared/"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    return Int64(div(n*(n-1),\
    \ 2))\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t\
    @test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmdr5jk1g.jl:20\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmdr5jk1g.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmdr5jk1g.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpmdr5jk1g.jl:21\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmdr5jk1g.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmdr5jk1g.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpmdr5jk1g.jl:22\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmdr5jk1g.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmdr5jk1g.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpmdr5jk1g.jl:23\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmdr5jk1g.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmdr5jk1g.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpmdr5jk1g.jl:24\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmdr5jk1g.jl:24 [inlin"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmdr5jk1g.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # Int64s are needed to\
    \ handle the case of huge n\n    # We assume that n is at least 1\n    assert(n\
    \ \u2265 1)\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8adec98b.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8adec98b.jl:1\n\
    in expression starting at /tmp/tmp8adec98b.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    return n * (n - 1) \xF7\
    \ 2\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t\
    @test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8485gkbu.jl:20\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8485gkbu.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8485gkbu.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp8485gkbu.jl:21\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8485gkbu.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8485gkbu.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp8485gkbu.jl:22\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8485gkbu.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8485gkbu.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp8485gkbu.jl:23\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8485gkbu.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8485gkbu.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp8485gkbu.jl:24\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8485gkbu.jl:24 [inlin"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8485gkbu.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    total = 0\n    for i\
    \ = 1:n\n        for j = 1:n\n            if i<j\n                total += 1\n\
    \            end\n        end\n    end\n    return total\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdjh8g9ve.jl:28\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdjh8g9ve.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdjh8g9ve.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpdjh8g9ve.jl:29\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdjh8g9ve.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdjh8g9ve.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpdjh8g9ve.jl:30\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdjh8g9ve.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdjh8g9ve.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpdjh8g9ve.jl:31\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdjh8g9ve.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdjh8g9ve.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpdjh8g9ve.jl:32\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdjh8g9ve.jl:32 [inlin"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdjh8g9ve.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"This function outputs\
    \ the number of car collisions as described\n    in the function description.\n\
    \    \"\"\"\n    return n*(n-1)/2\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp93w65cp7.jl:23\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp93w65cp7.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp93w65cp7.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp93w65cp7.jl:24\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp93w65cp7.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp93w65cp7.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp93w65cp7.jl:25\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp93w65cp7.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp93w65cp7.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp93w65cp7.jl:26\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp93w65cp7.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp93w65cp7.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp93w65cp7.jl:27\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp93w65cp7.jl:27 [inlin"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp93w65cp7.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    n is the\
    \ number of cars driving from left to right.\n    \"\"\"\n    return (n*(n-1))/2\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpetaygfsk.jl:23\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpetaygfsk.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpetaygfsk.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpetaygfsk.jl:24\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpetaygfsk.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpetaygfsk.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpetaygfsk.jl:25\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpetaygfsk.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpetaygfsk.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpetaygfsk.jl:26\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpetaygfsk.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpetaygfsk.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpetaygfsk.jl:27\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpetaygfsk.jl:27 [inlin"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpetaygfsk.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # number of cars that\
    \ started moving left to right\n    # and number of cars that started moving right\
    \ to left\n    # e.g. n = 2 => n_left = n_right = 2\n    n_left = n\n    n_right\
    \ = n\n    # time at which each car moving left to right crashed into a car moving\
    \ right to left\n    # note that the cars never really crash, this is a rather\
    \ arbitrary definition of \"collision\"\n    time_of_collision = zeros(Int64,\
    \ n)\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvy0w0cgj.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvy0w0cgj.jl:1\n\
    in expression starting at /tmp/tmpvy0w0cgj.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n   return floor(Int64, n^2/2)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz61wpm_6.jl:20\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz61wpm_6.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz61wpm_6.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpz61wpm_6.jl:21\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 4 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz61wpm_6.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz61wpm_6.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpz61wpm_6.jl:22\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 8 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz61wpm_6.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz61wpm_6.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpz61wpm_6.jl:23\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 32 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz61wpm_6.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz61wpm_6.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpz61wpm_6.jl:24\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 50 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz61wpm_6.jl:24 [inlin"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz61wpm_6.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Assume n\
    \ cars are given\n    \"\"\"\n    if n < 2\n        return 0\n    end\n    return\
    \ (n-1)*n*(n+1)//6\nend\ncar_race_collision(10)\nusing Test\n\n@testset begin\n\
    \ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp25qsphr_.jl:27\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp25qsphr_.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp25qsphr_.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp25qsphr_.jl:28\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 4 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp25qsphr_.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp25qsphr_.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp25qsphr_.jl:29\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 10 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp25qsphr_.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp25qsphr_.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp25qsphr_.jl:30\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 84 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp25qsphr_.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp25qsphr_.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp25qsphr_.jl:31\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 165 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp25qsphr_.jl:31 [inl"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp25qsphr_.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # returns the number\
    \ of \"collisions\" in a car race with n cars\n    # when the cars are driven\
    \ by two sets of drivers such that \n    # drivers on the right set of cars drive\
    \ right to left\n    # and drivers on the left set of cars drive left to right.\n\
    \    #\n    # The output is given by a combination formula:\n    #   n!   (n-1)!\n\
    \    #  --- + --- + ...\n    #   2!    1!\n    count = 0\n    for i in range(1,n+1)\n\
    \        count += n-i\n    end\n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphfdsibzg.jl:33\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphfdsibzg.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphfdsibzg.jl:32\ntest set: Test\
    \ Failed at /tmp/tmphfdsibzg.jl:34\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 2 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphfdsibzg.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphfdsibzg.jl:32\ntest set: Test\
    \ Failed at /tmp/tmphfdsibzg.jl:35\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 5 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphfdsibzg.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphfdsibzg.jl:32\ntest set: Test\
    \ Failed at /tmp/tmphfdsibzg.jl:36\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 27 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphfdsibzg.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphfdsibzg.jl:32\ntest set: Test\
    \ Failed at /tmp/tmphfdsibzg.jl:37\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 44 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphfdsibzg.jl:37 [inlin"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphfdsibzg.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    The function\
    \ returns the number of collisions that would take place if \n    n cars were\
    \ simultaneously driving left to right and another set of n cars \n    were simultaneously\
    \ driving right to left, starting from a sufficiently large\n    distance from\
    \ each other.\n    \"\"\"\n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp6yhqto1o.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type String to an object of type Int64\\n  Closest candidates are:\\\
    n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\\\
    n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmp6yhqto1o.jl:13\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp6yhqto1o.jl:26 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp6yhqto1o.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmp6yhqto1o.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type String\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\\\
    n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmp6yhqto1o.jl:13\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp6yhqto1o.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-le"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n   n*(n-1)/2\nend\n\"\"\"\
    \n    Imagine a road that's a perfectly straight infinitely long line.\n    n\
    \ cars are driving left to right;  simultaneously, a different set of n cars\n\
    \    are driving right to left.   The two sets of cars start out being very far\
    \ from\n    each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n    when a car that's moving left to right hits a car that's moving\
    \ right to left.\n    However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n    in their trajectory as if they did not collide.\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptgsomn56.jl:15\nin expression starting at\
    \ /tmp/tmptgsomn56.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    first_set_of_cars = randn(n)\n\
    \    second_set_of_cars = randn(n)\n    sorted_first_set_of_cars = sort(first_set_of_cars)\n\
    \    sorted_second_set_of_cars = sort(second_set_of_cars)\n    number_of_collisions\
    \ = 0\n    for i in 1:n\n        if sorted_first_set_of_cars[i] > sorted_second_set_of_cars[i]\n\
    \            number_of_collisions += 1\n        end\n    end\n    return number_of_collisions\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwll8s5l5.jl:30\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwll8s5l5.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwll8s5l5.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpwll8s5l5.jl:31\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 2 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwll8s5l5.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwll8s5l5.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpwll8s5l5.jl:32\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 3 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwll8s5l5.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwll8s5l5.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpwll8s5l5.jl:33\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 3 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwll8s5l5.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwll8s5l5.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpwll8s5l5.jl:34\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 4 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwll8s5l5.jl:34 [inlined"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwll8s5l5.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    a = rand(n)\n    b =\
    \ rand(n)\n    return sum(a .> b)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4gfvnwce.jl:22\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4gfvnwce.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4gfvnwce.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp4gfvnwce.jl:23\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4gfvnwce.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4gfvnwce.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp4gfvnwce.jl:24\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 3 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4gfvnwce.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4gfvnwce.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp4gfvnwce.jl:25\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 2 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4gfvnwce.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4gfvnwce.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp4gfvnwce.jl:26\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 5 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4gfvnwce.jl:26 [inlined"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4gfvnwce.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    For each\
    \ car moving left to right, compute the time elapsed before it crashes into the\n\
    \    nearest car moving right to left.  For each car moving right to left, compute\
    \ the time\n    elapsed before it crashes into the nearest car moving left to\
    \ right.  Sum the number of\n    crashes up.\n    \"\"\"\n    # car positions\n\
    \    left_to_right_car_positions = rand(n)\n    right_to_left_car_positions =\
    \ rand(n)\n    sort!(left_to_right_car_positions)\n    sort!(right_to_left_car_positions)\n\
    \    # the number of collisions\n    num_collisions = 0\n    # two indices: one\
    \ for the left to right cars, another for the right to left cars\n    left_to_right_index\
    \ = 1\n    right_to_left_index = 1\n    while left_to_right_index \u2264 n &&\
    \ right_to_left_index \u2264 n\n        # step 1: if the two cars are already\
    \ at the same position, then we're done\n        if left_to_right_car_positions[left_to_right_index]\
    \ == right_to_left_car_positions[right_to_left_index]\n            num_collisions\
    \ += 1\n            left_to_right_index += 1\n            right_to_left_index\
    \ += 1\n        # step 2: take care of the case where the left to right car is\
    \ behind the right to left car\n        elseif left_to_right_car_positions[left_to_right_index]\
    \ < right_to_left_car_positions[right_to_left_index]\n            # increment\
    \ the left to right index\n            left_to_right_index += 1\n        # step\
    \ 3: take care of the case where the right to left car is behind the left to right\
    \ car\n        else\n            # increment the right to left index\n       \
    \     right_to_left_index += 1\n        end\n    end\n    # return the number\
    \ of collisions\n    return num_collisions\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi91gh8iv.jl:53\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi91gh8iv.jl:53 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi91gh8iv.jl:52\ntest set: Test\
    \ Failed at /tmp/tmpi91gh8iv.jl:54\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi91gh8iv.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi91gh8iv.jl:52\ntest set: Test\
    \ Failed at /tmp/tmpi91gh8iv.jl:55\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi91gh8iv.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi91gh8iv.jl:52\ntest set: Test\
    \ Failed at /tmp/tmpi91gh8iv.jl:56\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi91gh8iv.jl:56 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi91gh8iv.jl:52\ntest set: Test\
    \ Failed at /tmp/tmpi91gh8iv.jl:57\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi91gh8iv.jl:57 [inlined"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi91gh8iv.jl:50\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    return n * (n - 1) /\
    \ 2\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t\
    @test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyjp6c141.jl:20\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyjp6c141.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyjp6c141.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpyjp6c141.jl:21\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyjp6c141.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyjp6c141.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpyjp6c141.jl:22\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyjp6c141.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyjp6c141.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpyjp6c141.jl:23\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyjp6c141.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyjp6c141.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpyjp6c141.jl:24\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyjp6c141.jl:24 [inlin"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyjp6c141.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  car_left = rand(1:100,n)\n    car_right = rand(1:100,n)\n    car_left.sort!()\n\
    \    car_right.sort!()\n    collision = 0\n    for i in 1:n\n        for j in\
    \ 1:n\n            if (car_left[i]>car_right[j])\n                collision =\
    \ collision + 1\n            end\n        end\n    end\n    return collision\n\
    end\ncar_race_collision(10)\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: type Array has no field sort!\nStacktrace:\n [1] getproperty\n\
    \   @ ./Base.jl:42 [inlined]\n [2] car_race_collision(n::Int64)\n   @ Main /tmp/tmpzxb12vta.jl:16\n\
    \ [3] top-level scope\n   @ /tmp/tmpzxb12vta.jl:28\nin expression starting at\
    \ /tmp/tmpzxb12vta.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # Your code here. \n\
    end\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmppfdoz3ty.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\\\
    n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmppfdoz3ty.jl:14\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmppfdoz3ty.jl:20 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmppfdoz3ty.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmppfdoz3ty.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\\\
    n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmppfdoz3ty.jl:14\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmppfdoz3ty.jl:21 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    return \n    (\n    \
    \    (n-1) * (n-2) / 2\n    )\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpesqewai3.jl:23\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\\\
    n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpesqewai3.jl:13\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpesqewai3.jl:23 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpesqewai3.jl:22\\ntest set:\
    \ Error During Test at /tmp/tmpesqewai3.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\\\
    n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpesqewai3.jl:13\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpesqewai3.jl:24 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Suppose that\
    \ we have n left-to-right cars and n right-to-left cars.  The left-to-right cars\
    \ start at\n    locations -100000-k*100 for k=0,1,...,n-1, and the right-to-left\
    \ cars start at locations +100000+k*100\n    for k=0,1,...,n-1.  We assume that\
    \ all cars move at the same speed.\n    This function outputs the time at which\
    \ a collision happens.  In addition, it outputs the number of the\n    left-to-right\
    \ car and the number of the right-to-left car that collide.\n    \"\"\"\n    return,nothing,nothing\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpr4w0kx0c.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\\\
    n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpr4w0kx0c.jl:20\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpr4w0kx0c.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpr4w0kx0c.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpr4w0kx0c.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\\\
    n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpr4w0kx0c.jl:20\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpr4w0kx0c.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    n * (n - 1) / 2 \nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbqgrr5_f.jl:20\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbqgrr5_f.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbqgrr5_f.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpbqgrr5_f.jl:21\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbqgrr5_f.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbqgrr5_f.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpbqgrr5_f.jl:22\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbqgrr5_f.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbqgrr5_f.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpbqgrr5_f.jl:23\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbqgrr5_f.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbqgrr5_f.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpbqgrr5_f.jl:24\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbqgrr5_f.jl:24 [inlin"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbqgrr5_f.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Parameters:\n\
    \        - n:  the number of cars\n    \"\"\"\n    return 1\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpneov_aq6.jl:24\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpneov_aq6.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpneov_aq6.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpneov_aq6.jl:25\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 1 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpneov_aq6.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpneov_aq6.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpneov_aq6.jl:26\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 1 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpneov_aq6.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpneov_aq6.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpneov_aq6.jl:27\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 1 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpneov_aq6.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpneov_aq6.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpneov_aq6.jl:28\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 1 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpneov_aq6.jl:28 [inlined"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpneov_aq6.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    x = 0\n    for i = 1:n\n\
    \        for j = 1:n\n            if i != j\n                x += 1\n        \
    \    end\n        end\n    end\n    return x\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpu4eyyxgp.jl:28\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu4eyyxgp.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu4eyyxgp.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpu4eyyxgp.jl:29\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 6 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu4eyyxgp.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu4eyyxgp.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpu4eyyxgp.jl:30\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 12 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu4eyyxgp.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu4eyyxgp.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpu4eyyxgp.jl:31\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 56 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu4eyyxgp.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu4eyyxgp.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpu4eyyxgp.jl:32\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 90 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu4eyyxgp.jl:32 [inli"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu4eyyxgp.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # Write your code here\n\
    \    return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpet2idu8u.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpet2idu8u.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpet2idu8u.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpet2idu8u.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpet2idu8u.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpet2idu8u.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpet2idu8u.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpet2idu8u.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpet2idu8u.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpet2idu8u.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpet2idu8u.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpet2idu8u.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpet2idu8u.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpet2idu8u.jl:25 [inlined"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpet2idu8u.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    The cars\
    \ are numbered 0,...,n-1.\n    Suppose car x leaves at position y at time t. \
    \ The right-to-left cars have the\n    same numbering.\n    \"\"\"\n    start_position_left_to_right\
    \ = rand(0:10000, n)\n    start_time_left_to_right = rand(0:50000, n)\n    start_position_right_to_left\
    \ = rand(0:10000, n)\n    start_time_right_to_left = rand(0:50000, n)\n    \"\"\
    \"\n    We need to specify how long does it take for a car to reach the other\
    \ side.\n    We assume that it takes twice as long to go from 0 to 10000 as it\
    \ does to go\n    from 10000 to 0.\n    \"\"\"\n    time_left_to_right = start_position_left_to_right\
    \ * 2\n    time_right_to_left = (10000 - start_position_right_to_left) * 2\n \
    \   \"\"\"\n    Cars hit each other if they have the same index and if\n    they\
    \ reach the other side at the same time.\n    \"\"\"\n    hits = time_left_to_right\
    \ .== time_right_to_left\n    return sum(hits)\nend\ncar_race_collision(1000)\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: None
  stderr: "b'ERROR: LoadError: MethodError: no method matching -(::Int64, ::Vector{Int64})\\\
    nFor element-wise subtraction, use broadcasting with dot syntax: scalar .- array\\\
    nClosest candidates are:\\n  -(::Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8}) at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:85\\\
    n  -(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:86\\\
    n  -(::Union{Int16, Int32, Int64, Int8}, !Matched::BigInt) at /shared/centos7/julia/1.7.3/share/julia/base/gmp.jl:537\\\
    n  ...\\nStacktrace:\\n [1] '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    ###\n    ### YOUR CODE\
    \ HERE\n    ###\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp309fakn3.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp309fakn3.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp309fakn3.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp309fakn3.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp309fakn3.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp309fakn3.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp309fakn3.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp309fakn3.jl:2"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp309fakn3.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Given the\
    \ number of cars moving left to right and the number of cars moving\n    right\
    \ to left, this function outputs the number of collisions between them.\n    \"\
    \"\"\n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n \
    \   elseif n == 2\n        return 1\n    elseif n == 3\n        return 3\n   \
    \ elseif n == 4\n        return 6\n    elseif n == 5\n        return 10\n    elseif\
    \ n == 6\n        return 15\n    elseif n == 7\n        return 21\n    elseif\
    \ n == 8\n        return 28\n    elseif n == 9\n        return 36\n    elseif\
    \ n == 10\n        return 45\n    elseif n == 11\n        return 55\n    elseif\
    \ n == 12\n        return 66\n    elseif n == 13\n        return 78\n    elseif\
    \ n == 14\n        return 91\n    elseif n == 15\n        return 105\n    elseif\
    \ n == 16\n        return 120\n    elseif n == 17\n        return 136\n    elseif\
    \ n == 18\n        return 153\n    elseif n == 19\n        return 171\n    elseif\
    \ n == 20\n        return 190\n    elseif n == 21\n        return 210\n    elseif\
    \ n == 22\n        return 231\n    elseif n == 23\n        return 253\n    elseif\
    \ n == 24\n        return 276\n    elseif n == 25\n        return 300\n    elseif\
    \ n == 26\n        return 325\n    elseif n == 27\n        return 351\n    elseif\
    \ n == 28\n        return 378\n    elseif n == 29\n        return 406\n    elseif\
    \ n == 30\n        return 435\n    elseif n == 31\n        return 465\n    elseif\
    \ n == 32\n        return 496\n    elseif n == 33\n        return 528\n    elseif\
    \ n == 34\n        return 561\n    elseif n == 35\n        return 595\n    elseif\
    \ n == 36\n        return 630\n    elseif n == 37\n        return 666\n    elseif\
    \ n == 38\n        return 703\n    elseif n == 39\n        return 741\n    elseif\
    \ n == 40\n        return 780\n    elseif n == 41\n        return 820\n    elseif\
    \ n ==\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp229ru0us.jl:1\nin expression starting at /tmp/tmp229ru0us.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    car_positions = zeros(Int64,\
    \ 2n)\n    for i in 1:n\n        car_positions[i] = i\n    end\n    for i in 1:n\n\
    \        car_positions[n+i] = -i\n    end\n    sort!(car_positions)\n    count\
    \ = 0\n    for i in 1:2n-1\n        if car_positions[i]>0 && car_positions[i+1]<0\n\
    \            count += 1\n        end\n    end\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb0jn08ji.jl:34\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb0jn08ji.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb0jn08ji.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpb0jn08ji.jl:35\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb0jn08ji.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb0jn08ji.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpb0jn08ji.jl:36\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb0jn08ji.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb0jn08ji.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpb0jn08ji.jl:37\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb0jn08ji.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb0jn08ji.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpb0jn08ji.jl:38\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb0jn08ji.jl:38 [inlined"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb0jn08ji.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    return n * (n - 1) /\
    \ 2\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t\
    @test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpol78ingw.jl:20\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpol78ingw.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpol78ingw.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpol78ingw.jl:21\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpol78ingw.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpol78ingw.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpol78ingw.jl:22\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpol78ingw.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpol78ingw.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpol78ingw.jl:23\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpol78ingw.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpol78ingw.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpol78ingw.jl:24\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpol78ingw.jl:24 [inlin"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpol78ingw.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    return n^2\nend\n \n\"\
    \"\"\n    Recursively compute the n-th fibonacci number.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmplz4k20k1.jl:16\nin expression starting at /tmp/tmplz4k20k1.jl:16\n"
  exit_code: 1
  status: SyntaxError
