name: HumanEval_18_how_many_times
language: jl
prompt: "\"\"\" Find how many times a given substring can be found in the original\
  \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>>\
  \ how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n\
  \    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
  \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
  cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
completions: ["    # YOUR CODE HERE\n    global count\n    count = 0\n    for i in\
    \ 1:length(string)\n        if string[i] == substring[1]\n            if string[i:i+length(substring)-1]\
    \ == substring[2:end]\n                count += 1\n            end\n        end\n\
    \    end\n    return count\nend", "    if substring == \"\"\n        return 0\n\
    \    end\n    return length(findall(substring, string))\nend", "    if string\
    \ == \"\"\n        return 0\n    end\n    if substring == \"\"\n        return\
    \ 1\n    end\n    count = 0\n    for i = 1:length(string)\n        if string[i:i+length(substring)-1]\
    \ == substring\n            count += 1\n        end\n    end\n    return count\n\
    end", "    count = 0 \n    n = length(string)\n    k = length(substring)\n   \
    \ for i = 1:n-k+1\n        if string[i:i+k-1] == substring\n            count\
    \ += 1\n        end\n    end\n    return count\nend ", "    count = 0\n    for\
    \ i = 1:length(string) - length(substring) + 1\n        if string[i:i+length(substring)-1]\
    \ == substring\n            count += 1\n        end\n    end\n    return count\n\
    end", "    if length(substring) > length(string)\n        return 0\n    end\n\
    \    counter = 0\n    start = 1\n    while start < length(string)\n        end\
    \ = start + length(substring) - 1\n        if end <= length(string)\n        \
    \    if substring == string[start:end]\n                counter += 1\n       \
    \     end\n        end\n        start += 1\n    end\n    return counter\nend",
  "    times = 0\n    for i = 1:length(string)\n        if string[i:end] == substring\n\
    \            times += 1\n        end\n    end\n    return times\nend", "    length\
    \ = length(substring)\n    count = 0\n    for i in 0:length(string)-length+1\n\
    \        if string[i+1:i+length] == substring\n            count += 1\n      \
    \  end\n    end\n    return count\nend", "    if substring == \"\"\n        return\
    \ 0\n    end\n    start = 1\n    how_many = 0\n    while true\n        start =\
    \ findnext(string, substring, start)\n        if start == nothing\n          \
    \  break\n        end\n        how_many += 1\n        start += 1\n    end\n  \
    \  return how_many\nend", "    if substring == \"\"\n        return 0\n    end\n\
    \    cnt = 0\n    while true\n        k = findfirst(string, substring)\n     \
    \   if isnothing(k)\n            break\n        end\n        cnt += 1\n      \
    \  string = string[k+1:end]\n    end\n    return cnt\nend", "    if isempty(substring)\
    \ || substring == string\n        return 1\n    end\n    occurrence = 0\n    for\
    \ i = 1:length(string)\n        if string[i:i+length(substring)-1] == substring\n\
    \            occurrence += 1\n        end\n    end\n    return occurrence\nend",
  "    if substring == \"\" \n        return 0\n    end \n    times = 0\n    for i\
    \ in 1:length(string)\n        if substring == string[i:i+length(substring)-1]\n\
    \            times += 1\n        end\n    end\n    return times\nend", "    count\
    \ = 0\n    for i in 1:length(string) - length(substring) + 1\n        if string[i:i+length(substring)-1]\
    \ == substring\n            count += 1\n        end\n    end\n    return count\n\
    end", "    sz = length(substring)\n    cnt = 0\n    for i = 1:length(string)\n\
    \        if string[i:i+sz-1] == substring\n            cnt += 1\n        end\n\
    \    end\n    return cnt\nend", "    \n    if length(substring) > length(string)\n\
    \        return 0\n    end", "    count = 0\n    i = 1\n    while i <= length(string)\
    \ - length(substring) + 1\n        if string[i:i+length(substring)-1] == substring\n\
    \            count += 1\n        end\n        i += 1\n    end\n    return count\n\
    end", "    # your code here\n    return 0\nend", "    i = 0\n    count = 0\n \
    \   while i < length(string)\n        if string[i] == substring[1]\n         \
    \   if string[i:i+length(substring)] == substring\n                count += 1\n\
    \            end\n        end\n        i += 1\n    end\n    return count\nend",
  "    j = 0\n    count = 0\n    for i in 1:length(string)\n        if string[i] ==\
    \ substring[j]\n            j += 1\n            if j == length(substring)\n  \
    \              count += 1\n                j = 0\n            end\n        else\n\
    \            j = 0\n        end\n    end\n    return count\nend", "    \n    string_length\
    \ = length(string)\n    substring_length = length(substring)\n    \n    if string_length\
    \ == 0 || substring_length == 0 || substring_length > string_length\n        return\
    \ 0\n    end\n    \n    # this is the way to select all elements in an array,\
    \ otherwise you need a loop\n    # [i+1:string_length-substring_length+1] makes\
    \ a subarray of all indexes where you can find a substring\n    sub_strings =\
    \ [string[i+1:string_length-substring_length+1] for i in 1:string_length-substring_length]\n\
    \    \n    # count how many of the substrings are equal to the substring. \n \
    \   # The ! operator means that you're in a comprehension, which is short for\
    \ a for loop\n    return count(!(substring .== x) for x in sub_strings)\nend",
  "    \n    n = length(string)\n    m = length(substring)\n    if n == 0\n      \
    \  return 0\n    end\n    count = 0\n    for i = 1:n-m+1\n        if string[i:i+m-1]\
    \ == substring\n            count += 1\n        end\n    end\n    return count\n\
    end", "    count = 0\n    for i = 1:length(string)\n        if occursin(substring,\
    \ string[i:end])\n            count += 1\n        end\n    end\n    return count\n\
    end", "    if string == \"\" || substring == \"\"\n        return 0\n    end\n\
    \    if length(substring) == 1\n        return length(string)\n    end\n    times\
    \ = 0\n    while length(string) > length(substring)\n        if string[1:length(substring)]\
    \ == substring\n            times += 1\n        end\n        string = string[2:end]\n\
    \    end\n    return times\nend", "    if substring == \"\"\n        return 0\n\
    \    end\n    return (length(string) - length(replace(string, substring))) / length(substring)\n\
    end", "    \n    if string == \"\" || substring == \"\"\n        return 0\n  \
    \  end\n    \n    return how_many_times(string[2:end], substring) + (string[1]\
    \ == substring[1] ? how_many_times(string[2:end], substring[2:end]) + 1 : 0)\n\
    \    \nend", "    count = 0\n    for i in 1:length(string)\n        if string[i:i+length(substring)-1]\
    \ == substring\n            count += 1\n        end\n    end\n    return count\n\
    end", "    substring_length = length(substring)\n    if substring_length > length(string)\
    \ || length(string) == 0 || length(substring) == 0\n        return 0\n    end\n\
    \    return count(string, substring) + how_many_times(string[2:end], substring)\n\
    end", "    if string == substring\n        return 1\n    end\n    if substring\
    \ == \"\"\n        return 0\n    end\n    if string == \"\"\n        return 0\n\
    \    end\n    a = length(string)\n    b = length(substring)\n    counter = 0\n\
    \    for i in 1:a-b+1\n        for j in 1:b\n            if string[i+j-1] != substring[j]\n\
    \                break\n            end\n            if j == b\n             \
    \   counter = counter + 1\n            end\n        end\n    end\n    return counter\n\
    end", "    count = 0\n    for start_index in 1:length(string)\n        end_index\
    \ = start_index + length(substring) - 1\n        if end_index > length(string)\n\
    \            continue\n        end\n        if string[start_index:end_index] ==\
    \ substring\n            count += 1\n        end\n    end\n    return count\n\
    end", "    # TODO\n    return 0\nend", "    if length(substring) == 0 \n     \
    \   0\n    else \n        matches = findall(string, substring)\n        if length(matches)\
    \ == 0 \n            0\n        else \n            index = [x[1] for x in matches]\n\
    \            index = sort(index)\n            prev_index = 0\n            counter\
    \ = 0\n            for i in index \n                if i == prev_index \n    \
    \                continue\n                prev_index = i\n                counter\
    \ += 1\n            end\n            counter\n        end\n    end\nend", "  \
    \  if substring == \"\"\n        return 0\n    end\n    counter = 0\n    for i\
    \ in 1:length(string)\n        if string[i:i+length(substring)-1] == substring\n\
    \            counter += 1\n        end\n    end\n    return counter\nend", " \
    \   if substring == \"\"\n        return 0\n    end\n    pos = 0\n    times =\
    \ 0\n    while pos < length(string)\n        pos = search(string, substring, pos)\n\
    \        if pos == 0\n            break\n        end\n        times += 1\n   \
    \     pos += 1\n    end\n    return times\nend\n# the following code is necessary\
    \ to run tests\nusing Base.Test\n@testset \"how_many_times_tests\" begin\n   \
    \ @test how_many_times(\"\", \"a\") == 0\n    @test how_many_times(\"aaa\", \"\
    a\") == 3\n    @test how_many_times(\"aaaa\", \"aa\") == 3\nend", "    len = length(substring)\n\
    \    pos = 1\n    count = 0\n    while true\n        try\n            pos = search(string,\
    \ substring, pos)\n            if pos == nothing\n                break\n    \
    \        end\n            count += 1\n            pos += len\n        catch\n\
    \            break\n        end\n    end\n    return count\nend", "    if substring\
    \ == \"\"\n        return 0\n    end\n    times_found = 0\n    for i in 1:length(string)\n\
    \        if string[i:i+length(substring)-1] == substring\n            times_found\
    \ += 1\n        end\n    end\n    return times_found\nend", "    if substring\
    \ in string\n        return length(split(string, substring)) - 1\n    else\n \
    \       return 0\n    end\nend", "    n = 0\n    for i in 1:length(string)\n \
    \       if string[i:end] == substring\n            n += 1\n        end\n    end\n\
    \    return n\nend\nhow_many_times(\"aa\", \"a\")", "    counter = 0\n    for\
    \ i in eachindex(string)\n        if i + length(substring) - 1 <= length(string)\n\
    \            if string[i:(i + length(substring) - 1)] == substring\n         \
    \       counter += 1\n            end\n        end\n    end\n    return counter\n\
    end", "    n1 = length(string)\n    n2 = length(substring)\n    cnt = 0\n    for\
    \ i in 1:n1-n2+1\n        if string[i:i+n2-1] == substring\n            cnt +=\
    \ 1\n        end\n    end\n    return cnt\nend", "    return length(eachmatch(r\"\
    (?=($substring))\", string).match)\nend", "    if length(substring) == 0\n   \
    \     return 0\n    end", "    total = 0\n    for i in 1:length(string)\n    \
    \    if string[i:i+length(substring)-1] == substring\n            total += 1\n\
    \        end\n    end\n    return total\nend", "    count = 0\n    for i in 1:length(string)\
    \ - length(substring) + 1\n        if string[i:i+length(substring)-1] == substring\n\
    \            count += 1\n        end\n    end\n    return count\nend", "    if\
    \ string == \"\" || substring == \"\"\n        return 0\n    end\n    count =\
    \ 0\n    for i in 1:length(string)\n        if string[i:i+length(substring)-1]\
    \ == substring\n            count += 1\n        end\n    end\n    return count\n\
    end", "    occurances = 0\n    index = 1\n    while index <= length(string) -\
    \ length(substring) + 1\n        if string[index:index+length(substring)-1] ==\
    \ substring\n            occurances += 1\n        end\n        index += 1\n  \
    \  end\n    return occurances\nend", "    index = next_index(string, substring)\n\
    \    if index == 0 \n        return 0\n    else\n        return 1 + how_many_times(string[index+1:end],\
    \ substring)\n    end\nend", "    if substring == \"\"\n        return 0\n   \
    \ end\n    if string == \"\"\n        return 0\n    end\n    j = 1\n    count\
    \ = 0\n    while j<=length(string)\n        if string[j:j+length(substring)-1]\
    \ == substring\n            count += 1\n        end\n        j += 1\n    end\n\
    \    return count\nend", "    k = length(substring)\n    n = length(string)\n\
    \    times = 0\n    for i = 1:n-k+1\n        if string[i:i+k-1] == substring\n\
    \            times += 1\n        end\n    end\n    return times\nend", "    if\
    \ string == \"\" || substring == \"\"\n        return 0\n    end\n    count =\
    \ 0\n    for i = 1:length(string)\n        if string[i:i+length(substring)-1]\
    \ == substring\n            count += 1\n        end\n    end\n    return count\n\
    end\n ", "    if substring == \"\"\n        return 0\n    end\n    count = 0\n\
    \    for i in 1:length(string)\n        if i + length(substring) <= length(string)\
    \ + 1\n            if string[i:i+length(substring)-1] == substring\n         \
    \       count += 1\n            end\n        end\n    end\n    return count\n\
    end", "    count::Int64 = 0\n    for i in 1:length(string) - length(substring)\
    \ + 1\n        if string[i:i+length(substring)-1] == substring\n            count\
    \ += 1\n        end\n    end\n    return count\nend", "    is_ok(p::Int64) = p\
    \ <= string_length(string) - string_length(substring)\n    get_hash(idx::Int64)\
    \ = hash(string[idx:idx+string_length(substring)])\n    get_substring(idx::Int64)\
    \ = string[idx:idx+string_length(substring)]\n    hash_substring = hash(substring)\n\
    \    hash_substrings = [get_hash(i) for i in 0:string_length(string)-1]\n    cnt\
    \ = 0\n    for i in 0:string_length(string)-1\n        hash_current = hash_substrings[i]\n\
    \        if hash_current == hash_substring && is_ok(i) && get_substring(i) ==\
    \ substring\n            cnt += 1\n        end\n    end\n    return cnt\nend\n\
    \ ", "    i = 0\n    count = 0\n    while i < length(string)\n        if string[i:i+length(substring)]\
    \ == substring\n            count += 1\n            i += length(substring)\n \
    \       else\n            i += 1\n        end\n    end\n    return count\nend",
  "    return iszero(occursin(substring, string)) ? 0 : 1 + how_many_times(string[2:end],\
    \ substring)\nend", "    n = length(substring)\n    k = count(ch -> ch in substring,\
    \ string)\n    k - n + 1\nend", "    count = 0\n    if substring == \"\"\n   \
    \     return count\n    end\n    for i = 1:length(string)\n        start = i\n\
    \        for j = 1:length(substring)\n            if j + start > length(string)\n\
    \                break\n            end\n            if string[j + start] != substring[j]\n\
    \                break\n            end\n            if j == length(substring)\n\
    \                count += 1\n            end\n        end\n    end\n    return\
    \ count\nend", "    \"\"\"Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    Args:\n        string: String\
    \ to search in.\n        substring: String to search for.\n    Returns:\n    \
    \    Int64 -- Number of times the substring appears.\n    \"\"\"\n    return string.count(substring)\n\
    end", "    if length(substring) > length(string)\n        return 0\n    end\n\
    \    return length(findall(r\"$substring\", string))\nend", "    if length(substring)\
    \ > length(string) return 0\n    i = 1\n    hits = 0\n    while i <= length(string)\
    \ - length(substring) + 1\n        if string[i:i+length(substring)] == substring\n\
    \            hits += 1\n            i += length(substring)\n        else\n   \
    \         i += 1\n        end\n    end\n    return hits\nend\n \n \n \n\"\"\"\
    \ Returns a graph of the input string representation of a DNA sequence, each node\
    \ being a k-mer.\n    Output is the corresponding adjacency matrix.\n    Nodes\
    \ are labelled from A0 to Z0, A1 to Z1 and so on...\n    k is the order of the\
    \ k-mer, so the length of the nodes.\n    >>> graph('ATGC')\n    4x4 Array{Int64,2}:\n\
    \     0  1  0  0\n     0  0  1  0\n     0  0  0  1\n     1  0  0  0\n    >>> graph('ATGC',\
    \ 2)\n    16x16 Array{Int64,2}:\n     0  0  0  0  0  0  0  0  0  0  0  0  0  0\
    \  0  0\n     0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n     0  0  0  0\
    \  0  0  0  0  0  0  0  0  0  0  0  0\n     0  0  0  0  0  0  0  0  0  0  0  0\
    \  0  0  0  0\n     0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n     0  0\
    \  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n     0  0  0  0  0  0  0  0  0  0\
    \  0  0  0  0  0  0\n     0  0  0  0  0  0  0  0  0  0  0  0  0  0", "    if substring\
    \ == \"\"\n        return 0\n    end\n    if length(substring) > length(string)\n\
    \        return 0\n    end\n    k = length(substring)\n    count = 0\n    for\
    \ i = 1:length(string)-length(substring)+1\n        if string[i:i+k-1] == substring\n\
    \            count += 1\n        end\n    end\n    return count\nend", "    if\
    \ substring == \"\"\n        return 0\n    end\n    # use regexp to find number\
    \ of occurences\n    match = match(string, substring)\n    return length(match.captures)\n\
    end", "    m = length(substring)\n    n = length(string)\n    count = 0\n    for\
    \ i = 1:n-m+1\n        if string[i:i+m-1] == substring\n            count += 1\n\
    \        end\n    end\n    return count\nend", "    string_len = length(string)\n\
    \    substr_len = length(substring)\n    counter = 0\n    if substr_len > string_len\n\
    \        return 0\n    end\n    for i in 1:string_len - substr_len + 1\n     \
    \   if string[i:i+substr_len-1] == substring\n            counter += 1\n     \
    \   end\n    end\n    return counter\nend", "    return length(findall(\".*?$substring\"\
    , string))\nend", "    if length(substring) > length(string)\n        return 0\n\
    \    end\n    n = 0\n    for i = 1:length(string)\n        if string[i:i+length(substring)-1]\
    \ == substring\n            n += 1\n        end\n    end\n    return n\nend",
  "    if substring == \"\"\n        return 0\n    end\n    count = 0\n    index =\
    \ 1\n    while (index <= length(string) - length(substring) + 1)\n        if string[index:index+length(substring)-1]\
    \ == substring\n            count += 1\n            index += length(substring)\n\
    \        else\n            index += 1\n        end\n    end\n    return count\n\
    end", "    return length(\n        (m = match(string, substring)) for m in eachmatch(string,\
    \ substring)\n    )\nend", "    if substring == \"\" return 0\n    elseif substring\
    \ == string return 1\n    elseif length(string) < length(substring) return 0\n\
    \    end\n    count = 0\n    for i in 1:length(string)\n        if string[i:i+length(substring)-1]\
    \ == substring\n            count += 1\n        end\n    end\n    return count\n\
    end", "    if isempty(substring)\n        return 0\n    end\n    if length(substring)\
    \ > length(string)\n        return 0\n    end\n    count = 0\n    for i in 1:length(string)\n\
    \        if string[i:i+length(substring)-1] == substring\n            count +=\
    \ 1\n        end\n    end\n    return count\nend", "    return length(findall(string,\
    \ substring))\nend", "    new_string = copy(string)\n    count = 0\n    while\
    \ occursin(substring, new_string)\n        count += 1\n        new_string = replace(new_string,\
    \ substring, \"\")\n    end\n    return count\nend", "    cnt = 0\n    start_index\
    \ = 1\n    i = 1\n    length_of_string = length(string)\n    length_of_substring\
    \ = length(substring)\n    while i <= length_of_string - length_of_substring +\
    \ 1\n        if string[i:i+length_of_substring - 1] == substring\n           \
    \ cnt += 1\n            i += length_of_substring - 1\n        end\n        i +=\
    \ 1\n    end\n    return cnt\nend", "    count = 0\n    i = 1\n    while i <=\
    \ length(string) - length(substring) + 1\n        if string[i:i+length(substring)-1]\
    \ == substring\n            count += 1\n        end\n        i += 1\n    end\n\
    \    return count\nend", "    if length(substring) > length(string)\n        return\
    \ 0\n    end\n    len = length(substring)\n    times = 0\n    for i in 0:len-1\n\
    \        found = string[i:end]\n        while !isempty(found)\n            if\
    \ contains(found, substring)\n                times += 1\n                found\
    \ = found[len+1:end]\n            else\n                found = \"\"\n       \
    \     end\n        end\n    end\n    return times\nend", "    num = 0\n    for\
    \ i in 1:length(string)\n        if string[i:i+length(substring)-1] == substring\n\
    \            num += 1\n        end\n    end\n    return num\nend", "    times\
    \ = 0\n    for i in 1:length(string)\n        if string[i:i+length(substring)-1]\
    \ == substring\n            times += 1\n        end\n    end\n    return times\n\
    end", "    hits = 0\n    start = 1\n    for i in 1:length(string)\n        if\
    \ string[i] == substring[start]\n            start += 1\n            if start\
    \ > length(substring)\n                hits += 1\n                start = 1\n\
    \            end\n        else\n            start = 1\n        end\n    end\n\
    \    return hits\nend", "    \n    size_string = size(string, 1)\n    size_substring\
    \ = size(substring, 1)\n    num_occurrences = 0\n    \n    if size_string >= size_substring\n\
    \        for i = 1:size_string - size_substring + 1\n            if string[i:i+size_substring-1]\
    \ == substring\n                num_occurrences += 1\n            end\n      \
    \  end\n    end\n    \n    return num_occurrences\nend", "    return length(match.(Regex(substring),\
    \ string))\nend", "    #use an index to mark where we left off in the string\n\
    \    let index = 1\n    #loop through the string\n    while index<=length(string)\n\
    \        #use find to find the substring in the string starting at index\n   \
    \     let pos = find(string, substring, index)\n        #if we have a match\n\
    \        if pos != nothing\n            #increment index to be one past the substring\n\
    \            index = pos + length(substring)\n            #increment count\n \
    \           count += 1\n        else\n            #if we get to the end without\
    \ a match, stop looping\n            return count\n        end\n    end\n    return\
    \ count\nend", "    if length(substring)>length(string)\n        return 0\n  \
    \  end\n    times = 0\n    for i in 1:length(string)-length(substring)+1\n   \
    \     if substring == string[i:i+length(substring)-1]\n            times += 1\n\
    \        end\n    end\n    return times\nend", "    count = 0\n    for i in 1:length(string)\n\
    \        sub = string[i:i+length(substring)-1]\n        if sub == substring\n\
    \            count += 1\n        end\n    end\n    return count\nend", "    return\
    \ length(findall(substring, string))\nend", "    i = 1\n    j = 1\n    count =\
    \ 0\n    while i <= length(string) - length(substring) + 1\n        while j <=\
    \ length(substring)\n            if string[i+j-1] != substring[j]\n          \
    \      break\n            end\n            j += 1\n        end\n        if j >\
    \ length(substring)\n            count += 1\n        end\n        i += 1\n   \
    \     j = 1\n    end\n    return count\nend", "    amount = 0\n    curr_index\
    \ = 0\n    while curr_index < length(string) - length(substring) + 1\n       \
    \ if string[curr_index:curr_index + length(substring)] == substring\n        \
    \    amount += 1\n            curr_index += length(substring)\n        else\n\
    \            curr_index += 1\n        end\n    end\n    return amount\nend", " \
    \   n = 1\n    while n <= length(string)\n        if string[n:end] == substring\n\
    \            return 1 + how_many_times(string[n+1:end], substring)\n        end\n\
    \        n += 1\n    end\n    return 0\nend", "    if string == \"\" || substring\
    \ == \"\"\n        return 0\n    end\n    i = 0\n    count = 0\n    while i <\
    \ length(string)\n        if string[i:i+length(substring)] == substring\n    \
    \        count += 1\n            i += length(substring)\n        else\n      \
    \      i += 1\n        end\n    end\n    return count\nend", "    start = 1\n\
    \    count = 0\n    while start <= length(string)\n        m = match(string, substring,\
    \ start)\n        if isnothing(m)\n            break\n        else\n         \
    \   count += 1\n            start = m.stop\n        end\n    end\n    return count\n\
    end", "    count = 0\n    for i = 1:length(string)\n        for j = 1:length(substring)\n\
    \            if string[i+j-1] != substring[j]\n                break\n       \
    \     end\n            if j == length(substring)\n                count += 1\n\
    \            end\n        end\n    end\n    return count\nend", "    return length(findall(string,\
    \ substring))\nend", "    n = length(substring)\n    count = 0\n    for i in 1:length(string)-length(substring)+1\n\
    \        substr = string[i:i+n-1]\n        if substr == substring\n          \
    \  count += 1\n        end\n    end\n    return count\nend", '    counter = 0',
  "    \n    matches = 0\n    for i in 1:length(string)\n        substrings = string[i:end]\n\
    \        if startswith(substrings, substring) == true\n            matches +=\
    \ 1\n        end\n    end\n    return matches\nend", "    return length(findall(substring,\
    \ string))\nend", "    # base case\n    if endswith(string, substring)\n     \
    \   return 1\n    else\n        return 0\n    end\n    \n    # remove last character\
    \ from string and call how_many_times again\n    remove_last(string)\n    return\
    \ how_many_times(string, substring) + 1\nend\n    \n    \n# function remove_last(string::String)::String\n\
    #     \"\"\" Remove last character from string.\n#     >>> remove_last('abc')\n\
    #     'ab'\n#     \"\"\"\n#     return string[1:end-1]\n# end", "    if substring\
    \ == \"\"\n        return 0\n    end\n    count = 0\n    for i in 1:length(string)\n\
    \        if string[i:i+length(substring)-1] == substring\n            count +=\
    \ 1\n        end\n    end\n    return count\nend", "    if isempty(substring)\n\
    \        return 0\n    end\n    offset = 1\n    times = 0\n    for i in 1:length(string)\n\
    \        if string[i] == substring[offset]\n            offset += 1\n        \
    \    if offset == length(substring) + 1\n                times += 1\n        \
    \        offset = 1\n            end\n        else\n            offset = 1\n \
    \       end\n    end\n    return times\nend", "    substr_len = length(substring)\n\
    \    count = 0\n    for i in 0:substr_len:length(string)-substr_len\n        if\
    \ string[i+1:i+substr_len+1] == substring\n            count += 1\n        end\n\
    \    end\n    return count\nend", "    if substring == \"\"\n        return 0\n\
    \    end\n    count = 0\n    ix = 0\n    while ix != -1\n        ix = findfirst(string,\
    \ substring, ix+1)\n        if ix != -1\n            count += 1\n        end\n\
    \    end\n    return count\nend", "    str_length = length(string)\n    sub_length\
    \ = length(substring)\n    count::Int64 = 0\n    for i in 1:str_length\n     \
    \   if string[i:i+sub_length-1] == substring\n            count += 1\n       \
    \ end\n    end\n    return count\nend", "    count = 0\n    for i in 1:length(string)\n\
    \        if substring == string[i:i+length(substring)-1]\n            count +=\
    \ 1\n        end\n    end\n    return count\nend", "    count = 0\n    # find\
    \ the first occurrence of the substring\n    start_i = search(string, substring)\n\
    \    while start_i != -1\n        count += 1\n        # find the next occurrence\
    \ of the substring\n        start_i = search(string, substring, start_i + 1)\n\
    \    end\n    return count\nend", "    \n    found_substrings = 0\n    substring_length\
    \ = length(substring)\n    string_length = length(string)\n    \n    for i in\
    \ 1:string_length - substring_length + 1\n        if string[i:i+substring_length-1]\
    \ == substring\n            found_substrings += 1\n        end\n    end\n    \n\
    \    return found_substrings\nend", "    k = 0\n    l = length(substring)\n  \
    \  for i in 1:length(string)\n        if string[i:i+l-1] == substring\n      \
    \      k += 1\n        end\n    end\n    return k\nend", "    \n    # Naive string\
    \ search\n    i = 1\n    count = 0\n    while i < length(string)\n        found\
    \ = true\n        for j in 1:length(substring)\n            if i + j - 1 > length(string)\
    \ || substring[j] != string[i + j - 1]\n                found = false\n      \
    \          break\n            end\n        end\n        if found\n           \
    \ count += 1\n        end\n        i += 1\n    end\n    return count\nend", " \
    \   (\n        index = find(string, substring, 1)\n        counts = 0\n      \
    \  while index !== nothing\n            counts += 1\n            index = find(string,\
    \ substring, index + 1)\n        end\n        return counts\n    )\nend\n\"\"\"\
    Find how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa',\
    \ 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"", "   \
    \ if string == \"\" || substring == \"\"\n        return 0\n    end\n    count\
    \ = 0\n    index = 0\n    while index != 0 || index == 0\n        index = findfirst(string,\
    \ substring)\n        if index == nothing\n            break\n        end\n  \
    \      count += 1\n        string = string[index+length(substring):end]\n    end\n\
    \    return count\nend", "    if string == \"\"\n        return 0\n    end", " \
    \   len = length(substring)\n    base = length(string) - len + 1\n    @inbounds\
    \ for i in 1:base\n        if string[i:i+len-1] == substring\n            return\
    \ i\n    end\n    return 0\nend", "    return length(findall(r\"$substring\",\
    \ string))\nend", "    return length(matchall(substring, string))\nend", "   \
    \ # Replace this comment with your code\n    n, m = length(string), length(substring)\n\
    \    if m > n\n        return 0\n    end\n    return sum([1 for i in 1:n-m+1 if\
    \ string[i:i+m-1] == substring])\nend", "    num_times_found = 0\n    idx = findnext(string,\
    \ substring, 1)\n    while idx !== nothing\n        num_times_found += 1\n   \
    \     idx = findnext(string, substring, idx + 1)\n    end\n    return num_times_found\n\
    end", "    count = 0\n    i = 1\n    while i <= length(string) - length(substring)\
    \ + 1\n        if string[i:i+length(substring)-1] == substring\n            count\
    \ += 1\n        end\n        i += 1\n    end\n    return count\nend", "    if\
    \ isempty(substring)\n        return 0\n    end\n    if string == substring\n\
    \        return 1\n    end\n    if lastindex(string, substring) == -1\n      \
    \  return 0\n    end\n    return lastindex(string, substring) - firstindex(string,\
    \ substring) + 1\nend", "    n::Int64 = 0\n    for i in 1:length(string)\n   \
    \     if string[i:end]==substring\n            n += 1\n        end\n    end\n\
    \    return n\nend", "    \"\"\" Base Case\"\"\"\n    if length(string) < length(substring)\
    \ \n        return 0\n    elseif string[1:length(substring)] == substring\n  \
    \      return 1 + how_many_times(string[2:end], substring)\n    else\n       \
    \ return how_many_times(string[2:end], substring)\n    end\nend", "    i = 1\n\
    \    count = 0\n    n = length(string)\n    m = length(substring)\n    while (i\
    \ <= n-m+1)\n        if string[i:i+m-1] == substring\n            count += 1\n\
    \            i += m\n        else\n            i += 1\n        end\n    end\n\
    \    return count\nend\n ", "    count = 0\n    for i in 1:length(string)\n  \
    \      if string[i:i+length(substring)-1] == substring\n            count += 1\n\
    \        end\n    end\n    return count\nend", "    start = 1\n    count = 0\n\
    \    while start <= length(string) - length(substring) + 1\n        if string[start:(start\
    \ + length(substring) - 1)] == substring\n            count += 1\n        end\n\
    \        start += 1\n    end\n    return count\nend", "    how_many_times = length(match.(r\"\
    $substring\", split(string, \"$substring\")))\nend\n \nprintln(how_many_times('',\
    \ 'a'))\nprintln(how_many_times('aaa', 'a'))\nprintln(how_many_times('aaaa', 'aa'))\n\
    \ \n \n ", "    count = 0\n    for i in 1:length(string)\n        if occursin(substring,\
    \ string[i:end])\n            count += 1\n        end\n    end\n    return count\n\
    end", '    if substring == "" return 0 end', "    num_ocurrences = 0\n    if string\
    \ == \"\" || substring == \"\"\n        return num_ocurrences\n    end\n    for\
    \ i in 1:length(string)\n        if string[i:i+length(substring)-1] == substring\n\
    \            num_ocurrences += 1\n        end\n    end\n    return num_ocurrences\n\
    end", "    len_substring = length(substring)\n    if len_substring == 0\n    \
    \    return 0\n    end\n    if len_substring == 1\n        return length(string)\n\
    \    end\n    n = 0\n    for i in 1:length(string)\n        if string[i:i+len_substring-1]\
    \ == substring\n            n += 1\n        end\n    end\n    return n\nend",
  "    if length(substring) > length(string)\n        return 0\n    end\n    sub_len\
    \ = length(substring)\n    i = 1\n    n = 0\n    while i <= length(string) - sub_len\
    \ + 1\n        if string[i:i+sub_len-1] == substring\n            n += 1\n   \
    \         i += sub_len\n        else\n            i += 1\n        end\n    end\n\
    \    return n\nend", "    # code goes here\nend", "    count = 0\n    if substring\
    \ == \"\" return 0 end\n    for i in 1:length(string) - length(substring) + 1\n\
    \        if string[i:i+length(substring)-1] == substring \n            count +=\
    \ 1\n        end\n    end\n    return count\nend", "    if length(substring) >\
    \ length(string)\n        return 0\n    end\n    return length(string) - length(replace(string,\
    \ substring)) / length(substring)\nend", "    if(string == \"\" || substring ==\
    \ \"\")\n        return 0\n    end\n    count = 0\n    for i in 1:length(string)\n\
    \        if(string[i:i+length(substring)-1] == substring)\n            count +=\
    \ 1\n        end\n    end\n    return count\nend", "  if length(substring) > length(string)\
    \ \n    return 0\n  end\n  return findall(r\"$substring\", string)[2] - 1\nend",
  "    if length(substring) > length(string)\n        return 0\n    end\n    count\
    \ = 0\n    for i = 1:length(string)\n        if string[i:i+length(substring)-1]\
    \ == substring\n            count += 1\n        end\n    end\n    return count\n\
    end", "    num_times = 0\n    if substring in string\n        locs = findall(string,\
    \ substring)\n        num_times = size(locs, 1)\n    end\n    return num_times\n\
    end", "    if string == \"\" || substring == \"\"\n        return 0\n    end\n\
    \    last_index = -1\n    result = 0\n    while true\n        last_index = search(string,\
    \ substring, last_index + 1)\n        if last_index == -1\n            break\n\
    \        end\n        result += 1\n    end\n    return result\nend", "    how_many_times\
    \ = 0\n    for i in 1:length(string)\n        for j in 1:length(substring)\n \
    \           if substring[j] == string[i]\n                how_many_times += 1\n\
    \            else\n                how_many_times = 0\n            end\n     \
    \   end\n    end\n    return how_many_times\nend", "    ntimes = 0\n    m = length(substring)\n\
    \    for ii = 1:length(string)-m+1\n        if string[ii:ii+m-1] == substring\n\
    \            ntimes += 1\n        end\n    end\n    return ntimes\nend", "   \
    \ count = 0\n    n = length(string)\n    k = length(substring)\n    for i in 1:n-k+1\n\
    \        if string[i:i+k-1] == substring\n            count += 1\n        end\n\
    \    end\n    return count\nend", "    if substring == \"\" \n        return 0\n\
    \    end\n    # search for any occurence of substring inside string\n    return\
    \ count(string, substring) + how_many_times(string[2:end], substring)\nend", " \
    \   len = length(substring)\n    occurences = []\n    for i in 1:length(string)\n\
    \        if string[i] == substring[1]\n            push!(occurences, i)\n    \
    \    end\n    end\n    @assert !isempty(occurences)\n    result = 0\n    for o\
    \ in occurences\n        if o + len <= length(string)\n            is_substring\
    \ = true\n            for j in 1:len\n                if string[o + j - 1] !=\
    \ substring[j]\n                    is_substring = false\n                   \
    \ break\n                end\n            end\n            if is_substring\n \
    \               result += 1\n            end\n        end\n    end\n    return\
    \ result\nend", "    n = length(substring)\n    iters = length(string) - n + 1\n\
    \    f = (x -> string[x:x+n-1]==substring)\n    return sum(f.(1:iters))\nend",
  "    if string == \"\" || substring == \"\"\n        return 0\n    end\n    left\
    \ = nextind(string, substring)\n    cnt = 0\n    while left != -1\n        cnt\
    \ += 1\n        left = nextind(string, substring, left + 1)\n    end\n    return\
    \ cnt\nend", "    s = 0\n    for i = 1:length(string)\n        if string[i:i+length(substring)-1]\
    \ == substring\n            s += 1\n        end\n    end\n    return s\nend\n ",
  "    count = 0\n    for i in 1:length(string)\n        count += tryparse(Int64,\
    \ string[i:i+length(substring)-1] == substring)\n    end\n    return count\nend",
  "    if string == \"\" \n        return 0\n    end\n    if substring == \"\"\n \
    \       return length(string) + 1\n    end\n    count = 0\n    max_index = length(string)\
    \ - length(substring) + 1\n    for i in 1:max_index\n        if string[i:i+length(substring)-1]\
    \ == substring\n            count += 1\n        end\n    end\n    return count\n\
    end", "    # count the number of times substring appears in string\n    count\
    \ = 0\n    for i in 1:length(string)\n        m = match(string[i:end], substring)\n\
    \        if m != nothing\n            count += 1\n        end\n    end\n    return\
    \ count\nend", "    match string in\n        \"\" => 0\n        else => \n   \
    \         count = 0\n            string = string[string.index(substring) : length(string)]\n\
    \            while contains(string, substring)\n                count += 1\n \
    \               string = string[string.index(substring) + 1 : length(string)]\n\
    \            end\n            count\n    end\nend", "    substr_len = length(substring)\n\
    \    str_len = length(string)\n    if substr_len == 0 || str_len == 0\n      \
    \  return 0\n    end\n    count = 0\n    for i in 1:str_len-substr_len+1\n   \
    \     substr = string[i:i+substr_len-1]\n        if substr == substring\n    \
    \        count += 1\n        end\n    end\n    return count\nend", "    return\
    \ length(matchall(substring, string))\nend", "    n = 0\n    for i in 1:length(string)\
    \ - length(substring) + 1\n        n += (string[i:i+length(substring)] == substring)\n\
    \    end\n    return n\nend", "    count = 0\n    index = 1\n    @inbounds while\
    \ index <= length(string)\n        subindex = findfirst(string[index:end], substring)\n\
    \        if subindex == nothing\n            break\n        end\n        index\
    \ += subindex\n        count += 1\n    end\n    return count\nend", "    if length(substring)\
    \ > length(string)\n        return 0\n    end\n    if length(substring) == 0\n\
    \        return 0\n    end\n    substring_index = findfirst(string, substring)\n\
    \    counter = 0\n    while substring_index != 0\n        counter += 1\n     \
    \   substring_index = findfirst(string[substring_index+1:end], substring)\n  \
    \  end\n    return counter\nend", "    count = 0\n    for i in 1:length(string)\n\
    \        if string[i] == substring[1]\n            if string[i:(i+length(substring)-1)]\
    \ == substring\n                count += 1\n            end\n        end\n   \
    \ end\n    return count\nend", "    n_times = 0\n    for i = 1:length(string)\n\
    \        if string[i:i+length(substring)-1] == substring\n            n_times\
    \ += 1\n        end\n    end\n    return n_times\nend\n    ", "    return findall(r\"\
    $substring\", string).size\nend", "    if substring == \"\"\n        return 0\n\
    \    end\n    return length(findall(substring, string))\nend", "    if string==\"\
    \" || substring==\"\" \n        return 0\n    end\n    count=0\n    i=1\n    while\
    \ i<=length(string)-length(substring)+1\n        if string[i:i+length(substring)-1]==substring\n\
    \            count+=1\n            i+=length(substring)\n        else\n      \
    \      i+=1\n        end\n    end\n    return count\nend", "    pos_last_matching\
    \ = 0\n    count = 0\n    while true\n        pos_last_matching = findfirst(string,\
    \ substring, overlap=true, offset=pos_last_matching+1)\n        if pos_last_matching\
    \ == nothing\n            break\n        end\n        count += 1\n    end\n  \
    \  return count\nend", "    # Nothing to search\n    if substring == \"\"\n  \
    \      return 0\n    end\n    # Nothing to search in\n    if string == \"\"\n\
    \        return 0\n    end\n    # A substring cant be longer than the string,\
    \ \n    # so there is nothing to search for\n    if length(substring) > length(string)\n\
    \        return 0\n    end\n    # The substring is as long as the string so it\
    \ can only be found once\n    if length(substring) == length(string)\n       \
    \ if string == substring\n            return 1\n        else\n            return\
    \ 0\n        end\n    end\n    count = 0\n    for i in 1:length(string)\n    \
    \    # Search for the substring\n        if string[i:i+length(substring)-1] ==\
    \ substring\n            count += 1\n        end\n    end\n    return count\n\
    end", "    a = 1\n    contador = 0\n    for i in 1:length(string)\n        if\
    \ string[i] == substring[a]\n            a += 1\n            if a == length(substring)+1\n\
    \                contador += 1\n                a = 1\n        else\n        \
    \    a = 1\n        end\n    end\n    return contador\nend", "    if string ==\
    \ \"\"\n        return 0\n    end\n    n = length(string)\n    m = length(substring)\n\
    \    s = z_algorithm(substring)\n    res = 0\n    i = 1\n    while i <= n\n  \
    \      if substring == string[i:i+m-1]\n            res += 1\n            i +=\
    \ m\n        else\n            res += 1\n            i += s[end] + 1\n       \
    \ end\n    end\n    return res\nend", "    if substring == \"\"\n        return\
    \ 0\n    end\n    temp = 0\n    index = string.index(substring)\n    while index\
    \ != nothing\n        temp += 1\n        index = string.index(substring, index+1)\n\
    \    end\n    return temp\nend", "    N = length(string)\n    M = length(substring)\n\
    \    m = zeros(Int64,N-M+1)\n    for i = 1:N-M+1\n        if string[i:i+M-1] ==\
    \ substring\n            m[i] = 1\n        end\n    end\n    return sum(m)\nend",
  "  len_substr = length(substring)\n  start_indices = map(x -> strfind(string, substring,\
    \ overlapping=true)[x][1], 1:length(strfind(string, substring, overlapping=true)))\n\
    \  frequencies = map(x -> count(start_indices .== x), unique(start_indices))\n\
    \  sum(frequencies)\nend", "    s = length(string)\n    sub = length(substring)\n\
    \    count = 0\n    if s == 0 || sub == 0\n        return 0\n    end\n    if s\
    \ < sub\n        return 0\n    end\n    for i in 1:s\n        if i+sub-1 <= s\n\
    \            if string[i:i+sub-1] == substring\n                count += 1\n \
    \           end\n        end\n    end\n    return count\nend", "    string_length\
    \ = length(string)\n    substring_length = length(substring)\n    if string_length\
    \ < substring_length\n        return 0\n    end\n    if string_length == substring_length\
    \ && string == substring\n        return 1\n    end\n    n_substrings = 1\n  \
    \  for i in 1:substring_length\n        if string[i] == substring[1]\n       \
    \     if string[i:i+substring_length-1] == substring[2:substring_length]\n   \
    \             n_substrings += 1\n            end\n        end\n    end\n    return\
    \ n_substrings\nend", "    count::Int64 = 0\n    string_length::Int64 = length(string)\n\
    \    substring_length::Int64 = length(substring)\n    for i::Int64 in 1:string_length\n\
    \        if string[i:i+substring_length-1] == substring\n            count +=\
    \ 1\n        end\n    end\n    return count\nend", "    # Count the number of\
    \ times that the substring is found in the string\n    count = 0\n    for i =\
    \ 1:length(string)\n        # Search for the substring in the current segment\n\
    \        if string[i:end] |> findfirst(substring) != nothing\n            count\
    \ += 1\n        end\n    end\n    return count\nend", "    count = 0\n    for\
    \ i in 1:length(string)\n        if string[i:end] == substring\n            count\
    \ += 1\n        end\n    end\n    return count\nend", "    (offset = findnext(string,\
    \ substring) == 0) ? 0 : 1 + how_many_times(string[offset:end], substring)\nend",
  "    if length(substring) > length(string)\n        return 0\n    end\n    counter\
    \ = 0\n    for i = 1:length(string)\n        if string[i:i+length(substring)-1]\
    \ == substring\n            counter += 1\n        end\n    end\n    return counter\n\
    end", "    ret_cnt = 0\n    lsub = length(substring)\n    for i in 1:length(string)\n\
    \        if substring == string[i:i+lsub-1]\n            ret_cnt += 1\n      \
    \  end\n    end\n    return ret_cnt\nend", "    strstart = 1\n    count = 0\n\
    \    while strstart + length(substring) - 1 <= length(string)\n        if string[strstart:strstart+length(substring)-1]\
    \ == substring\n            count += 1\n        end\n        strstart += 1\n \
    \   end\n    return count\nend", "    substr = r\"$0\" * length(substring)\n \
    \   regex = regex(substr, \"$0\")\n    matches = match(regex, string)\n    return\
    \ length(matches) - 1\nend", "    return length(findall(string, substring))\n\
    end", "    l = length(substring)\n    c = 0\n    for i in 1:length(string)-l+1\n\
    \        if string[i:i+l-1] == substring\n            c += 1\n        end\n  \
    \  end\n    return c\nend", "    count = 0\n    for i = 1:length(string)\n   \
    \     if string[i:end] == substring\n            count += 1\n        end\n   \
    \ end\n    return count\nend", "    count::Int64 = 0\n    i::Int64 = 1\n    while\
    \ i <= length(string) - length(substring) + 1\n        if string[i:i+length(substring)-1]\
    \ == substring\n            count += 1\n        end\n        i += 1\n    end\n\
    \    return count\nend", "    if length(substring) > length(string)\n        return\
    \ 0\n    end\n    string_s = String(string)\n    substr_s = String(substring)\n\
    \    times = 0\n    for i in 1:length(string)\n        if string_s[i:i+length(substr_s)-1]\
    \ == substr_s\n            times += 1\n        end\n    end\n    return times\n\
    end\n# test_how_many_times()", "    idx = lastindex(string, substring)\n    if\
    \ idx == 0\n        return 0\n    else\n        return 1 + how_many_times(string[idx:end],\
    \ substring)\n    end\nend", "    count = 0\n    idx = 1\n    while idx <= length(string)\
    \ - length(substring) + 1\n        if string[idx:idx+length(substring)-1] == substring\n\
    \            count += 1\n        end\n        idx += 1\n    end\n    return count\n\
    end", "    N = length(string)\n    M = length(substring)\n    sum = 0\n    for\
    \ i in 1:N\n        if string[i:i+M-1] == substring\n            sum += 1\n  \
    \      end\n    end\n    return sum\nend", "    i = 1\n    total = 0\n    while\
    \ (i + length(substring) - 1) <= length(string)\n        if string[i:i+length(substring)]\
    \ == substring\n            total += 1\n        end\n        i += 1\n    end\n\
    \    return total\nend", "    return length(findall(r\"(?=($substring))\", string))\n\
    end\n```", "    n=0\n    for i in 1:length(string)-length(substring)+1\n     \
    \   if string[i:i+length(substring)-1]==substring\n            n+=1\n        end\n\
    \    end\n    return n\nend", "    substr_len = length(substring)\n    if substr_len\
    \ == 0\n        return 0\n    end\n    if length(string) < substr_len\n      \
    \  return 0\n    end\n    times = 0\n    i = 1\n    while i <= length(string)\
    \ - substr_len + 1\n        if string[i:i+substr_len-1] == substring\n       \
    \     times += 1\n            i += substr_len\n        else\n            i +=\
    \ 1\n        end\n    end\n    return times\nend", "    count = 0\n    for i =\
    \ 1:length(string)\n        if string[i:i+length(substring)-1] == substring\n\
    \            count += 1\n        end\n    end\n    return count\nend", "    count\
    \ = 0\n    for i = 1:length(string) - length(substring) + 1\n        if string[i:i+length(substring)\
    \ - 1] == substring\n            count += 1\n        end\n    end\n    return\
    \ count\nend", "    count = 0\n    start = 1\n    while(start <= length(string))\n\
    \        count += length(match(string[start:end], substring).match)\n        start\
    \ += 1\n    end\n    return count\nend", "    if substring == \"\" \n        return\
    \ 0\n    end\n    if string == \"\"\n        return 0\n    end\n    return length(first.((eachmatch(r\"\
    $substring\", string),)))\nend", "    count = 0\n    for i in 1:length(string)\n\
    \        if string[i:i+length(substring)-1] == substring\n            count +=\
    \ 1\n        end\n    end\n    return count\nend", "    if length(substring) ==\
    \ 0\n        return 0\n    end\n    total = 0\n    for i = 1:length(string)\n\
    \        if string[i] == substring[1]\n            j = i\n            k = 1\n\
    \            while k < length(substring) && j+1 <= length(string) && string[j+1]\
    \ == substring[k+1]\n                j += 1\n                k += 1\n        \
    \    end\n            if k == length(substring)\n                total += 1\n\
    \            end\n        end\n    end\n    return total\nend", "    res = 0 \n\
    \    if substring == \"\"\n        return res\n    end\n    for i = 1:length(string)\n\
    \        if i + length(substring) - 1 <= length(string)\n            if string[i:i+length(substring)-1]\
    \ == substring\n                res += 1\n            end\n        end\n    end\n\
    \    return res\nend", "    length_substring = length(substring)\n    length_string\
    \ = length(string)\n    if length_substring == 0 || length_string == 0\n     \
    \   return 0\n    end\n    counter = 0\n    for i in 1:length_string - length_substring\
    \ + 1\n        if string[i:i+length_substring-1] == substring\n            counter\
    \ += 1\n        end\n    end\n    return counter\nend", "    count = 0\n    n\
    \ = length(string)\n    k = length(substring)\n    for i in 1:n-k+1\n        if\
    \ string[i:i+k-1] == substring\n            count += 1\n        end\n    end\n\
    \    return count\nend", "    if isempty(substring) \n        return 0\n    end\n\
    \    if isempty(string)\n        return 0\n    end\n    end_at = lastindex(string)\n\
    \    count = 0\n    while index(string, substring) <= end_at\n        count +=\
    \ 1\n        string = replace(string, substring, \"\")\n    end\n    return count\n\
    end", "    if substring == \"\" \n        return 0\n    end\n    if length(substring)\
    \ > length(string)\n        return 0\n    end\n    count = 0\n    last_position\
    \ = findlast(string, substring)\n    while last_position > 0\n        count +=\
    \ 1\n        string = string[last_position+1:end]\n        last_position = findlast(string,\
    \ substring)\n    end\n    return count\nend", "    found = findnext(string, substring,\
    \ 1)\n    num_found = 0\n    while found !== nothing\n        num_found += 1\n\
    \        found = findnext(string, substring, found + 1)\n    end\n    return num_found\n\
    end", "    return count(eachmatch(Regex(substring), string))\nend", "    return\
    \ count_overlapping(string, substring)\nend", "    if length(substring) > length(string)\
    \ \n        return 0\n    end\n    Ns = length(string)\n    Nsub = length(substring)\n\
    \    if Ns == Nsub\n        if string == substring\n            return 1\n   \
    \     else\n            return 0\n        end\n    end\n    counter = 0\n    index\
    \ = 0\n    while index < Ns - Nsub + 1\n        if substring == string[index:index+Nsub]\n\
    \            counter += 1\n            index += Nsub\n        else\n         \
    \   index += 1\n        end\n    end\n    return counter\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
