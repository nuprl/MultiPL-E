name: HumanEval_48_is_palindrome
language: jl
results:
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) <= 1\n        return true\n    else\n        if text[1]\
    \ == text[end]\n            return is_palindrome(text[2:end-1])\n        else\n\
    \            return false\n        end\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    return text == reverse(text)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0 || length(text) == 1\n        return true\n    elseif\
    \ text[1] == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n\
    \        return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    text == reverse(text)\nend\n```\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpibt6pyr3.jl:15\nin expression starting at\
    \ /tmp/tmpibt6pyr3.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    return text == reverse(text)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    return is_palindrome_helper(text, reverse(text))\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\
    \t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t\
    @test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\") == true)\n\t\
    @test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\") == false)\n\
    end\n"
  stdout: "b'test set: Error During Test at /tmp/tmpuydaup4i.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(\"\") == true\\n  UndefVarError: is_palindrome_helper\
    \ not defined\\n  Stacktrace:\\n   [1] is_palindrome(text::String)\\n     @ Main\
    \ /tmp/tmpuydaup4i.jl:13\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpuydaup4i.jl:20 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpuydaup4i.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpuydaup4i.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(\"aba\") == true\\n  UndefVarError: is_palindrome_helper not defined\\\
    n  Stacktrace:\\n   [1] is_palindrome(text::String)\\n     @ Main /tmp/tmpuydaup4i.jl:13\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpuydaup4i.jl:21 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpuydaup4i.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpuydaup4i.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"aaaaa\") == true\\n  UndefVarError: is_palindrome_helper not defined\\\
    n  Stacktrace:\\n   [1] is_palindrome(text::String)\\n     @ Main /tmp/tmpuydaup4i.jl:13\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpuydaup4i.jl:22 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpuydaup4i.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpuydaup4i.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"zbcd\") == false\\n  UndefVarError: is_palindrome_helper not defined\\\
    n  Stacktrace:\\n   [1] is_palindrome(text::String)\\n"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    text == reverse(text)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if text==reverse(text)\n        return true\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    text == reverse(text)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n        if length(text) == 0 || length(text) == 1\n            return true\n\
    \        elseif text[1] == text[end]\n            return is_palindrome(text[2:end-1])\n\
    \        else\n            return false\n        end\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\
    \t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t\
    @test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\") == true)\n\t\
    @test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\") == false)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpw3k_q0zd.jl:21\nin expression starting at /tmp/tmpw3k_q0zd.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    j = length(text)\n\
    \    for i in 1:length(text)\n        if text[i] != text[j]\n            return\
    \ false\n        end\n        j = j - 1\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\"\
    ) == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\")\
    \ == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    return text == reverse(text)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    #strips out any non-word characters and lowercases all characters\n  \
    \  str = strip(lowercase(text))\n    #splits string into a list of characters\n\
    \    letters = strsplit(str, \"\")\n    #reverses string\n    str_rev = rev(letters)\n\
    \    #re-combines to create a string\n    rev_str = string(str_rev)\n    #checks\
    \ if reversed string equals input string\n    return(str == rev_str)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\"\
    ) == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\")\
    \ == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpdbvkj8d6.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"\") == true\\n  UndefVarError: strsplit\
    \ not defined\\n  Stacktrace:\\n   [1] is_palindrome(text::String)\\n     @ Main\
    \ /tmp/tmpdbvkj8d6.jl:16\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpdbvkj8d6.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpdbvkj8d6.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpdbvkj8d6.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"aba\") == true\\n  UndefVarError: strsplit not defined\\n  Stacktrace:\\\
    n   [1] is_palindrome(text::String)\\n     @ Main /tmp/tmpdbvkj8d6.jl:16\\n  \
    \ [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpdbvkj8d6.jl:30 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpdbvkj8d6.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpdbvkj8d6.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(\"aaaaa\") == true\\n  UndefVarError: strsplit not defined\\n  Stacktrace:\\\
    n   [1] is_palindrome(text::String)\\n     @ Main /tmp/tmpdbvkj8d6.jl:16\\n  \
    \ [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpdbvkj8d6.jl:31 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpdbvkj8d6.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpdbvkj8d6.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(\"zbcd\") == false\\n  UndefVarError: strsplit not defined\\n  Stacktrace:\\\
    n   [1] is_palindrome(text::String)\\n     @ Main /tmp/tmpdbvkj8d6.jl:16\\n  \
    \ [2] macro"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    return text == reverse(text)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) <= 1 return true end\n    i, j = 1, length(text)\n   \
    \ while i <= j\n        if text[i] != text[j] return false end\n        i += 1\n\
    \        j -= 1\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    is_even = 0==mod(length(text),2)\n    #even strings \n    if is_even\n\
    \        #check if half of string == reverse of other half\n        text[1:div(length(text),2)]\
    \ ==reverse(text[div(length(text),2)+1:end])\n    else\n        #check if odd\
    \ part of string == reverse of odd part of string \n        text[1:div(length(text),2)]\
    \ ==reverse(text[div(length(text),2)+2:end])\nend\n@test is_palindrome('') ==\
    \ true\n@test is_palindrome('aba') == true\n@test is_palindrome('aaaaa') == true\n\
    @test is_palindrome('zbcd') == false\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid empty character literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp27zo58m_.jl:22\nin expression starting at\
    \ /tmp/tmp27zo58m_.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    N = length(text)\n    half_length = div(N, 2)\n    for i in 1:half_length\n\
    \        if text[i] != text[N-i+1]\n            return false\n        end\n  \
    \  end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    return text == reverse(text)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if text == reverse(text)\n        return true\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    return text == reverse(text)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    l = length(text)\n    for i in 1:ceil(l/2)\n        if text[i] != text[l-i+1]\n\
    \            return false\n        end\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\
    \t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t\
    @test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\") == true)\n\t\
    @test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\") == false)\n\
    end\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if text == \"\"\n        return true\n    end\n    if text[1] == text[end]\n\
    \        is_palindrome(text[2:end-1])\n    else\n        return false\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    len = length(text)\n    for i in 1:len\n        if text[i] != text[len+1-i]\n\
    \            return false\n        end\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\
    \t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t\
    @test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\") == true)\n\t\
    @test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\") == false)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if text == reverse(text)\n        return true\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if text == \"\"\n        return true\n    end\n    # Build a reverse of\
    \ text for comparison.\n    reverse = \"\"\n    for i = 1:length(text)\n     \
    \   push!(reverse, text[length(text) - i + 1])\n    end\n    return reverse ==\
    \ text\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: "b'test set: Error During Test at '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    return text == reverse(text)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    text_clean = replace(text, \" \" => \"\")\n    length = length(text_clean)\n\
    \    mid = div(length, 2)\n    for i in 1:mid\n        if text_clean[i] != text_clean[length\
    \ - i + 1]\n            return false\n        end\n    end\n    return true\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpkoj_r37h.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"\") == true\\n  UndefVarError: length\
    \ not defined\\n  Stacktrace:\\n   [1] is_palindrome(text::String)\\n     @ Main\
    \ /tmp/tmpkoj_r37h.jl:14\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpkoj_r37h.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpkoj_r37h.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpkoj_r37h.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"aba\") == true\\n  UndefVarError: length not defined\\n  Stacktrace:\\\
    n   [1] is_palindrome(text::String)\\n     @ Main /tmp/tmpkoj_r37h.jl:14\\n  \
    \ [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpkoj_r37h.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpkoj_r37h.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpkoj_r37h.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"aaaaa\") == true\\n  UndefVarError: length not defined\\n  Stacktrace:\\\
    n   [1] is_palindrome(text::String)\\n     @ Main /tmp/tmpkoj_r37h.jl:14\\n  \
    \ [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpkoj_r37h.jl:30 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpkoj_r37h.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpkoj_r37h.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(\"zbcd\") == false\\n  UndefVarError: length not defined\\n  Stacktrace:\\\
    n   [1] is_palindrome(text::String)\\n     @ Main /tmp/tmpkoj_r37h.jl:14\\n  \
    \ [2] macro expansi"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    for i = 1:length(text) \n        if text[i] != text[length(text)-i+1]\
    \ \n            return false \n        end \n    end \n    return true \nend \n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    \n    if text == reverse(text)\n        return true\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if text == \"\"\n        return true\n    end\n    if lowercase(text[1])\
    \ != lowercase(text[end])\n        return false\n    end\n    return is_palindrome(text[2:end-1])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0 || length(text) == 1\n        return true\n    elseif\
    \ lowercase(text[1]) != lowercase(text[end])\n        return false\n    else\n\
    \        return is_palindrome(text[2:end-1])\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n  \"\"\"\n  Checks if given string is a palindrome\n  >>> is_palindrome('')\n\
    \  True\n  >>> is_palindrome('aba')\n  True\n  >>> is_palindrome('aaaaa')\n  True\n\
    \  >>> is_palindrome('zbcd')\n  False\n  \"\"\"\n    if length(text) < 2\n   \
    \     return true\n    elseif text[1] != text[end]\n        return false\n   \
    \ else\n        return is_palindrome(text[2:end-1])\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\
    \t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t\
    @test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\") == true)\n\t\
    @test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\") == false)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    text_length = length(text)\n    if text_length == 0\n        return true\n\
    \    end\n    if text_length == 1\n        return true\n    end\n    if text[1]\
    \ != text[text_length]\n        return false\n    end\n    return is_palindrome(text[2:text_length-1])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    # extract characters from text and store in string\n    s = String()\n\
    \    while !isempty(text)\n        if(text[1] = ' ')\n            text = text[2:end]\n\
    \        else\n            push!(s, text[1])\n            text = text[2:end]\n\
    \        end\n    end\n    # check if string is palindrome\n    for i in 1:length(s)\
    \ \xF7 2\n        if(s[i] != s[end-i+1])\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpmh3nhe20.jl:36\\n  Test threw\
    \ exception\\n  Expression: candidate(\"\") == true\\n  MethodError: no method\
    \ matching String()\\n  Closest candidates are:\\n    String(!Matched::String)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/boot.jl:363\\n    String(!Matched::Vector{UInt8})\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/string.jl:53\\n    String(!Matched::Symbol)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/string.jl:83\\n    ...\\\
    n  Stacktrace:\\n   [1] is_palindrome(text::String)\\n     @ Main /tmp/tmpmh3nhe20.jl:14\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpmh3nhe20.jl:36 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpmh3nhe20.jl:35\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    return text == reverse(text)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    text = lowercase(text)\n    if length(text) == 0 || length(text) == 1\n\
    \        return true\n    elseif text[1] == text[end]\n        return is_palindrome(text[2:end-1])\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    i = 1\n    while i <= length(text)\n        if text[i] != text[end - i\
    \ + 1]\n            return false\n        end\n        i += 1\n    end\n    return\
    \ true\nend\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpu_svb2kn.jl:22\nin expression starting at /tmp/tmpu_svb2kn.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    #checks to see if string is empty\n    #If empty returns true\n    if\
    \ (length(text) == 0)\n        return true\n    end\n    #checks to see if string\
    \ is one letter\n    #If only one letter returns true\n    if (length(text) ==\
    \ 1)\n        return true\n    end\n    #checks to see if the first letter is\
    \ the same as the last letter\n    #if the first and last letter are the same\
    \ then we slice the first and last letter out\n    #then we check if the string\
    \ is a palindrome \n    if (text[1] == text[end])\n        return is_palindrome(text[2:end-1])\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    text_length = length(text)\n    if text_length == 0\n        return true\n\
    \    end\n    for i in 1:floor(Int, text_length/2)\n        if text[i] != text[text_length\
    \ - i + 1]\n            return false\n        end\n    end\n    return true\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    len = length(text)\n    mid = div(len, 2)\n    for i in 1:mid\n      \
    \  if text[i] != text[len-i+1]\n            return false\n        end\n    end\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    is_palindrome = false\n    if length(text) == 0\n        is_palindrome\
    \ = true\n    else\n        mid = div(length(text), 2)\n        if text[1:mid]\
    \ == text[end-mid+1:end]\n            is_palindrome = true\n        end\n    end\n\
    \    return is_palindrome\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5kqerjda.jl:33\n  Expression: candidate(\"\
    xywyx\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5kqerjda.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5kqerjda.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5kqerjda.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    n = 0;\n    l = length(text) - 1;\n    while n < l\n        if text[n]\
    \ != text[l]\n            return false\n        end\n        n += 1\n        l\
    \ -= 1\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp9cbuoh9l.jl:30\\n  Test threw\
    \ exception\\n  Expression: candidate(\"aba\") == true\\n  BoundsError: attempt\
    \ to access 3-codeunit String at index [0]\\n  Stacktrace:\\n   [1] checkbounds\\\
    n     @ ./strings/basic.jl:216 [inlined]\\n   [2] codeunit\\n     @ ./strings/string.jl:102\
    \ [inlined]\\n   [3] getindex\\n     @ ./strings/string.jl:223 [inlined]\\n  \
    \ [4] is_palindrome(text::String)\\n     @ Main /tmp/tmp9cbuoh9l.jl:16\\n   [5]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmp9cbuoh9l.jl:30 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmp9cbuoh9l.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmp9cbuoh9l.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(\"aaaaa\") == true\\n  BoundsError: attempt to access 5-codeunit String\
    \ at index [0]\\n  Stacktrace:\\n   [1] checkbounds\\n     @ ./strings/basic.jl:216\
    \ [inlined]\\n   [2] codeunit\\n     @ ./strings/string.jl:102 [inlined]\\n  \
    \ [3] getindex\\n     @ ./strings/string.jl:223 [inlined]\\n   [4] is_palindrome(text::String)\\\
    n     @ Main /tmp/tmp9cbuoh9l.jl:16\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmp9cbuoh9l.jl:31 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmp9cbuoh9l.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmp9cbuoh9l.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(\"zbcd\") == false\\n  BoundsError: attempt to access 4-codeunit String\
    \ at index [0]\\n  Stacktrace:\\n   [1] checkbounds\\n     @ ./strings/basic.jl:216\
    \ [inlined]\\n   [2] codeunit\\n     @ ./strings/string.jl:102 [inlined]\\n  \
    \ [3] getindex\\n     @ ./strings/string.jl:223 [inlined]\\n   [4] is_palindrome(text::String)\\\
    n     @ Main /tmp/tmp9cbuoh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if text == reverse(text)\n        return true\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0 \n        return true\n    elseif length(text) ==\
    \ 1\n        return true\n    elseif text[1] == text[end]\n        return is_palindrome(text[2:end-1])\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    (text == reverse(text)) ? true : false\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    n = length(text)\n    for i in range(1, Int(ceil(n/2)) + 1)\n        if\
    \ text[i] != text[n + 1 - i]\n            return false\n    end\n    return true\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcw_u_8xo.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcw_u_8xo.jl:1\n\
    in expression starting at /tmp/tmpcw_u_8xo.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    n = length(text)\n    for i in 1:n\xF72\n        if text[i] != text[n-i+1]\n\
    \            return false\n        end\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\
    \t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t\
    @test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\") == true)\n\t\
    @test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\") == false)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    return text == reverse(text)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    return all(text[i] == text[end-i] for i in 1:floor(Int,length(text)/2))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgtuggntf.jl:21\n  Expression: candidate(\"\
    aba\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgtuggntf.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgtuggntf.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpgtuggntf.jl:24\n  Expression: candidate(\"xywyx\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgtuggntf.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgtuggntf.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgtuggntf.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) <= 1\n        return true\n    elseif first(text) != last(text)\n\
    \        return false\n    else\n        return is_palindrome(text[2:end-1])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t\
    @test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    n = length(text)\n    n2 = div(n, 2)\n    for i in 1:n2\n        if text[i]\
    \ != text[n-i+1]\n            return false\n        end\n    end\n    return true\n\
    end\n        \nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t\
    @test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    lowercase_text = lowercase(text)\n    if length(lowercase_text) == 0 ||\
    \ length(lowercase_text) == 1\n        return true\n    elseif lowercase_text[1]\
    \ == lowercase_text[end]\n        return is_palindrome(lowercase_text[2:end-1])\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    text = lowercase(text)\n    for i = 1:length(text)\n        if text[i]\
    \ != text[end-i+1]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    l = length(text)\n    for i in 1:floor(l/2)\n        if text[i] != text[l-i+1]\n\
    \            return false\n        end\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\
    \t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t\
    @test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\") == true)\n\t\
    @test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\") == false)\n\
    end\n"
  stdout: "b'test set: '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    len_text = length(text)\n    for i = 1:floor(Int, len_text/2)\n      \
    \  if text[i] != text[len_text - i + 1]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    length = length(text)\n    for i = 1:length\n        if text[i] != text[length\
    \ - i + 1]\n            return false\n        end\n    end\n    return true\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp5x1zk2cc.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate(\"\") == true\\n  UndefVarError: length\
    \ not defined\\n  Stacktrace:\\n   [1] is_palindrome(text::String)\\n     @ Main\
    \ /tmp/tmp5x1zk2cc.jl:13\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp5x1zk2cc.jl:26 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp5x1zk2cc.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmp5x1zk2cc.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"aba\") == true\\n  UndefVarError: length not defined\\n  Stacktrace:\\\
    n   [1] is_palindrome(text::String)\\n     @ Main /tmp/tmp5x1zk2cc.jl:13\\n  \
    \ [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp5x1zk2cc.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp5x1zk2cc.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmp5x1zk2cc.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"aaaaa\") == true\\n  UndefVarError: length not defined\\n  Stacktrace:\\\
    n   [1] is_palindrome(text::String)\\n     @ Main /tmp/tmp5x1zk2cc.jl:13\\n  \
    \ [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp5x1zk2cc.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp5x1zk2cc.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmp5x1zk2cc.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"zbcd\") == false\\n  UndefVarError: length not defined\\n  Stacktrace:\\\
    n   [1] is_palindrome(text::String)\\n     @ Main /tmp/tmp5x1zk2cc.jl:13\\n  \
    \ [2] macro expansi"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    s = split(text)\n    return s == reverse(s)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9ge2a5ij.jl:24\n  Expression: candidate(\"\
    zbcd\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9ge2a5ij.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9ge2a5ij.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp9ge2a5ij.jl:26\n  Expression: candidate(\"xywyz\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9ge2a5ij.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9ge2a5ij.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp9ge2a5ij.jl:27\n  Expression: candidate(\"xywzx\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9ge2a5ij.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9ge2a5ij.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9ge2a5ij.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if text == \"\" \n        return true\n    end\n    text = lowercase(text)\n\
    \    mid = div(length(text), 2) \n    i = 1\n    while i <= mid\n        if text[i]\
    \ != text[end - i + 1]\n            return false\n        end\n        i += 1\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    length = length(text)\n    for i in 1:length\n        if text[i] != text[length-i+1]\n\
    \            return false\n        end\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\
    \t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t\
    @test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\") == true)\n\t\
    @test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\") == false)\n\
    end\n"
  stdout: "b'test set: Error During Test at /tmp/tmpy0t2prj3.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate(\"\") == true\\n  UndefVarError: length\
    \ not defined\\n  Stacktrace:\\n   [1] is_palindrome(text::String)\\n     @ Main\
    \ /tmp/tmpy0t2prj3.jl:13\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpy0t2prj3.jl:26 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpy0t2prj3.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpy0t2prj3.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"aba\") == true\\n  UndefVarError: length not defined\\n  Stacktrace:\\\
    n   [1] is_palindrome(text::String)\\n     @ Main /tmp/tmpy0t2prj3.jl:13\\n  \
    \ [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpy0t2prj3.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpy0t2prj3.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpy0t2prj3.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"aaaaa\") == true\\n  UndefVarError: length not defined\\n  Stacktrace:\\\
    n   [1] is_palindrome(text::String)\\n     @ Main /tmp/tmpy0t2prj3.jl:13\\n  \
    \ [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpy0t2prj3.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpy0t2prj3.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpy0t2prj3.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"zbcd\") == false\\n  UndefVarError: length not defined\\n  Stacktrace:\\\
    n   [1] is_palindrome(text::String)\\n     @ Main /tmp/tmpy0t2prj3.jl:13\\n  \
    \ [2] macro expansi"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    return text==reverse(text)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) <= 1\n        return true\n    elseif text[1] != text[end]\n\
    \        return false\n    else\n        return is_palindrome(text[2:end-1])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t\
    @test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    strlen = length(text)\n    for i in 0:floor(Int, strlen/2) - 1\n     \
    \   if text[i] != text[strlen - i - 1]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpow9u4fwj.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(\"aba\") == true\\n  BoundsError: attempt\
    \ to access 3-codeunit String at index [0]\\n  Stacktrace:\\n   [1] checkbounds\\\
    n     @ ./strings/basic.jl:216 [inlined]\\n   [2] codeunit\\n     @ ./strings/string.jl:102\
    \ [inlined]\\n   [3] getindex\\n     @ ./strings/string.jl:223 [inlined]\\n  \
    \ [4] is_palindrome(text::String)\\n     @ Main /tmp/tmpow9u4fwj.jl:15\\n   [5]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmpow9u4fwj.jl:27 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmpow9u4fwj.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpow9u4fwj.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"aaaaa\") == true\\n  BoundsError: attempt to access 5-codeunit String\
    \ at index [0]\\n  Stacktrace:\\n   [1] checkbounds\\n     @ ./strings/basic.jl:216\
    \ [inlined]\\n   [2] codeunit\\n     @ ./strings/string.jl:102 [inlined]\\n  \
    \ [3] getindex\\n     @ ./strings/string.jl:223 [inlined]\\n   [4] is_palindrome(text::String)\\\
    n     @ Main /tmp/tmpow9u4fwj.jl:15\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmpow9u4fwj.jl:28 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmpow9u4fwj.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpow9u4fwj.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"zbcd\") == false\\n  BoundsError: attempt to access 4-codeunit String\
    \ at index [0]\\n  Stacktrace:\\n   [1] checkbounds\\n     @ ./strings/basic.jl:216\
    \ [inlined]\\n   [2] codeunit\\n     @ ./strings/string.jl:102 [inlined]\\n  \
    \ [3] getindex\\n     @ ./strings/string.jl:223 [inlined]\\n   [4] is_palindrome(text::String)\\\
    n     @ Main /tmp/tmpow9u4f"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if text == reverse(text)\n        return true\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    \n    N = length(text)\n    i = 1\n    j = N\n    \n    while (i < j)\n\
    \        if text[i] != text[j]\n            return false\n        end\n      \
    \  i = i + 1\n        j = j - 1\n    end\n    \n    return true\nend\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\"\
    ) == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\")\
    \ == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpsu5tis91.jl:28\nin expression starting at /tmp/tmpsu5tis91.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2wuhsx1y.jl:23\n  Expression: candidate(\"\
    zbcd\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2wuhsx1y.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2wuhsx1y.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp2wuhsx1y.jl:25\n  Expression: candidate(\"xywyz\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2wuhsx1y.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2wuhsx1y.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp2wuhsx1y.jl:26\n  Expression: candidate(\"xywzx\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2wuhsx1y.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2wuhsx1y.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2wuhsx1y.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    n = length(text)\n    for i in 1:n\n        if text[i] != text[n-i+1]\n\
    \            return false\n        end\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\
    \t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t\
    @test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\") == true)\n\t\
    @test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\") == false)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    for i = 1:length(text)\n        if text[i] != text[end-i+1]\n        \
    \    return false\n        end\n    end\n    return true\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\
    \t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t\
    @test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\") == true)\n\t\
    @test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\") == false)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if text == \"\"\n        return true\n    end\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvqd9lhy9.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvqd9lhy9.jl:1\n\
    in expression starting at /tmp/tmpvqd9lhy9.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if text == \"\"\n        return true\n    end\n    for index in 1:length(text)\n\
    \        if text[index] != text[end-index+1]\n            return false\n     \
    \   end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    text == reverse(text)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    text_len = length(text)\n    if text_len == 0\n        return true\n \
    \   end\n    if text_len == 1\n        return true\n    end\n    j = text_len\
    \ - 1\n    for i = 1:text_len-1\n        if text[i] != text[j]\n            return\
    \ false\n        end\n        j = j - 1\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\"\
    ) == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\")\
    \ == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj_cfg9zf.jl:35\n  Expression: candidate(\"\
    aba\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj_cfg9zf.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj_cfg9zf.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpj_cfg9zf.jl:38\n  Expression: candidate(\"xywyx\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj_cfg9zf.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj_cfg9zf.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj_cfg9zf.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    last = length(text) - 1\n    for i in 0:last\n        if text[i] != text[last-i]\n\
    \            return false\n        end\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\
    \t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t\
    @test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\") == true)\n\t\
    @test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\") == false)\n\
    end\n"
  stdout: "b'test set: Error During Test at /tmp/tmplu9fy02p.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(\"aba\") == true\\n  BoundsError: attempt\
    \ to access 3-codeunit String at index [0]\\n  Stacktrace:\\n   [1] checkbounds\\\
    n     @ ./strings/basic.jl:216 [inlined]\\n   [2] codeunit\\n     @ ./strings/string.jl:102\
    \ [inlined]\\n   [3] getindex\\n     @ ./strings/string.jl:223 [inlined]\\n  \
    \ [4] is_palindrome(text::String)\\n     @ Main /tmp/tmplu9fy02p.jl:15\\n   [5]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmplu9fy02p.jl:27 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmplu9fy02p.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmplu9fy02p.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"aaaaa\") == true\\n  BoundsError: attempt to access 5-codeunit String\
    \ at index [0]\\n  Stacktrace:\\n   [1] checkbounds\\n     @ ./strings/basic.jl:216\
    \ [inlined]\\n   [2] codeunit\\n     @ ./strings/string.jl:102 [inlined]\\n  \
    \ [3] getindex\\n     @ ./strings/string.jl:223 [inlined]\\n   [4] is_palindrome(text::String)\\\
    n     @ Main /tmp/tmplu9fy02p.jl:15\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmplu9fy02p.jl:28 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmplu9fy02p.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmplu9fy02p.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"zbcd\") == false\\n  BoundsError: attempt to access 4-codeunit String\
    \ at index [0]\\n  Stacktrace:\\n   [1] checkbounds\\n     @ ./strings/basic.jl:216\
    \ [inlined]\\n   [2] codeunit\\n     @ ./strings/string.jl:102 [inlined]\\n  \
    \ [3] getindex\\n     @ ./strings/string.jl:223 [inlined]\\n   [4] is_palindrome(text::String)\\\
    n     @ Main /tmp/tmplu9fy0"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if text == reverse(text)\n        return true\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    text == reverse(text) \nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    text == reverse(text)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if length(text) == 2\n        if text[1]\
    \ == text[2]\n            return true\n        else\n            return false\n\
    \        end\n    end\n    if length(text) == 3\n        if text[1] == text[3]\n\
    \            return true\n        else\n            return false\n        end\n\
    \    end\n    if text[1] == text[length(text)]\n        return is_palindrome(text[2:length(text)-1])\n\
    \    else\n        return false\n    end\nend\n \n \n \n \n\"\"\"\n    Runs some\
    \ unit tests.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpej9m_qe9.jl:43\nin expression starting at /tmp/tmpej9m_qe9.jl:43\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    len = length(text)\n    idx = 1\n    is_palindrome = true\n    for i in\
    \ text \n        if text[idx] != text[len - idx + 1]\n            is_palindrome\
    \ = false\n            break\n        end\n        idx += 1\n    end\n    return\
    \ is_palindrome\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0 \n        return true\n    elseif length(text) <\
    \ 2 \n        return false\n    else\n        return text[1] == text[end] && is_palindrome(text[2:end-1])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t\
    @test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9dg7pm5e.jl:27\n  Expression: candidate(\"\
    aba\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9dg7pm5e.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9dg7pm5e.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp9dg7pm5e.jl:28\n  Expression: candidate(\"aaaaa\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9dg7pm5e.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9dg7pm5e.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp9dg7pm5e.jl:30\n  Expression: candidate(\"xywyx\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9dg7pm5e.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9dg7pm5e.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9dg7pm5e.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    return lowercase(text) == reverse(lowercase(text))\nend\n```\nusing Test\n\
    \n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\
    \t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t\
    @test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\") == true)\n\t\
    @test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\") == false)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgn0pwc8s.jl:15\nin expression starting at\
    \ /tmp/tmpgn0pwc8s.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n  length = length(text)\n  halflength = floor(Int, length/2)\n  for i = 1:halflength\n\
    \    if text[i] != text[length-i+1]\n      return false\n    end\n  end\n  return\
    \ true\nend\nusing Test\n@testset \"is_palindrome\" begin\n  @test is_palindrome(\"\
    abba\") == true\n  @test is_palindrome(\"asdf\") == false\n  @test is_palindrome(\"\
    A Toyota's a Toyota.\") == true\n  @test is_palindrome(\"Satan, oscillate my metallic\
    \ sonatas!\") == true\n  @test is_palindrome(\"A man, a plan, a canal: Panama.\"\
    ) == true\n  @test is_palindrome(\"\") == true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: "b'is_palindrome: Error During Test at /tmp/tmppkfyp1qe.jl:24\\n  Test threw\
    \ exception\\n  Expression: is_palindrome(\"abba\") == true\\n  UndefVarError:\
    \ length not defined\\n  Stacktrace:\\n   [1] is_palindrome(text::String)\\n \
    \    @ Main /tmp/tmppkfyp1qe.jl:13\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmppkfyp1qe.jl:24 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmppkfyp1qe.jl:24\\nis_palindrome:\
    \ Error During Test at /tmp/tmppkfyp1qe.jl:25\\n  Test threw exception\\n  Expression:\
    \ is_palindrome(\"asdf\") == false\\n  UndefVarError: length not defined\\n  Stacktrace:\\\
    n   [1] is_palindrome(text::String)\\n     @ Main /tmp/tmppkfyp1qe.jl:13\\n  \
    \ [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmppkfyp1qe.jl:25 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmppkfyp1qe.jl:24\\nis_palindrome:\
    \ Error During Test at /tmp/tmppkfyp1qe.jl:26\\n  Test threw exception\\n  Expression:\
    \ is_palindrome(\"A Toyota\\'s a Toyota.\") == true\\n  UndefVarError: length\
    \ not defined\\n  Stacktrace:\\n   [1] is_palindrome(text::String)\\n     @ Main\
    \ /tmp/tmppkfyp1qe.jl:13\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmppkfyp1qe.jl:26 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmppkfyp1qe.jl:24\\nis_palindrome:\
    \ Error During Test at /tmp/tmppkfyp1qe.jl:27\\n  Test threw exception\\n  Expression:\
    \ is_palindrome(\"Satan, oscillate my metallic sonatas!\") == true\\n  UndefVarError:\
    \ length not defined\\n  Stacktrace:\\n  "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) < 2\n        return true\n    elseif text[1] != text[end]\n\
    \        return false\n    else\n        return is_palindrome(text[2:end-1])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t\
    @test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    len_text = length(text)\n    if len_text == 0 || len_text == 1\n     \
    \   true\n    else\n        text[1] == text[len_text] && is_palindrome(text[2:len_text-1])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t\
    @test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n \n    if length(text) < 2 return true end\n    start, end = 1, length(text)\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp407adj9o.jl:15\nin expression starting at /tmp/tmp407adj9o.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    n = length(text)\n    n2 = div(n, 2)\n    for i in 1:n2\n        if text[i]\
    \ != text[n-i+1]\n            return false\n        end\n    end\n    return true\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0 return true end\n    if length(text) == 1 return\
    \ true end\n    if length(text) == 2 \n        if text[1] == text[2]\n       \
    \     return true\n        else\n            return false\n        end\n    end\n\
    \    if text[1] == text[end]\n        return is_palindrome(text[2:end-1])\n  \
    \  else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    N = length(text)\n    for i in 1:N\n        if text[i] != text[N-i+1]\n\
    \            return false\n        end\n    end\n    return true\nend\n# <b>is_palindrome</b>\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    text == reverse(text)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    a = lowercase(text)\n\
    \    if length(a) == 1\n        return true\n    end\n    if a[1] == a[end]\n\
    \        is_palindrome(a[2:end-1])\n    else\n        return false\n    end\n\
    end\n\"\"\"\n    Tests whether 2 given strings are anagrams\n    >>> is_anagram('',\
    \ '')\n    True\n    >>> is_anagram('a', 'a')\n    True\n    >>> is_anagram('ab',\
    \ 'ba')\n    True\n    >>> is_anagram('abb', 'bba')\n    True\n    >>> is_anagram('abb',\
    \ 'baa')\n    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp3s7zqx94.jl:26\nin expression starting at /tmp/tmp3s7zqx94.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    return text == reverse(text)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    return text == reverse(text)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    return text == reverse(text)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    length =\
    \ length(text)\n    if length <= 1\n        return true\n    else\n        return\
    \ (text[1] == text[length]) && is_palindrome(text[2:length-1])\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpji0_747x.jl:36\\n  Test threw\
    \ exception\\n  Expression: candidate(\"\") == true\\n  UndefVarError: length\
    \ not defined\\n  Stacktrace:\\n   [1] is_palindrome(text::String)\\n     @ Main\
    \ /tmp/tmpji0_747x.jl:24\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpji0_747x.jl:36 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpji0_747x.jl:35\\ntest set:\
    \ Error During Test at /tmp/tmpji0_747x.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate(\"aba\") == true\\n  UndefVarError: length not defined\\n  Stacktrace:\\\
    n   [1] is_palindrome(text::String)\\n     @ Main /tmp/tmpji0_747x.jl:24\\n  \
    \ [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpji0_747x.jl:37 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpji0_747x.jl:35\\ntest set:\
    \ Error During Test at /tmp/tmpji0_747x.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(\"aaaaa\") == true\\n  UndefVarError: length not defined\\n  Stacktrace:\\\
    n   [1] is_palindrome(text::String)\\n     @ Main /tmp/tmpji0_747x.jl:24\\n  \
    \ [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpji0_747x.jl:38 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpji0_747x.jl:35\\ntest set:\
    \ Error During Test at /tmp/tmpji0_747x.jl:39\\n  Test threw exception\\n  Expression:\
    \ candidate(\"zbcd\") == false\\n  UndefVarError: length not defined\\n  Stacktrace:\\\
    n   [1] is_palindrome(text::String)\\n     @ Main /tmp/tmpji0_747x.jl:24\\n  \
    \ [2] macro expansi"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    s = length(text)\n    if s == 0\n        return true\n    end\n    for\
    \ i = 1:s\n        if text[i] != text[s-i+1]\n            return false\n     \
    \   end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) <= 1 return true\n    if lowercase(text[1]) != lowercase(text[end])\
    \ return false\n    return is_palindrome(text[2:end-1])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps8htmyan.jl:1\nin expression starting at /tmp/tmps8htmyan.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if text == \"\"\n        return true\n    end\n    for i = 1:length(text)\n\
    \        if text[i] != text[end - i + 1]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if text[1] ==\
    \ text[end]\n        return is_palindrome(text[2:end-1])\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    lowercase_text = map(text) do x\n        lowercase(x)\n    end\n    reversed_text\
    \ = reverse(lowercase_text)\n    reversed_text == lowercase_text\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\
    \t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t\
    @test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\") == true)\n\t\
    @test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\") == false)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    for i in 1:length(text)\n        if text[i] != text[end-i+1]\n       \
    \     return false\n        end\n    end\n    return true\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\
    \t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t\
    @test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\") == true)\n\t\
    @test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\") == false)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) <= 1\n        return true\n    elseif text[1] != text[end]\n\
    \        return false\n    else\n        return is_palindrome(text[2:end-1])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t\
    @test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    palindrome = true \n    size = length(text)\n    for i = 1:size\n    \
    \    j = size - i + 1\n        if text[i] != text[j]\n            palindrome =\
    \ false\n            break\n        end\n    end\n    return palindrome\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    l = length(text)\n    for i in 1:length(text)\n        if text[i] != text[l\
    \ - i + 1]\n            return false\n        end\n    end\n    return true\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    for i in 1:length(text)\n\
    \        if text[i] != text[length(text) - i + 1]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    true \nend\nis_palindrome(\"abcba\")\nusing Test\n\n@testset begin\n\n\
    candidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0yh5gxjr.jl:24\n  Expression: candidate(\"\
    zbcd\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0yh5gxjr.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0yh5gxjr.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp0yh5gxjr.jl:26\n  Expression: candidate(\"xywyz\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0yh5gxjr.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0yh5gxjr.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp0yh5gxjr.jl:27\n  Expression: candidate(\"xywzx\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0yh5gxjr.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0yh5gxjr.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0yh5gxjr.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    text == reverse(text)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    text_length = length(text)\n    half_length = div(text_length, 2)\n  \
    \  for i = 1:half_length\n        if text[i] != text[text_length + 1 - i]\n  \
    \          return false\n        end\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\
    \t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t\
    @test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\") == true)\n\t\
    @test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\") == false)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if text==reverse(text)\n        return true\n    else\n        return\
    \ false\n    end\nend\nis_palindrome(\"mark\")\nusing Test\n\n@testset begin\n\
    \ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    return\nend\n\"\"\"\n    Checks if given string is a palindrome\n\
    \    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n\
    \    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n   \
    \ False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp0fgj6o9c.jl:30\nin expression starting at /tmp/tmp0fgj6o9c.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    first = 1\n    second = length(text)\n    while(first<second)\n      \
    \  if(text[first] != text[second])\n            return false\n        end\n  \
    \      first += 1\n        second -= 1\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\
    \t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t\
    @test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\") == true)\n\t\
    @test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\") == false)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0 || length(text) == 1\n        return true\n    elseif\
    \ text[1] == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n\
    \        return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    length = text |> string_length \n    mid_length = length \xF7 2 \n   \
    \ half_left = text[1:mid_length] \n    half_right = text[mid_length + 1:length]\
    \ |> reverse_string \n    return half_left == half_right \nend \n\"\"\"\n    Helper\
    \ function that returns the length of the given string\n    >>> string_length('')\n\
    \    0\n    >>> string_length('a')\n    1\n    >>> string_length('ab')\n    2\n\
    \    >>> string_length('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpehcloo22.jl:19\nin expression starting at /tmp/tmpehcloo22.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    length = length(text)\n    for i = 1:length/2\n        if text[i] != text[length\
    \ - i + 1]\n            return false\n        end\n    end\n    return true\n\
    end\n \n```\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcarqesp9.jl:22\nin expression starting at\
    \ /tmp/tmpcarqesp9.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    text == reverse(text)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    \n    isPalindrome = true\n    for i in 1:length(text)\n        if text[i]\
    \ != text[length(text) - i + 1]\n            isPalindrome = false\n        end\n\
    \    end\n    return isPalindrome\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    L = length(text)\n    return L<=1 || (text[1] == text[L] && is_palindrome(text[2:L-1]))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    text = lowercase(text)\n\
    \    if text[1] != text[end]\n        return false\n    end\n    if length(text)\
    \ == 2\n        return true\n    end\n    return is_palindrome(text[2:end-1])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if length(text) == 2\n        if text[1]\
    \ == text[2]\n            return true\n        else\n            return false\n\
    \        end\n    end\n    if text[1] == text[end]\n        return is_palindrome(text[2:end-1])\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) < 2\n        return true\n    elseif text[1] != text[end]\n\
    \        return false\n    else\n        return is_palindrome(text[2:end-1])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t\
    @test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if text == reverse(text)\n        return true\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    for ii = 1:floor(length(text)/2)\n        if !(text[ii] == text[end-ii+1])\n\
    \            return false\n        end\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\
    \t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t\
    @test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\") == true)\n\t\
    @test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\") == false)\n\
    end\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if (length(text) <= 1)\n        return true\n    else \n        return\
    \  text[1] == text[end] && is_palindrome(text[2:end-1])\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\
    \t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t\
    @test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\") == true)\n\t\
    @test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\") == false)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if text == reverse(text)\n        return true\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    is_palindrome(text) = isequal(text,reverse(text))\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\
    \t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t\
    @test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\") == true)\n\t\
    @test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\") == false)\n\
    end\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    return text == reverse(text)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    isPalindrome = true\n    if (text == \"\")\n        return true\n    else\n\
    \        i = 1\n        while (i <= div(length(text), 2))\n            if (text[i]\
    \ != text[length(text) - i + 1])\n                isPalindrome = false\n     \
    \       end\n            i += 1\n        end\n        return isPalindrome\n  \
    \  end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    len = 0\n    for i in text\n        len += 1\n    end\n    for i in 1:len\n\
    \        if text[i] != text[len - i + 1]\n            return false\n        end\n\
    \    end\n    return true\nend\n# is_palindrome(\"\")\n# is_palindrome(\"aba\"\
    )\n# is_palindrome(\"aaaaa\")\n# is_palindrome(\"zbcd\")\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    is_palindrome(text) = all(map(isequal, text, reverse(text)))\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\"\
    ) == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\")\
    \ == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    l = length(text)\n    if l == 0 || l == 1\n        return true\n    end\n\
    \    i = 1\n    j = l\n    while i < j\n        if text[i] != text[j]\n      \
    \      return false\n        end\n        i += 1\n        j -= 1\n    end\n  \
    \  return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    r = reverse(text)\n    return r == text\nend\n \nprintln(is_palindrome(\"\
    rotor\"))\nprintln(is_palindrome(\"aza\"))\nprintln(is_palindrome(\"wow\"))\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "true\ntrue\ntrue\nTest Summary: | Pass  Total\ntest set      |    7   \
    \   7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    rev = reverse(text)\n    if text == rev\n        return true\n    else\n\
    \        return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    reverse(text) == text ? true : false\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    num_chars = size(text, 1)\n    for i in 1:num_chars\n        if text[i]\
    \ != text[num_chars-i+1]\n            return false\n        end\n    end\n   \
    \ return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: "b'test set: Error During Test at '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    length = length(text)\n    for i in 1:floor(length/2)\n        if text[i]\
    \ != text[length-i+1]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp4qov83vg.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate(\"\") == true\\n  UndefVarError: length\
    \ not defined\\n  Stacktrace:\\n   [1] is_palindrome(text::String)\\n     @ Main\
    \ /tmp/tmp4qov83vg.jl:13\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp4qov83vg.jl:26 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp4qov83vg.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmp4qov83vg.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"aba\") == true\\n  UndefVarError: length not defined\\n  Stacktrace:\\\
    n   [1] is_palindrome(text::String)\\n     @ Main /tmp/tmp4qov83vg.jl:13\\n  \
    \ [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp4qov83vg.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp4qov83vg.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmp4qov83vg.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"aaaaa\") == true\\n  UndefVarError: length not defined\\n  Stacktrace:\\\
    n   [1] is_palindrome(text::String)\\n     @ Main /tmp/tmp4qov83vg.jl:13\\n  \
    \ [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp4qov83vg.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp4qov83vg.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmp4qov83vg.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"zbcd\") == false\\n  UndefVarError: length not defined\\n  Stacktrace:\\\
    n   [1] is_palindrome(text::String)\\n     @ Main /tmp/tmp4qov83vg.jl:13\\n  \
    \ [2] macro expansi"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    n = length(text)\n    if n == 0\n        return true\n    end\n    if\
    \ n == 1\n        return true\n    end\n    for i in 1:n\n        if text[i] !=\
    \ text[n-i+1]\n            return false\n        end\n    end\n    return true\n\
    end\n \nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    length = length(text)\n    start = firstindex(text)\n    for i = start:length-1\n\
    \        if text[i] != text[length - i + 1]\n            return false\n      \
    \  end\n    end\n    return true\nend\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp52g2m2fi.jl:22\nin expression starting at /tmp/tmp52g2m2fi.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    return text == reverse(text)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    L = lowercase(text)\n    len_L = length(L)\n    for i in 1:len_L\n   \
    \     if L[i] != L[len_L - i + 1]\n            return false\n        end\n   \
    \ end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) < 2\n        return true\n    elseif text[1] != text[end]\n\
    \        return false\n    else\n        return is_palindrome(text[2:end-1])\n\
    \    end\nend\n \nprintln(is_palindrome(\"abcba\"))\nusing Test\n\n@testset begin\n\
    \ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "true\nTest Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if (text == \"\")\n        return true\n    elseif (length(text) == 1)\n\
    \        return true\n    elseif (length(text) == 2)\n        return (text[1]\
    \ == text[2])\n    else\n        return (text[1] == text[end]) && is_palindrome(text[2:end-1])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t\
    @test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if text == \"\"\n        return true\n    end\n    left, right = 1, length(text)\n\
    \    while (left < right) && (text[left] == text[right])\n        left += 1\n\
    \        right -= 1\n    end\n    return (left >= right)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\
    \t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t\
    @test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\") == true)\n\t\
    @test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\") == false)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if text[1] ==\
    \ text[end]\n        return is_palindrome(text[2:end-1])\n    else\n        return\
    \ false\n    end\nend\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpyx353s39.jl:22\nin expression starting at /tmp/tmpyx353s39.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    is_palindrome = true\n    for i in range(1, length(text) \xF7 2 + 1)\n\
    \        if text[i] != text[end - i + 1]\n            is_palindrome = false\n\
    \            break\n    end\n    return is_palindrome\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpio9ormhg.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpio9ormhg.jl:1\n\
    in expression starting at /tmp/tmpio9ormhg.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    length = length(text)\n    for i in 1:length\n        if text[i] != text[length+1-i]\n\
    \            return false\n        end\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\
    \t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t\
    @test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\") == true)\n\t\
    @test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\") == false)\n\
    end\n"
  stdout: "b'test set: Error During Test at /tmp/tmpnyj1m8m4.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate(\"\") == true\\n  UndefVarError: length\
    \ not defined\\n  Stacktrace:\\n   [1] is_palindrome(text::String)\\n     @ Main\
    \ /tmp/tmpnyj1m8m4.jl:13\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpnyj1m8m4.jl:26 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpnyj1m8m4.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpnyj1m8m4.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"aba\") == true\\n  UndefVarError: length not defined\\n  Stacktrace:\\\
    n   [1] is_palindrome(text::String)\\n     @ Main /tmp/tmpnyj1m8m4.jl:13\\n  \
    \ [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpnyj1m8m4.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpnyj1m8m4.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpnyj1m8m4.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"aaaaa\") == true\\n  UndefVarError: length not defined\\n  Stacktrace:\\\
    n   [1] is_palindrome(text::String)\\n     @ Main /tmp/tmpnyj1m8m4.jl:13\\n  \
    \ [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpnyj1m8m4.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpnyj1m8m4.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpnyj1m8m4.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"zbcd\") == false\\n  UndefVarError: length not defined\\n  Stacktrace:\\\
    n   [1] is_palindrome(text::String)\\n     @ Main /tmp/tmpnyj1m8m4.jl:13\\n  \
    \ [2] macro expansi"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    len_of_text = length(text)\n    if len_of_text == 0\n        return true\n\
    \    end\n    if len_of_text % 2 == 0\n        return false\n    end\n    for\
    \ i in 1:len_of_text\n        if text[i] != text[len_of_text-i+1]\n          \
    \  return false\n        end\n    end\n    return true\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    t=text\n    if t==reverse(t)\n        return true\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    # YOUR CODE HERE\nend\n \n \n\"\"\"\n    Replace all vowels in a given\
    \ string with a given char\n    >>> replace_vowels('foo', '*')\n    'f**'\n  \
    \  >>> replace_vowels('bar', '#')\n    'b#r'\n    >>> replace_vowels('abc', '!')\n\
    \    '!b!'\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpq8o3jtz8.jl:17\nin expression starting at /tmp/tmpq8o3jtz8.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    left = 1\n   \
    \ right = length(text)\n    while left <= right\n        if text[left] != text[right]\n\
    \            return false\n        end\n        left += 1\n        right -= 1\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    true = true\n    false = false\n    if text == \"\"\n        return true\n\
    \    else\n        for i in 1:length(text)\n            if text[i] != text[length(text)-i+1]\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t\
    @test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid assignment location \"true\" around /tmp/tmpkbt7wirx.jl:13\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpkbt7wirx.jl:1\nin expression starting\
    \ at /tmp/tmpkbt7wirx.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    text == reverse(text)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    l = length(text)\n    for i = 1:ceil(l/2)\n        if text[i] != text[l-i+1]\n\
    \            return false\n        end\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\
    \t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t\
    @test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\") == true)\n\t\
    @test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\") == false)\n\
    end\n"
  stdout: "b'test set: Error During Test at /tmp/tmpktnra81t.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(\"aba\") == true\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if text == reverse(text)\n        return true\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps25r_ss9.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps25r_ss9.jl:1\n\
    in expression starting at /tmp/tmps25r_ss9.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    n = length(text)\n    for i = 1:floor(Int, n/2)\n        if text[i] !=\
    \ text[n-i+1]\n            return false\n        end\n    end\n    return true\n\
    end\n \nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    l = length(text)\n    if l == 0 \n        return true\n    end\n    if\
    \ (text[1] == text[l])\n        return is_palindrome(text[2:l-1])\n    else\n\
    \        return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    # Base case: we're at the halfway point\n    if length(text) <= 1\n  \
    \      return true\n    end\n    \n    # Recursive case: check if the first and\
    \ last character are the same\n    if text[1] == text[end]\n        return is_palindrome(text[2:end-1])\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if text[1] ==\
    \ text[end]\n        is_palindrome(text[2:end-1])\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t\
    @test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    return false\n\
    end\n \nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnqrfvtm7.jl:31\n  Expression: candidate(\"\
    \") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnqrfvtm7.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnqrfvtm7.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpnqrfvtm7.jl:32\n  Expression: candidate(\"aba\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnqrfvtm7.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnqrfvtm7.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpnqrfvtm7.jl:33\n  Expression: candidate(\"aaaaa\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnqrfvtm7.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnqrfvtm7.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpnqrfvtm7.jl:35\n  Expression: candidate(\"xywyx\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnqrfvtm7.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnqrfvtm7.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnqrfvtm7.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    N = length(text)\n    for i in 1:N\n        if text[i] != text[N-i+1]\n\
    \            return false\n        end\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\
    \t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t\
    @test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\") == true)\n\t\
    @test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\") == false)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    n = length(text)\n    for i in 1:n/2\n        if text[i] != text[n-i+1]\n\
    \            return false\n        end\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\
    \t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t\
    @test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\") == true)\n\t\
    @test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\") == false)\n\
    end\n"
  stdout: "b'test set: Error During Test at /tmp/tmpujymc5qy.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(\"aba\") == true\\n  MethodError: no method\
    \ matching getindex(::String, ::Float64)\\n  Closest candidates are:\\n    getindex(::AbstractString,\
    \ !Matched::Colon) at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:189\\\
    n    getindex(::String, !Matched::Int64) at /shared/centos7/julia/1.7.3/share/julia/base/strings/string.jl:222\\\
    n    getindex(::AbstractString, !Matched::Integer) at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:184\\\
    n    ...\\n  Stacktrace:\\n   [1] is_palindrome(text::String)\\n     @ Main /tmp/tmpujymc5qy.jl:15\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpujymc5qy.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpujymc5qy.jl:25\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    return is_palindrome_rec(text, length(text), 1)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp5eo8alf4.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(\"\") == true\\n  UndefVarError: is_palindrome_rec\
    \ not defined\\n  Stacktrace:\\n   [1] is_palindrome(text::String)\\n     @ Main\
    \ /tmp/tmp5eo8alf4.jl:13\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp5eo8alf4.jl:20 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp5eo8alf4.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp5eo8alf4.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(\"aba\") == true\\n  UndefVarError: is_palindrome_rec not defined\\\
    n  Stacktrace:\\n   [1] is_palindrome(text::String)\\n     @ Main /tmp/tmp5eo8alf4.jl:13\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp5eo8alf4.jl:21 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp5eo8alf4.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp5eo8alf4.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"aaaaa\") == true\\n  UndefVarError: is_palindrome_rec not defined\\\
    n  Stacktrace:\\n   [1] is_palindrome(text::String)\\n     @ Main /tmp/tmp5eo8alf4.jl:13\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp5eo8alf4.jl:22 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp5eo8alf4.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp5eo8alf4.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"zbcd\") == false\\n  UndefVarError: is_palindrome_rec not defined\\\
    n  Stacktrace:\\n   [1] is_palindrome(text::String)\\n     @ Main "
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    temp = lowercase(text)\n    reverse(temp) == temp\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\
    \t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t\
    @test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\") == true)\n\t\
    @test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\") == false)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    return (text == reverse(text))\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if text[1] ==\
    \ text[end]\n        return is_palindrome(text[2:end-1])\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    text = lowercase(text)\n    # iterate over characters to the middle\n\
    \    for i = 1:floor(Int, length(text)/2)\n        # if characters at the beginning\
    \ and end are not equal\n        if text[i] != text[end - i + 1]\n           \
    \ return false\n        end\n    end\n    return true\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    return Base.issymetric(text)\nend\n```\nusing Test\n\n@testset begin\n\
    \ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4pm6pu5b.jl:15\nin expression starting at\
    \ /tmp/tmp4pm6pu5b.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) <= 1\n        return true\n    else\n        if first(text)\
    \ == last(text)\n            return is_palindrome(middle(text))\n        else\n\
    \            return false\n        end\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9msrba9q.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"aba\") == true\n  UndefVarError: middle not defined\n\
    \  Stacktrace:\n   [1] is_palindrome(text::String)\n     @ Main /tmp/tmp9msrba9q.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9msrba9q.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9msrba9q.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp9msrba9q.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"aaaaa\") == true\n  UndefVarError: middle not defined\n  Stacktrace:\n\
    \   [1] is_palindrome(text::String)\n     @ Main /tmp/tmp9msrba9q.jl:17\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9msrba9q.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9msrba9q.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp9msrba9q.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"xywyx\") == true\n  UndefVarError: middle not defined\n  Stacktrace:\n\
    \   [1] is_palindrome(text::String)\n     @ Main /tmp/tmp9msrba9q.jl:17\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9msrba9q.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9msrba9q.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp9msrba9q.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"xywzx\") == false\n  UndefVarError: middle not defined\n  Stacktrace:\n\
    \   [1] is_palindrome(text::String)\n     @ Main /tmp/tmp9msrba9q.jl:17\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/juli"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9msrba9q.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    n = size(text)\n    m = n/2\n    b = true\n    for i in 1:m\n        if\
    \ text[i] != text[n-i+1]\n            b = false\n            break\n        end\n\
    \    end\n    return b\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpqkuuqpwq.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"\") == true\\n  MethodError: no method\
    \ matching size(::String)\\n  Closest candidates are:\\n    size(!Matched::Union{LinearAlgebra.Adjoint{T,\
    \ var\"#s861\"}, LinearAlgebra.Transpose{T, var\"#s861\"}} where {T, var\"#s861\"\
    <:(AbstractVector)}) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/adjtrans.jl:172\\\
    n    size(!Matched::Union{LinearAlgebra.Adjoint{T, var\"#s861\"}, LinearAlgebra.Transpose{T,\
    \ var\"#s861\"}} where {T, var\"#s861\"<:(AbstractMatrix)}) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/adjtrans.jl:173\\\
    n    size(!Matched::Union{LinearAlgebra.QR, LinearAlgebra.QRCompactWY, LinearAlgebra.QRPivoted})\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/qr.jl:567\\\
    n    ...\\n  Stacktrace:\\n   [1] is_palindrome(text::String)\\n     @ Main /tmp/tmpqkuuqpwq.jl:13\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpqkuuqpwq.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpqkuuqpwq.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpqkuuqpwq.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"aba\") == true\\n  MethodError: no method matching size(::String)\\\
    n  Closest candidates are:\\n    size(!Matched::Union{LinearAlgebra.Adjoint{T,\
    \ var\"#s861\"}, LinearAlgebra.Transpose{T, var\"#s861\"}} where {T, var\"#s861\"\
    <:(AbstractVector)}) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/adjtrans.jl:172\\\
    n    size(!Matched::Union{LinearAlgebra.Adjoint{T, var\"#s861\"}, LinearAlgebra.Transpose{T,\
    \ var\"#s861\"}} where {T, var\"#s861\"<:(AbstractMatrix)}) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/adjtrans.jl:173\\\
    n    size(!Matched::Union{LinearAlgebra.QR, LinearAlgebra.QRCompactWY, LinearAlgebra.QRPivoted}"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    text = lowercase(text)\n    reverse_text = reverse(text)\n    return text\
    \ == reverse_text\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    text == reverse(text)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    return text == reverse(text)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) < 2\n        return true\n    elseif text[1] != text[end]\n\
    \        return false\n    else\n        return is_palindrome(text[2:end-1])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t\
    @test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    \"\"\"\n    Checks if a given text is a palindrome\n    \"\"\"\n    text\
    \ = text.lower()\n    text = replace(text, r\"[\\W_]\", \"\")\n    if text ==\
    \ reverse(text)\n        return true\n    else\n        return false\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxcrnl6oy.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"\") == true\n  type String has no field lower\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] is_palindrome(text::String)\n\
    \     @ Main /tmp/tmpxcrnl6oy.jl:16\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxcrnl6oy.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxcrnl6oy.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpxcrnl6oy.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"aba\") == true\n  type String has no field lower\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] is_palindrome(text::String)\n\
    \     @ Main /tmp/tmpxcrnl6oy.jl:16\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxcrnl6oy.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxcrnl6oy.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpxcrnl6oy.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"aaaaa\") == true\n  type String has no field lower\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] is_palindrome(text::String)\n\
    \     @ Main /tmp/tmpxcrnl6oy.jl:16\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxcrnl6oy.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxcrnl6oy.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpxcrnl6oy.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"zbcd\") == false\n  type String has no field lower\n  Stacktrace:\n\
    \   [1] ge"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxcrnl6oy.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) <= 1\n        return true\n    elseif text[1] != text[end]\n\
    \        return false\n    else\n        return is_palindrome(text[2:end-1])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t\
    @test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    text == reverse(text)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    text = lowercase(text)\n    if length(text) <= 1\n        return true\n\
    \    elseif first(text) != last(text)\n        return false\n    else\n      \
    \  return is_palindrome(middle(text))\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6kuu3iq0.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"aba\") == true\n  UndefVarError: middle not defined\n\
    \  Stacktrace:\n   [1] is_palindrome(text::String)\n     @ Main /tmp/tmp6kuu3iq0.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6kuu3iq0.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6kuu3iq0.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp6kuu3iq0.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"aaaaa\") == true\n  UndefVarError: middle not defined\n  Stacktrace:\n\
    \   [1] is_palindrome(text::String)\n     @ Main /tmp/tmp6kuu3iq0.jl:19\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6kuu3iq0.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6kuu3iq0.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp6kuu3iq0.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"xywyx\") == true\n  UndefVarError: middle not defined\n  Stacktrace:\n\
    \   [1] is_palindrome(text::String)\n     @ Main /tmp/tmp6kuu3iq0.jl:19\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6kuu3iq0.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6kuu3iq0.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp6kuu3iq0.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"xywzx\") == false\n  UndefVarError: middle not defined\n  Stacktrace:\n\
    \   [1] is_palindrome(text::String)\n     @ Main /tmp/tmp6kuu3iq0.jl:19\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/juli"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6kuu3iq0.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    for i=1:length(text)\xF72\n        if text[i]!=text[end-i+1]\n       \
    \     return false\n        end\n    end\n    return true\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\
    \t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t\
    @test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\") == true)\n\t\
    @test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\") == false)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    l = length(text)\n    if l == 0\n        return true\n    end\n    return\
    \ text[1] == text[l] && is_palindrome(text[2:l-1])\nend\n```\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9brnkfqx.jl:19\nin expression starting at\
    \ /tmp/tmp9brnkfqx.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    text = remove(text)\n    for i in 1:length(text)\n        if text[i] !=\
    \ text[end - i + 1]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptpx925uv.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"\") == true\n  UndefVarError: remove not defined\n\
    \  Stacktrace:\n   [1] is_palindrome(text::String)\n     @ Main /tmp/tmptpx925uv.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptpx925uv.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptpx925uv.jl:25\ntest set:\
    \ Error During Test at /tmp/tmptpx925uv.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"aba\") == true\n  UndefVarError: remove not defined\n  Stacktrace:\n\
    \   [1] is_palindrome(text::String)\n     @ Main /tmp/tmptpx925uv.jl:13\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptpx925uv.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptpx925uv.jl:25\ntest set:\
    \ Error During Test at /tmp/tmptpx925uv.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"aaaaa\") == true\n  UndefVarError: remove not defined\n  Stacktrace:\n\
    \   [1] is_palindrome(text::String)\n     @ Main /tmp/tmptpx925uv.jl:13\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptpx925uv.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptpx925uv.jl:25\ntest set:\
    \ Error During Test at /tmp/tmptpx925uv.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"zbcd\") == false\n  UndefVarError: remove not defined\n  Stacktrace:\n\
    \   [1] is_palindrome(text::String)\n     @ Main /tmp/tmptpx925uv.jl:13\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdl"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptpx925uv.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    text = tolower(text)\n    for i in 1:ceil(length(text)/2)\n        if\
    \ text[i] != text[end-i+1]\n            return false\n        end\n    end\n \
    \   return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5dtizuel.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"\") == true\n  UndefVarError: tolower not defined\n\
    \  Stacktrace:\n   [1] is_palindrome(text::String)\n     @ Main /tmp/tmp5dtizuel.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5dtizuel.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5dtizuel.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp5dtizuel.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"aba\") == true\n  UndefVarError: tolower not defined\n  Stacktrace:\n\
    \   [1] is_palindrome(text::String)\n     @ Main /tmp/tmp5dtizuel.jl:13\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5dtizuel.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5dtizuel.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp5dtizuel.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"aaaaa\") == true\n  UndefVarError: tolower not defined\n  Stacktrace:\n\
    \   [1] is_palindrome(text::String)\n     @ Main /tmp/tmp5dtizuel.jl:13\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5dtizuel.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5dtizuel.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp5dtizuel.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"zbcd\") == false\n  UndefVarError: tolower not defined\n  Stacktrace:\n\
    \   [1] is_palindrome(text::String)\n     @ Main /tmp/tmp5dtizuel.jl:13\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5dtizuel.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n     # define a function called is_palindrome \n    # that takes a string\
    \ and returns a boolean\n    # HINT: try using getindex and length to solve this\n\
    \    if length(text) == 0\n        return true\n    elseif length(text) == 1\n\
    \        return true\n    elseif length(text) == 2 && text[1] == text[length(text)]\n\
    \        return true\n    elseif text[1] == text[length(text)]\n        return\
    \ is_palindrome(text[2:length(text)-1])\n    else\n        return false\n    end\n\
    end\n#is_palindrome(\"dfd\")\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    return text == reverse(text)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) < 2\n        return true\n    elseif get(text, 1) != get(text,\
    \ end)\n        return false\n    else\n        return is_palindrome(text[2:end-1])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t\
    @test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpiqidtxqy.jl:15\nin expression starting at /tmp/tmpiqidtxqy.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    \n    rtext = reverse(text)\n    return text == rtext\n    \nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\"\
    ) == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\")\
    \ == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    text == reverse(text)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    n = length(text)\n    for i in 1:n/2\n        if text[i] != text[n-i+1]\n\
    \            return false\n        end\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\
    \t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t\
    @test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\") == true)\n\t\
    @test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\") == false)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpou_23otx.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"aba\") == true\n  MethodError: no method matching getindex(::String,\
    \ ::Float64)\n  Closest candidates are:\n    getindex(::AbstractString, !Matched::Colon)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:189\n    getindex(::String,\
    \ !Matched::Int64) at /shared/centos7/julia/1.7.3/share/julia/base/strings/string.jl:222\n\
    \    getindex(::AbstractString, !Matched::Integer) at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:184\n\
    \    ...\n  Stacktrace:\n   [1] is_palindrome(text::String)\n     @ Main /tmp/tmpou_23otx.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpou_23otx.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpou_23otx.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpou_23otx.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"aaaaa\") == true\n  MethodError: no method matching getindex(::String,\
    \ ::Float64)\n  Closest candidates are:\n    getindex(::AbstractString, !Matched::Colon)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:189\n    getindex(::String,\
    \ !Matched::Int64) at /shared/centos7/julia/1.7.3/share/julia/base/strings/string.jl:222\n\
    \    getindex(::AbstractString, !Matched::Integer) at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:184\n\
    \    ...\n  Stacktrace:\n   [1] is_palindrome(text::String)\n     @ Main /tmp/tmpou_23otx.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpou_23otx.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpou_23otx.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpou_23otx.jl:29\n  Test threw excep"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpou_23otx.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) > 1 && text[1] != text[end]\n        return false\n  \
    \  elseif length(text) > 2\n        return is_palindrome(text[2:end-1])\n    else\n\
    \        return true\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    n = length(text)\n    for i in 1:n\n        if text[i] != text[n-i+1]\n\
    \            return false\n        end\n    end\n    return true\nend\nis_palindrome(\"\
    booob\")\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    stringLength = length(text)\n    loopIteration = div(stringLength, 2)\n\
    \    for i in 1:loopIteration\n        if text[i] != text[stringLength-i+1]\n\
    \            return false\n        end\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\
    \t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t\
    @test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\") == true)\n\t\
    @test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\") == false)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    text = lowercase(text)\n    if text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpi70u_1fi.jl:26\nin expression starting at /tmp/tmpi70u_1fi.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    rev_text = reverse(text)\n\
    \    if rev_text == text\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t\
    @test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if size(text) <= 1\n        return true\n    elseif text[1] != text[end]\n\
    \        return false\n    else\n        return is_palindrome(text[2:end-1])\n\
    \    end\nend\n    \nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpacrmdfpv.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"\") == true\n  MethodError: no method matching size(::String)\n\
    \  Closest candidates are:\n    size(!Matched::Union{LinearAlgebra.Adjoint{T,\
    \ var\"#s861\"}, LinearAlgebra.Transpose{T, var\"#s861\"}} where {T, var\"#s861\"\
    <:(AbstractVector)}) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/adjtrans.jl:172\n\
    \    size(!Matched::Union{LinearAlgebra.Adjoint{T, var\"#s861\"}, LinearAlgebra.Transpose{T,\
    \ var\"#s861\"}} where {T, var\"#s861\"<:(AbstractMatrix)}) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/adjtrans.jl:173\n\
    \    size(!Matched::Union{LinearAlgebra.QR, LinearAlgebra.QRCompactWY, LinearAlgebra.QRPivoted})\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/qr.jl:567\n\
    \    ...\n  Stacktrace:\n   [1] is_palindrome(text::String)\n     @ Main /tmp/tmpacrmdfpv.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpacrmdfpv.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpacrmdfpv.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpacrmdfpv.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"aba\") == true\n  MethodError: no method matching size(::String)\n\
    \  Closest candidates are:\n    size(!Matched::Union{LinearAlgebra.Adjoint{T,\
    \ var\"#s861\"}, LinearAlgebra.Transpose{T, var\"#s861\"}} where {T, var\"#s861\"\
    <:(AbstractVector)}) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/adjtrans.jl:172\n\
    \    size(!Matched::Union{LinearAlgebra.Adjoint{T, var\"#s861\"}, LinearAlgebra.Transpose{T,\
    \ var\"#s861\"}} where {T, var\"#s861\"<:(AbstractMatrix)}) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/adjtrans.jl:173\n\
    \    size(!Matched::Union{LinearAlgebra.QR, LinearAlgebra.QRCompactWY, LinearAlgebra.QRPivoted})\
    \ at /shared/centos7/julia/1."
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpacrmdfpv.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) < 2\n        return true\n    elseif text[1] != text[end]\n\
    \        return false\n    else\n        return is_palindrome(text[2:end-1])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t\
    @test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    letters_reversed = reverse(text)\n    return text == letters_reversed\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if text == \"\"\n        return true\n    end\n    return text == reverse(text)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
