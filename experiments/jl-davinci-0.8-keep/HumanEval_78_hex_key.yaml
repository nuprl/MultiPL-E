name: HumanEval_78_hex_key
language: jl
prompt: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
  \ number as a string and counts the number of hexadecimal \n    digits that are\
  \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
  \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
  \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5,\
  \ 7, 11, 13, 17,...\n    So you have to determine a number of the following digits:\
  \ 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume\
  \ the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are\
  \ always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n\
  \    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the\
  \ output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n\
  \    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction hex_key(num::String)::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
  AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
  ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
  ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
completions: ["    \n    hex_primes= [2, 3, 5, 7, 11, 13]\n    c=0\n    for i in 1:length(num)\n\
    \        if num[i] == '0' || num[i] == '1' || num[i] == '2' || num[i] == '3' ||\
    \ num[i] == '4' || num[i] == '5' || num[i] == '6' || num[i] == '7' || num[i] ==\
    \ '8' || num[i] == '9'\n            if hex_primes[parse(Int,num[i])+1] == 1\n\
    \                c += 1\n            end\n        elseif num[i] == 'A' || num[i]\
    \ == 'B' || num[i] == 'C' || num[i] == 'D' || num[i] == 'E' || num[i] == 'F'\n\
    \            if hex_primes[parse(Int,num[i], base=16)+1] == 1\n              \
    \  c += 1\n            end\n        end\n    end\n    return c\nend", "    # initialising\
    \ the accumulator variable prime_nums with 0.\n    prime_nums = 0 \n    # looping\
    \ over the hexadecimal string.\n    for hex in num\n        # switch-case condition.\n\
    \        case hex\n        # checking if the hexadecimal is a prime number.\n\
    \        when '2' '3' '5' '7' 'B' 'D'\n            # increase the value of prime_nums\
    \ by 1.\n            prime_nums += 1\n        end\n    end\n    # return prime_nums.\n\
    \    return prime_nums\nend", "    if isempty(num) \n        return 0\n    end\
    \ \n    return find(!('0' .<= num .<= '9') & !('A' .<= num .<= 'F'))\nend", " \
    \   count = 0\n    for i in num\n        if i in [\"2\",\"3\",\"5\",\"7\",\"B\"\
    ,\"D\"]\n            count += 1\n        end\n    end\n    return count\nend\n\
    println(hex_key(\"AB\"))\nprintln(hex_key(\"1077E\"))\nprintln(hex_key(\"ABED1A33\"\
    ))\nprintln(hex_key(\"123456789ABCDEF0\"))\nprintln(hex_key(\"2020\"))", "   \
    \ return \"0AB23456789CD1EF\"[parse(Int64,num)]\nend", "    key=0\n    for i=1:length(num)\n\
    \        try \n            key += Int64(parse(Int,num[i]))\n        catch \n \
    \           if num[i]=='A'\n                key += 10\n            elseif num[i]=='B'\n\
    \                key += 11\n            elseif num[i]=='C'\n                key\
    \ += 12\n            elseif num[i]=='D'\n                key += 13\n         \
    \   elseif num[i]=='E'\n                key += 14\n            else\n        \
    \        key += 15\n            end\n        end\n    end\n    return key\nend\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    key_table = [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n    count = 0\n    for x\
    \ in num\n        if x in key_table\n            count += 1\n        end\n   \
    \ end\n    return count\nend", "    n = collect(num)\n    n = n[n.!= 'A'].|n[n.!=\
    \ 'B'].|n[n.!= 'C'].|n[n.!= 'D'].|n[n.!= 'E'].|n[n.!= 'F']\n    return length(n)\n\
    end", "    n = 0\n    for i in num\n        if i in [\"2\",\"3\",\"5\",\"7\",\"\
    B\",\"D\"]\n            n += 1\n        end\n    end\n    return n\nend", "  \
    \  cnt = 0\n    for (i,v) in enumerate(num)\n        #println(v)\n        if v\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            cnt += 1\n        end\n\
    \    end\n    return cnt\nend", "    hex_primes = Dict(\n        \"0\" => false,\
    \ \"1\" => false, \"2\" => true, \n        \"3\" => true, \"4\" => false, \"5\"\
    \ => true, \n        \"6\" => false, \"7\" => true, \"8\" => false, \n       \
    \ \"9\" => false, \"A\" => false, \"B\" => true, \n        \"C\" => false, \"\
    D\" => true, \"E\" => false, \n        \"F\" => false\n    )\n    hex = collect(num)\n\
    \    count = 0\n    for i in hex\n        count += hex_primes[i]\n    end\n  \
    \  return count\nend", "    if num == \"\"\n        return 0\n    end\n    num\
    \ = uppercase(num)\n    return sum(replace(num, \"0123456789ABCDEF\", \"000011111000000\"\
    ).=='1')\nend\nprintln(hex_key(\"AB\"))\nprintln(hex_key(\"1077E\"))\nprintln(hex_key(\"\
    ABED1A33\"))\nprintln(hex_key(\"123456789ABCDEF0\"))\nprintln(hex_key(\"2020\"\
    ))", "    hex_value_array = (\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\",\
    \ \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\")\n    count_prime\
    \ = 0\n    #Convert to ASCII code\n    ASCII_array = map(x->x |> string |> bytes\
    \ |> UInt64 |> Char, hex_value_array)\n    for i in ASCII_array\n        if isprime(i)\n\
    \            count_prime += 1\n        end\n    end\n    return count_prime\n\
    end", "    hex_primes = [0x2, 0x3, 0x5, 0x7, 0xb, 0xd]\n    return count(c-> isin(parse(Int64,\
    \ c, 16), hex_primes), num)\nend", "    hex_primes = ['2','3','5','7','B','D']\n\
    \    rp = 0\n    for i in 1:length(num)\n        if num[i] in hex_primes\n   \
    \         rp += 1\n        end\n    end\n    return rp\nend", "    cnt = 0\n \
    \   primes = [2,3,5,7,11,13]\n    for i = 1:length(num)\n        if haskey(Dict(('0'=>0,'1'=>1,'2'=>2,'3'=>3,'4'=>4,'5'=>5,'6'=>6,'7'=>7,'8'=>8,'9'=>9,'A'=>10,'B'=>11,'C'=>12,'D'=>13,'E'=>14,'F'=>15)),num[i])\
    \ && (findin(primes, Dict(('0'=>0,'1'=>1,'2'=>2,'3'=>3,'4'=>4,'5'=>5,'6'=>6,'7'=>7,'8'=>8,'9'=>9,'A'=>10,'B'=>11,'C'=>12,'D'=>13,'E'=>14,'F'=>15))[num[i]])\
    \ != 0)\n            cnt += 1\n        end\n    end\n    return cnt\nend", " \
    \   primes = [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n    count = 0\n    for i =\
    \ 1:length(num)\n        if in(num[i],primes)\n            count += 1\n      \
    \  end\n    end\n    return count\nend\n \n@test hex_key(\"AB\") == 1\n@test hex_key(\"\
    1077E\") == 2\n@test hex_key(\"ABED1A33\") == 4\n@test hex_key(\"123456789ABCDEF0\"\
    ) == 6\n@test hex_key(\"2020\") == 2\n \n\"\"\"Write a function that takes an\
    \ Array of numbers and returns an \n    Array of indices of matching pairs of\
    \ values (e.g. for \n    [1,2,2,4,4,4] it should return [2,3,4,5,6]).\n    \"\"\
    \"", "    n = length(num)\n    c = 0\n    for i = 1:n\n        s = parse(UInt64,num[i])\n\
    \        if (s == 2 || s == 3 || s == 5 || s == 7 || s == 11 || s == 13)\n   \
    \         c += 1\n        end\n    end\n    return c\nend", "    primes=[\"2\"\
    ,\"3\",\"5\",\"7\",\"B\",\"D\"]\n    count=0\n    for i=1:length(num)\n      \
    \  if num[i] in primes\n            count=count+1\n        end\n    end\n    return\
    \ count\nend", "    hexKey = Dict(\"0\"=>0,\"1\"=>1,\"2\"=>2,\"3\"=>3,\"4\"=>4,\"\
    5\"=>5,\"6\"=>6,\"7\"=>7,\"8\"=>8,\"9\"=>9,\"A\"=>10,\"B\"=>11,\"C\"=>12,\"D\"\
    =>13,\"E\"=>14,\"F\"=>15)\n    counter = 0\n    num = split(num, \"\")\n    for\
    \ i in num\n        if isprime(hexKey[i])\n            counter += 1\n        end\n\
    \    end\n    return counter\nend", "    return length(Dict(n => 1 for n in [\"\
    2\",\"3\",\"5\",\"7\",\"B\",\"D\"])[num])\nend", "    num_arr = split(num, \"\"\
    )\n    primes = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n    count = 0\n  \
    \  for i in num_arr\n        if in(i, primes)\n            count += 1\n      \
    \  end\n    end\n    return count\nend", "    hex_nums = [2, 3, 5, 7, 11, 13]\n\
    \    hex_map = Dict(\"A\" => 10, \"B\" => 11, \"C\" => 12, \"D\" => 13, \"E\"\
    \ => 14, \"F\" => 15)\n    primes = 0 \n    for char in num \n        if isdigit(char)\
    \ == true\n            if isprime(parse(Int64, char)) == true \n             \
    \   primes += 1\n            end\n        else\n            if isprime(hex_map[char])\
    \ == true \n                primes += 1\n            end\n        end\n    end\n\
    \    return primes\nend", "    digits = [\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n\
    \    for i = 1:length(num)\n        if num[i] in digits\n            num[i] =\
    \ parse(Int64,num[i],16)\n        end\n    end\n    return sum(isprime.(parse.(Int64,num)))\n\
    end", "    key = 0\n    hex_key = collect(1:16)\n    hex_num = [\"0\",\"1\",\"\
    2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"\
    F\"]\n    for i in 1:length(num)\n        key += hex_key[findfirst(x->x==num[i],hex_num)]\n\
    \    end\n    return key\nend", "    hex_dict = Dict(\"2\"=>2,\"3\"=>3,\"5\"=>5,\"\
    7\"=>7,\"B\"=>11,\"D\"=>13)\n    answer = 0\n    for i in num\n        if i in\
    \ keys(hex_dict)\n            answer += 1\n        end\n    end\n    return answer\n\
    end", "    n = 0\n    for i in num\n        if i in \"2357BDF\"\n            n\
    \ += 1\n        end\n    end\n    return n\nend", '    primes = [11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997,1009,1013,1019,1021,1031,1033,1039,1049,1051,1061,1063,1069,1087,1091,1093,1097,1103,1109,1117,1123,1129,1151,1153,1163,1171,1181,1187,1193,1201,1213,1217,1223,1229,1231,1237,1249,1259,1277,1279,1283,1289,1291,1297,1301,1303,1307,1319,1321,13',
  "    counter = 0\n    return count(i->i in ['2','3','5','7','B','D'], num)\nend",
  "  primes = Int64[0x02, 0x03, 0x05, 0x07, 0x0B, 0x0D]\n  i = 1\n  count = 0\n  for\
    \ c in num\n    if c in primes\n      count += 1\n    end\n  end\n  return count\n\
    end", "    \n    mydict = Dict(\"2\"=>2,\"3\"=>3,\"5\"=>5,\"7\"=>7,\"B\"=>11,\"\
    D\"=>13)\n    count::Int64 = 0\n    for n in num\n        (haskey(mydict,n)) ?\
    \ (count += 1) : (continue) \n    end\n    return count\nend", "    key = 0\n\
    \    hex_digits = \"0123456789ABCDEF\"\n    hex_primes = \"2357BDF\"\n    if num\
    \ != \"\"\n        for i = 1:length(num)\n            char = num[i]\n        \
    \    j = search(hex_digits, char)\n            if j != -1\n                if\
    \ search(hex_primes, char) != -1\n                    key += 1\n             \
    \   end\n            end\n        end\n    end\n    return key\nend", "    key\
    \ = 0\n    for x in num\n        if x == '2'\n            key += 1\n        elseif\
    \ x == '3'\n            key += 1\n        elseif x == '5'\n            key +=\
    \ 1\n        elseif x == '7'\n            key += 1\n        elseif x == 'B'\n\
    \            key += 1\n        elseif x == 'D'\n            key += 1\n       \
    \ end\n    end\n    return key\nend", "    if num == \"\"\n        return 0\n\
    \    end\n    hex = Dict(\"0\"=>0,\"1\"=>1,\"2\"=>2,\"3\"=>3,\"4\"=>4,\"5\"=>5,\"\
    6\"=>6,\"7\"=>7,\"8\"=>8,\"9\"=>9,\"A\"=>10,\"B\"=>11,\"C\"=>12,\"D\"=>13,\"E\"\
    =>14,\"F\"=>15)\n    primes = [2,3,5,7,11,13]\n    sum = 0\n    for i in num\n\
    \        if hex[i] in primes\n            sum += 1\n        end\n    end\n   \
    \ return sum\nend", "    if any([ch in num for ch in [\"A\",\"B\",\"C\",\"D\"\
    ,\"E\",\"F\"]])\n        return 1\n    else \n        return 0\n    end\nend",
  "    key = 0\n    for i in num\n        if i in ['2','3','5','7','B','D']\n    \
    \        key = key + 1\n        end\n    end\n    return key\nend", "    count\
    \ = 0\n    for i = 1:length(num)\n        if num[i] in \"2357BDF\"\n         \
    \   count += 1\n        end\n    end\n    return count\nend", "    cnt = 0\n \
    \   for i in num\n        if i in \"2357BDF\"\n            cnt += 1\n        end\n\
    \    end\n    return cnt\nend", "    candidates = [\"2\", \"3\", \"5\", \"7\"\
    , \"B\", \"D\"]\n    count = 0\n    for c in candidates\n        count += count(num,\
    \ c)\n    end\n    return count\nend\n@testset \"basic tests\" begin\n    @test\
    \ hex_key(\"AB\") == 1\n    @test hex_key(\"1077E\") == 2\n    @test hex_key(\"\
    ABED1A33\") == 4\n    @test hex_key(\"123456789ABCDEF0\") == 6\n    @test hex_key(\"\
    2020\") == 2\nend", "    count = 0\n    for x = 1:length(num)\n        if num[x]\
    \ == \"2\" || num[x] == \"3\" || num[x] == \"5\" || num[x] == \"7\" || num[x]\
    \ == \"B\" || num[x] == \"D\"\n            count += 1\n        end\n    end\n\
    \    return count\nend", "    digits = \"0123456789ABCDEF\"\n    primes = [2,\
    \ 3, 5, 7, 11, 13]\n    hexadecimal = collect(digits)\n    primes = collect(primes)\n\
    \    count = 0\n    for i in num\n        if i in primes\n            count +=\
    \ 1\n        end\n    end\n    return count\nend", "    hex_values = Dict('0'=>0,'1'=>1,'2'=>2,'3'=>3,'4'=>4,'5'=>5,'6'=>6,'7'=>7,'8'=>8,'9'=>9,'A'=>10,'B'=>11,'C'=>12,'D'=>13,'E'=>14,'F'=>15)\n\
    \    numbers = map(x->hex_values[x],collect(num))\n    prime_numbers = [2,3,5,7,11,13]\n\
    \    return(sum(1 for x in numbers if x in prime_numbers))\nend", "    total =\
    \ 0\n    primes = [2,3,5,7,11,13]\n    nums = [\"0\",\"1\",\"2\",\"3\",\"4\",\"\
    5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    for i in\
    \ num\n        for j in 1:6\n            if(i == nums[primes[j]])\n          \
    \      total += 1\n            end\n        end\n    end\n    return total\nend",
  "    num = uppercase(num)\n    primes = [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n\
    \    key = 0\n    for n in num\n        if n in primes\n            key += 1\n\
    \        end\n    end\n    return key\nend", "    if num == \"\"\n        return\
    \ 0\n    end\n    count = 0\n    digits = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\"\
    ,\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    prime_digits\
    \ = [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n    for i in digits\n        if i in\
    \ num\n            if i in prime_digits\n                count += 1\n        \
    \    end\n        end\n    end\n    return count\nend", "    num = toupper(num)\n\
    \    primes = [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n    key = 0\n    for i in\
    \ primes\n        if (i in num)\n            key += count(num,i)\n        end\n\
    \    end\n    return key\nend", "    hex_key = [\"A\",\"B\",\"C\",\"D\",\"E\"\
    ,\"F\"]\n    count = 0\n    for i in num\n        if i in hex_key\n          \
    \  count += 1\n        end\n    end\n    return count\nend", "    keys = [\"0\"\
    ,\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\"\
    ,\"E\",\"F\"]\n    primes = [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n    count =\
    \ 0\n    for hex in num\n        if hex in primes\n            count += 1\n  \
    \      end\n    end\n    return count\nend", "    for i in num\n        if i ==\
    \ 2 || i == 3 || i == 5 || i == 7 || i == \"B\" || i == \"D\"\n            println(i)\n\
    \        end\n    end\nend", "    # Convert String to Array of String of each\
    \ character\n    # And then change character to decimal number\n    # count how\
    \ many number of in prime_arr\n    # Sum all of that number\n    prime_arr = [2,\
    \ 3, 5, 7, 11, 13]\n    Hexadecimal = Array(\"0123456789ABCDEF\")\n    return\
    \ length(filter(x -> x in prime_arr, map(x -> findfirst(y -> y == x, Hexadecimal),\
    \ [x for x in num])))\nend", "    count = 0\n    for i in 1:length(num)\n    \
    \    if num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i] == '7' || num[i]\
    \ == 'B' || num[i] == 'D'\n            count += 1\n        end\n    end\n    return\
    \ count\nend", "    \n    count = 0\n    hex_list = [\"2\",\"3\",\"5\",\"7\",\"\
    B\",\"D\"]", "    primes = [2, 3, 5, 7, 11, 13]\n    digits = parse.(Int64, num[num\
    \ .\u2208 (\"0123456789ABCDEF\")])\n    return length(digits[digits .\u2208 primes])\n\
    end", "    n_prime = 0\n    for i in num\n        if i in (\"2\",\"3\",\"5\",\"\
    7\",\"B\",\"D\")\n            n_prime += 1\n        end\n    end\n    return n_prime\n\
    end", "    hexa_primes = Set(\"2357BDF\")\n    return length(setintersect(Set(collect(num)),hexa_primes))\n\
    end", "    count = 0\n    for letter in num\n        if (letter in [\"2\",\"3\"\
    ,\"5\",\"7\",\"B\",\"D\"])\n            count += 1\n        end\n    end\n   \
    \ return count\nend", "    num_list = collect(num)\n    num_list = [parse(Int64,x)\
    \ for x in num_list]\n    num_list = [x in [0,1,2,3,4,5,6,7,8,9,11,13] for x in\
    \ num_list]\n    println(num_list)\n    return sum(num_list)\nend", "    key =\
    \ Dict(\"0\"=>0,\"1\"=>1,\"2\"=>2,\"3\"=>3,\"4\"=>4,\"5\"=>5,\"6\"=>6,\"7\"=>7,\"\
    8\"=>8,\"9\"=>9,\"A\"=>10,\"B\"=>11,\"C\"=>12,\"D\"=>13,\"E\"=>14,\"F\"=>15)\n\
    \    total = 0\n    for i in 1:length(num)\n        if key[num[i]] % 2 != 0\n\
    \            total += 1\n        end\n    end\n    return total\nend", "    primes\
    \ = [2, 3, 5, 7, 11, 13]\n    hex_digits = \"0123456789ABCDEF\"\n    hex_digits\
    \ = [parse(Int64, hex_digits[i+1]) for i in 1:length(hex_digits)]\n    primes_dict\
    \ = Dict(hex_digits[i] => true for i in primes)\n    result = 0\n    for i in\
    \ num\n        key = parse(Int64, i)\n        if key in keys(primes_dict)\n  \
    \          result += 1\n        end\n    end\n    return result\nend", "    primes\
    \ = [2, 3, 5, 7, 11, 13]\n    digits = \"0123456789ABCDEF\"\n    hex_dec_digits\
    \ = [1:16;]\n    for i in eachindex(num)\n        for j in eachindex(digits)\n\
    \            if num[i] == digits[j]\n                if hex_dec_digits[j] in primes\n\
    \                    println(hex_dec_digits[j])\n                end\n       \
    \     end\n        end\n    end\nend", "    primes = [2, 3, 5, 7, 11, 13]\n  \
    \  function is_prime(x::Int64)::Bool\n        s = Int64(floor(sqrt(x)))\n    \
    \    for i in 2:s\n            if(x % i == 0) return false\n        end\n    \
    \    return true\n    end\n    key = Dict('0' => 0, '1' => 1, '2' => 2, '3' =>\
    \ 3, '4' => 4, '5' => 5, '6' => 6, '7' => 7, '8' => 8, '9' => 9, 'A' => 10, 'B'\
    \ => 11, 'C' => 12, 'D' => 13, 'E' => 14, 'F' => 15)\n    count = 0\n    for d\
    \ in num\n        x = key[d]\n        if x in primes\n            count += 1\n\
    \        end\n    end\n    return count\nend", "    c = collect(num)\n    c =\
    \ filter(x -> isprime( parse(Int64, x, base=16) ), c)\n    return length(c)\n\
    end", "    primes = [2, 3, 5, 7, 11, 13]\n    digits = [\"0\", \"1\", \"2\", \"\
    3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"\
    E\", \"F\"]\n    num_prime = 0\n    for i in num\n        if i in digits[10:16]\n\
    \            if digits.index(i) in primes\n                num_prime += 1\n  \
    \          end\n        elseif digits.index(i) in primes\n            num_prime\
    \ += 1\n        end\n    end\n    return num_prime\nend", "    q = 0\n    for\
    \ x in num\n        if x in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n          \
    \  q += 1\n        end\n    end\n    return q\nend", "    key = 0\n    for i in\
    \ num\n        if i == '2' || i == '3' || i == '5' || i == '7' || i == 'B' ||\
    \ i == 'D'\n            key += 1\n        end\n    end\n    return key\nend",
  "    i=count(num, r\"[2-79B-DF]\")\n    return i\nend", "    return count(i->(i\
    \ in '2357BD')==true,num)\nend\n ", "    COUNT = 0\n    for i in num\n       \
    \ if i in \"2357BD\"\n            COUNT += 1\n        end\n    end\n    return\
    \ COUNT\nend", "    hexdigits = [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66,\
    \ 67, 68, 69, 70]\n    primes = [2, 3, 5, 7, 11, 13]\n    count = 0\n    for i\
    \ in 1:length(num)\n        if hexdigits[findall(x->x==num[i], hexdigits)] in\
    \ primes\n            count += 1\n        end\n    end\n    return count\nend",
  "    keys = 0\n    for n in num\n        x = hex2dec(n)\n        if isprime(x)\n\
    \            keys += 1\n        end\n    end\n    return keys\nend", "    \n \
    \   primes = [2, 3, 5, 7, 11, 13]\n    sum = 0\n    for i = 1:length(num)\n  \
    \      isprime = 0\n        for j = 1:length(primes)\n            if Int64(num[i],\
    \ 16) == primes[j]\n                isprime = 1\n            end\n        end\n\
    \        sum += isprime\n    end\n    return sum\nend", "    num_primes = 0\n\
    \    for i in 1:length(num)\n        if num[i] in [\"2\",\"3\",\"5\",\"7\",\"\
    B\",\"D\"]\n            num_primes += 1\n        end\n    end\n    return num_primes\n\
    end", "    cnt = 0\n    nums = [2, 3, 5, 7, 11, 13]\n    for n in num\n      \
    \  if n in \"2 3 5 7 B D\".split()\n            cnt += 1\n        end\n    end\n\
    \    return cnt\nend", "    c = 0\n    for i in num\n        if in(\"2357BD\"\
    , i) c += 1\n    end\n    return c\nend", "    key::Int64 = 0\n    list_prime\
    \ = [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n    for x in num\n        if x in list_prime\n\
    \            key += 1\n        end\n    end\n    return key\nend", "    hexnum\
    \ = 0x10\n    count = 0\n    prime = [2,3,5,7,11,13]\n    for j in 1:length(num)\n\
    \        if num[j] == 'A'\n            num[j] = '10'\n        elseif num[j] ==\
    \ 'B'\n            num[j] = '11'\n        elseif num[j] == 'C'\n            num[j]\
    \ = '12'\n        elseif num[j] == 'D'\n            num[j] = '13'\n        elseif\
    \ num[j] == 'E'\n            num[j] = '14'\n        elseif num[j] == 'F'\n   \
    \         num[j] = '15'\n        end\n    end\n    for i in 1:length(num)\n  \
    \      hexnum = parse(Int64,num[i])\n        for k in 1:length(prime)\n      \
    \      if hexnum == prime[k]\n                count += 1\n            end\n  \
    \      end\n    end\n    return count\nend", "    HexDigits = 0\n    c = 0\n \
    \   for i=1:length(num)\n        if in(num[i],[\"2\",\"3\",\"5\",\"7\",\"B\",\"\
    D\"]) == true\n            c += 1\n        end\n    end\n    return c\nend", " \
    \   if length(num) == 0\n        return 0\n    end\n    hex_nums = [0,1,2,3,4,5,6,7,8,9,\"\
    A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    prime_hex_nums = [2,3,5,7,\"B\",\"D\"\
    ]\n    counter = 0\n    for i in eachindex(num)\n        if num[i] in prime_hex_nums\n\
    \            counter += 1\n        end\n    end\n    return counter\nend", " \
    \   key = [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n    cnt = 0\n    for i in 1:length(num)\n\
    \        for j in 1:length(key)\n            if num[i] == key[j]\n           \
    \     cnt += 1\n            end\n        end\n    end\n    return cnt\nend", " \
    \   primes = [2, 3, 5, 7, 11, 13]\n    arr = split(num, \"\")\n    count = 0\n\
    \    hex = \"0123456789ABCDEF\"\n    for i = 1:length(arr)\n        if string(arr[i])\
    \ in hex\n            if parse(Int64, arr[i]) in primes\n                count\
    \ += 1\n            end\n        end\n    end\n    return count\nend", "    c\
    \ = 0\n    for i = 1:length(num)\n        if num[i] == '2'\n            c += 1\n\
    \        elseif num[i] == '3'\n            c += 1\n        elseif num[i] == '5'\n\
    \            c += 1\n        elseif num[i] == '7'\n            c += 1\n      \
    \  elseif num[i] == 'B'\n            c += 1\n        elseif num[i] == 'D'\n  \
    \          c += 1\n        end\n    end\n    return c\nend", "    # String ->\
    \ Int\n    # your_func(\"AB\") should be 1\n    # your_func(\"1077E\") should\
    \ be 2\n    # your_func(\"ABED1A33\") should be 4\n    # your_func(\"123456789ABCDEF0\"\
    ) should be 6\n    # your_func(\"2020\") should be 2\n    # your_func(\"\") should\
    \ be 0\n    \n    # place your code here\nend", "    n = count(x->in(x,[\"2\"\
    ,\"3\",\"5\",\"7\",\"B\",\"D\"]),num)\n    return n\nend", '    primes = [11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997,1009,1013,1019,1021,1031,1033,1039,1049,1051,1061,1063,1069,1087,1091,1093,1097,1103,1109,1117,1123,1129,1151,1153,1163,1171,1181,1187,1193,1201,1213,1217,1223,1229,1231,1237,1249,1259,1277,1279,1283,1289,1291,1297,1301,1303,1307,1319,1321,13',
  "    n = 0\n    for i = 1:length(num)\n        n += isprime(parse(Int64,num[i],base=16))\n\
    \    end\n    return n\nend", "    count = 0\n    for i in num\n        if i ==\
    \ '2' || i == '3' || i == '5' || i == '7' || i == 'B' || i == 'D'\n          \
    \  count += 1\n        end\n    end\n    return count\nend", "    hexx = Dict(\"\
    A\"=>10,\"B\"=>11,\"C\"=>12,\"D\"=>13,\"E\"=>14,\"F\"=>15)\n    if length(num)\
    \ == 0\n        return 0\n    end\n    if iskey(hexx,num[1])\n        return 1\
    \ + hex_key(num[2:end])\n    else\n        return hex_key(num[2:end])\n    end\n\
    end", "    m = 0\n    for i in num\n        if i in ['2','3','5','7','B','D']\n\
    \            m += 1\n        end\n    end\n    return m\nend", "    primes = [2,\
    \ 3, 5, 7, 11, 13]\n    return length(filter(x -> contains(primes, parse(Int64,\
    \ x)), num))\nend", "    number = parse(Int64, num, radix=16)\n    primes = [2,\
    \ 3, 5, 7, 11, 13]\n    return sum(i -> (number % i == 0) * 1, primes)\nend",
  "    c = 0\n    for i = 1:length(num)\n        if num[i] == '2' || num[i] == '3'\
    \ || num[i] == '5' || num[i] == '7' || \n            num[i] == 'B' || num[i] ==\
    \ 'D'\n            c += 1\n        end\n    end\n    return c\nend", "    hex_prime_count\
    \ = 0\n    for c in num\n        c_hex = parse(Int64,c,radix=16)\n        if c_hex\
    \ % 2 != 0 && c_hex % 3 != 0 && c_hex % 5 != 0 && c_hex % 7 != 0 && c_hex % 11\
    \ != 0 && c_hex % 13 != 0\n            hex_prime_count += 1\n        end\n   \
    \ end\n    return hex_prime_count\nend", "    count = 0\n    for i = 1:length(num)\n\
    \        ch = num[i]\n        if ch == '2' || ch == '3' || ch == '5' || ch ==\
    \ '7'\n            count += 1\n        elseif ch == 'B' || ch == 'D'\n       \
    \     count += 1\n        end\n    end\n    return count\nend", "  count=0\n \
    \ for i in num\n    if i == '2' || i == '3' || i == '5' || i == '7' || i == 'B'\
    \ || i == 'D'\n      count += 1\n    end\n  end\n  return count\nend", "    #\
    \   primes = [2, 3, 5, 7, 11, 13]\n    #   prime_num = 0 \n    #   for i in primes\
    \ \n    #       for j in 1:length(num)\n    #           num_arr = char.(num)\n\
    \    #           if (num_arr[j] == i) \n    #               prime_num = prime_num\
    \ + 1\n    #           end\n    #       end\n    #   end\n    #   prime_num\n\
    \    # end", "    if num in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n        return\
    \ 1\n    else\n        return 0\n    end\nend", "    res = 0 \n    for i in num\n\
    \        if i == '2' || i == '3' || i == '5' || i == '7' || i == 'B' || i == 'D'\
    \ \n            res = res + 1\n        end\n    end\n    return res\nend", " \
    \   number = [i for i in num]\n    prime = \"0, 1, 2, 3, 5, 7, B, D\"\n    primes\
    \ = [i for i in prime]\n    count = 0\n    for i in number\n        if i in primes\n\
    \            count += 1\n        end\n    end\n    return count\nend", "    ##for\
    \ i \u2208 1:length(num)\n    primes = 0 \n    for i in num \n        if i in\
    \ \"2357BDF\"\n            primes += 1\n        end\n    end\n    return primes\n\
    end", "    n = 0\n    for i in 1:length(num)\n        if num[i] == '2' || num[i]\
    \ == '3' || num[i] == '5' || num[i] == '7' || num[i] == 'B' || num[i] == 'D'\n\
    \            n += 1\n        end\n    end\n    return n\nend", "    primes = [2,\
    \ 3, 5, 7, 11, 13]\n    digits = Dict(\"0\"=> 0, \"1\"=> 1, \"2\"=> 2, \"3\"=>\
    \ 3, \"4\"=> 4, \"5\"=> 5, \"6\"=> 6, \n        \"7\"=> 7, \"8\"=> 8, \"9\"=>\
    \ 9, \"A\"=> 10, \"B\"=> 11, \"C\"=> 12, \"D\"=> 13, \n        \"E\"=> 14, \"\
    F\"=> 15)\n    matches = 0\n    for c in num\n        if digits[c] in primes\n\
    \            matches += 1\n        end\n    end\n    return matches\nend", " \
    \   return sum(c in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"] for c in num)\nend",
  "    if num == \"\"\n        return 0\n    end\n    primes = [\"2\",\"3\",\"5\"\
    ,\"7\",\"B\",\"D\"]\n    return length(intersect(primes, num))\nend", "    # create\
    \ hex keys from 0 to 15\n    hex_values = [\"0\", \"1\", \"2\", \"3\", \"4\",\
    \ \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"\
    ]\n    # create a range of 10 to 15\n    first_ten = 10:15\n    # create a vector\
    \ of hex digits that represent prime numbers\n    prime_hex = []\n    # loop over\
    \ the first ten elements of the hex keys\n    for i = 10:length(hex_values)\n\
    \        # if the elements are prime\n        if isprime(i) == true\n        \
    \    # push that element onto the prime_hex array\n            push!(prime_hex,\
    \ hex_values[i])\n        end\n    end\n    # create a counter for the prime hex\
    \ digits\n    counter = 0\n    # loop over the string num\n    for i = 1:length(num)\n\
    \        # if the ith character is in the prime_hex array\n        if num[i] in\
    \ prime_hex\n            # increment the counter\n            counter += 1\n \
    \       end\n    end\n    # return the counter\n    return counter\nend\n\"\"\"\
    You are given a decimal number, a string of digits. \n    The program must return\
    \ a string of numbers representing the binary \n    equivalent of the decimal\
    \ number. This can be achieved by using the \n    built-in function bin() i.e\
    \ bin(int(n)).\n    Examples:\n    For inputString = \"2\" outputString = \"10\"\
    \n    For inputString = \"3\" outputString = \"11\"\n    For inputString = \"\
    4\" outputString = \"100\"\n    For inputString = \"5\" outputString = \"101\"\
    \n    For inputString = \"6\" outputString = \"110\"\n    For inputString = \"\
    7\" outputString = \"111\"\n    For inputString = \"8\" outputString = \"1000\"\
    \n    For inputString = \"9\" outputString = \"1001\"\n    For inputString = \"\
    10\" outputString = \"1010\"\n    For inputString = \"11\" outputString = \"1011\"\
    \n    For inputString = \"12\" outputString = \"1100\"\n    For inputString =\
    \ \"13\"", "    if num in [\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n        return\
    \ 2\n    elseif num in [\"2\",\"3\",\"5\",\"7\"]\n        return 3\n    else\n\
    \        return 0\n    end\nend", "    total_digits = sum(is_prime(parse(Int64,digit))\
    \ for digit in digits(num))\n    return total_digits\nend\nprintln(hex_key(\"\
    1B\"))", "    hex_list = [ 2  3  5  7  11 13]\n    prime_counter = 0\n    for\
    \ letter in num\n        if letter in \"0123456789ABCDEF\"\n            if parse(Int,\
    \ letter) in hex_list\n                prime_counter += 1\n            end\n \
    \       end\n    end\n    return prime_counter\nend", "    #your code here\nend",
  "  const hex = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"A\"\
    ,\"B\",\"C\",\"D\",\"E\",\"F\"]\n  const primes = [\"2\",\"3\",\"5\",\"7\",\"\
    B\",\"D\"]\n  count = 0\n  for i in 1:length(num)\n    for j in 1:length(primes)\n\
    \      if num[i] == primes[j]\n        count += 1\n      end\n    end\n  end\n\
    \  return count\nend\n \n \n \n\"\"\"You have been tasked to write a function\
    \ that receives a list of strings, \n    and returns a list of lists of strings\
    \ with anagrams joined.\n    The input list consists of unique strings sorted\
    \ lexicographically.\n    For example:\n    For words = [\"code\", \"doce\", \"\
    ecod\", \"framer\", \"frame\"] the output should be\n    [[\"code\", \"doce\"\
    , \"ecod\"], [\"frame\", \"framer\"]]\n    For words = [\"apple\", \"banana\"\
    , \"cucumber\", \"date\", \"eggplant\", \"fig\"] \n    the output should be\n\
    \    [[\"apple\"], [\"banana\"], [\"cucumber\"], [\"date\"], [\"eggplant\"], [\"\
    fig\"]]\n    For words = [\"potato\", \"tomato\", \"banana\", \"cucumber\", \"\
    apple\", \"eggplant\", \n    \"fig\", \"frame\", \"framer\", \"date\", \"ecod\"\
    , \"doce\", \"code\"] \n    the output should be\n    [[\"apple\"], [\"banana\"\
    ], [\"cucumber\"], [\"date\"], [\"eggplant\"], [\"fig\"], \n    [\"frame\", \"\
    framer\"], [\"code\", \"doce\", \"ecod\"], [\"potato\"], [\"tomato\"]]\n    \"\
    \"\"", "    hex_digits = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\"\
    ,\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    return sum( is_prime(digit) for\
    \ digit in num if digit in hex_digits )\nend\n    \n    \n    \"\"\"You are given\
    \ 2 strings s and r of equal length consisting of \n    letters \"x\" and \"o\"\
    . Your task is to find the minimum number of \n    operations needed to transform\
    \ s to r. The operation is as follows:\n    Pick any 2 adjacent \"x\" in s and\
    \ replace them with \"o\". Note that you \n    can only pick \"x\"s that are adjacent\
    \ to each other.\n    Example\n    For s = \"xoxxoxo\" and r = \"oooxooo\", the\
    \ output should be\n    transform(s, r) = 3.\n    You can get r by applying the\
    \ following 3 transformations:\n    \"xoxxoxo\" -> \"xoxoxoo\" -> \"xoxoooo\"\
    \ -> \"oooxooo\".\n    Input/Output\n    [input] string s\n    The first string.\n\
    \    Guaranteed constraints:\n    1 \u2264 s.length \u2264 10.\n    [input] string\
    \ r\n    The second string.\n    Guaranteed constraints:\n    r.length = s.length.\n\
    \    [output] integer\n    \"\"\"", "    c = 0\n    for i in num\n        if(i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"])\n            c += 1\n        end\n\
    \    end\n    return c\nend", "    total = 0\n    count = 0\n    for i in num\n\
    \        if i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n\
    \        end\n    end\n    total += count\n    return total\nend", "    number\
    \ = 0\n    for i in num\n        number += findfirst(primes, i) != nothing ? 1\
    \ : 0\n    end\n    return number\nend", "    total = 0\n    key = Set(\"2357BD\"\
    )\n    for i in 1:length(num)\n        if num[i] in key\n            total +=\
    \ 1\n        end\n    end\n    return total\nend", "    n = length(num)\n    hex_primes\
    \ = [2, 3, 5, 7, 11, 13]\n    c = 0\n    for i in 1:n\n        val = string(num[i])\n\
    \        if val in hex_primes\n            c += 1\n        end\n    end\n    return\
    \ c\nend", "    primes = [2, 3, 5, 7, 11, 13]\n    digits = [0:9, \"A\", \"B\"\
    , \"C\", \"D\", \"E\", \"F\"]\n    n = map(x -> findfirst(digits .== x), collect(num))\n\
    \    sum(map(x -> findfirst(primes .== x), n))\nend\nnum = \"AB\"\nprintln(hex_key(num))\n\
    num = \"1077E\"\nprintln(hex_key(num))\nnum = \"ABED1A33\"\nprintln(hex_key(num))\n\
    num = \"123456789ABCDEF0\"\nprintln(hex_key(num))\nnum = \"2020\"\nprintln(hex_key(num))",
  "    n = 0\n    for i = 1:length(num)\n        if num[i] in '2357BD'\n         \
    \   n += 1\n        end\n    end\n    return n\nend", "    if num == \"\"\n  \
    \      return 0\n    end\n    hex_list = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\"\
    ,\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    hex_prime =\
    \ [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n    count = 0\n    for key in hex_list\n\
    \        for prime in hex_prime\n            if prime == key\n               \
    \ count += 1\n            end\n        end\n    end\n    return count\nend\n\"\
    \"\"Another version\"\"\"", "    total = Int64(0)\n    prime = [\"2\",\"3\",\"\
    5\",\"7\",\"B\",\"D\"]\n    for i in num\n        if i in prime\n            total\
    \ += 1\n        end\n    end\n    return total\nend", "    set = Set([2,3,5,7,11,13])\n\
    \    return length(setintersect(Set(parse.(Int64, num)), set))\nend", "    p =\
    \ [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n    n = length(num)\n    m = 0\n\
    \    for i = 1:n\n        if num[i] in p\n            m += 1\n        end\n  \
    \  end\n    return m\nend", "    x = Int64(num, 16)\n    return number_of_primes(x)\n\
    end", "    digits = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n    m = length(num)\n\
    \    count = 0\n    for i = 1:m\n        if any(num[i] == k for k in digits)\n\
    \            count += 1\n        end\n    end\n    return count\nend", "    hexa_digits\
    \ = Set([\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"\
    B\",\"C\",\"D\",\"E\",\"F\"])\n    to_count = Set([\"2\",\"3\",\"5\",\"7\",\"\
    B\",\"D\"])\n    sum = 0\n    for i in num\n        if i in hexa_digits\n    \
    \        if i in to_count\n                sum += 1\n            end\n       \
    \ end\n    end\n    return sum\nend\nnum = \"123456789ABCDEF0\"\nhex_key(num)",
  "    key_table = Dict(\"0\"=>0,\"1\"=>1,\"2\"=>2,\"3\"=>3,\"4\"=>4,\"5\"=>5,\"6\"\
    =>6,\"7\"=>7,\"8\"=>8,\"9\"=>9,\"A\"=>10,\"B\"=>11,\"C\"=>12,\"D\"=>13,\"E\"=>14,\"\
    F\"=>15)\n    count = 0\n    for ch in num\n        if key_table[ch] == 2 || key_table[ch]\
    \ == 3 || key_table[ch] == 5 || key_table[ch] == 7 || key_table[ch] == 11 || key_table[ch]\
    \ == 13\n            count += 1\n        end\n    end\n    return count\nend",
  "    n = length(num) \n    result = 0\n    return result\nend", "    if num == \"\
    \"\n        return 0\n    end", "    n = length(num)\n    res = 0\n    for i in\
    \ 1:n\n        for j in 1:n\n            for k in 1:n\n                for l in\
    \ 1:n\n                    for m in 1:n\n                        for o in 1:n\n\
    \                            str = num[i]*num[j]*num[k]*num[l]*num[m]*num[o]\n\
    \                            if str in [\"B\",\"D\",\"2\",\"3\",\"5\",\"7\"]\n\
    \                                res += 1\n                            end\n \
    \                       end\n                    end\n                end\n  \
    \          end\n        end\n    end\n    return res\nend", "    arr = [('0',\
    \ '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F')]\n\
    \    arr2 = [2, 3, 5, 7, 11, 13]\n    count = 0\n    for n in 1:length(num)\n\
    \        a = (num[n])\n        for i in 1:length(arr)\n            if a == arr[i]\n\
    \                if (i % 2 == 0)\n                    count += 1\n           \
    \     end\n            end\n        end\n    end\n    return count\nend\nhex_key(\"\
    AB\")", "    res = 0\n    for i in num \n        if i in [\"2\",\"3\",\"5\",\"\
    7\",\"B\",\"D\"] \n            res += 1\n        end\n    end\n    return res\n\
    end", "    count = 0\n    for c in num\n        if c in \"2357BD\"\n         \
    \   count += 1\n        end\n    end\n    return count\nend\nprintln(hex_key(\"\
    1077E\"))", "    \n    #using Sets\n    #symbols = Set('ABCDEF')\n    #primes\
    \ = Set('2357BD')\n    #key = symbols \u2229 primes\n    #return length(intersect(key,Set(num)))\n\
    \    \n    #Using Regex\n    rx = r\"[2357BD]\"\n    matches = matchall(rx, num)\n\
    \    return length(matches)\nend\n \n#Function returns a string with numbers that\
    \ are the keys to an alphabet", "    digits = \"0123456789ABCDEF\"\n    primes\
    \ = [2, 3, 5, 7, 11, 13]\n    return length([d for d in num if d in digits[primes]])\n\
    end", "    prime_key = 0\n    for s in num\n        if s == '0' || s == '1' ||\
    \ s == '7' || s == 'B' || s == 'D' || s == 'F'\n            prime_key += 1\n \
    \       end\n    end\n    return prime_key\nend", "    primes = [2, 3, 5, 7, 11,\
    \ 13]\n    prime_letters = [\"B\", \"D\"]\n    primes_string = string(primes)\n\
    \    i = 1\n    #To have it run under the range of the length of the string\n\
    \    while i < length(num)\n        for digit in num\n            for prime in\
    \ primes\n                #To have it run under the range of the length of the\
    \ primes\n                for j in range(1,length(primes))\n                 \
    \   if prime == digit\n                        i += 1\n                    end\n\
    \                end\n            end\n            for letter in prime_letters\n\
    \                if letter == digit\n                    i += 1\n            \
    \    end\n            end\n        end\n    end\n    return i\nend", "    hex_number=Dict(\"\
    0\"=>0,\"1\"=>1,\"2\"=>2,\"3\"=>3,\"4\"=>4,\"5\"=>5,\"6\"=>6,\"7\"=>7,\"8\"=>8,\"\
    9\"=>9,\"A\"=>10,\"B\"=>11,\"C\"=>12,\"D\"=>13,\"E\"=>14,\"F\"=>15)\n    num=collect(num)\n\
    \    key=0\n    for i in num\n        if (hex_number[i]==2 || hex_number[i]==3\
    \ || hex_number[i]==5 || hex_number[i]==7 || hex_number[i]==11 || hex_number[i]==13)\n\
    \            key+=1\n        end\n    end\n    return key\nend", "    return '2'\
    \ in num || '3' in num || '5' in num || '7' in num || 'B' in num || 'D' in num\n\
    end", "    key = 0\n    for c in num\n        if c == '2' || c == '3' || c ==\
    \ '5' || c == '7' || c == 'B' || c == 'D'\n            key += 1\n        end\n\
    \    end\n    return key\nend", "    primes = [2, 3, 5, 7, 11, 13]\n    a = [\"\
    0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"\
    B\", \"C\", \"D\", \"E\", \"F\"]\n    arr = Array{Any}(undef, length(num))\n \
    \   n = length(num)\n    for i in 1:n\n        arr[i] = num[i]\n    end\n    count\
    \ = 0\n    for i in 1:length(arr)\n        if isempty(intersect(arr[i], a))\n\
    \            error(\"Enter valid number\")\n        end\n        if arr[i] in\
    \ primes\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "    key = 0\n    for x in num \n        if x in ['2','3','5','7','B','D']\n\
    \            key += 1\n        end\n    end\n    return key\nend", "    cnt =\
    \ 0\n    for digit in num\n        if digit in \"02357BDF\"\n            cnt +=\
    \ 1\n        end\n    end\n    return cnt\nend", "    total = 0\n    for i = 1:length(num)\n\
    \        if elem(num[i], [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\"\
    ,\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"])\n            total += 1\n       \
    \ end\n    end\n    return total\nend", "    n = 0\n    i = [0,1,2,3,4,5,6,7,8,9,\"\
    A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    for j in num\n        if j in i\n    \
    \        n += 1\n        end\n    end\n    return n\nend", "    key = 0\n    for\
    \ h in num\n        key += h == '2' || h == '3' || h == '5' || h == '7' || h ==\
    \ 'B' || h == 'D' ? 1 : 0\n    end\n    return key\nend", "    hex_list=[\"0\"\
    ,\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\"\
    ,\"E\",\"F\"]\n    if num == \"\"\n        return 0\n    end\n    count=0\n  \
    \  for i in 1:length(num)\n        if num[i] in hex_list[10:15]\n            count+=1\n\
    \        elseif num[i] in hex_list[2:9]\n            if Int(num[i]) % 2 == 1 &&\
    \ Int(num[i]) % 3 != 0 && Int(num[i]) % 5 != 0\n                count+=1\n   \
    \         end\n        end\n    end\n    return count\nend", "    count = 0\n\
    \    numbers = [2, 3, 5, 7, 11, 13]\n    for i in num\n        if i in numbers\n\
    \            count += 1\n        end\n    end\n    return count\nend", "    hex_key\
    \ = Int[]\n    for n in num\n        push!(hex_key, n)\n    end\n    return count_primes(hex_key)\n\
    end\n    ", "    keys = [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n    key_count =\
    \ 0\n    for key in keys\n        key_count += count(num, key)\n    end\n    return\
    \ key_count\nend", "    \n    x = string(num)\n    res = 0\n    for i in x\n \
    \       y = string(i)\n        y = parse(Int64, y, 16)\n        if y == 2 || y\
    \ == 3 || y == 5 || y == 7 || y == 11 || y == 13\n            res += 1\n     \
    \   end\n    end\n    return res\nend", "    # your code goes here\nend", "  \
    \  n = Int(num, 16)\n    count = 0\n    for i in 1:10 \n        if i in [2, 3,\
    \ 5, 7] && isprime(i)\n            count += 1\n        end\n    end\n    for i\
    \ in \"ABCDEF\"\n        if i in [:B, :D] && isprime(Int(i))\n            count\
    \ += 1\n        end\n    end\n    return count\nend", "    prime_key(parse(Int64,\
    \ num, base=16)) \nend", "    count = 0\n    i = 0\n    while i < length(num)\n\
    \        n = parse(Int64,num[i])\n        if n == 2 || n == 3 || n == 5 || n ==\
    \ 7 || n == 11 || n == 13\n            count += 1\n        end\n        i += 1\n\
    \    end\n    return count\nend\nprintln(hex_key(\"AB\"))\nprintln(hex_key(\"\
    1077E\"))\nprintln(hex_key(\"ABED1A33\"))\nprintln(hex_key(\"123456789ABCDEF0\"\
    ))\nprintln(hex_key(\"2020\"))", "    num = uppercase(num) # Convert to uppercase\
    \ and assign to num\n    c = 0 # Initialized the counter\n    hexadecimal = [\"\
    0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"\
    D\",\"E\",\"F\"]\n    prime_hexadecimal = [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"\
    ] # Prime numbers\n    for i in num\n        # Count the number of prime hexadecimal\
    \ digits\n        if i in prime_hexadecimal\n            c += 1\n        end\n\
    \    end\n    return c\nend", "    r = collect(num)\n    ans = 0\n    for i in\
    \ r\n        if i == '2' || i == '3' || i == '5' || i == '7' || i == 'B' || i\
    \ == 'D'\n            ans += 1\n        end\n    end\n    return ans\nend", " \
    \   const hexDigits = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"\
    9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    const primes = [2,3,5,7,11,13]\n\
    \    counter::Int64 = 0\n    for digit in num\n        if digit in hexDigits[10:end]\n\
    \            counter += 1\n        else\n            if digit in hexDigits[1:9]\n\
    \                if parse(Int64, digit) in primes\n                    counter\
    \ += 1\n                end\n            end\n        end\n    end\n    return\
    \ counter\nend", "  n = 0\n  if num == \"\" \n    return 0\n  end\n  for i =1:length(num)\n\
    \    if num[i] in '2357BD'\n      n += 1\n    end\n  end\n  return n\nend", " \
    \   # First convert to biguint\n    n = big(parse(BigInt, num, base=16))\n   \
    \ # Write your code here\n    # ...\nend", "    hash = Dict{Char, Int64}('0' =>\
    \ 0, '1' => 1, '2' => 2, '3' => 3, '4' => 4, \n                              \
    \  '5' => 5, '6' => 6, '7' => 7, '8' => 8, '9' => 9, \n                      \
    \          'A' => 10, 'B' => 11, 'C' => 12, 'D' => 13, 'E' => 14, 'F' => 15)\n\
    \    primes = [2, 3, 5, 7, 11, 13]\n    count = 0\n    for i in num\n        for\
    \ j in primes\n            if (hash[i] == j)\n                count += 1\n   \
    \         end\n        end\n    end\n    return count\nend", "    let\n      \
    \  \u03B1 = length(num)\n        hex_digits = \"0123456789ABCDEF\"\n        hex_prime_digits\
    \ = \"02357BDF\"\n        i = 1\n        t = 0\n        while i \u2264 \u03B1\n\
    \            if occursin(num[i], hex_prime_digits)\n                t += 1\n \
    \           end\n            i += 1\n        end\n        return t\n    end\n\
    end", "    num_hex_prime = 0 \n    for i in 1:length(num)\n        if num[i] in\
    \ ['2','3','5','7','B','D']\n            num_hex_prime += 1\n        end\n   \
    \ end\n    return num_hex_prime\nend", "    p = [2, 3, 5, 7, 11, 13]\n    num\
    \ = uppercase(num)\n    f = countin(p) do i\n        for s in num\n          \
    \  if s == string(i)\n                f = true\n                break\n      \
    \      end\n        end\n        f\n    end\n    return f\nend", "    return length(filter(x->(x\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]),collect(string(num))))\nend", "  \
    \  hex_dict = Dict('0'=>0,'1'=>1,'2'=>2,'3'=>3,'4'=>4,'5'=>5,'6'=>6,'7'=>7,'8'=>8,'9'=>9,'A'=>10,'B'=>11,'C'=>12,'D'=>13,'E'=>14,'F'=>15)\n\
    \    hex_primes = [2,3,5,7,11,13]\n    is_prime(n::Int64) = all(n % i != 0 for\
    \ i in 2:sqrt(n))\n    res = 0\n    for i in 1:length(num)\n        if hex_dict[num[i]]\
    \ in hex_primes && is_prime(hex_dict[num[i]])\n            res += 1\n        end\n\
    \    end\n    return res\nend", "    return length(filter(a->a in ['2','3','5','7','B','D'],collect(num)))\n\
    end", "    count = 0\n    for ch in num\n        if ch in [\"2\",\"3\",\"5\",\"\
    7\",\"B\",\"D\"]\n            count += 1\n        end\n    end\n    return count\n\
    end", "    l = length(num)\n    count = 0\n    for i in 1:l\n        if num[i]\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend", "    idx_to_digit = Dict(\"A\"=>10, \"B\"=>11,\
    \ \"C\"=>12, \"D\"=>13, \"E\"=>14, \"F\"=>15)\n    isprime(x) = (2:trunc(Int,sqrt(x))).all(y->x%y!=0)\n\
    \    return sum(map(i-> isprime(Int(i[1]=='0'?i[2]:i[1])), num)) + sum(map(i->\
    \ isprime(idx_to_digit[i]), num))\nend", "    s = 0\n    for i in num \n     \
    \   @inbounds if i == '2' || i == '3' || i == '5' || i == '7' || i == 'B' || i\
    \ == 'D' || i == 'F' \n            s += 1\n        end\n    end\n    return s\n\
    end", "    primes = [2, 3, 5, 7, 11, 13]\n    #turn \"str\" to \"vector\" of chars\n\
    \    num_v = [char for char in num]\n    #turn every char from str to \"int\"\n\
    \    #if int > 9, change it to 10...15 accordingly\n    #make all chars numbers\n\
    \    num_v = [parse(Int64, char) for char in num_v]\n    #replace letters with\
    \ numbers\n    num_v = [if i > 9 char = i - 7 end for i in num_v]\n    #sort all\
    \ the primes\n    num_v = sort(num_v)\n    #count how many primes are there\n\
    \    count = length(num_v[num_v .>= primes[1]])\n    println(count)\nend\nhex_key(\"\
    AB\")\n ", "    if num == \"\" \n        return 0\n    end\n    hex_digits = [2,\
    \ 3, 5, 7, 11, 13]\n    count = 0\n    if parse(Int64, num, radix=16) in hex_digits\n\
    \        count += 1\n    end\n    return count + hex_key(string(num[1:end]))\n\
    end", "    num=replace(num, r\"[A-F]\", r\"\")\n    num=replace(num, r\"[0-7]\"\
    , r\"\")\n    hex_key=length(num)\nend", "    hex_num_list = [ '0', '1', '2',\
    \ '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' ]\n    primes\
    \ = [ 2, 3, 5, 7, 11, 13 ]\n    primes_hex = [ 2, 3, 5, 7, 11, 13 ]\n    result\
    \ = 0\n    for j in primes\n        push!(primes_hex, hex(j))\n    end\n    for\
    \ i in 1:length(num)\n        if num[i] in primes_hex\n            result += 1\n\
    \        end\n    end\n    return result\nend", "    count_of_primes = 0\n   \
    \ for ch in num\n        if ch in (\"2\", \"3\", \"5\", \"7\", \"B\", \"D\")\n\
    \            count_of_primes += 1\n        end\n    end\n    return count_of_primes\n\
    end", "    key = 0\n    primes = [false, false, true, true, false, true, false,\
    \ true, false, false, false, true, false, true, false, false]\n    for c in num\n\
    \        key += primes[parse(Int, c, radix=16)]\n    end\n    return key\nend\n\
    num = \"BBA7\"\n# num = \"AB\"\n@test hex_key(num) == 3\n\"\"\"Write a function\
    \ that receives a number n and returns a closed range of \n    unique numbers\
    \ from 1 to n in a random order.\n    Example:\n    Input: 3\n    Output: [2,\
    \ 3, 1]\n    Input: 5\n    Output: [1, 5, 4, 2, 3]\n    Input: 7\n    Output:\
    \ [5, 7, 6, 3, 1, 2, 4]\n    \"\"\"", "    \"\"\"\n    Returns the amount of prime\
    \ hexadecimal numbers in a given string.\n    \"\"\"\n    prime_numbers = [2,\
    \ 3, 5, 7, 11, 13]\n    count = 0\n    for c in num\n        if !(c in [\"0\"\
    , \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\"\
    , \"C\", \"D\", \"E\", \"F\"])\n            return 0\n        end\n        #convert\
    \ to integer and check if it is a prime number\n        if c in [\"A\", \"B\"\
    , \"C\", \"D\", \"E\", \"F\"]\n            for p in prime_numbers\n          \
    \      if p == parse(Int64, c, base=16)\n                    count += 1\n    \
    \            end\n            end\n        else\n            if parse(Int64, c)\
    \ in prime_numbers\n                count += 1\n            end\n        end\n\
    \    end\n    return count\nend", "    count = 0\n    for i in 1:length(num)\n\
    \        if (findfirst(x->x==num[i],[\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]) !=\
    \ nothing)\n            count += 1\n        end\n    end\n    return count\nend",
  "    c = 0\n    for ch in [i for i in \"0123456789ABCDEF\"]\n        c += count(num,\
    \ ch)\n    end\n    return c\nend", "    n_hex = 0;\n    for i in num \n     \
    \   if i in \"2357BD\"\n            n_hex += 1\n        end\n    end\n    return\
    \ n_hex\nend", "    hex_number = 0\n    key = 0\n    is_prime = true\n    s =\
    \ \"\"\n    for i in num\n        if i == 'A'\n            hex_number = 10\n \
    \       elseif i == 'B'\n            hex_number = 11\n        elseif i == 'C'\n\
    \            hex_number = 12\n        elseif i == 'D'\n            hex_number\
    \ = 13\n        elseif i == 'E'\n            hex_number = 14\n        elseif i\
    \ == 'F'\n            hex_number = 15\n        else\n            hex_number =\
    \ parse(Int64, i)\n        end\n        for j in 2:hex_number-1\n            if\
    \ hex_number % j == 0\n                is_prime = false\n                break\n\
    \            end\n        end\n        if is_prime == true\n            key +=\
    \ 1\n        end\n        is_prime = true\n    end\n    return key\nend", "  \
    \  # number of hex digits \n    num_digits = length(num) \n    ans = 0\n    for\
    \ i in 1:num_digits\n        if !('0' <= num[i] <= '9') && !('A' <= num[i] <=\
    \ 'F')\n            error(\"Not a hexadecimal\")\n        end\n        switch\
    \ num[i]\n            when '2', '3', '5', '7', 'B', 'D'\n                ans +=\
    \ 1\n        end\n    end\n    return ans\nend", "    if num in [\"2\",\"3\",\"\
    5\",\"7\",\"B\",\"D\"]\n        return 1\n    else\n        return 0\n    end\n\
    end", "    primes = [2, 3, 5, 7, 11, 13]\n    count = 0\n    for n in num\n  \
    \      if n in \"2357BDE\"\n            count += 1\n        end\n    end\n   \
    \ return count\nend", "    hex_key = 0\n    for k in num\n        if k == 'A'\n\
    \            hex_key += 11\n        elseif k == 'B'\n            hex_key += 12\n\
    \        elseif k == 'C'\n            hex_key += 13\n        elseif k == 'D'\n\
    \            hex_key += 14\n        elseif k == 'E'\n            hex_key += 15\n\
    \        elseif k == 'F'\n            hex_key += 16\n        else \n         \
    \   hex_key += parse(Int64, k)\n        end\n    end\n    return hex_key\nend",
  "    \n    hex_prime_array = [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n    count =\
    \ 0\n    \n    for i in num\n        if i in hex_prime_array\n            count\
    \ += 1\n        end\n    end\n    return count\nend", "    l = length(num)\n \
    \   count = 0\n    for i = 1:l\n        if ((num[i] == '2') || (num[i] == '3')\
    \ || (num[i] == '5') || \n            (num[i] == '7') || (num[i] == 'B') || (num[i]\
    \ == 'D'))\n            count += 1\n        end\n    end\n    return count\nend\n\
    num = \"1077E\"\nhex_key(num)", "    primes = [2, 3, 5, 7, 11, 13]\n    hex_dict\
    \ = Dict()\n    for c in \"0123456789ABCDEF\"\n        hex_dict[c] = c\n    end\n\
    \    for c in hex_dict\n        if parse(Int64, c[1]) in primes\n            num\
    \ += c[1]\n        end\n    end\n    return num\nend\nhex_key(\"AB\")\n \n \n\"\
    \"\"\n    You are given a string of digits. Your task is to split the given string\
    \ \n    into chunks of two digits. If the string contains an odd number of digits,\
    \ \n    then the missing second digit of the final chunk should be replaced by\
    \ 0.\n    Examples:\n    For inputString = \"2gf3\" the output should be: [2,0,3]\n\
    \    For inputString = \"2fg3\" the output should be: [2,3]\n    For inputString\
    \ = \"2f3\" the output should be: [2,0,3]\n    For inputString = \"2\" the output\
    \ should be: [2,0]\n    \"\"\"\n ", "    primes = [2, 3, 5, 7, 11, 13]\n    hex_primes\
    \ = 0\n    for i in 1:length(num)\n        if num[i] >= \"A\" \n            num[i]\
    \ = string(string(num[i]).upper()) \n        end\n        if num[i] in [\"2\"\
    , \"3\", \"5\", \"7\", \"B\", \"D\"] \n            hex_primes += 1\n        end\n\
    \    end\n    return hex_primes\nend", "    counts = 0\n    for i in [2,3,5,7,11,13]\n\
    \        counts += num.count(string(i, base=16))\n    end\n    return counts\n\
    end", "    hex = Array{Int64}([\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"])\n    primes\
    \ = Set([\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"])\n    count = 0\n    for x\
    \ in num\n        if x in primes\n            count += 1\n        end\n    end\n\
    \    return count\nend\nnum = \"ABED1A33\"\nhex_key(num)", "    n = 0\n    key_points\
    \ = [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n    for i in num\n        if i in key_points\n\
    \            n += 1\n        end\n    end\n    return n\nend", "    key_values\
    \ = Dict('2'=>2, '3'=>3, '5'=>5, '7'=>7, 'B'=>11, 'D'=>13)\n    count = 0\n  \
    \  for i in num\n        if key_values[i] != 0\n            count += 1\n     \
    \   end\n    end\n    return count\nend", "    prime_hex_digits = [2, 3, 5, 7,\
    \ 11, 13]\n    count = 0\n    for c in num\n        if isupper(c) && c \u2208\
    \ ('A':'F')\n            if c == 'A' || c == 'B' || c == 'D' || c == 'E'\n   \
    \             count += 1\n            end\n        else\n            if parse(Int64,c)\
    \ \u2208 prime_hex_digits\n                count += 1\n            end\n     \
    \   end\n    end\n    return count\nend", "    #Hexa prime numbers\n    prime_hex\
    \ = [2, 3, 5, 7, 11, 13]\n    count = 0\n    #Iterate through the numbers string\n\
    \    for n in num\n        #Iterate through all hexa prime numbers\n        for\
    \ p in prime_hex\n            #Convert the number to hexa and compare with the\
    \ p\n            if parse(Int64, n, base=16) == p\n                count += 1\n\
    \            end\n        end\n    end\n    return count\nend", "    check = 0\n\
    \    for i in range(1, length(num)+1)\n        if num[i] in ('2','3','5','7','B','D')\n\
    \            check = check + 1\n        end\n    end\n    return check\nend",
  "    n = 0\n    p = [2,3,5,7,11,13]\n    for i in num\n        if isa(parse(Int64,i),Int64)\
    \ == true\n            if parse(Int64,i) in p\n                n += 1\n      \
    \      end\n        else\n            if i == \"A\"\n                n += 1\n\
    \            elseif i == \"B\"\n                n += 1\n            elseif i ==\
    \ \"D\"\n                n += 1\n            elseif i == \"E\"\n             \
    \   n += 1\n            end\n        end\n    end\n    return n\nend", "    count\
    \ = 0\n    primes = [2,3,5,7,11,13]\n    string_primes = [\"2\",\"3\",\"5\",\"\
    7\",\"B\",\"D\"]\n    for i in num\n        if isprime(Int64(i))\n           \
    \ count += 1\n        end\n    end\n    for i in num\n        if i in string_primes\n\
    \            count += 1\n        end\n    end\n    return count\nend", '    end',
  "    hex_key = 0\n    for i in num\n        if i in (\"A\", \"B\", \"D\", \"F\"\
    )\n            hex_key += 1\n        end\n    end\n    return hex_key\nend", " \
    \   primes = [2, 3, 5, 7, 11, 13]\n    count = 0\n    for i in collect(num)\n\
    \        for j in primes\n            if parse(Int, i) == j\n                count\
    \ += 1\n            end\n        end\n    end\n    return count\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
