name: HumanEval_147_get_max_triples
language: jl
prompt: "\"\"\"\n    You are given a positive integer n. You have to create an integer\
  \ array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i]\
  \ = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a\
  \ where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example\
  \ :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a =\
  \ [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n\
  function get_max_triples(n::Int64)::Int64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
  \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
  \ == 53361)\nend\n"
completions: ["    a = zeros(Int64, n)\n    for i = 1:n\n        a[i] = i*i - i +\
    \ 1\n    end\n    num_triples = 0\n    for i = 1:n\n        for j = i+1:n\n  \
    \          for k = j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n \
    \                   num_triples += 1\n                end\n            end\n \
    \       end\n    end\n    return num_triples\nend", "    if n < 3 return 0 end\n\
    \    a = zeros(Int64, n)\n    for i in 1:n a[i] = i*i - i + 1 end\n    sum_list\
    \ = []\n    for i in 1:n\n        for j in (i+1):n\n            for k in (j+1):n\n\
    \                if (a[i] + a[j] + a[k]) % 3 == 0\n                    push!(sum_list,\
    \ (a[i], a[j], a[k]))\n                end\n            end\n        end\n   \
    \ end\n    return length(sum_list)\nend", "    count = 0\n    for i = 1:n\n  \
    \      for j = i+1:n\n            for k = j+1:n\n                if mod(a[i] +\
    \ a[j] + a[k], 3) == 0\n                    count = count + 1\n              \
    \  end\n            end\n        end\n    end\n    return count\nend", "    #\
    \ NOTE: I'm not sure about my logic when i < j < k\n    # Instead of calculating\
    \ all possible combinations for i, j, k\n    # We will just have to check whether\
    \ a[i] + a[j] + a[k] is a multiple of 3 \n    # For the first element i we check\
    \ all the possible combinations of j and k\n    # Then we just change the value\
    \ of i to be the next one and continue", "    triples = 0\n    for i in 1:n\n\
    \        for j in i+1:n\n            for k in j+1:n\n                if (i*i -\
    \ i + 1 + j*j - j + 1 + k*j - k + 1) % 3 == 0\n                    triples +=\
    \ 1\n                end\n            end\n        end\n    end\n    return triples\n\
    end", "    modulo_3_map = [0, 0, 0]\n    modulo_3_map_2 = [0, 0, 0]\n    for i\
    \ in 1:n\n        modulo_3_map[(i * i - i + 1) % 3] += 1\n    for i in 1:3\n \
    \       for j in 1:3\n            modulo_3_map_2[(i + j) % 3] += modulo_3_map[i]\
    \ * modulo_3_map[j]\n    return modulo_3_map_2[0]\n    ", "    mod3 = zeros(Int64,3)\n\
    \    for i = 1:n\n        a = i*i - i + 1\n        mod3[1+a%3] += 1\n    end\n\
    \    return mod3[1]*mod3[2] + mod3[2]*mod3[3] + mod3[1]*mod3[3]\nend", "    \"\
    \"\"\n    Not implemented\n    \"\"\"\n    a = [i*i - i + 1 for i in 1:n]\n  \
    \  return a\nend", "    for i=1:n\n        for j=1:n\n            for k=1:n\n\
    \                if\nend", "    triples_sum = 0\n    for i in range(1, n - 1)\n\
    \        if (i * i - i + 1) % 3 == 0\n            triples_sum += 1\n    end\n\
    \    return triples_sum\nend", "    # Initialize the array \n    a = [0 for i\
    \ in 1:n]\n    cnt = 0\n    # Calculate the array \n    for i in 1:n\n       \
    \ a[i] = i * i - i + 1\n    end\n    # Iterate through the array \n    for i in\
    \ 1:n\n        for j in i+1:n\n            for k in j+1:n\n                if\
    \ ((a[i] + a[j] + a[k]) % 3 == 0)\n                    cnt += 1\n            \
    \    end\n            end\n        end\n    end\n    return cnt\nend\n\"\"\"\n\
    \    You are given a string s consisting of digits and characters. \n    Return\
    \ the string s without digits. \n    If there are no characters in the string\
    \ return \"No characters found\".", "    if (n<=1): return 0\n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    cnt = 0\n   \
    \ for i in 1:n-2\n        if a[i]%3 != 0\n            for j in i+1:n-1\n     \
    \           if (a[i]+a[j])%3 != 0\n                    for k in j+1:n\n      \
    \                  if (a[i]+a[j]+a[k])%3 == 0\n                            cnt\
    \ += 1\n                        end\n                    end\n               \
    \ end\n            end\n        end\n    end\n    return cnt\nend", "    a = [i\
    \ * i - i + 1 for i in 1:n]\n    cnt = 0\n    for i in 1:n - 2\n        for j\
    \ in i + 1:n - 1\n            for k in j + 1:n\n                (i, j, k, a[i]\
    \ + a[j] + a[k])\n                if (a[i] + a[j] + a[k]) % 3 == 0\n         \
    \           cnt += 1\n                end\n            end\n        end\n    end\n\
    \    return cnt\nend", "    triples = 0\n    for i in 1:n\n        for j in i+1:n\n\
    \            for k in j+1:n\n                if mod(a[i] + a[j] + a[k], 3) ==\
    \ 0\n                    triples += 1\n                end\n            end\n\
    \        end\n    end\n    return triples\nend", "    if n < 3\n        return\
    \ 0\n    end\n    sum_3 = 0\n    for i in 1:n\n        for j in i+1:n\n      \
    \      for k in j+1:n\n                if ((i*i-i+1) + (j*j-j+1) + (k*j-k+1))\
    \ % 3 == 0\n                    sum_3 += 1\n                end\n            end\n\
    \        end\n    end\n    return sum_3\nend", "    a = zeros(Int64, n)\n    for\
    \ i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n    for i in 1:n-2\n\
    \        for j in i+1:n-1\n            for k in j+1:n\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0\n                    count += 1\n                end\n\
    \            end\n        end\n    end\n    return count\nend", "    a = [i*i\
    \ - i + 1 for i in 1:n]\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n\
    \            for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n\
    \                    count += 1\n                end\n            end\n      \
    \  end\n    end\n    return count\nend", "    \"\"\"\n    Return number of triples\
    \ (a[i], a[j], a[k])\n    where i < j < k, a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    \"\"\"\n    cnt = 0\n    for i = 1:n-2\n        for j = i+1:n-1\n  \
    \          for k = j+1:n\n                if mod(a[i] + a[j] + a[k], 3) == 0\n\
    \                    cnt += 1\n                end\n            end\n        end\n\
    \    end\n    return cnt\nend", "    triples = 0\n    for i in 1:n-2\n       \
    \ for j in i+1:n-1\n            for k in j+1:n\n                if ((i*i - i +\
    \ 1) + (j*j - j + 1) + (k*j - k + 1)) % 3 == 0\n                    triples +=\
    \ 1\n                end\n            end\n        end\n    end\n    return triples\n\
    end", "    \"\"\"\n    Generate the array \n    For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1\n    and sum the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n    \"\"\"\n    a = zeros(Int64, n)\n    max_triples = 0\n    for i in\
    \ 1:n\n        a[i] = i*i - i + 1\n        for j in i+1:n\n            for k in\
    \ j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n                  \
    \  max_triples += 1\n                end\n            end\n        end\n    end\n\
    \    return max_triples\nend", "    sum_of_triples = 0\n    for i in 1:n\n   \
    \     for j in i+1:n\n            for k in j+1:n\n                if ((a[i] +\
    \ a[j] + a[k]) % 3 == 0)\n                    sum_of_triples += 1\n          \
    \      end\n            end\n        end\n    end\n    return sum_of_triples\n\
    end", "    count = 0\n    for i in 1:n\n        for j in i+1:n\n            for\
    \ k in j+1:n\n                if (i*i - i + 1 + j*j - j + 1 + k*j - k + 1) % 3\
    \ == 0\n                    count += 1\n                end\n            end\n\
    \        end\n    end\n    return count\nend", "    res = 0\n    for i in 1:n\n\
    \        k = i+2\n        while k <= n\n            @inbounds res += i+k-1\n \
    \           k += 1\n        end\n    end\n    return res\nend", "    # return\
    \ number of triples as mentioned in the problem\n    # YOUR CODE HERE\n    pass\n\
    end", "    sum_mod = Dict{Int64,Int64}()\n    a = [i*i-i+1 for i=1:n]\n    for\
    \ i=1:n-2\n        for j=i+1:n-1\n            sum_mod[mod(a[i]+a[j],3)] += 1\n\
    \        end\n    end\n    cnt = 0\n    for i=1:n-2\n        cnt += sum_mod[mod(3-a[i],3)]\n\
    \    end\n    return cnt\nend", "    a = []\n    for i in 1:n\n        push!(a,\
    \ i*i - i + 1)\n    end\n    triples = 0\n    for i in 1:n\n        for j in i+1:n\n\
    \            for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n\
    \                    triples += 1\n                end\n            end\n    \
    \    end\n    end\n    return triples\nend", "    max_triples = 0\n    i_limit\
    \ = n - 2\n    j_limit = n - 1\n    for i in range(1, i_limit)\n        for j\
    \ in range(i+1, j_limit)\n            for k in range(j+1, n)\n               \
    \ sum_ijk = i*i + j*j + k*k - i - j - k + 1\n                if (sum_ijk % 3 ==\
    \ 0)\n                    max_triples += 1\n    return max_triples\nend", "  \
    \  a = [i * i - i + 1 for i in 1:n]\n    cnt = 0\n    for i in 1:n-2\n       \
    \ for j in i+1:n-1\n            for k in j+1:n\n                if mod(a[i] +\
    \ a[j] + a[k], 3) == 0\n                    println(\"a = [\", a[i], \", \", a[j],\
    \ \", \", a[k], \"]\")\n                    cnt += 1\n                end\n  \
    \          end\n        end\n    end\n    return cnt\nend", "    total = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if(i+j+k)%3 == 0\n                    total += 1\n             \
    \   end\n            end\n        end\n    end\n    return total\nend\n@timeit\
    \ get_max_triples(5)", "    sum(i*i-i+1 for i in 1:n)\nend", "    counter = 0\n\
    \    for i in range(1, n):\n        for j in range(i+1, n):\n            for k\
    \ in range(j+1, n):\n                if (i*i - i + 1 + j*j - j + 1 + k*k - k +\
    \ 1) % 3 == 0:\n                    counter += 1\n    return counter\nend", " \
    \   res = 0\n    for i in 1:n\n        for j in (i+1):n\n            for k in\
    \ (j+1):n\n                if ((i^2 - i + 1) + (j^2 - j + 1) + (k^2 - k + 1))\
    \ % 3 == 0\n                    res += 1\n                end\n            end\n\
    \        end\n    end\n    return res\nend", "    a = [i * i - i + 1 for i in\
    \ 1:n]\n    count = 0\n    for i in 1:n\n        for j in (i+1):n\n          \
    \  for k in (j+1):n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\n@time println(get_max_triples(10^6))", "    a\
    \ = zeros(Int64, n)\n    for i in 1:n \n        a[i] = i*i - i + 1\n    end \n\
    \    c = 0\n    for i in 1:n\n        for j in (i+1):n\n            for k in (j+1):n\n\
    \                if (a[i] + a[j] + a[k]) % 3 == 0\n                    c += 1\n\
    \                end\n            end\n        end\n    end\n    return c\nend ",
  "    sum = 0\n    for i = 1:n\n        for j = i+1:n\n            for k = j+1:n\n\
    \                if ((i*i - i + 1) + (j*j - j + 1) + (k*j - k + 1)) % 3 == 0\n\
    \                    sum += 1\n                end\n            end\n        end\n\
    \    end\n    return sum\nend", "    res = 0\n    for i in 1:n\n        for j\
    \ in (i+1):n\n            for k in (j+1):n\n                if (i+j+k) % 3 ==\
    \ 0\n                    res += 1\n                end\n            end\n    \
    \    end\n    end\n    return res\nend", "    res = 0\n    cache = Dict{Int64,\
    \ Bool}()\n    # cache[i] is a triple of i - 1 for which the following is true\n\
    \    # i*i-i+1 + (i-1)*(i-1)-(i-1)+1 + (i-2)*(i-2)-(i-2)+1 === 0 (mod 3)\n   \
    \ for i in 1:n\n        if i in cache\n            res += cache[i]\n        end\n\
    \        if i*i-i+1 === 0\n            cache[i] = true\n        else\n       \
    \     cache[i] = false\n        end\n    end\n    return res\nend", "    triples\
    \ = zeros(Int64, n)\n    for i = 1:n\n        triples[i] = i*i - i + 1\n    end\n\
    \    count = 0\n    for i = 1:n\n        for j = i+1:n\n            for k = j+1:n\n\
    \                if (triples[i] + triples[j] + triples[k]) % 3 == 0\n        \
    \            count += 1\n                end\n            end\n        end\n \
    \   end\n    return count\nend\nprintln(get_max_triples(5))\nprintln(get_max_triples(7))\n\
    println(get_max_triples(100))\nprintln(get_max_triples(1000))\nprintln(get_max_triples(10000))\n\
    println(get_max_triples(100000))", "    if n < 3\n        return 0\n    end\n\
    \    return Int64(n*(n-1)*(n-2)/6) - Int64(n*(n-1)/2) + Int64(n)\nend", "    a\
    \ = fill(0, n)\n    count = 0\n    for i in 1:n\n        a[i] = i*i - i + 1\n\
    \    end\n    for i in 1:n\n        for j in (i+1):n\n            for k in (j+1):n\n\
    \                if (a[i] + a[j] + a[k]) % 3 == 0\n                    count +=\
    \ 1\n                end\n            end\n        end\n    end\n    return count\n\
    end", "    cnt = 0\n    for i in 1:n\n        for j in i+1:n\n            if (i*i-i+1\
    \ + j*j-j+1) % 3 == 0\n                for k in j+1:n\n                    if\
    \ (i*i-i+1 + j*j-j+1 + k*k-k+1) % 3 == 0\n                        cnt += 1\n \
    \                   end\n                end\n            end\n        end\n \
    \   end\n    return cnt\nend", "    count = 0\n    x = 1\n    while (x + 2) <\
    \ n\n        y = x + 1\n        while (y + 1) < n\n            z = y + 1\n   \
    \         while z < n\n                if (a[x] + a[y] + a[z]) % 3 == 0\n    \
    \                count += 1\n                end\n                z += 1\n   \
    \         end\n            y += 1\n        end\n        x += 1\n    end\n    return\
    \ count\nend", "    i, j, k = 1, 2, 3\n    count = 0\n    while i < n-2 \n   \
    \     while j < n-1\n            while k < n\n                ijk = i + j + k\n\
    \                if mod(ijk, 3) == 0\n                    count += 1\n       \
    \         end\n                k += 1\n            end\n            j += 1\n \
    \       end\n        i += 1\n    end\n    return count\nend", "    return (n-2)*(n-1)*n//6\n\
    end", "    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n\
    \    end\n    counter = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n    \
    \        for k in j+1:n\n                if a[i] + a[j] + a[k] % 3 == 0\n    \
    \                counter += 1\n                end\n            end\n        end\n\
    \    end\n    return counter\nend", "    if n < 3\n        return 0\n    end\n\
    \    return ceil(Int64, (n-2)/3)\nend", "    a = [1:n;] .+ [0:n;] .- [0:n;] .*\
    \ [1:n;]\n    a = collect(a)\n    count = 0\n    for i in 1:n-2\n        for j\
    \ in i+1:n-1\n            for k in j+1:n\n                if a[i] + a[j] + a[k]\
    \ % 3 == 0\n                    count += 1\n                end\n            end\n\
    \        end\n    end\n    return count\nend", "    sum_triples = 0\n    for i\
    \ in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n           \
    \     if (i*i - i + 1 + j*j - j + 1 + k*j - k + 1) % 3 == 0\n                \
    \    sum_triples += 1\n                end\n            end\n        end\n   \
    \ end\n    return sum_triples\nend", "    N = n - 2\n    i = div(N, 3)\n    j\
    \ = div(2 * N, 3)\n    return i * (i + 1) * j * (j + 1) / 4\nend", "    \"\"\"\
    \n    Get the max number of triples from an array of squares from 1 to n\n   \
    \ \"\"\"\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n      \
    \      for k in j+1:n\n                if (i*i-i+1 + j*j-j+1 + k*k-k+1) % 3 ==\
    \ 0\n                    count += 1\n                end\n            end\n  \
    \      end\n    end\n    return count\nend", "    return 0\nend\n@test get_max_triples(5)\
    \ == 1\n@test get_max_triples(12) == 8", "    count = 0\n    for i in range(1,\
    \ n):\n        for j in range(i+1, n):\n            if i + j > n:\n          \
    \      break\n            for k in range(j+1, n):\n                if (i + j +\
    \ k) % 3 == 0:\n                    count += 1\n    return count\nend", "    return\
    \ sum(tr*(tr+1)//2 for tr in [tr for tr in 1:n if (((tr+1)*tr)%3==0)]) \nend",
  "    res = 0\n    for i in range(1, n-1)\n        for j in range(i+1, n)\n     \
    \       for k in range(j+1, n+1)\n                if (i*i - i + 1 + j*j - j +\
    \ 1 + k*k - k + 1) % 3 == 0\n                    res += 1\n    end\n    return\
    \ res\nend", "    sum_ = 0\n    for i = 1:n-2\n        for j = i+1:n-1\n     \
    \       for k = j+1:n\n                if ((i*i-i+1) + (j*j-j+1) + (k*k-k+1))\
    \ % 3 == 0\n                    sum_ += 1\n                end\n            end\n\
    \        end\n    end\n    return sum_\nend", "    count = 0\n    for i in 1:n-2\n\
    \        for j in i+1:n-1\n            for k in j+1:n\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0\n                    count += 1\n                end\n\
    \            end\n        end\n    end\n    return count\nend", "    k::Int64\
    \ = n\n    cnt::Int64 = 0\n    while k >= 1\n        j::Int64 = k - 1\n      \
    \  while j >= 1\n            i::Int64 = j - 1\n            while i >= 1\n    \
    \            if (i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0\n         \
    \           cnt += 1\n                end\n                i -= 1\n          \
    \  end\n            j -= 1\n        end\n        k -= 1\n    end\n    return cnt\n\
    end", "    return floor(Int64, n / 3) * (n - (2 * floor(Int64, n / 3)))\nend",
  "    sum = 0\n    \"\"\"\n    @param i: index\n    @param j: index\n    @param k:\
    \ index\n    @return: the summation of a[i], a[j], a[k]\n    \"\"\"\n    function\
    \ add_values(i::Int64, j::Int64, k::Int64)::Int64\n        return i*i - i + 1\
    \ + j*j - j + 1 + k*k - k + 1\n    end\n    \"\"\"\n    @param i: index\n    @param\
    \ j: index\n    @param k: index\n    @return: if the summation of a[i], a[j],\
    \ a[k] is a multiple of 3\n    \"\"\"\n    function test_multiple_3(i::Int64,\
    \ j::Int64, k::Int64)::Bool\n        return (add_values(i, j, k) % 3) == 0\n \
    \   end\n    \"\"\"\n    @param i: index\n    @param j: index\n    @param k: index\n\
    \    @return: if a[i] < a[j] < a[k]\n    \"\"\"\n    function test_order(i::Int64,\
    \ j::Int64, k::Int64)::Bool\n        return i < j < k\n    end\n    \"\"\"\n \
    \   @param n: the length of the array\n    @return: the count of triples\n   \
    \ \"\"\"\n    function count_triples(n::Int64)::Int64\n        count = 0\n   \
    \     # Outer loop to handle number of elements \n        # In first loop we fix\
    \ the first element \n        # and find the other two elements \n        for\
    \ i = 1:n-2\n            # In second loop we fix the second element \n       \
    \     # and find the third element \n            for j = i+1:n-1\n           \
    \     # In third loop we fix the third element \n                # and find the\
    \ other two elements \n                for k = j+1:n\n                    if test_multiple_3(i,\
    \ j, k) && test_order(i, j, k)\n                        count += 1\n         \
    \           end\n                end\n            end\n        end\n        return\
    \ count\n    end\n    \"\"\"\n    @param n: the length of the", "    if n < 3\n\
    \        return 0\n    end\n    return Int64(n * (n - 1) * (n - 2) / 6)\nend",
  "    res = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n            for k in\
    \ j+1:n\n                if ((i * i - i + 1) + (j * j - j + 1) + (k * k - k +\
    \ 1)) % 3 == 0\n                    res += 1\n                end\n          \
    \  end\n        end\n    end\n    return res\nend", "    count = 0\n    for i\
    \ in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n           \
    \     if mod(i^2 - i + 1 + j^2 - j + 1 + k^2 - k + 1, 3) == 0\n              \
    \      count += 1\n                end\n            end\n        end\n    end\n\
    \    return count\nend", "    \"\"\"\n    get the maximum number of valid triples\
    \ from array a\n    \"\"\"\n    # odd number: a[i] + a[j] + a[k] = (i^2 - i +\
    \ 1) + (j^2 - j + 1) + (k^2 - k + 1) = 3*(i*j + j*k + k*i)\n    # even number:\
    \ a[i] + a[j] + a[k] = (i^2 - i + 1) + (j^2 - j + 1) + (k^2 - k + 1) = 3*(i*j\
    \ + j*k + k*i) + 1\n    # so we will only count the valid triples for odd numbers\n\
    \    s = n % 2 == 0 ? n/2 : (n - 1)/2\n    s == 0 ? 0 : div(3*s*(s + 1) + 1, 2)\n\
    end\n ", "    \"\"\"\n    Returns the number of valid triples\n    \"\"\"\n  \
    \  # create the array\n    a = [ i * i - i + 1 for i in 1:n ]\n    # iterate through\
    \ each combination\n    cnt = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n\
    \            for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n\
    \                    cnt += 1\n                end\n            end\n        end\n\
    \    end\n    return cnt\nend\n@testset \"example\" begin\n    @test get_max_triples(5)\
    \ == 1\nend", "    len = n\n    if n >= 1\n        a = zeros(Int64, n)\n     \
    \   for i = 1:n\n            a[i] = i * i - i + 1\n        end\n    end\n    if\
    \ n >= 3\n        count = 0\n        for i = 1:n-2\n            for j = i+1:n-1\n\
    \                for k = j+1:n\n                    if a[i] + a[j] + a[k] % 3\
    \ == 0\n                        count += 1\n                    end\n        \
    \        end\n            end\n        end\n        return count\n    else\n \
    \       return 0\n    end\nend", "    count = 0\n    for i in 1:n\n        for\
    \ j in i+1:n\n            for k in j+1:n\n                if (i*i - i + 1 + j*j\
    \ - j + 1 + k*k - k + 1) % 3 == 0\n                    count += 1\n          \
    \      end\n            end\n        end\n    end\n    return count\nend", " \
    \   if n < 3\n        return 0\n    end\n    ans = 0\n    for i in 3:n-1\n   \
    \     ans += (i-2)\n    end\n    return ans\nend", "    n = n - 2\n    ans = n\n\
    \    rem = n % 3\n    if rem == 0\n        return n*(n-1)*(n-2)/6\n    elseif\
    \ rem == 1\n        return (n-1)*(n-1)*(n-3)/6\n    elseif rem == 2\n        return\
    \ (n-1)*(n-2)*(n-2)/6\n    end\nend", "    res = 0\n    for i = 1:n\n        for\
    \ j = i+1:n\n            for k = j+1:n\n                if (i*i - i + 1 + j*j\
    \ - j + 1 + k*j - k + 1) % 3 == 0\n                    res += 1\n            \
    \    end\n            end\n        end\n    end\n    return res\nend", "    return\
    \ sum( [1 for i in 1:n-2, j in i+1:n-1, k in j+1:n if is_multiple(i,j,k)] )\n\
    end", "    # your code goes here\n    return 0\nend", "    return n - 2\nend",
  "    a = [n * n - n + 1 for n in 1:n]\n    max_triples = 0\n    for i in 1:n-2\n\
    \        for j in i+1:n-1\n            for k in j+1:n\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 \n                    max_triples += 1\n           \
    \     end\n            end\n        end\n    end\n    return max_triples\nend",
  "    sum = 0\n    for i in 2:n-1\n        if ((i^2 - i + 1) + (i^2 - (2*i) + 1)\
    \ + (i^2 - (3*i) + 1)) % 3 == 0\n            sum += 1\n        end\n    end\n\
    \    return sum\nend", "    \"\"\"\n    Gets the number of maximum triples that\
    \ satisfy the problem's condition\n    \"\"\"\n    total = n::Int64\n    n = n\
    \ - 1 \n    while n > 0 \n        total += n\n        n -= 1\n    end\n    return\
    \ total\nend", "    a = zeros(Int64, n)\n    max_triples = 0\n    for i in 1:n\n\
    \        a[i] = i*i - i + 1\n        max_triples += ((i-1)*(i-2))/2\n    end\n\
    \    return max_triples\nend", "    if n < 3\n        return 0\n    end\n    return\
    \ Int64(ceil(n/3.0) - 1) * Int64(ceil(n/3.0) - 2) / 2\nend", "    a = [i*i - i\
    \ + 1 for i in 1:n]\n    count = 0\n    for i in 1:n\n        for j in i+1:n\n\
    \            for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n\
    \                    count += 1\n                end\n            end\n      \
    \  end\n    end\n    return count\nend", "    total = 0\n    for i in 1:n-2\n\
    \        for j in i+1:n-1\n            for k in j+1:n\n                if (i+j+k)%3\
    \ == 0\n                    total += 1\n                end\n            end\n\
    \        end\n    end\n    return total\nend", "    # all values of array a, is\
    \ a multiple of 3, \n    # sum of a multiple of 3 and a multiple of 3 is a multiple\
    \ of 3\n    return (n*(n-1)*(n-2))//6\nend", "    triples = 0\n    for i in 1:n-2\n\
    \        for j in i+1:n-1\n            for k in j+1:n\n                if (i*i\
    \ - i + 1 + j*j - j + 1 + k*j - k + 1) % 3 == 0\n                    triples +=\
    \ 1\n                end\n            end\n        end\n    end\n    return triples\n\
    end\n@btime get_max_triples(5)", "    a = Array{Int64}(1:n) .^ 2 .- 1 .+ 1\n \
    \   return sum([a[i] + a[j] + a[k] % 3 == 0 ? 1 : 0 for i in 1:n-2, j in i+1:n-1,\
    \ k in j+1:n])\nend", "    # your code goes here\n    return 0\nend", "    triples\
    \ = 0\n    for a in 1:n\n        for b in a+1:n\n            for c in b+1:n\n\
    \                if (a + b + c) % 3 == 0\n                    triples += 1\n \
    \               end\n            end\n        end\n    end\n    return triples\n\
    end", "    triples = Int64[]\n    for i in 1:n-2\n        for j in i+1:n-1\n \
    \           for k in j+1:n\n                if (i*i - i + 1 + j*j - j + 1 + k*j\
    \ - k + 1) % 3 == 0\n                    push!(triples, [i, j, k])\n         \
    \       end\n            end\n        end\n    end\n    return length(triples)\n\
    end", "    a = Array{Int64}(undef, n)\n    sum = 0\n    for i = 1:n\n        a[i]\
    \ = i * i - i + 1\n        sum += a[i]\n    end\n    (sum % 3 == 0 ? 1 : 0) *\
    \ (n - 2)\nend", "    a = zeros(Int64, n)\n    for i in 1:n \n        a[i] = i*i\
    \ - i + 1\n    end\n    cnt = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n\
    \            for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n\
    \                    cnt += 1\n                end\n            end\n        end\n\
    \    end\n    return cnt\nend", "    a = [0 for i in 1:n]\n    for i in 1:n\n\
    \        a[i] = i*i - i + 1\n    end\n    count = 0\n    for i in 1:n-2\n    \
    \    for j in i+1:n-1\n            for k in j+1:n\n                if (a[i] +\
    \ a[j] + a[k]) % 3 == 0\n                    count += 1\n                end\n\
    \            end\n        end\n    end\n    return count\nend", "    a = ones(Int64,\
    \ n)\n    for i = 2:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n  \
    \  for i = 1:n\n        for j = i+1:n\n            for k = j+1:n\n           \
    \     if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n     \
    \           end\n            end\n        end\n    end\n    return count\nend",
  "    m = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n\
    \                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0\n\
    \                    m += 1\n                end\n            end\n        end\n\
    \    end\n    return m\nend\n@btime get_max_triples(10000)", "    triples = 0\n\
    \    for i in 1:n\n        for j in i+1:n\n            for k in j+1:n\n      \
    \          if ((i^2 - i + 1) + (j^2 - j + 1) + (k^2 - k + 1)) % 3 == 0\n     \
    \               triples += 1\n                end\n            end\n        end\n\
    \    end\n    return triples\nend", "    n -= 1\n    out = 0\n    i = 0\n    while\
    \ i < n\n        j = i + 1\n        while j < n\n            k = j + 1\n     \
    \       while k < n\n                out += (n*n - n + 1 + (j - i)*(n - k)) %\
    \ 3 == 0 ? 1 : 0\n                k += 1\n            end\n            j += 1\n\
    \        end\n        i += 1\n    end\n    return out\nend", "    max_triples\
    \ = 0\n    for i = 1:n-2\n        for j = i+1:n-1\n            for k = j+1:n\n\
    \                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0\n\
    \                    max_triples += 1\n                end\n            end\n\
    \        end\n    end\n    return max_triples\nend", "    \"\"\"\n    Get number\
    \ of triples by brute force.\n    \"\"\"\n    number_of_triples = 0", "    a =\
    \ [i*i - i + 1 for i in 1:n]\n    n_triples = 0\n    for i in 1:n-2\n        for\
    \ j in i+1:n-1\n            for k in j+1:n\n                sum = a[i] + a[j]\
    \ + a[k]\n                if sum % 3 == 0\n                    n_triples += 1\n\
    \                end\n            end\n        end\n    end\n    return n_triples\n\
    end", "    c = count(1:n)\n    t = c*c-c+1\n    r = t[1] + t[2] + t[3]\n    println(r)\n\
    \    #@show c\n    #@show t\n    #@show r\n    #return count(t[i] + t[j] + t[k]\
    \ for i in 1:n, j in i+1:n, k in j+1:n)%3==0\n    return true\nend", "    count\
    \ = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n\
    \                if (i*i - i + 1 + j*j - j + 1 + k*j - k + 1) % 3 == 0\n     \
    \               count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend", "    a = [i*i - i + 1 for i in 1:n]\n    triple_sum\
    \ = 0\n    triple_count = 0\n    for i in 1:n\n        for j in i+1:n\n      \
    \      for k in j+1:n\n                triple_sum = a[i] + a[j] + a[k]\n     \
    \           if triple_sum % 3 == 0\n                    triple_count += 1\n  \
    \              end\n            end\n        end\n    end\n    return triple_count\n\
    end", "    if n < 3 \n        return 0\n    end\n    return (1:n-2) |> sum\nend\n\
    println(get_max_triples(5))\nprintln(get_max_triples(10))\nprintln(get_max_triples(100))\n\
    println(get_max_triples(1000))", "    count = 0\n    for i in 1:n-2\n        for\
    \ j in i+1:n-1\n            for k in j+1:n\n                if (a[i] + a[j] +\
    \ a[k]) % 3 == 0\n                    count += 1\n                end\n      \
    \      end\n        end\n    end\n    return count\nend", "    sum = 0\n    if\
    \ n % 3 == 0\n        sum += comb(n, 3)\n    end\n    if n % 3 == 1\n        sum\
    \ += comb(n - 1, 3)\n    end\n    if n % 3 == 2\n        sum += comb(n - 2, 3)\n\
    \    end\n    return sum\nend", "    number_triples = 0\n    for i in 1:n\n  \
    \      for j in i+1:n\n            for k in j+1:n\n                if (i*i - i\
    \ + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0\n                    number_triples\
    \ += 1\n                end\n            end\n        end\n    end\n    return\
    \ number_triples\nend", "    \"\"\"\n    Calculates the number of triples of an\
    \ integer array where the elements of the triple \n    sum up to a multiple of\
    \ 3. \n    \"\"\"\n    a, b, c = 0, 0, 0\n    for i = 1:n-2\n        a += i\n\
    \        b += i^2\n        c += i^3\n    end\n    a *= a\n    b *= a\n    c *=\
    \ a\n    a *= n*(n+1)\n    c *= n*(n+1)*(2n+1)\n    a += b\n    a += c\n    a\
    \ //= 18\n    return a\nend", "    sum = 0\n    for i in 1:n-2\n        for j\
    \ in i+1:n-1\n            for k in j+1:n\n                if (i*i - i + 1 + j*j\
    \ - j + 1 + k*j - k + 1) % 3 == 0\n                    sum += 1\n            \
    \    end\n            end\n        end\n    end\n    return sum\nend\n \n@time\
    \ for n in 100:100:10_000\n    get_max_triples(n)\nend", "    # generator is faster\
    \ than map\n    a = [i*i - i + 1 for i in 1:n]\n    mod3 = [i%3 for i in a]\n\
    \    # mod3[i] + mod3[j] + mod3[k] = 0 \n    # ==> mod3[i] + mod3[j] = 3 - mod3[k]\n\
    \    # ==> mod3[j] = 3 - mod3[i] - mod3[k]\n    cnt = Dict(0=>0, 1=>0, 2=>0)\n\
    \    for v in mod3\n        cnt[v] += 1\n    # k = 0\n    res = cnt[0]*(cnt[0]-1)*(cnt[0]-2)//6\n\
    \    # k = 1\n    res += cnt[1]*(cnt[1]-1)*(cnt[2]-2)//6\n    # k = 2\n    res\
    \ += cnt[2]*(cnt[2]-1)*(cnt[1]-2)//6\n    return res\nend", "    return sum( sum(\
    \ isa(tup, Tuple{Int64,Int64,Int64}) for tup in combinations(3, i)) for i in 1:n)\n\
    end", "    max_triples = 0\n    for i = 1:n\n        a = i * i - i + 1\n     \
    \   for j = i + 1:n\n            b = j * j - j + 1\n            for k = j + 1:n\n\
    \                c = k * k - k + 1\n                if (a + b + c) % 3 == 0\n\
    \                    max_triples += 1\n                end\n            end\n\
    \        end\n    end\n    return max_triples\nend", "    \"\"\"\n    Returns\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n    \"\"\"\n    triples = 0\n    for i in\
    \ 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n              \
    \  if (i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0\n                   \
    \ triples += 1\n                end\n            end\n        end\n    end\n \
    \   return triples\nend", "    k = 1\n    count = 0\n    while k<=n-2\n      \
    \  if ((k*k - k + 1 + (k+1)*(k+1) - (k+1) + 1 + (k+2)*(k+2) - (k+2) + 1) % 3)\
    \ == 0\n            count += 1\n        end\n        k += 1\n    end\n    return\
    \ count\nend", "    return ((n-2) * (n-1) * n) \xF7 (6)\nend", "    res = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (i*i-i+1 + j*j-j+1 + k*k-k+1) % 3 == 0\n                   \
    \ res += 1\n                end\n            end\n        end\n    end\n    return\
    \ res\nend", "    idx = 1\n    cnt = 0\n    while idx < n\n        jdx = idx +\
    \ 1\n        while jdx < n\n            kdx = jdx + 1\n            while kdx <\
    \ n\n                if a[idx] + a[jdx] + a[kdx] % 3 == 0\n                  \
    \  cnt += 1\n                end\n                kdx += 1\n            end\n\
    \            jdx += 1\n        end\n        idx += 1\n    end\n    return cnt\n\
    end", "    len = 0\n    for i in 1:n\n        for j in (i+1):n\n            for\
    \ k in (j+1):n\n                if (i*i - i + 1 + j*j - j + 1 + k*j - k + 1) %\
    \ 3 == 0\n                    len += 1\n                end\n            end\n\
    \        end\n    end\n    return len\nend\nn = 5\n@time get_max_triples(n)",
  "    # initialize vars\n    n_mul_3 = n * 3\n    a = [0 for i in 1:n]\n    max_triples\
    \ = 0\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    # brute force\
    \ search\n    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n\
    \                if a[i] + a[j] + a[k] == n_mul_3\n                    max_triples\
    \ += 1\n                end\n            end\n        end\n    end\n    return\
    \ max_triples\nend", "    all_triples = []\n    for i in 1:n-2\n        for j\
    \ in i+1:n-1\n            for k in j+1:n\n                push!(all_triples, (i,\
    \ j, k))\n            end\n        end\n    end\n    filter(all_triples) do triple\n\
    \        a, b, c = triple\n        a + b + c % 3 == 0\n    end\nend", "    count\
    \ = 0\n    sum = 0\n    a = []\n    for i in range(1, n+1)\n        a.append(i\
    \ * i - i + 1)\n    for i in range(0, n)\n        for j in range(i+1, n)\n   \
    \         for k in range(j+1, n)\n                sum = a[i] + a[j] + a[k]\n \
    \               if sum % 3 == 0\n                    count += 1\n    return count\n\
    end", "    count::Int64 = 0\n    a::Int64 = 1\n    b::Int64 = 3\n    c::Int64\
    \ = 7\n    while b <= n\n        while c <= n && a + b + c <= 3*n\n          \
    \  if (a + b + c) % 3 == 0\n                count += 1\n            end\n    \
    \        c += 2\n        end\n        a += 2\n        b += 2\n        c = b +\
    \ 4\n    end\n    return count\nend", "    total_triples = 0\n    for i in 1:n-2\n\
    \        for j in i+1:n-1\n            for k in j+1:n\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0\n                    total_triples += 1\n          \
    \      end\n            end\n        end\n    end\n    return total_triples\n\
    end", "    count = 0\n    for i = 1:n-2\n        for j = i+1:n-1\n           \
    \ for k = j+1:n\n                if (i*i - i + 1 + j*j - j + 1 + k*j - k + 1)\
    \ % 3 == 0\n                    count += 1\n                end\n            end\n\
    \        end\n    end\n    return count\nend", "    a = collect(1:n)\n    a =\
    \ a.^2 - a + 1\n    count = 0\n    @inbounds for i in 1:n\n        @inbounds for\
    \ j in i+1:n\n            @inbounds for k in j+1:n\n                if (a[i] +\
    \ a[j] + a[k]) % 3 == 0\n                    count += 1\n                end\n\
    \            end\n        end\n    end\n    return count\nend", "    \"\"\"\n\
    \    Returns the number of the maximum triples.\n    \"\"\"\n    rem(a::Array,\
    \ b::Int64)::Int64 = a % b\n    a = zeros(Int64, n)\n    m = zeros(Int64, 3)\n\
    \    for i in 1:n\n        a[i] = i * i - i + 1\n        if a[i] >= 3\n      \
    \      m[rem(a[i], 3) + 1] += 1\n        end\n    end\n    if rem(sum(a), 3) ==\
    \ 0\n        return m[1] * m[2] * m[3] + m[1] * m[1] * m[1] + m[2] * m[2] * m[2]\
    \ + m[3] * m[3] * m[3]\n    elseif rem(sum(a), 3) == 1\n        return m[1] *\
    \ m[2] * m[3] + m[2] * m[2] * m[2]\n    elseif rem(sum(a), 3) == 2\n        return\
    \ m[1] * m[2] * m[3] + m[3] * m[3] * m[3]\n    end\nend", "    cnt = 0 \n    for\
    \ i in 1:n\n        for j in (i+1):n\n            for k in (j+1):n\n         \
    \       if (i*i - i + 1 + j*j - j + 1 + k*j - k + 1) % 3 == 0\n              \
    \      cnt += 1\n                end\n            end\n        end\n    end\n\
    \    return cnt\nend", "    a = zeros(Int64, n)\n    for i in 1:n \n        a[i]\
    \ = i*i - i + 1\n    end\n    cnt = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n\
    \            for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n\
    \                    cnt += 1\n                end\n            end\n        end\n\
    \    end\n    return cnt\nend", "    a = Int64[]\n    for i in 1:n\n        push!(a,\
    \ i*i - i + 1)\n    end\n    cnt = 0\n    for i in 1:n\n        for j in i+1:n\n\
    \            for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n\
    \                    cnt += 1\n                end\n            end\n        end\n\
    \    end\n    return cnt\nend", "    \"\"\"\n    Return the number of triples\
    \ of length n where a[i] + a[j] + a[k] is divisible by 3\n    \"\"\"\n    _count\
    \ = 0\n    i, j, k = 1, 1, 1\n    while i <= n-2\n        j = i+1\n        while\
    \ j <= n-1\n            k = j+1\n            while k <= n\n                if\
    \ (i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0\n                    _count\
    \ += 1\n                end\n                k += 1\n            end\n       \
    \     j += 1\n        end\n        i += 1\n    end\n    return _count\nend", " \
    \   return sum([1 for i=1:n-2, j=i+1:n-1, k=j+1:n\n        if((i*i-i+1 + j*j-j+1\
    \ + k*j-k+1) % 3 == 0)])\nend", "    n > 1 ? n-2 : 0\nend", "    sum = 0\n   \
    \ for i = 1:n-2\n        for j = i+1:n-1\n            for k = j+1:n\n        \
    \        if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0\n       \
    \             sum += 1\n                end\n            end\n        end\n  \
    \  end\n    return sum\nend", "    count = 0\n    for i in 1:n\n        for j\
    \ in i+1:n\n            for k in j+1:n\n                if (i*i - i + 1 + j*j\
    \ - j + 1 + k*j - k + 1) % 3 == 0\n                    count += 1\n          \
    \      end\n            end\n        end\n    end\n    return count\nend", " \
    \   a = ones(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n\
    \    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n            for\
    \ k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n             \
    \       count += 1\n                end\n            end\n        end\n    end\n\
    \    return count\nend", "    result = 0\n    for i = 1:n-2\n        for j = i+1:n-1\n\
    \            for k = j+1:n\n                if i+j+k == n\n                  \
    \  result += 1\n                end\n            end\n        end\n    end\n \
    \   return result\nend", "    t = 0\n    for i = 1:n-2\n        for j = i+1:n-1\n\
    \            for k = j+1:n\n                if (i^2-i+1 + j^2-j+1 + k^2-k+1) %\
    \ 3 == 0\n                    t += 1\n                end\n            end\n \
    \       end\n    end\n    return t\nend", "    triples_count = 0\n    for i in\
    \ 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n              \
    \  val = (i*i - i + 1) + (j*j - j + 1) + (k*j - k + 1)\n                if val\
    \ % 3 == 0\n                    triples_count += 1\n                end\n    \
    \        end\n        end\n    end\n    return triples_count\nend", "    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if a[i] + a[j] + a[k] % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end", "    a = [i*i - i + 1 for i in 1:n]\n    count = 0\n    for i in 1:n-2\n\
    \        for j in i+1:n-1\n            for k in j+1:n\n                if a[i]\
    \ + a[j] + a[k] % 3 == 0\n                    count += 1\n                end\n\
    \            end\n        end\n    end\n    return count\nend", "    triples =\
    \ []\n    for i in 1:n\n        for j in (i+1):n\n            for k in (j+1):n\n\
    \                if (i * i - i + 1 + j * j - j + 1 + k * j - k + 1) % 3 == 0\n\
    \                    push!(triples, (i, j, k))\n                end\n        \
    \    end\n        end\n    end\n    return length(triples)\nend", "    a = collect(1:n)\n\
    \    a = [i*i - i + 1 for i in a]\n    num_triples = 0\n    for i in a\n     \
    \   for j in a[a.index(i)+1:end]\n            for k in a[a.index(j)+1:end]\n \
    \               num_triples += (i + j + k) % 3 == 0\n            end\n       \
    \ end\n    end\n    return num_triples\nend", "    return n % 3 == 0 ? n - 1 :\
    \ n\nend", "    n_old = n\n    count_3_5 = 0\n    while(n % 3 == 0)\n        n\
    \ = n / 3\n        count_3_5 += 1\n    end\n    count_2 = 0\n    while(n % 2 ==\
    \ 0)\n        n = n / 2\n        count_2 += 1\n    end\n    if n > 1\n       \
    \ #println(\"n = \", n)\n        return 0\n    end\n    if count_3_5 == 0\n  \
    \      return 0\n    end\n    if count_2 < count_3_5\n        return 0\n    end\n\
    \    return (count_2 - count_3_5 + 1) * count_3_5\nend", "    total_triples =\
    \ 0\n    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n\
    \                if (i+j+k) % 3 == 0\n                    total_triples += 1\n\
    \                end\n            end\n        end\n    end\n    return total_triples\n\
    end", "    \"\"\"\n    Get the maximal number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n    \"\"\
    \"\n    # Not working yet\n    # res = 0\n    # for i in 1:n\n    #     for j\
    \ in 1:n\n    #         for k in 1:n\n    #             if i < j < k && ((i *\
    \ i - i + 1) + (j * j - j + 1) + (k * k - k + 1)) % 3 == 0\n    #            \
    \     res += 1\n    #             end\n    #         end\n    #     end\n    #\
    \ end\n    # return res\n    return -1\nend", "    result = 0\n    if n <= 2\n\
    \        return result\n    end\n    for i in 1:n-2\n        for j in i+1:n-1\n\
    \            for k in j+1:n\n                sum = (i*i - i + 1) + (j*j - j +\
    \ 1) + (k*j - k + 1)\n                if sum % 3 == 0\n                    result\
    \ += 1\n                end\n            end\n        end\n    end\n    return\
    \ result\nend", "    # create an array a of length n\n    a = [i * i - i + 1 for\
    \ i in 1:n]\n    # initialize counter\n    c = 0\n    # iterate over each possible\
    \ triple combination\n    for i in 1:n, j in 1:n, k in 1:n\n        # check each\
    \ condition\n        if i < j < k && (a[i] + a[j] + a[k]) % 3 == 0\n         \
    \   # update counter\n            c += 1\n        end\n    end\n    # return c\n\
    \    return c\nend", "    # initialize the array a\n    a = Array{Int64}(undef,\
    \ n)\n    # store a[i] = i*i - i + 1\n    for i in 1:n\n        a[i] = i*i - i\
    \ + 1\n    end\n    count = 0\n    for i in 1:n\n        for j in (i+1):n\n  \
    \          for k in (j+1):n\n                # check if a[i] + a[j] + a[k] is\
    \ a multiple of 3\n                if (a[i] + a[j] + a[k]) % 3 == 0\n        \
    \            count += 1\n                end\n            end\n        end\n \
    \   end\n    return count\nend", "    a = zeros(Int64, n)\n    for i in 1:n\n\
    \        a[i] = i * i - i + 1\n    end\n    count = 0\n    for i in 1:n\n    \
    \    for j in i+1:n\n            for k in j+1:n\n                if (a[i] + a[j]\
    \ + a[k]) % 3 == 0\n                    count += 1\n                end\n    \
    \        end\n        end\n    end\n    return count\nend", "    val = 0 \n  \
    \  for i = 1:n-2\n        for j = i+1:n-1\n            for k = j+1:n\n       \
    \         if mod(i*i - i + 1 + j*j - j + 1 + k*j - k + 1, 3) == 0\n          \
    \          val += 1\n                end\n            end\n        end\n    end\n\
    \    return val\nend", "    count = 0\n    for i = 1:n, j = i+1:n, k = j+1:n\n\
    \        if ((i*i-i+1) + (j*j-j+1) + (k*j-k+1)) % 3 == 0\n            count +=\
    \ 1\n        end\n    end\n    return count\nend", "    if n < 3 return 0 end\n\
    \    if n < 6 return 1 end\n    return 1 + get_max_triples(n-1)\nend", "    a\
    \ = [i*i - i + 1 for i in 1:n]\n    cnt = 0\n    for i in 1:n-2, j in i+1:n-1,\
    \ k in j+1:n\n        if (a[i] + a[j] + a[k]) % 3 == 0\n            cnt += 1\n\
    \        end\n    end\n    return cnt\nend", "    max_triples = 0\n    for i in\
    \ range(1, n - 1)\n        if (i % 3 == 0)\n            max_triples += 1\n   \
    \     end\n    end\n    return max_triples\nend", "    \"\"\"\n    n is the length\
    \ of the array.", "    \"\"\"\n    This function returns the count of all triples\
    \ which are multiples of 3.", "    count = 0\n    for i = 1:n-2\n        for j\
    \ = i+1:n-1\n            for k = j+1:n\n                if mod(a[i] + a[j] + a[k],\
    \ 3) == 0\n                    count += 1\n                end\n            end\n\
    \        end\n    end\n    return count\nend", "    sum_a = 0\n    i = 1\n   \
    \ while i < n\n        sum_a += (n - i)\n        i += 1\n    end\n    return floor(Int64,\
    \ sum_a / 3)\nend", "    a = [i*i - i + 1 for i in 1:n]\n    return length([(i,\
    \ j, k) for i in 1:n-2, j in i+1:n-1, k in j+1:n if a[i] + a[j] + a[k] % 3 ==\
    \ 0])\nend", "    count = 0\n    for i = 1:n-2\n        for j = i+1:n-1\n    \
    \        for k = j+1:n\n                if (i*i - i + 1 + j*j - j + 1 + k*j -\
    \ k + 1) % 3 == 0\n                    count += 1\n                end\n     \
    \       end\n        end\n    end\n    return count\nend", "    \"\"\"\n    You\
    \ are given an integer array a of length n. \n        For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] is between 1 and n. \n        You have to return a value\
    \ q such that there exists a subset of a with length at least q, \n    such that\
    \ the sum of this subset is divisible by n.\n    \"\"\"\n    q::Int64 = n\n  \
    \  for i = 1:n\n        for j = 1:n\n            for k = 1:n\n               \
    \ if ((i < j) && (j < k)) && ((a[i] + a[j] + a[k]) % n == 0)\n               \
    \     q = maximum(q, a[i] + a[j] + a[k])\n                end\n            end\n\
    \        end\n    end\n    return q\nend", "    # MODIFY function for your solution.\n\
    \    c = 0\n    for i in 1:n\n        for j in i+1:n\n            for k in j+1:n\n\
    \                if (i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0\n     \
    \               c += 1\n                end\n            end\n        end\n  \
    \  end\n    return c\nend", "    a = 1:n\n    triples = []\n    for i in a\n \
    \       for j in a[i+1:end]\n            for k in a[j+1:end]\n               \
    \ if (i+j+k)%3 == 0\n                    push!(triples, [i,j,k])\n           \
    \     end\n            end\n        end\n    end\n    return length(triples)\n\
    end\n@time @test get_max_triples(5) == 1\n@time @test get_max_triples(5) == 1\n\
    @time @test get_max_triples(5) == 1\n@time @test get_max_triples(5) == 1\n@time\
    \ @test get_max_triples(5) == 1\n@time @test get_max_triples(5) == 1\n@time @test\
    \ get_max_triples(5) == 1\n@time @test get_max_triples(5) == 1\n@time @test get_max_triples(5)\
    \ == 1\n@time @test get_max_triples(5) == 1\n@time @test get_max_triples(5) ==\
    \ 1\n@time @test get_max_triples(5) == 1\n@time @test get_max_triples(5) == 1\n\
    @time @test get_max_triples(5) == 1\n@time @test get_max_triples(5) == 1\n@time\
    \ @test get_max_triples(5) == 1\n@time @test get_max_triples(5) == 1\n@time @test\
    \ get_max_triples(5) == 1\n@time @test get_max_triples(5) == 1\n@time @test get_max_triples(5)\
    \ == 1\n@time @test get_max_triples(5) == 1\n@time @test get_max_triples(5) ==\
    \ 1\n@time @test get_max_triples(5) == 1\n@time @test get_max_triples(5) == 1\n\
    @time @test get_max_triples(5) == 1\n@time @test get_max_triples(5) == 1", " \
    \   \"\"\"\n    Get the maximum number of possible triples \n    \"\"\"\n    maximum_triples\
    \ = (n*(n-1)*(n-2))/6\n    \n    return maximum_triples\nend", "    triples_count\
    \ = 0\n    for i in 1:n, j in i+1:n, k in j+1:n\n        if (i*i - i + 1 + j*j\
    \ - j + 1 + k*j - k + 1) % 3 == 0\n            triples_count += 1\n        end\n\
    \    end\n    return triples_count\nend", "    cnt::Int64 = 0 \n    sums::Array{Int64,1}\
    \ = zeros(Int64, 3)", "    count = 0\n    i = 1\n    while i < n\n        j =\
    \ i + 1\n        while j < n\n            k = j + 1\n            while k < n\n\
    \                if (i^2 - i + 1 + j^2 - j + 1 + k^2 - k + 1) % 3 == 0\n     \
    \               count += 1\n                end\n                k += 1\n    \
    \        end\n            j += 1\n        end\n        i += 1\n    end\n    return\
    \ count\nend", "    return div(n,3)\nend", "    #return sum(sum(map(divisible_by_3,\
    \ [i+j+k for i in 1:n, j in 1:n, k in 1:n])) for j in 1:n, i in 1:n)\n    #return\
    \ sum(sum(3(map(divisible_by_3, [i+j+k for i in 1:n, j in 1:n, k in 1:n])) for\
    \ j in 1:n, i in 1:n)\n    #return sum(sum(map(divisible_by_3, [i+j+k for i in\
    \ 1:n, j in 1:n, k in 1:n])) for j in 1:n, i in 1:n)\n    return sum(sum(map(divisible_by_3,\
    \ [i+j+k for i in 1:n, j in 1:n, k in 1:n])) for j in 1:n, i in 1:n)\nend", " \
    \   temp_array = zeros(Int64, n)\n    for i in 1:n\n        temp_array[i] = i*i\
    \ - i + 1\n    end\n    temp_array = sort(temp_array)\n    cnt = 0\n    for i\
    \ in 1:n-2\n        for j in i+1:n-1\n            if temp_array[i] + temp_array[j]\
    \ in temp_array[j+1:end]\n                cnt += 1\n            end\n        end\n\
    \    end\n    return cnt\nend", "    i::Int64 = 1\n    j::Int64 = 1\n    k::Int64\
    \ = 1\n    cnt::Int64 = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n    \
    \        for k in j+1:n\n                a = i * i - i + 1\n                b\
    \ = j * j - j + 1\n                c = k * k - k + 1\n                if (a +\
    \ b + c) % 3 == 0\n                    cnt += 1\n                end\n       \
    \     end\n        end\n    end\n    return cnt\nend", "    max_triples = 0\n\
    \    for i in 1:n\n        for j in i+1:n\n            for k in j+1:n\n      \
    \          i1 = i * i - i + 1\n                j1 = j * j - j + 1\n          \
    \      k1 = k * k - k + 1\n                if mod(i1 + j1 + k1, 3) == 0\n    \
    \                max_triples += 1\n                end\n            end\n    \
    \    end\n    end\n    return max_triples\nend\n@time println(get_max_triples(100))",
  "    sub_res_1 = 0\n    sub_res_2 = 0\n    sub_res_3 = 0\n    for i in 1:n-2\n \
    \       sub_res_1 += (i+1)\n    end\n    for i in 1:n-1\n        sub_res_2 +=\
    \ (i+1)\n    end\n    for i in 1:n\n        sub_res_3 += (i+1)\n    end\n    return\
    \ sub_res_1*sub_res_2*sub_res_3\nend", "    if n < 3\n        return 0\n    end\n\
    \    return div(n-2, 3)\nend", "    # create the array\n    a = [i*i - i + 1 for\
    \ i in 1:n]\n    # get the unique combinations of pairs\n    pairs = [(i,j) for\
    \ i in 1:n, j in i+1:n]\n    # get the number of pairs that are multiple of 3\n\
    \    num_pairs = sum([1 for (i,j) in pairs if (a[i] + a[j]) % 3 == 0])\n    #\
    \ the number of triples is the number of pairs divided by 2\n    num_triples =\
    \ round(Int64, num_pairs/2)\n    # return the number of triples\n    return num_triples\n\
    end\nn = 5\nget_max_triples(n)", "    total_triples = 0\n    for i in range(1,\
    \ n-1)\n        for j in range(i+1, n)\n            for k in range(j+1, n+1)\n\
    \                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0\n\
    \                    total_triples += 1\n    return total_triples", "    count\
    \ = 0\n    for i in 1:n\n        for j in (i+1):n\n            for k in (j+1):n\n\
    \                if (i * i - i + 1 + j * j - j + 1 + k * j - k + 1) % 3 == 0\n\
    \                    count += 1\n                end\n            end\n      \
    \  end\n    end\n    return count\nend", "    a = zeros(Int64, n)\n    for i =\
    \ 1:n \n        a[i] = i*i - i + 1\n    end\n    res = 0\n    for i = 1:n-2\n\
    \        for j = i+1:n-1\n            for k = j+1:n\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0\n                    res += 1\n                end\n\
    \            end\n        end\n    end\n    return res\nend", "    a = [i*i -\
    \ i + 1 for i in 1:n]\n    return sum([a[i] + a[j] + a[k] % 3 == 0 for i in 1:n-2,\
    \ j in i+1:n-1, k in j+1:n])\nend", "    a = [0]*n\n    for i in 1:n\n       \
    \ a[i] = i*i - i + 1\n    end\n    #println(a)\n    count = 0\n    for i in 1:n-2\n\
    \        for j in i+1:n-1\n            for k in j+1:n\n                if mod(a[i]\
    \ + a[j] + a[k], 3) == 0\n                    count += 1\n                end\n\
    \            end\n        end\n    end\n    return count\nend\nprintln(get_max_triples(5))\n\
    println(get_max_triples(500))\nprintln(get_max_triples(1000))", "    \"\"\"\n\
    \    Get the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n   \
    \ and a[i] + a[j] + a[k] is a multiple of 3.\n    \"\"\"\n    triples = 0\n  \
    \  for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n    \
    \            if (i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0\n         \
    \           triples += 1\n                end\n            end\n        end\n\
    \    end\n    return triples\nend", "    n_a = n * n - n + 1\n    n_b = n * n\
    \ - 2 * n + 2\n    n_c = n * n - 3 * n + 3\n    if n_a % 3 == 0 && n_b % 3 ==\
    \ 0 && n_c % 3 == 0\n        return n - 2\n    elseif n_a % 3 == 0 && n_b % 3\
    \ == 0\n        return n - 1\n    elseif n_a % 3 == 0 && n_c % 3 == 0\n      \
    \  return n - 1\n    elseif n_b % 3 == 0 && n_c % 3 == 0\n        return n - 1\n\
    \    elseif n_a % 3 == 0\n        return n\n    elseif n_b % 3 == 0\n        return\
    \ n\n    elseif n_c % 3 == 0\n        return n\n    else\n        return 0\n \
    \   end\nend", "    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n\
    \            for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n\
    \                    count += 1\n                end\n            end\n      \
    \  end\n    end\n    return count\nend", "    max_triples = 0\n    for i = 1:n\n\
    \        for j = i+1:n\n            if (i*i - i + 1 + j*j - j + 1) % 3 == 0\n\
    \                for k = j+1:n\n                    if (i*i - i + 1 + j*j - j\
    \ + 1 + k*k - k + 1) % 3 == 0\n                        max_triples += 1\n    \
    \                end\n                end\n            end\n        end\n    end\n\
    \    return max_triples\nend", "    # Write your code here\n    return 0\nend",
  "    # create array\n    arr = [i*i - i + 1 for i in 1:n]\n    # get total\n   \
    \ total = 0\n    for i in 1:n\n        for j in i+1:n\n            for k in j+1:n\n\
    \                temp = arr[i] + arr[j] + arr[k]\n                if (temp % 3\
    \ == 0)\n                    total += 1\n                end\n            end\n\
    \        end\n    end\n    return total\nend\n \n@time get_max_triples(5)\n \n\
    @time get_max_triples(10)\n \n@time get_max_triples(15)", "    count = 0\n   \
    \ s = 0\n    i = 1\n    while i < n-1\n        j = i+1\n        k = n\n      \
    \  while j < k\n            if s = rem(a[i] + a[j] + a[k], 3) == 0\n         \
    \       count += 1\n            end\n            if s == 1\n                j\
    \ += 1\n            elseif s == 2\n                k -= 1\n            else\n\
    \                j += 1\n                k -= 1\n            end\n        end\n\
    \        i += 1\n    end\n    return count\nend", "    # create your array here\n\
    \    a = [i*i - i + 1 for i in 1:n]\n    count = 0\n    for i in 1:n, j in i+1:n,\
    \ k in j+1:n\n        # print(\"i=$i j=$j k=$k\")\n        if (a[i] + a[j] + a[k])\
    \ % 3 == 0\n            count += 1\n        end\n    end\n    return count\nend",
  "    #  1 \u2264 n \u2264 10^5\n    return n\nend", "    multiples = 0\n    for\
    \ i = 1:n-2\n        for j = i+1:n-1\n            for k = j+1:n\n            \
    \    if (i*i - i + 1 + j*j - j + 1 + k*j - k + 1) % 3 == 0\n                 \
    \   multiples += 1\n                end\n            end\n        end\n    end\n\
    \    return multiples\nend", "    total = 0\n    for i in 2:n\n        for j in\
    \ 1:i-1\n            for k in 1:j-1\n                if (1+3*k+5*j+7*i)%3 == 0\n\
    \                    total += 1\n                end\n            end\n      \
    \  end\n    end\n    return total\nend", "    if n < 3 return 0 end\n    # Of\
    \ course, we can find the pairs that sum is a multiple of 3 and then \n    # search\
    \ for a triple\n    # But it is more clever to search for a triple whose sum of\
    \ all elements \n    # is 3, 6, 9, ... (a multiple of 3).\n    # As the number\
    \ is either sum of two different numbers or the multiplication\n    # of two numbers,\
    \ we know that all the two numbers which sum is a multiple\n    # of 3, must be\
    \ that one is a multiplication of 3 and the other number is 1\n    # and viceversa.\n\
    \    # Now, as we are searching for a triple whose sum is a multiple of 3, then\
    \ \n    # we have that all these pairs must be: 3x * 1, 1 * 3x (for some x) or\
    \ 9 * 1.\n    # Why? because, for example:\n    #   - 3x * 1 + 1 * 1 = 3x + 1\
    \ (a multiple of 3 iff x is a multiple of 3)\n    #   - 3x * 1 + 1 * 3y = 3x +\
    \ 3y (a multiple of 3 iff x + y is a multiple of 3)\n    #   - 3x * 1 + 1 * 9\
    \ = 3x + 9 (a multiple of 3 iff x is a multiple of 3)\n    #   - 3x * 3y + 1 *\
    \ 1 = 9xy + 1 (a multiple of 3 iff xy is a multiple of 3)\n    #   - 3x * 3y +\
    \ 1 * 3z = 9xy + 3z (a multiple of 3 iff xy + z is a multiple of 3)\n    #   -\
    \ 3x * 3y + 1 * 9 = 9xy + 9 (a multiple of 3 iff xy is a multiple of 3)\n    #\
    \   - 3x * 9 + 1 * 1 = 27x + 1 (a multiple of 3 iff x is a multiple of 3)\n  \
    \  #   - 3x * 9 + 1 * 3y = 27x + 3y (a multiple of 3 iff x + y is a multiple of\
    \ 3)\n    #   - 3x * 9 + 1 * 9 = 27x + 9 (a multiple of 3 iff x is a multiple\
    \ of 3)\n    # Therefore, we", "    i = 0\n    j = 0\n    k = 0\n    count = 0\n\
    \    for i in range(1, n):\n        for j in range(i + 1, n):\n            for\
    \ k in range(j + 1, n):\n                if (i * i - i + 1 + j * j - j + 1 + k\
    \ * k - k + 1) % 3 == 0:\n                    count += 1\n    return count\nend",
  "    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n            for k\
    \ in j+1:n\n                if (i*i - i + 1 + j*j - j + 1 + k*j - k + 1) % 3 ==\
    \ 0\n                    count += 1\n                end\n            end\n  \
    \      end\n    end\n    return count\nend", "    a = [i*i - i + 1 for i in 1:n]\n\
    \    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n            for\
    \ k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n             \
    \       count += 1\n                end\n            end\n        end\n    end\n\
    \    return count\nend", "    triples = 0\n    for i in 1:n\n        for j in\
    \ (i+1):n\n            for k in (j+1):n\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0\n                    triples += 1\n                end\n          \
    \  end\n        end\n    end\n    return triples\nend", "    \"\"\"\n    Given\
    \ an integer n, returns the maximum number of triples \n    (a[i], a[j], a[k])\
    \ of a where i < j < k, and a[i] + a[j] + a[k] is a multiple of 3.", "    count\
    \ = 0\n    for i = 1:n, j = i+1:n, k = j+1:n\n        if ((i*i-i+1 + j*j-j+1 +\
    \ k*k-k+1) % 3 == 0)\n            count += 1\n        end\n    end\n    return\
    \ count\nend\n@test get_max_triples(5) == 1\n@test get_max_triples(6) == 4\n@test\
    \ get_max_triples(7) == 7\n@test get_max_triples(8) == 10\n@test get_max_triples(9)\
    \ == 14\n@test get_max_triples(10) == 20\n@test get_max_triples(100) == 2798\n\
    @test get_max_triples(200) == 5522", "    a = zeros(Int64, n)\n    for i in 1:n\n\
    \        a[i] = i*i - i + 1\n    end\n    return a\nend", "    triples = 0\n \
    \   if n >= 3\n        for i in 1:n\n            for j in i+1:n\n            \
    \    for k in j+1:n\n                    if (i*i - i + 1 + j*j - j + 1 + k*j -\
    \ k + 1) % 3 == 0\n                        triples += 1\n                    end\n\
    \                end\n            end\n        end\n    end\n    return triples\n\
    end", "    triples = 0\n    for i in 1:n-2, j in i+1:n-1, k in j+1:n\n       \
    \ @inbounds sum = i * i - i + 1 + j * j - j + 1 + k * k - k + 1\n        if sum\
    \ % 3 == 0\n            triples += 1\n        end\n    end\n    return triples\n\
    end\nprintln(get_max_triples(12))\nprintln(get_max_triples(10))\nprintln(get_max_triples(10^6))",
  "    if n < 3 return 0 end\n    return Int64(n-2)\nend", "    a = [i*i - i + 1 for\
    \ i=1:n]\n    cnt = 0\n    for i=1:n-2\n        for j=i+1:n-1\n            for\
    \ k=j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n                \
    \    cnt += 1\n                end\n            end\n        end\n    end\n  \
    \  return cnt\nend", "    a = zeros(Int64, n)\n    @simd for i in 1:n\n      \
    \  a[i] = i * i - i + 1\n    end\n    triples = 0\n    for i in 1:n\n        for\
    \ j in i+1:n\n            for k in j+1:n\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0\n                    triples += 1\n                end\n          \
    \  end\n        end\n    end\n    return triples\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
