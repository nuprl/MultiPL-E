name: HumanEval_146_specialFilter
language: jl
results:
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    return sum([(n > 10) && isodd(first(n)) && isodd(last(n)) for n in nums])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpd6wg5l2_.jl:18\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd6wg5l2_.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd6wg5l2_.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpd6wg5l2_.jl:19\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd6wg5l2_.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd6wg5l2_.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpd6wg5l2_.jl:20\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpd6wg5l2_.jl:20 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd6wg5l2_.jl:15\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd6wg5l2_.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    counter = 0\n    for num in nums\n        last_digit = mod(num, 10)\n\
    \        first_digit = trunc(num / 10)\n        while num > 9\n            num\
    \ = trunc(num / 10)\n            first_digit = num\n        end\n        if num\
    \ > 10 && last_digit % 2 != 0 && first_digit % 2 != 0\n            counter +=\
    \ 1\n        end\n    end\n    return counter\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfwq2e1gc.jl:29\n  Expression: candidate([15,\
    \ -73, 14, -15]) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfwq2e1gc.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfwq2e1gc.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpfwq2e1gc.jl:30\n  Expression: candidate([33, -2, -3, 45, 21,\
    \ 109]) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfwq2e1gc.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfwq2e1gc.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpfwq2e1gc.jl:31\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfwq2e1gc.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfwq2e1gc.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpfwq2e1gc.jl:32\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 0 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpfwq2e1gc.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfwq2e1gc.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfwq2e1gc.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    idx = filter(x -> x > 10 && x % 2 != 0 && x % 10 != 0, nums)\n    length(idx)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppuhwbw90.jl:19\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppuhwbw90.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppuhwbw90.jl:16\ntest set: Test\
    \ Failed at /tmp/tmppuhwbw90.jl:20\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppuhwbw90.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppuhwbw90.jl:16\ntest set: Test\
    \ Failed at /tmp/tmppuhwbw90.jl:21\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmppuhwbw90.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppuhwbw90.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppuhwbw90.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    # Write your code here\n    return 0\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo2sw58c_.jl:18\n  Expression: candidate([15,\
    \ -73, 14, -15]) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo2sw58c_.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo2sw58c_.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpo2sw58c_.jl:19\n  Expression: candidate([33, -2, -3, 45, 21,\
    \ 109]) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo2sw58c_.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo2sw58c_.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpo2sw58c_.jl:20\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo2sw58c_.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo2sw58c_.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpo2sw58c_.jl:21\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 0 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpo2sw58c_.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo2sw58c_.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo2sw58c_.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if (i > 10) && (i % 2 != 0) && ((i\
    \ % 10) % 2 != 0) && (i % 10 != 1)\n            count += 1\n        end\n    end\n\
    \    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbifu9_vz.jl:24\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 3 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbifu9_vz.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbifu9_vz.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpbifu9_vz.jl:26\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 2 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpbifu9_vz.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbifu9_vz.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbifu9_vz.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    # YOUR CODE HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp056vc8w8.jl:16\n  Test threw exception\n\
    \  Expression: candidate([5, -2, 1, -5]) == 0\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmp056vc8w8.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp056vc8w8.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp056vc8w8.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp056vc8w8.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([15, -73, 14, -15]) == 1\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmp056vc8w8.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp056vc8w8.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] to"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp056vc8w8.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0 \n    for num in nums \n        if num > 10 && num % 2 != 0\
    \ && num < -10 \n            count += 1 \n        end \n    end \n    return count\
    \ \nend \nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4paa9rp6.jl:23\n  Expression: candidate([15,\
    \ -73, 14, -15]) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4paa9rp6.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4paa9rp6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp4paa9rp6.jl:24\n  Expression: candidate([33, -2, -3, 45, 21,\
    \ 109]) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4paa9rp6.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4paa9rp6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp4paa9rp6.jl:25\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4paa9rp6.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4paa9rp6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp4paa9rp6.jl:26\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 0 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp4paa9rp6.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4paa9rp6.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4paa9rp6.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    out = 0\n    for i in nums\n        if isodd(firstdig(i)) && isodd(lastdig(i))\
    \ && i > 10\n            out += 1\n        end\n    end\n    return out\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmppvyzzg9d.jl:22\n  Test threw exception\n\
    \  Expression: candidate([5, -2, 1, -5]) == 0\n  UndefVarError: firstdig not defined\n\
    \  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main /tmp/tmppvyzzg9d.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppvyzzg9d.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppvyzzg9d.jl:21\ntest set:\
    \ Error During Test at /tmp/tmppvyzzg9d.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([15, -73, 14, -15]) == 1\n  UndefVarError: firstdig not defined\n\
    \  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main /tmp/tmppvyzzg9d.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppvyzzg9d.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppvyzzg9d.jl:21\ntest set:\
    \ Error During Test at /tmp/tmppvyzzg9d.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([33, -2, -3, 45, 21, 109]) == 2\n  UndefVarError: firstdig not defined\n\
    \  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main /tmp/tmppvyzzg9d.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppvyzzg9d.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppvyzzg9d.jl:21\ntest set:\
    \ Error During Test at /tmp/tmppvyzzg9d.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([43, -12, 93, 125, 121, 109]) == 4\n  UndefVarError: firstdig not\
    \ defined\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmpp"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppvyzzg9d.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    ## write your code here\n    count = 0\n    for num in nums\n        if\
    \ num > 10 && num % 2 != 0 && num % 10 != 0\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpljghfnau.jl:25\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpljghfnau.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpljghfnau.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpljghfnau.jl:26\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpljghfnau.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpljghfnau.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpljghfnau.jl:27\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpljghfnau.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpljghfnau.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpljghfnau.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && i % 2 != 0 && Int(string(i)[1])\
    \ % 2 != 0 && Int(string(i)[end]) % 2 != 0\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    total = 0\n    for num in nums\n        if !(num > 10) continue end\n\
    \        if !(first(num) % 2 == 1) continue end\n        if !(last(num) % 2 ==\
    \ 1) continue end\n        total += 1\n    end\n    return total\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5])\
    \ == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2,\
    \ -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) ==\
    \ 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5ftnggwi.jl:25\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5ftnggwi.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5ftnggwi.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp5ftnggwi.jl:26\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5ftnggwi.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5ftnggwi.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp5ftnggwi.jl:27\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5ftnggwi.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5ftnggwi.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5ftnggwi.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    # Write your code here and replace the return value by correct one\n \
    \   \nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmprw6ybm9l.jl:17\n  Test threw exception\n\
    \  Expression: candidate([5, -2, 1, -5]) == 0\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmprw6ybm9l.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprw6ybm9l.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprw6ybm9l.jl:16\ntest set:\
    \ Error During Test at /tmp/tmprw6ybm9l.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([15, -73, 14, -15]) == 1\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmprw6ybm9l.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprw6ybm9l.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] to"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprw6ybm9l.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    # The number of special numbers\n    count = 0\n    for num in nums\n\
    \        # If the number is less than 10 skip it \n        if num > 10\n     \
    \       # Get the first and last digits and check if they are odd\n          \
    \  first_digit = num % 10\n            last_digit = num\n            while last_digit\
    \ > 10\n                last_digit = last_digit % 10\n            end\n      \
    \      if first_digit % 2 != 0 && last_digit % 2 != 0\n                count +=\
    \ 1\n            end\n        end\n    end\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5])\
    \ == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2,\
    \ -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) ==\
    \ 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6mvbu0xc.jl:34\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6mvbu0xc.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6mvbu0xc.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp6mvbu0xc.jl:35\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6mvbu0xc.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6mvbu0xc.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp6mvbu0xc.jl:36\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp6mvbu0xc.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6mvbu0xc.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6mvbu0xc.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    all((n -> (n > 10) & (first(n) % 2 != 0) & (last(n) % 2 != 0), nums))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3fo3r8tv.jl:16\n  Test threw exception\n\
    \  Expression: candidate([5, -2, 1, -5]) == 0\n  TypeError: non-boolean (var\"\
    #1#2\") used in boolean context\n  Stacktrace:\n   [1] _all\n     @ ./reduce.jl:1161\
    \ [inlined]\n   [2] all\n     @ ./reduce.jl:1152 [inlined]\n   [3] all\n     @\
    \ ./reduce.jl:1070 [inlined]\n   [4] specialFilter(nums::Vector{Int64})\n    \
    \ @ Main /tmp/tmp3fo3r8tv.jl:9\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp3fo3r8tv.jl:16 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp3fo3r8tv.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp3fo3r8tv.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([15, -73, 14, -15]) == 1\n  TypeError: non-boolean (var\"#1#2\") used\
    \ in boolean context\n  Stacktrace:\n   [1] _all\n     @ ./reduce.jl:1161 [inlined]\n\
    \   [2] all\n     @ ./reduce.jl:1152 [inlined]\n   [3] all\n     @ ./reduce.jl:1070\
    \ [inlined]\n   [4] specialFilter(nums::Vector{Int64})\n     @ Main /tmp/tmp3fo3r8tv.jl:9\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp3fo3r8tv.jl:17 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp3fo3r8tv.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp3fo3r8tv.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([33, -2, -3, 45, 21, 109]) == 2\n  TypeError: non-boolean (var\"#1#2\"\
    ) used in boolean context\n  Stacktrace:\n   [1] _all\n     @ ./reduce.jl:1161\
    \ [inlined]\n   [2] all\n     @ ./reduce.jl:1152 [inlined]\n   [3] all\n     @\
    \ ./reduce.jl:1070 [inlined]\n   [4] specialFilter(nums::Vector{Int64})\n    \
    \ @ Main /tmp/tmp3fo3r8tv.jl:9\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3fo3r8tv.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n \n    i = 0\n    for num in nums\n        if num > 10 && begin(div(num, 10))\
    \ % 2 != 0 && end(div(num, 10)) % 2 != 0\n            i = i + 1\n        end\n\
    \    end\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpo_j6qbfk.jl:12\nin expression starting at /tmp/tmpo_j6qbfk.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    filter(x -> x>10 && firstdig(x)%2 != 0 && lastdig(x)%2 != 0, nums)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpykmebodu.jl:16\n  Test threw exception\n\
    \  Expression: candidate([5, -2, 1, -5]) == 0\n  MethodError: Cannot `convert`\
    \ an object of type Vector{Int64} to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmpykmebodu.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpykmebodu.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpykmebodu.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpykmebodu.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([15, -73, 14, -15]) == 1\n  UndefVarError: firstdig not defined\n\
    \  Stacktrace:\n   [1] (::var\"#1#2\")(x::Int64)\n     @ Main /tmp/tmpykmebodu.jl:9\n\
    \   [2] filter(f::var\"#1#2\", a::Vector{Int64})\n     @ Base ./array.jl:2484\n\
    \   [3] specialFilter(nums::Vector{Int64})\n     @ Main /tmp/tmpykmebodu.jl:9\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpykmebodu.jl:17 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpykmebodu.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpykmebodu.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([33, -2, -3, 45, 21, 109]) == 2\n  UndefVarError: firstdig not defined\n\
    \  Stacktrace:\n   [1] (::var\"#1#2\")(x::Int64)\n     @ Main /tmp/tmpykmebodu.jl:9\n\
    \   [2] filter"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpykmebodu.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0 \n    for num in nums \n        if num > 10 && special(num)\n\
    \            count += 1 \n        end \n    end \n    return count \nend \nusing\
    \ Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmbwj24ii.jl:23\n  Test threw exception\n\
    \  Expression: candidate([15, -73, 14, -15]) == 1\n  UndefVarError: special not\
    \ defined\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmpmbwj24ii.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmbwj24ii.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmbwj24ii.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpmbwj24ii.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([33, -2, -3, 45, 21, 109]) == 2\n  UndefVarError: special not defined\n\
    \  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main /tmp/tmpmbwj24ii.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmbwj24ii.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmbwj24ii.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpmbwj24ii.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([43, -12, 93, 125, 121, 109]) == 4\n  UndefVarError: special not defined\n\
    \  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main /tmp/tmpmbwj24ii.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmbwj24ii.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmbwj24ii.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpmbwj24ii.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([71, -2, -33, 75, 21, 19]) == 3\n  UndefVarError: special not defined\n\
    \  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main /t"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmbwj24ii.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for n in nums\n        if (n >= 10) && isodd(firstdigit(n))\
    \ && isodd(lastdigit(n))\n            count += 1\n        end\n    end\n    return\
    \ count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpne5yvalk.jl:23\n  Test threw exception\n\
    \  Expression: candidate([15, -73, 14, -15]) == 1\n  UndefVarError: firstdigit\
    \ not defined\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n    \
    \ @ Main /tmp/tmpne5yvalk.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpne5yvalk.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpne5yvalk.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpne5yvalk.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([33, -2, -3, 45, 21, 109]) == 2\n  UndefVarError: firstdigit not defined\n\
    \  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main /tmp/tmpne5yvalk.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpne5yvalk.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpne5yvalk.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpne5yvalk.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([43, -12, 93, 125, 121, 109]) == 4\n  UndefVarError: firstdigit not\
    \ defined\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmpne5yvalk.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpne5yvalk.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpne5yvalk.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpne5yvalk.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([71, -2, -33, 75, 21, 19]) == 3\n  UndefVarError: firstdigit not defined\n\
    \  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpne5yvalk.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    counter = 0 \n    for n in nums \n        if n > 10 && n % 2 != 0 && mod(n,\
    \ 10) % 2 != 0 && (n % 10) % 2 != 0 \n            counter += 1 \n        end \n\
    \    end \n    return counter \nend \nusing Test\n\n@testset begin\n\ncandidate\
    \ = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp55kg3fst.jl:24\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp55kg3fst.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp55kg3fst.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp55kg3fst.jl:25\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp55kg3fst.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp55kg3fst.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp55kg3fst.jl:26\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp55kg3fst.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp55kg3fst.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp55kg3fst.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    return sum(map(\n        (x) -> x > 10 && mod(firstdigit(x), 2) == 1 &&\
    \ mod(lastdigit(x), 2) == 1,\n        nums))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxg5tw2wq.jl:19\n  Test threw exception\n\
    \  Expression: candidate([15, -73, 14, -15]) == 1\n  UndefVarError: firstdigit\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#1#2\")(x::Int64)\n      @ Main\
    \ /tmp/tmpxg5tw2wq.jl:10\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n\
    \    [3] _collect(c::Vector{Int64}, itr::Base.Generator{Vector{Int64}, var\"#1#2\"\
    }, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n\
    \    [4] collect_similar\n      @ ./array.jl:653 [inlined]\n    [5] map\n    \
    \  @ ./abstractarray.jl:2867 [inlined]\n    [6] specialFilter(nums::Vector{Int64})\n\
    \      @ Main /tmp/tmpxg5tw2wq.jl:9\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpxg5tw2wq.jl:19 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpxg5tw2wq.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpxg5tw2wq.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([33, -2, -3, 45, 21, 109]) == 2\n  UndefVarError: firstdigit not defined\n\
    \  Stacktrace:\n    [1] (::var\"#1#2\")(x::Int64)\n      @ Main /tmp/tmpxg5tw2wq.jl:10\n\
    \    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _collect(c::Vector{Int64},\
    \ itr::Base.Generator{Vector{Int64}, var\"#1#2\"}, #unused#::Base.EltypeUnknown,\
    \ isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n    [4] collect_similar\n\
    \      @ ./array.jl:653 [inlined]\n    [5] map\n      @ ./abstractarray.jl:2867\
    \ [inlined]\n    [6] specialFilter(nums::Vector{Int64})\n      @ Main /tmp/tmpxg5tw2wq.jl:9\n\
    \    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpxg5tw2wq.jl:20 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpxg5tw2wq.jl:17\ntest set:\
    \ Error During Test at /tmp"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxg5tw2wq.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    specialFilter = 0\n    for i = 1:length(nums)\n        if (nums[i] > 10)\
    \ && (nums[i] % 2 != 0) && (nums[1] % 2 != 0) && (nums[length(nums)] % 2 != 0)\n\
    \            specialFilter += 1\n        end\n    end\n    return specialFilter\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpylx40nvd.jl:24\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpylx40nvd.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpylx40nvd.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpylx40nvd.jl:25\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpylx40nvd.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpylx40nvd.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpylx40nvd.jl:26\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpylx40nvd.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpylx40nvd.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpylx40nvd.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n  #Write your code here\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbc4bs5zl.jl:16\n  Test threw exception\n\
    \  Expression: candidate([5, -2, 1, -5]) == 0\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmpbc4bs5zl.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbc4bs5zl.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbc4bs5zl.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpbc4bs5zl.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([15, -73, 14, -15]) == 1\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmpbc4bs5zl.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbc4bs5zl.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] to"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbc4bs5zl.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    l = length(nums)\n    count = 0\n    for i = 1:l\n        n = nums[i]\n\
    \        if n > 10\n            first_digit = div(n, 10)\n            last_digit\
    \ = rem(n, 10)\n            if first_digit % 2 != 0 && last_digit % 2 != 0\n \
    \               count += 1\n            end\n        end\n    end\n    return\
    \ count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnhzadimd.jl:30\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnhzadimd.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnhzadimd.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpnhzadimd.jl:31\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnhzadimd.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnhzadimd.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnhzadimd.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for num in nums\n        if (num % 2 != 0) && (num > 10)\
    \ && (num % 10 % 2 != 0) && (num % 10 != num)\n            count += 1\n      \
    \  end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpatj_icso.jl:24\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpatj_icso.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpatj_icso.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpatj_icso.jl:25\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpatj_icso.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpatj_icso.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpatj_icso.jl:26\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpatj_icso.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpatj_icso.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpatj_icso.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for x in nums\n        if x>10\n            if x%2 != 0\n\
    \                if abs(x)%10 != 0\n                    count += 1\n         \
    \       end\n            end\n        end\n    end\n    return count\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw65pisfu.jl:28\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw65pisfu.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw65pisfu.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpw65pisfu.jl:29\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw65pisfu.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw65pisfu.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpw65pisfu.jl:30\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpw65pisfu.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw65pisfu.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw65pisfu.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for num in nums\n        if num > 10 && mod(first(digits(num)),\
    \ 2) == 1 && mod(last(digits(num)), 2) == 1\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    # write your code here\n    return 0\nend\n \nspecialFilter([15, -73,\
    \ 14, -15])\nspecialFilter([33, -2, -3, 45, 21, 109])\nspecialFilter([-21, -12,\
    \ 12, 15, -18, -21, 31, 6, -15, -9, 24, -6, -1, 15, -6, -2, -24, -5, -18, -7,\
    \ -9, 15, -23, -21, -13, -15, -20, -24, -22, -8, -1, 17, -15, -7, -10, -14, -19,\
    \ -1, -11, -22, -8, -17, -9, -14, -16, -13, -22, -20, -17, -15, -16, -19, -7,\
    \ -18, -14, -21, -11, -18, -10, -16, -17, -8, -19, -12, -16, -18, -21, -14, -23,\
    \ -20, -21, -16, -17, -14, -9, -10, -5, -8, -13, -11, -4, -18, -11, -22, -7, -10,\
    \ -23, -15, -21, -6, -10, -24, -7, -10, -1, -24, -14, -9, -18, -11, -13, -24,\
    \ -13, -12, -7, -19, -17, -15, -16, -14, -21, -12, -23, -20, -23, -16, -17, -12,\
    \ -9, -1, -13, -8, -18, -12, -11, -6, -15, -24, -7, -6, -10, -1, -21, -14, -18,\
    \ -16, -22, -8, -10, -9, -23, -7, -23, -19, -14, -12, -14, -18, -8, -5, -19, -13,\
    \ -16, -13, -24, -10, -\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw09ub_25.jl:16\nin expression starting at\
    \ /tmp/tmpw09ub_25.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    nums = \n    nums[filter(x -> x>10 && (x%10 != 0 && x%10 != 2 && x%10\
    \ != 4 && x%10 != 6 && x%10 != 8),nums)]\n    return nums\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5])\
    \ == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2,\
    \ -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) ==\
    \ 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1j7d233t.jl:18\n  Test threw exception\n\
    \  Expression: candidate([5, -2, 1, -5]) == 0\n  MethodError: Cannot `convert`\
    \ an object of type Vector{Int64} to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmp1j7d233t.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1j7d233t.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1j7d233t.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp1j7d233t.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([15, -73, 14, -15]) == 1\n  BoundsError: attempt to access 4-element\
    \ Vector{Int64} at index [[15]]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{Vector{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] _getindex\n     @ ./multidimensional.jl:838\
    \ [inlined]\n   [4] getindex\n     @ ./abstractarray.jl:1218 [inlined]\n   [5]\
    \ specialFilter(nums::Vector{Int64})\n     @ Main /tmp/tmp1j7d233t.jl:9\n   [6]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp1j7d233t.jl:19 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp1j7d233t.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp1j7d233t.jl:20\n  Test threw exception\n  Expressi"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1j7d233t.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    result = 0 \n    for n in nums \n        if n > 10 && n % 2 != 0 && n\
    \ % 10 != 0 \n            result += 1 \n        end \n    end \n    return result\
    \ \nend \nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpad922ykz.jl:24\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpad922ykz.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpad922ykz.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpad922ykz.jl:25\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpad922ykz.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpad922ykz.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpad922ykz.jl:26\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpad922ykz.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpad922ykz.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpad922ykz.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    # Your code here\n    ctr = 0\n    for n in nums\n        if n > 10 &&\
    \ isodd(first(digits(n))) && isodd(last(digits(n)))\n            ctr += 1\n  \
    \      end\n    end\n    return ctr\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    n = length(nums)\n    cnt = 0\n    for i in 1:n\n        if (nums[i] >\
    \ 10) && (nums[i] % 2 != 0)\n            d1 = mod(nums[i], 10)\n            d2\
    \ = mod(nums[i], 100)\n            if d1 == 1 || d1 == 3 || d1 == 5 || d1 == 7\
    \ || d1 == 9\n                if d2 == 11 || d2 == 13 || d2 == 15 || d2 == 17\
    \ || d2 == 19 || d2 == 31 || d2 == 33 || d2 == 35 || d2 == 37 || d2 == 39 || d2\
    \ == 51 || d2 == 53 || d2 == 55 || d2 == 57 || d2 == 59 || d2 == 71 || d2 == 73\
    \ || d2 == 75 || d2 == 77 || d2 == 79 || d2 == 91 || d2 == 93 || d2 == 95 || d2\
    \ == 97 || d2 == 99\n                    cnt += 1\n                end\n     \
    \       end\n        end\n    end\n    return cnt\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\
    \t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45,\
    \ 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71,\
    \ -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpd8qxjac0.jl:31\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd8qxjac0.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd8qxjac0.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpd8qxjac0.jl:32\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd8qxjac0.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd8qxjac0.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd8qxjac0.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    f(x) = floor(Int64, log10(x))\n    l(x) = x % 10\n    p(x) = f(x) % 2\
    \ == 1 && l(x) % 2 == 1\n    return count(nums) do x\n        p(x) && x > 10\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t\
    @test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) ==\
    \ 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6tzxb8np.jl:21\n  Test threw exception\n\
    \  Expression: candidate([5, -2, 1, -5]) == 0\n  DomainError with -2.0:\n  log10\
    \ will only return a complex result if called with a complex argument. Try log10(Complex(x)).\n\
    \  Stacktrace:\n    [1] throw_complex_domainerror(f::Symbol, x::Float64)\n   \
    \   @ Base.Math ./math.jl:33\n    [2] _log(x::Float64, base::Val{10}, func::Symbol)\n\
    \      @ Base.Math ./special/log.jl:304\n    [3] log10\n      @ ./special/log.jl:270\
    \ [inlined]\n    [4] log10\n      @ ./math.jl:1221 [inlined]\n    [5] f\n    \
    \  @ /tmp/tmp6tzxb8np.jl:9 [inlined]\n    [6] (::var\"#p#4\"{var\"#l#3\", var\"\
    #f#2\"})(x::Int64)\n      @ Main /tmp/tmp6tzxb8np.jl:11\n    [7] #1\n      @ /tmp/tmp6tzxb8np.jl:13\
    \ [inlined]\n    [8] _simple_count\n      @ ./reduce.jl:1206 [inlined]\n    [9]\
    \ _count\n      @ ./reducedim.jl:407 [inlined]\n   [10] #count#735\n      @ ./reducedim.jl:405\
    \ [inlined]\n   [11] count\n      @ ./reducedim.jl:405 [inlined]\n   [12] specialFilter(nums::Vector{Int64})\n\
    \      @ Main /tmp/tmp6tzxb8np.jl:12\n   [13] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [14] macro expansion\n      @ /tmp/tmp6tzxb8np.jl:21 [inlined]\n\
    \   [15] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [16] top-level scope\n      @ /tmp/tmp6tzxb8np.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp6tzxb8np.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([15, -73, 14, -15]) == 1\n  DomainError with -73.0:\n  log10 will\
    \ only return a complex result if called with a complex argument. Try log10(Complex(x)).\n\
    \  Stacktrace:\n    [1] throw_complex_domainerror(f::Symbol, x::Float64)\n   \
    \   @ Base.Math ./math.jl:33\n    [2] _log(x::Float64, base::Val{10}, func::Symbol)\n\
    \      @ Base.Math ./special/log.jl:304\n    [3] log10\n      @ ./special/log.jl:270\
    \ [inlined]\n    [4] log10\n      @ ./math.jl:1221 [inlined]\n    [5] f\n    \
    \  @ /tmp/tmp6tzxb8np.jl:9 [inlined]\n    [6] (::var\"#p#4\"{var\"#l#3\", var\"\
    #f#2\"})(x::Int64)\n      @ Main /tmp"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6tzxb8np.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    len = length(nums)\n    function isSpecial(num)::Bool\n        numStr\
    \ = string(num)\n        (num > 10) && (num % 2 != 0) && (parse(Int64, numStr[1])\
    \ % 2 != 0) && (parse(Int64, numStr[end]) % 2 != 0)\n    end\n    count = 0\n\
    \    for i in 1:len\n        if isSpecial(nums[i])\n            count += 1\n \
    \       end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\n\
    candidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    cnt = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(i %\
    \ 10)\n            cnt += 1\n        end\n    end\n    return cnt\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpri5yz0n8.jl:24\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpri5yz0n8.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpri5yz0n8.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpri5yz0n8.jl:25\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpri5yz0n8.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpri5yz0n8.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpri5yz0n8.jl:26\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpri5yz0n8.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpri5yz0n8.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpri5yz0n8.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    return sum(x->x>10 && ((x % 10) % 2 != 0) && (x \xF7 10 % 2 != 0), nums)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgfa3niq7.jl:18\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgfa3niq7.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgfa3niq7.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpgfa3niq7.jl:19\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgfa3niq7.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgfa3niq7.jl:15\ntest set: Error\
    \ During Test at /tmp/tmpgfa3niq7.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == 0\n  ArgumentError: reducing over an empty collection\
    \ is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n      @ Base ./reduce.jl:301\n\
    \    [2] mapreduce_empty(f::Function, op::Function, T::Type)\n      @ Base ./reduce.jl:344\n\
    \    [3] reduce_empty(op::Base.MappingRF{var\"#1#2\", typeof(Base.add_sum)}, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:331\n    [4] reduce_empty_iter\n      @ ./reduce.jl:357\
    \ [inlined]\n    [5] mapreduce_empty_iter(f::Function, op::Function, itr::Vector{Int64},\
    \ ItrEltype::Base.HasEltype)\n      @ Base ./reduce.jl:353\n    [6] _mapreduce(f::var\"\
    #1#2\", op::typeof(Base.add_sum), #unused#::IndexLinear, A::Vector{Int64})\n \
    \     @ Base ./reduce.jl:402\n    [7] _mapreduce_dim\n      @ ./reducedim.jl:330\
    \ [inlined]\n    [8] #mapreduce#731\n      @ ./reducedim.jl:322 [inlined]\n  \
    \  [9] mapreduce\n      @ ./reducedim.jl:322 [inlined]\n   [10] #_sum#741\n  \
    \    @ ./reducedim.jl:894 [inlined]\n   [11] _sum\n      @ ./reducedim.jl:894\
    \ [inlined]\n   [12] #sum#739\n      @ ./reducedim."
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgfa3niq7.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i = 1:length(nums)\n        if nums[i] > 10 && !iseven(nums[i]\
    \ % 10) && !iseven(div(nums[i], 10))\n            count += 1\n        end\n  \
    \  end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6xw14yfs.jl:24\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6xw14yfs.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6xw14yfs.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp6xw14yfs.jl:25\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6xw14yfs.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6xw14yfs.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6xw14yfs.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpy43f18xy.jl:16\n  Test threw exception\n\
    \  Expression: candidate([5, -2, 1, -5]) == 0\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmpy43f18xy.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy43f18xy.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy43f18xy.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpy43f18xy.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([15, -73, 14, -15]) == 1\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmpy43f18xy.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy43f18xy.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] to"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy43f18xy.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    # your code goes here\n    nums = [n for n in nums if n > 10]\n    count\
    \ = 0\n    for n in nums\n        if (n%10 != 0) && (n % 2 != 0)\n           \
    \ n = n//10\n            while n > 9\n                n = n//10\n            end\n\
    \            if n % 2 != 0\n                count += 1\n            end\n    \
    \    end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6sk28ql9.jl:32\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6sk28ql9.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6sk28ql9.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp6sk28ql9.jl:33\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6sk28ql9.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6sk28ql9.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp6sk28ql9.jl:34\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp6sk28ql9.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6sk28ql9.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6sk28ql9.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    # your code here\n    count = 0\n    n = length(nums)\n    #println(n)\n\
    \    for i in 1:n\n        if nums[i] > 10\n            first = abs(nums[i])%10\n\
    \            while abs(nums[i]) >= 10\n                nums[i] = nums[i]/10\n\
    \            end\n            last = nums[i]\n            #println(first, last)\n\
    \            if (first == 1 || first == 3 || first == 5 || first == 7 || first\
    \ == 9) && (last == 1 || last == 3 || last == 5 || last == 7 || last == 9)\n \
    \               count += 1\n            end\n        end\n    end\n    return\
    \ count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmprp4forqu.jl:34\n  Test threw exception\n\
    \  Expression: candidate([15, -73, 14, -15]) == 1\n  InexactError: Int64(1.5)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] setindex!\n     @ ./array.jl:903 [inlined]\n\
    \   [4] specialFilter(nums::Vector{Int64})\n     @ Main /tmp/tmprp4forqu.jl:17\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmprp4forqu.jl:34 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmprp4forqu.jl:32\ntest set:\
    \ Error During Test at /tmp/tmprp4forqu.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([33, -2, -3, 45, 21, 109]) == 2\n  InexactError: Int64(3.3)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7\
    \ [inlined]\n   [3] setindex!\n     @ ./array.jl:903 [inlined]\n   [4] specialFilter(nums::Vector{Int64})\n\
    \     @ Main /tmp/tmprp4forqu.jl:17\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmprp4forqu.jl:35 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmprp4forqu.jl:32\ntest set:\
    \ Error During Test at /tmp/tmprp4forqu.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([43, -12, 93, 125, 121, 109]) == 4\n  InexactError: Int64(4.3)\n \
    \ Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] setindex!\n     @ ./array.jl:903 [inlined]\n\
    \   [4] specialFilter(nums::Vector{Int64})\n     @ Main /tmp/tmprp4forqu.jl:17\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmprp4forqu.jl:36 [inlined]\n\
    \   [7] macro expa"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprp4forqu.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    # YOUR CODE HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpd6eh2fg8.jl:16\n  Test threw exception\n\
    \  Expression: candidate([5, -2, 1, -5]) == 0\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmpd6eh2fg8.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpd6eh2fg8.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd6eh2fg8.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpd6eh2fg8.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([15, -73, 14, -15]) == 1\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmpd6eh2fg8.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpd6eh2fg8.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] to"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd6eh2fg8.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    total = 0\n    for i in nums\n        if i>10\n            if mod(abs(i),10)\
    \ in [1,3,5,7,9]\n                total += 1\n            end\n        end\n \
    \   end\n    return total\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpobajg0sg.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpobajg0sg.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpobajg0sg.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpobajg0sg.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpobajg0sg.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpobajg0sg.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpobajg0sg.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpobajg0sg.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpobajg0sg.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpobajg0sg.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if (10 < i) && (odd(i % 10)) &&\
    \ (odd(i))\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpvkcgu3f7.jl:23\n  Test threw exception\n\
    \  Expression: candidate([15, -73, 14, -15]) == 1\n  UndefVarError: odd not defined\n\
    \  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main /tmp/tmpvkcgu3f7.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvkcgu3f7.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvkcgu3f7.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpvkcgu3f7.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([33, -2, -3, 45, 21, 109]) == 2\n  UndefVarError: odd not defined\n\
    \  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main /tmp/tmpvkcgu3f7.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvkcgu3f7.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvkcgu3f7.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpvkcgu3f7.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([43, -12, 93, 125, 121, 109]) == 4\n  UndefVarError: odd not defined\n\
    \  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main /tmp/tmpvkcgu3f7.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvkcgu3f7.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvkcgu3f7.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpvkcgu3f7.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([71, -2, -33, 75, 21, 19]) == 3\n  UndefVarError: odd not defined\n\
    \  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main /tmp/tmpvkcgu3f7.j"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvkcgu3f7.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    cnt = 0\n    for i in nums\n        if i > 10 && (i % 10 == 1 || i % 10\
    \ == 3 || i % 10 == 5 || i % 10 == 7 || i % 10 == 9)\n            if (i < 100\
    \ && i > 9) || (i < 1000 && i > 99) || (i < 10000 && i > 999) || (i < 100000 &&\
    \ i > 9999)\n                last_digit = i % 10\n                if last_digit\
    \ == 1 || last_digit == 3 || last_digit == 5 || last_digit == 7 || last_digit\
    \ == 9\n                    cnt += 1\n                end\n            end\n \
    \       end\n    end\n    return cnt\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpimssqtvw.jl:29\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpimssqtvw.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpimssqtvw.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpimssqtvw.jl:30\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpimssqtvw.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpimssqtvw.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpimssqtvw.jl:31\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpimssqtvw.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpimssqtvw.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpimssqtvw.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    return length(filter(x -> isodd(firstdig(x)) && isodd(lastdig(x)) && x\
    \ > 10, nums))\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9y5j1fit.jl:16\n  Test threw exception\n\
    \  Expression: candidate([5, -2, 1, -5]) == 0\n  UndefVarError: firstdig not defined\n\
    \  Stacktrace:\n   [1] (::var\"#1#2\")(x::Int64)\n     @ Main /tmp/tmp9y5j1fit.jl:9\n\
    \   [2] filter(f::var\"#1#2\", a::Vector{Int64})\n     @ Base ./array.jl:2484\n\
    \   [3] specialFilter(nums::Vector{Int64})\n     @ Main /tmp/tmp9y5j1fit.jl:9\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp9y5j1fit.jl:16 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp9y5j1fit.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp9y5j1fit.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([15, -73, 14, -15]) == 1\n  UndefVarError: firstdig not defined\n\
    \  Stacktrace:\n   [1] (::var\"#1#2\")(x::Int64)\n     @ Main /tmp/tmp9y5j1fit.jl:9\n\
    \   [2] filter(f::var\"#1#2\", a::Vector{Int64})\n     @ Base ./array.jl:2484\n\
    \   [3] specialFilter(nums::Vector{Int64})\n     @ Main /tmp/tmp9y5j1fit.jl:9\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp9y5j1fit.jl:17 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp9y5j1fit.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp9y5j1fit.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([33, -2, -3, 45, 21, 109]) == 2\n  UndefVarError: firstdig not defined\n\
    \  Stacktrace:\n   [1] (::var\"#1#2\")(x::Int64)\n     @ Main /tmp/tmp9y5j1fit.jl:9\n\
    \   [2] filter(f::var\"#1#2\", a::Vector{Int64})\n     @ Base ./array.jl:2484\n\
    \   [3] specialFilter(nums::Vector{Int64})\n     @ Main /tmp/tmp9y5j1fit.jl:9\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp9y5j1fit.jl:18 [inlined]\n\
    \   ["
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9y5j1fit.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for num in nums\n        if num > 10 && abs(floor(num/10))%2\
    \ != 0 && abs(mod(num,10))%2 != 0\n            count += 1\n        end\n    end\n\
    \    return count\nend\nspecialFilter([15, -73, 14, -15])\nspecialFilter([33,\
    \ -2, -3, 45, 21, 109])\nspecialFilter([45, -22, 5, 71, -1, -3])\nusing Test\n\
    \n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5])\
    \ == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2,\
    \ -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) ==\
    \ 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyz0iilqo.jl:27\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyz0iilqo.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyz0iilqo.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpyz0iilqo.jl:28\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyz0iilqo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyz0iilqo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyz0iilqo.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    tot = 0\n    for n in nums\n        if n > 10\n            val = num2str(n)\n\
    \            if (int(val[1]) % 2 == 1) && (int(val[end]) % 2 == 1)\n         \
    \       tot += 1\n            end\n        end\n    end\n    return tot\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9_hs5jrt.jl:26\n  Test threw exception\n\
    \  Expression: candidate([15, -73, 14, -15]) == 1\n  UndefVarError: num2str not\
    \ defined\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmp9_hs5jrt.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9_hs5jrt.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9_hs5jrt.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp9_hs5jrt.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([33, -2, -3, 45, 21, 109]) == 2\n  UndefVarError: num2str not defined\n\
    \  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main /tmp/tmp9_hs5jrt.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9_hs5jrt.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9_hs5jrt.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp9_hs5jrt.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([43, -12, 93, 125, 121, 109]) == 4\n  UndefVarError: num2str not defined\n\
    \  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main /tmp/tmp9_hs5jrt.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9_hs5jrt.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9_hs5jrt.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp9_hs5jrt.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([71, -2, -33, 75, 21, 19]) == 3\n  UndefVarError: num2str not defined\n\
    \  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main /t"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9_hs5jrt.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n   \n    greater10 = 0\n    for i in nums\n        if i > 10\n           \
    \ greater10 += 1\n        end\n    end\nusing Test\n\n@testset begin\n\ncandidate\
    \ = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgk8cwbfs.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgk8cwbfs.jl:1\n\
    in expression starting at /tmp/tmpgk8cwbfs.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for num in nums\n        flag1 = num > 10\n        flag2\
    \ = isodd(num % 10)\n        flag3 = isodd(num % 10^(floor(log10(num)) + 1))\n\
    \        if flag1 && flag2 && flag3\n            count += 1\n        end\n   \
    \ end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzhaj4bzd.jl:25\n  Test threw exception\n\
    \  Expression: candidate([5, -2, 1, -5]) == 0\n  DomainError with -2.0:\n  log10\
    \ will only return a complex result if called with a complex argument. Try log10(Complex(x)).\n\
    \  Stacktrace:\n   [1] throw_complex_domainerror(f::Symbol, x::Float64)\n    \
    \ @ Base.Math ./math.jl:33\n   [2] _log(x::Float64, base::Val{10}, func::Symbol)\n\
    \     @ Base.Math ./special/log.jl:304\n   [3] log10\n     @ ./special/log.jl:270\
    \ [inlined]\n   [4] log10\n     @ ./math.jl:1221 [inlined]\n   [5] specialFilter(nums::Vector{Int64})\n\
    \     @ Main /tmp/tmpzhaj4bzd.jl:13\n   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpzhaj4bzd.jl:25 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpzhaj4bzd.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpzhaj4bzd.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([15, -73, 14, -15]) == 1\n  DomainError with -73.0:\n  log10 will\
    \ only return a complex result if called with a complex argument. Try log10(Complex(x)).\n\
    \  Stacktrace:\n   [1] throw_complex_domainerror(f::Symbol, x::Float64)\n    \
    \ @ Base.Math ./math.jl:33\n   [2] _log(x::Float64, base::Val{10}, func::Symbol)\n\
    \     @ Base.Math ./special/log.jl:304\n   [3] log10\n     @ ./special/log.jl:270\
    \ [inlined]\n   [4] log10\n     @ ./math.jl:1221 [inlined]\n   [5] specialFilter(nums::Vector{Int64})\n\
    \     @ Main /tmp/tmpzhaj4bzd.jl:13\n   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpzhaj4bzd.jl:26 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpzhaj4bzd.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpzhaj4bzd.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([33, -2, -3, 45, 21, 109]) == 2\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzhaj4bzd.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    cnt = 0\n    for i in nums\n        if i > 10 && mod(i,2) != 0 && mod(i,10)\
    \ % 2 != 0\n            cnt += 1\n        end\n    end\n    return cnt\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_s5ake7a.jl:24\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_s5ake7a.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_s5ake7a.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_s5ake7a.jl:25\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_s5ake7a.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_s5ake7a.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_s5ake7a.jl:26\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_s5ake7a.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_s5ake7a.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_s5ake7a.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    n = 0\n    for i in nums\n        if i > 10 && (i % 10 + i % 10) % 2 !=\
    \ 0\n            n += 1\n        end\n    end\n    return n\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5])\
    \ == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2,\
    \ -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) ==\
    \ 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6wla0myq.jl:23\n  Expression: candidate([15,\
    \ -73, 14, -15]) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6wla0myq.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6wla0myq.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp6wla0myq.jl:24\n  Expression: candidate([33, -2, -3, 45, 21,\
    \ 109]) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6wla0myq.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6wla0myq.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp6wla0myq.jl:25\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6wla0myq.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6wla0myq.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp6wla0myq.jl:26\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 0 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp6wla0myq.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6wla0myq.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6wla0myq.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for num in nums\n        if num > 10\n            firstDigit\
    \ = num % 10\n            lastDigit = num // 10^(floor(log10(num)))\n        \
    \    if lastDigit % 2 != 0 && firstDigit % 2 != 0\n                count += 1\n\
    \            end\n        end\n    end\n    return count\nend\nprintln(specialFilter([15,\
    \ -73, 14, -15]))\nprintln(specialFilter([33, -2, -3, 45, 21, 109]))\nusing Test\n\
    \n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5])\
    \ == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2,\
    \ -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) ==\
    \ 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: None
  stderr: "b'ERROR: LoadError: MethodError: no method matching //(::Int64, ::Float64)\\\
    nClosest candidates are:\\n  //(::Integer, !Matched::Integer) at /shared/centos7/julia/1.7.3/share/julia/base/rational.jl:62\\\
    n  //(::Integer, !Matched::Rational) at /shared/centos7/julia/1.7.3/share/julia/base/rational.jl:68\\\
    n  //(!Matched::Complex, ::Real) at /shared/centos7/julia/1.7.3/share/julia/base/rational.jl:78\\\
    n  ...\\nStacktrace:\\n [1] specialFilter('"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    \nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t\
    @test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) ==\
    \ 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpcs_grwo4.jl:16\n  Test threw exception\n\
    \  Expression: candidate([5, -2, 1, -5]) == 0\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmpcs_grwo4.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcs_grwo4.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcs_grwo4.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpcs_grwo4.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([15, -73, 14, -15]) == 1\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmpcs_grwo4.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcs_grwo4.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] to"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcs_grwo4.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n  n = 0 \n  for num in nums \n    if num > 10 && isodd(num % 10) && isodd(num\
    \ % div(num, 10))\n      n += 1 \n    end \n  end \n  return n \nend \nusing Test\n\
    \n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5])\
    \ == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2,\
    \ -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) ==\
    \ 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpk8qyvrn4.jl:23\n  Expression: candidate([15,\
    \ -73, 14, -15]) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk8qyvrn4.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk8qyvrn4.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpk8qyvrn4.jl:24\n  Expression: candidate([33, -2, -3, 45, 21,\
    \ 109]) == 2\n   Evaluated: 3 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk8qyvrn4.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk8qyvrn4.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpk8qyvrn4.jl:25\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk8qyvrn4.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk8qyvrn4.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk8qyvrn4.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i = 1:length(nums)\n        if (nums[i] > 10) && (nums[i]\
    \ % 2 != 0)\n            nums_copy = nums[i]\n            while (nums_copy > 0)\n\
    \                nums_copy = nums_copy / 10\n                if nums_copy % 2\
    \ == 0\n                    break\n                end\n            end\n    \
    \        if nums_copy == 0\n                count += 1\n            end\n    \
    \    end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz7db77zp.jl:33\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz7db77zp.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz7db77zp.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpz7db77zp.jl:34\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz7db77zp.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz7db77zp.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpz7db77zp.jl:35\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpz7db77zp.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz7db77zp.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz7db77zp.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    # Write your code here\n    return 0\nend\n \nusing Test\n\n@testset begin\n\
    \ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpngsg0u62.jl:19\n  Expression: candidate([15,\
    \ -73, 14, -15]) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpngsg0u62.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpngsg0u62.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpngsg0u62.jl:20\n  Expression: candidate([33, -2, -3, 45, 21,\
    \ 109]) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpngsg0u62.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpngsg0u62.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpngsg0u62.jl:21\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpngsg0u62.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpngsg0u62.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpngsg0u62.jl:22\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 0 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpngsg0u62.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpngsg0u62.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpngsg0u62.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(first(i)) &&\
    \ isodd(last(i))\n            count += 1\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvd1ikd0d.jl:24\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvd1ikd0d.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvd1ikd0d.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvd1ikd0d.jl:25\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvd1ikd0d.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvd1ikd0d.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvd1ikd0d.jl:26\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpvd1ikd0d.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvd1ikd0d.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvd1ikd0d.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    \"\"\"\n    \"\"\"\n    counter = 0\n    for i in nums\n        # first\
    \ digit\n        if i >= 0 \n            firstDigit = first_digit(i)\n       \
    \ else\n            firstDigit = first_digit(-i)\n        end\n        # last\
    \ digit\n        lastDigit = last_digit(i)\n        # check if there are more\
    \ then 10 elements in the array\n        if i > 10\n            # and if both\
    \ first and last digits are odd\n            if firstDigit % 2 != 0 && lastDigit\
    \ % 2 != 0\n                counter += 1\n            end\n        end\n    end\n\
    \    return counter\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpe4gkka37.jl:36\n  Test threw exception\n\
    \  Expression: candidate([5, -2, 1, -5]) == 0\n  UndefVarError: first_digit not\
    \ defined\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmpe4gkka37.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpe4gkka37.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe4gkka37.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpe4gkka37.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([15, -73, 14, -15]) == 1\n  UndefVarError: first_digit not defined\n\
    \  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main /tmp/tmpe4gkka37.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpe4gkka37.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe4gkka37.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpe4gkka37.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([33, -2, -3, 45, 21, 109]) == 2\n  UndefVarError: first_digit not\
    \ defined\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmpe4gkka37.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpe4gkka37.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe4gkka37.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpe4gkka37.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([43, -12, 93, 125, 121, 109]) == 4\n  UndefVarError: first_digit not\
    \ defined\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Ma"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe4gkka37.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    total = 0\n    for i in nums\n        if i > 10\n            if (Int(string(i)[1])\
    \ % 2 == 1) && (Int(string(i)[end]) % 2 == 1)\n                total += 1\n  \
    \          end\n        end\n    end\n    return total\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\
    \t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45,\
    \ 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71,\
    \ -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    result = 0\n    for num in nums\n        if num > 10 && !(num % 2 == 0)\
    \ && is_odd(num) && is_odd(num % 10)\n            result += 1\n        end\n \
    \   end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2uecn2ps.jl:23\n  Test threw exception\n\
    \  Expression: candidate([15, -73, 14, -15]) == 1\n  UndefVarError: is_odd not\
    \ defined\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmp2uecn2ps.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2uecn2ps.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2uecn2ps.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp2uecn2ps.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([33, -2, -3, 45, 21, 109]) == 2\n  UndefVarError: is_odd not defined\n\
    \  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main /tmp/tmp2uecn2ps.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2uecn2ps.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2uecn2ps.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp2uecn2ps.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([43, -12, 93, 125, 121, 109]) == 4\n  UndefVarError: is_odd not defined\n\
    \  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main /tmp/tmp2uecn2ps.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2uecn2ps.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2uecn2ps.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp2uecn2ps.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([71, -2, -33, 75, 21, 19]) == 3\n  UndefVarError: is_odd not defined\n\
    \  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main /tmp/t"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2uecn2ps.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    # add your code here\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpq_ovlg61.jl:16\n  Test threw exception\n\
    \  Expression: candidate([5, -2, 1, -5]) == 0\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmpq_ovlg61.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq_ovlg61.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq_ovlg61.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpq_ovlg61.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([15, -73, 14, -15]) == 1\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmpq_ovlg61.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq_ovlg61.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] to"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq_ovlg61.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    \n    len = length(nums)\n    ctr = 0\n    \n    for i in 1:len\n    \
    \    num = nums[i]\n        if num > 10\n            string(num)\n           \
    \ if (num[1] % 2 != 0) & (num[end] % 2 != 0)\n                ctr += 1\n     \
    \       end\n        end\n    end\n    \n    return ctr\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\
    \t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45,\
    \ 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71,\
    \ -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4fqfa4vz.jl:32\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4fqfa4vz.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4fqfa4vz.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp4fqfa4vz.jl:33\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4fqfa4vz.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4fqfa4vz.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp4fqfa4vz.jl:34\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp4fqfa4vz.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4fqfa4vz.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4fqfa4vz.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n \n    return sum(map(n -> (n > 10) && (firstdig(n) % 2 != 0) && (lastdig(n)\
    \ % 2 != 0), nums))\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgt6vxcuv.jl:18\n  Test threw exception\n\
    \  Expression: candidate([15, -73, 14, -15]) == 1\n  UndefVarError: firstdig not\
    \ defined\n  Stacktrace:\n    [1] (::var\"#1#2\")(n::Int64)\n      @ Main /tmp/tmpgt6vxcuv.jl:10\n\
    \    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _collect(c::Vector{Int64},\
    \ itr::Base.Generator{Vector{Int64}, var\"#1#2\"}, #unused#::Base.EltypeUnknown,\
    \ isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n    [4] collect_similar\n\
    \      @ ./array.jl:653 [inlined]\n    [5] map\n      @ ./abstractarray.jl:2867\
    \ [inlined]\n    [6] specialFilter(nums::Vector{Int64})\n      @ Main /tmp/tmpgt6vxcuv.jl:10\n\
    \    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpgt6vxcuv.jl:18 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpgt6vxcuv.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpgt6vxcuv.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([33, -2, -3, 45, 21, 109]) == 2\n  UndefVarError: firstdig not defined\n\
    \  Stacktrace:\n    [1] (::var\"#1#2\")(n::Int64)\n      @ Main /tmp/tmpgt6vxcuv.jl:10\n\
    \    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _collect(c::Vector{Int64},\
    \ itr::Base.Generator{Vector{Int64}, var\"#1#2\"}, #unused#::Base.EltypeUnknown,\
    \ isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n    [4] collect_similar\n\
    \      @ ./array.jl:653 [inlined]\n    [5] map\n      @ ./abstractarray.jl:2867\
    \ [inlined]\n    [6] specialFilter(nums::Vector{Int64})\n      @ Main /tmp/tmpgt6vxcuv.jl:10\n\
    \    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpgt6vxcuv.jl:19 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpgt6vxcuv.jl:16\ntest set:\
    \ Error During Test at /tmp/t"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgt6vxcuv.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for num in nums\n        if num > 10 && (num % 10 == 1\
    \ || num % 10 == 3 || num % 10 == 5 || num % 10 == 7 || num % 10 == 9) && (num\
    \ % 10 == div(num, 10))\n            count += 1\n        end\n    end\n    return\
    \ count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0n1lltwm.jl:23\n  Expression: candidate([15,\
    \ -73, 14, -15]) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0n1lltwm.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0n1lltwm.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp0n1lltwm.jl:24\n  Expression: candidate([33, -2, -3, 45, 21,\
    \ 109]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0n1lltwm.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0n1lltwm.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp0n1lltwm.jl:25\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0n1lltwm.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0n1lltwm.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp0n1lltwm.jl:26\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 0 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp0n1lltwm.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0n1lltwm.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0n1lltwm.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    # Your code here\nend\n \nusing Test\n\n@testset begin\n\ncandidate =\
    \ specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmplktgdz9y.jl:17\n  Test threw exception\n\
    \  Expression: candidate([5, -2, 1, -5]) == 0\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmplktgdz9y.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplktgdz9y.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplktgdz9y.jl:16\ntest set:\
    \ Error During Test at /tmp/tmplktgdz9y.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([15, -73, 14, -15]) == 1\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmplktgdz9y.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplktgdz9y.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] to"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplktgdz9y.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for n in nums\n        if n > 10 && isodd(firstdig(n))\
    \ && isodd(lastdig(n))\n            count += 1\n        end\n    end\n    return\
    \ count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp0nkr9yxm.jl:23\n  Test threw exception\n\
    \  Expression: candidate([15, -73, 14, -15]) == 1\n  UndefVarError: firstdig not\
    \ defined\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmp0nkr9yxm.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0nkr9yxm.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0nkr9yxm.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp0nkr9yxm.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([33, -2, -3, 45, 21, 109]) == 2\n  UndefVarError: firstdig not defined\n\
    \  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main /tmp/tmp0nkr9yxm.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0nkr9yxm.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0nkr9yxm.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp0nkr9yxm.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([43, -12, 93, 125, 121, 109]) == 4\n  UndefVarError: firstdig not\
    \ defined\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmp0nkr9yxm.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0nkr9yxm.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0nkr9yxm.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp0nkr9yxm.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([71, -2, -33, 75, 21, 19]) == 3\n  UndefVarError: firstdig not defined\n\
    \  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Mai"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0nkr9yxm.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if (((last(digits(i)) % 2 != 0)\
    \ && ((first(digits(i)) % 2 != 0))) && (i > 10))\n            count += 1\n   \
    \     end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0 \n    for i in nums \n        if abs(i) > 10 && isodd(abs(i)\
    \ % 10) && isodd(abs(i) / 10^(floor(log10(abs(i)))))\n            count += 1 \n\
    \        end \n    end \n    return count \nend \n \n \n\"\"\"Write a function\
    \ that takes an array of strings as input and returns the \n    string that is\
    \ the most commonly used word in the array. You can assume \n    that all input\
    \ strings are lowercased.\n    For example:\n    most_common_word([\"i\", \"love\"\
    , \"you\", \"i\", \"love\", \"you\", \"you\", \"me\"]) \n    => \"you\"\n    most_common_word([\"\
    a\", \"b\", \"c\", \"a\", \"a\", \"b\", \"d\"]) => \"a\"\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5])\
    \ == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2,\
    \ -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) ==\
    \ 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp8rutkbui.jl:19\nin expression starting at /tmp/tmp8rutkbui.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count::Int64 = 0\n    for num in nums\n        if (num > 10) & isodd(num)\
    \ & isodd(first(div(num, 10))) & isodd(last(div(num, 10)))\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\
    \t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45,\
    \ 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71,\
    \ -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphnpvi366.jl:24\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphnpvi366.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphnpvi366.jl:21\ntest set: Test\
    \ Failed at /tmp/tmphnpvi366.jl:25\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphnpvi366.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphnpvi366.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphnpvi366.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    nums = Vector{Int64}()\n    for i in nums\n        if i > 10 && first(i)%2\
    \ != 0 && last(i)%2 != 0\n            push!(nums, i)\n        end\n    end\n \
    \   return length(nums)\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps5irpxxl.jl:23\n  Expression: candidate([15,\
    \ -73, 14, -15]) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps5irpxxl.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps5irpxxl.jl:21\ntest set: Test\
    \ Failed at /tmp/tmps5irpxxl.jl:24\n  Expression: candidate([33, -2, -3, 45, 21,\
    \ 109]) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps5irpxxl.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps5irpxxl.jl:21\ntest set: Test\
    \ Failed at /tmp/tmps5irpxxl.jl:25\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps5irpxxl.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps5irpxxl.jl:21\ntest set: Test\
    \ Failed at /tmp/tmps5irpxxl.jl:26\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 0 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmps5irpxxl.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps5irpxxl.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps5irpxxl.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for num in nums\n        if num > 10 && (rem(num, 10) !=\
    \ 0) && (num[1] % 2 != 0)\n            count += 1\n        end\n    end\n    return\
    \ count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwvv9qyl9.jl:24\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwvv9qyl9.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwvv9qyl9.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpwvv9qyl9.jl:25\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwvv9qyl9.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwvv9qyl9.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpwvv9qyl9.jl:26\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwvv9qyl9.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwvv9qyl9.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwvv9qyl9.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    # YOUR CODE HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpnacmm_l_.jl:16\n  Test threw exception\n\
    \  Expression: candidate([5, -2, 1, -5]) == 0\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmpnacmm_l_.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnacmm_l_.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnacmm_l_.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpnacmm_l_.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([15, -73, 14, -15]) == 1\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmpnacmm_l_.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnacmm_l_.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] to"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnacmm_l_.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    size(filter(n -> n > 10 && (n % 10 == 1 || n % 10 == 3 || n % 10 == 5\
    \ || n % 10 == 7 || n % 10 == 9), nums), 1)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpk4z6lep_.jl:18\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk4z6lep_.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk4z6lep_.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpk4z6lep_.jl:19\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk4z6lep_.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk4z6lep_.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpk4z6lep_.jl:20\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpk4z6lep_.jl:20 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk4z6lep_.jl:15\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk4z6lep_.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    return length(filter(x -> (x>10) && (first(digits(x))%2 != 0) && (last(digits(x))%2\
    \ != 0), nums))\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    return length(filter(n -> (n > 10) && (n % 2 == 1) && ((n % 10 == 1) ||\
    \ (n % 10 == 3) || (n % 10 == 5) || (n % 10 == 7) || (n % 10 == 9)), nums))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxjd9a_p2.jl:18\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxjd9a_p2.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxjd9a_p2.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpxjd9a_p2.jl:19\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxjd9a_p2.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxjd9a_p2.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpxjd9a_p2.jl:20\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpxjd9a_p2.jl:20 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxjd9a_p2.jl:15\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxjd9a_p2.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    i=0\n    n=length(nums)\n    while n > 0\n        if nums[n]>10\n    \
    \        x=Int(string(abs(nums[n]))[1])\n            y=Int(string(abs(nums[n]))[end])\n\
    \            if x % 2 != 0 && y % 2 != 0\n                i += 1\n           \
    \ end\n        end\n        n -= 1\n    end\n    return i\nend\n \nspecialFilter([15,\
    \ -73, 14, -15])\nspecialFilter([33, -2, -3, 45, 21, 109])\nusing Test\n\n@testset\
    \ begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\
    \t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45,\
    \ 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71,\
    \ -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    length(filter(n->length(nums)>10 && n%2==1 && n%10==1, nums))\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbr2gcfzq.jl:17\n  Expression: candidate([15,\
    \ -73, 14, -15]) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbr2gcfzq.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbr2gcfzq.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpbr2gcfzq.jl:18\n  Expression: candidate([33, -2, -3, 45, 21,\
    \ 109]) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbr2gcfzq.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbr2gcfzq.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpbr2gcfzq.jl:19\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbr2gcfzq.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbr2gcfzq.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpbr2gcfzq.jl:20\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 0 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpbr2gcfzq.jl:20 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbr2gcfzq.jl:15\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbr2gcfzq.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    # YOUR CODE HERE\nend\n \n@testset \"Test for specialFilter\" begin\n\
    \    @test specialFilter([15, -73, 14, -15]) == 1\n    @test specialFilter([33,\
    \ -2, -3, 45, 21, 109]) == 2\n    @test specialFilter([]) == 0\n    @test specialFilter([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1,\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoe4rdqs8.jl:19\nin expression starting at\
    \ /tmp/tmpoe4rdqs8.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    greater10(num::Int64) = num > 10 \n    bothOdd(num::Int64) = (num % 10\
    \ == 1 || num % 10 == 3 || num % 10 == 5 || num % 10 == 7 || num % 10 == 9) &&\
    \ (num % div(num, 10) == 1 || num % div(num, 10) == 3 || num % div(num, 10) ==\
    \ 5 || num % div(num, 10) == 7 || num % div(num, 10) == 9)\n    num_elements =\
    \ 0\n    for num in nums\n        if greater10(num) && bothOdd(num)\n        \
    \    num_elements += 1\n        end\n    end\n    return num_elements\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfaz9vlwh.jl:25\n  Expression: candidate([15,\
    \ -73, 14, -15]) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfaz9vlwh.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfaz9vlwh.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpfaz9vlwh.jl:26\n  Expression: candidate([33, -2, -3, 45, 21,\
    \ 109]) == 2\n   Evaluated: 3 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfaz9vlwh.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfaz9vlwh.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpfaz9vlwh.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfaz9vlwh.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfaz9vlwh.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfaz9vlwh.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    ## Enter your function here\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2n78vevz.jl:16\n  Test threw exception\n\
    \  Expression: candidate([5, -2, 1, -5]) == 0\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmp2n78vevz.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2n78vevz.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2n78vevz.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp2n78vevz.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([15, -73, 14, -15]) == 1\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmp2n78vevz.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2n78vevz.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] to"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2n78vevz.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    c = 0\n    for i in nums\n        if i > 10 && isodd(first(digits(i)))\
    \ && isodd(last(digits(i)))\n            c += 1\n        end\n    end\n    return\
    \ c\nend\nspecialFilter([15, -73, 14, -15])\nspecialFilter([33, -2, -3, 45, 21,\
    \ 109])\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for n in nums\n        r = abs(n)\n        if r > 10 &&\
    \ (r % 10 % 2 != 0) && (r < 10 || (r >= 10 && (r / 10) % 2 != 0))\n          \
    \  count += 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\
    \t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45,\
    \ 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71,\
    \ -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_g5b7hmi.jl:24\n  Expression: candidate([15,\
    \ -73, 14, -15]) == 1\n   Evaluated: 3 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_g5b7hmi.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_g5b7hmi.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp_g5b7hmi.jl:25\n  Expression: candidate([33, -2, -3, 45, 21,\
    \ 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_g5b7hmi.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_g5b7hmi.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp_g5b7hmi.jl:26\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_g5b7hmi.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_g5b7hmi.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp_g5b7hmi.jl:27\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 5 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_g5b7hmi.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_g5b7hmi.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_g5b7hmi.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    # Your code goes here \n    return 0 \nend\nassert(specialFilter([15,\
    \ -73, 14, -15]) == 1)\nassert(specialFilter([33, -2, -3, 45, 21, 109]) == 2)\n\
    println(\"Passed all tests!\")\n \n```\nusing Test\n\n@testset begin\n\ncandidate\
    \ = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: assert not defined\nStacktrace:\n [1]\
    \ top-level scope\n   @ /tmp/tmpm8bkqjg2.jl:12\nin expression starting at /tmp/tmpm8bkqjg2.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i % 10) && isodd(i\
    \ \xF7 10^(floor(log10(i))))\n            count += 1\n        end\n    end\n \
    \   return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if (10 < i) && (i % 2 != 0) && (i\
    \ % 10 != 0)\n            count += 1\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx3p7oxse.jl:24\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx3p7oxse.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx3p7oxse.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpx3p7oxse.jl:25\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx3p7oxse.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx3p7oxse.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpx3p7oxse.jl:26\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpx3p7oxse.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx3p7oxse.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx3p7oxse.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    total = 0\n    for num in nums\n        if num > 10 && mod(num,2) == 1\
    \ && mod(num,10) == 1\n            total += 1\n        end\n    end\n    return\
    \ total\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz7ryqun8.jl:23\n  Expression: candidate([15,\
    \ -73, 14, -15]) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz7ryqun8.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz7ryqun8.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpz7ryqun8.jl:24\n  Expression: candidate([33, -2, -3, 45, 21,\
    \ 109]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz7ryqun8.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz7ryqun8.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpz7ryqun8.jl:25\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz7ryqun8.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz7ryqun8.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpz7ryqun8.jl:26\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 2 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpz7ryqun8.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz7ryqun8.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz7ryqun8.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    # Your code goes here\n    count = 0\n    for n in nums\n        first_digit\
    \ = n % 10\n        while n >= 10\n            n = n % 10\n        end\n     \
    \   if n >= 10 && n % 2 != 0 && first_digit % 2 != 0\n            count += 1\n\
    \        end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\n\
    candidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppywldt1j.jl:28\n  Expression: candidate([15,\
    \ -73, 14, -15]) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppywldt1j.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppywldt1j.jl:26\ntest set: Test\
    \ Failed at /tmp/tmppywldt1j.jl:29\n  Expression: candidate([33, -2, -3, 45, 21,\
    \ 109]) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppywldt1j.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppywldt1j.jl:26\ntest set: Test\
    \ Failed at /tmp/tmppywldt1j.jl:30\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppywldt1j.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppywldt1j.jl:26\ntest set: Test\
    \ Failed at /tmp/tmppywldt1j.jl:31\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 0 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmppywldt1j.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppywldt1j.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppywldt1j.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for n in nums\n        if n > 10 && (n % 10) % 2 != 0 &&\
    \ (n % 10^floor(log10(n))) % 2 != 0\n            count += 1\n        end\n   \
    \ end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi4t7upll.jl:24\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi4t7upll.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi4t7upll.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpi4t7upll.jl:25\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi4t7upll.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi4t7upll.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpi4t7upll.jl:26\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpi4t7upll.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi4t7upll.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi4t7upll.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(first(i)) &&\
    \ isodd(last(i))\n            count += 1\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3cga6mr4.jl:24\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3cga6mr4.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3cga6mr4.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp3cga6mr4.jl:25\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3cga6mr4.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3cga6mr4.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp3cga6mr4.jl:26\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp3cga6mr4.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3cga6mr4.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3cga6mr4.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && i % 2 != 0 && i % 10\
    \ != 0\n            count += 1\n        end\n    end\n    return count\nend\n\
    @assert specialFilter([15, -73, 14, -15]) == 1\n@assert specialFilter([33, -2,\
    \ -3, 45, 21, 109]) == 2\n@assert specialFilter([1, 10, 20, 30, 40, 50, 60, 70,\
    \ 80, 90, 100]) == 0\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: AssertionError: specialFilter([33, -2, -3, 45, 21, 109])\
    \ == 2\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpozup1v30.jl:18\nin expression\
    \ starting at /tmp/tmpozup1v30.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    n = 0\n    for i in nums\n        if (i > 10) && (last(digits(i)) in [1,\
    \ 3, 5, 7, 9]) && (first(digits(i)) in [1, 3, 5, 7, 9])\n            n += 1\n\
    \        end\n    end\n    return n\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    # for other possible solutions, see \n    # https://github.com/JuliaComputing/JuliaAcademyData/blob/master/EssentialJulia/DataManipulation/case_studies/exercises/Exercise10.md#solution-1\n\
    \    special_nums = filter(x -> (isodd(x) && isodd(first(digits(x))) && isodd(last(digits(x)))),\
    \ nums)\n    return length(special_nums)\nend\n@assert specialFilter([15, -73,\
    \ 14, -15]) == 1\n@assert specialFilter([33, -2, -3, 45, 21, 109]) == 2\nusing\
    \ Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: AssertionError: specialFilter([15, -73, 14, -15]) ==\
    \ 1\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp54bhrlkt.jl:14\nin expression\
    \ starting at /tmp/tmp54bhrlkt.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i >= 10 && i % 2 != 0 && i %\
    \ 10 != 0\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp36lw3jgs.jl:24\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp36lw3jgs.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp36lw3jgs.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp36lw3jgs.jl:25\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp36lw3jgs.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp36lw3jgs.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp36lw3jgs.jl:26\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp36lw3jgs.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp36lw3jgs.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp36lw3jgs.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    return sum(filter(x -> x > 10 && (x % 10 == 1 || x % 10 == 3 || x % 10\
    \ == 5 || x % 10 == 7 || x % 10 == 9) && (x < 10 || x / 10 % 10 == 1 || x / 10\
    \ % 10 == 3 || x / 10 % 10 == 5 || x / 10 % 10 == 7 || x / 10 % 10 == 9), nums))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi6yc1bbr.jl:17\n  Expression: candidate([15,\
    \ -73, 14, -15]) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi6yc1bbr.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi6yc1bbr.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpi6yc1bbr.jl:18\n  Expression: candidate([33, -2, -3, 45, 21,\
    \ 109]) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi6yc1bbr.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi6yc1bbr.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpi6yc1bbr.jl:19\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi6yc1bbr.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi6yc1bbr.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpi6yc1bbr.jl:20\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 0 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpi6yc1bbr.jl:20 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi6yc1bbr.jl:15\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi6yc1bbr.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n  # Your code here\nend\n \n@test specialFilter([15, -73, 14, -15]) == 1\n\
    @test specialFilter([33, -2, -3, 45, 21, 109]) == 2\n@test specialFilter([15,\
    \ -73, 14, -15, 33, -2, -3, 45, 21, 109]) == 3\n@test specialFilter([15, -73,\
    \ 14, -15, 33, -2, -3, -1, 21, 109]) == 2\n@test specialFilter([15, -73, 14, -15,\
    \ 33, -2, -3, -1, 21, 0]) == 1\n@test specialFilter([15, -73, 14, -15, 33, -2,\
    \ -3, -1, 21, -99]) == 1\n \nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @test not defined\nin expression starting\
    \ at /tmp/tmp90e8i0ys.jl:12\nin expression starting at /tmp/tmp90e8i0ys.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    newArr = []\n    for i in nums\n        if ((abs(i) % 10 == 1) || (abs(i)\
    \ % 10 == 3) || (abs(i) % 10 == 5) || (abs(i) % 10 == 7) || (abs(i) % 10 == 9))\
    \ && (abs(i) > 10)\n            push!(newArr, i)\n        end\n    end\n    return\
    \ length(newArr)\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_rcdgslc.jl:23\n  Expression: candidate([15,\
    \ -73, 14, -15]) == 1\n   Evaluated: 3 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_rcdgslc.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_rcdgslc.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_rcdgslc.jl:24\n  Expression: candidate([33, -2, -3, 45, 21,\
    \ 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_rcdgslc.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_rcdgslc.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_rcdgslc.jl:25\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_rcdgslc.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_rcdgslc.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_rcdgslc.jl:26\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 5 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_rcdgslc.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_rcdgslc.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_rcdgslc.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for x in nums\n        if x > 10 && x % 2 != 0 && floor(log10(abs(x)))\
    \ % 2 != 0\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjmj5zd_n.jl:24\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 3 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjmj5zd_n.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjmj5zd_n.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpjmj5zd_n.jl:25\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjmj5zd_n.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjmj5zd_n.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpjmj5zd_n.jl:26\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpjmj5zd_n.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjmj5zd_n.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjmj5zd_n.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for n in nums\n        if (n > 10) && (n % 2 != 0) && ((n\
    \ % 10) % 2 != 0) && ((n / 10) % 2 != 0)\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphf4j8kuf.jl:24\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphf4j8kuf.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphf4j8kuf.jl:21\ntest set: Test\
    \ Failed at /tmp/tmphf4j8kuf.jl:25\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphf4j8kuf.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphf4j8kuf.jl:21\ntest set: Test\
    \ Failed at /tmp/tmphf4j8kuf.jl:26\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmphf4j8kuf.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphf4j8kuf.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphf4j8kuf.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    #print(length(nums))\n    for i in nums\n        if (i>10)\
    \ & (i%2!=0) & (i%10!=0) & (i//10%2!=0)\n            count += 1\n        end\n\
    \    end\n    return count\nend\n    \nusing Test\n\n@testset begin\n\ncandidate\
    \ = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7ub78dzk.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7ub78dzk.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7ub78dzk.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp7ub78dzk.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7ub78dzk.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7ub78dzk.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp7ub78dzk.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7ub78dzk.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7ub78dzk.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7ub78dzk.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    # isodd(x) returns true for odd x, false for even x\n    # isodd(x::Int64)\n\
    \    # digit(x, n) returns the nth digit of x, where the first digit is at n =\
    \ 1\n    # digit(x::Int64, n::Int64)\n    # @show nums, isodd(nums), isodd(first(nums)),\
    \ isodd(last(nums))\n    count = 0\n    for num in nums\n        if (num > 10)\
    \ && (isodd(num)) && (isodd(first(num))) && (isodd(last(num)))\n            count\
    \ += 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzcgrb6yl.jl:29\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzcgrb6yl.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzcgrb6yl.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpzcgrb6yl.jl:30\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzcgrb6yl.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzcgrb6yl.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpzcgrb6yl.jl:31\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpzcgrb6yl.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzcgrb6yl.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzcgrb6yl.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    val = 0 \n    for i in nums \n        if i > 10 \n            if (i %\
    \ 10 == 1 || i % 10 == 3 || i % 10 == 5 || i % 10 == 7 || i % 10 == 9) && (i <\
    \ 10 || i > -10 || i == 0) \n                val += 1 \n            elseif (i\
    \ % 10 == 1 || i % 10 == 3 || i % 10 == 5 || i % 10 == 7 || i % 10 == 9) && (i\
    \ < 100 || i > -100) \n                if i < 0 \n                    if (i /\
    \ 10) % 10 == 1 || (i / 10) % 10 == 3 || (i / 10) % 10 == 5 || (i / 10) % 10 ==\
    \ 7 || (i / 10) % 10 == 9 \n                        val += 1 \n              \
    \      end \n                else \n                    if (i / 10) % 10 == 1\
    \ || (i / 10) % 10 == 3 || (i / 10) % 10 == 5 || (i / 10) % 10 == 7 || (i / 10)\
    \ % 10 == 9 \n                        val += 1 \n                    end \n  \
    \              end \n            elseif (i % 10 == 1 || i % 10 == 3 || i % 10\
    \ == 5 || i % 10 == 7 || i % 10 == 9) && (i < 1000 || i > -1000) \n          \
    \      if i < 0 \n                    if (i / 100) % 10 == 1 || (i / 100) % 10\
    \ == 3 || (i / 100) % 10 == 5 || (i / 100) % 10 == 7 || (i / 100) % 10 == 9 \n\
    \                        val += 1 \n                    end \n               \
    \ else \n                    if (i / 100) % 10 == 1 || (i / 100) % 10 == 3 ||\
    \ (i / 100) % 10 == 5 || (i / 100) % 10 == 7 || (i / 100) % 10 == 9 \n       \
    \                 val += 1 \n                    end \n                end \n\
    \            elseif (i % 10 == 1 || i % 10 == 3 || i % 10 == 5 || i % 10 == 7\
    \ || i % 10 == 9) && (i < 10000 || i > -10000) \n                if i < 0 \n \
    \                   if (i\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsc2qu41v.jl:37\nin expression starting at\
    \ /tmp/tmpsc2qu41v.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    elements = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(first(digits(i)))\
    \ && isodd(last(digits(i)))\n            elements += 1\n        end\n    end\n\
    \    return elements\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    function isOdd(n) \n        if n < 0 \n            n = -n \n        end\
    \ \n        if n == 0 \n            return false \n        end \n        if n\
    \ == 1 \n            return true \n        end \n        return isOdd(n - 2) \n\
    \    end \n    count = 0 \n    for n in nums \n        if n > 10 && isOdd(n %\
    \ 10) && isOdd(div(n, 10)) \n            count += 1 \n        end \n    end \n\
    \    return count \nend \nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprbfwyk5z.jl:36\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprbfwyk5z.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprbfwyk5z.jl:33\ntest set: Test\
    \ Failed at /tmp/tmprbfwyk5z.jl:37\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprbfwyk5z.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprbfwyk5z.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprbfwyk5z.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for num in nums\n        if 10 < num \n            ld =\
    \ mod(num, 10)\n            fd = div(num, 10^floor(log10(num)))\n            if\
    \ (ld % 2 != 0) && (fd % 2 != 0)\n                count += 1\n            end\n\
    \        end\n    end\n    return count\nend\nnums = [15, -73, 14, -15]\nspecialFilter(nums)\n\
    nums = [33, -2, -3, 45, 21, 109]\nspecialFilter(nums)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\
    \t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45,\
    \ 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71,\
    \ -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    good_nums = 0\n    for n in nums\n        if n > 10 && isodd(first(digits(n)))\
    \ && isodd(last(digits(n)))\n            good_nums += 1\n        end\n    end\n\
    \    return good_nums\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(i % 10) && isodd(i\
    \ % div(i, 10))\n            count += 1\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr0paar5q.jl:23\n  Expression: candidate([15,\
    \ -73, 14, -15]) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr0paar5q.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr0paar5q.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpr0paar5q.jl:24\n  Expression: candidate([33, -2, -3, 45, 21,\
    \ 109]) == 2\n   Evaluated: 3 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr0paar5q.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr0paar5q.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpr0paar5q.jl:25\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr0paar5q.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr0paar5q.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr0paar5q.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for num in nums\n        if(num > 10 && isodd(num) && isodd(num\
    \ % 10))\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphb77tof9.jl:24\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphb77tof9.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphb77tof9.jl:21\ntest set: Test\
    \ Failed at /tmp/tmphb77tof9.jl:25\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphb77tof9.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphb77tof9.jl:21\ntest set: Test\
    \ Failed at /tmp/tmphb77tof9.jl:26\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmphb77tof9.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphb77tof9.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphb77tof9.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if (i > 10) && (i % 2 != 0) && (mod(i,\
    \ 10) != 0) && (mod(i, 10) % 2 != 0)\n            count += 1\n        end\n  \
    \  end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0ux1mqs6.jl:24\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0ux1mqs6.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0ux1mqs6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp0ux1mqs6.jl:25\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0ux1mqs6.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0ux1mqs6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp0ux1mqs6.jl:26\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp0ux1mqs6.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0ux1mqs6.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0ux1mqs6.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for elem in nums\n        if elem > 10 && isodd(digits(elem)[1])\
    \ && isodd(digits(elem)[end])\n            count += 1\n        end\n    end\n\
    \    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && first(i) % 2 != 0 &&\
    \ last(i) % 2 != 0\n            count += 1\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpposhwhvn.jl:24\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpposhwhvn.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpposhwhvn.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpposhwhvn.jl:25\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpposhwhvn.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpposhwhvn.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpposhwhvn.jl:26\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpposhwhvn.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpposhwhvn.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpposhwhvn.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    filtered = filter(x -> x >= 10 && mod(x, 2) == 1 && mod(first(digits(x)),\
    \ 2) == 1 && mod(last(digits(x)), 2) == 1, nums)\n    return length(filtered)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    nums = filter(n -> n > 10, nums)\n    return length(filter(n -> n % 2\
    \ != 0, nums))\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpszm3291w.jl:19\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpszm3291w.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpszm3291w.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpszm3291w.jl:20\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpszm3291w.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpszm3291w.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpszm3291w.jl:21\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpszm3291w.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpszm3291w.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpszm3291w.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    cnt = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(last_digit(i))\n\
    \            cnt += 1\n        end\n    end\n    return cnt\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5])\
    \ == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2,\
    \ -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) ==\
    \ 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp77y1v00f.jl:23\n  Test threw exception\n\
    \  Expression: candidate([15, -73, 14, -15]) == 1\n  UndefVarError: last_digit\
    \ not defined\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n    \
    \ @ Main /tmp/tmp77y1v00f.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp77y1v00f.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp77y1v00f.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp77y1v00f.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([33, -2, -3, 45, 21, 109]) == 2\n  UndefVarError: last_digit not defined\n\
    \  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main /tmp/tmp77y1v00f.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp77y1v00f.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp77y1v00f.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp77y1v00f.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([43, -12, 93, 125, 121, 109]) == 4\n  UndefVarError: last_digit not\
    \ defined\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmp77y1v00f.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp77y1v00f.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp77y1v00f.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp77y1v00f.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([71, -2, -33, 75, 21, 19]) == 3\n  UndefVarError: last_digit not defined\n\
    \  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp77y1v00f.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    i = 0\n    for n in nums\n        if n > 10 && (n % 10)%2 != 0 && n%10\
    \ !=0 && n%10 !=5\n            i += 1\n        end\n    end\n    return i\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpt77lffvl.jl:23\n  Expression: candidate([15,\
    \ -73, 14, -15]) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt77lffvl.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt77lffvl.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpt77lffvl.jl:24\n  Expression: candidate([33, -2, -3, 45, 21,\
    \ 109]) == 2\n   Evaluated: 3 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt77lffvl.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt77lffvl.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt77lffvl.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    c = 0\n    for i in nums\n        if i > 10 && isodd(i) && isodd(i % 10)\n\
    \            c += 1\n        end\n    end\n    return c\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\
    \t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45,\
    \ 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71,\
    \ -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwx3re92b.jl:24\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwx3re92b.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwx3re92b.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpwx3re92b.jl:25\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwx3re92b.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwx3re92b.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpwx3re92b.jl:26\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwx3re92b.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwx3re92b.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwx3re92b.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    res = 0\n    for i = 1:length(nums)\n        if nums[i] > 10 && digits(nums[i])[1]\
    \ % 2 != 0 && digits(nums[i])[end] % 2 != 0\n            res += 1\n        end\n\
    \    end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    num_of_elements = 0\n    for i in nums\n        if i > 10 && isodd(first(digits(i)))\
    \ && isodd(last(digits(i)))\n            num_of_elements += 1\n        end\n \
    \   end\n    return num_of_elements\nend\nspecialFilter([15, -73, 14, -15])\n\
    specialFilter([33, -2, -3, 45, 21, 109])\nusing Test\n\n@testset begin\n\ncandidate\
    \ = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for num in nums\n        if num>10\n            if num%10==1\
    \ || num%10==3 || num%10==5 || num%10==7 || num%10==9\n                num2 =\
    \ num\n                if num2%10==1 || num2%10==3 || num2%10==5 || num2%10==7\
    \ || num2%10==9\n                    count += 1\n                end\n       \
    \     end\n        end\n    end\n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\
    \t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45,\
    \ 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71,\
    \ -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptwktz0fq.jl:29\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptwktz0fq.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptwktz0fq.jl:26\ntest set: Test\
    \ Failed at /tmp/tmptwktz0fq.jl:30\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptwktz0fq.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptwktz0fq.jl:26\ntest set: Test\
    \ Failed at /tmp/tmptwktz0fq.jl:31\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmptwktz0fq.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptwktz0fq.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptwktz0fq.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    return length(nums[(((nums .> 10) .& (nums .% 10 .== 1)) .| (nums .% 10\
    \ .== 3)) .| ((nums .> 10) .& (nums .% 10 .== 7)) .| ((nums .> 10) .& (nums .%\
    \ 10 .== 9))])\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp593f948k.jl:17\n  Expression: candidate([15,\
    \ -73, 14, -15]) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp593f948k.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp593f948k.jl:15\ntest set: Test\
    \ Failed at /tmp/tmp593f948k.jl:18\n  Expression: candidate([33, -2, -3, 45, 21,\
    \ 109]) == 2\n   Evaluated: 3 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp593f948k.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp593f948k.jl:15\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp593f948k.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i = 1:length(nums)\n        if nums[i] > 10 && mod(nums[i],\
    \ 10)%2 != 0 && mod(nums[i], 2)%2 != 0\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpww_jk2em.jl:24\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpww_jk2em.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpww_jk2em.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpww_jk2em.jl:25\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpww_jk2em.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpww_jk2em.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpww_jk2em.jl:26\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpww_jk2em.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpww_jk2em.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpww_jk2em.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    n = length(nums)\n    res = 0\n    for i in 1:n\n        if (nums[i] >\
    \ 10) && (rem(nums[i], 10) in [1, 3, 5, 7, 9]) && (rem(nums[i], 10^(trunc(log10(nums[i]))\
    \ - 1)) in [1, 3, 5, 7, 9])\n            res += 1\n        end\n    end\n    return\
    \ res\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpv1id8cui.jl:24\n  Expression: candidate([15,\
    \ -73, 14, -15]) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv1id8cui.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv1id8cui.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpv1id8cui.jl:25\n  Expression: candidate([33, -2, -3, 45, 21,\
    \ 109]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv1id8cui.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv1id8cui.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpv1id8cui.jl:26\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 3 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv1id8cui.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv1id8cui.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpv1id8cui.jl:27\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 0 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpv1id8cui.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv1id8cui.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv1id8cui.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    nums_filter = filter(n -> n>10 && isodd(n) && isodd(first(digits(n)))\
    \ && isodd(last(digits(n))), nums)\n    return length(nums_filter)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count=0\n    for i in nums\n        if i%2!=0 && i%2!=0\n            first=i%10\n\
    \            while i>10\n                i=i/10\n            end\n           \
    \ last=i\n            if first%2!=0 && last%2!=0 && i>10\n                count+=1\n\
    \            end\n        end\n    end\n    return count\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5])\
    \ == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2,\
    \ -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) ==\
    \ 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpv6rwv4kk.jl:30\n  Expression: candidate([15,\
    \ -73, 14, -15]) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv6rwv4kk.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv6rwv4kk.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpv6rwv4kk.jl:31\n  Expression: candidate([33, -2, -3, 45, 21,\
    \ 109]) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv6rwv4kk.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv6rwv4kk.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpv6rwv4kk.jl:32\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv6rwv4kk.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv6rwv4kk.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpv6rwv4kk.jl:33\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 0 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpv6rwv4kk.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv6rwv4kk.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv6rwv4kk.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    counter = 0\n    for i in nums\n        if (i > 10) & (i % 2 != 0) & (div(i,\
    \ 10) % 2 != 0)\n            counter += 1\n        end\n    end\n    return counter\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_pfizhc6.jl:24\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_pfizhc6.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_pfizhc6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_pfizhc6.jl:25\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_pfizhc6.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_pfizhc6.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_pfizhc6.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    # YOUR CODE HERE\n    count=0\n    for i in nums\n        if(i>10 && i%2==1\
    \ && i%10==1)\n            count+=1\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8kq8zmx1.jl:24\n  Expression: candidate([15,\
    \ -73, 14, -15]) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8kq8zmx1.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8kq8zmx1.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp8kq8zmx1.jl:25\n  Expression: candidate([33, -2, -3, 45, 21,\
    \ 109]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8kq8zmx1.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8kq8zmx1.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp8kq8zmx1.jl:26\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8kq8zmx1.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8kq8zmx1.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp8kq8zmx1.jl:27\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 2 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8kq8zmx1.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8kq8zmx1.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8kq8zmx1.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    greater_than_10 = map(x -> x > 10, nums)\n    if sum(greater_than_10)\
    \ == 0\n        return 0\n    end\n    greater_than_10_nums = nums[greater_than_10]\n\
    \    first_digits = map(x -> x % 10, greater_than_10_nums)\n    second_digits\
    \ = map(x -> x \xF7 10, greater_than_10_nums)\n    first_digits_odd = map(x ->\
    \ mod(x, 2) != 0, first_digits)\n    second_digits_odd = map(x -> mod(x, 2) !=\
    \ 0, second_digits)\n    total_digits_odd = first_digits_odd .* second_digits_odd\n\
    \    return sum(total_digits_odd)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzyo2xm2z.jl:28\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzyo2xm2z.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzyo2xm2z.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpzyo2xm2z.jl:29\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzyo2xm2z.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzyo2xm2z.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzyo2xm2z.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    n = 0\n    for i in nums\n        if (i>10) && (last(digits(i)) % 2 ==\
    \ 1) && (digits(i)[1] % 2 == 1)\n            n = n + 1\n        end\n    end\n\
    \    return n\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    out = 0 \n    for i in nums \n        if i > 10 && i % 2 != 0 &&  i %\
    \ 10 != 0 && (i div 10) % 2 != 0 \n            out += 1 \n        end \n    end\
    \ \n    return out \nend \nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd692vuu7.jl:11\nin expression starting at\
    \ /tmp/tmpd692vuu7.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    if length(nums) == 0\n        return 0\n    end\n    count::Int64 = 0\n\
    \    for i in nums\n        if i > 10 && !ismatch(r\"^([02468]\\d*[02468]|[13579]\\\
    d*[13579])$\", i)\n            count += 1\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9mpvbuae.jl:26\n  Test threw exception\n\
    \  Expression: candidate([15, -73, 14, -15]) == 1\n  UndefVarError: ismatch not\
    \ defined\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmp9mpvbuae.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9mpvbuae.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9mpvbuae.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp9mpvbuae.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([33, -2, -3, 45, 21, 109]) == 2\n  UndefVarError: ismatch not defined\n\
    \  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main /tmp/tmp9mpvbuae.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9mpvbuae.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9mpvbuae.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp9mpvbuae.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([43, -12, 93, 125, 121, 109]) == 4\n  UndefVarError: ismatch not defined\n\
    \  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main /tmp/tmp9mpvbuae.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9mpvbuae.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9mpvbuae.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp9mpvbuae.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([71, -2, -33, 75, 21, 19]) == 3\n  UndefVarError: ismatch not defined\n\
    \  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main /t"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9mpvbuae.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for num in nums\n        if (num > 10) && isodd(num) &&\
    \ isodd(first(num)) && isodd(last(num))\n            count += 1\n        end\n\
    \    end\n    return count\nend\n \nspecialFilter([15, -73, 14, -15]) => 1 \n\
    specialFilter([33, -2, -3, 45, 21, 109]) => 2\nusing Test\n\n@testset begin\n\n\
    candidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq74usf0a.jl:27\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq74usf0a.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq74usf0a.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpq74usf0a.jl:28\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq74usf0a.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq74usf0a.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpq74usf0a.jl:29\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpq74usf0a.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq74usf0a.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq74usf0a.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    nums = filter(x -> x > 10, nums)\n    nums = filter(x -> x % 2 != 0, nums)\n\
    \    nums = filter(x -> x % 10 != 0, nums)\n    return length(nums)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpf0x4zky5.jl:21\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf0x4zky5.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf0x4zky5.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpf0x4zky5.jl:22\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf0x4zky5.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf0x4zky5.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpf0x4zky5.jl:23\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpf0x4zky5.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf0x4zky5.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf0x4zky5.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    # Dummy return value\n    x=0\n    for i in nums\n        if i>10\n  \
    \          x=x+1\n        end\n    end\n    return x\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\
    \t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45,\
    \ 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71,\
    \ -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2pwwkejm.jl:24\n  Expression: candidate([15,\
    \ -73, 14, -15]) == 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2pwwkejm.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2pwwkejm.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp2pwwkejm.jl:25\n  Expression: candidate([33, -2, -3, 45, 21,\
    \ 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2pwwkejm.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2pwwkejm.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp2pwwkejm.jl:26\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2pwwkejm.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2pwwkejm.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp2pwwkejm.jl:27\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp2pwwkejm.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2pwwkejm.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2pwwkejm.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    n = size(nums)[1]\n    m = 0\n    for i in 1:n\n        if abs(nums[i])\
    \ > 10 && isodd(first(abs(nums[i]))) && isodd(last(abs(nums[i])))\n          \
    \  m += 1\n        end\n    end\n    return m\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpd6qt097l.jl:24\n  Expression: candidate([15,\
    \ -73, 14, -15]) == 1\n   Evaluated: 3 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd6qt097l.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd6qt097l.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpd6qt097l.jl:25\n  Expression: candidate([33, -2, -3, 45, 21,\
    \ 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd6qt097l.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd6qt097l.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpd6qt097l.jl:26\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd6qt097l.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd6qt097l.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpd6qt097l.jl:27\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 5 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpd6qt097l.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd6qt097l.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd6qt097l.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    # given an array of numbers, returns the number of elements greater than\
    \ 10 and \n    # both first and last digits are odd\n    count = 0\n    for i\
    \ in nums\n        if (i > 10) && (i < -10)\n            if ((i % 10) == 3) ||\
    \ ((i % 10) == 5) || ((i % 10) == 7) || ((i % 10) == 9)\n                if (i\
    \ >= 100)\n                    if ((i % 10) == 3) || ((i % 10) == 5) || ((i %\
    \ 10) == 7) || ((i % 10) == 9)\n                        count += 1\n         \
    \           end\n                else\n                    count += 1\n      \
    \          end\n            end\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqdzzfgde.jl:33\n  Expression: candidate([15,\
    \ -73, 14, -15]) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqdzzfgde.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqdzzfgde.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpqdzzfgde.jl:34\n  Expression: candidate([33, -2, -3, 45, 21,\
    \ 109]) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqdzzfgde.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqdzzfgde.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpqdzzfgde.jl:35\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqdzzfgde.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqdzzfgde.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpqdzzfgde.jl:36\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 0 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpqdzzfgde.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqdzzfgde.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqdzzfgde.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    number_greater_10_digits = 0 \n    for i in nums \n        if (i > 10)\
    \ && (first_digit(i) in [1, 3, 5, 7, 9]) && (last_digit(i) in [1, 3, 5, 7, 9])\n\
    \            number_greater_10_digits += 1 \n        end \n    end \n    return\
    \ number_greater_10_digits \nend \nusing Test\n\n@testset begin\n\ncandidate =\
    \ specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpewy_nz87.jl:23\n  Test threw exception\n\
    \  Expression: candidate([15, -73, 14, -15]) == 1\n  UndefVarError: first_digit\
    \ not defined\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n    \
    \ @ Main /tmp/tmpewy_nz87.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpewy_nz87.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpewy_nz87.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpewy_nz87.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([33, -2, -3, 45, 21, 109]) == 2\n  UndefVarError: first_digit not\
    \ defined\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmpewy_nz87.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpewy_nz87.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpewy_nz87.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpewy_nz87.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([43, -12, 93, 125, 121, 109]) == 4\n  UndefVarError: first_digit not\
    \ defined\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmpewy_nz87.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpewy_nz87.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpewy_nz87.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpewy_nz87.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([71, -2, -33, 75, 21, 19]) == 3\n  UndefVarError: first_digit not\
    \ defined\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64}"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpewy_nz87.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    n = 0 \n    for i in nums \n        if 10 < i < 100 \n            if (i%10)%2\
    \ != 0 && (i/10)%2 != 0\n                n += 1 \n            end \n        elseif\
    \ i > 100 \n            if (i%10)%2 != 0 && (i/100)%2 != 0\n                n\
    \ += 1 \n            end \n        end \n    end \n    return n \nend \nusing\
    \ Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9bns0cpi.jl:30\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9bns0cpi.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9bns0cpi.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp9bns0cpi.jl:31\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9bns0cpi.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9bns0cpi.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp9bns0cpi.jl:32\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp9bns0cpi.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9bns0cpi.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9bns0cpi.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    \"\"\"Number of elements that have both first and last digits odd and\
    \ \n        are greater than 10\"\"\"\n    sum(x->x>10 && (x%10).!=0 && (x%10)%2!=0\
    \ && (x%10^1).!=0 && (x%10^1)%2!=0, nums)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9qcpezbu.jl:20\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9qcpezbu.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9qcpezbu.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp9qcpezbu.jl:21\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9qcpezbu.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9qcpezbu.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp9qcpezbu.jl:22\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp9qcpezbu.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9qcpezbu.jl:17\ntest set: Error\
    \ During Test at /tmp/tmp9qcpezbu.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == 0\n  ArgumentError: reducing over an empty collection\
    \ is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n      @ Base ./reduce.jl:301\n\
    \    [2] mapreduce_empty(f::Function, op::Function, T::Type)\n      @ Base ./reduce.jl:344\n\
    \    [3] reduce_empty(op::Base.MappingRF{var\"#1#2\", typeof(Base.add_sum)}, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:331\n    [4] reduce_empty_iter\n      @ ./reduce.jl:357\
    \ [inlined]\n    [5] mapreduce_empty_iter(f::Function, op::Function, itr::Vector{Int64},\
    \ ItrEltype::Base.HasEltype)\n      @ Bas"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9qcpezbu.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    #your code goes here\nend\nusing Test\nusing Test\n\n@testset begin\n\n\
    candidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2nh_3wlq.jl:17\n  Test threw exception\n\
    \  Expression: candidate([5, -2, 1, -5]) == 0\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmp2nh_3wlq.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2nh_3wlq.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2nh_3wlq.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp2nh_3wlq.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([15, -73, 14, -15]) == 1\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmp2nh_3wlq.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2nh_3wlq.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] to"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2nh_3wlq.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    # Your code here\n    return 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdnnm8uju.jl:18\n  Expression: candidate([15,\
    \ -73, 14, -15]) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdnnm8uju.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdnnm8uju.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpdnnm8uju.jl:19\n  Expression: candidate([33, -2, -3, 45, 21,\
    \ 109]) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdnnm8uju.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdnnm8uju.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpdnnm8uju.jl:20\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdnnm8uju.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdnnm8uju.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpdnnm8uju.jl:21\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 0 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpdnnm8uju.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdnnm8uju.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdnnm8uju.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    nums = filter(x -> x>10, nums)\n    count = 0\n    for num in nums\n \
    \       for i = 1:length(num)\n            if num[i] in [1, 3, 5, 7, 9]\n    \
    \            count += 1\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5gjjyi6v.jl:26\n  Expression: candidate([15,\
    \ -73, 14, -15]) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5gjjyi6v.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5gjjyi6v.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp5gjjyi6v.jl:27\n  Expression: candidate([33, -2, -3, 45, 21,\
    \ 109]) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5gjjyi6v.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5gjjyi6v.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp5gjjyi6v.jl:28\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5gjjyi6v.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5gjjyi6v.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp5gjjyi6v.jl:29\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 0 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5gjjyi6v.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5gjjyi6v.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5gjjyi6v.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count=0\n    for i in nums\n        if i>10 && first_digit(i)%2!=0 &&\
    \ last_digit(i)%2!=0\n            count=count+1\n        end\n    end\n    return\
    \ count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpvxl04n3o.jl:23\n  Test threw exception\n\
    \  Expression: candidate([15, -73, 14, -15]) == 1\n  UndefVarError: first_digit\
    \ not defined\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n    \
    \ @ Main /tmp/tmpvxl04n3o.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvxl04n3o.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvxl04n3o.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpvxl04n3o.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([33, -2, -3, 45, 21, 109]) == 2\n  UndefVarError: first_digit not\
    \ defined\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmpvxl04n3o.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvxl04n3o.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvxl04n3o.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpvxl04n3o.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([43, -12, 93, 125, 121, 109]) == 4\n  UndefVarError: first_digit not\
    \ defined\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmpvxl04n3o.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvxl04n3o.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvxl04n3o.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpvxl04n3o.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([71, -2, -33, 75, 21, 19]) == 3\n  UndefVarError: first_digit not\
    \ defined\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64}"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvxl04n3o.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && isodd(firstdigit(i))\
    \ && isodd(lastdigit(i))\n            count += 1\n        end\n    end\n    return\
    \ count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp932d03rw.jl:23\n  Test threw exception\n\
    \  Expression: candidate([15, -73, 14, -15]) == 1\n  UndefVarError: firstdigit\
    \ not defined\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n    \
    \ @ Main /tmp/tmp932d03rw.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp932d03rw.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp932d03rw.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp932d03rw.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([33, -2, -3, 45, 21, 109]) == 2\n  UndefVarError: firstdigit not defined\n\
    \  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main /tmp/tmp932d03rw.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp932d03rw.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp932d03rw.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp932d03rw.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([43, -12, 93, 125, 121, 109]) == 4\n  UndefVarError: firstdigit not\
    \ defined\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmp932d03rw.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp932d03rw.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp932d03rw.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp932d03rw.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([71, -2, -33, 75, 21, 19]) == 3\n  UndefVarError: firstdigit not defined\n\
    \  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp932d03rw.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    # implement your function here\nusing Test\n\n@testset begin\n\ncandidate\
    \ = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzu0dpwls.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzu0dpwls.jl:1\n\
    in expression starting at /tmp/tmpzu0dpwls.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    \n    count = 0\n    length = size(nums)[1]\n    \n    for i in 1:length\n\
    \        num = nums[i]\n        if num>10\n            num_string = string(num)\n\
    \            first_digit = Int64(num_string[1])\n            last_digit = Int64(num_string[end])\n\
    \            if (first_digit%2 != 0) && (last_digit%2 != 0)\n                count\
    \ += 1\n            end\n        end\n    end\n    \n    return count\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    # write your code here\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpc_lm8o8k.jl:16\n  Test threw exception\n\
    \  Expression: candidate([5, -2, 1, -5]) == 0\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmpc_lm8o8k.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc_lm8o8k.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc_lm8o8k.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpc_lm8o8k.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([15, -73, 14, -15]) == 1\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmpc_lm8o8k.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc_lm8o8k.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] to"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc_lm8o8k.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    num_filtered = 0\n    for x in nums\n        if x >= 10\n            digits\
    \ = digits(x)\n            first_digit = digits[1]\n            last_digit = digits[end]\n\
    \            if first_digit % 2 != 0 && last_digit % 2 != 0\n                num_filtered\
    \ += 1\n            end\n        end\n    end\n    return num_filtered\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2cpakj6y.jl:28\n  Test threw exception\n\
    \  Expression: candidate([15, -73, 14, -15]) == 1\n  UndefVarError: digits not\
    \ defined\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmp2cpakj6y.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2cpakj6y.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2cpakj6y.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp2cpakj6y.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([33, -2, -3, 45, 21, 109]) == 2\n  UndefVarError: digits not defined\n\
    \  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main /tmp/tmp2cpakj6y.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2cpakj6y.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2cpakj6y.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp2cpakj6y.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([43, -12, 93, 125, 121, 109]) == 4\n  UndefVarError: digits not defined\n\
    \  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main /tmp/tmp2cpakj6y.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2cpakj6y.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2cpakj6y.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp2cpakj6y.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([71, -2, -33, 75, 21, 19]) == 3\n  UndefVarError: digits not defined\n\
    \  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main /tmp/t"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2cpakj6y.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    nums[findall(n -> n > 10 && n % 2 != 0 && n % 10 != 0, nums)]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmplzva6640.jl:16\n  Test threw exception\n\
    \  Expression: candidate([5, -2, 1, -5]) == 0\n  MethodError: Cannot `convert`\
    \ an object of type Vector{Int64} to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmplzva6640.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplzva6640.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplzva6640.jl:15\ntest set:\
    \ Error During Test at /tmp/tmplzva6640.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([15, -73, 14, -15]) == 1\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmplzva6640.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplzva6640.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplzva6640.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    # Your code here\n    return 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpogos5475.jl:18\n  Expression: candidate([15,\
    \ -73, 14, -15]) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpogos5475.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpogos5475.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpogos5475.jl:19\n  Expression: candidate([33, -2, -3, 45, 21,\
    \ 109]) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpogos5475.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpogos5475.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpogos5475.jl:20\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpogos5475.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpogos5475.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpogos5475.jl:21\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 0 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpogos5475.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpogos5475.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpogos5475.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    output = 0\n    for i in nums\n        if i > 10 && i % 2 != 0 && div(i,\
    \ 10) % 2 != 0\n            output += 1\n        end\n    end\n    return output\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprgbag8vi.jl:24\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprgbag8vi.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprgbag8vi.jl:21\ntest set: Test\
    \ Failed at /tmp/tmprgbag8vi.jl:25\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprgbag8vi.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprgbag8vi.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprgbag8vi.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    filtered = [value for value in nums if value > 10 && (value % 2 != 0)\
    \ && (value % 10 != 0)]\n    return length(filtered)\nend\nspecialFilter([15,\
    \ -73, 14, -15])\nspecialFilter([33, -2, -3, 45, 21, 109])\nusing Test\n\n@testset\
    \ begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\
    \t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45,\
    \ 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71,\
    \ -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi0sxcwzu.jl:21\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi0sxcwzu.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi0sxcwzu.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpi0sxcwzu.jl:22\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi0sxcwzu.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi0sxcwzu.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpi0sxcwzu.jl:23\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpi0sxcwzu.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi0sxcwzu.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi0sxcwzu.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && (i%10)%2==1 && (floor(i/10)%10)%2==1\n\
    \            count += 1\n        end\n    end\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5])\
    \ == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2,\
    \ -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) ==\
    \ 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpu6barypq.jl:24\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu6barypq.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu6barypq.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpu6barypq.jl:25\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu6barypq.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu6barypq.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu6barypq.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    nums_filtered = filter(x -> (x > 10 && (x % 10) % 2 != 0 && (x \xF7 10)\
    \ % 2 != 0), nums)\n    return length(nums_filtered)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\
    \t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45,\
    \ 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71,\
    \ -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpd5ungax7.jl:19\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd5ungax7.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd5ungax7.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpd5ungax7.jl:20\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd5ungax7.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd5ungax7.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd5ungax7.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    #Your code here\n    #use helper function isSpecial\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5])\
    \ == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2,\
    \ -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) ==\
    \ 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwr1_i2pu.jl:17\n  Test threw exception\n\
    \  Expression: candidate([5, -2, 1, -5]) == 0\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmpwr1_i2pu.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwr1_i2pu.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwr1_i2pu.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpwr1_i2pu.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([15, -73, 14, -15]) == 1\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmpwr1_i2pu.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwr1_i2pu.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] to"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwr1_i2pu.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for num in nums\n        if 10 < num &&\n           isodd(num)\
    \ &&\n           isodd(first(digits(num))) &&\n           isodd(last(digits(num)))\n\
    \            count += 1\n        end\n    end\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5])\
    \ == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2,\
    \ -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) ==\
    \ 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    \nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t\
    @test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) ==\
    \ 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6xz414z6.jl:16\n  Test threw exception\n\
    \  Expression: candidate([5, -2, 1, -5]) == 0\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmp6xz414z6.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6xz414z6.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6xz414z6.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp6xz414z6.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([15, -73, 14, -15]) == 1\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmp6xz414z6.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6xz414z6.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] to"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6xz414z6.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    n = length(nums)\n    count = 0\n    for i = 1:n\n        if nums[i] >\
    \ 10\n            x = nums[i]\n            while x >= 10\n                x =\
    \ x / 10\n            end\n            y = floor(x)\n            if y%2 == 1 &&\
    \ x%2 == 1\n                count += 1\n            end\n        end\n    end\n\
    \    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzwlnlcbq.jl:31\n  Expression: candidate([15,\
    \ -73, 14, -15]) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzwlnlcbq.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzwlnlcbq.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpzwlnlcbq.jl:32\n  Expression: candidate([33, -2, -3, 45, 21,\
    \ 109]) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzwlnlcbq.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzwlnlcbq.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpzwlnlcbq.jl:33\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzwlnlcbq.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzwlnlcbq.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpzwlnlcbq.jl:34\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 0 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpzwlnlcbq.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzwlnlcbq.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzwlnlcbq.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    # Write your code here\nend\n\"\"\"Sort the array from largest to smallest.\
    \ For example:\nsort([-5, -1, 2, 10, 8]) => [10, 8, 2, -1, -5]\n\"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpg0sjq633.jl:11\nin expression starting at /tmp/tmpg0sjq633.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    len = length(nums)\n    cnt = 0\n    for i in 1:len\n        if nums[i]>10\
    \ && nums[i]%2==1 && mod(nums[i],10)%2==1\n            cnt += 1\n        end\n\
    \    end\n    return cnt\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqqkyv0i4.jl:25\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqqkyv0i4.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqqkyv0i4.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpqqkyv0i4.jl:26\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqqkyv0i4.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqqkyv0i4.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpqqkyv0i4.jl:27\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpqqkyv0i4.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqqkyv0i4.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqqkyv0i4.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    counter = 0\n    for num in nums\n        if num > 10\n            if\
    \ num % 2 != 0 && (num % 10) % 2 != 0\n                counter += 1\n        \
    \    end\n        end\n    end\n    return counter\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\
    \t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45,\
    \ 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71,\
    \ -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo0_llajf.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo0_llajf.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo0_llajf.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpo0_llajf.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo0_llajf.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo0_llajf.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpo0_llajf.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpo0_llajf.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo0_llajf.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo0_llajf.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    # your code\nend\n \n@testset \"special filter test\" begin\n    @test\
    \ specialFilter([15, -73, 14, -15]) == 1\n    @test specialFilter([33, -2, -3,\
    \ 45, 21, 109]) == 2\n    @test specialFilter([]) == 0\n    @test specialFilter([-1,\
    \ 13, 15, 37, 11, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\
    \ 13, 13, 13, 13, 13, 11, 9, 7, 5, 3, 1]) == 24\nend\n \n \n \nusing Test\n\n\
    @testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5])\
    \ == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2,\
    \ -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) ==\
    \ 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @testset not defined\nin expression starting\
    \ at /tmp/tmpwg7cj6rn.jl:12\nin expression starting at /tmp/tmpwg7cj6rn.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    \n    # Your code here\n    \nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpq2e3t0se.jl:18\n  Test threw exception\n\
    \  Expression: candidate([5, -2, 1, -5]) == 0\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmpq2e3t0se.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq2e3t0se.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq2e3t0se.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpq2e3t0se.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([15, -73, 14, -15]) == 1\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmpq2e3t0se.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq2e3t0se.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] to"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq2e3t0se.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    return count(n -> (n >= 10) && (digits(n)[1] % 2 != 0) && (digits(n)[end]\
    \ % 2 != 0), nums)\nend\nspecialFilter([15, -73, 14, -15])\nspecialFilter([33,\
    \ -2, -3, 45, 21, 109])\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    cnt = 0\n    for x in nums\n        if x > 10 && isodd(x%10) && isodd(x\
    \ % 10^(Int(log10(x))+1))\n            cnt += 1\n        end\n    end\n    return\
    \ cnt\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkgdcv6p7.jl:23\n  Test threw exception\n\
    \  Expression: candidate([15, -73, 14, -15]) == 1\n  InexactError: Int64(1.1760912590556813)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] specialFilter(nums::Vector{Int64})\n\
    \     @ Main /tmp/tmpkgdcv6p7.jl:11\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpkgdcv6p7.jl:23 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpkgdcv6p7.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpkgdcv6p7.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([33, -2, -3, 45, 21, 109]) == 2\n  InexactError: Int64(1.5185139398778875)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] specialFilter(nums::Vector{Int64})\n\
    \     @ Main /tmp/tmpkgdcv6p7.jl:11\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpkgdcv6p7.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpkgdcv6p7.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpkgdcv6p7.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([43, -12, 93, 125, 121, 109]) == 4\n  InexactError: Int64(1.6334684555795864)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] specialFilter(nums::Vector{Int64})\n\
    \     @ Main /tmp/tmpkgdcv6p7.jl:11\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpkgdcv6p7.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpkgdcv6p7.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpkgdcv6p7.jl:26\n  Test threw exception\n  Expression:"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkgdcv6p7.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    nums = nums[nums .> 10]\n    nums = nums[nums .% 2 .== 1]\n    return\
    \ sum(nums .% 10 .== 1)\nend\nspecialFilter([15, -73, 14, -15])\nspecialFilter([33,\
    \ -2, -3, 45, 21, 109])\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2mwkp4ee.jl:21\n  Expression: candidate([15,\
    \ -73, 14, -15]) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2mwkp4ee.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2mwkp4ee.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp2mwkp4ee.jl:22\n  Expression: candidate([33, -2, -3, 45, 21,\
    \ 109]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2mwkp4ee.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2mwkp4ee.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp2mwkp4ee.jl:23\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2mwkp4ee.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2mwkp4ee.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp2mwkp4ee.jl:24\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 2 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp2mwkp4ee.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2mwkp4ee.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2mwkp4ee.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    total = 0\n    for i = 1:length(nums)\n        if nums[i] > 10\n     \
    \       if rem(nums[i],2) == 1\n                if rem(nums[i]/10,2) == 1\n  \
    \                  total = total + 1\n                end\n            end\n \
    \       end\n    end\n    return total\nend\nusing Test\n\n@testset begin\n\n\
    candidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr9ax2zdc.jl:27\n  Expression: candidate([15,\
    \ -73, 14, -15]) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr9ax2zdc.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr9ax2zdc.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpr9ax2zdc.jl:28\n  Expression: candidate([33, -2, -3, 45, 21,\
    \ 109]) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr9ax2zdc.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr9ax2zdc.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpr9ax2zdc.jl:29\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr9ax2zdc.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr9ax2zdc.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpr9ax2zdc.jl:30\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 0 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpr9ax2zdc.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr9ax2zdc.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr9ax2zdc.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for num in nums\n        first_digit = first(digits(num))\n\
    \        last_digit = last(digits(num))\n        if num > 10 && (first_digit %\
    \ 2 == 1) && (last_digit % 2 == 1)\n            count += 1\n        end\n    end\n\
    \    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    c = 0\n    for a in nums\n        if (a>10) && ((mod(a,2)==1) && (mod(floor(a/10),2)==1))\n\
    \            c += 1\n        end\n    end\n    return c\nend\n \nusing Test\n\n\
    @testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5])\
    \ == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2,\
    \ -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) ==\
    \ 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7cj77tz8.jl:25\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7cj77tz8.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7cj77tz8.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp7cj77tz8.jl:26\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7cj77tz8.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7cj77tz8.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7cj77tz8.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for n in nums\n        nstr = string(n)\n        if n >\
    \ 10\n            first = nstr[1]\n            last = nstr[end]\n            if\
    \ first == '1' || first == '3' || first == '5' || first == '7' || first == '9'\n\
    \                if last == '1' || last == '3' || last == '5' || last == '7' ||\
    \ last == '9'\n                    count += 1\n                end\n         \
    \   end\n        end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    return sum([(n >= 10) & (n % 2 == 1) & ((n % 10 == 1) | (n % 10 == 3)\
    \ | (n % 10 == 5) | (n % 10 == 7) | (n % 10 == 9)) for n in nums])\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpeidredmy.jl:18\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeidredmy.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeidredmy.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpeidredmy.jl:19\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeidredmy.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeidredmy.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpeidredmy.jl:20\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpeidredmy.jl:20 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeidredmy.jl:15\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeidredmy.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    n = 0\n    for i in nums\n        if (i>10) && ((i%10==1)||(i%10==3)||(i%10==5)||(i%10==7)||(i%10==9))\
    \ && ((i%10^(Int(log10(i))+1)==1)||(i%10^(Int(log10(i))+1)==3)||(i%10^(Int(log10(i))+1)==5)||(i%10^(Int(log10(i))+1)==7)||(i%10^(Int(log10(i))+1)==9))\n\
    \            n += 1\n        end\n    end\n    return n\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\
    \t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45,\
    \ 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71,\
    \ -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpas6nb4p8.jl:23\n  Test threw exception\n\
    \  Expression: candidate([15, -73, 14, -15]) == 1\n  InexactError: Int64(1.1760912590556813)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] specialFilter(nums::Vector{Int64})\n\
    \     @ Main /tmp/tmpas6nb4p8.jl:11\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpas6nb4p8.jl:23 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpas6nb4p8.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpas6nb4p8.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([33, -2, -3, 45, 21, 109]) == 2\n  InexactError: Int64(1.5185139398778875)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] specialFilter(nums::Vector{Int64})\n\
    \     @ Main /tmp/tmpas6nb4p8.jl:11\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpas6nb4p8.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpas6nb4p8.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpas6nb4p8.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([43, -12, 93, 125, 121, 109]) == 4\n  InexactError: Int64(1.6334684555795864)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] specialFilter(nums::Vector{Int64})\n\
    \     @ Main /tmp/tmpas6nb4p8.jl:11\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpas6nb4p8.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpas6nb4p8.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpas6nb4p8.jl:26\n  Test threw exception\n  Expression:"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpas6nb4p8.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    # Enter code here\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4zevrgys.jl:16\n  Test threw exception\n\
    \  Expression: candidate([5, -2, 1, -5]) == 0\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmp4zevrgys.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4zevrgys.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4zevrgys.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp4zevrgys.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([15, -73, 14, -15]) == 1\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmp4zevrgys.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4zevrgys.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] to"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4zevrgys.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    # Write your code here.\n    counter = 0\n    for i in nums\n        if\
    \ i > 10 && isodd(i%10) && isodd(i//10^(length(Int(i))-1))\n            counter\
    \ += 1\n        end\n    end\n    return counter\nend\nprintln(specialFilter([15,\
    \ -73, 14, -15]))\nprintln(specialFilter([33, -2, -3, 45, 21, 109]))\nusing Test\n\
    \n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5])\
    \ == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2,\
    \ -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) ==\
    \ 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "1\n4\ntest set: Test Failed at /tmp/tmpx3h0du5e.jl:27\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx3h0du5e.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx3h0du5e.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpx3h0du5e.jl:28\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx3h0du5e.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx3h0du5e.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpx3h0du5e.jl:29\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpx3h0du5e.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx3h0du5e.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx3h0du5e.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for x in nums\n        if x > 10 && x % 2 != 0\n      \
    \      digits = digits(x)\n            first = digits[1]\n            last = digits[end]\n\
    \            if first % 2 != 0 && last % 2 != 0\n                count += 1\n\
    \            end\n        end\n    end\n    return count\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5])\
    \ == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2,\
    \ -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) ==\
    \ 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpn5r4de5j.jl:28\n  Test threw exception\n\
    \  Expression: candidate([15, -73, 14, -15]) == 1\n  UndefVarError: digits not\
    \ defined\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmpn5r4de5j.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpn5r4de5j.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn5r4de5j.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpn5r4de5j.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([33, -2, -3, 45, 21, 109]) == 2\n  UndefVarError: digits not defined\n\
    \  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main /tmp/tmpn5r4de5j.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpn5r4de5j.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn5r4de5j.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpn5r4de5j.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([43, -12, 93, 125, 121, 109]) == 4\n  UndefVarError: digits not defined\n\
    \  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main /tmp/tmpn5r4de5j.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpn5r4de5j.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn5r4de5j.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpn5r4de5j.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([71, -2, -33, 75, 21, 19]) == 3\n  UndefVarError: digits not defined\n\
    \  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main /tmp/t"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn5r4de5j.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    # your code goes here\n    total = 0\n    for i in nums\n        if i\
    \ >= 10\n            first_digit = div(i,10)\n            last_digit = i - 10*first_digit\n\
    \            if last_digit % 2 != 0 && first_digit % 2 != 0\n                total\
    \ += 1\n            end\n        end\n    end\n    return total\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5])\
    \ == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2,\
    \ -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) ==\
    \ 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpntue_1x2.jl:29\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpntue_1x2.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpntue_1x2.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpntue_1x2.jl:30\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpntue_1x2.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpntue_1x2.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpntue_1x2.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if (i > 10) && (!isodd(i)) && (isodd(div(i,\
    \ 10))) && (isodd(i % 10))\n            count += 1\n        end\n    end\n   \
    \ return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2tmf5ifs.jl:23\n  Expression: candidate([15,\
    \ -73, 14, -15]) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2tmf5ifs.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2tmf5ifs.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp2tmf5ifs.jl:24\n  Expression: candidate([33, -2, -3, 45, 21,\
    \ 109]) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2tmf5ifs.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2tmf5ifs.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp2tmf5ifs.jl:25\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2tmf5ifs.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2tmf5ifs.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp2tmf5ifs.jl:26\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 0 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp2tmf5ifs.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2tmf5ifs.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2tmf5ifs.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    num_arr_greater_10 = nums .> 10\n    #num_arr_greater_10 returns a bool\
    \ vector\n    num_arr_greater_10_final = sum(num_arr_greater_10)\n    bool_arr\
    \ = isodd.(nums)\n    bool_arr_final = sum(bool_arr)\n    # answer = num_arr_greater_10_final\
    \ + bool_arr_final\n    return num_arr_greater_10_final + bool_arr_final\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfue48ddr.jl:22\n  Expression: candidate([5,\
    \ -2, 1, -5]) == 0\n   Evaluated: 3 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfue48ddr.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfue48ddr.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpfue48ddr.jl:23\n  Expression: candidate([15, -73, 14, -15])\
    \ == 1\n   Evaluated: 5 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfue48ddr.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfue48ddr.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpfue48ddr.jl:24\n  Expression: candidate([33, -2, -3, 45, 21,\
    \ 109]) == 2\n   Evaluated: 9 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfue48ddr.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfue48ddr.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpfue48ddr.jl:25\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 10 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfue48ddr.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfue48ddr.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpfue48ddr.jl:26\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 9 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfue48ddr.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    \nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t\
    @test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) ==\
    \ 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpze036vam.jl:16\n  Test threw exception\n\
    \  Expression: candidate([5, -2, 1, -5]) == 0\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmpze036vam.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpze036vam.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpze036vam.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpze036vam.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([15, -73, 14, -15]) == 1\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmpze036vam.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpze036vam.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] to"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpze036vam.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpc9s_tmfc.jl:16\n  Test threw exception\n\
    \  Expression: candidate([5, -2, 1, -5]) == 0\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmpc9s_tmfc.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc9s_tmfc.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc9s_tmfc.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpc9s_tmfc.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([15, -73, 14, -15]) == 1\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmpc9s_tmfc.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc9s_tmfc.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] to"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc9s_tmfc.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && i % 2 != 0 && (i %\
    \ 10) % 2 != 0 && (i / 10) % 2 != 0\n            count += 1\n        end\n   \
    \ end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0gaekoe7.jl:24\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0gaekoe7.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0gaekoe7.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp0gaekoe7.jl:25\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0gaekoe7.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0gaekoe7.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp0gaekoe7.jl:26\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp0gaekoe7.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0gaekoe7.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0gaekoe7.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    cnt = 0\n    for num in nums\n        if num > 10 && isodd(num) && isodd(num\
    \ % 10)\n            cnt += 1\n        end\n    end\n    return cnt\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_z8xi5cd.jl:24\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_z8xi5cd.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_z8xi5cd.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_z8xi5cd.jl:25\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_z8xi5cd.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_z8xi5cd.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_z8xi5cd.jl:26\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_z8xi5cd.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_z8xi5cd.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_z8xi5cd.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    nums_filtered = filter( (x) -> x > 10 && isodd(first(div(x, 10^(floor(log10(x)))))),\
    \ nums)\n    len = length(nums_filtered)\n    for i = 1:len\n        if !isodd(mod(nums_filtered[i],\
    \ 10))\n            nums_filtered = deleteat!(nums_filtered, i)\n            i\
    \ -= 1\n            len -= 1\n        end\n    end\n    return length(nums_filtered)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    ctr = 0\n    for i in nums\n        if (i > 10) && (first(i) % 2 != 0)\
    \ && (last(i) % 2 != 0)\n            ctr += 1\n        end\n    end\n    return\
    \ ctr\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb8ibuitu.jl:24\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb8ibuitu.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb8ibuitu.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpb8ibuitu.jl:25\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb8ibuitu.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb8ibuitu.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpb8ibuitu.jl:26\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpb8ibuitu.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb8ibuitu.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb8ibuitu.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    num=0\n    for i in nums\n        if i>10 && abs(mod(i,10))%2!=0 && mod(i,10)%2!=0\n\
    \            num+=1\n        end\n    end\n    return num\nend\nprintln(specialFilter([15,\
    \ -73, 14, -15]))\nprintln(specialFilter([33, -2, -3, 45, 21, 109]))\nusing Test\n\
    \n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5])\
    \ == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2,\
    \ -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) ==\
    \ 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "1\n4\ntest set: Test Failed at /tmp/tmplyjv9ink.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplyjv9ink.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplyjv9ink.jl:23\ntest set: Test\
    \ Failed at /tmp/tmplyjv9ink.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplyjv9ink.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplyjv9ink.jl:23\ntest set: Test\
    \ Failed at /tmp/tmplyjv9ink.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmplyjv9ink.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplyjv9ink.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplyjv9ink.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for num in nums\n        if num > 10 && ends_with_odd(num)\
    \ && first_digit_odd(num)\n            count += 1\n        end\n    end\n    return\
    \ count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp49i2l_so.jl:23\n  Test threw exception\n\
    \  Expression: candidate([15, -73, 14, -15]) == 1\n  UndefVarError: ends_with_odd\
    \ not defined\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n    \
    \ @ Main /tmp/tmp49i2l_so.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp49i2l_so.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp49i2l_so.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp49i2l_so.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([33, -2, -3, 45, 21, 109]) == 2\n  UndefVarError: ends_with_odd not\
    \ defined\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmp49i2l_so.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp49i2l_so.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp49i2l_so.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp49i2l_so.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([43, -12, 93, 125, 121, 109]) == 4\n  UndefVarError: ends_with_odd\
    \ not defined\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n    \
    \ @ Main /tmp/tmp49i2l_so.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp49i2l_so.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp49i2l_so.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp49i2l_so.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([71, -2, -33, 75, 21, 19]) == 3\n  UndefVarError: ends_with_odd not\
    \ defined\n  Stacktrace:\n   [1] specialFilter(nums::Vecto"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp49i2l_so.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    n = 0\n    for i in nums\n        if i > 10\n            n += (i % 10)\
    \ % 2 == 1 ? (i % 100) == i ? 1 : 0 : 0\n        end\n    end\n    return n\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzukjpre_.jl:24\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 3 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzukjpre_.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzukjpre_.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpzukjpre_.jl:25\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzukjpre_.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzukjpre_.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpzukjpre_.jl:26\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpzukjpre_.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzukjpre_.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzukjpre_.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        # First condition: greater than\
    \ 10.\n        if (i > 10) \n            # Second condition: odd first digit.\n\
    \            if ((i % 10 == 1) || (i % 10 == 3) || (i % 10 == 5) || (i % 10 ==\
    \ 7) || (i % 10 == 9))\n                # Third condition: odd last digit.\n \
    \               if (((i div 10) % 10 == 1) || ((i div 10) % 10 == 3) || ((i div\
    \ 10) % 10 == 5) || ((i div 10) % 10 == 7) || ((i div 10) % 10 == 9))\n      \
    \              count += 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc0sogzhy.jl:16\nin expression starting at\
    \ /tmp/tmpc0sogzhy.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    number_greater_than_10 = length(filter(x -> x > 10, nums))\n    odd_first_and_last_digits\
    \ = length(filter(x -> isodd(x) && isodd(last(digits(x))), nums))\n    return\
    \ number_greater_than_10 + odd_first_and_last_digits\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\
    \t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45,\
    \ 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71,\
    \ -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_t4m2c8z.jl:18\n  Expression: candidate([5,\
    \ -2, 1, -5]) == 0\n   Evaluated: 3 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_t4m2c8z.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_t4m2c8z.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp_t4m2c8z.jl:19\n  Expression: candidate([15, -73, 14, -15])\
    \ == 1\n   Evaluated: 5 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_t4m2c8z.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_t4m2c8z.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp_t4m2c8z.jl:20\n  Expression: candidate([33, -2, -3, 45, 21,\
    \ 109]) == 2\n   Evaluated: 7 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_t4m2c8z.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_t4m2c8z.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp_t4m2c8z.jl:21\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 9 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_t4m2c8z.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_t4m2c8z.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp_t4m2c8z.jl:22\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 8 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdl"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_t4m2c8z.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    # Your code here\n    return 0\nend\n@testset \"tests for specialFilter\"\
    \ begin\n    @test specialFilter([15, -73, 14, -15]) == 1\n    @test specialFilter([33,\
    \ -2, -3, 45, 21, 109]) == 2\n    @test specialFilter([33, -2, -3, 45, 21, 99])\
    \ == 1\n    @test specialFilter([33, -2, -3, 45, 21, 198]) == 0\n    @test specialFilter([1,\
    \ 11, 111, 1111, 11111]) == 5\n    @test specialFilter([]) == 0\nend\n \nusing\
    \ Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @testset not defined\nin expression starting\
    \ at /tmp/tmpo49jcgn9.jl:12\nin expression starting at /tmp/tmpo49jcgn9.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    return length( [x for x in nums if x > 10 && isodd(firstdig(x)) && isodd(lastdig(x))\
    \ ] )\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpt30j7m_1.jl:17\n  Test threw exception\n\
    \  Expression: candidate([15, -73, 14, -15]) == 1\n  UndefVarError: firstdig not\
    \ defined\n  Stacktrace:\n    [1] (::var\"#1#2\")(x::Int64)\n      @ Main ./none:0\n\
    \    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n    [3] iterate\n    \
    \  @ ./generator.jl:44 [inlined]\n    [4] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"\
    #1#2\", Vector{Int64}}, typeof(identity)})\n      @ Base ./array.jl:797\n    [5]\
    \ collect\n      @ ./array.jl:721 [inlined]\n    [6] specialFilter(nums::Vector{Int64})\n\
    \      @ Main /tmp/tmpt30j7m_1.jl:9\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpt30j7m_1.jl:17 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpt30j7m_1.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpt30j7m_1.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([33, -2, -3, 45, 21, 109]) == 2\n  UndefVarError: firstdig not defined\n\
    \  Stacktrace:\n    [1] (::var\"#1#2\")(x::Int64)\n      @ Main ./none:0\n   \
    \ [2] iterate\n      @ ./iterators.jl:447 [inlined]\n    [3] iterate\n      @\
    \ ./generator.jl:44 [inlined]\n    [4] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"\
    #1#2\", Vector{Int64}}, typeof(identity)})\n      @ Base ./array.jl:797\n    [5]\
    \ collect\n      @ ./array.jl:721 [inlined]\n    [6] specialFilter(nums::Vector{Int64})\n\
    \      @ Main /tmp/tmpt30j7m_1.jl:9\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpt30j7m_1.jl:18 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpt30j7m_1.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpt30j7m_1.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([4"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt30j7m_1.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    n = length(nums)\n    cnt = 0\n    for i in 1:n\n        if nums[i] >\
    \ 10 && !(nums[i] % 2 == 0)\n            cnt += 1\n        end\n    end\n    return\
    \ cnt\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe53yssnn.jl:25\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe53yssnn.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe53yssnn.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpe53yssnn.jl:26\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe53yssnn.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe53yssnn.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpe53yssnn.jl:27\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpe53yssnn.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe53yssnn.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe53yssnn.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    return length(filter(x -> x > 10 && mod(x, 2) != 0, nums))\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpd00rdp6h.jl:18\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd00rdp6h.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd00rdp6h.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpd00rdp6h.jl:19\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd00rdp6h.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd00rdp6h.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpd00rdp6h.jl:20\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpd00rdp6h.jl:20 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd00rdp6h.jl:15\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd00rdp6h.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    return sum(n -> n > 10 && n % 2 != 0 && div(n, 10) % 2 != 0, nums)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2zaw9pzc.jl:18\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2zaw9pzc.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2zaw9pzc.jl:15\ntest set: Test\
    \ Failed at /tmp/tmp2zaw9pzc.jl:19\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2zaw9pzc.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2zaw9pzc.jl:15\ntest set: Error\
    \ During Test at /tmp/tmp2zaw9pzc.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == 0\n  ArgumentError: reducing over an empty collection\
    \ is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n      @ Base ./reduce.jl:301\n\
    \    [2] mapreduce_empty(f::Function, op::Function, T::Type)\n      @ Base ./reduce.jl:344\n\
    \    [3] reduce_empty(op::Base.MappingRF{var\"#1#2\", typeof(Base.add_sum)}, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:331\n    [4] reduce_empty_iter\n      @ ./reduce.jl:357\
    \ [inlined]\n    [5] mapreduce_empty_iter(f::Function, op::Function, itr::Vector{Int64},\
    \ ItrEltype::Base.HasEltype)\n      @ Base ./reduce.jl:353\n    [6] _mapreduce(f::var\"\
    #1#2\", op::typeof(Base.add_sum), #unused#::IndexLinear, A::Vector{Int64})\n \
    \     @ Base ./reduce.jl:402\n    [7] _mapreduce_dim\n      @ ./reducedim.jl:330\
    \ [inlined]\n    [8] #mapreduce#731\n      @ ./reducedim.jl:322 [inlined]\n  \
    \  [9] mapreduce\n      @ ./reducedim.jl:322 [inlined]\n   [10] #_sum#741\n  \
    \    @ ./reducedim.jl:894 [inlined]\n   [11] _sum\n      @ ./reducedim.jl:894\
    \ [inlined]\n   [12] #sum#739\n      @ ./reducedim."
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2zaw9pzc.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    return sum([all(mod.([first(n), last(n)], 2) .== 1) && n > 10 ? 1 : 0\
    \ for n in nums])\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqje2tklu.jl:18\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqje2tklu.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqje2tklu.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpqje2tklu.jl:19\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqje2tklu.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqje2tklu.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpqje2tklu.jl:20\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpqje2tklu.jl:20 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqje2tklu.jl:15\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqje2tklu.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    return length(filter(x -> (x > 10) && (x % 2 != 0) && ((x % 10) % 2 !=\
    \ 0), nums))\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpatnt5xyj.jl:18\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpatnt5xyj.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpatnt5xyj.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpatnt5xyj.jl:19\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpatnt5xyj.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpatnt5xyj.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpatnt5xyj.jl:20\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpatnt5xyj.jl:20 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpatnt5xyj.jl:15\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpatnt5xyj.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    #enter code here\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpi36d1nmz.jl:16\n  Test threw exception\n\
    \  Expression: candidate([5, -2, 1, -5]) == 0\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmpi36d1nmz.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi36d1nmz.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi36d1nmz.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpi36d1nmz.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([15, -73, 14, -15]) == 1\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmpi36d1nmz.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi36d1nmz.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] to"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi36d1nmz.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    res = 0\n    for num in nums\n        if num > 10 && num % 2 != 0 && num\
    \ % 10 != 0 && (num - num % 10) % 2 != 0\n            res += 1\n        end\n\
    \    end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2g697brr.jl:23\n  Expression: candidate([15,\
    \ -73, 14, -15]) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2g697brr.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2g697brr.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp2g697brr.jl:24\n  Expression: candidate([33, -2, -3, 45, 21,\
    \ 109]) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2g697brr.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2g697brr.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp2g697brr.jl:25\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2g697brr.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2g697brr.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp2g697brr.jl:26\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 0 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp2g697brr.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2g697brr.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2g697brr.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    # your code here\nend\n@testset \"Special filter tests\" begin\n    @test\
    \ specialFilter([15, -73, 14, -15]) == 1\n    @test specialFilter([33, -2, -3,\
    \ 45, 21, 109]) == 2\n    @test specialFilter([]) == 0\n    @test specialFilter([2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10]) == 0\n    @test specialFilter([-10, 10, -11, 11, -12,\
    \ -13, -14, 15, -16, 16, -17, -18, -19, -20, 30, 33, 35, 37, 39, 55, -77, -99,\
    \ 101, -111, -131, 141, -151, 161, -171, -191, 311, -313, -333, -335, -337, -339,\
    \ -355, -377, -399, 511, -531, -533, -535, -537, -539, -555, -577, -599, 711,\
    \ -731, -733, -735, -737, -739, -755, -777, -799, 911, -931, -933, -935, -937,\
    \ -939, -955, -977, -999]) == 76\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @testset not defined\nin expression starting\
    \ at /tmp/tmpkln1458r.jl:11\nin expression starting at /tmp/tmpkln1458r.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    x=0\n    for i in nums\n        if (i>10) && (i%2!=0) && (i%(i%10) ==1)\n\
    \            x+=1\n        end\n    end\n    return x\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\
    \t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45,\
    \ 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71,\
    \ -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplm414l77.jl:23\n  Expression: candidate([15,\
    \ -73, 14, -15]) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplm414l77.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplm414l77.jl:21\ntest set: Test\
    \ Failed at /tmp/tmplm414l77.jl:24\n  Expression: candidate([33, -2, -3, 45, 21,\
    \ 109]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplm414l77.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplm414l77.jl:21\ntest set: Test\
    \ Failed at /tmp/tmplm414l77.jl:25\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplm414l77.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplm414l77.jl:21\ntest set: Test\
    \ Failed at /tmp/tmplm414l77.jl:26\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 1 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmplm414l77.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplm414l77.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplm414l77.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    c = 0\n    for i = 1:length(nums)\n        if nums[i] > 10 && isodd(nums[i]\
    \ % 10) && isodd(nums[i] % 10)\n            c += 1\n        end\n    end\n   \
    \ return c\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t\
    @test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) ==\
    \ 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe1d2l1fd.jl:24\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe1d2l1fd.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe1d2l1fd.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe1d2l1fd.jl:25\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe1d2l1fd.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe1d2l1fd.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe1d2l1fd.jl:26\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpe1d2l1fd.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe1d2l1fd.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe1d2l1fd.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    n=0\n    for num in nums\n        if (num>10) & ((num%10!=0)|(num%10!=5))\
    \ & (num%2!=0) & ((num/10^(floor(log10(num))))%2!=0)\n            n+=1\n     \
    \   end\n    end\n    return n\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpnluen1oh.jl:22\n  Test threw exception\n\
    \  Expression: candidate([5, -2, 1, -5]) == 0\n  DomainError with -2.0:\n  log10\
    \ will only return a complex result if called with a complex argument. Try log10(Complex(x)).\n\
    \  Stacktrace:\n   [1] throw_complex_domainerror(f::Symbol, x::Float64)\n    \
    \ @ Base.Math ./math.jl:33\n   [2] _log(x::Float64, base::Val{10}, func::Symbol)\n\
    \     @ Base.Math ./special/log.jl:304\n   [3] log10\n     @ ./special/log.jl:270\
    \ [inlined]\n   [4] log10\n     @ ./math.jl:1221 [inlined]\n   [5] specialFilter(nums::Vector{Int64})\n\
    \     @ Main /tmp/tmpnluen1oh.jl:11\n   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpnluen1oh.jl:22 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpnluen1oh.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpnluen1oh.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([15, -73, 14, -15]) == 1\n  DomainError with -73.0:\n  log10 will\
    \ only return a complex result if called with a complex argument. Try log10(Complex(x)).\n\
    \  Stacktrace:\n   [1] throw_complex_domainerror(f::Symbol, x::Float64)\n    \
    \ @ Base.Math ./math.jl:33\n   [2] _log(x::Float64, base::Val{10}, func::Symbol)\n\
    \     @ Base.Math ./special/log.jl:304\n   [3] log10\n     @ ./special/log.jl:270\
    \ [inlined]\n   [4] log10\n     @ ./math.jl:1221 [inlined]\n   [5] specialFilter(nums::Vector{Int64})\n\
    \     @ Main /tmp/tmpnluen1oh.jl:11\n   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpnluen1oh.jl:23 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpnluen1oh.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpnluen1oh.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([33, -2, -3, 45, 21, 109]) == 2\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnluen1oh.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    nums = filter(x -> (x > 10) && iseven(x % 10) && iseven(x % 2), nums)\n\
    \    return length(nums)\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpizjuxn9s.jl:19\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpizjuxn9s.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpizjuxn9s.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpizjuxn9s.jl:20\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpizjuxn9s.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpizjuxn9s.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpizjuxn9s.jl:21\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 0 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpizjuxn9s.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpizjuxn9s.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpizjuxn9s.jl:14\n"
  exit_code: 1
  status: SyntaxError
