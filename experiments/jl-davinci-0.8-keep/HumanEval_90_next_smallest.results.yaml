name: HumanEval_90_next_smallest
language: jl
results:
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    lst = sort(lst)\n    lst = filter(!iszero, lst)\n    return lst[2]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpbu5p6y21.jl:23\\n  Test threw\
    \ exception\\n  Expression: candidate(Vector{Int64}([])) == nothing\\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [2]\\n  Stacktrace:\\n  \
    \ [1] getindex\\n     @ ./array.jl:861 [inlined]\\n   [2] next_smallest(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmpbu5p6y21.jl:14\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpbu5p6y21.jl:23 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpbu5p6y21.jl:20\\ntest set:\
    \ Test Failed at /tmp/tmpbu5p6y21.jl:24\\n  Expression: candidate([1, 1]) == nothing\\\
    n   Evaluated: 1 == nothing'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return Nothing\n    end\n    if\
    \ length(lst) == 1\n        return Nothing\n    end\n    if length(lst) == 2\n\
    \        if lst[1] < lst[2]\n            return lst[2]\n        else\n       \
    \     return lst[1]\n        end\n    end\n    minimum(setdiff(lst, minimum(lst)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    min_value\
    \ = minimum(lst)\n    min_idx = findall(x -> x == min_value, lst)\n    lst_without_min\
    \ = deleteat!(lst, min_idx)\n    return minimum(lst_without_min)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp3cajwfsn.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 1]) == nothing\\n  ArgumentError: reducing\
    \ over an empty collection is not allowed\\n  Stacktrace:\\n    [1] _empty_reduce_error()\\\
    n      @ Base ./reduce.jl:301\\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\\\
    n      @ Base ./reduce.jl:311\\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\\n      @ Base ./reduce.jl:345\\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(min)}, #unused#::Type{Int64})\\n      @ Base ./reduce.jl:331\\n    [5]\
    \ reduce_empty_iter\\n      @ ./reduce.jl:357 [inlined]\\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\\n      @ Base\
    \ ./reduce.jl:353\\n    [7] _mapreduce\\n      @ ./reduce.jl:402 [inlined]\\n\
    \    [8] _mapreduce_dim\\n      @ ./reducedim.jl:330 [inlined]\\n    [9] #mapreduce#731\\\
    n      @ ./reducedim.jl:322 [inlined]\\n   [10] mapreduce\\n      @ ./reducedim.jl:322\
    \ [inlined]\\n   [11] #_minimum#753\\n      @ ./reducedim.jl:894 [inlined]\\n\
    \   [12] _minimum\\n      @ ./reducedim.jl:894 [inlined]\\n   [13] #_minimum#752\\\
    n      @ ./reducedim.jl:893 [inlined]\\n   [14] _minimum\\n      @ ./reducedim.jl:893\
    \ [inlined]\\n   [15] #minimum#750\\n      @ ./reducedim.jl:889 [inlined]\\n \
    \  [16] minimum\\n      @ ./reducedim.jl:889 [inlined]\\n   [17] next_smallest(lst::Vector{Int64})\\\
    n      @ Main /tmp/tmp3cajwfsn.jl:18\\n   [18] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [19] macro expansion\\n      @ /tmp/tmp3cajwfsn.jl:28 [inlined]\\\
    n   [20] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [21] top-level scope\\n      @ /tmp/tmp3cajwfsn.jl:24\\ntest\
    \ set: Error During Test at /tmp/tmp3cajwfsn.jl:30\\n  Test threw exception\\\
    n  Expression: candidate([1, 1]) == nothing\\n  ArgumentError: reducing over an\
    \ empty collection is not allowed\\n  Stacktrace:\\n    [1] _empty_reduce_error()\\\
    n   "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    n = length(lst)\n    if n == 0\n        return nothing\n    end\n\
    \    if n == 1\n        return nothing\n    end\n    lst = sort(lst)\n    if n\
    \ == 2\n        if lst[1] == lst[2]\n            return nothing\n        end\n\
    \        return lst[2]\n    end\n    j = 2\n    for i = 3:n\n        if lst[j]\
    \ == lst[i]\n            continue\n        end\n        return lst[j]\n    end\n\
    \    return nothing\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptz75al0x.jl:44\n  Expression: candidate([1,\
    \ 1, 1, 1, 0]) == 1\n   Evaluated: nothing == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptz75al0x.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptz75al0x.jl:39\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptz75al0x.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    N = length(lst)\n    if N == 0\n        return nothing\n    end\n\
    \    lst = sort(lst)\n    for i in 1:N-1\n        if lst[i] < lst[i+1]\n     \
    \       return lst[i+1]\n        end\n    end\n    return nothing\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    s = sort(lst)\n    if length(s) == 0 \n        return nothing\n\
    \    elseif length(s) == 1 \n        return nothing\n    elseif length(s) == 2\n\
    \        if s[1] == s[2]\n            return nothing\n        else\n         \
    \   return s[2]\n        end\n    else \n        return s[2]\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    first = nothing\n    second = nothing\n    for item in lst\n\
    \        if first is nothing\n            first = item\n        elseif item <\
    \ first\n            second = first\n            first = item\n        elseif\
    \ second is nothing\n            second = item\n        elseif item < second\n\
    \            second = item\n        end\n    end\n    return second\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"nothing\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmplv1so47v.jl:15\nin expression starting at /tmp/tmplv1so47v.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    return sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpt84187s0.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(Vector{Int64}([])) == nothing\\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [2]\\n  Stacktrace:\\n  \
    \ [1] getindex\\n     @ ./array.jl:861 [inlined]\\n   [2] next_smallest(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmpt84187s0.jl:12\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpt84187s0.jl:21 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpt84187s0.jl:18\\ntest set:\
    \ Test Failed at /tmp/tmpt84187s0.jl:22\\n  Expression: candidate([1, 1]) == nothing\\\
    n   Evaluated: 1 == nothing'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    \n    # We can't find the 2nd smallest element if there are fewer\
    \ than 2 elements\n    if length(lst) < 2\n        return nothing\n    end\n \
    \   \n    # Get the smallest element in the list\n    min = minimum(lst)\n   \
    \ \n    # Get the list of all elements smaller than the smallest\n    smaller_than_min\
    \ = lst[lst .< min]\n    \n    # Get the smallest of these elements\n    return\
    \ minimum(smaller_than_min)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpemxp2l8u.jl:32\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4, 5]) == 2\\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\\n  Stacktrace:\\n    [1] _empty_reduce_error()\\\
    n      @ Base ./reduce.jl:301\\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\\\
    n      @ Base ./reduce.jl:311\\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\\n      @ Base ./reduce.jl:345\\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(min)}, #unused#::Type{Int64})\\n      @ Base ./reduce.jl:331\\n    [5]\
    \ reduce_empty_iter\\n      @ ./reduce.jl:357 [inlined]\\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\\n      @ Base\
    \ ./reduce.jl:353\\n    [7] _mapreduce\\n      @ ./reduce.jl:402 [inlined]\\n\
    \    [8] _mapreduce_dim\\n      @ ./reducedim.jl:330 [inlined]\\n    [9] #mapreduce#731\\\
    n      @ ./reducedim.jl:322 [inlined]\\n   [10] mapreduce\\n      @ ./reducedim.jl:322\
    \ [inlined]\\n   [11] #_minimum#753\\n      @ ./reducedim.jl:894 [inlined]\\n\
    \   [12] _minimum\\n      @ ./reducedim.jl:894 [inlined]\\n   [13] #_minimum#752\\\
    n      @ ./reducedim.jl:893 [inlined]\\n   [14] _minimum\\n      @ ./reducedim.jl:893\
    \ [inlined]\\n   [15] #minimum#750\\n      @ ./reducedim.jl:889 [inlined]\\n \
    \  [16] minimum\\n      @ ./reducedim.jl:889 [inlined]\\n   [17] next_smallest(lst::Vector{Int64})\\\
    n      @ Main /tmp/tmpemxp2l8u.jl:25\\n   [18] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [19] macro expansion\\n      @ /tmp/tmpemxp2l8u.jl:32 [inlined]\\\
    n   [20] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [21] top-level scope\\n      @ /tmp/tmpemxp2l8u.jl:31\\ntest\
    \ set: Error During Test at /tmp/tmpemxp2l8u.jl:33\\n  Test threw exception\\\
    n  Expression: candidate([5, 1, 4, 3, 2]) == 2\\n  ArgumentError: reducing over\
    \ an empty collection is not allowed\\n  Stacktrace:\\n    [1] _empty_reduce_error("
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    n = length(lst)\n    if n < 2\n        return nothing\n    end\n\
    \    # find first non-repeating element\n    i = 1\n    while i <= n-1 && lst[i]\
    \ == lst[i+1]\n        i += 1\n    end\n    if i > n-1\n        return nothing\n\
    \    end\n    # iterate over remaining elements, keeping track of the minimum\
    \ \n    min = lst[i+1]\n    for j = i+2:n\n        if lst[j] < min\n         \
    \   min = lst[j]\n        end\n    end\n    return min\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\
    \t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpuewrg89p.jl:39\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuewrg89p.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuewrg89p.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpuewrg89p.jl:42\n  Expression: candidate([1, 1, 1, 1, 0]) ==\
    \ 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuewrg89p.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuewrg89p.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpuewrg89p.jl:44\n  Expression: candidate([-35, 34, 12, -45])\
    \ == -35\n   Evaluated: -45 == -35\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuewrg89p.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuewrg89p.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuewrg89p.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    nothing = Nothing\n    if length(lst) < 2\n        return nothing\n\
    \    end\n    first_min = minimum(lst)\n    second_min = maximum(lst)\n    for\
    \ i in lst\n        if i < second_min && i > first_min\n            second_min\
    \ = i\n        end\n    end\n    if second_min == maximum(lst)\n        return\
    \ nothing\n    end\n    return second_min\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    sorted_lst\
    \ = sort(lst)\n    if sorted_lst[1] == sorted_lst[end]\n        return nothing\n\
    \    end\n    return sorted_lst[2]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    n = length(lst)\n    if n < 2\n        return nothing\n    end\n\
    \    sorted = sort(lst)\n    smallest = sorted[1]\n    for i in 2:n\n        if\
    \ sorted[i] != smallest\n            return sorted[i]\n        end\n    end\n\
    \    return nothing\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) <= 1\n        return nothing\n    end\n    sorted_lst\
    \ = sort(lst)\n    if sorted_lst[1] == sorted_lst[2]\n        return nothing\n\
    \    end\n    return sorted_lst[2]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    lst = unique(lst)\n    if length(lst) == 0\n        return nothing\n\
    \    elseif length(lst) == 1\n        return nothing\n    elseif length(lst) ==\
    \ 2\n        return nothing\n    else\n        return sort(lst)[2]\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpau3s0did.jl:32\n  Expression: candidate([1,\
    \ 1, 1, 1, 0]) == 1\n   Evaluated: nothing == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpau3s0did.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpau3s0did.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpau3s0did.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst)<2 return nothing end\n    sort!(lst)\n    return\
    \ lst[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwrjgcza5.jl:24\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwrjgcza5.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwrjgcza5.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpwrjgcza5.jl:26\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwrjgcza5.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwrjgcza5.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwrjgcza5.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2 return nothing end\n    lst = sort(lst)\n\
    \    for i in 1:length(lst)-1\n        if lst[i] != lst[i+1] return lst[i+1] end\n\
    \    end\n    return nothing\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    s =\
    \ sort(lst)\n    if s[1] == s[2]\n        return nothing\n    end\n    return\
    \ s[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if isempty(lst)\n        return nothing\n    end\n    sorted\
    \ = sort(lst)\n    if length(sorted) == 1\n        return nothing\n    end\n \
    \   if all(x -> x == sorted[1], sorted)\n        return nothing\n    end\n   \
    \ return sorted[2]\nend\n# Test\nusing Test\n@test next_smallest([1, 2, 3, 4,\
    \ 5]) == 2\n@test next_smallest([5, 1, 4, 3, 2]) == 2\n@test next_smallest([])\
    \ == nothing\n@test next_smallest([1, 1]) == nothing\nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    lst = sort(lst)\n    for i = 1:(length(lst)-1)\n        if lst[i]\
    \ != lst[i+1]\n            return lst[i+1]\n        end\n    end\n    return nothing\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if isempty(lst)\n        return\n    end\n    @assert length(lst)\
    \ >= 2\n    ind_min1 = argmin(lst)\n    ind_min2 = ind_min1\n    min1 = minimum(lst)\n\
    \    min2 = min1\n    for (i, e) in enumerate(lst)\n        if e < min1\n    \
    \        min2 = min1\n            ind_min2 = ind_min1\n            min1 = e\n\
    \            ind_min1 = i\n        elseif e < min2\n            min2 = e\n   \
    \         ind_min2 = i\n        end\n    end\n    if ind_min1 == ind_min2\n  \
    \      return\n    end\n    return min2\nend\nusing Test\n\n@testset begin\n\n\
    candidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp771930uv.jl:41\\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\\n   Evaluated: nothing == 2\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp771930uv.jl:41 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp771930uv.jl:40\\ntest set: Test\
    \ Failed at /tmp/tmp771930uv.jl:42\\n  Expression: candidate([5, 1, 4, 3, 2])\
    \ == 2\\n   Evaluated: nothing == 2\\nStacktrace:\\n [1] macro expansion\\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\\\
    n [2] macro expansion\\n   @ /tmp/tmp771930uv.jl:42 [inlined]\\n [3] macro expansion\\\
    n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp771930uv.jl:40\\ntest set: Test\
    \ Failed at /tmp/tmp771930uv.jl:45\\n  Expression: candidate([1, 1, 1, 1, 0])\
    \ == 1\\n   Evaluated: nothing == 1\\nStacktrace:\\n [1] macro expansion\\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\\\
    n [2] macro expansion\\n   @ /tmp/tmp771930uv.jl:45 [inlined]\\n [3] macro expansion\\\
    n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp771930uv.jl:40\\ntest set: Test\
    \ Failed at /tmp/tmp771930uv.jl:47\\n  Expression: candidate([-35, 34, 12, -45])\
    \ == -35\\n   Evaluated: nothing == -35\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp771930uv.jl:47 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp771930uv.jl:40\\nTest Summary:\
    \ | Pass  Fail  Total\\ntest set      |    3     4      7\\n'"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmp771930uv.jl:38\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    lst = sort(lst)\n    if length(lst) < 2\n        return nothing\n\
    \    end\n    next_smallest = lst[2]\n    return next_smallest\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmkikockt.jl:27\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmkikockt.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmkikockt.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpmkikockt.jl:29\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmkikockt.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmkikockt.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmkikockt.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    if lst[1]\
    \ < lst[2]\n        smallest = lst[1]\n        second = lst[2]\n    else\n   \
    \     smallest = lst[2]\n        second = lst[1]\n    end\n    for i = 3:length(lst)\n\
    \        if lst[i] < smallest\n            second = smallest\n            smallest\
    \ = lst[i]\n        elseif lst[i] < second\n            second = lst[i]\n    \
    \    end\n    end\n    return second\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmploocg6ej.jl:40\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmploocg6ej.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmploocg6ej.jl:36\ntest set: Test\
    \ Failed at /tmp/tmploocg6ej.jl:42\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmploocg6ej.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmploocg6ej.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmploocg6ej.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    current_min\
    \ = lst[1]\n    possible_next_min = nothing\n    for i in lst[2:end]\n       \
    \ if i < current_min\n            possible_next_min = current_min\n          \
    \  current_min = i\n        elseif i < possible_next_min\n            possible_next_min\
    \ = i\n        end\n    end\n    return possible_next_min\nend\n# Test cell: `next_smallest_test`\n\
    next_smallest([1, 2, 3, 4, 5]) == 2 || throw(TestFailed())\nnext_smallest([5,\
    \ 1, 4, 3, 2]) == 2 || throw(TestFailed())\nnext_smallest([]) == nothing || throw(TestFailed())\n\
    next_smallest([1, 1]) == nothing || throw(TestFailed())\nprintln(\"\\nPassed all\
    \ tests!\")\n \nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: None
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    @assert length(lst) > 1\n    sorted = sort(lst)\n    if sorted[1]\
    \ == sorted[2]\n        return nothing\n    else\n        return sorted[2]\n \
    \   end\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpt_pena60.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(Vector{Int64}([])) == nothing\\n  AssertionError:\
    \ length(lst) > 1\\n  Stacktrace:\\n   [1] next_smallest(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmpt_pena60.jl:12\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpt_pena60.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpt_pena60.jl:24\\nTest Summary:\
    \ | Pass  Error  Total\\ntest set      |    6      1      7\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    lst = sort(lst)\n    if length(lst) == 0 || lst[1] == lst[end]\n\
    \        return nothing\n    else\n        return lst[2]\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return\n    end\n    smallest =\
    \ minimum(lst)\n    new_lst = []\n    for i = 1:length(lst)\n        if lst[i]\
    \ > smallest\n            push!(new_lst, lst[i])\n        end\n    end\n    if\
    \ length(new_lst) == 0\n        return\n    end\n    return minimum(new_lst)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    # YOUR CODE HERE\n    if length(lst) > 1\n        minimum = lst[1]\n\
    \        next_smallest = minimum\n        for i = 2:length(lst)\n            if\
    \ lst[i] < minimum\n                minimum = lst[i]\n            elseif lst[i]\
    \ < next_smallest && lst[i] > minimum\n                next_smallest = lst[i]\n\
    \            end\n        end\n        return next_smallest\n    elseif length(lst)\
    \ == 1\n        return lst[1]\n    else\n        return nothing\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqq1evtjc.jl:35\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqq1evtjc.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqq1evtjc.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpqq1evtjc.jl:38\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqq1evtjc.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqq1evtjc.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpqq1evtjc.jl:40\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqq1evtjc.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqq1evtjc.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqq1evtjc.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    \n    if isempty(lst)\n        return nothing\n    end\n    \n\
    \    x = sort(lst)[2]\n    \n    return x\n    \nend\nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjggo1qoy.jl:30\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjggo1qoy.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjggo1qoy.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpjggo1qoy.jl:32\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjggo1qoy.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjggo1qoy.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjggo1qoy.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    \n    nextsmall = nothing\n    # Initialize the second element\
    \ with the first element of the list\n    if length(lst) >= 2 \n        lst[2]\
    \ <= lst[1] ? (nextsmall = lst[2]) : (nextsmall = lst[1])\n    end\n    \n   \
    \ # Start the loop after 2nd element\n    for i = 3:length(lst)\n        # Change\
    \ the value if the current element is less than nextsmall\n        if lst[i] <\
    \ nextsmall\n            nextsmall = lst[i]\n        end\n    end\n    \n    #\
    \ Return the result\n    return nextsmall\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp223amaw5.jl:35\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp223amaw5.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp223amaw5.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp223amaw5.jl:36\n  Expression: candidate([5, 1, 4, 3, 2]) ==\
    \ 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp223amaw5.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp223amaw5.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp223amaw5.jl:38\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp223amaw5.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp223amaw5.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp223amaw5.jl:39\n  Expression: candidate([1, 1, 1, 1, 0]) ==\
    \ 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp223amaw5.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp223amaw5.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp223amaw5.jl:40\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp223amaw5.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    # Your code here.\n    if length(lst) <= 1\n        return nothing\n\
    \    end\n    lst = unique(lst)\n    lst = sort(lst)\n    if length(lst) == 2\n\
    \        return nothing\n    end\n    return lst[2]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\
    \t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp8de1f13x.jl:31\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 1]) == nothing\\n  BoundsError: attempt\
    \ to access 1-element Vector{Int64} at index [2]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:861 [inlined]\\n   [2] next_smallest(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmp8de1f13x.jl:21\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp8de1f13x.jl:31 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp8de1f13x.jl:27\\ntest set:\
    \ Test Failed at /tmp/tmp8de1f13x.jl:32\\n  Expression: candidate([1, 1, 1, 1,\
    \ 0]) == 1\\n   Evaluated: nothing == 1'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    if\
    \ length(lst) == 1\n        return nothing\n    end\n    if length(lst) == 2\n\
    \        if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) == 2\n        if lst[1] < lst[2]\n            return lst[2]\n\
    \        end\n    end\n    if length(lst) == 2\n        if lst[1] > lst[2]\n \
    \           return lst[1]\n        end\n    end\n    if length(lst) >= 3\n   \
    \     sorted = sort(lst)\n        if sorted[1] == sorted[2]\n            return\
    \ sorted[3]\n        end\n        if sorted[2] == sorted[3]\n            return\
    \ sorted[4]\n        end\n        if sorted[3] == sorted[4]\n            return\
    \ sorted[5]\n        end\n        if sorted[1] < sorted[2] < sorted[3]\n     \
    \       return sorted[2]\n        end\n        if sorted[2] < sorted[3] < sorted[4]\n\
    \            return sorted[3]\n        end\n        if sorted[3] < sorted[4] <\
    \ sorted[5]\n            return sorted[4]\n        end\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) > 1\n        return minimum(lst[lst .!= minimum(lst)])\n\
    \    else \n        return nothing\n    end\nend\n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\
    \t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpflavvgg6.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 1]) == nothing\\n  ArgumentError: reducing\
    \ over an empty collection is not allowed\\n  Stacktrace:\\n    [1] _empty_reduce_error()\\\
    n      @ Base ./reduce.jl:301\\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\\\
    n      @ Base ./reduce.jl:311\\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\\n      @ Base ./reduce.jl:345\\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(min)}, #unused#::Type{Int64})\\n      @ Base ./reduce.jl:331\\n    [5]\
    \ reduce_empty_iter\\n      @ ./reduce.jl:357 [inlined]\\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\\n      @ Base\
    \ ./reduce.jl:353\\n    [7] _mapreduce\\n      @ ./reduce.jl:402 [inlined]\\n\
    \    [8] _mapreduce_dim\\n      @ ./reducedim.jl:330 [inlined]\\n    [9] #mapreduce#731\\\
    n      @ ./reducedim.jl:322 [inlined]\\n   [10] mapreduce\\n      @ ./reducedim.jl:322\
    \ [inlined]\\n   [11] #_minimum#753\\n      @ ./reducedim.jl:894 [inlined]\\n\
    \   [12] _minimum\\n      @ ./reducedim.jl:894 [inlined]\\n   [13] #_minimum#752\\\
    n      @ ./reducedim.jl:893 [inlined]\\n   [14] _minimum\\n      @ ./reducedim.jl:893\
    \ [inlined]\\n   [15] #minimum#750\\n      @ ./reducedim.jl:889 [inlined]\\n \
    \  [16] minimum\\n      @ ./reducedim.jl:889 [inlined]\\n   [17] next_smallest(lst::Vector{Int64})\\\
    n      @ Main /tmp/tmpflavvgg6.jl:13\\n   [18] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [19] macro expansion\\n      @ /tmp/tmpflavvgg6.jl:27 [inlined]\\\
    n   [20] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [21] top-level scope\\n      @ /tmp/tmpflavvgg6.jl:23\\ntest\
    \ set: Error During Test at /tmp/tmpflavvgg6.jl:29\\n  Test threw exception\\\
    n  Expression: candidate([1, 1]) == nothing\\n  ArgumentError: reducing over an\
    \ empty collection is not allowed\\n  Stacktrace:\\n    [1] _empty_reduce_error()\\\
    n   "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    if\
    \ length(lst) == 1\n        return nothing\n    end\n    if length(lst) == 2\n\
    \        if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    sorted_list = sort(lst)\n    for i = 1:length(sorted_list)\n        if i\
    \ == length(sorted_list)\n            return nothing\n        end\n        if\
    \ sorted_list[i] == sorted_list[i+1]\n            continue\n        end\n    \
    \    return sorted_list[i+1]\n    end\n    return nothing\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5])\
    \ == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    # sort\n\
    \    smallest = sort(lst)[1]\n    # find first different one\n    for i in 2:length(lst)\n\
    \        if lst[i] != smallest\n            return lst[i]\n        end\n    end\n\
    \    return nothing\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc39li_58.jl:31\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc39li_58.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc39li_58.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpc39li_58.jl:36\n  Expression: candidate([-35, 34, 12, -45])\
    \ == -35\n   Evaluated: 34 == -35\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc39li_58.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc39li_58.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc39li_58.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplx94g_17.jl:25\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplx94g_17.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplx94g_17.jl:21\ntest set: Test\
    \ Failed at /tmp/tmplx94g_17.jl:27\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplx94g_17.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplx94g_17.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplx94g_17.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    # your code goes here\nend\nusing Test\n\n@testset begin\n\n\
    candidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvo3wqffy.jl:19\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\n   Evaluated: nothing == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvo3wqffy.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvo3wqffy.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpvo3wqffy.jl:20\n  Expression: candidate([5, 1, 4, 3, 2]) ==\
    \ 2\n   Evaluated: nothing == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvo3wqffy.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvo3wqffy.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpvo3wqffy.jl:23\n  Expression: candidate([1, 1, 1, 1, 0]) ==\
    \ 1\n   Evaluated: nothing == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvo3wqffy.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvo3wqffy.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpvo3wqffy.jl:25\n  Expression: candidate([-35, 34, 12, -45])\
    \ == -35\n   Evaluated: nothing == -35\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpvo3wqffy.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvo3wqffy.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvo3wqffy.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    lst = sort(lst)\n    for i in 1:length(lst)\n        if i < length(lst)\
    \ && lst[i] != lst[i+1]\n            return lst[i+1]\n        end\n    end\n \
    \   return nothing\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if isempty(lst) || length(lst) == 1 \n        return nothing\n\
    \    end\n    smallest = lst[1]\n    sm = lst[1]\n    for i = 2:length(lst)\n\
    \        if lst[i] < smallest\n            sm = smallest\n            smallest\
    \ = lst[i]\n        elseif lst[i] > smallest && lst[i] < sm\n            sm =\
    \ lst[i]\n        end\n    end\n    return sm\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpisusm6w5.jl:32\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpisusm6w5.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpisusm6w5.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpisusm6w5.jl:35\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpisusm6w5.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpisusm6w5.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpisusm6w5.jl:37\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpisusm6w5.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpisusm6w5.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpisusm6w5.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    i = sort(lst)\n    if length(i) > 1\n        return i[2]\n  \
    \  else\n        return nothing\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps1e9_m0l.jl:27\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps1e9_m0l.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps1e9_m0l.jl:23\ntest set: Test\
    \ Failed at /tmp/tmps1e9_m0l.jl:29\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps1e9_m0l.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps1e9_m0l.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps1e9_m0l.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst)<2\n        return nothing\n    end\n    list =\
    \ sort(lst)\n    min_ = list[1]\n    for i in list\n        if i != min_\n   \
    \         return i\n        end\n    end\n    return nothing\nend\nprintln(next_smallest([1,\
    \ 2, 3, 4, 5]))\nprintln(next_smallest([5, 1, 4, 3, 2]))\nprintln(next_smallest([]))\n\
    println(next_smallest([1, 1]))\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: b'2\n2\n'
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    n = length(lst)\n    if n == 0\n        return nothing\n    end\n\
    \    if n == 1\n        return nothing\n    end\n    if n == 2\n        if lst[1]\
    \ == lst[2]\n            return nothing\n        end\n        return minimum(lst)\n\
    \    end\n    min1 = lst[1]\n    min2 = lst[2]\n    if min1 > min2\n        min1,\
    \ min2 = min2, min1\n    end\n    for i in 3:n\n        if lst[i] < min1\n   \
    \         min2 = min1\n            min1 = lst[i]\n        elseif lst[i] < min2\n\
    \            min2 = lst[i]\n        end\n    end\n    if min1 == min2\n      \
    \  return nothing\n    end\n    return min2\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    return minimum(n for n in lst if n > minimum(lst))\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp5atgfg8l.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(Vector{Int64}([])) == nothing\\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\\n  Stacktrace:\\n    [1] _empty_reduce_error()\\\
    n      @ Base ./reduce.jl:301\\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\\\
    n      @ Base ./reduce.jl:311\\n    [3] reduce_empty(op::Base.BottomRF{typeof(min)},\
    \ #unused#::Type{Int64})\\n      @ Base ./reduce.jl:330\\n    [4] reduce_empty(op::Base.FilteringRF{var\"\
    #1#2\"{Vector{Int64}}, Base.BottomRF{typeof(min)}}, #unused#::Type{Int64})\\n\
    \      @ Base ./reduce.jl:332\\n    [5] reduce_empty_iter\\n      @ ./reduce.jl:357\
    \ [inlined]\\n    [6] reduce_empty_iter\\n      @ ./reduce.jl:356 [inlined]\\\
    n    [7] foldl_impl\\n      @ ./reduce.jl:49 [inlined]\\n    [8] mapfoldl_impl\\\
    n      @ ./reduce.jl:44 [inlined]\\n    [9] #mapfoldl#244\\n      @ ./reduce.jl:162\
    \ [inlined]\\n   [10] mapfoldl\\n      @ ./reduce.jl:162 [inlined]\\n   [11] #mapreduce#248\\\
    n      @ ./reduce.jl:289 [inlined]\\n   [12] mapreduce\\n      @ ./reduce.jl:289\
    \ [inlined]\\n   [13] #minimum#259\\n      @ ./reduce.jl:769 [inlined]\\n   [14]\
    \ minimum\\n      @ ./reduce.jl:769 [inlined]\\n   [15] next_smallest(lst::Vector{Int64})\\\
    n      @ Main /tmp/tmp5atgfg8l.jl:12\\n   [16] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [17] macro expansion\\n      @ /tmp/tmp5atgfg8l.jl:21 [inlined]\\\
    n   [18] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [19] top-level scope\\n      @ /tmp/tmp5atgfg8l.jl:18\\ntest\
    \ set: Error During Test at /tmp/tmp5atgfg8l.jl:22\\n  Test threw exception\\\
    n  Expression: candidate([1, 1]) == nothing\\n  ArgumentError: reducing over an\
    \ empty collection is not allowed\\n  Stacktrace:\\n    [1] _empty_reduce_error()\\\
    n      @ Base ./reduce.jl:301\\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\\\
    n      @ Base ./reduce.jl:311\\n    [3] reduce_empty(op::Base.BottomRF{typeof(min)},\
    \ #unused"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    \"\"\"\n    Smallest element of the list.\n    \"\"\"\n    if\
    \ isempty(lst)\n        return nothing\n    end\n    if length(lst) == 1\n   \
    \     return nothing\n    end\n    min_val = minimum(lst)\n    min_index = findfirst(lst,\
    \ min_val)\n    deleteat!(lst, min_index)\n    return minimum(lst)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    max_value\
    \ = maximum(lst)\n    min_value = minimum(lst)\n    if length(lst) == 1\n    \
    \    return nothing\n    end\n    if (lst[1] == max_value) & (lst[2] == max_value)\n\
    \        return nothing\n    end\n    if (lst[1] == min_value) & (lst[2] == min_value)\n\
    \        return nothing\n    end\n    for i in 2:length(lst)\n        if (lst[i-1]\
    \ > lst[i]) & (lst[i] < max_value)\n            max_value = lst[i]\n        end\n\
    \    end\n    return max_value\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjt17356g.jl:38\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\n   Evaluated: 5 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjt17356g.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjt17356g.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpjt17356g.jl:39\n  Expression: candidate([5, 1, 4, 3, 2]) ==\
    \ 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjt17356g.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjt17356g.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpjt17356g.jl:42\n  Expression: candidate([1, 1, 1, 1, 0]) ==\
    \ 1\n   Evaluated: nothing == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjt17356g.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjt17356g.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpjt17356g.jl:44\n  Expression: candidate([-35, 34, 12, -45])\
    \ == -35\n   Evaluated: -45 == -35\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjt17356g.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjt17356g.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjt17356g.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ findmin(setdiff(lst, findmin(lst)))[1]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpnixnv7of.jl:23\\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\\n   Evaluated: 3 == 2\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpnixnv7of.jl:23 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpnixnv7of.jl:21\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    lst = sort(lst)\n    if length(lst) == 0\n        return nothing\n\
    \    elseif length(lst) < 2\n        return nothing\n    elseif length(lst) ==\
    \ 2\n        if lst[1] == lst[2]\n            return nothing\n        else\n \
    \           return lst[2]\n        end\n    else\n        return lst[2]\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    sorted_lst = sort(lst)\n    for i in 2:length(sorted_lst)\n \
    \       if sorted_lst[i] != sorted_lst[i-1]\n            return sorted_lst[i]\n\
    \        end\n    end\n    return\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    s = sort(lst)\n    if length(s) < 2\n        return nothing\n\
    \    end\n    if s[1] == s[2]\n        return nothing\n    end\n    return s[2]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    min\
    \ = findmin(lst)\n    deleteat!(lst, find(x -> x == min, lst))\n    return findmin(lst)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpxzqcr6us.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4, 5]) == 2\\n  UndefVarError:\
    \ find not defined\\n  Stacktrace:\\n   [1] next_smallest(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmpxzqcr6us.jl:16\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpxzqcr6us.jl:24 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpxzqcr6us.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpxzqcr6us.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 1, 4, 3, 2]) == 2\\n  UndefVarError: find not defined\\n  Stacktrace:\\\
    n   [1] next_smallest(lst::Vector{Int64})\\n     @ Main /tmp/tmpxzqcr6us.jl:16\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpxzqcr6us.jl:25 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpxzqcr6us.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpxzqcr6us.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 1]) == nothing\\n  UndefVarError: find not defined\\n  Stacktrace:\\\
    n   [1] next_smallest(lst::Vector{Int64})\\n     @ Main /tmp/tmpxzqcr6us.jl:16\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpxzqcr6us.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpxzqcr6us.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpxzqcr6us.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 1, 1, 1, 0]) == 1\\n  UndefVarError: find not defined\\n  Stacktrace:\\\
    n   [1] next_smallest(lst::Vector{Int64})\\n     @ Main /tmp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    if\
    \ length(lst) == 1\n        return nothing\n    end\n    res = sort(lst)[2]\n\
    \    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpblwouqap.jl:29\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpblwouqap.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpblwouqap.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpblwouqap.jl:31\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpblwouqap.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpblwouqap.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpblwouqap.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    sort!(lst)\n\
    \    min = lst[1]\n    second_min = lst[2]\n    for i in lst\n        if i > min\n\
    \            second_min = i\n            break\n        end\n    end\n    if second_min\
    \ == min\n        return nothing\n    end\n    return second_min\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) > 1\n        n_lst = sort(lst)\n        for (i,x)\
    \ in enumerate(n_lst)\n            if i != 1\n                if n_lst[i-1] !=\
    \ x\n                    return x\n                end\n            end\n    \
    \    end\n    end\n    return nothing\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst)<2 return nothing end\n    x=sort(lst)[2]\n   \
    \ x==lst[1] ? nothing : x\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5vnfg662.jl:25\n  Expression: candidate([1,\
    \ 1, 1, 1, 0]) == 1\n   Evaluated: nothing == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5vnfg662.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5vnfg662.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp5vnfg662.jl:27\n  Expression: candidate([-35, 34, 12, -45])\
    \ == -35\n   Evaluated: nothing == -35\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5vnfg662.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5vnfg662.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5vnfg662.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    if\
    \ length(lst) < 2 || length(unique(lst)) == 1\n        return nothing\n    end\n\
    \    for i in 1:length(lst)\n        if i == length(lst)\n            return nothing\n\
    \        end\n        if lst[i] > lst[i+1]\n            return lst[i+1]\n    \
    \    end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjal1b4h5.jl:32\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\n   Evaluated: nothing == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjal1b4h5.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjal1b4h5.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpjal1b4h5.jl:33\n  Expression: candidate([5, 1, 4, 3, 2]) ==\
    \ 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjal1b4h5.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjal1b4h5.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpjal1b4h5.jl:36\n  Expression: candidate([1, 1, 1, 1, 0]) ==\
    \ 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjal1b4h5.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjal1b4h5.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpjal1b4h5.jl:38\n  Expression: candidate([-35, 34, 12, -45])\
    \ == -35\n   Evaluated: 12 == -35\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjal1b4h5.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjal1b4h5.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjal1b4h5.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    # by default is Nothing, nothing is returned if the input is\
    \ empty or there is only one element\n    result = nothing\n    # check if the\
    \ length of list is greater than 1\n    if length(lst) > 1\n        # sort the\
    \ list\n        sorted_lst = sort(lst)\n        # get the second smallest element\n\
    \        result = sorted_lst[2]\n    end\n    # return the 2nd smallest element\
    \ or nothing\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplxqxm1i6.jl:32\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplxqxm1i6.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplxqxm1i6.jl:28\ntest set: Test\
    \ Failed at /tmp/tmplxqxm1i6.jl:34\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplxqxm1i6.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplxqxm1i6.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplxqxm1i6.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    if\
    \ length(lst) == 1\n        return nothing\n    end\n    sort!(lst)\n    return\
    \ lst[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy1x3ax2a.jl:29\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy1x3ax2a.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy1x3ax2a.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpy1x3ax2a.jl:31\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy1x3ax2a.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy1x3ax2a.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy1x3ax2a.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    sorted\
    \ = sort(lst)\n    return sorted[2]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_qgb_zbt.jl:26\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_qgb_zbt.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_qgb_zbt.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp_qgb_zbt.jl:28\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_qgb_zbt.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_qgb_zbt.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_qgb_zbt.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    if\
    \ length(lst) == 1\n        return nothing\n    end\n    if length(lst) == 2\n\
    \        if lst[1] < lst[2]\n            return lst[2]\n        else\n       \
    \     return lst[1]\n        end\n    end\n    if lst[1] < lst[2]\n        return\
    \ next_smallest(lst[2:end])\n    else\n        return next_smallest([lst[1]]*length(lst[2:end])\
    \ .+ lst[2:end])\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpuhbb87xq.jl:36\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\n   Evaluated: 5 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuhbb87xq.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuhbb87xq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpuhbb87xq.jl:37\n  Expression: candidate([5, 1, 4, 3, 2]) ==\
    \ 2\n   Evaluated: 71 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuhbb87xq.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuhbb87xq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpuhbb87xq.jl:39\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuhbb87xq.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuhbb87xq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpuhbb87xq.jl:40\n  Expression: candidate([1, 1, 1, 1, 0]) ==\
    \ 1\n   Evaluated: 60 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuhbb87xq.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuhbb87xq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpuhbb87xq.jl:41\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuhbb87xq.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if isempty(lst)\n        return nothing\n    end\n    if length(lst)\
    \ == 1\n        return nothing\n    end\n    sort!(lst)\n    return lst[2]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpu05oz2zu.jl:29\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu05oz2zu.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu05oz2zu.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpu05oz2zu.jl:31\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu05oz2zu.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu05oz2zu.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu05oz2zu.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    if\
    \ length(lst) == 1\n        return nothing\n    end\n    if length(lst) == 2\n\
    \        if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    sorted = sort(lst)\n    return sorted[2]\nend\n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\
    \t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi0b0rifj.jl:19\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\n   Evaluated: nothing == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi0b0rifj.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi0b0rifj.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpi0b0rifj.jl:20\n  Expression: candidate([5, 1, 4, 3, 2]) ==\
    \ 2\n   Evaluated: nothing == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi0b0rifj.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi0b0rifj.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpi0b0rifj.jl:23\n  Expression: candidate([1, 1, 1, 1, 0]) ==\
    \ 1\n   Evaluated: nothing == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi0b0rifj.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi0b0rifj.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpi0b0rifj.jl:25\n  Expression: candidate([-35, 34, 12, -45])\
    \ == -35\n   Evaluated: nothing == -35\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpi0b0rifj.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi0b0rifj.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi0b0rifj.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    # Your code goes here.\n    return nothing\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmr1lhl_v.jl:20\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\n   Evaluated: nothing == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmr1lhl_v.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmr1lhl_v.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpmr1lhl_v.jl:21\n  Expression: candidate([5, 1, 4, 3, 2]) ==\
    \ 2\n   Evaluated: nothing == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmr1lhl_v.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmr1lhl_v.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpmr1lhl_v.jl:24\n  Expression: candidate([1, 1, 1, 1, 0]) ==\
    \ 1\n   Evaluated: nothing == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmr1lhl_v.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmr1lhl_v.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpmr1lhl_v.jl:26\n  Expression: candidate([-35, 34, 12, -45])\
    \ == -35\n   Evaluated: nothing == -35\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpmr1lhl_v.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmr1lhl_v.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmr1lhl_v.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    sorted_lst = sort(lst)\n    if length(sorted_lst) < 2 \n    \
    \    return nothing\n    elseif length(sorted_lst) == 2 && sorted_lst[1] == sorted_lst[2]\n\
    \        return nothing\n    else\n        return sorted_lst[2]\n    end\nend\n\
    \ \nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    # YOUR\
    \ CODE HERE\n    sort!(lst)\n    return lst[2]\nend\n@testset \"1 element\" begin\n\
    \    @test next_smallest([1]) == nothing\nend\n@testset \"2 elements\" begin\n\
    \    @test next_smallest([1, 2]) == 2\n    @test next_smallest([2, 1]) == 2\n\
    end\n@testset \"3 elements\" begin\n    @test next_smallest([1, 2, 3]) == 2\n\
    \    @test next_smallest([3, 2, 1]) == 2\n    @test next_smallest([1, 3, 2]) ==\
    \ 2\nend\n@testset \"random\" begin\n    @test next_smallest([1, 2, 3, 4, 5])\
    \ == 2\n    @test next_smallest([5, 1, 4, 3, 2]) == 2\n    @test next_smallest([])\
    \ == nothing\n    @test next_smallest([1, 1]) == nothing\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5])\
    \ == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @testset not defined\nin expression starting\
    \ at /tmp/tmp1_n4cmux.jl:19\nin expression starting at /tmp/tmp1_n4cmux.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2 \n        return nothing\n    end \n    sorted\
    \ = sort(lst)\n    for (i, v) in enumerate(sorted)\n        if i < length(sorted)\
    \ && v != sorted[i+1]\n            return sorted[i+1]\n        end\n    end\n\
    \    return nothing\nend \nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    # look for the second minimum value in list\n    vals = unique(lst)\n\
    \    if length(vals) < 2\n        return nothing\n    else\n        return vals[2]\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps04ffy1k.jl:26\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps04ffy1k.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps04ffy1k.jl:24\ntest set: Test\
    \ Failed at /tmp/tmps04ffy1k.jl:29\n  Expression: candidate([1, 1, 1, 1, 0]) ==\
    \ 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps04ffy1k.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps04ffy1k.jl:24\ntest set: Test\
    \ Failed at /tmp/tmps04ffy1k.jl:31\n  Expression: candidate([-35, 34, 12, -45])\
    \ == -35\n   Evaluated: 34 == -35\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps04ffy1k.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps04ffy1k.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps04ffy1k.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if isempty(lst) || length(lst) < 2\n        return nothing\n\
    \    end\n    return first(lst[lst .> minimum(lst)])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\
    \t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpb24mwk1d.jl:23\\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\\n   Evaluated: 5 == 2\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpb24mwk1d.jl:23 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpb24mwk1d.jl:21\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    # YOUR CODE HERE\n    sort(lst)\n    if length(lst) < 2\n   \
    \     return nothing\n    elseif unique(lst) == 1\n        return nothing\n  \
    \  else \n        return lst[2]\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8qcvy4t0.jl:28\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8qcvy4t0.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8qcvy4t0.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp8qcvy4t0.jl:30\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8qcvy4t0.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8qcvy4t0.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp8qcvy4t0.jl:32\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8qcvy4t0.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8qcvy4t0.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp8qcvy4t0.jl:33\n  Expression: candidate([-35, 34, 12, -45])\
    \ == -35\n   Evaluated: 34 == -35\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8qcvy4t0.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8qcvy4t0.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8qcvy4t0.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if (length(lst) == 0)\n        return nothing\n    end\n    min1\
    \ = lst[1]\n    min2 = lst[1]\n    for i = 2:length(lst)\n        if (lst[i] <=\
    \ min1)\n            min2 = min1\n            min1 = lst[i]\n        elseif (lst[i]\
    \ < min2)\n            min2 = lst[i]\n        end\n    end\n    if (min1 != min2)\n\
    \        return min2\n    else\n        return nothing\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8a1m_7qk.jl:36\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\n   Evaluated: nothing == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8a1m_7qk.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8a1m_7qk.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8a1m_7qk.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) <= 1\n        return nothing\n    end\n    list\
    \ = sort(lst)\n    return list[2]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdpm_k30m.jl:26\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdpm_k30m.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdpm_k30m.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpdpm_k30m.jl:28\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdpm_k30m.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdpm_k30m.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdpm_k30m.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    min_value\
    \ = min(lst)\n    min_value_index = findall(lst .== min_value)\n    lst_copy =\
    \ copy(lst)\n    lst_copy[min_value_index] = Inf\n    return min(lst_copy)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return nothing\n    end\n    if\
    \ length(lst) == 1 \n        return nothing\n    end\n    min, second_min = findmin(lst)\n\
    \    return second_min\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplqnc9i72.jl:26\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplqnc9i72.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplqnc9i72.jl:25\ntest set: Test\
    \ Failed at /tmp/tmplqnc9i72.jl:29\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplqnc9i72.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplqnc9i72.jl:25\ntest set: Test\
    \ Failed at /tmp/tmplqnc9i72.jl:30\n  Expression: candidate([1, 1, 1, 1, 0]) ==\
    \ 1\n   Evaluated: 5 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplqnc9i72.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplqnc9i72.jl:25\ntest set: Test\
    \ Failed at /tmp/tmplqnc9i72.jl:31\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplqnc9i72.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplqnc9i72.jl:25\ntest set: Test\
    \ Failed at /tmp/tmplqnc9i72.jl:32\n  Expression: candidate([-35, 34, 12, -45])\
    \ == -35\n   Evaluated: 4 == -35\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test."
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplqnc9i72.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    new_lst = copy(lst)\n    if length(lst) == 0\n        return\
    \ nothing\n    end\n    if length(lst) == 1\n        return nothing\n    end\n\
    \    if length(lst) == 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    sort!(new_lst)\n    new_lst[2]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5])\
    \ == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    lst2 = sort(lst)\n    # if there are duplicates, there is no\
    \ such element.\n    if length(lst2) == 0 || lst2[1] == lst2[2]\n        return\
    \ nothing\n    end\n    return lst2[2]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    lst = sort(lst)\n    if length(lst) < 2\n        return nothing\n\
    \    end\n    return lst[2]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp49q4f1jo.jl:26\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp49q4f1jo.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp49q4f1jo.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp49q4f1jo.jl:28\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp49q4f1jo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp49q4f1jo.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp49q4f1jo.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    s = sort(lst)\n    return s[2] if length(s) >= 2 else nothing\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpb82_us86.jl:11 expected\
    \ \"end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpb82_us86.jl:13\n\
    in expression starting at /tmp/tmpb82_us86.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n   \n    if length(lst) == 0\n        return nothing\n    end\n \
    \   \n    if length(lst) == 1\n        return nothing\n    end\n    \n    #p =\
    \ sort(lst)\n    #b = unique(p)\n    #min_el = b[2]\n    #return min_el\n    \n\
    \    min_el = findmin(lst)\n    min_el = minimum(min_el)\n    a = deleteat!(lst,\
    \ findall(lst, min_el))\n    return next_smallest(a)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\
    \t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    # your code goes here\nend\n \nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpklhecr55.jl:20\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\n   Evaluated: nothing == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpklhecr55.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpklhecr55.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpklhecr55.jl:21\n  Expression: candidate([5, 1, 4, 3, 2]) ==\
    \ 2\n   Evaluated: nothing == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpklhecr55.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpklhecr55.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpklhecr55.jl:24\n  Expression: candidate([1, 1, 1, 1, 0]) ==\
    \ 1\n   Evaluated: nothing == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpklhecr55.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpklhecr55.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpklhecr55.jl:26\n  Expression: candidate([-35, 34, 12, -45])\
    \ == -35\n   Evaluated: nothing == -35\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpklhecr55.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpklhecr55.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpklhecr55.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if !isempty(lst) && length(lst) >= 2\n        sorted_lst = sort(lst)\n\
    \        prev_val = sorted_lst[1]\n        for i in 2:length(sorted_lst)\n   \
    \         if sorted_lst[i] > prev_val\n                return sorted_lst[i]\n\
    \            end\n            prev_val = sorted_lst[i]\n        end\n    end\n\
    \    return nothing\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    sort!(lst)\n    i = 0\n    while i < length(lst)\n        if\
    \ lst[i+1] != lst[i]\n            return lst[i+1]\n        end\n        i += 1\n\
    \    end\n    return nothing\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp872azxh0.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4, 5]) == 2\\n  BoundsError: attempt\
    \ to access 5-element Vector{Int64} at index [0]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:861 [inlined]\\n   [2] next_smallest(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmp872azxh0.jl:15\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp872azxh0.jl:27 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp872azxh0.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmp872azxh0.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 1, 4, 3, 2]) == 2\\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [0]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:861\
    \ [inlined]\\n   [2] next_smallest(lst::Vector{Int64})\\n     @ Main /tmp/tmp872azxh0.jl:15\\\
    n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp872azxh0.jl:28 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp872azxh0.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmp872azxh0.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 1]) == nothing\\n  BoundsError: attempt to access 2-element Vector{Int64}\
    \ at index [0]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:861 [inlined]\\\
    n   [2] next_smallest(lst::Vector{Int64})\\n     @ Main /tmp/tmp872azxh0.jl:15\\\
    n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp872azxh0.jl:30 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    sorted_lst\
    \ = sort(lst)\n    last_index = length(sorted_lst)\n    last_value = sorted_lst[last_index]\n\
    \    new_last_index = last_index - 1\n    new_last_value = sorted_lst[new_last_index]\n\
    \    while last_value == new_last_value\n        new_last_index = new_last_index\
    \ - 1\n        new_last_value = sorted_lst[new_last_index]\n    end\n    return\
    \ new_last_value\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpo73ha3gm.jl:31\\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\\n   Evaluated: 4 == 2\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpo73ha3gm.jl:31 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpo73ha3gm.jl:30\\ntest set: Test\
    \ Failed at /tmp/tmpo73ha3gm.jl:32\\n  Expression: candidate([5, 1, 4, 3, 2])\
    \ == 2\\n   Evaluated: 4 == 2\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpo73ha3gm.jl:32 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpo73ha3gm.jl:30\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    for\
    \ i in 1:length(lst)\n        for j in 1:length(lst)\n            if lst[i] <\
    \ lst[j]\n                temp = lst[i]\n                lst[i] = lst[j]\n   \
    \             lst[j] = temp\n            end\n        end\n    end\n    if length(lst)\
    \ == 1\n        return nothing\n    end\n    if length(lst) == 2\n        if lst[1]\
    \ == lst[2]\n            return nothing\n        end\n    end\n    return lst[2]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    sorted_lst = sort(lst)\n    min_el = sorted_lst[1]\n    if length(sorted_lst)\
    \ < 2 || minimum(sorted_lst) == maximum(sorted_lst)\n        return nothing\n\
    \    end\n    for i in 2:length(sorted_lst)\n        if sorted_lst[i] != min_el\n\
    \            return sorted_lst[i]\n        end\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\
    \t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpk0vq6kve.jl:30\\n  Test threw\
    \ exception\\n  Expression: candidate(Vector{Int64}([])) == nothing\\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\\n  Stacktrace:\\n  \
    \ [1] getindex\\n     @ ./array.jl:861 [inlined]\\n   [2] next_smallest(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmpk0vq6kve.jl:13\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpk0vq6kve.jl:30 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpk0vq6kve.jl:27\\nTest Summary:\
    \ | Pass  Error  Total\\ntest set      |    6      1      7\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    isempty(lst) && return nothing\n    length(lst) == 1 && return\
    \ nothing\n    if length(lst) == 2\n        lst[1] == lst[2] && return nothing\n\
    \        lst[1] < lst[2] && return lst[1]\n        lst[1] > lst[2] && return lst[2]\n\
    \    end\n    sort!(lst)\n    lst[2]\nend\nnext_smallest([1, 2, 3, 4, 5]) == 2\n\
    next_smallest([5, 1, 4, 3, 2]) == 2\nnext_smallest([]) == nothing\nnext_smallest([1,\
    \ 1]) == nothing\n@testset \"seconds smallest\" begin\n    @test next_smallest([1,\
    \ 2, 3, 4, 5]) == 2\n    @test next_smallest([5, 1, 4, 3, 2]) == 2\n    @test\
    \ next_smallest([]) == nothing\n    @test next_smallest([1, 1]) == nothing\nend\n\
    \"\"\"\n    Implement a function that concatenates two lists.\n    concat([1,\
    \ 2, 3], [4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n    concat([], [1, 2, 3]) == [1, 2,\
    \ 3]\n    concat([], []) == []\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: None
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    lst_sorted\
    \ = sort(lst)\n    if length(lst_sorted) == 1\n        return nothing\n    end\n\
    \    return lst_sorted[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwp2keqvu.jl:29\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwp2keqvu.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwp2keqvu.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpwp2keqvu.jl:31\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwp2keqvu.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwp2keqvu.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwp2keqvu.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    # your code here\n    #for i in 2:length(lst)\n    #    if lst[i]\
    \ < lst[i-1]\n    #        return lst[i]\n    #    end\n    #end\n    #return\n\
    \    return (setdiff(sort(lst), minimum(lst)))[1]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\
    \t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpsnnfcqxa.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(Vector{Int64}([])) == nothing\\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\\n  Stacktrace:\\n    [1] _empty_reduce_error()\\\
    n      @ Base ./reduce.jl:301\\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\\\
    n      @ Base ./reduce.jl:311\\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\\n      @ Base ./reduce.jl:345\\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(min)}, #unused#::Type{Int64})\\n      @ Base ./reduce.jl:331\\n    [5]\
    \ reduce_empty_iter\\n      @ ./reduce.jl:357 [inlined]\\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\\n      @ Base\
    \ ./reduce.jl:353\\n    [7] _mapreduce\\n      @ ./reduce.jl:402 [inlined]\\n\
    \    [8] _mapreduce_dim\\n      @ ./reducedim.jl:330 [inlined]\\n    [9] #mapreduce#731\\\
    n      @ ./reducedim.jl:322 [inlined]\\n   [10] mapreduce\\n      @ ./reducedim.jl:322\
    \ [inlined]\\n   [11] #_minimum#753\\n      @ ./reducedim.jl:894 [inlined]\\n\
    \   [12] _minimum\\n      @ ./reducedim.jl:894 [inlined]\\n   [13] #_minimum#752\\\
    n      @ ./reducedim.jl:893 [inlined]\\n   [14] _minimum\\n      @ ./reducedim.jl:893\
    \ [inlined]\\n   [15] #minimum#750\\n      @ ./reducedim.jl:889 [inlined]\\n \
    \  [16] minimum\\n      @ ./reducedim.jl:889 [inlined]\\n   [17] next_smallest(lst::Vector{Int64})\\\
    n      @ Main /tmp/tmpsnnfcqxa.jl:19\\n   [18] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [19] macro expansion\\n      @ /tmp/tmpsnnfcqxa.jl:28 [inlined]\\\
    n   [20] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [21] top-level scope\\n      @ /tmp/tmpsnnfcqxa.jl:25\\ntest\
    \ set: Error During Test at /tmp/tmpsnnfcqxa.jl:29\\n  Test threw exception\\\
    n  Expression: candidate([1, 1]) == nothing\\n  BoundsError: attempt to access\
    \ 0-element Vector{Int64} at index [1]\\n  Stacktrace:\\n   [1] getindex\\n  "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    unique = unique(lst)\n    if(length(unique) == 0)\n        return\
    \ nothing\n    elseif(length(unique) == 1)\n        return nothing\n    else\n\
    \        sorted = sort(unique)\n        return sorted[2]\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpphzfpit_.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4, 5]) == 2\\n  UndefVarError:\
    \ unique not defined\\n  Stacktrace:\\n   [1] next_smallest(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmpphzfpit_.jl:12\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpphzfpit_.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpphzfpit_.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpphzfpit_.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 1, 4, 3, 2]) == 2\\n  UndefVarError: unique not defined\\n  Stacktrace:\\\
    n   [1] next_smallest(lst::Vector{Int64})\\n     @ Main /tmp/tmpphzfpit_.jl:12\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpphzfpit_.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpphzfpit_.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpphzfpit_.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(Vector{Int64}([])) == nothing\\n  UndefVarError: unique not defined\\\
    n  Stacktrace:\\n   [1] next_smallest(lst::Vector{Int64})\\n     @ Main /tmp/tmpphzfpit_.jl:12\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpphzfpit_.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpphzfpit_.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpphzfpit_.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 1]) == nothing\\n  UndefVarError: unique not defined\\n  Stacktrace:\\\
    n   [1] next_smallest(lst::Vector{Int64})\\n"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    a = sort(lst)\n    b = unique(a)\n    if length(a) == 0 || length(b)\
    \ == 1\n        return(nothing)\n    else\n        return(b[2])\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if isempty(lst)\n        return nothing\n    end\n    v = sort(lst)[2]\n\
    \    return v\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpiz83z8u9.jl:26\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiz83z8u9.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiz83z8u9.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpiz83z8u9.jl:28\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiz83z8u9.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiz83z8u9.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiz83z8u9.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    if\
    \ length(lst) == 1\n        return nothing\n    end\n    if length(lst) == 2\n\
    \        if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    min_value = minimum(lst)\n    min_value_index = findmin(lst)[2]\n    lst[min_value_index]\
    \ = Inf\n    return minimum(lst)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp71705xhd.jl:33\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4, 5]) == 2\\n  InexactError:\
    \ Int64(Inf)\\n  Stacktrace:\\n   [1] Int64\\n     @ ./float.jl:812 [inlined]\\\
    n   [2] convert\\n     @ ./number.jl:7 [inlined]\\n   [3] setindex!\\n     @ ./array.jl:903\
    \ [inlined]\\n   [4] next_smallest(lst::Vector{Int64})\\n     @ Main /tmp/tmp71705xhd.jl:25\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmp71705xhd.jl:33 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmp71705xhd.jl:32\\ntest set:\
    \ Error During Test at /tmp/tmp71705xhd.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 1, 4, 3, 2]) == 2\\n  InexactError: Int64(Inf)\\n  Stacktrace:\\\
    n   [1] Int64\\n     @ ./float.jl:812 [inlined]\\n   [2] convert\\n     @ ./number.jl:7\
    \ [inlined]\\n   [3] setindex!\\n     @ ./array.jl:903 [inlined]\\n   [4] next_smallest(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmp71705xhd.jl:25\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmp71705xhd.jl:34 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmp71705xhd.jl:32\\ntest set:\
    \ Error During Test at /tmp/tmp71705xhd.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 1, 1, 1, 0]) == 1\\n  InexactError: Int64(Inf)\\n  Stacktrace:\\\
    n   [1] Int64\\n     @ ./float.jl:812 [inlined]\\n   [2] convert\\n     @ ./number.jl:7\
    \ [inlined]\\n   [3] setindex!\\n     @ ./array.jl:903 [inlined]\\n   [4] next_smallest(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmp71705xhd.jl:25\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmp71705xhd.jl"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    if lst[1]\
    \ > lst[2]\n        min_ = lst[2]\n        snd_min = lst[1]\n    else\n      \
    \  min_ = lst[1]\n        snd_min = lst[2]\n    end\n    for i in 3:length(lst)\n\
    \        if lst[i] < min_\n            snd_min = min_\n            min_ = lst[i]\n\
    \        elseif lst[i] < snd_min\n            snd_min = lst[i]\n        end\n\
    \    end\n    return snd_min\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi0bbhagd.jl:40\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi0bbhagd.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi0bbhagd.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpi0bbhagd.jl:42\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi0bbhagd.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi0bbhagd.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi0bbhagd.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    if\
    \ length(lst) == 1\n        return nothing\n    end\n    s = sort(lst)\n    m\
    \ = minimum(s)\n    t = s[s .!= m]\n    return minimum(t)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5])\
    \ == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp6jmnzn1h.jl:31\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 1]) == nothing\\n  ArgumentError: reducing\
    \ over an empty collection is not allowed\\n  Stacktrace:\\n    [1] _empty_reduce_error()\\\
    n      @ Base ./reduce.jl:301\\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\\\
    n      @ Base ./reduce.jl:311\\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\\n      @ Base ./reduce.jl:345\\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(min)}, #unused#::Type{Int64})\\n      @ Base ./reduce.jl:331\\n    [5]\
    \ reduce_empty_iter\\n      @ ./reduce.jl:357 [inlined]\\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\\n      @ Base\
    \ ./reduce.jl:353\\n    [7] _mapreduce\\n      @ ./reduce.jl:402 [inlined]\\n\
    \    [8] _mapreduce_dim\\n      @ ./reducedim.jl:330 [inlined]\\n    [9] #mapreduce#731\\\
    n      @ ./reducedim.jl:322 [inlined]\\n   [10] mapreduce\\n      @ ./reducedim.jl:322\
    \ [inlined]\\n   [11] #_minimum#753\\n      @ ./reducedim.jl:894 [inlined]\\n\
    \   [12] _minimum\\n      @ ./reducedim.jl:894 [inlined]\\n   [13] #_minimum#752\\\
    n      @ ./reducedim.jl:893 [inlined]\\n   [14] _minimum\\n      @ ./reducedim.jl:893\
    \ [inlined]\\n   [15] #minimum#750\\n      @ ./reducedim.jl:889 [inlined]\\n \
    \  [16] minimum\\n      @ ./reducedim.jl:889 [inlined]\\n   [17] next_smallest(lst::Vector{Int64})\\\
    n      @ Main /tmp/tmp6jmnzn1h.jl:21\\n   [18] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [19] macro expansion\\n      @ /tmp/tmp6jmnzn1h.jl:31 [inlined]\\\
    n   [20] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [21] top-level scope\\n      @ /tmp/tmp6jmnzn1h.jl:27\\ntest\
    \ set: Error During Test at /tmp/tmp6jmnzn1h.jl:33\\n  Test threw exception\\\
    n  Expression: candidate([1, 1]) == nothing\\n  ArgumentError: reducing over an\
    \ empty collection is not allowed\\n  Stacktrace:\\n    [1] _empty_reduce_error()\\\
    n   "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    unique_lst = unique(lst)\n    if length(unique_lst) < 2\n   \
    \     return nothing\n    else \n        return unique_lst[2]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzyhby4yt.jl:25\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzyhby4yt.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzyhby4yt.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpzyhby4yt.jl:28\n  Expression: candidate([1, 1, 1, 1, 0]) ==\
    \ 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzyhby4yt.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzyhby4yt.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpzyhby4yt.jl:30\n  Expression: candidate([-35, 34, 12, -45])\
    \ == -35\n   Evaluated: 34 == -35\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzyhby4yt.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzyhby4yt.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzyhby4yt.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    next_largest\
    \ = maximum(lst)\n    next_smallest = next_largest\n    for (idx, val) in enumerate(lst)\n\
    \        if val < next_largest\n            next_smallest = next_largest\n   \
    \         next_largest = val\n        elseif val < next_smallest\n           \
    \ next_smallest = val\n        end\n    end\n    return next_smallest\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplcnt8ln9.jl:35\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplcnt8ln9.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplcnt8ln9.jl:31\ntest set: Test\
    \ Failed at /tmp/tmplcnt8ln9.jl:37\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplcnt8ln9.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplcnt8ln9.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplcnt8ln9.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    # check if there are at least 2 elements\n    # if not return\
    \ nothing\n    if length(lst) < 2 \n        return nothing\n    end \n    \n \
    \   # sort the list\n    sorted_lst = sort(lst)\n    \n    # check if there are\
    \ duplicates\n    # if so get the index of 2nd smallest element\n    # if not\
    \ get the index of 2nd element\n    if sorted_lst[1] == sorted_lst[2]\n      \
    \  second_index = 2\n    else\n        second_index = 1\n    end \n    \n    #\
    \ return 2nd smallest element\n    return sorted_lst[second_index + 1]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp6730xhr9.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 1]) == nothing\\n  BoundsError: attempt\
    \ to access 2-element Vector{Int64} at index [3]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:861 [inlined]\\n   [2] next_smallest(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmp6730xhr9.jl:31\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp6730xhr9.jl:41 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp6730xhr9.jl:37\\ntest set:\
    \ Error During Test at /tmp/tmp6730xhr9.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 1]) == nothing\\n  BoundsError: attempt to access 2-element Vector{Int64}\
    \ at index [3]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:861 [inlined]\\\
    n   [2] next_smallest(lst::Vector{Int64})\\n     @ Main /tmp/tmp6730xhr9.jl:31\\\
    n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp6730xhr9.jl:43 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp6730xhr9.jl:37\\nTest Summary:\
    \ | Pass  Error  Total\\ntest set      |    5      2      7\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnhoxvdl7.jl:25\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnhoxvdl7.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnhoxvdl7.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpnhoxvdl7.jl:27\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnhoxvdl7.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnhoxvdl7.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnhoxvdl7.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if isempty(lst) || length(lst)==1\n        return nothing\n \
    \   end\n    sml= nothing\n    nxt= nothing\n    for i in lst\n        if sml==nothing\
    \ && nxt==nothing\n            sml=i\n            nxt=i\n        elseif i<nxt\
    \ && i>sml\n            nxt=i\n        elseif i<sml\n            nxt=sml\n   \
    \         sml=i\n        end\n    end\n    return nxt\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\
    \t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptl6ulchu.jl:35\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptl6ulchu.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptl6ulchu.jl:34\ntest set: Test\
    \ Failed at /tmp/tmptl6ulchu.jl:38\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptl6ulchu.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptl6ulchu.jl:34\ntest set: Test\
    \ Failed at /tmp/tmptl6ulchu.jl:40\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptl6ulchu.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptl6ulchu.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptl6ulchu.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    # replace \"nothing\" with your own code\n    nothing\nend\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwrfkoagj.jl:20\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\n   Evaluated: nothing == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwrfkoagj.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwrfkoagj.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpwrfkoagj.jl:21\n  Expression: candidate([5, 1, 4, 3, 2]) ==\
    \ 2\n   Evaluated: nothing == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwrfkoagj.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwrfkoagj.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpwrfkoagj.jl:24\n  Expression: candidate([1, 1, 1, 1, 0]) ==\
    \ 1\n   Evaluated: nothing == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwrfkoagj.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwrfkoagj.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpwrfkoagj.jl:26\n  Expression: candidate([-35, 34, 12, -45])\
    \ == -35\n   Evaluated: nothing == -35\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwrfkoagj.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwrfkoagj.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwrfkoagj.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    \n    if !isempty(lst) && !(length(lst) == 1)\n        \n   \
    \     #sort_lst = sort(lst)\n        #sort_lst[2]\n        \n        #save memory\
    \ \n        #find minimum value\n        minimum = lst[1]\n        for i in lst\n\
    \            if i < minimum\n                minimum = i\n            end\n  \
    \      end\n        \n        #find minimum value, which is greater than the minimum\n\
    \        for i in lst\n            if i > minimum\n                return i\n\
    \            end\n        end\n    end\n    return nothing\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5])\
    \ == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkms5mcso.jl:42\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\n   Evaluated: 5 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkms5mcso.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkms5mcso.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkms5mcso.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    lst_sorted\
    \ = sort(lst)\n    for i = 1:length(lst_sorted)\n        if i == length(lst_sorted)\n\
    \            return nothing\n        end\n        if lst_sorted[i] != lst_sorted[i+1]\n\
    \            return lst_sorted[i+1]\n        end\n    end\nend\nprintln(next_smallest([1,\
    \ 2, 3, 4, 5]))\nprintln(next_smallest([5, 1, 4, 3, 2]))\nprintln(next_smallest([]))\n\
    println(next_smallest([1, 1]))\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: b'2\n2\n'
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    min_val\
    \ = minimum(lst)\n    lst_without_min = filter(x -> x != min_val, lst)\n    min_val2\
    \ = minimum(lst_without_min)\n    if length(lst_without_min) == 0\n        return\
    \ nothing\n    end\n    return min_val2\nend\nusing Test\n\n@testset begin\n\n\
    candidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpr754_1gz.jl:31\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 1]) == nothing\\n  ArgumentError: reducing\
    \ over an empty collection is not allowed\\n  Stacktrace:\\n    [1] _empty_reduce_error()\\\
    n      @ Base ./reduce.jl:301\\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\\\
    n      @ Base ./reduce.jl:311\\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\\n      @ Base ./reduce.jl:345\\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(min)}, #unused#::Type{Int64})\\n      @ Base ./reduce.jl:331\\n    [5]\
    \ reduce_empty_iter\\n      @ ./reduce.jl:357 [inlined]\\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\\n      @ Base\
    \ ./reduce.jl:353\\n    [7] _mapreduce\\n      @ ./reduce.jl:402 [inlined]\\n\
    \    [8] _mapreduce_dim\\n      @ ./reducedim.jl:330 [inlined]\\n    [9] #mapreduce#731\\\
    n      @ ./reducedim.jl:322 [inlined]\\n   [10] mapreduce\\n      @ ./reducedim.jl:322\
    \ [inlined]\\n   [11] #_minimum#753\\n      @ ./reducedim.jl:894 [inlined]\\n\
    \   [12] _minimum\\n      @ ./reducedim.jl:894 [inlined]\\n   [13] #_minimum#752\\\
    n      @ ./reducedim.jl:893 [inlined]\\n   [14] _minimum\\n      @ ./reducedim.jl:893\
    \ [inlined]\\n   [15] #minimum#750\\n      @ ./reducedim.jl:889 [inlined]\\n \
    \  [16] minimum\\n      @ ./reducedim.jl:889 [inlined]\\n   [17] next_smallest(lst::Vector{Int64})\\\
    n      @ Main /tmp/tmpr754_1gz.jl:17\\n   [18] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [19] macro expansion\\n      @ /tmp/tmpr754_1gz.jl:31 [inlined]\\\
    n   [20] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [21] top-level scope\\n      @ /tmp/tmpr754_1gz.jl:27\\ntest\
    \ set: Error During Test at /tmp/tmpr754_1gz.jl:33\\n  Test threw exception\\\
    n  Expression: candidate([1, 1]) == nothing\\n  ArgumentError: reducing over an\
    \ empty collection is not allowed\\n  Stacktrace:\\n    [1] _empty_reduce_error()\\\
    n   "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsg50se5c.jl:25\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsg50se5c.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsg50se5c.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpsg50se5c.jl:27\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsg50se5c.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsg50se5c.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsg50se5c.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    sorted = sort(lst)\n    if length(sorted) == 1\n        return(nothing)\n\
    \    elseif length(sorted) == 2\n        if sorted[1] == sorted[2]\n         \
    \   return(nothing)\n        else\n            return(sorted[2])\n        end\n\
    \    else\n        return(sorted[2])\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpy4ekp3s6.jl:32\\n  Test threw\
    \ exception\\n  Expression: candidate(Vector{Int64}([])) == nothing\\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [2]\\n  Stacktrace:\\n  \
    \ [1] getindex\\n     @ ./array.jl:861 [inlined]\\n   [2] next_smallest(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmpy4ekp3s6.jl:22\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpy4ekp3s6.jl:32 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpy4ekp3s6.jl:29\\nTest Summary:\
    \ | Pass  Error  Total\\ntest set      |    6      1      7\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    println(lst)\n    (lst[2] >= lst[1]) ? return lst[2] : return\
    \ nothing \nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: colon expected in \"?\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq_uv96a4.jl:14\nin expression starting at\
    \ /tmp/tmpq_uv96a4.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    sm = minimum(lst)\n    lst = filter(x -> x > sm, lst)\n    if\
    \ isempty(lst)\n        return nothing\n    else\n        return minimum(lst)\n\
    \    end\nend\nprintln(next_smallest([1, 2, 3, 4, 5]))\nprintln(next_smallest([5,\
    \ 1, 4, 3, 2]))\nprintln(next_smallest([]))\nprintln(next_smallest([1, 1]))\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: b'2\n2\n'
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    sort!(lst)\n    if length(lst) > 1\n        return lst[2]\n \
    \   else\n        return nothing\n    end\nend\n@testset \"test next_smallest\"\
    \ begin\n    @test next_smallest([1, 2, 3, 4, 5]) == 2\n    @test next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    @test next_smallest([]) == nothing\n    @test next_smallest([1,\
    \ 1]) == nothing\nend\n\"\"\"\n    Given a list of integers,\n    return a list\
    \ of those integers in sorted order,\n    but with any duplicates removed.\n \
    \   \n    unique_sort([1, 2, 4, 3, 2]) == [1, 2, 3, 4]\n    unique_sort([]) ==\
    \ []\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @testset not defined\nin expression starting\
    \ at /tmp/tmp8v7rjowt.jl:19\nin expression starting at /tmp/tmp8v7rjowt.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    sorted_lst\
    \ = sort(lst)\n    val = sorted_lst[2]\n    if length(sorted_lst) > 2\n      \
    \  if sorted_lst[1] == val\n            return next_smallest(sorted_lst[2:end])\n\
    \        end\n    end\n    return val\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp54rrhu89.jl:32\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp54rrhu89.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp54rrhu89.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp54rrhu89.jl:34\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp54rrhu89.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp54rrhu89.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp54rrhu89.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return nothing\n    end\n    min_n\
    \ = minimum(lst)\n    lst = [x for x in lst if x > min_n]\n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    return minimum(lst)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    n = length(lst)\n    small = 999999999999999\n    next_small\
    \ = 999999999999999\n    for i in 1:n\n        if lst[i] <= small\n          \
    \  next_small = small\n            small = lst[i]\n        elseif lst[i] <= next_small\n\
    \            next_small = lst[i]\n        end\n    end\n    if next_small == 999999999999999\n\
    \        return nothing\n    else\n        return next_small\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphn8ka180.jl:37\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphn8ka180.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphn8ka180.jl:33\ntest set: Test\
    \ Failed at /tmp/tmphn8ka180.jl:39\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphn8ka180.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphn8ka180.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphn8ka180.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) > 1\n        return sort(lst)[2]\n    else\n \
    \       return nothing\n    end\nend\n    \n    \n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\
    \t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfqofcsgf.jl:29\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfqofcsgf.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfqofcsgf.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpfqofcsgf.jl:31\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfqofcsgf.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfqofcsgf.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfqofcsgf.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) > 1\n        return sort(lst)[2]\n    else\n \
    \       return nothing\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb20ukrd8.jl:26\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb20ukrd8.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb20ukrd8.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpb20ukrd8.jl:28\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb20ukrd8.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb20ukrd8.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb20ukrd8.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    sorted_lst = sort(lst)\n    if length(sorted_lst) == 0\n    \
    \    return\n    elseif length(sorted_lst) == 1\n        return\n    elseif length(sorted_lst)\
    \ == 2\n        if sorted_lst[1] == sorted_lst[2]\n            return\n      \
    \  else \n            return sorted_lst[2]\n        end\n    else\n        if\
    \ sorted_lst[1] == sorted_lst[2]\n            return next_smallest(sorted_lst[2:end])\n\
    \        else\n            return sorted_lst[2]\n        end\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    return\
    \ findmin(setdiff(lst, minimum(lst)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    sorted_lst = sort(lst)\n    if length(sorted_lst) > 1\n     \
    \   return sorted_lst[2]\n    else\n        return nothing\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp_ewk50y.jl:27\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp_ewk50y.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp_ewk50y.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpp_ewk50y.jl:29\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp_ewk50y.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp_ewk50y.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp_ewk50y.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    #next_smallest([1, 2, 3, 4, 5]) == 2\n    #next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    #next_smallest([]) == None\n    #next_smallest([1, 1])\
    \ == None\n    if length(lst) == 0\n        return nothing\n    end\n    if length(lst)\
    \ == 1\n        return nothing\n    end\n    if length(lst) == 2\n        if lst[1]\
    \ == lst[2]\n            return nothing\n        end\n    end\n    lst = sort(lst)\n\
    \    for i in 2:length(lst)\n        if lst[i] != lst[i-1]\n            return\
    \ lst[i]\n        end\n    end\n    return nothing\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\
    \t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if isempty(lst)\n        return nothing\n    end\n    if length(lst)\
    \ == 1\n        return nothing\n    end\n    return minimum(filter(lst, (x) ->\
    \ x > minimum(lst)))\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    sm_1\
    \ = minimum(lst)\n    lst = deleteat!(lst, findall(x -> x == sm_1, lst))\n   \
    \ sm_2 = minimum(lst)\n    return sm_2\nend\nusing Test\n\n@testset begin\n\n\
    candidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp75_jbpes.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 1]) == nothing\\n  ArgumentError: reducing\
    \ over an empty collection is not allowed\\n  Stacktrace:\\n    [1] _empty_reduce_error()\\\
    n      @ Base ./reduce.jl:301\\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\\\
    n      @ Base ./reduce.jl:311\\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\\n      @ Base ./reduce.jl:345\\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(min)}, #unused#::Type{Int64})\\n      @ Base ./reduce.jl:331\\n    [5]\
    \ reduce_empty_iter\\n      @ ./reduce.jl:357 [inlined]\\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\\n      @ Base\
    \ ./reduce.jl:353\\n    [7] _mapreduce\\n      @ ./reduce.jl:402 [inlined]\\n\
    \    [8] _mapreduce_dim\\n      @ ./reducedim.jl:330 [inlined]\\n    [9] #mapreduce#731\\\
    n      @ ./reducedim.jl:322 [inlined]\\n   [10] mapreduce\\n      @ ./reducedim.jl:322\
    \ [inlined]\\n   [11] #_minimum#753\\n      @ ./reducedim.jl:894 [inlined]\\n\
    \   [12] _minimum\\n      @ ./reducedim.jl:894 [inlined]\\n   [13] #_minimum#752\\\
    n      @ ./reducedim.jl:893 [inlined]\\n   [14] _minimum\\n      @ ./reducedim.jl:893\
    \ [inlined]\\n   [15] #minimum#750\\n      @ ./reducedim.jl:889 [inlined]\\n \
    \  [16] minimum\\n      @ ./reducedim.jl:889 [inlined]\\n   [17] next_smallest(lst::Vector{Int64})\\\
    n      @ Main /tmp/tmp75_jbpes.jl:17\\n   [18] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [19] macro expansion\\n      @ /tmp/tmp75_jbpes.jl:28 [inlined]\\\
    n   [20] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [21] top-level scope\\n      @ /tmp/tmp75_jbpes.jl:24\\ntest\
    \ set: Error During Test at /tmp/tmp75_jbpes.jl:30\\n  Test threw exception\\\
    n  Expression: candidate([1, 1]) == nothing\\n  ArgumentError: reducing over an\
    \ empty collection is not allowed\\n  Stacktrace:\\n    [1] _empty_reduce_error()\\\
    n   "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    next_value = nothing\n    is_any_value_found = false\n    for\
    \ i in 1:length(lst)\n        if lst[i] != minimum(lst)\n            if !is_any_value_found\n\
    \                next_value = lst[i]\n                is_any_value_found = true\n\
    \            else\n                if lst[i] < next_value\n                  \
    \  next_value = lst[i]\n                end\n            end\n        end\n  \
    \  end\n    return next_value\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    if\
    \ length(lst) == 1\n        return nothing\n    end\n    lst = sort(lst)\n   \
    \ return lst[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc4l350a4.jl:29\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc4l350a4.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc4l350a4.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpc4l350a4.jl:31\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc4l350a4.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc4l350a4.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc4l350a4.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    sort!(lst)\n    if length(lst) == 0\n        return nothing\n\
    \    elseif length(lst) == 1\n        return nothing\n    elseif length(lst) ==\
    \ 2\n        if lst[1] == lst[2]\n            return nothing\n        else\n \
    \           return lst[2]\n        end\n    else\n        if lst[1] == lst[2]\n\
    \            return next_smallest(lst[2:end])\n        else\n            return\
    \ lst[2]\n        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    n = length(lst)\n    if n == 0\n        return nothing\n    end\n\
    \    if n == 1\n        return nothing\n    end\n    smallest = lst[1]\n    next_smallest\
    \ = lst[2]\n    for i in 1:n\n        if smallest > lst[i]\n            next_smallest\
    \ = smallest\n            smallest = lst[i]\n        elseif next_smallest > lst[i]\
    \ && smallest < lst[i]\n            next_smallest = lst[i]\n        end\n    end\n\
    \    return next_smallest\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpux4orbun.jl:39\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpux4orbun.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpux4orbun.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpux4orbun.jl:41\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpux4orbun.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpux4orbun.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpux4orbun.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ next_smallest!(sort(lst))\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmprpgpl5nw.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4, 5]) == 2\\n  UndefVarError:\
    \ next_smallest! not defined\\n  Stacktrace:\\n   [1] next_smallest(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmprpgpl5nw.jl:15\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmprpgpl5nw.jl:22 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmprpgpl5nw.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmprpgpl5nw.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 1, 4, 3, 2]) == 2\\n  UndefVarError: next_smallest! not defined\\\
    n  Stacktrace:\\n   [1] next_smallest(lst::Vector{Int64})\\n     @ Main /tmp/tmprpgpl5nw.jl:15\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmprpgpl5nw.jl:23 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmprpgpl5nw.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmprpgpl5nw.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 1]) == nothing\\n  UndefVarError: next_smallest! not defined\\\
    n  Stacktrace:\\n   [1] next_smallest(lst::Vector{Int64})\\n     @ Main /tmp/tmprpgpl5nw.jl:15\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmprpgpl5nw.jl:25 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmprpgpl5nw.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmprpgpl5nw.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 1, 1, 1, 0]) == 1\\n  UndefVarError: next_smallest! not defined\\\
    n  Stacktrace:\\n   [1] next_smalle"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    # find minimum element\n    min_el, _ = findmin(lst)\n    # remove\
    \ all elements equal to the minimum element\n    new_lst = filter(e -> e != min_el,\
    \ lst)\n    if isempty(new_lst)\n        return nothing\n    else\n        # find\
    \ minimum element in new_lst\n        min_el, _ = findmin(new_lst)\n        return\
    \ min_el\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpm95aq_mn.jl:31\\n  Test threw\
    \ exception\\n  Expression: candidate(Vector{Int64}([])) == nothing\\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\\n  Stacktrace:\\n    [1] _empty_reduce_error()\\\
    n      @ Base ./reduce.jl:301\\n    [2] mapreduce_empty(f::Function, op::Base.BottomRF{typeof(Base._rf_findmin)},\
    \ T::Type)\\n      @ Base ./reduce.jl:344\\n    [3] reduce_empty(op::Base.MappingRF{Base.var\"\
    #262#263\"{typeof(identity)}, Base.BottomRF{typeof(Base._rf_findmin)}}, #unused#::Type{Pair{Int64,\
    \ Int64}})\\n      @ Base ./reduce.jl:331\\n    [4] reduce_empty_iter\\n     \
    \ @ ./reduce.jl:357 [inlined]\\n    [5] reduce_empty_iter\\n      @ ./reduce.jl:356\
    \ [inlined]\\n    [6] foldl_impl\\n      @ ./reduce.jl:49 [inlined]\\n    [7]\
    \ mapfoldl_impl\\n      @ ./reduce.jl:44 [inlined]\\n    [8] #mapfoldl#244\\n\
    \      @ ./reduce.jl:162 [inlined]\\n    [9] mapfoldl\\n      @ ./reduce.jl:162\
    \ [inlined]\\n   [10] findmin\\n      @ ./reduce.jl:862 [inlined]\\n   [11] _findmin\\\
    n      @ ./reduce.jl:888 [inlined]\\n   [12] #findmin#783\\n      @ ./reducedim.jl:1005\
    \ [inlined]\\n   [13] findmin\\n      @ ./reducedim.jl:1005 [inlined]\\n   [14]\
    \ next_smallest(lst::Vector{Int64})\\n      @ Main /tmp/tmpm95aq_mn.jl:13\\n \
    \  [15] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [16] macro expansion\\n      @ /tmp/tmpm95aq_mn.jl:31 [inlined]\\\
    n   [17] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [18] top-level scope\\n      @ /tmp/tmpm95aq_mn.jl:28\\nTest\
    \ Summary: | Pass  Error  Total\\ntest set      |    6      1      7\\n'"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    m =\
    \ minimum(lst)\n    lst = setdiff(lst, m)\n    minimum(lst)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpiffz3ccc.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 1]) == nothing\\n  ArgumentError: reducing\
    \ over an empty collection is not allowed\\n  Stacktrace:\\n    [1] _empty_reduce_error()\\\
    n      @ Base ./reduce.jl:301\\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\\\
    n      @ Base ./reduce.jl:311\\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\\n      @ Base ./reduce.jl:345\\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(min)}, #unused#::Type{Int64})\\n      @ Base ./reduce.jl:331\\n    [5]\
    \ reduce_empty_iter\\n      @ ./reduce.jl:357 [inlined]\\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\\n      @ Base\
    \ ./reduce.jl:353\\n    [7] _mapreduce\\n      @ ./reduce.jl:402 [inlined]\\n\
    \    [8] _mapreduce_dim\\n      @ ./reducedim.jl:330 [inlined]\\n    [9] #mapreduce#731\\\
    n      @ ./reducedim.jl:322 [inlined]\\n   [10] mapreduce\\n      @ ./reducedim.jl:322\
    \ [inlined]\\n   [11] #_minimum#753\\n      @ ./reducedim.jl:894 [inlined]\\n\
    \   [12] _minimum\\n      @ ./reducedim.jl:894 [inlined]\\n   [13] #_minimum#752\\\
    n      @ ./reducedim.jl:893 [inlined]\\n   [14] _minimum\\n      @ ./reducedim.jl:893\
    \ [inlined]\\n   [15] #minimum#750\\n      @ ./reducedim.jl:889 [inlined]\\n \
    \  [16] minimum\\n      @ ./reducedim.jl:889 [inlined]\\n   [17] next_smallest(lst::Vector{Int64})\\\
    n      @ Main /tmp/tmpiffz3ccc.jl:17\\n   [18] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [19] macro expansion\\n      @ /tmp/tmpiffz3ccc.jl:27 [inlined]\\\
    n   [20] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [21] top-level scope\\n      @ /tmp/tmpiffz3ccc.jl:23\\ntest\
    \ set: Error During Test at /tmp/tmpiffz3ccc.jl:29\\n  Test threw exception\\\
    n  Expression: candidate([1, 1]) == nothing\\n  ArgumentError: reducing over an\
    \ empty collection is not allowed\\n  Stacktrace:\\n    [1] _empty_reduce_error()\\\
    n   "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    n = length(lst)\n    if n == 0\n        return nothing\n    end\n\
    \    if n == 1\n        return nothing\n    end\n    if n == 2\n        return\
    \ nothing\n    end\n    minimum = lst[1]\n    second_minimum = lst[2]\n    if\
    \ minimum > second_minimum\n        minimum, second_minimum = second_minimum,\
    \ minimum\n    end\n    for i in 3:n\n        if lst[i] < minimum\n          \
    \  second_minimum = minimum\n            minimum = lst[i]\n        elseif lst[i]\
    \ < second_minimum\n            second_minimum = lst[i]\n        end\n    end\n\
    \    return second_minimum\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    first_min\
    \ = minimum(lst)\n    new_lst = [i for i in lst if i > first_min]\n    if length(new_lst)\
    \ < 1\n        return nothing\n    end\n    return minimum(new_lst)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) > 1\n        unique_lst = unique(lst)\n      \
    \  return unique_lst[2]\n    else\n        return nothing\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpuifs_0vc.jl:25\\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\\n   Evaluated: 1 == 2\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpuifs_0vc.jl:25 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpuifs_0vc.jl:23\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2 \n        return nothing\n    end\n    sorted_lst\
    \ = sort(lst)\n    return sorted_lst[2]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1sbvf7tc.jl:26\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1sbvf7tc.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1sbvf7tc.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp1sbvf7tc.jl:28\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1sbvf7tc.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1sbvf7tc.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1sbvf7tc.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    smallest\
    \ = minimum(lst)\n    second_smallest = maximum(lst)\n    if length(lst) == 1\n\
    \        return nothing\n    end\n    for i in lst\n        if i != smallest &&\
    \ i < second_smallest\n            second_smallest = i\n        end\n    end\n\
    \    if second_smallest == maximum(lst)\n        return nothing\n    end\n   \
    \ return second_smallest\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphto9jfoo.jl:39\n  Expression: candidate([1,\
    \ 1, 1, 1, 0]) == 1\n   Evaluated: nothing == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphto9jfoo.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphto9jfoo.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphto9jfoo.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    # write your code here\n    lst_min = findmin(lst)\n    idx =\
    \ findall(x -> x == lst_min, lst)\n    lst_copy = deleteat!(copy(lst), idx)\n\
    \    return findmin(lst_copy)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpg3qmoyy_.jl:19\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\n   Evaluated: nothing == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg3qmoyy_.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg3qmoyy_.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpg3qmoyy_.jl:20\n  Expression: candidate([5, 1, 4, 3, 2]) ==\
    \ 2\n   Evaluated: nothing == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg3qmoyy_.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg3qmoyy_.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpg3qmoyy_.jl:23\n  Expression: candidate([1, 1, 1, 1, 0]) ==\
    \ 1\n   Evaluated: nothing == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg3qmoyy_.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg3qmoyy_.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpg3qmoyy_.jl:25\n  Expression: candidate([-35, 34, 12, -45])\
    \ == -35\n   Evaluated: nothing == -35\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpg3qmoyy_.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg3qmoyy_.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg3qmoyy_.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    @assert length(lst) > 1\n    minimum(lst) != maximum(lst) &&\
    \ 2nd_smallest(lst) != minimum(lst) && 2nd_smallest(lst) != maximum(lst) ? 2nd_smallest(lst)\
    \ : nothing\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmprxfabuum.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4, 5]) == 2\\n  UndefVarError:\
    \ nd_smallest not defined\\n  Stacktrace:\\n   [1] next_smallest(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmprxfabuum.jl:13\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmprxfabuum.jl:20 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmprxfabuum.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmprxfabuum.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 1, 4, 3, 2]) == 2\\n  UndefVarError: nd_smallest not defined\\\
    n  Stacktrace:\\n   [1] next_smallest(lst::Vector{Int64})\\n     @ Main /tmp/tmprxfabuum.jl:13\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmprxfabuum.jl:21 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmprxfabuum.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmprxfabuum.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(Vector{Int64}([])) == nothing\\n  AssertionError: length(lst) > 1\\\
    n  Stacktrace:\\n   [1] next_smallest(lst::Vector{Int64})\\n     @ Main /tmp/tmprxfabuum.jl:12\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmprxfabuum.jl:22 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmprxfabuum.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmprxfabuum.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 1, 1, 1, 0]) == 1\\n  UndefVarError: nd_smallest not defined\\\
    n  Stacktrace:\\n   [1] next_smallest(lst::"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    isempty(lst) && return nothing\n    unique(lst) == lst || return\
    \ nothing\n    sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9d4fae1z.jl:25\n  Expression: candidate([1,\
    \ 1, 1, 1, 0]) == 1\n   Evaluated: nothing == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9d4fae1z.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9d4fae1z.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9d4fae1z.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if isempty(lst)\n        return nothing\n    end\n    if length(lst)\
    \ == 1\n        return nothing\n    end\n    if length(lst) == 2\n        if lst[1]\
    \ == lst[2]\n            return nothing\n        end\n    end\n    first_smallest\
    \ = lst[1]\n    second_smallest = lst[2]\n    for i in lst\n        if i <= first_smallest\n\
    \            second_smallest = first_smallest\n            first_smallest = i\n\
    \        end\n        if i < second_smallest && i > first_smallest\n         \
    \   second_smallest = i\n        end\n    end\n    return second_smallest\nend\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcpq30f11.jl:41\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcpq30f11.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcpq30f11.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcpq30f11.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) <= 1\n        return nothing\n    end\n    s =\
    \ sort(lst)\n    last = s[1]\n    for i in s[2:end]\n        if i != last\n  \
    \          return i\n        end\n        last = i\n    end\n    return nothing\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    #the smallest integer\n    #the 2nd smallest integer\n    #smallest\
    \ integer index\n    #2nd smallest integer index\n    s = lst[1]\n    s2 = s\n\
    \    s_i = 1\n    s2_i = 1\n    #for each index\n    for i in 1:length(lst)\n\
    \        #is the element at the index smaller than s?\n        if lst[i] < s\n\
    \            #store the element in s2\n            s2 = s\n            #change\
    \ the value of s\n            s = lst[i]\n            #store the index in s2_i\n\
    \            s2_i = s_i\n            #change the value of s_i\n            s_i\
    \ = i\n        #is the element at the index smaller than s2 and s?\n        elseif\
    \ lst[i] < s2\n            #store the element in s2\n            s2 = lst[i]\n\
    \            #store the index in s2_i\n            s2_i = i\n        end\n   \
    \ end\n    #is s2 greater than the smallest element?\n    if s2 > s\n        #return\
    \ s2\n        return s2\n    else\n        #return nothing\n        return nothing\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpkq3gyzdr.jl:54\\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\\n   Evaluated: nothing == 2\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpkq3gyzdr.jl:54 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpkq3gyzdr.jl:53\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ minimum(lst[lst .!= minimum(lst)])\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpjlubnb_c.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 1]) == nothing\\n  ArgumentError: reducing\
    \ over an empty collection is not allowed\\n  Stacktrace:\\n    [1] _empty_reduce_error()\\\
    n      @ Base ./reduce.jl:301\\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\\\
    n      @ Base ./reduce.jl:311\\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\\n      @ Base ./reduce.jl:345\\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(min)}, #unused#::Type{Int64})\\n      @ Base ./reduce.jl:331\\n    [5]\
    \ reduce_empty_iter\\n      @ ./reduce.jl:357 [inlined]\\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\\n      @ Base\
    \ ./reduce.jl:353\\n    [7] _mapreduce\\n      @ ./reduce.jl:402 [inlined]\\n\
    \    [8] _mapreduce_dim\\n      @ ./reducedim.jl:330 [inlined]\\n    [9] #mapreduce#731\\\
    n      @ ./reducedim.jl:322 [inlined]\\n   [10] mapreduce\\n      @ ./reducedim.jl:322\
    \ [inlined]\\n   [11] #_minimum#753\\n      @ ./reducedim.jl:894 [inlined]\\n\
    \   [12] _minimum\\n      @ ./reducedim.jl:894 [inlined]\\n   [13] #_minimum#752\\\
    n      @ ./reducedim.jl:893 [inlined]\\n   [14] _minimum\\n      @ ./reducedim.jl:893\
    \ [inlined]\\n   [15] #minimum#750\\n      @ ./reducedim.jl:889 [inlined]\\n \
    \  [16] minimum\\n      @ ./reducedim.jl:889 [inlined]\\n   [17] next_smallest(lst::Vector{Int64})\\\
    n      @ Main /tmp/tmpjlubnb_c.jl:15\\n   [18] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [19] macro expansion\\n      @ /tmp/tmpjlubnb_c.jl:25 [inlined]\\\
    n   [20] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [21] top-level scope\\n      @ /tmp/tmpjlubnb_c.jl:21\\ntest\
    \ set: Error During Test at /tmp/tmpjlubnb_c.jl:27\\n  Test threw exception\\\
    n  Expression: candidate([1, 1]) == nothing\\n  ArgumentError: reducing over an\
    \ empty collection is not allowed\\n  Stacktrace:\\n    [1] _empty_reduce_error()\\\
    n   "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    smallest,\
    \ next_smallest = lst[1], lst[2]\n    for i in lst[3:end]\n        if i < smallest\n\
    \            smallest, next_smallest = i, smallest\n        elseif i < next_smallest\n\
    \            next_smallest = i\n        end\n    end\n    return next_smallest\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp2h39hg3.jl:31\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\n   Evaluated: 3 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp2h39hg3.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp2h39hg3.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpp2h39hg3.jl:33\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp2h39hg3.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp2h39hg3.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpp2h39hg3.jl:35\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp2h39hg3.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp2h39hg3.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp2h39hg3.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    first_min,\
    \ second_min = first(lst), first(lst)\n    for elem in lst\n        if elem <\
    \ first_min\n            second_min = first_min\n            first_min = elem\n\
    \        elseif elem < second_min\n            second_min = elem\n        end\n\
    \    end\n    if second_min == first_min\n        return nothing\n    end\n  \
    \  return second_min\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx1_j_viw.jl:34\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\n   Evaluated: nothing == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx1_j_viw.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx1_j_viw.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx1_j_viw.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    small\
    \ = lst[1]\n    nxt_small = lst[2]\n    for i in 3:length(lst)\n        if lst[i]\
    \ < small\n            nxt_small = small\n            small = lst[i]\n       \
    \ elseif lst[i] < nxt_small\n            nxt_small = lst[i]\n        end\n   \
    \ end\n    return nxt_small\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpn65748gx.jl:33\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\n   Evaluated: 3 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn65748gx.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn65748gx.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpn65748gx.jl:35\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn65748gx.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn65748gx.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpn65748gx.jl:37\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn65748gx.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn65748gx.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn65748gx.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    if\
    \ length(lst) == 1\n        return nothing\n    end\n    lst = sort(lst)\n   \
    \ for i in 1:length(lst)\n        if i == length(lst)\n            return nothing\n\
    \        end\n        if lst[i] != lst[i+1]\n            return lst[i+1]\n   \
    \     end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    sort!(lst)\n    # your code here\nend\n \nusing Test\n\n@testset\
    \ begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\
    \t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    sorted_lst = sort(lst)\n    if length(sorted_lst) == 0\n    \
    \    return nothing\n    elseif length(sorted_lst) == 1\n        return nothing\n\
    \    elseif sorted_lst[1] == sorted_lst[2]\n        return nothing\n    else\n\
    \        return sorted_lst[2]\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    # Return `Nothing` if there are not enough elements in the list\n\
    \    if length(lst) < 2\n        return nothing\n    end\n    \n    # `next_smallest`\
    \ is the 2nd smallest element\n    # `smallest` is the smallest element so far\n\
    \    next_smallest = smallest = lst[1]\n    \n    # For each element in the list\n\
    \    for i in 2:length(lst)\n        x = lst[i]\n        \n        # Check if\
    \ `x` is smaller than `smallest`\n        if x < smallest\n            # Store\
    \ `smallest` in `next_smallest`\n            next_smallest = smallest\n      \
    \      # Update `smallest`\n            smallest = x\n        elseif x < next_smallest\n\
    \            # Update `next_smallest`\n            next_smallest = x\n       \
    \ end\n    end\n    \n    # Return `next_smallest`\n    return next_smallest\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq19tffh2.jl:45\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq19tffh2.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq19tffh2.jl:44\ntest set: Test\
    \ Failed at /tmp/tmpq19tffh2.jl:48\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq19tffh2.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq19tffh2.jl:44\ntest set: Test\
    \ Failed at /tmp/tmpq19tffh2.jl:50\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq19tffh2.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq19tffh2.jl:44\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq19tffh2.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    smallest,\
    \ second_smallest = lst[1], lst[2]\n    for i in 3:length(lst)\n        if lst[i]\
    \ <= smallest\n            second_smallest = smallest\n            smallest =\
    \ lst[i]\n        elseif lst[i] < second_smallest\n            second_smallest\
    \ = lst[i]\n        end\n    end\n    if smallest == second_smallest\n       \
    \ return nothing\n    end\n    return second_smallest\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\
    \t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5zmjirgg.jl:35\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\n   Evaluated: 3 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5zmjirgg.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5zmjirgg.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5zmjirgg.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    n =\
    \ lst[1]\n    m = lst[1]\n    for i in lst\n        if i < n\n            n =\
    \ i\n        end\n    end\n    for i in lst\n        if i > n and i < m\n    \
    \        m = i\n        end\n    end\n    if m == n\n        return nothing\n\
    \    end\n    return m\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"i\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3zjv87_p.jl:23\nin expression starting at /tmp/tmp3zjv87_p.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) <= 1\n        return nothing\n    end\n    min_1\
    \ = lst[1]\n    min_2 = min_1\n    for i = 2:length(lst)\n        if lst[i] <\
    \ min_1\n            min_2 = min_1\n            min_1 = lst[i]\n        elseif\
    \ lst[i] < min_2\n            min_2 = lst[i]\n        end\n    end\n    if min_1\
    \ == min_2\n        return nothing\n    end\n    return min_2\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3y261voy.jl:35\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\n   Evaluated: nothing == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3y261voy.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3y261voy.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3y261voy.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    if\
    \ length(lst) == 1\n        return nothing\n    end\n    min = minimum(lst)\n\
    \    lst2 = lst[lst .!= min]\n    return minimum(lst2)\nend\n@testset \"next_smallest\
    \ test\" begin\n    @test next_smallest([1, 2, 3, 4, 5]) == 2\n    @test next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    @test next_smallest([]) == nothing\n    @test next_smallest([1,\
    \ 1]) == nothing\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @testset not defined\nin expression starting\
    \ at /tmp/tmpkhg91xuy.jl:22\nin expression starting at /tmp/tmpkhg91xuy.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    # hint: sort() may help you\n    if length(lst) == 0\n      \
    \  return nothing\n    end\n    elif length(lst) == 1\n        return nothing\n\
    \    end\n    \n    sorted_lst = sort(lst)\n    for i in range(1, length(sorted_lst))\n\
    \        if sorted_lst[i] != sorted_lst[i-1]\n            return sorted_lst[i]\n\
    \        end\n    end\n    return nothing\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpq2t8g0x_.jl:11 expected\
    \ \"end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq2t8g0x_.jl:16\n\
    in expression starting at /tmp/tmpq2t8g0x_.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    lst = sort(lst)\n    if length(lst) <= 1\n        return nothing\n\
    \    end\n    return lst[2]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp14u86v43.jl:26\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp14u86v43.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp14u86v43.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp14u86v43.jl:28\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp14u86v43.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp14u86v43.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp14u86v43.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    smallest\
    \ = nothing\n    for i in lst\n        if isnothing(smallest)\n            smallest\
    \ = i\n        elseif i < smallest\n            smallest = i\n        end\n  \
    \  end\n    second_smallest = nothing\n    for i in lst\n        if smallest <\
    \ i && isnothing(second_smallest)\n            second_smallest = i\n        elseif\
    \ i < second_smallest\n            second_smallest = i\n        end\n    end\n\
    \    return second_smallest\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    # for this one, we don't really want to sort the list\n    #\
    \ we would want to do a linear scan, keeping track of the min and min2\n    min,\
    \ min2 = nothing, nothing\n    for i in lst\n        if min === nothing || i <\
    \ min\n            min2 = min\n            min = i\n        elseif min2 === nothing\
    \ || i < min2\n            min2 = i\n        end\n    end\n    return min2\nend\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp18_eukv7.jl:33\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp18_eukv7.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp18_eukv7.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp18_eukv7.jl:35\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp18_eukv7.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp18_eukv7.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp18_eukv7.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    if\
    \ length(lst) == 1\n        return nothing\n    end\n    inds = sortperm(lst)\n\
    \    if inds[2] != inds[1]\n        return lst[inds[2]]\n    else\n        return\
    \ nothing\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl1sywc5o.jl:33\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl1sywc5o.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl1sywc5o.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpl1sywc5o.jl:35\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl1sywc5o.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl1sywc5o.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl1sywc5o.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if isempty(lst) return nothing end\n    if length(lst) < 2 return\
    \ nothing end\n    if lst[1] < lst[2] return lst[2] end\n    i = 2\n    while\
    \ i <= length(lst)\n        j = 1\n        while j < i\n            if lst[j]\
    \ < lst[i]\n                k = i + 1\n                while k <= length(lst)\n\
    \                    if lst[j] < lst[k]\n                        return lst[j]\n\
    \                    end\n                    k += 1\n                end\n  \
    \          end\n            j += 1\n        end\n        i += 1\n    end\n   \
    \ return nothing\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6cryuqf1.jl:40\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6cryuqf1.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6cryuqf1.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp6cryuqf1.jl:43\n  Expression: candidate([1, 1, 1, 1, 0]) ==\
    \ 1\n   Evaluated: nothing == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6cryuqf1.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6cryuqf1.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp6cryuqf1.jl:45\n  Expression: candidate([-35, 34, 12, -45])\
    \ == -35\n   Evaluated: 34 == -35\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6cryuqf1.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6cryuqf1.jl:38\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6cryuqf1.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    if\
    \ length(lst) == 1\n        return nothing\n    end\n    if length(lst) == 2\n\
    \        if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if lst[1] < lst[2]\n        smallest = lst[1]\n        next_smallest = lst[2]\n\
    \    else\n        smallest = lst[2]\n        next_smallest = lst[1]\n    end\n\
    \    for (index, value) in enumerate(lst)\n        if index == 1 || index == 2\n\
    \            continue\n        end\n        if value < smallest\n            next_smallest\
    \ = smallest\n            smallest = value\n        elseif value < next_smallest\n\
    \            next_smallest = value\n        end\n    end\n    return next_smallest\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    if\
    \ length(lst) == 1\n        return nothing\n    end\n    smallest = lst[1]\n \
    \   next_smallest = nothing\n    for i = 2:length(lst)\n        if lst[i] < smallest\n\
    \            next_smallest = smallest\n            smallest = lst[i]\n       \
    \ elseif next_smallest == nothing || lst[i] < next_smallest\n            next_smallest\
    \ = lst[i]\n        end\n    end\n    return next_smallest\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5])\
    \ == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpawbmg_k1.jl:38\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpawbmg_k1.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpawbmg_k1.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpawbmg_k1.jl:40\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpawbmg_k1.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpawbmg_k1.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpawbmg_k1.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) <= 1\n        return nothing\n    end\n    sorted_lst\
    \ = sort(lst)\n    for i = 2:length(sorted_lst)\n        if sorted_lst[i] != sorted_lst[i-1]\n\
    \            return sorted_lst[i]\n        end\n    end\n    return nothing\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    if\
    \ length(lst) == 1\n        return nothing\n    end\n    if length(lst) == 2\n\
    \        if lst[1] != lst[2]\n            return min(lst)\n        else\n    \
    \        return nothing\n        end\n    end\n    temp = lst[1]\n    for i =\
    \ 2:length(lst)\n        if lst[i] < temp\n            temp = lst[i]\n       \
    \ end\n    end\n    for i = 1:length(lst)\n        if lst[i] == temp\n       \
    \     deleteat!(lst, i)\n        end\n    end\n    return next_smallest(lst)\n\
    end\n@assert next_smallest([1, 2, 3, 4, 5]) == 2\n@assert next_smallest([5, 1,\
    \ 4, 3, 2]) == 2\n@assert next_smallest([]) == nothing\n@assert next_smallest([1,\
    \ 1]) == nothing\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: None
  stderr: "b'ERROR: LoadError: BoundsError: attempt to access 4-element Vector{Int64}\
    \ at index [5]\\nStacktrace:\\n [1] getindex\\n   @ ./array.jl:861 [inlined]\\\
    n [2] next_smallest(lst::Vector{Int64})\\n   @ '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    lst\
    \ = sort(lst)\n    prev = lst[1]\n    for v in lst[2:end]\n        if v != prev\n\
    \            return v\n        end\n        prev = v\n    end\n    return nothing\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    return if isempty(lst) || length(lst) == 1 nothing else \n  \
    \      minimum(setdiff(lst, minimum(lst)))\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\
    \t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpsd4wzsk8.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 1]) == nothing\\n  ArgumentError: reducing\
    \ over an empty collection is not allowed\\n  Stacktrace:\\n    [1] _empty_reduce_error()\\\
    n      @ Base ./reduce.jl:301\\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\\\
    n      @ Base ./reduce.jl:311\\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\\n      @ Base ./reduce.jl:345\\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(min)}, #unused#::Type{Int64})\\n      @ Base ./reduce.jl:331\\n    [5]\
    \ reduce_empty_iter\\n      @ ./reduce.jl:357 [inlined]\\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\\n      @ Base\
    \ ./reduce.jl:353\\n    [7] _mapreduce\\n      @ ./reduce.jl:402 [inlined]\\n\
    \    [8] _mapreduce_dim\\n      @ ./reducedim.jl:330 [inlined]\\n    [9] #mapreduce#731\\\
    n      @ ./reducedim.jl:322 [inlined]\\n   [10] mapreduce\\n      @ ./reducedim.jl:322\
    \ [inlined]\\n   [11] #_minimum#753\\n      @ ./reducedim.jl:894 [inlined]\\n\
    \   [12] _minimum\\n      @ ./reducedim.jl:894 [inlined]\\n   [13] #_minimum#752\\\
    n      @ ./reducedim.jl:893 [inlined]\\n   [14] _minimum\\n      @ ./reducedim.jl:893\
    \ [inlined]\\n   [15] #minimum#750\\n      @ ./reducedim.jl:889 [inlined]\\n \
    \  [16] minimum\\n      @ ./reducedim.jl:889 [inlined]\\n   [17] next_smallest(lst::Vector{Int64})\\\
    n      @ Main /tmp/tmpsd4wzsk8.jl:13\\n   [18] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [19] macro expansion\\n      @ /tmp/tmpsd4wzsk8.jl:24 [inlined]\\\
    n   [20] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [21] top-level scope\\n      @ /tmp/tmpsd4wzsk8.jl:20\\ntest\
    \ set: Error During Test at /tmp/tmpsd4wzsk8.jl:26\\n  Test threw exception\\\
    n  Expression: candidate([1, 1]) == nothing\\n  ArgumentError: reducing over an\
    \ empty collection is not allowed\\n  Stacktrace:\\n    [1] _empty_reduce_error()\\\
    n   "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    sort!(lst)\n\
    \    ctr = 0\n    for i in lst\n        if i != lst[1]\n            return i\n\
    \        end\n        ctr += 1\n    end\n    if ctr == length(lst)\n        return\
    \ nothing\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    first\
    \ = lst[1]\n    second = nothing\n    for element in lst[2:end]\n        if element\
    \ < first\n            second = first\n            first = element\n        elseif\
    \ element > first && (second == nothing || element < second)\n            second\
    \ = element\n        end\n    end\n    return second\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\
    \t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    min_val\
    \ = minimum(lst)\n    min_index = findall(lst .== min_val)\n    if length(min_index)\
    \ > 1\n        return nothing\n    end\n    new_lst = copy(lst)\n    deleteat!(new_lst,\
    \ min_index)\n    if length(new_lst) > 0\n        return minimum(new_lst)\n  \
    \  else\n        return nothing\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    for i in 1:length(lst)\n        for j in 1:length(lst)\n    \
    \        if (lst[i] < lst[j]) && (i != j)\n                return lst[i]\n   \
    \         end\n        end\n    end\n    return nothing\nend\nlst = [1, 2, 3,\
    \ 4, 5]\nprintln(next_smallest(lst))\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "1\ntest set: Test Failed at /tmp/tmp346exg7m.jl:28\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp346exg7m.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp346exg7m.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp346exg7m.jl:29\n  Expression: candidate([5, 1, 4, 3, 2]) ==\
    \ 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp346exg7m.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp346exg7m.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp346exg7m.jl:32\n  Expression: candidate([1, 1, 1, 1, 0]) ==\
    \ 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp346exg7m.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp346exg7m.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp346exg7m.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    first\
    \ = find_smallest(lst)\n    smallest = first\n    position = first[2]\n    for\
    \ i in 1:length(lst)\n        if lst[i] < smallest && i != position\n        \
    \    smallest = lst[i]\n            position = i\n        end\n    end\n    return\
    \ smallest\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpe8wzcem1.jl:31\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4, 5]) == 2\\n  UndefVarError:\
    \ find_smallest not defined\\n  Stacktrace:\\n   [1] next_smallest(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmpe8wzcem1.jl:15\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpe8wzcem1.jl:31 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpe8wzcem1.jl:30\\ntest set:\
    \ Error During Test at /tmp/tmpe8wzcem1.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 1, 4, 3, 2]) == 2\\n  UndefVarError: find_smallest not defined\\\
    n  Stacktrace:\\n   [1] next_smallest(lst::Vector{Int64})\\n     @ Main /tmp/tmpe8wzcem1.jl:15\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpe8wzcem1.jl:32 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpe8wzcem1.jl:30\\ntest set:\
    \ Error During Test at /tmp/tmpe8wzcem1.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 1]) == nothing\\n  UndefVarError: find_smallest not defined\\\
    n  Stacktrace:\\n   [1] next_smallest(lst::Vector{Int64})\\n     @ Main /tmp/tmpe8wzcem1.jl:15\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpe8wzcem1.jl:34 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpe8wzcem1.jl:30\\ntest set:\
    \ Error During Test at /tmp/tmpe8wzcem1.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 1, 1, 1, 0]) == 1\\n  UndefVarError: find_smallest not defined\\\
    n  Stacktrace:\\n   [1] next_smallest(l"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    mn =\
    \ minimum(lst)\n    mn2 = 100\n    for i in lst\n        if i > mn\n         \
    \   mn2 = min(mn2, i)\n        end\n    end\n    if mn2 == 100\n        return\
    \ nothing\n    end\n    return mn2\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    sort!(lst)\n\
    \    if lst[1] == lst[2]\n        return nothing\n    end\n    return lst[2]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8xg1rkdm.jl:19\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\n   Evaluated: nothing == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8xg1rkdm.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8xg1rkdm.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp8xg1rkdm.jl:20\n  Expression: candidate([5, 1, 4, 3, 2]) ==\
    \ 2\n   Evaluated: nothing == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8xg1rkdm.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8xg1rkdm.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp8xg1rkdm.jl:23\n  Expression: candidate([1, 1, 1, 1, 0]) ==\
    \ 1\n   Evaluated: nothing == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8xg1rkdm.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8xg1rkdm.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp8xg1rkdm.jl:25\n  Expression: candidate([-35, 34, 12, -45])\
    \ == -35\n   Evaluated: nothing == -35\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8xg1rkdm.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8xg1rkdm.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8xg1rkdm.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    n = length(lst)\n    if n == 0\n        return nothing\n    end\n\
    \    if n == 1\n        return nothing\n    end\n    if n == 2\n        return\
    \ nothing\n    end\n    @assert n >= 3\n    # unique elements in increasing order\n\
    \    v = unique(sort(lst))\n    if length(v) == 1\n        return nothing\n  \
    \  end\n    if length(v) == 2\n        return nothing\n    end\n    return v[2]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9fnogm6v.jl:42\n  Expression: candidate([1,\
    \ 1, 1, 1, 0]) == 1\n   Evaluated: nothing == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9fnogm6v.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9fnogm6v.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9fnogm6v.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    smallest_num, smallest_idx = findmin(lst)\n    lst[smallest_idx]\
    \ = Inf # so we get next smallest after smallest_num\n    next_smallest_num, next_smallest_idx\
    \ = findmin(lst)\n    return next_smallest_num\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpec7w7c8u.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4, 5]) == 2\\n  InexactError:\
    \ Int64(Inf)\\n  Stacktrace:\\n   [1] Int64\\n     @ ./float.jl:812 [inlined]\\\
    n   [2] convert\\n     @ ./number.jl:7 [inlined]\\n   [3] setindex!\\n     @ ./array.jl:903\
    \ [inlined]\\n   [4] next_smallest(lst::Vector{Int64})\\n     @ Main /tmp/tmpec7w7c8u.jl:13\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmpec7w7c8u.jl:22 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmpec7w7c8u.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpec7w7c8u.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 1, 4, 3, 2]) == 2\\n  InexactError: Int64(Inf)\\n  Stacktrace:\\\
    n   [1] Int64\\n     @ ./float.jl:812 [inlined]\\n   [2] convert\\n     @ ./number.jl:7\
    \ [inlined]\\n   [3] setindex!\\n     @ ./array.jl:903 [inlined]\\n   [4] next_smallest(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmpec7w7c8u.jl:13\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmpec7w7c8u.jl:23 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmpec7w7c8u.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpec7w7c8u.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(Vector{Int64}([])) == nothing\\n  ArgumentError: reducing over an\
    \ empty collection is not allowed\\n  Stacktrace:\\n    [1] _empty_reduce_error()\\\
    n      @ Base ./reduce.jl:301\\n    [2] mapreduce_empty(f::Function, op::Base.BottomRF{typeof(Base._rf_findmin)},\
    \ T::Type)\\n      @ Base ./reduce.jl:344\\n    [3] reduce_empty(op::Base.MappingRF{Base.var\"\
    #262#263\"{typeof(identity)}, Base.BottomRF{typeof(Base._rf_findmin)}}, #unused#::Type{Pair{Int64,\
    \ Int64}})\\n  "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    if\
    \ length(lst) == 1\n        return nothing\n    end\n    if length(lst) == 2\n\
    \        if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    lst = sort(lst)\n    return lst[2]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    sortedlst = sort(lst)\n    if length(sortedlst) > 1\n       \
    \ return sortedlst[2]\n    else\n        return nothing\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpna9cg7l0.jl:27\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpna9cg7l0.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpna9cg7l0.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpna9cg7l0.jl:29\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpna9cg7l0.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpna9cg7l0.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpna9cg7l0.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    (minimum(lst), minimum(lst))\n    for x in lst\n        (minimum(lst),\
    \ minimum(lst)) = (min(x, minimum(lst)), min(x, minimum(lst), by = (x, minimum(lst))\
    \ => minimum(lst) < x))\n    end\n    return minimum(lst)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5])\
    \ == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpzonjmeeg.jl:23\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4, 5]) == 2\\n  UndefVarError:\
    \ minimum not defined\\n  Stacktrace:\\n   [1] next_smallest(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmpzonjmeeg.jl:14\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpzonjmeeg.jl:23 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpzonjmeeg.jl:22\\ntest set:\
    \ Error During Test at /tmp/tmpzonjmeeg.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 1, 4, 3, 2]) == 2\\n  UndefVarError: minimum not defined\\n  Stacktrace:\\\
    n   [1] next_smallest(lst::Vector{Int64})\\n     @ Main /tmp/tmpzonjmeeg.jl:14\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpzonjmeeg.jl:24 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpzonjmeeg.jl:22\\ntest set:\
    \ Error During Test at /tmp/tmpzonjmeeg.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(Vector{Int64}([])) == nothing\\n  ArgumentError: reducing over an\
    \ empty collection is not allowed\\n  Stacktrace:\\n    [1] _empty_reduce_error()\\\
    n      @ Base ./reduce.jl:301\\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\\\
    n      @ Base ./reduce.jl:311\\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\\n      @ Base ./reduce.jl:345\\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(min)}, #unused#::Type{Int64})\\n      @ Base ./reduce.jl:331\\n    [5]\
    \ reduce_empty_iter\\n      @ ./reduce.jl:357 [inlined]\\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\\n      @ Base\
    \ ./reduce.jl:353\\n    [7] _mapreduce\\n      @ ./reduce"
  stderr: "b'WARNING: Method definition (::Main.var\"#minimum#1\"{var\"#s2\", var\"\
    #s3\"})(Any) in module Main overwritten.\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    # your code goes here\n    if length(lst) <= 1\n        return\
    \ nothing\n    end\n    sorted_lst = sort(lst)\n    next_smallest_val = 0\n  \
    \  for item in sorted_lst\n        if sorted_lst[end] != item\n            next_smallest_val\
    \ = item\n            break\n        end\n    end\n    return next_smallest_val\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpinyo87_a.jl:31\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpinyo87_a.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpinyo87_a.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpinyo87_a.jl:32\n  Expression: candidate([5, 1, 4, 3, 2]) ==\
    \ 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpinyo87_a.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpinyo87_a.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpinyo87_a.jl:34\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 0 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpinyo87_a.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpinyo87_a.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpinyo87_a.jl:35\n  Expression: candidate([1, 1, 1, 1, 0]) ==\
    \ 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpinyo87_a.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpinyo87_a.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpinyo87_a.jl:36\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 0 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpinyo87_a.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 || length(lst) == 1\n        return nothing\n\
    \    end\n    first = lst[1]\n    second = lst[2]\n    if first > second\n   \
    \     first, second = second, first\n    end\n    for elem in lst[3:end]\n   \
    \     if elem < first\n            second = first\n            first = elem\n\
    \        elseif elem < second\n            second = elem\n        end\n    end\n\
    \    return second\nend\nnext_smallest([1, 2, 3, 4, 5]) == 2\nnext_smallest([5,\
    \ 1, 4, 3, 2]) == 2\nnext_smallest([]) == nothing\nnext_smallest([1, 1]) == nothing\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: None
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    if\
    \ length(lst) == 1\n        return nothing\n    end\n    @assert length(lst) >=\
    \ 2\n    return second(sort(lst))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpyc4cu5xz.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4, 5]) == 2\\n  UndefVarError:\
    \ second not defined\\n  Stacktrace:\\n   [1] next_smallest(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmpyc4cu5xz.jl:19\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpyc4cu5xz.jl:26 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpyc4cu5xz.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpyc4cu5xz.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 1, 4, 3, 2]) == 2\\n  UndefVarError: second not defined\\n  Stacktrace:\\\
    n   [1] next_smallest(lst::Vector{Int64})\\n     @ Main /tmp/tmpyc4cu5xz.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpyc4cu5xz.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpyc4cu5xz.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpyc4cu5xz.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 1]) == nothing\\n  UndefVarError: second not defined\\n  Stacktrace:\\\
    n   [1] next_smallest(lst::Vector{Int64})\\n     @ Main /tmp/tmpyc4cu5xz.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpyc4cu5xz.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpyc4cu5xz.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpyc4cu5xz.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 1, 1, 1, 0]) == 1\\n  UndefVarError: second not defined\\n  Stacktrace:\\\
    n   [1] next_smallest(lst::Vector{Int64})\\n     @ M"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if size(lst)[1] > 1\n        sorted = sort(lst)\n        if sorted[1]\
    \ != sorted[2]\n            return sorted[2]\n        else\n            return\
    \ nothing\n        end\n    else\n        return nothing\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    x = next_smallest_inner(sort(lst))\n    return x\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpm4mtvmuq.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4, 5]) == 2\\n  UndefVarError:\
    \ next_smallest_inner not defined\\n  Stacktrace:\\n   [1] next_smallest(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmpm4mtvmuq.jl:12\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpm4mtvmuq.jl:20 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpm4mtvmuq.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpm4mtvmuq.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 1, 4, 3, 2]) == 2\\n  UndefVarError: next_smallest_inner not defined\\\
    n  Stacktrace:\\n   [1] next_smallest(lst::Vector{Int64})\\n     @ Main /tmp/tmpm4mtvmuq.jl:12\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpm4mtvmuq.jl:21 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpm4mtvmuq.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpm4mtvmuq.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(Vector{Int64}([])) == nothing\\n  UndefVarError: next_smallest_inner\
    \ not defined\\n  Stacktrace:\\n   [1] next_smallest(lst::Vector{Int64})\\n  \
    \   @ Main /tmp/tmpm4mtvmuq.jl:12\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpm4mtvmuq.jl:22 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpm4mtvmuq.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpm4mtvmuq.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 1]) == nothing\\n  UndefVarError: next_smallest_inner not defined\\\
    n  Sta"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    n = length(lst)\n    if n == 0\n        return nothing\n    end\n\
    \    if n == 1\n        return nothing\n    end\n    if n == 2\n        return\
    \ nothing\n    end\n    first = true\n    flag = false\n    for i in lst\n   \
    \     if first\n            first = false\n            min = i\n            continue\n\
    \        end\n        if i > min\n            if !flag\n                flag =\
    \ true\n                s_min = i\n            else\n                if i < s_min\n\
    \                    s_min = i\n                end\n            end\n       \
    \ end\n    end\n    if flag\n        return s_min\n    else\n        return nothing\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpfj0njbm0.jl:52\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4, 5]) == 2\\n  UndefVarError:\
    \ min not defined\\n  Stacktrace:\\n   [1] next_smallest(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmpfj0njbm0.jl:30\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpfj0njbm0.jl:52 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpfj0njbm0.jl:51\\ntest set:\
    \ Error During Test at /tmp/tmpfj0njbm0.jl:53\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 1, 4, 3, 2]) == 2\\n  UndefVarError: min not defined\\n  Stacktrace:\\\
    n   [1] next_smallest(lst::Vector{Int64})\\n     @ Main /tmp/tmpfj0njbm0.jl:30\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpfj0njbm0.jl:53 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpfj0njbm0.jl:51\\ntest set:\
    \ Error During Test at /tmp/tmpfj0njbm0.jl:56\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 1, 1, 1, 0]) == 1\\n  UndefVarError: min not defined\\n  Stacktrace:\\\
    n   [1] next_smallest(lst::Vector{Int64})\\n     @ Main /tmp/tmpfj0njbm0.jl:30\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpfj0njbm0.jl:56 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpfj0njbm0.jl:51\\ntest set:\
    \ Error During Test at /tmp/tmpfj0njbm0.jl:58\\n  Test threw exception\\n  Expression:\
    \ candidate([-35, 34, 12, -45]) == -35\\n  UndefVarError: min not defined\\n \
    \ Stacktrace:\\n   [1] next_smallest(lst::Vector{Int64})\\n     @ Main "
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    #returns 2nd smallest element of the list\n    if length(lst)==0\
    \ #empty list\n        return nothing\n    elseif length(lst)==1 #1 element\n\
    \        return nothing\n    elseif length(lst)==2 && lst[1]==lst[2] #2 elements,\
    \ both the same\n        return nothing\n    elseif length(lst)==2 #2 elements,\
    \ different\n        return min(lst)\n    elseif length(lst)>2 #more than 2 elements\n\
    \        x=minimum(lst)\n        lst2=filter(a->a!=x,lst)\n        return minimum(lst2)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    \n    if length(lst) < 2\n        return nothing\n    end\n \
    \   min1 = min(lst)\n    lst_without_min = filter(!(x -> x == min1), lst)\n  \
    \  if length(lst_without_min) == 0\n        return nothing\n    end\n    return\
    \ min(lst_without_min)\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpb33q9cov.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4, 5]) == 2\\n  MethodError: no\
    \ method matching min(::Vector{Int64})\\n  Closest candidates are:\\n    min(::Any,\
    \ !Matched::Missing) at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:134\\\
    n    min(::Any, !Matched::Any) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:506\\\
    n    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\\\
    n    ...\\n  Stacktrace:\\n   [1] next_smallest(lst::Vector{Int64})\\n     @ Main\
    \ /tmp/tmpb33q9cov.jl:16\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpb33q9cov.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpb33q9cov.jl:27\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    n = length(lst)\n    if n == 0 return nothing end\n    if n ==\
    \ 1 return nothing end\n    x = minimum(lst)\n    lst = filter(e -> e > x, lst)\n\
    \    n = length(lst)\n    if n == 0 return nothing end\n    return minimum(lst)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    is_first = true\n    min_num = nothing\n    second_min_num =\
    \ nothing\n    for num in lst\n        if is_first\n            min_num = num\n\
    \            is_first = false\n        elseif num < min_num\n            second_min_num\
    \ = min_num\n            min_num = num\n        elseif second_min_num == nothing\n\
    \            second_min_num = num\n        elseif num < second_min_num\n     \
    \       second_min_num = num\n        end\n    end\n    return second_min_num\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgalage3b.jl:38\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgalage3b.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgalage3b.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpgalage3b.jl:40\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgalage3b.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgalage3b.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgalage3b.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    smallest\
    \ = minimum(lst)\n    smallest_idx = findfirst(x -> x == smallest, lst)\n    deleteat!(lst,\
    \ smallest_idx)\n    second_smallest = minimum(lst)\n    return second_smallest\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw4ferzau.jl:29\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw4ferzau.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw4ferzau.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpw4ferzau.jl:31\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw4ferzau.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw4ferzau.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw4ferzau.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    m1 = minimum(lst)\n    if count(x -> x == m1, lst) == 1\n   \
    \     return minimum(lst[lst .!= m1])\n    else\n        return nothing\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpdodswy3o.jl:26\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == nothing\n  ArgumentError: reducing\
    \ over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ Base ./reduce.jl:301\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:311\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\n      @ Base ./reduce.jl:345\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(min)}, #unused#::Type{Int64})\n      @ Base ./reduce.jl:331\n    [5]\
    \ reduce_empty_iter\n      @ ./reduce.jl:357 [inlined]\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\n      @ Base ./reduce.jl:353\n\
    \    [7] _mapreduce\n      @ ./reduce.jl:402 [inlined]\n    [8] _mapreduce_dim\n\
    \      @ ./reducedim.jl:330 [inlined]\n    [9] #mapreduce#731\n      @ ./reducedim.jl:322\
    \ [inlined]\n   [10] mapreduce\n      @ ./reducedim.jl:322 [inlined]\n   [11]\
    \ #_minimum#753\n      @ ./reducedim.jl:894 [inlined]\n   [12] _minimum\n    \
    \  @ ./reducedim.jl:894 [inlined]\n   [13] #_minimum#752\n      @ ./reducedim.jl:893\
    \ [inlined]\n   [14] _minimum\n      @ ./reducedim.jl:893 [inlined]\n   [15] #minimum#750\n\
    \      @ ./reducedim.jl:889 [inlined]\n   [16] minimum\n      @ ./reducedim.jl:889\
    \ [inlined]\n   [17] next_smallest(lst::Vector{Int64})\n      @ Main /tmp/tmpdodswy3o.jl:12\n\
    \   [18] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [19] macro expansion\n      @ /tmp/tmpdodswy3o.jl:26 [inlined]\n\
    \   [20] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [21] top-level scope\n      @ /tmp/tmpdodswy3o.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    6      1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdodswy3o.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    n =\
    \ length(lst)\n    for i in 1:n\n        for j in i:n\n            if lst[i] >\
    \ lst[j]\n                lst[i], lst[j] = lst[j], lst[i]\n            end\n \
    \       end\n    end\n    for i in 1:n\n        if i == n\n            return\
    \ nothing\n        end\n        if lst[i] != lst[i+1]\n            return lst[i+1]\n\
    \        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    if\
    \ length(lst) < 2\n        return nothing\n    end\n    if length(lst) == 2\n\
    \        if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if maximum(lst) == minimum(lst)\n        return nothing\n    end\n    count\
    \ = 0\n    min_val = maximum(lst)\n    for item in lst\n        if count == 0\n\
    \            min_val = item\n            count += 1\n        else\n          \
    \  if item < min_val\n                min_val = item\n            end\n      \
    \  end\n    end\n    list_without_min = deepcopy(lst)\n    while !isempty(list_without_min)\n\
    \        deleteat!(list_without_min, findfirst(list_without_min .== min_val))\n\
    \    end\n    return next_smallest(list_without_min)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\
    \t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpw9e04mcf.jl:49\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4, 5]) == 2\\n  MethodError: no\
    \ method matching iterate(::Nothing)\\n  Closest candidates are:\\n    iterate(!Matched::Union{LinRange,\
    \ StepRangeLen}) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:826\\\
    n    iterate(!Matched::Union{LinRange, StepRangeLen}, !Matched::Integer) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:826\\\
    n    iterate(!Matched::T) where T<:Union{Base.KeySet{<:Any, <:Dict}, Base.ValueIterator{<:Dict}}\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/dict.jl:695\\n    ...\\n  Stacktrace:\\\
    n   [1] _deleteat!(a::Vector{Int64}, inds::Nothing, dltd::Base.Nowhere)\\n   \
    \  @ Base ./array.jl:1476\\n   [2] _deleteat!(a::Vector{Int64}, inds::Nothing)\\\
    n     @ Base ./array.jl:1475\\n   [3] deleteat!(a::Vector{Int64}, inds::Nothing)\\\
    n     @ Base ./array.jl:1468\\n   [4] next_smallest(lst::Vector{Int64})\\n   \
    \  @ Main /tmp/tmpw9e04mcf.jl:40\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmpw9e04mcf.jl:49 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmpw9e04mcf.jl:48\\ntest set:\
    \ Error During Test at /tmp/tmpw9e04mcf.jl:50\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 1, 4, 3, 2]) == 2\\n  MethodError: no method matching iterate(::Nothing)\\\
    n  Closest candidates are:\\n    iterate(!Matched::Union{LinRange, StepRangeLen})\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:826\\n    iterate(!Matched::Union{LinRange,\
    \ StepRangeLen}, !Matched::Integer) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:826\\\
    n    iterate(!Matched::T) where T<:Union{Base.KeySet{<:Any, <:Dict}, Base.ValueIterator{<:Dict}}\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/dict.jl:695\\n    ...\\n  Stacktrace:\\\
    n   [1] _deleteat!(a::Vector{Int64}, inds::Nothing, dltd::Base.Nowhere)\\n   \
    \  @ Ba"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    return (lst |> sort |> uniq |> drop |> first)\nend\n \nusing\
    \ Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpf9tyvbjz.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4, 5]) == 2\n  UndefVarError: uniq not defined\n\
    \  Stacktrace:\n   [1] next_smallest(lst::Vector{Int64})\n     @ Main /tmp/tmpf9tyvbjz.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf9tyvbjz.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf9tyvbjz.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpf9tyvbjz.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([5, 1, 4, 3, 2]) == 2\n  UndefVarError: uniq not defined\n  Stacktrace:\n\
    \   [1] next_smallest(lst::Vector{Int64})\n     @ Main /tmp/tmpf9tyvbjz.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf9tyvbjz.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf9tyvbjz.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpf9tyvbjz.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == nothing\n  UndefVarError: uniq not defined\n\
    \  Stacktrace:\n   [1] next_smallest(lst::Vector{Int64})\n     @ Main /tmp/tmpf9tyvbjz.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf9tyvbjz.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf9tyvbjz.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpf9tyvbjz.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1, 1]) == nothing\n  UndefVarError: uniq not defined\n  Stacktrace:\n\
    \   [1] next_smallest(lst::Vector{Int64})\n     @ Main /tmp/tmpf9tyvbjz.jl:12\n\
    \   [2] macro expansion\n   "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf9tyvbjz.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    if\
    \ length(lst) == 1\n        return nothing\n    end\n    s = sort(lst)\n    next_smallest\
    \ = s[2]\n    return next_smallest\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdo73i73w.jl:30\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdo73i73w.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdo73i73w.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpdo73i73w.jl:32\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdo73i73w.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdo73i73w.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdo73i73w.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    # your code here\n    len = length(lst)\n    if len == 0 || len\
    \ == 1\n        return nothing\n    end\n    v = sort(lst)[2]\n    return v\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfhhrgg9b.jl:28\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfhhrgg9b.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfhhrgg9b.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpfhhrgg9b.jl:30\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfhhrgg9b.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfhhrgg9b.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfhhrgg9b.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if isempty(lst)\n        return\n    end\n    sorted_lst = sort(lst)\n\
    \    sorted_lst[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgqiwb62t.jl:26\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgqiwb62t.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgqiwb62t.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpgqiwb62t.jl:28\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgqiwb62t.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgqiwb62t.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgqiwb62t.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    second_smallest = -1\n    smallest = Int64(2^63)\n    for i in\
    \ lst\n        if i < smallest\n            second_smallest = smallest\n     \
    \       smallest = i\n        elseif i < second_smallest\n            second_smallest\
    \ = i\n        end\n    end\n    if second_smallest == -1\n        return nothing\n\
    \    else\n        return second_smallest\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\
    \t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8j4d65nv.jl:33\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\n   Evaluated: nothing == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8j4d65nv.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8j4d65nv.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp8j4d65nv.jl:34\n  Expression: candidate([5, 1, 4, 3, 2]) ==\
    \ 2\n   Evaluated: nothing == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8j4d65nv.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8j4d65nv.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp8j4d65nv.jl:37\n  Expression: candidate([1, 1, 1, 1, 0]) ==\
    \ 1\n   Evaluated: nothing == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8j4d65nv.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8j4d65nv.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp8j4d65nv.jl:39\n  Expression: candidate([-35, 34, 12, -45])\
    \ == -35\n   Evaluated: -45 == -35\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8j4d65nv.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8j4d65nv.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8j4d65nv.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    lst_sorted = sort(lst)\n    if length(lst_sorted) <= 1\n    \
    \    return nothing\n    else\n        return lst_sorted[2]\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptffiz_go.jl:27\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptffiz_go.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptffiz_go.jl:23\ntest set: Test\
    \ Failed at /tmp/tmptffiz_go.jl:29\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptffiz_go.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptffiz_go.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptffiz_go.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst)<2 \n        return nothing\n    end\n    min_value\
    \ = minimum(lst)\n    if min_value == maximum(lst)\n        return nothing\n \
    \   end\n    return minimum(filter(x-> x!= min_value, lst))\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if size(lst, 1) == 0\n        return nothing\n    end\n    m\
    \ = minimum(lst)\n    is_unique_min = true\n    for i in lst\n        if i ==\
    \ m\n            is_unique_min = false\n        end\n    end\n    if is_unique_min\n\
    \        return m\n    end\n    ms = sort(lst)\n    for i in 1:size(ms, 1)\n \
    \       if ms[i] != m\n            return ms[i]\n        end\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    lst_sorted\
    \ = sort(lst)\n    if lst_sorted[1] == lst_sorted[end]\n        return nothing\n\
    \    end\n    min = lst_sorted[1]\n    for i in lst_sorted\n        if i != min\n\
    \            return i\n        end\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst)<2\n        return nothing\n    end\n    else\n\
    \    sorted = sort(lst)\n    if sorted[1] == sorted[2]\n        return nothing\n\
    \    else\n        return sorted[2]\n    end\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\
    \t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpjc8uz1_d.jl:11 expected\
    \ \"end\", got \"else\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjc8uz1_d.jl:15\n\
    in expression starting at /tmp/tmpjc8uz1_d.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if (length(lst) <= 1)\n        return nothing\n    end\n    lst[sortperm(lst)[2]]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc9x4h83_.jl:25\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc9x4h83_.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc9x4h83_.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpc9x4h83_.jl:27\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc9x4h83_.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc9x4h83_.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc9x4h83_.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    sort(lst)\n\
    \    if lst[1] == lst[2]\n        return nothing\n    end\n    return lst[2]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmoa_o9mx.jl:27\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmoa_o9mx.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmoa_o9mx.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpmoa_o9mx.jl:30\n  Expression: candidate([1, 1, 1, 1, 0]) ==\
    \ 1\n   Evaluated: nothing == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmoa_o9mx.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmoa_o9mx.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpmoa_o9mx.jl:32\n  Expression: candidate([-35, 34, 12, -45])\
    \ == -35\n   Evaluated: 34 == -35\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmoa_o9mx.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmoa_o9mx.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmoa_o9mx.jl:23\n"
  exit_code: 1
  status: SyntaxError
