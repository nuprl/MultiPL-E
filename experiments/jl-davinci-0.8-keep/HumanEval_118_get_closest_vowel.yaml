name: HumanEval_118_get_closest_vowel
language: jl
prompt: "\"\"\"You are given a word. Your task is to find the closest vowel that stands\
  \ between \n    two consonants from the right side of the word (case sensitive).\n\
  \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
  \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
  \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
  yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
  quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
  \ get_closest_vowel(word::String)::String \n"
tests: "using Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"\
  yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"\
  easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\"\
  ) == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\") ==\
  \ \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") == \"\"\
  )\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") == \"i\"\
  )\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") == \"o\")\n\
  end\n"
completions: ["    vowels = \"aeiouAEIOU\"\n    n = length(word)\n    for i in n:-1:2\n\
    \        if word[i] in vowels && !(word[i-1] in vowels) && !(word[i+1] in vowels)\n\
    \            return word[i]\n        end\n    end\n    return \"\"\nend", "  \
    \  \"\"\"\n    This function is used to get the closest vowel in a word.", " \
    \   i, n = length(word), length(word) - 1\n    vowels = \"aeiouAEIOU\"\n    while\
    \ n > 0\n        if word[n] in vowels && word[n-1] in vowels\n            n -=\
    \ 1\n        elseif word[n] in vowels\n            return word[n]\n        else\n\
    \            n -= 1\n        end\n    end\n    return \"\"\nend", "    vowels\
    \ = (\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\")\n \
    \   vowels_pos = Dict()\n    for (i,x) in enumerate(word)\n        if x in vowels\n\
    \            vowels_pos[i] = x\n        end\n    end\n    for i in 1:length(word)\n\
    \        if (word[end-i] in vowels) && (word[end-i-1] in vowels)\n           \
    \ return \"\"\n        elseif (word[end-i] in vowels) && !(word[end-i-1] in vowels)\n\
    \            return vowels_pos[end-i]\n        end\n    end\n    return \"\"\n\
    end", "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in [1:length(word)]\n\
    \        if word[end-i] in vowels && word[end-i+1] in vowels\n            return\
    \ word[end-i+1]\n        end\n    end\n    return \"\"\nend\n    \nprintln(get_closest_vowel(\"\
    yogurt\"))\nprintln(get_closest_vowel(\"FULL\"))\nprintln(get_closest_vowel(\"\
    quick\"))\nprintln(get_closest_vowel(\"ab\"))", "    vowels = [\"a\", \"e\", \"\
    i\", \"o\", \"u\"]\n    consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\"\
    , \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\"\
    , \"w\", \"x\", \"y\", \"z\"]\n    for x in reversed(word)\n        if x in vowels\n\
    \            return x\n        end\n    end\n    return \"\"\nend", "    vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for letter in word\n        if letter\
    \ in vowels\n            # check if it's adjacent\n            if letter == word[end]\n\
    \                continue\n            end_index = word.index(letter) + 1\n  \
    \          if end_index == length(word)\n                continue\n          \
    \  end_letter = word[end_index]\n            if !(end_letter in vowels)\n    \
    \            return letter\n            end\n        end\n    end\n    return\
    \ \"\"\nend", "  word = lowercase(word)\n  #println(word)\n  c1 = false\n  c2\
    \ = false\n  ctr = 0\n  curr = \" \"\n  #println(word[end])\n  for i = length(word):-1:1\n\
    \    if isvowel(word[i])\n      c1 = true\n      curr = word[i]\n    else\n  \
    \    c2 = true\n    end\n    if c1 && c2\n      break\n    end\n  end\n  return\
    \ curr\nend", "    vowels = \"aeiouAEIOU\"\n    res = \"\"\n    for (i, letter)\
    \ in enumerate(word)\n        if letter in vowels\n            if i != length(word)\n\
    \                if word[i+1] \u2209 vowels\n                    res = letter\n\
    \                    break\n                end\n            end\n        end\n\
    \    end\n    return res\nend", "    if search(r\"\\A[^aeiou]\", lowercase(word))\
    \ == nothing\n        return \"\"\n    end\n    search(r\"[^aeiou]([aeiou]+)[^aeiou]\"\
    , lowercase(word))\nend", "    vowels = findall(r\"(?<![aeiouAEIOU])([aeiouAEIOU])(?![aeiouAEIOU])\"\
    , word);\n    if length(vowels) == 0\n        return \"\"\n    else\n        return\
    \ vowels[end][1]\n    end\nend", "    len = length(word)\n    vowels = Set(\"\
    aeiouAEIOU\")\n    for i in range(len-1, -1, -1)\n        if in(word[i], vowels)\
    \ && (i+1 <= len-1) && (!in(word[i+1], vowels))\n            return word[i]\n\
    \        end\n    end\n    return \"\"\nend", "    vowels = \"aeiouAEIOU\"\n \
    \   str = \"\"\n    for i = 1:length(word)\n        if word[i] in vowels && word[i-1]\
    \ in \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\" && word[i+1] in \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n            str = word[i]\n        end\n    end\n    return str\nend\n    \n\
    \    \n    \n    \"\"\"\n    In this Challenge, write a program that takes in\
    \ two inputs: a word and a sentence.\n    Your program should return \"Yes\" if\
    \ the word can be formed by using the letters\n    from the sentence and otherwise,\
    \ should return \"No\".", "    \n    if length(word) == 1 \n        return \"\"\
    \n    end\n    \n    word_ = reverse(word)\n    res = \"\"\n    flag = 0\n   \
    \ # get the first vowel\n    for i = 1:length(word_)\n        if !(flag == 0 &&\
    \ (isalpha(word_[i]) && isvowel(word_[i])))\n            flag = 1\n          \
    \  res = res * word_[i]\n        end\n    end\n    \n    res = reverse(res)\n\
    \    # check if there is a vowel after the first vowel\n    for i = 1:length(res)\n\
    \        if isalpha(res[i]) && isvowel(res[i])\n            return res[i]\n  \
    \      end\n    end\n    return \"\"\nend", "    #\u0412\u0430\u0448 \u043A\u043E\
    \u0434\n    return \"\"\nend", "    position_vowel = 0\n    n = length(word)\n\
    \    for i in 1:n-1\n        if word[i] == 'a' || word[i] == 'e' || word[i] ==\
    \ 'i' || word[i] == 'o' || word[i] == 'u'\n            if (word[i-1] != 'a' &&\
    \ word[i-1] != 'e' && word[i-1] != 'i' && word[i-1] != 'o' && word[i-1] != 'u')\
    \ &&\n            (word[i+1] != 'a' && word[i+1] != 'e' && word[i+1] != 'i' &&\
    \ word[i+1] != 'o' && word[i+1] != 'u')\n                position_vowel = i\n\
    \            end\n        end\n    end\n    if position_vowel == 0\n        return\
    \ \"\"\n    else\n        return word[position_vowel]\n    end\nend", "    vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in 1:length(word)\n       \
    \ if (word[end-i] in vowels) && (word[end-i-1] \u2209 vowels) && (word[end-i+1]\
    \ \u2209 vowels)\n            return word[end-i]\n        end\n    end\n    return\
    \ \"\"\nend", "    l = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in 1:length(word)\n\
    \        for j in l\n            if (j == word[end-i+1]) & (j != word[end-i])\
    \ & (j != word[end-i+2])\n                return j\n            end\n        end\n\
    \    end\n    return \"\"\nend", "    l = length(word)\n    cons = collect(Set([\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\"]))\n    vowels = collect(Set([\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\"]))\n    for i = l:-1:1\n        if word[i]\
    \ in vowels\n            for j = i-1:-1:1\n                if word[j] in cons\n\
    \                    return word[i]\n                end\n            end\n  \
    \      end\n    end\n    return \"\"\nend", "    if word == \"\"\n        return\
    \ \"\"\n    end", "    vowels = \"AEIOUaeiou\"\n    consonants = \"BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz\"\
    \n    for i in length(word)::Int\n        for j in reverse(1:i)::Reverse{Int}\n\
    \            if word[j] in consonants && word[j-1] in consonants\n           \
    \     for k in j:i\n                    if word[k] in vowels\n               \
    \         return word[k]\n                    end\n                end\n     \
    \       end\n        end\n    end\n    return \"\"\nend", "    vowels = Set(\"\
    aeiouAEIOU\")\n    idx = word |> String.reverse |> String.rindex(\"y\", pos =\
    \ size(word))\n    if idx == nothing\n        return \"\"\n    end\n    for i\
    \ in idx:end \n        if i in vowels && !(i-1 in vowels) && !(i+1 in vowels)\n\
    \            return string(i)\n        end\n    end\n    return \"\"\nend", " \
    \   vowels = \"AEIOUaeiou\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    while (word != \"\")\n        if (!(vowels in word[end])) || (!(consonants\
    \ in word[end-1]))\n            word = word[1:end-1]\n        else\n         \
    \   return word[end]\n        end\n    end\n    return \"\"\nend", "    # make\
    \ a dict of vowels \n    vowels = Dict(\"a\" => 1, \"e\" => 1, \"i\" => 1, \"\
    o\" => 1, \"u\" => 1, \"y\" => 1)\n    # define the variables to store the index\
    \ of the vowels and consonants \n    vowel = 0\n    consonant = 0\n    # iterate\
    \ over the string\n    for i in reverse(1:length(word))\n        # if the current\
    \ letter is not in the dict of vowels \n        if !(get(vowels, lowercase(word[i]),\
    \ 0) > 0)\n            # this the first consonant we are finding \n          \
    \  if consonant == 0\n                consonant = i\n            # this is the\
    \ second consonant we are finding \n            else\n                # we have\
    \ to return the nearest vowel to the second consonant\n                if vowel\
    \ == 0\n                    return \"\"\n                else\n              \
    \      return word[vowel]\n                end\n            end\n        # if\
    \ the current letter is in the dict of vowels \n        else\n            vowel\
    \ = i\n        end\n    end\n    # we have not found any vowel\n    return \"\"\
    \nend", "    vowels = \"aeiouAEIOU\"\n    count = 0\n    found = 0\n    min_dist\
    \ = Inf\n    min_count = 0\n    for i in 1:length(word)\n        if( word[i] in\
    \ vowels )\n            found = 1\n            count = i\n            break\n\
    \        end\n    end\n    for i in 1:length(word)\n        if( word[length(word)-i+1]\
    \ in vowels )\n            if( (length(word)-i+1 - count) < min_dist && found\
    \ == 1)\n                min_dist = length(word)-i+1 - count\n               \
    \ min_count = length(word)-i+1\n            end\n        end\n    end\n    if(found\
    \ == 0)\n        return \"\"\n    else\n        return word[min_count]\n    end\n\
    end", "    vowels = \"AEIOU\"\n    if length(word) < 3 \n        return \"\"\n\
    \    end \n    for i = length(word):-1:3\n        if word[i] in vowels\n     \
    \       if word[i-1] in vowels\n                continue\n            elseif word[i-2]\
    \ in vowels\n                continue\n            else \n                return\
    \ word[i]\n            end\n        end\n    end\n    return \"\"\nend", "   \
    \ result = \"\"\n    i = length(word)\n    while i > 1\n        if !isvowel(word[i])\
    \ && isvowel(word[i-1])\n            result = word[i-1]\n            break\n \
    \       end\n        i -= 1\n    end\n    return result\nend", "    if length(word)\
    \ == 1\n        return \"\"\n    end\n    vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"\
    x\", \"y\", \"z\"]\n    for letter in vowels\n        start = 0\n        if letter\
    \ in consonants\n            continue\n        end\n        first_letter = false\n\
    \        last_letter = false\n        while start <= length(word)\n          \
    \  if first_letter && last_letter\n                break\n            end\n  \
    \          if word[start] == letter\n                if start == 1\n         \
    \           first_letter = true\n                end\n                if start\
    \ == length(word)\n                    last_letter = true\n                end\n\
    \                if first_letter && last_letter\n                    break\n \
    \               end\n                if word[start + 1] in consonants\n      \
    \              return letter\n                end\n            end\n         \
    \   start += 1\n        end\n    end\n    return \"\"\nend", "    # YOUR CODE\
    \ GOES HERE\n    for i in eachindex(word)\n        if in(word[i], \"aeiou\")\n\
    \            # If the current index contains a vowel and the character before\
    \ the current index is consonant and the character after the current index is\
    \ consonant\n            if in(word[i-1], \"bcdfghjklmnpqrstvwxyz\") && in(word[i+1],\
    \ \"bcdfghjklmnpqrstvwxyz\")\n                return word[i]\n            end\n\
    \        end\n    end\n    return \"\"\nend", "    vowels = [\"a\", \"e\", \"\
    i\", \"o\", \"u\"]\n    n = length(word)\n    for i in 0:n-1\n        if word[end-i]\
    \ in vowels\n            return word[end-i]\n        end\n    end\n    return\
    \ \"\"\nend", "    vowels = Set(\"aeiouAEIOU\")\n    for i in reverse(eachindex(word))\n\
    \        letter = word[i]\n        if letter in vowels\n            if i == 1\n\
    \                return letter\n            end\n            if i == length(word)\n\
    \                if word[i-1] in vowels\n                    return \"\"\n   \
    \             else\n                    return letter\n                end\n \
    \           end\n            if !(word[i-1] in vowels) && !(word[i+1] in vowels)\n\
    \                return letter\n            end\n        end\n    end\n    return\
    \ \"\"\nend\n@test get_closest_vowel(\"yogurt\") == \"u\"\n@test get_closest_vowel(\"\
    FULL\") == \"U\"\n@test get_closest_vowel(\"quick\") == \"\"\n@test get_closest_vowel(\"\
    ab\") == \"\"", "    \n    index_first_vowel = findfirst(isequal('a'), word) #\
    \ find the first vowel index\n    index_last_vowel = findlast(isequal('a'), word)\
    \ # find the last vowel index\n    \n    if (index_first_vowel == index_last_vowel)\
    \ # if there is no vowels, return empty string\n        return \"\"\n    end\n\
    \    \n    # if the first vowel is in the beginning, then there is no consonant\
    \ before\n    if (index_first_vowel == 1)\n        return word[index_first_vowel]\n\
    \    end\n    \n    # if the last vowel is in the end, then there is no consonant\
    \ after\n    if (index_last_vowel == length(word))\n        return word[index_last_vowel]\n\
    \    end\n    \n    # in the middle of the word, check if there is consonant before\
    \ and after\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in index_first_vowel:index_last_vowel\n\
    \        if (in(word[i-1], vowels) == false) && (in(word[i+1], vowels) == false)\n\
    \            return word[i]\n        end\n    end\n    \n    return \"\"\nend",
  "    # if only one char, return \"\"\n    if length(word) == 1 \n        return\
    \ \"\"\n    end\n    # find the closest vowel of the last letter\n    for i in\
    \ 0:length(word)-1\n        if word[end-i] in \"AEIOUaeiou\"\n            return\
    \ word[end-i]\n        end\n    end\n    # if no vowel in the word, return \"\"\
    \n    return \"\"\nend", "    temp=[]\n    for i in range(1,length(word)-1)\n\
    \        if (word[i] in [\"a\",\"e\",\"i\",\"o\",\"u\"]) && (word[i-1] not in\
    \ [\"a\",\"e\",\"i\",\"o\",\"u\"]) && (word[i+1] not in [\"a\",\"e\",\"i\",\"\
    o\",\"u\"])\n            push!(temp,word[i])\n        end\n    end\n    if length(temp)>0\n\
    \        return temp[end]\n    else\n        return \"\"\n    end\nend", "   \
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    closest_vowel = \"\"\n   \
    \ for ch in vowels\n        if word contains ch\n            closest_vowel = ch\n\
    \            break\n        end\n    end\n    if closest_vowel == \"\"\n     \
    \   return \"\"\n    end\n    for i in 2:length(word)\n        if word[end-i]\
    \ in vowels\n            if word[end-i+1] in vowels\n                return \"\
    \"\n            else\n                return word[end-i]\n            end\n  \
    \      end\n    end\n    return \"\"\nend", "    vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"\
    j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"\
    w\", \"x\", \"y\", \"z\"]\n    for i in size(word, 1):\n        if word[i] in\
    \ vowels\n            if word[i-1] in consonants && word[i+1] in consonants\n\
    \                return word[i]\n            end\n        end\n    end\n    return\
    \ \"\"\nend", "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    offset =\
    \ 0\n    for i in 1:length(word)\n        if any(v == word[end-i] for v in vowels)\n\
    \            offset = i\n            break\n        end\n    end\n    if offset\
    \ == 0\n        return \"\"\n    end\n    for i in 1:offset\n        if any(v\
    \ == word[end-i] for v in vowels) && !any(v == word[end-i-1] for v in vowels)\n\
    \            return word[end-i]\n        end\n    end\n    return \"\"\nend",
  "    if word == \"\"\n        return \"\"\n    end\n    vowels = [\"a\", \"e\",\
    \ \"i\", \"o\", \"u\"]\n    v = []\n    for i = 1:length(word)\n        if word[end-i+1]\
    \ in vowels\n            if i > 1 && word[end-i] \u2209 vowels\n             \
    \   v = push!(v, word[end-i+1])\n            end\n        end\n    end\n    return\
    \ v[1]\nend", "    for i in 2:length(word)\n        if (Char(word[i]) in \"AEIOUaeiou\"\
    ) && (Char(word[i-1]) in \"BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz\")\n   \
    \         return word[i]\n        end\n    end\n    return \"\"\nend", "    vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i = length(word):-1:1\n     \
    \   if (word[i] in vowels)\n            if (i == length(word))\n             \
    \   return \"\"\n            elseif (word[i+1] in vowels)\n                return\
    \ \"\"\n            else\n                return word[i]\n            end\n  \
    \      end\n    end\n    return \"\"\nend", "    vowels = \"aeiou\"\n    rword\
    \ = reverse(word)\n    for i in length(rword)::Int\n        if rword[i] in vowels\n\
    \            return rword[i]\n        end\n    end\n    return \"\"\nend", " \
    \   vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    # iterate through the string,\
    \ check if each character is a consonant\n    # if it is, then check if the next\
    \ character is a vowel. If it is, \n    # return the vowel\n    # return empty\
    \ string if there is no appropriate vowel\n    for i = length(word):-1:1\n   \
    \     if is_consonant(word[i]) && is_vowel(word[i+1])\n            return word[i+1]\n\
    \        end\n    end\n    return \"\"\nend", "    \n    vowels = \"AEIOU\"\n\
    \    for i = length(word):-1:1\n        if i > 1 && isascii(word[i]) && isascii(word[i-1])\n\
    \            if !(word[i] in vowels) && word[i-1] in vowels\n                return\
    \ word[i-1]\n            end\n        end\n    end\n    \n    return \"\"\n  \
    \  \nend", "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    index = length(word)\n\
    \    while index > 1\n        ch = word[index]\n        prev_ch = word[index-1]\n\
    \        if prev_ch in vowels\n            index -= 1\n            continue\n\
    \        end\n        if ch in vowels\n            return ch\n        end\n  \
    \      index -= 1\n    end\n    return \"\"\nend", "    word = reverse(word)\n\
    \    for i in eachindex(word)\n        if isvowel(word[i])\n            for j\
    \ in i+1:length(word)\n                if !isvowel(word[j])\n                \
    \    return lowercase(reverse(word[i]))\n                end\n            end\n\
    \        end\n    end\n    return \"\"\nend", "    vowels = \"AEIOUaeiou\"\n \
    \   word = reverse(word)\n    for j in eachindex(word)\n        if in(word[j],\
    \ vowels)\n            if j > 1\n                if !in(word[j-1], vowels) &&\
    \ !in(word[j-2], vowels)\n                    return word[j]\n               \
    \ end\n            end\n        end\n    end\n    return \"\"\nend", "    vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    last_vowel = \"z\"\n    last_consonant\
    \ = \"z\"\n    for (i, letter) in enumerate(word)\n        if i in vowels\n  \
    \          last_vowel = i\n        elseif i == last_vowel\n            return\
    \ last_vowel\n        else\n            last_consonant = i\n    return \"\"\n\
    end", "    end\n \n \n@testset \"4. get_closest_vowel\" begin\n    @test get_closest_vowel(\"\
    yogurt\") == \"u\"\n    @test get_closest_vowel(\"FULL\") == \"U\"\n    @test\
    \ get_closest_vowel(\"quick\") == \"\"\n    @test get_closest_vowel(\"ab\") ==\
    \ \"\"\nend", "    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    closest = \"\"\n    found_first_consonant = false\n    for i in reverse(eachindex(word))\n\
    \        curr_letter = word[i]\n        if curr_letter in consonants\n       \
    \     if found_first_consonant\n                break\n            else\n    \
    \            found_first_consonant = true\n            end\n        elseif curr_letter\
    \ in vowels\n            closest = curr_letter\n        end\n    end\n    return\
    \ closest\nend", "    # save the word to an array\n    word_to_char_array = collect(word)\n\
    \    # index tracker\n    index = 0\n    # create an empty string to save the\
    \ answer\n    answer = \"\"\n    # iterate through the array\n    for char in\
    \ word_to_char_array\n        if is_vowel(char) # check for vowels\n         \
    \   index += 1\n            # use index to find the two consonants\n         \
    \   if !is_vowel(word_to_char_array[index-1]) && !is_vowel(word_to_char_array[index+1])\n\
    \                answer = char\n                break\n            end\n     \
    \   end\n    end\n    return answer\nend", "    vowels = \"AEIOU\"\n    consonants\
    \ = \"BCDFGHJKLMNPQRSTVWXYZ\"\n    idx = search(r\"\\w[$(consonants)][$(vowels)]\\\
    w\", word)\n    idx != nothing ? word[idx[1]+1] : \"\"\nend\nget_closest_vowel(\"\
    yogurt\")\nget_closest_vowel(\"FULL\")\nget_closest_vowel(\"quick\")\nget_closest_vowel(\"\
    ab\")", "    vowel_list = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    vowel_index\
    \ = []\n    #Loops throught the entire word backwards and compares it to the vowel\
    \ list to find a vowel\n    for i in eachindex(word)\n        if word[end-i] in\
    \ vowel_list\n            push!(vowel_index, end-i)\n        end\n    end\n  \
    \  #Nothing will be returned if there is no vowels\n    if isempty(vowel_index)\n\
    \        return \"\"\n    end\n    #Finds the closest vowel from the end\n   \
    \ vowel_loc = vowel_index[end]\n    for i in eachindex(vowel_index)\n        if\
    \ (vowel_index[i] > vowel_loc)\n            vowel_loc = vowel_index[i]\n     \
    \   end\n    end\n    return word[vowel_loc]\nend\nget_closest_vowel(\"ab\")",
  "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for (i, letter) in enumerate(reverse(word))\n\
    \        if letter in vowels && i != length(word)\n            return letter\n\
    \        end\n    end\n    return \"\"\nend", "    vowels = [\"a\", \"e\", \"\
    i\", \"o\", \"u\"]\n    for letter in word\n        if letter in vowels\n    \
    \        return letter\n        end\n    end\n    return \"\"\nend", "    vowels\
    \ = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    for i = length(word):-1:1\n        if (word[i] in consonants) && (word[i-1]\
    \ in consonants)\n            for j = i+1:length(word)\n                if word[j]\
    \ in vowels\n                    return word[j]\n                end\n       \
    \     end\n        end\n    end\n    return \"\"\nend", "    vowels = \"aeiouAEIOU\"\
    \n    consonants = setdiff(string.letters, vowels)\n    N = length(word)\n   \
    \ for n = 1:N-1\n        i = N-n\n        j = N-n+1\n        if in(word[i], vowels)\
    \ && in(word[j], consonants)\n            return word[i]\n        end\n    end\n\
    \    return \"\"\nend", "    if length(word) < 3\n        return \"\"\n    end\n\
    \    if !(word[end-1] in [\"a\", \"e\", \"i\", \"o\", \"u\"]) && (word[end] in\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\"])\n        return word[end]\n    end\n  \
    \  for i in 1:length(word)-2\n        if (word[end-i] in [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]) && !(word[end-i-1] in [\"a\", \"e\", \"i\", \"o\", \"u\"])\n\
    \            return word[end-i]\n        end\n    end\n    return \"\"\nend\n\
    \ \nprintln(get_closest_vowel(\"yogurt\"))\nprintln(get_closest_vowel(\"FULL\"\
    ))\nprintln(get_closest_vowel(\"quick\"))\nprintln(get_closest_vowel(\"ab\"))",
  "    N = length(word)\n    if N <= 1\n        return \"\"\n    end\n    vowels =\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"]\n   \
    \ right = N-1\n    while right > 1\n        cur = word[right]\n        if cur\
    \ in vowels\n            left = right-1\n            while left > 0\n        \
    \        if word[left] in vowels\n                    left -= 1\n            \
    \    else\n                    return cur\n                end\n            end\n\
    \        end\n        right -= 1\n    end\n    return \"\"\nend", "    vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for char in reverse(word)\n     \
    \   if char in vowels\n            return char\n        end\n    end\n    return\
    \ \"\"\nend", "    i, vowels, maxind = word |> reverse |> eachindex, \"aeiou\"\
    , 0\n    while i()\n        if vowels |> member(word[i()])\n            if (i()\
    \ > 1) & (!(vowels |> member(word[i()-1])))\n                return word[i()]\n\
    \            elseif i() == 1\n                return word[i()]\n            end\n\
    \        end\n    end\n    return \"\"\nend", "    min_index = length(word)\n\
    \    vowel = \"\"\n    for char in [\"a\", \"e\", \"i\", \"o\", \"u\"]\n     \
    \   try\n            if index(word, char) > 1\n                if index(word,\
    \ char) < min_index\n                    min_index = index(word, char)\n     \
    \               vowel = char\n                end\n            end\n        catch\
    \ e\n            pass\n        end\n    end\n    return vowel\nend\n\"\"\"You\
    \ are given a word. Your task is to find the closest vowel that stands between\
    \ \n    two consonants from the right side of the word (case sensitive).\n   \
    \ \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. ", "    # Your code\
    \ goes here\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in length(word)::Int\n\
    \        if i < length(word) - 1 && in(word[i], vowels) && !in(word[i-1], vowels)\
    \ && !in(word[i+1], vowels)\n            return word[i]\n        end\n    end\n\
    \    return \"\"\nend", "    vowels = \"aeiouAEIOU\"\n    cons = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    for (i, c) in enumerate(word)\n        if c in vowels\n            c2 =\
    \ word[i + 1]\n            if c2 in cons\n                return c\n         \
    \   end\n        end\n    end\n    return \"\"\nend", "    # your code here\n\
    end", "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    index = search(r\"\
    ^(?!.*[aeiou])([^aeiou]*)([aeiou])(?=[^aeiou]*$)\", word)\n    (index == nothing)\
    \ && return \"\"\n    index = getindex(index, 2)\n    if length(word) == 1\n \
    \       (word in vowels) && return word\n        return \"\"\n    end\n    return\
    \ word[index]\nend", "    word = reverse(word)\n    for i in 1:length(word)\n\
    \        if word[i] in \"AEIOUaeiou\"\n            return word[i]\n        end\n\
    \    end\n    return \"\"\nend", "    \n    vowels = [\"a\", \"e\", \"i\", \"\
    o\", \"u\"]\n    consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\"]\n    \n    for i in 1:length(word)\n        if word[end-i]\
    \ in vowels && word[end-i-1] in consonants && word[end-i+1] in consonants\n  \
    \          return word[end-i]\n        end\n    end\n    return \"\"\nend", " \
    \   vowels = \"aeiouAEIOU\"\n    if length(word) < 3\n        return \"\"\n  \
    \  end\n    for i in length(word):-1:2\n        if in(word[i], vowels) && !in(word[i-1],\
    \ vowels) && !in(word[i+1], vowels)\n            return word[i]\n        end\n\
    \    end\n    return \"\"\nend", "    vowels = ['a', 'e', 'i', 'o', 'u']\n   \
    \ consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q',\
    \ 'r', 's', 't', 'v', 'w', 'x', 'y', 'z']\n    closest = \"\"\n    result = \"\
    \"\n    for (i, j) in enumerate(word)\n        if j in vowels\n            closest\
    \ = j\n        elseif j in consonants\n            if closest != \"\"\n      \
    \          result = closest\n                closest = \"\"\n            end\n\
    \        end\n    end\n    return result\nend", "    # We define vowels as char\
    \ set\n    vowels = Set(['a', 'e', 'i', 'o', 'u'])\n    # We look at the chars\
    \ from the end, so the word is reversed\n    for (i,c) in enumerate(reverse(word))\n\
    \        # If we encounter a consonant, we look for the closest vowel\n      \
    \  if c \u2209 vowels\n            for (j,v) in enumerate(reverse(word[i+1:end]))\n\
    \                if v \u2208 vowels\n                    return v\n          \
    \      end\n            end\n        end\n    end\n    return \"\"\nend", "  \
    \  vowels = \"aeiouAEIOU\"\n    previous_char = \".\"\n    closest_vowel = \"\"\
    \n    for char in word\n        if char in vowels && previous_char != \".\" &&\
    \ previous_char \u2209 vowels\n            closest_vowel = char\n            break\n\
    \        end\n        previous_char = char\n    end\n    return closest_vowel\n\
    end", "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in 1:length(word)\n\
    \        if (word[end-i] in vowels) && !(word[end-i-1] in vowels)\n          \
    \  return word[end-i]\n        end\n    end\n    return \"\"\nend", "    word\
    \ = reverse(word)\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i\
    \ in range(1, length(word) - 1)\n        if !(word[i] in vowels) && (word[i +\
    \ 1] in vowels) && !(word[i + 2] in vowels)\n            return reverse(word)[i\
    \ + 1]\n        end\n    end\n    return \"\"\nend", "    # Your code here\n \
    \   return \"\"\nend", "    # your code\n    end", "    vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"]\n    closest_vowel = \"\"\n    if length(word) < 3\n  \
    \      return \"\"\n    end\n    if any(x -> x == word[end-1], vowels)\n     \
    \   return \"\"\n    end\n    for i in 1:length(word)-2\n        if (word[end-i]\
    \ in vowels) && (word[end-i-1] in vowels)\n            closest_vowel = word[end-i-1]\n\
    \            break\n        end\n    end\n    return closest_vowel\nend", "  \
    \  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    consonants = [\"b\", \"c\"\
    , \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    last_con = \"\"\
    \n    last_vow = \"\"\n    for char in reverse(word)\n        if char in vowels\n\
    \            last_vow = char\n        elseif char in consonants\n            last_con\
    \ = char\n            break\n        end\n    end\n    if last_con == \"\" ||\
    \ last_vow == \"\"\n        return \"\"\n    else\n        return last_vow\n \
    \   end\nend", "    \n    if !contains(word, search(r\"[a, e, i, o, u, A, E, I,\
    \ O, U]\"), overlapping=false)\n        return \"\"\n    end\n    \n    word =\
    \ reverse(word)\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\"\
    , \"I\", \"O\", \"U\"]\n    length = length(word)\n    res = search(r\"[^a, e,\
    \ i, o, u, A, E, I, O, U]\", word)\n    last_ind = first(res)\n    res = search(r\"\
    [a, e, i, o, u, A, E, I, O, U]\", word[last_ind:end])\n    if length(res) == 0\n\
    \        return \"\"\n    end\n    first_ind = first(res) + last_ind\n    if first_ind\
    \ == last_ind\n        return \"\"\n    end\n    if first_ind == length\n    \
    \    return \"\"\n    end\n    return word[first_ind]\nend", "    vowels = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"]\n    reverced_word = reverse(word)\n    res =\
    \ \"\"\n    flag = false\n    for letter in reverced_word\n        if letter in\
    \ vowels\n            if flag == true\n                res = letter\n        \
    \        break\n            end\n        else\n            flag = true\n     \
    \   end\n    end\n    return res\nend", "    return join(split(word[1:end-1],r\"\
    [^aeiouAEIOU]\"))[end]\nend\nprintln(get_closest_vowel(\"yogurt\"))\nprintln(get_closest_vowel(\"\
    FULL\"))\nprintln(get_closest_vowel(\"quick\"))\nprintln(get_closest_vowel(\"\
    ab\"))", "    if length(word) < 3\n        return \"\"\n    end\n    if isvowel(word[end-1])\
    \ && isvowel(word[end]) \n        return \"\"\n    end\n    if isvowel(word[end])\
    \ && isvowel(word[end-2]) \n        return \"\"\n    end\n    if isvowel(word[end])\
    \ && isvowel(word[end-3]) \n        return \"\"\n    end\n    if isvowel(word[end])\
    \ && isvowel(word[end-4]) \n        return \"\"\n    end\n    if isvowel(word[end])\
    \ && isvowel(word[end-5]) \n        return \"\"\n    end\n    if isvowel(word[end])\
    \ && isvowel(word[end-6]) \n        return \"\"\n    end\n    if isvowel(word[end])\
    \ && isvowel(word[end-7]) \n        return \"\"\n    end\n    if isvowel(word[end])\
    \ && isvowel(word[end-8]) \n        return \"\"\n    end\n    if isvowel(word[end])\
    \ && isvowel(word[end-9]) \n        return \"\"\n    end\n    if isvowel(word[end])\
    \ && isvowel(word[end-10]) \n        return \"\"\n    end\n    if isvowel(word[end])\
    \ && isvowel(word[end-11]) \n        return \"\"\n    end\n    if isvowel(word[end])\
    \ && isvowel(word[end-12]) \n        return \"\"\n    end\n    if isvowel(word[end])\
    \ && isvowel(word[end-13]) \n        return \"\"\n    end\n    if isvowel(word[end])\
    \ && isvowel(word[end-14]) \n        return \"\"\n    end\n    if isvowel(word[end])\
    \ && isvowel(word[end-15]) \n        return \"\"\n    end\n    if isvowel(word[end])\
    \ && isvow", "    # Your code here ...\nend", "    if search(r\"[^aeiou]\", word[end])\
    \ == nothing\n        return \"\"\n    end\n    word = word[end:-1:1]\n    for\
    \ i in 1:length(word)\n        if search(r\"[aeiou]\", word[i]) != nothing\n \
    \           for j in i:length(word)\n                if search(r\"[^aeiou]\",\
    \ word[j]) != nothing\n                    return word[i]\n                end\n\
    \            end\n        end\n    end\n    return \"\"\nend", "    s = \"\"\n\
    \    for i in 1:length(word)\n        if (word[i] in [\"a\", \"e\", \"i\", \"\
    o\", \"u\"]) && (word[i+1] in [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\"])\n            s = word[i]\n            break\n        end\n\
    \    end\n    return s\nend", "    \n    #vowels = \"aeiouAEIOU\"\n    #conso\
    \ = \"qwrtypsdfghjklzxcvbnmQWRTYPSDFGHJKLZXCVBNM\"\n    #vowels_index = findall(r\"\
    \\A[aeiouAEIOU]\\Z\", word)\n    #conso_index = findall(r\"\\A[qwrtypsdfghjklzxcvbnmQWRTYPSDFGHJKLZXCVBNM]\\\
    Z\", word)\n    #s = findall(r\"\\A[^aeiouAEIOU]\\Z\", word)\n    #s = findall(r\"\
    \\A[aeiouAEIOU][qwrtypsdfghjklzxcvbnmQWRTYPSDFGHJKLZXCVBNM][aeiouAEIOU]\\Z\",\
    \ word)\n    #println(s)\n    #if s != []\n    #    return word[s[1]+1]\n    #else\n\
    \    #    return \"\"\n    #end\n    \n    n = length(word)\n    for i in (1:n-1)\n\
    \        if isconsonant(word[i]) && isvowel(word[i+1])\n            return word[i+1]\n\
    \        end\n    end\n    return \"\"\nend", "    index = length(word)\n    empty\
    \ = \"\"\n    consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"\
    x\", \"y\", \"z\"]\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    while\
    \ true\n        if index == 0\n            return empty\n        end\n       \
    \ if in(word[index], consonants)\n            if in(word[index-1], vowels) &&\
    \ in(word[index-2], consonants)\n                index -= 1\n            else\n\
    \                return word[index-1]\n            end\n        end\n        index\
    \ -= 1\n    end\nend", "    vowels = \"aeiouAEIOU\"\n    for i in reverse(1:length(word))\n\
    \        if in(word[i], vowels)\n            if i + 1 <= length(word)\n      \
    \          if in(word[i+1], vowels) == false\n                    return word[i]\n\
    \                end\n            end\n        end\n    end\n    return \"\"\n\
    end", "    n = length(word)\n    while n > 1 && !is_vowel(word[n])\n        n\
    \ -= 1\n    end\n    while n > 1 && !is_vowel(word[n-1])\n        n -= 1\n   \
    \ end\n    if n == 1\n        return \"\"\n    else\n        return word[n]\n\
    \    end\nend", "    vowels = \"aeiouAEIOU\"\n    for index in reverse(eachindex(word))\n\
    \        if word[index] in vowels\n            for index2 in reverse(eachindex(word))\n\
    \                if word[index2] \u2209 vowels\n                    return word[index]\n\
    \                end\n            end\n        end\n    end\n    return \"\"\n\
    end", "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    word = word |> String.lowercase\n\
    \    index = findfirst(word, \"vowels\")\n    if index != nothing\n        return\
    \ word[index]\n    else\n        return \"\"\n    end\nend", "    vowels = \"\
    aeiou\"\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    closest_vowel = \"\"\n\
    \    distance = -1\n    i = length(word)\n    while i >= 1\n        if isin(word[i],\
    \ vowels) && i < length(word) && isin(word[i+1], consonants) && i > 1 && isin(word[i-1],\
    \ consonants)\n            closest_vowel = word[i]\n            distance = i\n\
    \            break\n        end\n        i -= 1\n    end\n    return closest_vowel\n\
    end", "    if length(word) == 1\n        return \"\"\n    end\n    if isvowel(word[end])\n\
    \        return \"\"\n    end\n    for i in length(word):-1:2\n        if isvowel(word[i])\
    \ && !isvowel(word[i-1])\n            return word[i]\n        end\n    end\n \
    \   return \"\"\nend", "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n   \
    \ word = reverse(word)\n    for i = 1:length(word)\n        if in(word[i], vowels)\n\
    \            if in(word[i+1], vowels) || in(word[i-1], vowels)\n             \
    \   continue\n            else\n                return word[i]\n            end\n\
    \        end\n    end\n    return \"\"\nend", "    letters = ['a', 'e', 'i', 'o',\
    \ 'u']\n    vowels_index = []\n    for (i, v) in enumerate(word)\n        push!(vowels_index,\
    \ i) if isin(v, letters)\n    end\n    if length(vowels_index) == 0\n        return\
    \ \"\"\n    end\n    consonants_index = filter(i -> !isin(i, vowels_index), 1:length(word))\n\
    \    b = []\n    for i in 1:length(vowels_index)\n        a = filter(i -> (i >\
    \ vowels_index[i] && i < length(word)), consonants_index)\n        b = [word[vowels_index[i]]\
    \ if length(a) == 0 \n            else word[vowels_index[i]] for a in a]\n   \
    \ end\n    return b[end]\nend", "    r = []\n    for letter in reverse(word)\n\
    \        push!(r, letter)\n        if letter in \"aeiou\"\n            break\n\
    \        end\n    end\n    if length(r) == 1\n        return \"\"\n    end\n \
    \   for letter in reverse(word)\n        if letter in \"aeiou\"\n            return\
    \ letter\n        end\n    end\nend", "    # Remove initial and final vowels\n\
    \    if isvowel(word[1])\n        word = word[2:end]\n    end\n    if isvowel(word[end])\n\
    \        word = word[1:end-1]\n    end\n    # Loop from end of string and find\
    \ closest vowel\n    for i in rev(1:length(word)-1)\n        if isvowel(word[i])\n\
    \            return word[i]\n        end\n    end\n    return \"\"\nend", "  \
    \  vowels = \"aeiou\"\n    right_vowels = []\n    n = length(word)\n    for i\
    \ in 1:n-1\n        if word[i] in vowels && word[i+1] not in vowels\n        \
    \    push!(right_vowels, word[i])\n        end\n    end\n    if isempty(right_vowels)\n\
    \        return \"\"\n    else\n        last_vowel = right_vowels[end]\n     \
    \   return last_vowel\n    end\nend", "    vowels = Set(\"AEIOU\")\n    get_closest_vowel(word)\
    \ = findnext(eachmatch(r\"([BCDFGHJKLMNPQRSTVWXYZ])([AEIOU])([BCDFGHJKLMNPQRSTVWXYZ])\"\
    , word)) do v\n        match(r\"[BCDFGHJKLMNPQRSTVWXYZ]\", v.captures[1]) && match(r\"\
    [BCDFGHJKLMNPQRSTVWXYZ]\", v.captures[3])\n    end |> get |> getfield(:captures)\
    \ |> get |> getfield(:mid)\nend", "    return word\nend", "    vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n    words = split(word, \"\")\n    closest_vowel\
    \ = \"\"\n    vowel_pos = 0\n    consonant_pos = 0\n    index = 0\n    for letter\
    \ in words\n        if letter in vowels && consonant_pos >= 0\n            vowel_pos\
    \ = index\n            if vowel_pos > consonant_pos\n                closest_vowel\
    \ = letter\n                break\n            end\n        elseif letter !in\
    \ vowels\n            consonant_pos = index\n        end\n        index += 1\n\
    \    end\n    return closest_vowel\nend\n ", "    # the second argument is the\
    \ range to start the search\n    # the first argument is the range to stop the\
    \ search\n    # the third argument is the range step\n    i = length(word) \n\
    \    while i > 1\n        if !(word[i] in \"aeiou\") && (word[i-1] in \"aeiou\"\
    )\n            return word[i-1]\n        end\n        i -= 1\n    end\n    return\
    \ \"\"\nend", "    vowel_pos = [findfirst(w->w in \"aeiou\", word[i:end]) for\
    \ i in 1:length(word)]\n    candidate_pos = [v+i-1 for (i,v) in enumerate(vowel_pos)\
    \ if v != nothing]\n    candidate_pos = [pos for pos in candidate_pos if pos !=\
    \ 1 && pos != length(word)]\n    if length(candidate_pos) > 0\n        return\
    \ word[maximum(candidate_pos)]\n    else\n        return \"\"\n    end\nend",
  "    vowels = \"AEIOUaeiou\"\n    for i in 1:length(word)\n        if (word[i] in\
    \ vowels) && (i < length(word)) && !(word[i+1] in vowels)\n            return\
    \ word[i]\n        end\n    end\n    return \"\"\nend", "    N = length(word)\n\
    \    for (i,x) in enumerate(word)\n        if x in (\"a\",\"e\",\"i\",\"o\",\"\
    u\")\n            if i > 1 && i < N\n                if word[i-1] in (\"a\",\"\
    e\",\"i\",\"o\",\"u\")\n                    continue\n                elseif word[i+1]\
    \ in (\"a\",\"e\",\"i\",\"o\",\"u\")\n                    continue\n         \
    \       else\n                    return x\n                end\n            end\n\
    \        end\n    end\n    return \"\"\nend", "    # your code comes here\n  \
    \  return \"\"\nend", "    vowels = \"aeiou\"\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    word = reverse(lowercase(word))\n    closest = \"\"\n    for c in word\n\
    \        if c in vowels && !isempty(closest)\n            return uppercase(closest)\n\
    \        elseif c in consonants\n            closest = c\n        end\n    end\n\
    \    return \"\"\nend", "    vowels = \"aeiouAEIOU\"\n    for i in 1:length(word)\n\
    \        if (word[i] in vowels)\n            if (i > 1) && (word[i-1] in vowels)\n\
    \                if (i < length(word)) && (word[i+1] in vowels)\n            \
    \        continue\n                else\n                    return word[i]\n\
    \                end\n            elseif (i == 1)\n                if (i < length(word))\
    \ && (word[i+1] in vowels)\n                    continue\n                else\n\
    \                    return word[i]\n                end\n            elseif (i\
    \ == length(word)) && (word[i-1] in vowels)\n                continue\n      \
    \      elseif (i == length(word)) && !(word[i-1] in vowels)\n                return\
    \ word[i]\n            else\n                continue\n            end\n     \
    \   end\n    end\n    return \"\"\nend", "    word_b = word[end:-1:1]\n    for\
    \ i in 1:length(word_b)\n        if word_b[i] in \"AEIOU\" && word_b[i+1] in \"\
    bcdfghjklmnpqrstvwxyz\"\n            return word_b[i]\n        end\n    end\n\
    \    return \"\"\nend", "    for i in 1:length(word) \n        if any([word[i]\
    \ in v for v in [\"a\", \"e\", \"i\", \"o\", \"u\"]]) && any([word[i - 1] in v\
    \ for v in [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"\
    m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"\
    z\"]]) && any([word[i + 1] in v for v in [\"b\", \"c\", \"d\", \"f\", \"g\", \"\
    h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"\
    v\", \"w\", \"x\", \"y\", \"z\"]])\n            return word[i]\n        end\n\
    \    end\n    return \"\"\nend\n\"\"\"\n    get_closest_vowel(\"yogurt\") ==>\
    \ \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\"\
    ) ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n\"\"\"", "    vowels = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"]\n    ends_with_vowel = false\n    for i in 1:length(word)\n\
    \        if word[end-i+1] in vowels\n            ends_with_vowel = true\n    \
    \        break\n        end\n    end\n    if ends_with_vowel\n        return \"\
    \";\n    end\n    for i in 1:length(word)\n        if word[end-i+1] in vowels\n\
    \            return word[end-i+1]\n        end\n    end\n    return \"\"\nend",
  "    string = []\n    for i in 1:length(word)\n        push!(string, word[i])\n\
    \    end\n    for i in 1:length(string)\n        if string[end-i] in ['a','e','i','o','u']\n\
    \            if string[end-i-1] in ['b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','y','z']\n\
    \                return string[end-i]\n            end\n        end\n    end\n\
    \    return \"\"\nend", "    index_arr = findall(r\"[^AEIOUaeiou]+[AEIOUaeiou]\"\
    , word)\n    if length(index_arr) != 0\n        return index_arr[end][end]\n \
    \   else\n        return \"\"\n    end\nend", "    #Return the closest vowel that\
    \ stands between two consonants \n    #from the right side of the word (case sensitive).",
  "    k = findall(r\"[^aeiou]\", word)\n    if length(k) >= 2\n        return word[k[end-1]+1:k[end]]\n\
    \    else\n        return \"\"\n    end\nend", "    closest = ''\n    if word[1]\
    \ in \"AEIOUaeiou\"\n        return ''\n    end\n    l = length(word)\n    if\
    \ word[l] in \"AEIOUaeiou\"\n        return ''\n    end\n    for i in 2:l-1\n\
    \        if word[i] in \"AEIOUaeiou\"\n            if (word[i-1] in \"BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz\"\
    ) & (word[i+1] in \"BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz\")\n          \
    \      closest = word[i]\n            end\n        end\n    end\n    return closest\n\
    end", "    reverse_word = reverse(word)\n    for i = 1:length(reverse_word)\n\
    \        for j = 1:length(reverse_word)\n            if i != j\n             \
    \   if reverse_word[i] in \"aeiou\" && reverse_word[j] in \"aeiou\"\n        \
    \            return reverse(reverse_word[i])\n                end\n          \
    \  end\n        end\n    end\n    return \"\"\nend", "    vowels = [\"a\", \"\
    e\", \"i\", \"o\", \"u\"]\n    word_array = split(word, \"\")\n    result = \"\
    \"\n    for i in 1:length(word_array)\n        if (word_array[i] in vowels) &&\
    \ (word_array[i-1] in vowels)\n            result = word_array[i]\n          \
    \  break\n        end\n    end\n    return result\nend", "    ls = [\"a\", \"\
    e\", \"i\", \"o\", \"u\"]\n    vowel_index = -1\n    for i in range(length(word)-1,\
    \ 0, -1)\n        if word[i] in ls\n            vowel_index = i\n            break\n\
    \        end\n    end\n    if vowel_index > 0\n        for i in range(vowel_index-1,\
    \ 0, -1)\n            if !(word[i] in ls)\n                return word[vowel_index]\n\
    \            end\n        end\n    end\n    return \"\"\nend", "    \"\"\"Find\
    \ the closest vowel from the right side of the word and return it. \"\"\"\n  \
    \  vowels = \"aeiou\"\n    left = 0\n    right = length(word)\n    index = length(word)\n\
    \    result = \"\"\n    for i in 1:length(word)\n        if word[i] in vowels\n\
    \            left = i\n            break\n        end\n    end\n    for i in (length(word):-1:1)\n\
    \        if word[i] in vowels\n            right = i\n            break\n    \
    \    end\n    end\n    if (left != 0) & (right != length(word))\n        distance\
    \ = right - left\n        index = right\n        for i in (left+1):(right-1)\n\
    \            if word[i] in vowels\n                d = right - i\n           \
    \     if d < distance\n                    distance = d\n                    index\
    \ = i\n                end\n            end\n        end\n        result = word[index]\n\
    \    end\n    return result\nend", "    vowels = \"aeiou\"\n    new_word = copy(word)\n\
    \    for i = 1:length(word)\n        if !(word[i] in vowels)\n            new_word[i]\
    \ = \" \"\n        end\n    end\n    words = split(new_word, \" \")\n    if length(words)\
    \ <= 1\n        return \"\"\n    end\n    words = reverse(words)\n    return words[2][1]\n\
    end", "    vowels = \"AEIOUaeiou\"\n    word_r = reverse(word)\n    for i in eachindex(word_r)\n\
    \        if i < length(word_r) - 1 && word_r[i] in vowels && word_r[i+1] in vowels\n\
    \            return \n        end\n    end\n    return \"\"\nend\nget_closest_vowel(\"\
    yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"\
    quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n ", "    vowel = \"AEIOUaeiou\"\
    \n    consonant = \"BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz\"\n    for i in\
    \ 1:length(word)\n        if in(word[end-i+1], vowel) && in(word[end-i], consonant)\n\
    \            return word[end-i+1]\n        end\n    end\n    return \"\"\nend",
  "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    closest_vowel = \"\"\n  \
    \  for idx = length(word):-1:1\n        if word[idx] in vowels\n            closest_vowel\
    \ = word[idx]\n            if idx != length(word)\n                if word[idx+1]\
    \ in vowels\n                    break\n                end\n            end\n\
    \        end\n    end\n    return closest_vowel\nend", "    vowels = [\"a\", \"\
    e\", \"i\", \"o\", \"u\"]\n    word = word[end:-1:1]\n    word = replace(word,\
    \ \"a\", \"0\")\n    word = replace(word, \"e\", \"0\")\n    word = replace(word,\
    \ \"i\", \"0\")\n    word = replace(word, \"o\", \"0\")\n    word = replace(word,\
    \ \"u\", \"0\")\n    word = replace(word, \"y\", \"0\")\n    word = replace(word,\
    \ \"A\", \"0\")\n    word = replace(word, \"E\", \"0\")\n    word = replace(word,\
    \ \"I\", \"0\")\n    word = replace(word, \"O\", \"0\")\n    word = replace(word,\
    \ \"U\", \"0\")\n    word = replace(word, \"Y\", \"0\")\n    word = replace(word,\
    \ \"0\", \"\")\n    if word == \"\"\n        return \"\"\n    end\n    for x in\
    \ 1:length(word)\n        if x == length(word)\n            return \"\"\n    \
    \    end\n        if (word[x] in vowels) && (word[x+1] in vowels)\n          \
    \  break\n        end\n    end\n    return word[x]\nend", "    if length(word)\
    \ < 2\n        return \"\"\n    end\n    if !isalpha(word[end])\n        word\
    \ = word[1:end-1]\n    end\n    if !isalpha(word[1])\n        word = word[2:end]\n\
    \    end\n    vowels = \"aeiou\"\n    for i = length(word):-1:2\n        if (word[i]\
    \ in vowels) && (word[i-1] in \"bcdfghjklmnpqrstvwxyz\")\n            return word[i]\n\
    \        end\n    end\n    return \"\"\nend\n\"\"\"\n    sort_by_value(dictionary)\
    \ -> sorted_dictionary\n    Takes a dict or OrderedDict and returns a sorted OrderedDict\
    \ by value.\n\"\"\"", "    is_cons = Set(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    )\n    is_vowel = Set(\"aeiouAEIOU\")\n    word_r = reverse(word)\n    for i in\
    \ 1:length(word_r)\n        # We didn't find a vowel yet\n        if in(word_r[i],\
    \ is_vowel) == false\n            continue\n        # We found a vowel, check\
    \ if it's between two consonants\n        elseif i != length(word_r) && in(word_r[i+1],\
    \ is_cons)\n            return word_r[i]\n        else\n            return \"\"\
    \n        end\n    end\n    return \"\"\nend", "    vowels = (\"a\",\"e\",\"i\"\
    ,\"o\",\"u\",\"A\",\"E\",\"I\",\"O\",\"U\")\n    word_length = length(word)\n\
    \    for i = word_length-1:-1:2\n        if word[i] in vowels\n            return\
    \ word[i]\n        end\n    end\n    return \"\"\nend", "    # Some algorithms\
    \ only work for ASCII\n    # so in that case we want to use only ASCII characters,\
    \ not Unicode ones\n    # this is the only way I could figure out how to do it\n\
    \    search = collect(ASCIIString(word))\n    if search[end] in [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"]\n        return \"\"\n    end\n    for i in search[end-1:-1:(-1)]\n\
    \        if i in [\"a\", \"e\", \"i\", \"o\", \"u\"]\n            return i\n \
    \       end\n    end\n    return \"\"\nend", "    vowels = ['a', 'e', 'i', 'o',\
    \ 'u']\n    #find the first vowel by counting backwards\n    found = false\n \
    \   for (index, letter) in enumerate(reverse(word))\n        if letter in vowels\n\
    \            found = true\n            break\n        end\n    end\n    if found\n\
    \        #now find the previous consonant\n        found = false\n        for\
    \ (index, letter) in enumerate(reverse(word[1:end-index]))\n            if letter\
    \ \u2209 vowels\n                found = true\n                break\n       \
    \     end\n        end\n        if found\n            return word[end-index]\n\
    \        end\n    end\n    return \"\"\nend\nprintln(get_closest_vowel(\"yogurt\"\
    ))\nprintln(get_closest_vowel(\"FULL\"))\nprintln(get_closest_vowel(\"quick\"\
    ))\nprintln(get_closest_vowel(\"ab\"))", "    vowels = [\"a\", \"e\", \"i\", \"\
    o\", \"u\"]\n    word = reverse(lowercase(word))\n    for i = 1:length(word)\n\
    \        if (word[i] in vowels)\n            if (i < length(word)) && (word[i+1]\
    \ in vowels)\n                continue\n            elseif (i == length(word))\n\
    \                continue\n            else\n                return reverse(uppercase(word[i]))\n\
    \            end\n        end\n    end\n    return \"\"\nend\n ", "    # Add your\
    \ code here\n    return \"\";\nend", "    vowels = \"aeiouAEIOU\"\n    for (i,letter)\
    \ in enumerate(word)\n        if i > 1 && letter in vowels && !(word[i-1] in vowels)\
    \ && !(word[i-2] in vowels)\n            return letter\n        end\n    end\n\
    \    return \"\"\nend", "    if length(word) == 1\n        return \"\"\n    end\n\
    \    word = word[end:-1:1]\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"\
    A\", \"E\", \"I\", \"O\", \"U\"]\n    if word[end] in vowels || word[1] in vowels\n\
    \        return \"\"\n    end\n    is_consonant = true\n    for (i, w) in enumerate(word)\n\
    \        if w in vowels\n            if is_consonant\n                is_consonant\
    \ = false\n            else\n                return w\n            end\n     \
    \   else\n            is_consonant = true\n        end\n    end\n    return \"\
    \"\nend", "    nullable = Set{Char}()\n    for c in word\n        if c in [\"\
    a\", \"e\", \"i\", \"o\", \"u\"]\n            return c\n        elseif !(c in\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\"])\n            push!(nullable, c)\n     \
    \   end\n    end\n    return \"\"\nend", "    vowels = \"aeiouAEIOU\"\n    rword\
    \ = reverse(word)\n    for i in 1:length(rword)\n        if rword[i] in vowels\n\
    \            return word[length(word)-i+1]\n        end\n    end\n    return \"\
    \"\nend", "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    is_vowel(x) =\
    \ x in vowels\n    right = reverse(word)\n    right_vowels = [x for x in right\
    \ if is_vowel(x)]\n    right_consonants = [x for x in right if !is_vowel(x)]\n\
    \    res = []\n    for (i, c) in enumerate(right_consonants)\n        if i + 1\
    \ < length(right_consonants)\n            if right_consonants[i+1] in vowels\n\
    \                push!(res, right_consonants[i+1])\n            end\n        end\n\
    \    end\n    res\nend", "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n \
    \   result = \"\"\n    idx = findlast(collect(word), x -> x in vowels)\n    #\
    \ if we found a vowel check if it is followed by a consonant\n    if idx != nothing\n\
    \        if word[idx+1] \u2209 vowels\n            result = word[idx]\n      \
    \  end\n    end\n    return result\nend", "    i = length(word)\n    while i >=\
    \ 1\n        if word[i] in \"aeiou\"\n            return word[i]\n        end\n\
    \        i -= 1\n    end\n    return \"\"\nend", "    if length(word) <= 1\n \
    \       return \"\"\n    end\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    ]\n    arr = string(word)\n    i = length(arr)\n    max_index = 0\n    while i\
    \ > 1\n        if haskey(vowels, arr[i]) && !haskey(vowels, arr[i-1])\n      \
    \      max_index = i\n            break\n        end\n        i -= 1\n    end\n\
    \    return arr[max_index]\nend", "    vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"]\n    for i = length(word), 1, -1\n        if in(word[i], vowels)\n      \
    \      return word[i]\n        end\n    end\n    return \"\"\nend", "  # Remove\
    \ vowels from begining of word\n  word = join(filter(s -> ! isvowel(s), word))\n\
    \  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  for i = length(word):-1:1\n\
    \    if isvowel(word[i])\n      return word[i]\n    end\n  end\n  return \"\"\n\
    end", "    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    index = -1\n    for i = 1:length(word)\n        if i == length(word)\n \
    \           if ( (word[length(word)-1] in consonants) & (word[length(word)] in\
    \ vowels) )\n                return word[length(word)]\n            else\n   \
    \             return \"\"\n            end\n        end\n        if ( (word[length(word)-i]\
    \ in consonants) & (word[length(word)-i+1] in vowels) )\n            index = length(word)-i+1\n\
    \            break\n        end\n    end\n    return word[index]\nend", "    end\n\
    \    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in 1:length(word)\n\
    \        for j in vowels\n            if (i + 1 <= length(word)) && j == word[i]\
    \ && !(j in vowels) && !(word[i + 1] in vowels)\n                return j\n  \
    \          end\n        end\n    end\n    return \"\"\nend", "    for i in length(word):-1:1\n\
    \        if isvowel(word[i])\n            if isvowel(word[i-1]) || isvowel(word[i+1])\n\
    \                continue\n            else\n                return word[i]\n\
    \            end\n        end\n    end\n    return \"\"\nend", "    vowels = \"\
    aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n\
    \    for i in 1:length(word)\n        if haskey(vowels, word[i]) && i != 1 &&\
    \ i != length(word) && haskey(consonants, word[i-1]) && haskey(consonants, word[i+1])\n\
    \            return word[i]\n        end\n    end\n    return \"\"\nend", "  \
    \  len = length(word)\n    len = ifelse(len==1, len, len-1)\n    pos = len\n \
    \   while pos>=1\n        letter = word[pos]\n        if isvowel(letter)==false\n\
    \            if isvowel(word[pos+1])==true\n                return(word[pos+1])\n\
    \            end\n        end\n        pos = pos-1\n    end\n    return(\"\")\n\
    end", "    word = word[end:-1:1] \n    for (i,c) in enumerate(word)\n        if\
    \ c in \"aeiouAEIOU\"\n            if i == 1\n                return \"\"\n  \
    \          else\n                return word[i-1]\n            end\n        end\n\
    \    end\n    return \"\"\nend", "    vowels = \"aeiouAEIOU\"\n    split = 1\n\
    \    for i in 1:length(word)\n        if split > 1\n            return split\n\
    \        end\n        if i != 1\n            if (lowercase(word[i]) in vowels)\
    \ & (lowercase(word[i-1]) in vowels)\n                split = split + 1\n    \
    \        end\n        end\n    end\n    return split\nend", "    if ismatch(r\"\
    ([^aeiou])*?([aeiou])[^aeiou]*$\", word)\n        return match(r\"([^aeiou])*?([aeiou])[^aeiou]*$\"\
    , word).captures[2]\n    else\n        return \"\"\n    end\nend", "    \n   \
    \ for i in word\n        if i in \"aeiou\"\n            return i\n        end\n\
    \    end\n    \n    return \"\"\nend", "    \n    vowels = \"aeiouAEIOU\"\n  \
    \  cons = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    w = word[end:-1:1]\
    \ #reverse word\n    \n    i = 1\n    curr = \"\"\n    while i < length(w) &&\
    \ curr == \"\"\n        if in(w[i], cons) && in(w[i-1], cons) && in(w[i+1], vowels)\n\
    \            curr = w[i+1]\n        end\n        i += 1\n    end\n    \n    curr\n\
    end", "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    consonants = [\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    new_word\
    \ = word[end:-1:end]\n    for i in eachindex(new_word)\n        if (new_word[i]\
    \ in vowels) && (new_word[i+1] in consonants)\n            return new_word[i]\n\
    \        end\n    end\n    return \"\"\nend", "    end_at = length(word)\n   \
    \ for i in reverse(1:length(word))\n        if isvowel(word[i])\n            end_at\
    \ = i\n            break\n        end\n    end\n    for i in reverse(1:end_at)\n\
    \        if isvowel(word[i])\n            return word[i]\n        end\n    end\n\
    \    return \"\"\nend", "    # write your code here\nend\n@assert get_closest_vowel(\"\
    yogurt\") == \"u\"\n@assert get_closest_vowel(\"FULL\") == \"U\"\n@assert get_closest_vowel(\"\
    quick\") == \"\"\n@assert get_closest_vowel(\"ab\") == \"\"\n ", "    vowels =\
    \ \"aeiouAEIOU\"\n    cons = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n\
    \    for i = length(word):-1:1\n        if (word[i] in cons) && (word[i-1] in\
    \ cons) && (word[i+1] in vowels)\n            return word[i+1]\n        end\n\
    \    end\n    return \"\"\nend", "    vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"]\n    for char in reverse(word)\n        if char in vowels\n            return\
    \ char\n        end\n    end\n    return \"\"\nend", "    function is_vowel(c::Char)::Bool\n\
    \        return c in \"aeiouAEIOU\"\n    end\n    word = reverse(word)\n    cons_group\
    \ = join(collect(word[1]), \"\")\n    for i = 2:length(word)\n        if !is_vowel(word[i])\n\
    \            cons_group = join([word[i], cons_group], \"\")\n        else\n  \
    \          if is_vowel(word[i - 1])\n                cons_group = join([word[i],\
    \ cons_group], \"\")\n            else\n                return reverse(word[i])\n\
    \            end\n        end\n    end\n    return \"\"\nend", "    vowels = Dict(\"\
    A\" => 1, \"E\" => 1, \"I\" => 1, \"O\" => 1, \"U\" => 1)\n    cons_count = 0\n\
    \    for i in collect(1:length(word))\n        c = word[length(word) - i + 1]\n\
    \        if c in keys(vowels)\n            if cons_count > 1\n               \
    \ return c\n            end\n            cons_count = 0\n        else\n      \
    \      cons_count += 1\n        end\n    end\n    return \"\"\nend", "    if !any(x\
    \ in \"AEIOU\" for x in word) return \"\"\n    for (i,x) in enumerate(reverse(word))\n\
    \        if x in \"AEIOU\"\n            return x\n        elseif x in \"BCDFGHJKLMNPQRSTVWXYZ\"\
    \n            return \"\"\n        end\n    end\nend", "    test =  \"aeiou\"\n\
    \    for i = 1:length(word)\n        if !isempty(search(test,word[i]))\n     \
    \       if !isempty(search(test,word[i-1])) || !isempty(search(test,word[i+1]))\n\
    \                continue\n            else\n                return word[i]\n\
    \            end\n        end\n    end\n    return \"\"\nend", "    is_vowel(ch)\
    \ = \"aeiou\".find(ch) >= 0 ? true : false\n    for i = length(word):-1:1\n  \
    \      prev_char = word[i-1]\n        if is_vowel(prev_char)\n            return\
    \ \"\"\n        end\n        if !is_vowel(word[i])\n            continue\n   \
    \     end\n        if i == length(word)\n            return \"\"\n        end\n\
    \        if !is_vowel(word[i+1])\n            return word[i]\n        end\n  \
    \  end\n    return \"\"\nend", "    # Your code here\n    vowels = \"aeiou\"\n\
    \    for i in eachindex(word)\n        if word[i] in vowels\n            if i\
    \ > 1 && word[i-1] in vowels\n                continue\n            elseif i ==\
    \ 1 && word[i-1] in vowels\n                continue\n            elseif i ==\
    \ length(word)\n                continue\n            elseif word[i+1] in vowels\n\
    \                continue\n            else\n                return word[i]\n\
    \            end\n        end\n    end\n    return \"\"\nend", "    vowels = \"\
    aeiouAEIOU\"\n    word_rev = word[end:-1:1]\n    word_rev_len = length(word_rev)\n\
    \    for i = 1:word_rev_len\n        if contains(vowels, word_rev[i])\n      \
    \      idx = i\n            break\n        end\n    end\n    if idx == 1\n   \
    \     return \"\"\n    end\n    if word_rev[idx-1] == word_rev[idx+1]\n      \
    \  return \"\"\n    end\n    return word_rev[idx]\nend", "    n = length(word)\n\
    \    d = 100\n    for i in 1:n-1\n        if \"AEIOU\".find(word[i]) != -1 &&\
    \ !\"AEIOU\".find(word[i+1]) != -1\n            dist = n - i - 1\n           \
    \ if dist < d\n                vowel = word[i]\n                d = dist\n   \
    \         end\n        end\n    end\n    return vowel\nend", "    \n    # check\
    \ if string is empty\n    if length(word) < 1\n        return \"\"\n    end\n\
    \    \n    # check if string is just one character\n    if length(word) == 1\n\
    \        return \"\"\n    end\n    \n    # define the vowels\n    vowels = [\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"]\n    \n  \
    \  # define a counter \n    x = length(word)\n    \n    # create a loop that goes\
    \ from the end of the string to the beginning\n    while x > 1\n        \n   \
    \     # check if the character is a vowel \n        if word[x] in vowels\n   \
    \         \n            # check if the previous character is a vowel \n      \
    \      if word[x-1] in vowels\n                \n                # decrease the\
    \ counter\n                x -= 1\n                \n            else\n      \
    \          \n                # if the previous character is not a vowel, the vowel\
    \ found is the closest one\n                return word[x]\n            end\n\
    \            \n        else\n            \n            # if the character is not\
    \ a vowel, decrease the counter\n            x -= 1\n        end\n    end\n  \
    \  \n    # if no vowels were found, return an empty string\n    return \"\"\n\
    end", "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    letters = split(word,\
    \ \"\")\n    letters_length = length(letters)\n    if letters_length <= 2\n  \
    \      return \"\"\n    end\n    closest_vowel = \"\"\n    closest_index = 100\n\
    \    for i in 2:letters_length-1\n        if !in(letters[i], vowels)\n       \
    \     continue\n        end\n        if !in(letters[i-1], vowels) && !in(letters[i+1],\
    \ vowels)\n            if i < closest_index\n                closest_index = i\n\
    \                closest_vowel = letters[i]\n            end\n        end\n  \
    \  end\n    closest_vowel\nend", "    word = lowercase(word)\n    vowels = ['a',\
    \ 'e', 'i', 'o', 'u']\n    for i in 1:length(word)\n        if word[end-i] in\
    \ vowels\n            return uppercase(word[end-i])\n        end\n    end\n  \
    \  return \"\"\nend", "    if word[end] in \"aeiouAEIOU\" || word[1] in \"aeiouAEIOU\"\
    \n        return \"\"\n    end\n    for i in 2:length(word)\n        if word[i]\
    \ in \"aeiouAEIOU\"\n            if word[i-1] not in \"aeiouAEIOU\" && word[i+1]\
    \ not in \"aeiouAEIOU\"\n                return word[i]\n            end\n   \
    \     end\n    end\n    return \"\"\nend", "    #only vowels\n    if (word ==\
    \ word * r\"a|e|i|o|u\")\n        return \"\"\n    end\n    #only consonants\n\
    \    if (word == word * r\"[^aeiou]\")\n        return \"\"\n    end\n    #get\
    \ all vowels\n    vowels = matchall(r\"[aeiou]\", word)\n    #for each vowel,\
    \ get the 2 closest consonants\n    consonants = [word[i+1:word[i+1:end]==r\"\
    [^aeiou]\" ? i+1+findfirst(r\"[^aeiou]\", word[i+1:end])+1 : end] for i in eachindex(vowels)]\n\
    \    #get the left most one\n    return vowels[findfirst(consonants) !== nothing\
    \ ? findfirst(consonants) : end]\nend\n\"\"\"\nprint(get_closest_vowel(\"yogurt\"\
    ))\nprint(get_closest_vowel(\"FULL\"))\nprint(get_closest_vowel(\"quick\"))\n\
    print(get_closest_vowel(\"ab\"))\n\"\"\"", "    vowels = \"aeiouAEIOU\"\n    for\
    \ i in 1:length(word)\n        if (word[i] in vowels) && (((word[i+1] in vowels)\
    \ == false) || (i == length(word)))\n            return word[i]\n        end\n\
    \    end\n    return \"\"\nend", "    # TODO: your code goes here\nend", "   \
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    if length(word) == 1\n   \
    \     return \"\"\n    end\n    if length(word) > 1\n        for i in 1:length(word)\n\
    \            if word[end - i] in vowels\n                if word[end - i - 1]\
    \ in vowels\n                    break\n                else\n               \
    \     return word[end - i]\n                end\n            end\n        end\n\
    \    end\n    return \"\"\nend", "    if word == \"\"\n        return \"\"\n \
    \   end\n    vowels = \"aeiouAEIOU\"\n    for i = length(word):-1:2\n        if\
    \ findin(vowels, word[i]) != 0\n            if !(findin(vowels, word[i-1]) !=\
    \ 0) && !(findin(vowels, word[i+1]) != 0)\n                return word[i]\n  \
    \          end\n        end\n    end\n    return \"\"\nend", "    word_length\
    \ = size(word)\n    word_to_upper = String(uppercase(word))\n    vowels = [\"\
    A\", \"E\", \"I\", \"O\", \"U\"]\n    if word_length < 3\n        return \"\"\n\
    \    end\n    for i = word_length:-1:3\n        last_vowel = word_to_upper[i-1]\n\
    \        if  last_vowel in vowels\n            if !(last_vowel in vowels)\n  \
    \              return \"\"\n            end\n            return word[i-1]\n  \
    \      end\n    end\n    return \"\"\nend", "    all_vowels = \"AEIOUaeiou\"\n\
    \    i = length(word)\n    while i > 1\n        ch1 = word[i]\n        ch2 = word[i-1]\n\
    \        if (ch1 in all_vowels) && (ch2 in all_vowels) == false\n            return\
    \ ch1\n        end\n        i -= 1\n    end\n    return \"\"\nend", "    vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    word_reverse = word[end:-1:1]\n \
    \   vowels_idx = findall(x -> in(x, vowels), word_reverse)\n    for vowel_idx\
    \ in vowels_idx\n        if vowel_idx == 1\n            return \"\"\n        elseif\
    \ vowel_idx == length(word_reverse)\n            return \"\"\n        elseif !in(word_reverse[vowel_idx\
    \ + 1], vowels) && !in(word_reverse[vowel_idx - 1], vowels)\n            return\
    \ word_reverse[vowel_idx]\n        end\n    end\n    return \"\"\nend", "    n\
    \ = length(word)\n    for i in 0:n\n        if i > 1 && (word[i] in [\"a\", \"\
    e\", \"i\", \"o\", \"u\"]) && \n                    (word[i-1] !in [\"a\", \"\
    e\", \"i\", \"o\", \"u\"]) && \n                    (word[i-2] !in [\"a\", \"\
    e\", \"i\", \"o\", \"u\"])\n            return word[i]\n        end\n    end\n\
    \    return \"\"\nend", "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  \
    \  output = \"\"\n    if length(word) > 2\n        reverse_word = reverse(word)\n\
    \        for i in eachindex(reverse_word)\n            if reverse_word[i] in vowels\n\
    \                if i + 1 < length(reverse_word) && reverse_word[i + 1] in vowels\n\
    \                    continue\n                elseif i - 1 > 0 && reverse_word[i\
    \ - 1] in vowels\n                    continue\n                elseif i - 1 >\
    \ 0 && reverse_word[i - 1] in vowels && i + 1 < length(reverse_word) && reverse_word[i\
    \ + 1] in vowels\n                    continue\n                else\n       \
    \             output = reverse_word[i]\n                    break\n          \
    \      end\n            end\n        end\n    end\n    return output\nend", " \
    \   vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in length(word):end:-1:1\n\
    \        if word[i] in vowels\n            return word[i]\n        end\n    end\n\
    \    return \"\"\nend", "    index = 0\n    for (i, letter) in enumerate(word)\n\
    \        is_vowel = letter in \"aeiou\"\n        is_after_consonant = i > 1 &&\
    \ !(word[i-1] in \"aeiou\")\n        is_before_consonant = i < length(word) -\
    \ 1 && !(word[i+1] in \"aeiou\")\n        if is_vowel && is_after_consonant &&\
    \ is_before_consonant\n            index = i\n        end\n    end\n    return\
    \ (index == 0) ? \"\" : word[index]\nend", "    # your code here\n    # get consonants\n\
    \    # get vowels\n    # store both in seperate arrays\n    # find if they are\
    \ next to each other in the array\n    # closest is the first vowel from the end\
    \ of the array\n    \n    # create an empty string\n    result = \"\"\n    \n\
    \    # split consonants and vowels into seperate arrays\n    consonants = split(word,\
    \ \"a\") |> join |> split(\"e\") |> join |> split(\"i\") |> join |> split(\"o\"\
    ) |> join |> split(\"u\") |> join |> split(\"y\") |> join |> split(\"A\") |> join\
    \ |> split(\"E\") |> join |> split(\"I\") |> join |> split(\"O\") |> join |> split(\"\
    U\") |> join |> split(\"Y\") |> join\n    vowels = split(word, \"b\") |> join\
    \ |> split(\"c\") |> join |> split(\"d\") |> join |> split(\"f\") |> join |> split(\"\
    g\") |> join |> split(\"h\") |> join |> split(\"j\") |> join |> split(\"k\") |>\
    \ join |> split(\"l\") |> join |> split(\"m\") |> join |> split(\"n\") |> join\
    \ |> split(\"p\") |> join |> split(\"q\") |> join |> split(\"r\") |> join |> split(\"\
    s\") |> join |> split(\"t\") |> join |> split(\"v\") |> join |> split(\"w\") |>\
    \ join |> split(\"x\") |> join |> split(\"z\") |> join |> split(\"B\") |> join\
    \ |> split(\"C\") |> join |> split(\"D\") |> join |> split(\"F\") |> join |> split(\"\
    G\") |> join |> split(\"H\") |> join |> split(\"J\") |> join |> split(\"K\") |>\
    \ join |> split(\"L\") |> join |> split(\"M\") |> join |> split(\"N\") |> join\
    \ |> split(\"P\") |> join |> split(\"Q\") |> join |> split(\"R\") |> join |>",
  "    # remove first and last character, then reverse for loop\n    for i = length(word)-2:-1:1\n\
    \        if (word[i] in \"aeiou\") && (word[i+1] in \"bcdfghjklmnpqrstvwxyz\"\
    )\n            return word[i]\n        end\n    end\n    return \"\"\nend", " \
    \   for n in ngrams(word, 3)\n        if (n[1] in (\"a\", \"e\", \"i\", \"o\"\
    , \"u\")) && !(n[2] in (\"a\", \"e\", \"i\", \"o\", \"u\"))\n            return\
    \ n[1]\n        end\n    end\n    return \"\"\nend", "    vowels = [\"a\", \"\
    e\", \"i\", \"o\", \"u\"]\n    for i = length(word):-1:1\n        if !in(word[i],\
    \ vowels) && in(word[i+1], vowels)\n            return word[i+1]\n        end\n\
    \    end\n    return \"\"\nend", "    vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"]\n    pos = 0\n    res = 0\n    for i in 1:length(word)\n        if word[end-i]\
    \ in vowels\n            pos = end-i\n            break\n        end\n    end\n\
    \    if pos == 0 \n        return \"\"\n    end\n    while pos > 1\n        if\
    \ (word[pos] in vowels) && (word[pos-1] \u2209 vowels)\n            res = pos\n\
    \            break\n        end\n        pos -= 1\n    end\n    if res == 0\n\
    \        return \"\"\n    end\n    return word[res]\nend", "    matchString=replace(word,r\"\
    [aeiouAEIOU]\",\"_\")\n    rindex(matchString,r\"_[^aeiouAEIOU]_\")==\"\" && return\
    \ \"\"\n    split(matchString,r\"_[^aeiouAEIOU]_\")[end]\nend", "    i = length(word)\n\
    \    while i >= 1\n        if !(word[i] in [\"a\", \"e\", \"i\", \"o\", \"u\"\
    ]) && word[i-1] in [\"a\", \"e\", \"i\", \"o\", \"u\"]\n            return word[i-1]\n\
    \        end\n        i -= 1\n    end\n    return \"\"\nend", "    vowel_list\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in 1:length(word)\n       \
    \ if word[end-i] in vowel_list\n            return word[end-i]\n        end\n\
    \    end\n    return \"\"\nend", "    if length(word) < 3 return \"\" end\n  \
    \  l = length(word)\n    for i in reverse(1:l-2)\n        #println(i)\n      \
    \  if word[i] == \"a\" || word[i] == \"A\" || word[i] == \"e\" || word[i] == \"\
    E\" || word[i] == \"i\" || word[i] == \"I\" || word[i] == \"o\" || word[i] ==\
    \ \"O\" || word[i] == \"u\" || word[i] == \"U\"\n            if !(word[i+1] ==\
    \ \"a\" || word[i+1] == \"A\" || word[i+1] == \"e\" || word[i+1] == \"E\" || word[i+1]\
    \ == \"i\" || word[i+1] == \"I\" || word[i+1] == \"o\" || word[i+1] == \"O\" ||\
    \ word[i+1] == \"u\" || word[i+1] == \"U\")\n                if !(word[i+2] ==\
    \ \"a\" || word[i+2] == \"A\" || word[i+2] == \"e\" || word[i+2] == \"E\" || word[i+2]\
    \ == \"i\" || word[i+2] == \"I\" || word[i+2] == \"o\" || word[i+2] == \"O\" ||\
    \ word[i+2] == \"u\" || word[i+2] == \"U\")\n                    return word[i]\n\
    \                end\n            end\n        end\n    end\n    return \"\"\n\
    end", "    if length(word) < 2\n        return \"\"\n    end\n    vowels = (\"\
    A\", \"E\", \"I\", \"O\", \"U\", \"Y\")\n    consonants = (\"B\", \"C\", \"D\"\
    , \"F\", \"G\", \"H\", \"J\", \"K\", \"L\", \"M\", \"N\", \"P\", \"Q\", \"R\"\
    , \"S\", \"T\", \"V\", \"W\", \"X\", \"Z\")\n    closest_vowel = \"\"\n    for\
    \ (i, l) in enumerate(word)\n        if i > 1 &&  l in vowels\n            if\
    \ word[i-1] in consonants && word[i-2] in consonants\n                closest_vowel\
    \ = l\n                break\n            end\n        end\n    end\n    return\
    \ closest_vowel\nend", "    #get index of first vowel\n    first_vowel_index =\
    \ findall(r\"a|e|i|o|u\",word)[1]\n    #get index of last vowel\n    last_vowel_index\
    \ = findall(r\"a|e|i|o|u\",word)[end]\n    #check if first vowel is after last\
    \ vowel\n    if first_vowel_index > last_vowel_index\n        #if so return empty\
    \ string\n        return \"\"\n    end\n    #return closest vowel to last vowel\n\
    \    return word[last_vowel_index - 1]\nend", "  pass\nend", "    vowel = \"aeiou\"\
    \n    index = -1\n    for i = length(word):-1:1\n        c = word[i]\n       \
    \ if c in vowel\n            if index == -1\n                index = i\n     \
    \       else\n                return string(c)\n            end\n        else\n\
    \            index = -1\n        end\n    end\n    return \"\"\nend", "    vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    consonants = [c for c in word]\n\
    \    closest_vowel = 0\n    for i in 1:length(word)\n        if consonants[end-i]\
    \ in vowels\n            closest_vowel = end-i\n            break\n        end\n\
    \    end\n    if closest_vowel == 0\n        return \"\"\n    else\n        return\
    \ consonants[closest_vowel]\n    end\nend\nprintln(get_closest_vowel(\"yogurt\"\
    )) #==> \"u\"\nprintln(get_closest_vowel(\"FULL\")) #==> \"U\"\nprintln(get_closest_vowel(\"\
    quick\")) #==> \"\"\nprintln(get_closest_vowel(\"ab\")) #==> \"\"", "    if length(word)\
    \ < 3 return \"\" end\n    vowel_pos = [i for i in 1:length(word)-2 if any(word[i]\
    \ == x for x in \"aeiouAEIOU\")]\n    if isempty(vowel_pos) return \"\" end\n\
    \    if any(word[vowel_pos[end]+1] == x for x in \"aeiouAEIOU\") \n        return\
    \ \"\" \n    else\n        return word[vowel_pos[end]]\n    end\nend", "    vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    is_consonant(c) = !(c in vowels)\n\
    \    for i = length(word):-1:1\n        if !(is_consonant(word[i]))\n        \
    \    break\n        end\n    end\n    for j = i-1:-1:1\n        if is_consonant(word[j])\n\
    \            break\n        end\n    end\n    if j == 0\n        return \"\"\n\
    \    else\n        return word[j]\n    end\nend\nprintln(get_closest_vowel(\"\
    yogurt\"))\nprintln(get_closest_vowel(\"FULL\"))\nprintln(get_closest_vowel(\"\
    quick\"))\nprintln(get_closest_vowel(\"ab\"))", "    vowels=(\"a\",\"e\",\"i\"\
    ,\"o\",\"u\",\"A\",\"E\",\"I\",\"O\",\"U\")\n    new_word=split(word,\"\")\n \
    \   res=[]\n    for i=1:length(new_word)\n        if new_word[i] in vowels\n \
    \           res=[new_word[i]]\n            break\n        end\n    end\n    for\
    \ i=length(new_word):-1:1\n        if new_word[i] in vowels\n            if i==length(new_word)\n\
    \                break\n            end\n            if new_word[i+1] in vowels\n\
    \                break\n            end\n            res=[new_word[i]]\n     \
    \       break\n        end\n    end\n    join(res)\nend", "    a = \"aeiou\"\n\
    \    b = \"bcdfghjklmnpqrstvwxyz\"\n    word = word |> collect |> reverse\n  \
    \  for i in word\n        if isin(i, b) && isin(word[word |> findnext(x -> isin(x,\
    \ b)) |> first |> last |> get], a)\n            return word[word |> findnext(x\
    \ -> isin(x, b)) |> first |> last |> get]\n        end\n    end\n    return \"\
    \"\nend", "    word = reverse(word)\n    vowels = \"aeiouAEIOU\"\n    for (i,char)\
    \ in enumerate(word)\n        if char in vowels\n            j = i+1\n       \
    \     while j < length(word)\n                if word[j] in vowels\n         \
    \           return \"\"\n                elseif word[j] == \" \"\n           \
    \         return \"\"\n                else\n                    j += 1\n    \
    \            end\n            end\n            return word[i]\n        end\n \
    \   end\n    return \"\"\nend", "    vowels = ['a', 'e', 'i', 'o', 'u']\n    for\
    \ i in reverse(collect(eachindex(word)))\n        if word[i] in vowels\n     \
    \       for j in reverse(1:i)\n                if word[j] in vowels\n        \
    \            continue\n                else\n                    return word[i]\n\
    \                end\n            end\n        end\n    end\n    return \"\"\n\
    end"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
