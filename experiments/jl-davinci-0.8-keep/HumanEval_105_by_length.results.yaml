name: HumanEval_105_by_length
language: jl
results:
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n  # your code here\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbdqxhghu.jl:30\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{String}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpbdqxhghu.jl:24\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbdqxhghu.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbdqxhghu.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpbdqxhghu.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpbdqxhghu.jl:24\n\
    \   [2] macro expansion\n     @ /sha"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbdqxhghu.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    #your code here\n    res\
    \ = []\n    for x in arr\n        if x < 1 || x > 9\n            continue\n  \
    \      end\n        push!(res, string(x))\n    end\n    return sort(res)\nend\n\
    \ \nassert by_length([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nassert by_length([]) == []\n\
    assert by_length([1, -1 , 55]) == [\"One\"]\n \n\"\"\"\n    Given a vector of\
    \ integers, find all the elements that are repeated at least once and return them\
    \ as a sorted vector.\n    \n    For example:\n        arr = [1, 4, 5, 4, 3, 6,\
    \ 3, 5, 4, 1] \n        # 4 and 3 is repeated, return them \n        return [3,\
    \ 4]\n        \n        arr = [1, 2, 3, 4, 5]\n        # no repeated, return empty\
    \ vector\n        return []\n    \"\"\"\n \nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"by_length\" after end of expression\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpng0yfnuw.jl:34\nin expression\
    \ starting at /tmp/tmpng0yfnuw.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    new_arr = []\n    for i in arr\n        if i == 1\n    \
    \        push!(new_arr, \"One\")\n        elseif i == 2\n            push!(new_arr,\
    \ \"Two\")\n        elseif i == 3\n            push!(new_arr, \"Three\")\n   \
    \     elseif i == 4\n            push!(new_arr, \"Four\")\n        elseif i ==\
    \ 5\n            push!(new_arr, \"Five\")\n        elseif i == 6\n           \
    \ push!(new_arr, \"Six\")\n        elseif i == 7\n            push!(new_arr, \"\
    Seven\")\n        elseif i == 8\n            push!(new_arr, \"Eight\")\n     \
    \   elseif i == 9\n            push!(new_arr, \"Nine\")\n        end\n    end\n\
    \    return new_arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    reverse!(arr)\n\
    \    result = []\n    count = 0\n    for x in arr\n        if (1 <= x <= 9)\n\
    \            if x == 1\n                push!(result, \"One\")\n            elseif\
    \ x == 2\n                push!(result, \"Two\")\n            elseif x == 3\n\
    \                push!(result, \"Three\")\n            elseif x == 4\n       \
    \         push!(result, \"Four\")\n            elseif x == 5\n               \
    \ push!(result, \"Five\")\n            elseif x == 6\n                push!(result,\
    \ \"Six\")\n            elseif x == 7\n                push!(result, \"Seven\"\
    )\n            elseif x == 8\n                push!(result, \"Eight\")\n     \
    \       elseif x == 9\n                push!(result, \"Nine\")\n            end\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    #sort the array\n    #reverse\
    \ the array\n    #replace each digit by its corresponding name from 1-9. \n  \
    \  m = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"\
    Eight\", \"Nine\"]\n    arr1 = copy(arr)\n    sort!(arr1)\n    reverse!(arr1)\n\
    \    a = []\n    for i in arr1\n        if i in 1:9\n            push!(a, m[i-1])\n\
    \        end\n    end\n    return a\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpk6hmkm1t.jl:43\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  BoundsError: attempt\
    \ to access 9-element Vector{String} at index [0]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] by_length(arr::Vector{Int64})\n     @\
    \ Main /tmp/tmpk6hmkm1t.jl:33\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpk6hmkm1t.jl:43 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpk6hmkm1t.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpk6hmkm1t.jl:45\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  BoundsError: attempt to access 9-element\
    \ Vector{String} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpk6hmkm1t.jl:33\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpk6hmkm1t.jl:45 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpk6hmkm1t.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpk6hmkm1t.jl:46\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  BoundsError: attempt\
    \ to access 9-element Vector{String} at index [0]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] by_length(arr::Vector{Int64})\n     @\
    \ Main /tmp/tmpk6hmkm1t.jl:33\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpk6hmkm1t.jl:46 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlin"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk6hmkm1t.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr1 = sort(arr)\n    arr2\
    \ = reverse(arr1)\n    dictionary = Dict(\"One\" => 1, \"Two\" => 2, \"Three\"\
    \ => 3, \"Four\" => 4, \"Five\" => 5, \"Six\" => 6, \"Seven\" => 7, \"Eight\"\
    \ => 8, \"Nine\" => 9)\n    dict2 = Dict{Int64, String}()\n    for k in keys(dictionary)\n\
    \        dict2[dictionary[k]] = k\n    end\n    length(arr2) == 0 && return([])\n\
    \    arr3 = []\n    for i in arr2\n        i in keys(dictionary) && push!(arr3,dict2[i])\n\
    \    end\n    return(arr3)\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpu4dh6w3b.jl:42\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: String[] == [\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu4dh6w3b.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu4dh6w3b.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpu4dh6w3b.jl:44\n  Expression: candidate([1, -1, 55]) == [\"\
    One\"]\n   Evaluated: String[] == [\"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu4dh6w3b.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu4dh6w3b.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpu4dh6w3b.jl:45\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: String[] == [\"Three\", \"Two\"\
    , \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu4dh6w3b.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu4dh6w3b.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpu4dh6w3b.jl:46\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: String[] == [\"Nine\", \"Eight\",\
    \ \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu4dh6w3b.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu4dh6w3b.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \"\"\"\n    Given an array\
    \ of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse\
    \ the resulting array, and then replace each digit by its corresponding name from\n\
    \    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\".\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprz2e0lpr.jl:1\nin expression starting at /tmp/tmprz2e0lpr.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr) == 0\n  \
    \      return []\n    end\n    arr = unique(sort(arr))\n    if arr[1] < 1 || arr[end]\
    \ > 9\n        arr = filter(x -> x>=1 && x<=9, arr)\n    end\n    res = reverse(arr)\n\
    \    final_res = []\n    for i in res\n        if i == 1\n            push!(final_res,\
    \ \"One\")\n        elseif i == 2\n            push!(final_res, \"Two\")\n   \
    \     elseif i == 3\n            push!(final_res, \"Three\")\n        elseif i\
    \ == 4\n            push!(final_res, \"Four\")\n        elseif i == 5\n      \
    \      push!(final_res, \"Five\")\n        elseif i == 6\n            push!(final_res,\
    \ \"Six\")\n        elseif i == 7\n            push!(final_res, \"Seven\")\n \
    \       elseif i == 8\n            push!(final_res, \"Eight\")\n        elseif\
    \ i == 9\n            push!(final_res, \"Nine\")\n        end\n    end\n    return\
    \ final_res\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzvp3vrtp.jl:60\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"One\"] == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzvp3vrtp.jl:60 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzvp3vrtp.jl:59\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzvp3vrtp.jl:57\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    cnt = zeros(Int64, 9)\n\
    \    for i in arr\n        if i > 0 && i < 10\n            cnt[i] += 1\n     \
    \   end\n    end\n    res = Vector{String}(undef, 0)\n    for i in 1:9\n     \
    \   for j in 1:cnt[i]\n            push!(res, string(i))\n        end\n    end\n\
    \    reverse(res)\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppuuwh6qn.jl:42\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"8\", \"5\", \"4\", \"3\", \"2\"\
    , \"2\", \"1\", \"1\"] == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\",\
    \ \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppuuwh6qn.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppuuwh6qn.jl:41\ntest set: Test\
    \ Failed at /tmp/tmppuuwh6qn.jl:44\n  Expression: candidate([1, -1, 55]) == [\"\
    One\"]\n   Evaluated: [\"1\"] == [\"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppuuwh6qn.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppuuwh6qn.jl:41\ntest set: Test\
    \ Failed at /tmp/tmppuuwh6qn.jl:45\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"3\", \"2\", \"1\"] == [\"Three\"\
    , \"Two\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppuuwh6qn.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppuuwh6qn.jl:41\ntest set: Test\
    \ Failed at /tmp/tmppuuwh6qn.jl:46\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"9\", \"8\", \"4\"] == [\"Nine\"\
    , \"Eight\", \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppuuwh6qn.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:12"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppuuwh6qn.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    integers = []\n    for i\
    \ in arr\n        if 1 <= i <= 9\n            push!(integers, i)\n        end\n\
    \    end\n    string_numbers = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    integers = sort(integers)\n  \
    \  reverse!(integers)\n    string_integers = []\n    for i in integers\n     \
    \   push!(string_integers, string_numbers[i])\n    end\n    return string_integers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    s=sort(arr)\n    r=reverse(s)\n\
    \    g=Array{String}(length(r))\n    for i in 1:length(r)\n        if r[i]>0 &&\
    \ r[i]<10\n            if r[i]==1\n                g[i]=\"One\"\n            elseif\
    \ r[i]==2\n                g[i]=\"Two\"\n            elseif r[i]==3\n        \
    \        g[i]=\"Three\"\n            elseif r[i]==4\n                g[i]=\"Four\"\
    \n            elseif r[i]==5\n                g[i]=\"Five\"\n            elseif\
    \ r[i]==6\n                g[i]=\"Six\"\n            elseif r[i]==7\n        \
    \        g[i]=\"Seven\"\n            elseif r[i]==8\n                g[i]=\"Eight\"\
    \n            elseif r[i]==9\n                g[i]=\"Nine\"\n            end\n\
    \        end\n    end\n    g\nend\n \nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpap5yp81g.jl:57\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching (Array{String})(::Int64)\n  Closest candidates are:\n    (Array{T})(!Matched::LinearAlgebra.AbstractQ)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/qr.jl:563\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Tuple{Int64,\
    \ Int64}) where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpap5yp81g.jl:25\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpap5yp81g.jl:57 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpap5yp81g.jl:56\ntest set:\
    \ Error During Test at /tmp/tmpap5yp81g.jl:58\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: no method\
    \ matching (Array{String})(::Int64)\n  Closest candidates are:\n    (Array{T})(!Matched::LinearAlgebra.AbstractQ)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/qr.jl:563\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Tuple{Int64,\
    \ Int64}) where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpap5yp81g.jl:54\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    # your code here\n    arr.sort!()\n\
    \    reverse!(arr)\n    names = []\n    for i in arr\n        if i in 0:1:9\n\
    \            push!(names, string(i))\n        end\n    end\n    return names\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6nx45_oy.jl:39\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  type Array has no field\
    \ sort!\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n  \
    \ [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp6nx45_oy.jl:24\n   [3]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp6nx45_oy.jl:39 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp6nx45_oy.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp6nx45_oy.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  type Array has no field\
    \ sort!\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n  \
    \ [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp6nx45_oy.jl:24\n   [3]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp6nx45_oy.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp6nx45_oy.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp6nx45_oy.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  type Array has no field sort!\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmp6nx45_oy.jl:24\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp6nx45_oy.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp6nx45_oy.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp6nx45_oy.jl:42\n  Te"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6nx45_oy.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    nums = [\"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  \
    \  res = []\n    for i in 1:length(arr)\n        if arr[i] in 1:9\n          \
    \  push!(res, nums[arr[i]])\n        end\n    end\n    res\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpokctb3j4.jl:37\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"Two\", \"One\", \"One\", \"Four\"\
    , \"Five\", \"Eight\", \"Two\", \"Three\"] == [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpokctb3j4.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpokctb3j4.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpokctb3j4.jl:40\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"One\", \"Three\", \"Two\"] ==\
    \ [\"Three\", \"Two\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpokctb3j4.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpokctb3j4.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpokctb3j4.jl:41\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"Nine\", \"Four\", \"Eight\"] ==\
    \ [\"Nine\", \"Eight\", \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpokctb3j4.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpokctb3j4.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpokctb3j4.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    result = []\n    for num\
    \ in arr\n        if num == 1\n            push!(result, \"One\")\n        elseif\
    \ num == 2\n            push!(result, \"Two\")\n        elseif num == 3\n    \
    \        push!(result, \"Three\")\n        elseif num == 4\n            push!(result,\
    \ \"Four\")\n        elseif num == 5\n            push!(result, \"Five\")\n  \
    \      elseif num == 6\n            push!(result, \"Six\")\n        elseif num\
    \ == 7\n            push!(result, \"Seven\")\n        elseif num == 8\n      \
    \      push!(result, \"Eight\")\n        elseif num == 9\n            push!(result,\
    \ \"Nine\")\n        end\n    end\n    return result\nend\n \nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmprhi381tq.jl:53\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"Two\", \"One\", \"One\", \"Four\"\
    , \"Five\", \"Eight\", \"Two\", \"Three\"] == [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprhi381tq.jl:53 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprhi381tq.jl:52\ntest set: Test\
    \ Failed at /tmp/tmprhi381tq.jl:56\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"One\", \"Three\", \"Two\"] ==\
    \ [\"Three\", \"Two\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprhi381tq.jl:56 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprhi381tq.jl:52\ntest set: Test\
    \ Failed at /tmp/tmprhi381tq.jl:57\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"Nine\", \"Four\", \"Eight\"] ==\
    \ [\"Nine\", \"Eight\", \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprhi381tq.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprhi381tq.jl:52\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprhi381tq.jl:50\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    s = sort(arr)\n    r = reverse(s)\n\
    \    f = filter(r)\n    return f\nend\n \n\"\"\"\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpok4qerfp.jl:29\nin expression starting at\
    \ /tmp/tmpok4qerfp.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    new = []\n    for i = 1:length(arr)\n\
    \        if arr[i] < 10 && arr[i] > 0\n            push!(new, arr[i])\n      \
    \  end\n    end\n    sort!(new)\n    reverse!(new)\n    final = []\n    for i\
    \ = 1:length(new)\n        if new[i] == 1\n            push!(final, \"One\")\n\
    \        elseif new[i] == 2\n            push!(final, \"Two\")\n        elseif\
    \ new[i] == 3\n            push!(final, \"Three\")\n        elseif new[i] == 4\n\
    \            push!(final, \"Four\")\n        elseif new[i] == 5\n            push!(final,\
    \ \"Five\")\n        elseif new[i] == 6\n            push!(final, \"Six\")\n \
    \       elseif new[i] == 7\n            push!(final, \"Seven\")\n        elseif\
    \ new[i] == 8\n            push!(final, \"Eight\")\n        elseif new[i] == 9\n\
    \            push!(final, \"Nine\")\n        end\n    end\n    return final\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp78tmhrf6.jl:30\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{String}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp78tmhrf6.jl:24\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp78tmhrf6.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp78tmhrf6.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp78tmhrf6.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp78tmhrf6.jl:24\n\
    \   [2] macro expansion\n     @ /sha"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp78tmhrf6.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    n = size(arr, 1)\n    if\
    \ n == 0\n        return []\n    end\n    arr = filter(x -> x >= 1 && x <= 9,\
    \ arr)\n    arr = sort(arr)\n    arr = reverse(arr)\n    names = [\"One\", \"\
    Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ]\n    return [names[arr[i]] for i = 1:size(arr, 1)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    sorted = sort(arr)\n   \
    \ rev = reverse(sorted)\n    ret = []\n    for i in rev\n        if i == 1\n \
    \           push!(ret, \"One\")\n        elseif i == 2\n            push!(ret,\
    \ \"Two\")\n        elseif i == 3\n            push!(ret, \"Three\")\n       \
    \ elseif i == 4\n            push!(ret, \"Four\")\n        elseif i == 5\n   \
    \         push!(ret, \"Five\")\n        elseif i == 6\n            push!(ret,\
    \ \"Six\")\n        elseif i == 7\n            push!(ret, \"Seven\")\n       \
    \ elseif i == 8\n            push!(ret, \"Eight\")\n        elseif i == 9\n  \
    \          push!(ret, \"Nine\")\n        end\n    end\n    return ret\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \"\"\"Given an array of\
    \ words, return the words in sorted order by the length of each word.\"\"\"\n\
    \    \n    \"\"\"\n    Given an array of words, return the words in sorted order\
    \ by the length of each word.\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplxy1_r6k.jl:1\nin expression starting at /tmp/tmplxy1_r6k.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    pass\nend\n \n# [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\na = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxknu8ju_.jl:33\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: pass\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpxknu8ju_.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxknu8ju_.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxknu8ju_.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpxknu8ju_.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  UndefVarError: pass not\
    \ defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpxknu8ju_.jl:23\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxknu8ju_.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxknu8ju_.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpxknu8ju_.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: pass not defined\n  Stacktrace:\n\
    \   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpxknu8ju_.jl:23\n  \
    \ [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxknu8ju_.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxknu8ju_.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpxknu8ju_.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ pass not defined\n  Stacktrace:\n   [1] b"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxknu8ju_.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    @assert length(arr) == 0\
    \ || length(arr) == 1 || length(arr) == 2 || length(arr) == 3 \n    return [\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\"]\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpor1ngrld.jl:31\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  AssertionError: length(arr)\
    \ == 0 || (length(arr) == 1 || (length(arr) == 2 || length(arr) == 3))\n  Stacktrace:\n\
    \   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpor1ngrld.jl:23\n  \
    \ [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpor1ngrld.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpor1ngrld.jl:30\ntest set:\
    \ Test Failed at /tmp/tmpor1ngrld.jl:32\n  Expression: candidate(Vector{Int64}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpor1ngrld.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpor1ngrld.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpor1ngrld.jl:33\n  Expression: candidate([1, -1, 55]) == [\"\
    One\"]\n   Evaluated: [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"] == [\"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpor1ngrld.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpor1ngrld.jl:30\ntest set: Error\
    \ During Test at /tmp/tmpor1ngrld.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  AssertionError:\
    \ length(arr) == 0 || (length(arr) == 1 || (length(arr) == 2 || length(arr) ==\
    \ 3))\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpor1ngrld.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    unsorted_arr = arr\n   \
    \ reverse_arr = []\n    words = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = sort(unsorted_arr)\n\
    \    while !isempty(sorted_arr)\n        if sorted_arr[end] in 1:9\n         \
    \   push!(reverse_arr, sorted_arr[end])\n            sorted_arr = sorted_arr[1:end-1]\n\
    \        else\n            sorted_arr = sorted_arr[1:end-1]\n        end\n   \
    \ end\n    reversed_arr = reverse(reverse_arr)\n    names = []\n    while !isempty(reversed_arr)\n\
    \        push!(names, words[reversed_arr[end]])\n        reversed_arr = reversed_arr[1:end-1]\n\
    \    end\n    return names\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    nums = [\"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  \
    \  res = []\n    for x in arr\n        if x > 0 && x < 10\n            push!(res,\
    \ nums[x])\n        end\n    end\n    return reverse(sort(res))\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprz7v08cr.jl:37\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"Two\", \"Two\", \"Three\", \"One\"\
    , \"One\", \"Four\", \"Five\", \"Eight\"] == [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprz7v08cr.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprz7v08cr.jl:36\ntest set: Test\
    \ Failed at /tmp/tmprz7v08cr.jl:40\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"Two\", \"Three\", \"One\"] ==\
    \ [\"Three\", \"Two\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprz7v08cr.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprz7v08cr.jl:36\ntest set: Test\
    \ Failed at /tmp/tmprz7v08cr.jl:41\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"Nine\", \"Four\", \"Eight\"] ==\
    \ [\"Nine\", \"Eight\", \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprz7v08cr.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprz7v08cr.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprz7v08cr.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = by_length(arr)\n \
    \   reverse(arr)\n    arr = map(arr) do x\n        if x == 1\n            return\
    \ \"One\"\n        elseif x == 2\n            return \"Two\"\n        elseif x\
    \ == 3\n            return \"Three\"\n        elseif x == 4\n            return\
    \ \"Four\"\n        elseif x == 5\n            return \"Five\"\n        elseif\
    \ x == 6\n            return \"Six\"\n        elseif x == 7\n            return\
    \ \"Seven\"\n        elseif x == 8\n            return \"Eight\"\n        elseif\
    \ x == 9\n            return \"Nine\"\n        else\n            return \"\"\n\
    \        end\n    end\n    return arr\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    temp = sort(arr)\n    #\
    \ reverse the array\n    temp = reverse(temp)\n    res = String[]\n    for x in\
    \ temp\n        if x in 1:1:9\n            append!(res, Int(x))\n        end\n\
    \    end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpr_wbginw.jl:39\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Int64 to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{String}, x::Int64, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] _append!\n     @ ./array.jl:1060 [inlined]\n\
    \   [3] append!\n     @ ./array.jl:1050 [inlined]\n   [4] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpr_wbginw.jl:29\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpr_wbginw.jl:39 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpr_wbginw.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpr_wbginw.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type Int64 to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{String}, x::Int64, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] _append!\n    "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr_wbginw.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    num_to_name_dict =\
    \ Dict(\"1\" => \"One\", \"2\" => \"Two\", \"3\" => \"Three\", \"4\" => \"Four\"\
    , \"5\" => \"Five\",\n                            \"6\" => \"Six\", \"7\" => \"\
    Seven\", \"8\" => \"Eight\", \"9\" => \"Nine\")\n    \n    # build a dictionary\
    \ with key:value  =  length:word\n    num_words_dict = Dict()\n    for word in\
    \ num_to_name_dict\n        if haskey(num_words_dict, length(word))\n        \
    \    num_words_dict[length(word)] = vcat(num_words_dict[length(word)], word)\n\
    \        else\n            num_words_dict[length(word)] = [word]\n        end\n\
    \    end\n    \n    answer = Vector{String}()\n    for number in arr\n       \
    \ word = num_to_name_dict[string(number)]\n        if word == nothing\n      \
    \      continue\n        end\n        push!(answer, word)\n    end\n    \n   \
    \ return answer\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3q3g9b69.jl:53\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"Two\", \"One\", \"One\", \"Four\"\
    , \"Five\", \"Eight\", \"Two\", \"Three\"] == [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3q3g9b69.jl:53 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3q3g9b69.jl:52\ntest set: Error\
    \ During Test at /tmp/tmp3q3g9b69.jl:55\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  KeyError: key \"-1\" not found\n  Stacktrace:\n\
    \   [1] getindex\n     @ ./dict.jl:481 [inlined]\n   [2] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmp3q3g9b69.jl:39\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3q3g9b69.jl:55 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp3q3g9b69.jl:52\ntest set:\
    \ Error During Test at /tmp/tmp3q3g9b69.jl:56\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  KeyError: key \"\
    -1\" not found\n  Stacktrace:\n   [1] getindex\n     @ ./dict.jl:481 [inlined]\n\
    \   [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp3q3g9b69.jl:39\n  \
    \ [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3q3g9b69.jl:56 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp3q3g9b69.jl:52\ntest set:\
    \ Test Failed at /tmp/tmp3q3g9b69.jl:57\n  Expression: candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"]\n   Evalu"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3q3g9b69.jl:50\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    result = []\n    \n    for i in arr\n        if i\
    \ == 1\n            push!(result, \"One\")\n        elseif i == 2\n          \
    \  push!(result, \"Two\")\n        elseif i == 3\n            push!(result, \"\
    Three\")\n        elseif i == 4\n            push!(result, \"Four\")\n       \
    \ elseif i == 5\n            push!(result, \"Five\")\n        elseif i == 6\n\
    \            push!(result, \"Six\")\n        elseif i == 7\n            push!(result,\
    \ \"Seven\")\n        elseif i == 8\n            push!(result, \"Eight\")\n  \
    \      elseif i == 9\n            push!(result, \"Nine\")\n        end\n    end\n\
    \    \n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr_sorted = sort(arr)\n\
    \    arr_sorted = reverse(arr_sorted)\n    arr_length = length(arr_sorted)\n \
    \   for i in 1:arr_length\n        if arr_sorted[i] == 1\n            arr_sorted[i]\
    \ = \"One\"\n        elseif arr_sorted[i] == 2\n            arr_sorted[i] = \"\
    Two\"\n        elseif arr_sorted[i] == 3\n            arr_sorted[i] = \"Three\"\
    \n        elseif arr_sorted[i] == 4\n            arr_sorted[i] = \"Four\"\n  \
    \      elseif arr_sorted[i] == 5\n            arr_sorted[i] = \"Five\"\n     \
    \   elseif arr_sorted[i] == 6\n            arr_sorted[i] = \"Six\"\n        elseif\
    \ arr_sorted[i] == 7\n            arr_sorted[i] = \"Seven\"\n        elseif arr_sorted[i]\
    \ == 8\n            arr_sorted[i] = \"Eight\"\n        elseif arr_sorted[i] ==\
    \ 9\n            arr_sorted[i] = \"Nine\"\n        end\n    end\n    return arr_sorted\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxbfkmrtp.jl:54\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpxbfkmrtp.jl:42\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxbfkmrtp.jl:54 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxbfkmrtp.jl:53\ntest set:\
    \ Error During Test at /tmp/tmpxbfkmrtp.jl:56\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpxbfkmrtp.jl:28\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxbfkmrtp.jl:51\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    numToWordDict = Dict{Int64, String}()\n    numToWordDict[1]\
    \ = \"One\"\n    numToWordDict[2] = \"Two\"\n    numToWordDict[3] = \"Three\"\n\
    \    numToWordDict[4] = \"Four\"\n    numToWordDict[5] = \"Five\"\n    numToWordDict[6]\
    \ = \"Six\"\n    numToWordDict[7] = \"Seven\"\n    numToWordDict[8] = \"Eight\"\
    \n    numToWordDict[9] = \"Nine\"\n    newarr = Vector{String}()\n    for i in\
    \ arr\n        if in(i, 1:9)\n            push!(newarr, numToWordDict[i])\n  \
    \      end\n    end\n    return newarr\nend\nusing Test\n\n@testset begin\n\n\
    candidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    res = reverse(sort(arr))\n\
    \    name = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"]\n    for i in 1:length(res)\n        if res[i] > 9 || res[i]\
    \ < 1\n            res[i] = 0\n        end\n    end\n    res = res .* (res .<\
    \ 10)\n    res = name[res+1]\n    return res\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpiasfv_nd.jl:39\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching +(::Vector{Int64}, ::Int64)\n  For element-wise addition, use broadcasting\
    \ with dot syntax: array .+ scalar\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    +(!Matched::T, ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:87\n\
    \    +(!Matched::T, ::Integer) where T<:AbstractChar at /shared/centos7/julia/1.7.3/share/julia/base/char.jl:237\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpiasfv_nd.jl:31\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpiasfv_nd.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpiasfv_nd.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpiasfv_nd.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: no method\
    \ matching +(::Vector{Int64}, ::Int64)\n  For element-wise addition, use broadcasting\
    \ with dot syntax: array .+ scalar\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    +(!Matched::T, ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:87\n\
    \    +(!Matched::T, ::Integer) where T<:AbstractChar at /shared/centos7/julia/1.7.3/share/julia/base/char.jl:237\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpiasfv_nd.jl:31\n\
    \   [2] macro expansion\n     @ /shared/centos"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiasfv_nd.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    # write your code here\n\
    end\n \nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpz81pywoc.jl:31\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{String}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpz81pywoc.jl:24\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpz81pywoc.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz81pywoc.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpz81pywoc.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpz81pywoc.jl:24\n\
    \   [2] macro expansion\n     @ /sha"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz81pywoc.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \"\"\"\n    Given an array\
    \ of strings, sort the strings by their length.\n    If two strings have the same\
    \ length, sort them by their capitalization (only the first character should be\
    \ checked).\n    For example:\n    arr = [\"FOUR\", \"two\", \"Two\", \"seven\"\
    , \"three\", \"Four\", \"eight\", \"one\", \"One\", \"five\", \"Five\", \"six\"\
    , \"SIX\"]\n    return = [\"FOUR\", \"Four\", \"SIX\", \"six\", \"two\", \"Two\"\
    , \"eight\", \"five\", \"Five\", \"seven\", \"three\", \"one\", \"One\"]\n   \
    \ \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpklds2oan.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpklds2oan.jl:1\n\
    in expression starting at /tmp/tmpklds2oan.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    # Sort integers between\
    \ 1 and 9 inclusive.\n    sort!(arr)\n    # Reverse sorted array.\n    reverse!(arr)\n\
    \    # Initialize an empty array to store names.\n    names = Array{String}(undef,0)\n\
    \    # Iterate over each integer in array.\n    for i in arr\n        # For each\
    \ value check if it is a digit between 1 and 9 inclusive.\n        if (0<i<10)\n\
    \            # If yes, add it's corresponding name to the output array.\n    \
    \        names = vcat(names, convert(String, i))\n        end\n    end\n    #\
    \ Return output array.\n    return names\nend\nusing Test\n\n@testset begin\n\n\
    candidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgckwb60c.jl:45\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Int64 to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpgckwb60c.jl:34\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgckwb60c.jl:45 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgckwb60c.jl:44\ntest set:\
    \ Error During Test at /tmp/tmpgckwb60c.jl:47\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type Int64 to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpgckwb60c.jl:34\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgckwb60c.jl:47 [inlined]\n\
    \   [4] macro expansion\n     @ /shared"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgckwb60c.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    # Function that sorts the\
    \ input\n    # array by the length of each\n    # String.\n    sort(arr, by =\
    \ len)\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5y_cry0r.jl:33\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: len not\
    \ defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp5y_cry0r.jl:26\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5y_cry0r.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5y_cry0r.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp5y_cry0r.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  UndefVarError: len not\
    \ defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp5y_cry0r.jl:26\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5y_cry0r.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5y_cry0r.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp5y_cry0r.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: len not defined\n  Stacktrace:\n\
    \   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp5y_cry0r.jl:26\n  \
    \ [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5y_cry0r.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5y_cry0r.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp5y_cry0r.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ len not defined\n  Stacktrace:\n   [1] by_le"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5y_cry0r.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr_sort = sort(arr)\n \
    \   arr_reverse = reverse(arr_sort)\n    result = Vector{String}()\n    for i\
    \ in arr_reverse\n        if i == 1\n            push!(result, \"One\")\n    \
    \    elseif i == 2\n            push!(result, \"Two\")\n        elseif i == 3\n\
    \            push!(result, \"Three\")\n        elseif i == 4\n            push!(result,\
    \ \"Four\")\n        elseif i == 5\n            push!(result, \"Five\")\n    \
    \    elseif i == 6\n            push!(result, \"Six\")\n        elseif i == 7\n\
    \            push!(result, \"Seven\")\n        elseif i == 8\n            push!(result,\
    \ \"Eight\")\n        elseif i == 9\n            push!(result, \"Nine\")\n   \
    \     end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    unique_elements = unique(arr)\n\
    \    sorted_unique_elements = sort(unique_elements)\n    reversed_unique_elements\
    \ = reverse(sorted_unique_elements)\n    return map(num_to_string, reversed_unique_elements)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpy99hyazu.jl:33\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: num_to_string\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpy99hyazu.jl:26\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy99hyazu.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy99hyazu.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpy99hyazu.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  UndefVarError: num_to_string\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpy99hyazu.jl:26\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy99hyazu.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy99hyazu.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpy99hyazu.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: num_to_string not defined\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpy99hyazu.jl:26\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy99hyazu.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy99hyazu.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpy99hyazu.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ num_to_strin"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy99hyazu.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    res = []\n    for i in 1:length(arr)\n\
    \        res = [res; str_from_num(arr[i])]\n    end\n    return res\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpl7yrd73g.jl:34\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: str_from_num\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpl7yrd73g.jl:25\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl7yrd73g.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl7yrd73g.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpl7yrd73g.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: str_from_num not defined\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpl7yrd73g.jl:25\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl7yrd73g.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl7yrd73g.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpl7yrd73g.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ str_from_num not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpl7yrd73g.jl:25\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl7yrd73g.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl7yrd73g.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpl7yrd73g.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n  UndefVarError: str_from_num\
    \ not"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl7yrd73g.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    sort(reverse(arr))\n   \
    \ by_length = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"]\n    for i in 1:size(arr)[1]\n        if arr[i] < 1 ||\
    \ arr[i] > 9\n            deleteat!(arr, i)\n        end\n    end\n    for i in\
    \ 1:size(arr)[1]\n        arr[i] = by_length[arr[i]]\n    end\n    return arr\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpnn4jfpcj.jl:40\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpnn4jfpcj.jl:31\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpnn4jfpcj.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpnn4jfpcj.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpnn4jfpcj.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  BoundsError: attempt to access 2-element\
    \ Vector{Int64} at index [3]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpnn4jfpcj.jl:26\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpnn4jfpcj.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpnn4jfpcj.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpnn4jfpcj.jl:43\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  BoundsError: attempt\
    \ to access 3-eleme"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnn4jfpcj.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n \n  # Sort the vector\n  arr\
    \ = sort(arr)\n  \n  # Loop over each element of the vector\n  for i = 1:length(arr)\n\
    \    # Check if the ith element of the vector is a number between 1 and 9 inclusive\
    \ \n    if 1 <= arr[i] <= 9\n      # Replace each digit by its corresponding name\
    \ from\n      # \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"\n      if arr[i] == 1\n        arr[i] = \"One\"\n      elseif\
    \ arr[i] == 2\n        arr[i] = \"Two\"\n      elseif arr[i] == 3\n        arr[i]\
    \ = \"Three\"\n      elseif arr[i] == 4\n        arr[i] = \"Four\"\n      elseif\
    \ arr[i] == 5\n        arr[i] = \"Five\"\n      elseif arr[i] == 6\n        arr[i]\
    \ = \"Six\"\n      elseif arr[i] == 7\n        arr[i] = \"Seven\"\n      elseif\
    \ arr[i] == 8\n        arr[i] = \"Eight\"\n      elseif arr[i] == 9\n        arr[i]\
    \ = \"Nine\"\n      end # if arr[i] == 1\n    else # if 1 <= arr[i] <= 9\n   \
    \   # If the array has any strange number ignore it\n      # delete the ith element\n\
    \      deleteat!(arr, i)\n    end # if 1 <= arr[i] <= 9\n  end # for i = 1:length(arr)\n\
    \  \n  # Reverse the vector\n  arr = reverse(arr)\nend # function by_length(arr::Vector{Int64})::Vector{String}\
    \ \nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpyou9mntl.jl:67\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpyou9mntl.jl:34\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpyou9mntl.jl:67 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpyou9mntl.jl:66\ntest set:\
    \ Error During Test at /tmp/tmpyou9mntl.jl:69\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  BoundsError: attempt to access 1-element\
    \ Vector{Int64} at index [3]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpyou9mntl.jl:30\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpyou9mntl.jl:69 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpyou9mntl.jl:66\ntest set:\
    \ Error During Test at /tmp/tmpyou9mntl.jl:70\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an objec"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyou9mntl.jl:64\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    # your code here\n    nothing\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpdd18dl1u.jl:31\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{String}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpdd18dl1u.jl:24\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdd18dl1u.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdd18dl1u.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpdd18dl1u.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpdd18dl1u.jl:24\n\
    \   [2] macro expansion\n     @ /sha"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdd18dl1u.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(filter(x -> x\
    \ <= 9 && x >= 1, arr))\n    arr = reverse(arr)\n    output = []\n    for i in\
    \ arr\n        if i == 1\n            push!(output, \"One\")\n        elseif i\
    \ == 2\n            push!(output, \"Two\")\n        elseif i == 3\n          \
    \  push!(output, \"Three\")\n        elseif i == 4\n            push!(output,\
    \ \"Four\")\n        elseif i == 5\n            push!(output, \"Five\")\n    \
    \    elseif i == 6\n            push!(output, \"Six\")\n        elseif i == 7\n\
    \            push!(output, \"Seven\")\n        elseif i == 8\n            push!(output,\
    \ \"Eight\")\n        elseif i == 9\n            push!(output, \"Nine\")\n   \
    \     end\n    end\n    return output\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = filter(x -> x in 1:9,\
    \ sort(arr, rev=true))\n    @assert !isempty(arr)\n    return string.(arr)\nend\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([])\nby_length([1, -1 , 55])\n\
    \ \nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: MethodError: no method matching by_length(::Vector{Any})\n\
    Closest candidates are:\n  by_length(!Matched::Vector{Int64}) at /tmp/tmpvu96a58h.jl:22\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpvu96a58h.jl:28\nin expression\
    \ starting at /tmp/tmpvu96a58h.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    # Not important how they\
    \ are sorted, only matters they are sorted\n    arr = sort(arr)\n    # Reverse\
    \ their order\n    arr = reverse(arr)\n    # Create an array of strings with the\
    \ same size\n    new_arr = String[]\n    for i in 1:length(arr)\n        if arr[i]\
    \ == 1\n            push!(new_arr, \"One\")\n        elseif arr[i] == 2\n    \
    \        push!(new_arr, \"Two\")\n        elseif arr[i] == 3\n            push!(new_arr,\
    \ \"Three\")\n        elseif arr[i] == 4\n            push!(new_arr, \"Four\"\
    )\n        elseif arr[i] == 5\n            push!(new_arr, \"Five\")\n        elseif\
    \ arr[i] == 6\n            push!(new_arr, \"Six\")\n        elseif arr[i] == 7\n\
    \            push!(new_arr, \"Seven\")\n        elseif arr[i] == 8\n         \
    \   push!(new_arr, \"Eight\")\n        elseif arr[i] == 9\n            push!(new_arr,\
    \ \"Nine\")\n        end\n    end\n    # Return the array\n    return new_arr\n\
    end\narr = [2, 1, 1, 4, 5, 8, 2, 3]\nprintln(by_length(arr))\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  stdout: ''
  stderr: "[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"]\nTest Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    result = Vector{String}()\n    for i in arr\n        if\
    \ i > 0 && i < 10\n            if i == 1\n                push!(result, \"One\"\
    )\n            elseif i == 2\n                push!(result, \"Two\")\n       \
    \     elseif i == 3\n                push!(result, \"Three\")\n            elseif\
    \ i == 4\n                push!(result, \"Four\")\n            elseif i == 5\n\
    \                push!(result, \"Five\")\n            elseif i == 6\n        \
    \        push!(result, \"Six\")\n            elseif i == 7\n                push!(result,\
    \ \"Seven\")\n            elseif i == 8\n                push!(result, \"Eight\"\
    )\n            elseif i == 9\n                push!(result, \"Nine\")\n      \
    \      end\n        end\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    # sort\n    for i = 1:length(arr)\n\
    \        for j = i:length(arr)\n            if arr[i] > arr[j]\n             \
    \   temp = arr[i]\n                arr[i] = arr[j]\n                arr[j] = temp\n\
    \            end\n        end\n    end\n    \n    # reverse\n    for i = 1:length(arr)\
    \ \xF7 2\n        temp = arr[i]\n        arr[i] = arr[end - i + 1]\n        arr[end\
    \ - i + 1] = temp\n    end\n    \n    #replace\n    result = String[]\n    for\
    \ i = 1:length(arr)\n        push!(result,\n            if arr[i] == 1\n     \
    \           \"One\"\n            elseif arr[i] == 2\n                \"Two\"\n\
    \            elseif arr[i] == 3\n                \"Three\"\n            elseif\
    \ arr[i] == 4\n                \"Four\"\n            elseif arr[i] == 5\n    \
    \            \"Five\"\n            elseif arr[i] == 6\n                \"Six\"\
    \n            elseif arr[i] == 7\n                \"Seven\"\n            elseif\
    \ arr[i] == 8\n                \"Eight\"\n            elseif arr[i] == 9\n   \
    \             \"Nine\"\n            end\n        )\n    end\n    \n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmppj9uy_zg.jl:76\n  Test threw exception\n\
    \  Expression: candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] push!(a::Vector{String}, item::Nothing)\n    \
    \ @ Base ./array.jl:994\n   [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmppj9uy_zg.jl:62\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmppj9uy_zg.jl:76 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmppj9uy_zg.jl:73\ntest set:\
    \ Error During Test at /tmp/tmppj9uy_zg.jl:77\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] push!(a::Vector{String}, item::Nothing)\n    \
    \ @ Base ./array.jl:994\n   [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmppj9uy_zg.jl:62\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppj9uy_zg.jl:71\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n \n  # Initialize empty vector\n\
    \  new_arr = []\n  \n  # Filter the integers that are between 1 and 9 inclusive\n\
    \  for i in arr\n    if 1<=i<=9\n      push!(new_arr, i)\n    end\n  end\n  \n\
    \  # Sort the new_arr\n  sort!(new_arr)\n  \n  # Reverse the new_arr\n  reverse!(new_arr)\n\
    \  \n  # Use a dictionary to replace each digit by its corresponding name from\
    \ \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"\n  new_arr = [keys(dict)[values(dict) .== i] for i in new_arr]\n  return\
    \ new_arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6ka2dpe4.jl:49\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: dict\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(i::Int64)\n     @ Main ./none:0\n\
    \   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{Vector{Any},\
    \ var\"#1#2\"})\n     @ Base ./array.jl:724\n   [4] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmp6ka2dpe4.jl:41\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp6ka2dpe4.jl:49 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp6ka2dpe4.jl:48\ntest set:\
    \ Error During Test at /tmp/tmp6ka2dpe4.jl:51\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: dict not defined\n  Stacktrace:\n\
    \   [1] (::var\"#1#2\")(i::Int64)\n     @ Main ./none:0\n   [2] iterate\n    \
    \ @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{Vector{Any},\
    \ var\"#1#2\"})\n     @ Base ./array.jl:724\n   [4] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmp6ka2dpe4.jl:41\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp6ka2dpe4.jl:51 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp6ka2dpe4.jl:48\ntest set:\
    \ Error During Test at /tmp/tmp6ka2dpe4.jl:52\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ dict not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(i::Int64)\n     @ Main\
    \ ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{Vector{Any},\
    \ var\"#1#2\"})\n     @ Base ./array.jl:724\n   [4] by_length(arr::Vector{Int64})\n\
    \     @ Ma"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6ka2dpe4.jl:46\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr_sort = sort(arr)\n \
    \   arr_reverse = reverse(arr_sort)\n    arr_filtered = filter(x -> x >= 1 &&\
    \ x <= 9, arr_reverse)\n    return [names[i] for i in arr_filtered]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpuhtm5nt3.jl:33\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching getindex(::typeof(names), ::Int64)\n  Stacktrace:\n   [1] (::var\"\
    #2#4\")(i::Int64)\n     @ Main ./none:0\n   [2] iterate\n     @ ./generator.jl:47\
    \ [inlined]\n   [3] collect\n     @ ./array.jl:724 [inlined]\n   [4] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpuhtm5nt3.jl:26\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpuhtm5nt3.jl:33 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpuhtm5nt3.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpuhtm5nt3.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: no method matching getindex(::typeof(names),\
    \ ::Int64)\n  Stacktrace:\n   [1] (::var\"#2#4\")(i::Int64)\n     @ Main ./none:0\n\
    \   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect\n     @ ./array.jl:724\
    \ [inlined]\n   [4] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpuhtm5nt3.jl:26\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpuhtm5nt3.jl:35 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpuhtm5nt3.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpuhtm5nt3.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  MethodError: no\
    \ method matching getindex(::typeof(names), ::Int64)\n  Stacktrace:\n   [1] (::var\"\
    #2#4\")(i::Int64)\n     @ Main ./none:0\n   [2] iterate\n     @ ./generator.jl:47\
    \ [inlined]\n   [3] collect\n     @ ./array.jl:724 [inlined]\n   [4] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpuhtm"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuhtm5nt3.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    m = Dict(1 => \"One\", 2 => \"Two\", 3 => \"Three\", 4 =>\
    \ \"Four\", 5 => \"Five\", 6 => \"Six\", 7 => \"Seven\", 8 => \"Eight\", 9 =>\
    \ \"Nine\")\n    out = Vector{String}()\n    for x in arr\n        if x in 1:9\n\
    \            push!(out, m[x])\n        end\n    end\n    return out\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    new_arr = []\n    my_dict = {\"1\" => \"One\", \"2\" =>\
    \ \"Two\", \"3\" => \"Three\", \"4\" => \"Four\", \"5\" => \"Five\", \"6\" =>\
    \ \"Six\", \"7\" => \"Seven\", \"8\" => \"Eight\", \"9\" => \"Nine\"}\n    for\
    \ i in arr\n        if i <= 9 && i >= 1\n            push!(new_arr, my_dict[string(i)])\n\
    \        end\n    end\n    return new_arr\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: { } vector syntax is discontinued around /tmp/tmpmxixjuvv.jl:26\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpmxixjuvv.jl:1\nin expression starting\
    \ at /tmp/tmpmxixjuvv.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    my_dict = Dict()\n    my_dict[1]\
    \ = \"One\"\n    my_dict[2] = \"Two\"\n    my_dict[3] = \"Three\"\n    my_dict[4]\
    \ = \"Four\"\n    my_dict[5] = \"Five\"\n    my_dict[6] = \"Six\"\n    my_dict[7]\
    \ = \"Seven\"\n    my_dict[8] = \"Eight\"\n    my_dict[9] = \"Nine\"\n    new_arr\
    \ = Vector{String}()\n    for i in arr\n        if i >= 1 && i <= 9\n        \
    \    push!(new_arr, my_dict[i])\n        end\n    end\n    return reverse(sort(new_arr))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp205t8091.jl:46\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"Two\", \"Two\", \"Three\", \"One\"\
    , \"One\", \"Four\", \"Five\", \"Eight\"] == [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp205t8091.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp205t8091.jl:45\ntest set: Test\
    \ Failed at /tmp/tmp205t8091.jl:49\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"Two\", \"Three\", \"One\"] ==\
    \ [\"Three\", \"Two\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp205t8091.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp205t8091.jl:45\ntest set: Test\
    \ Failed at /tmp/tmp205t8091.jl:50\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"Nine\", \"Four\", \"Eight\"] ==\
    \ [\"Nine\", \"Eight\", \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp205t8091.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp205t8091.jl:45\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp205t8091.jl:43\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    out = Vector{String}()\n    for i in arr\n        if 1 <=\
    \ i <= 9\n            out = push!(out, i)\n        end\n    end\n    for i in\
    \ 1:length(out)\n        if out[i] == 1\n            out[i] = \"One\"\n      \
    \  elseif out[i] == 2\n            out[i] = \"Two\"\n        elseif out[i] ==\
    \ 3\n            out[i] = \"Three\"\n        elseif out[i] == 4\n            out[i]\
    \ = \"Four\"\n        elseif out[i] == 5\n            out[i] = \"Five\"\n    \
    \    elseif out[i] == 6\n            out[i] = \"Six\"\n        elseif out[i] ==\
    \ 7\n            out[i] = \"Seven\"\n        elseif out[i] == 8\n            out[i]\
    \ = \"Eight\"\n        elseif out[i] == 9\n            out[i] = \"Nine\"\n   \
    \     end\n    end\n    return out\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpytyrk2ur.jl:59\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Int64 to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] push!(a::Vector{String}, item::Int64)\n     @\
    \ Base ./array.jl:994\n   [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpytyrk2ur.jl:28\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpytyrk2ur.jl:59 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpytyrk2ur.jl:58\ntest set:\
    \ Error During Test at /tmp/tmpytyrk2ur.jl:61\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type Int64 to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] push!(a::Vector{String}, item::Int64)\n     @\
    \ Base ./array.jl:994\n   [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpytyrk2ur.jl:28\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpytyrk2ur.jl:56\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \"\"\"\n    Given an array\
    \ of non-empty strings, return an array of the same strings,\n    ordered from\
    \ shortest to longest length.\n    \n    For example:\n      arr = [\"a\", \"\
    c\", \"bb\", \"ddd\", \"eee\"]\n      return [\"a\", \"c\", \"bb\", \"ddd\", \"\
    eee\"]\n    \n      If there are several strings with the same length, order them\
    \ by alphabetical order\n      arr = [\"a\", \"b\", \"cc\", \"ddd\", \"eee\",\
    \ \"eee\"]\n      return [\"a\", \"b\", \"cc\", \"ddd\", \"eee\", \"eee\"]\n \
    \   \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpx5r07_ci.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpx5r07_ci.jl:1\n\
    in expression starting at /tmp/tmpx5r07_ci.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    for i = 1:length(arr)\n\
    \        if arr[i] == 1\n            arr[i] = \"One\"\n        elseif arr[i] ==\
    \ 2\n            arr[i] = \"Two\"\n        elseif arr[i] == 3\n            arr[i]\
    \ = \"Three\"\n        elseif arr[i] == 4\n            arr[i] = \"Four\"\n   \
    \     elseif arr[i] == 5\n            arr[i] = \"Five\"\n        elseif arr[i]\
    \ == 6\n            arr[i] = \"Six\"\n        elseif arr[i] == 7\n           \
    \ arr[i] = \"Seven\"\n        elseif arr[i] == 8\n            arr[i] = \"Eight\"\
    \n        elseif arr[i] == 9\n            arr[i] = \"Nine\"\n        end\n   \
    \ end\n    return arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3y6__zlt.jl:51\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp3y6__zlt.jl:27\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3y6__zlt.jl:51 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp3y6__zlt.jl:50\ntest set:\
    \ Error During Test at /tmp/tmp3y6__zlt.jl:53\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp3y6__zlt.jl:25\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3y6__zlt.jl:48\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    sorted_arr = sort(arr)\n\
    \    reversed_arr = reverse(sorted_arr)\n    s = []\n    for i in reversed_arr\n\
    \        if i < 1 || i > 9\n            continue\n        end\n        if i ==\
    \ 1\n            append!(s, \"One\")\n        elseif i == 2\n            append!(s,\
    \ \"Two\")\n        elseif i == 3\n            append!(s, \"Three\")\n       \
    \ elseif i == 4\n            append!(s, \"Four\")\n        elseif i == 5\n   \
    \         append!(s, \"Five\")\n        elseif i == 6\n            append!(s,\
    \ \"Six\")\n        elseif i == 7\n            append!(s, \"Seven\")\n       \
    \ elseif i == 8\n            append!(s, \"Eight\")\n        elseif i == 9\n  \
    \          append!(s, \"Nine\")\n        end\n    end\n    return s\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbdihxhe_.jl:57\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n    [1] setindex!(A::Vector{String}, x::Char, i1::Int64)\n\
    \      @ Base ./array.jl:903\n    [2] _unsafe_copyto!(dest::Vector{String}, doffs::Int64,\
    \ src::Vector{Any}, soffs::Int64, n::Int64)\n      @ Base ./array.jl:253\n   \
    \ [3] unsafe_copyto!\n      @ ./array.jl:307 [inlined]\n    [4] _copyto_impl!\n\
    \      @ ./array.jl:331 [inlined]\n    [5] copyto!\n      @ ./array.jl:317 [inlined]\n\
    \    [6] copyto!\n      @ ./array.jl:343 [inlined]\n    [7] copyto_axcheck!\n\
    \      @ ./abstractarray.jl:1104 [inlined]\n    [8] Vector{String}(x::Vector{Any})\n\
    \      @ Base ./array.jl:563\n    [9] convert\n      @ ./array.jl:554 [inlined]\n\
    \   [10] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmpbdihxhe_.jl:50\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [12] macro expansion\n      @ /tmp/tmpbdihxhe_.jl:57 [inlined]\n\
    \   [13] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [14] top-level scope\n      @ /tmp/tmpbdihxhe_.jl:56\ntest set:\
    \ Error During Test at /tmp/tmpbdihxhe_.jl:59\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type Char to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at /shared/centos7/julia/1.7.3"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbdihxhe_.jl:54\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr1 = [i for i in arr if\
    \ i >= 1 && i <= 9]\n    sort!(arr1)\n    reverse!(arr1)\n    arr2 = [i for i\
    \ in arr1 if i > 9]\n    push!(arr2,1)\n    arr3 = Array{String}(undef, length(arr2))\n\
    \    for i in 1:length(arr2)\n        if arr2[i] == 1\n            arr3[i] = \"\
    One\"\n        elseif arr2[i] == 2\n            arr3[i] = \"Two\"\n        elseif\
    \ arr2[i] == 3\n            arr3[i] = \"Three\"\n        elseif arr2[i] == 4\n\
    \            arr3[i] = \"Four\"\n        elseif arr2[i] == 5\n            arr3[i]\
    \ = \"Five\"\n        elseif arr2[i] == 6\n            arr3[i] = \"Six\"\n   \
    \     elseif arr2[i] == 7\n            arr3[i] = \"Seven\"\n        elseif arr2[i]\
    \ == 8\n            arr3[i] = \"Eight\"\n        elseif arr2[i] == 9\n       \
    \     arr3[i] = \"Nine\"\n        end\n    end\n    return arr3\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi9ds__wo.jl:57\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"One\"] == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi9ds__wo.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi9ds__wo.jl:56\ntest set: Test\
    \ Failed at /tmp/tmpi9ds__wo.jl:58\n  Expression: candidate(Vector{Int64}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"One\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi9ds__wo.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi9ds__wo.jl:56\ntest set: Test\
    \ Failed at /tmp/tmpi9ds__wo.jl:60\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"One\"] == [\"Three\", \"Two\"\
    , \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi9ds__wo.jl:60 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi9ds__wo.jl:56\ntest set: Test\
    \ Failed at /tmp/tmpi9ds__wo.jl:61\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"One\"] == [\"Nine\", \"Eight\"\
    , \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi9ds__wo.jl:61 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level s"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi9ds__wo.jl:54\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    int_to_word = [\"One\",\
    \ \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ]\n    if length(arr) == 0\n        return []\n    else\n        arr = sort(arr)\n\
    \        arr = reverse(arr)\n        arr = filter(x -> x > 0 && x < 10, arr)\n\
    \        for i = 1:length(arr)\n            arr[i] = int_to_word[arr[i]]\n   \
    \     end\n        return arr\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpnbqt4pjr.jl:41\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpnbqt4pjr.jl:31\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpnbqt4pjr.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpnbqt4pjr.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpnbqt4pjr.jl:43\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpnbqt4pjr.jl:31\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnbqt4pjr.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    len = length(arr)\n    n::Array{Any,1}\
    \ = []\n    ns::Array{Any,1} = []\n    for i in 1:len\n        if arr[i]>0 &&\
    \ arr[i]<10\n            push!(n,arr[i])\n        end\n    end\n    n = sort(n)\n\
    \    n = reverse(n)\n    for j in 1:length(n)\n        if n[j] == 1\n        \
    \    push!(ns,\"One\")\n        elseif n[j] == 2\n            push!(ns,\"Two\"\
    )\n        elseif n[j] == 3\n            push!(ns,\"Three\")\n        elseif n[j]\
    \ == 4\n            push!(ns,\"Four\")\n        elseif n[j] == 5\n           \
    \ push!(ns,\"Five\")\n        elseif n[j] == 6\n            push!(ns,\"Six\")\n\
    \        elseif n[j] == 7\n            push!(ns,\"Seven\")\n        elseif n[j]\
    \ == 8\n            push!(ns,\"Eight\")\n        elseif n[j] == 9\n          \
    \  push!(ns,\"Nine\")\n        end\n    end\n    return ns\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    idx = 1 \n    length = length(arr)\n\
    \    result = String[]\n    while idx <= length\n        if arr[idx] >= 1 && arr[idx]\
    \ <= 9\n            result = append!(result, num_name(arr[idx]))\n        end\n\
    \        idx += 1\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpyxem87ba.jl:39\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: length\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpyxem87ba.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyxem87ba.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyxem87ba.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpyxem87ba.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  UndefVarError: length\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpyxem87ba.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyxem87ba.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyxem87ba.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpyxem87ba.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: length not defined\n \
    \ Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpyxem87ba.jl:24\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyxem87ba.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyxem87ba.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpyxem87ba.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ length not defined\n  Stacktrace:\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyxem87ba.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr) == 0\n  \
    \      return []\n    end\n    arr_map = [\"Zero\", \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sort!(arr)\n\
    \    reverse!(arr)\n    arr_res = []\n    for i in arr\n        if i in (1:9)\n\
    \            push!(arr_res, arr_map[i])\n        end\n    end\n    return arr_res\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxmfkxrt7.jl:42\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"Seven\", \"Four\", \"Three\", \"\
    Two\", \"One\", \"One\", \"Zero\", \"Zero\"] == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxmfkxrt7.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxmfkxrt7.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpxmfkxrt7.jl:44\n  Expression: candidate([1, -1, 55]) == [\"\
    One\"]\n   Evaluated: [\"Zero\"] == [\"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxmfkxrt7.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxmfkxrt7.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpxmfkxrt7.jl:45\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"Two\", \"One\", \"Zero\"] ==\
    \ [\"Three\", \"Two\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxmfkxrt7.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxmfkxrt7.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpxmfkxrt7.jl:46\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"Eight\", \"Seven\", \"Three\"]\
    \ == [\"Nine\", \"Eight\", \"Four\"]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpxmfkxrt7.jl:46 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7."
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxmfkxrt7.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    for i in eachindex(arr)\n        if arr[i] == -1\n     \
    \       deleteat!(arr, i)\n        end\n    end\n    arr = [string(i) for i in\
    \ arr]\n    arr = [replace(i, \"1\" => \"One\", \"2\" => \"Two\", \"3\" => \"\
    Three\", \"4\" => \"Four\", \"5\" => \"Five\", \"6\" => \"Six\", \"7\" => \"Seven\"\
    , \"8\" => \"Eight\", \"9\" => \"Nine\") for i in arr]\n    return arr\nend\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpikbvshoy.jl:41\n  Expression: candidate([1,\
    \ -1, 55]) == [\"One\"]\n   Evaluated: [\"FiveFive\", \"One\"] == [\"One\"]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpikbvshoy.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpikbvshoy.jl:38\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpikbvshoy.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    sorted_arr = sort(arr)\n\
    \    reverse_arr = reverse(sorted_arr)\n    dict = Dict()\n    dict[1] = \"One\"\
    \n    dict[2] = \"Two\"\n    dict[3] = \"Three\"\n    dict[4] = \"Four\"\n   \
    \ dict[5] = \"Five\"\n    dict[6] = \"Six\"\n    dict[7] = \"Seven\"\n    dict[8]\
    \ = \"Eight\"\n    dict[9] = \"Nine\"\n    for i in 1:length(reverse_arr)\n  \
    \      if reverse_arr[i] < 1 || reverse_arr[i] > 9\n            reverse_arr[i]\
    \ = 0\n        end\n    end\n    for i in 1:length(reverse_arr)\n        if reverse_arr[i]\
    \ != 0\n            reverse_arr[i] = dict[reverse_arr[i]]\n        end\n    end\n\
    \    for i in 1:length(reverse_arr)\n        if reverse_arr[i] == 0\n        \
    \    reverse_arr[i] = \"\"\n        end\n    end\n    return reverse_arr\nend\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphqf1xgoq.jl:57\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmphqf1xgoq.jl:42\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmphqf1xgoq.jl:57 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmphqf1xgoq.jl:56\ntest set:\
    \ Error During Test at /tmp/tmphqf1xgoq.jl:59\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmphqf1xgoq.jl:42\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphqf1xgoq.jl:54\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    #sort by length of the word\
    \ \n    tmp=arr\n    tmp=sort(tmp)\n    tmp=reverse(tmp)\n    if length(tmp)==0\n\
    \        return []\n    end\n    if length(tmp)==1\n        return [digit_name(tmp[1])]\n\
    \    end\n    if length(tmp)==2\n        return [digit_name(tmp[1]),digit_name(tmp[2])]\n\
    \    end\n    if length(tmp)==3\n        return [digit_name(tmp[1]),digit_name(tmp[2]),digit_name(tmp[3])]\n\
    \    end\n    if length(tmp)==4\n        return [digit_name(tmp[1]),digit_name(tmp[2]),digit_name(tmp[3]),digit_name(tmp[4])]\n\
    \    end\n    if length(tmp)==5\n        return [digit_name(tmp[1]),digit_name(tmp[2]),digit_name(tmp[3]),digit_name(tmp[4]),digit_name(tmp[5])]\n\
    \    end\n    if length(tmp)==6\n        return [digit_name(tmp[1]),digit_name(tmp[2]),digit_name(tmp[3]),digit_name(tmp[4]),digit_name(tmp[5]),digit_name(tmp[6])]\n\
    \    end\n    if length(tmp)==7\n        return [digit_name(tmp[1]),digit_name(tmp[2]),digit_name(tmp[3]),digit_name(tmp[4]),digit_name(tmp[5]),digit_name(tmp[6]),digit_name(tmp[7])]\n\
    \    end\n    if length(tmp)==8\n        return [digit_name(tmp[1]),digit_name(tmp[2]),digit_name(tmp[3]),digit_name(tmp[4]),digit_name(tmp[5]),digit_name(tmp[6]),digit_name(tmp[7]),digit_name(tmp[8])]\n\
    \    end\n    if length(tmp)==9\n        return [digit_name(tmp[1]),digit_name(tmp[2]),digit_name(tmp[3]),digit_name(\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpncx4kr71.jl:58\nin expression starting at\
    \ /tmp/tmpncx4kr71.jl:58\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    # your code here\n    return\
    \ []\nend\nprintln(by_length([1, 2, 3, 4, 5, 6, 7, 8, 9]))  # [\"Nine\", \"Eight\"\
    , \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"]\nprintln(by_length([7,\
    \ 2, 8, 1, 9, 4, 5, 6, 3]))  # [\"Nine\", \"Eight\", \"Seven\", \"Six\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"One\"]\nprintln(by_length([]))  # []\nprintln(by_length([1,\
    \ -1, 55]))  # [\"One\"]\nprintln(by_length([1, 4, 6, 7, 7, 8, 9, 9, 9, 0])) \
    \ # [\"Nine\", \"Nine\", \"Nine\", \"Eight\", \"Seven\", \"Seven\", \"Six\", \"\
    Four\", \"One\"]\nprintln(by_length([9, 2, 1, 2, 9, 2, 3, 2, 3, 2, 3, 2, 3, 2,\
    \ 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2,\
    \ 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2,\
    \ 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2,\
    \ 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2,\
    \ 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2,\
    \ 3, 2, 3,\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: b'String[]\nString[]\n'
  stderr: "b'ERROR: LoadError: MethodError: no method matching by_length(::Vector{Any})'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    for i in 1:length(arr)\n\
    \        if arr[i] == 1\n            arr[i] = \"One\"\n        elseif arr[i] ==\
    \ 2\n            arr[i] = \"Two\"\n        elseif arr[i] == 3\n            arr[i]\
    \ = \"Three\"\n        elseif arr[i] == 4\n            arr[i] = \"Four\"\n   \
    \     elseif arr[i] == 5\n            arr[i] = \"Five\"\n        elseif arr[i]\
    \ == 6\n            arr[i] = \"Six\"\n        elseif arr[i] == 7\n           \
    \ arr[i] = \"Seven\"\n        elseif arr[i] == 8\n            arr[i] = \"Eight\"\
    \n        elseif arr[i] == 9\n            arr[i] = \"Nine\"\n        end\n   \
    \ end\n    return reverse(arr)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkwhw2xwq.jl:51\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpkwhw2xwq.jl:27\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpkwhw2xwq.jl:51 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpkwhw2xwq.jl:50\ntest set:\
    \ Error During Test at /tmp/tmpkwhw2xwq.jl:53\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpkwhw2xwq.jl:25\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkwhw2xwq.jl:48\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    arr = [\n        \"One\" if i == 1 else \n        \"Two\"\
    \ if i == 2 else \n        \"Three\" if i == 3 else \n        \"Four\" if i ==\
    \ 4 else \n        \"Five\" if i == 5 else \n        \"Six\" if i == 6 else \n\
    \        \"Seven\" if i == 7 else \n        \"Eight\" if i == 8 else \n      \
    \  \"Nine\" if i == 9 else \n        \"\" for i in arr]\n    arr = [i for i in\
    \ arr if i != \"\"]\n    return arr\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp21x99sm7.jl:26 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp21x99sm7.jl:27\n\
    in expression starting at /tmp/tmp21x99sm7.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    n = length(arr)\n    if\
    \ n == 0 \n        return []\n    end\n    digits = [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    res = []\n    j = 1\n    for i in 1:n\n        if\
    \ arr[i] > 0 && arr[i] < 10 \n            res[j] = digits[arr[i]]\n          \
    \  j += 1\n        end\n    end\n    return res\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_wtmf9q9.jl:45\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  BoundsError: attempt\
    \ to access 0-element Vector{Any} at index [1]\n  Stacktrace:\n   [1] setindex!\n\
    \     @ ./essentials.jl:479 [inlined]\n   [2] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmp_wtmf9q9.jl:34\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_wtmf9q9.jl:45 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_wtmf9q9.jl:44\ntest set:\
    \ Error During Test at /tmp/tmp_wtmf9q9.jl:47\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  BoundsError: attempt to access 0-element\
    \ Vector{Any} at index [1]\n  Stacktrace:\n   [1] setindex!\n     @ ./essentials.jl:479\
    \ [inlined]\n   [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp_wtmf9q9.jl:34\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_wtmf9q9.jl:47 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_wtmf9q9.jl:44\ntest set:\
    \ Error During Test at /tmp/tmp_wtmf9q9.jl:48\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  BoundsError: attempt\
    \ to access 0-element Vector{Any} at index [1]\n  Stacktrace:\n   [1] setindex!\n\
    \     @ ./essentials.jl:479 [inlined]\n   [2] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmp_wtmf9q9.jl:34\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_wtmf9q9.jl:48 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:12"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_wtmf9q9.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    @assert length(arr) >= 0\n\
    \    # Your code here\nend\n@testset \"Ordering and Replacing\" begin\n    @test\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\"\
    , \"Two\", \"Two\", \"One\", \"One\"]\n    @test by_length([]) == []\n    @test\
    \ by_length([1, -1 , 55]) == [\"One\"]\nend\n \nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @testset not defined\nin expression starting\
    \ at /tmp/tmp77x0inag.jl:26\nin expression starting at /tmp/tmp77x0inag.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr) == 0\n  \
    \      return []\n    end\n    if length(arr) == 1\n        return []\n    end\n\
    \    if length(arr) == 2\n        return []\n    end\n    if arr[1] == 1\n   \
    \     return [\"One\"]\n    end\n    if arr[1] == 2\n        return [\"Two\"]\n\
    \    end\n    if arr[1] == 3\n        return [\"Three\"]\n    end\n    if arr[1]\
    \ == 4\n        return [\"Four\"]\n    end\n    if arr[1] == 5\n        return\
    \ [\"Five\"]\n    end\n    if arr[1] == 6\n        return [\"Six\"]\n    end\n\
    \    if arr[1] == 7\n        return [\"Seven\"]\n    end\n    if arr[1] == 8\n\
    \        return [\"Eight\"]\n    end\n    if arr[1] == 9\n        return [\"Nine\"\
    ]\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxi69iwon.jl:65\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"Two\"] == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxi69iwon.jl:65 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxi69iwon.jl:64\ntest set: Test\
    \ Failed at /tmp/tmpxi69iwon.jl:68\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"One\"] == [\"Three\", \"Two\"\
    , \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxi69iwon.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxi69iwon.jl:64\ntest set: Test\
    \ Failed at /tmp/tmpxi69iwon.jl:69\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"Nine\"] == [\"Nine\", \"Eight\"\
    , \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxi69iwon.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxi69iwon.jl:64\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxi69iwon.jl:62\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr_sort = sort(arr)\n \
    \   arr_sort = map(Float64, arr_sort)\n    arr_sort = reverse(arr_sort)\n    d\
    \ = Dict(1 => \"One\", 2 => \"Two\", 3 => \"Three\", 4 => \"Four\", 5 => \"Five\"\
    , 6 => \"Six\", 7 => \"Seven\", 8 => \"Eight\", 9 => \"Nine\")\n    res = []\n\
    \    for i in arr_sort\n        if i in keys(d)\n            push!(res, d[i])\n\
    \        end\n    end\n    return res\nend\n    \n    \narr = [2, 1, 1, 4, 5,\
    \ 8, 2, 3]\nres = by_length(arr)\nprintln(res)\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"]\nTest Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    #sort the array in the ascending\
    \ order\n    sorted_arr = sort(arr)\n    #reverse it\n    reversed_arr = reverse(sorted_arr)\n\
    \    #initialize the res vector to append each digit's name into it\n    res =\
    \ []\n    for num in reversed_arr\n        #filtering out the digits that are\
    \ not between 1-9 (not inclusive)\n        if num >= 1 && num <= 9\n         \
    \   push!(res, Int64(num))\n        end\n    end\n    #mapping the integers to\
    \ their names\n    names = map(string, res)\n    return names\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3cljwjn1.jl:44\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"8\", \"5\", \"4\", \"3\", \"2\"\
    , \"2\", \"1\", \"1\"] == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\",\
    \ \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3cljwjn1.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3cljwjn1.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp3cljwjn1.jl:46\n  Expression: candidate([1, -1, 55]) == [\"\
    One\"]\n   Evaluated: [\"1\"] == [\"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3cljwjn1.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3cljwjn1.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp3cljwjn1.jl:47\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"3\", \"2\", \"1\"] == [\"Three\"\
    , \"Two\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3cljwjn1.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3cljwjn1.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp3cljwjn1.jl:48\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"9\", \"8\", \"4\"] == [\"Nine\"\
    , \"Eight\", \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3cljwjn1.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:12"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3cljwjn1.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    ret = []\n    for value\
    \ in reverse(sort(filter(x -> (1 <= x <= 9), arr)))\n        push!(ret, CODES[value])\n\
    \    end\n    return ret\nend\n@assert by_length([2, 1, 1, 4, 5, 8, 2, 3]) ==\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n@assert by_length([]) == []\n@assert by_length([1, -1 , 55]) == [\"One\"]\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: CODES not defined\nStacktrace:\n [1] by_length(arr::Vector{Int64})\n\
    \   @ Main /tmp/tmpstyqiq0h.jl:25\n [2] top-level scope\n   @ /tmp/tmpstyqiq0h.jl:29\n\
    in expression starting at /tmp/tmpstyqiq0h.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    n = length(arr)\n    if\
    \ n == 0\n        return []\n    end\n    result = [\"\", \"\", \"\", \"\", \"\
    \", \"\", \"\", \"\", \"\"]\n    for i in 1:n\n        if (1 <= arr[i]) && (arr[i]\
    \ <= 9)\n            result[arr[i]] = string(arr[i])\n        end\n    end\n \
    \   result = reverse(result)\n    counter = 1\n    for i in 1:9\n        if result[i]\
    \ != \"\"\n            result[counter] = result[i]\n            counter += 1\n\
    \        end\n    end\n    if counter == 1\n        return []\n    end\n    result\
    \ = result[1:counter-1]\n    result = map(name, parse.(Int64, result))\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpsbmpgggs.jl:53\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: name\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpsbmpgggs.jl:45\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsbmpgggs.jl:53 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsbmpgggs.jl:52\ntest set:\
    \ Error During Test at /tmp/tmpsbmpgggs.jl:55\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: name not defined\n  Stacktrace:\n\
    \   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpsbmpgggs.jl:45\n  \
    \ [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsbmpgggs.jl:55 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsbmpgggs.jl:52\ntest set:\
    \ Error During Test at /tmp/tmpsbmpgggs.jl:56\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ name not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n    \
    \ @ Main /tmp/tmpsbmpgggs.jl:45\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsbmpgggs.jl:56 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsbmpgggs.jl:52\ntest set:\
    \ Error During Test at /tmp/tmpsbmpgggs.jl:57\n  Test threw exception\n  Expression:\
    \ candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n  UndefVarError: name\
    \ not defined\n  Stacktrace:\n   [1] by"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsbmpgggs.jl:50\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    #reverse_sorted_arr = sort(arr,rev=true)\n\
    \    #return [convert_digit(x) for x in reverse_sorted_arr if x >= 1 && x <= 9]\n\
    \    reverse_sorted_arr = sort(arr,rev=true)\n    return [convert_digit(x) for\
    \ x in reverse_sorted_arr if x > 0 && x < 10]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1w948qsn.jl:33\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: convert_digit\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#3\")(x::Int64)\n     @ Main ./none:0\n\
    \   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3] grow_to!(dest::Vector{Any},\
    \ itr::Base.Generator{Base.Iterators.Filter{var\"#2#4\", Vector{Int64}}, var\"\
    #1#3\"})\n     @ Base ./array.jl:797\n   [4] collect\n     @ ./array.jl:721 [inlined]\n\
    \   [5] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp1w948qsn.jl:26\n  \
    \ [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp1w948qsn.jl:33 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp1w948qsn.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp1w948qsn.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: convert_digit not defined\n\
    \  Stacktrace:\n   [1] (::var\"#1#3\")(x::Int64)\n     @ Main ./none:0\n   [2]\
    \ iterate\n     @ ./generator.jl:47 [inlined]\n   [3] grow_to!(dest::Vector{Any},\
    \ itr::Base.Generator{Base.Iterators.Filter{var\"#2#4\", Vector{Int64}}, var\"\
    #1#3\"})\n     @ Base ./array.jl:797\n   [4] collect\n     @ ./array.jl:721 [inlined]\n\
    \   [5] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp1w948qsn.jl:26\n  \
    \ [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp1w948qsn.jl:35 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp1w948qsn.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp1w948qsn.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ convert_digit not defined\n  Stacktrace:\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1w948qsn.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    # filter out the numbers\
    \ and sort\n    sorted_arr = sort(filter(arr) do x \n        x >= 1 && x <= 9\
    \ && isa(x,Int64)\n    end)\n    \n    # do the reverse and map the numbers to\
    \ their name\n    return map(reverse(sorted_arr)) do x\n        case x\n     \
    \       when 1 \n                \"One\"\n            when 2 \n              \
    \  \"Two\"\n            when 3 \n                \"Three\"\n            when 4\
    \ \n                \"Four\"\n            when 5 \n                \"Five\"\n\
    \            when 6 \n                \"Six\"\n            when 7 \n         \
    \       \"Seven\"\n            when 8 \n                \"Eight\"\n          \
    \  when 9 \n                \"Nine\"\n        end\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"do\" at /tmp/tmp7uka8fm0.jl:30 expected \"\
    end\", got \"x\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7uka8fm0.jl:31\n\
    in expression starting at /tmp/tmp7uka8fm0.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \"returns vector of strings\"\
    \n    new_arr = []\n    for x in arr\n        if x == 1\n            push!(new_arr,\
    \ \"One\")\n        elseif x == 2\n            push!(new_arr, \"Two\")\n     \
    \   elseif x == 3\n            push!(new_arr, \"Three\")\n        elseif x ==\
    \ 4\n            push!(new_arr, \"Four\")\n        elseif x == 5\n           \
    \ push!(new_arr, \"Five\")\n        elseif x == 6\n            push!(new_arr,\
    \ \"Six\")\n        elseif x == 7\n            push!(new_arr, \"Seven\")\n   \
    \     elseif x == 8\n            push!(new_arr, \"Eight\")\n        elseif x ==\
    \ 9\n            push!(new_arr, \"Nine\")\n        end\n    end\n    return reverse(new_arr)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr02rnxuq.jl:53\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"Three\", \"Two\", \"Eight\", \"\
    Five\", \"Four\", \"One\", \"One\", \"Two\"] == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr02rnxuq.jl:53 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr02rnxuq.jl:52\ntest set: Test\
    \ Failed at /tmp/tmpr02rnxuq.jl:56\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"Two\", \"Three\", \"One\"] ==\
    \ [\"Three\", \"Two\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr02rnxuq.jl:56 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr02rnxuq.jl:52\ntest set: Test\
    \ Failed at /tmp/tmpr02rnxuq.jl:57\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"Eight\", \"Four\", \"Nine\"] ==\
    \ [\"Nine\", \"Eight\", \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr02rnxuq.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr02rnxuq.jl:52\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr02rnxuq.jl:50\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    types_of_number = [\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ]\n    string_arr = [types_of_number[x] for x in sort(arr) if 1 <= x <= 9]\n \
    \   reverse(string_arr)\nend\n \n@testset \"Example tests\" begin\n    @test by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n    @test by_length([1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9])\n\
    \        ==[\"One\",\"One\",\"One\",\"One\",\"One\",\"One\",\"One\",\"One\",\"\
    One\",\"One\",\"Two\",\"Two\",\"Two\",\"Two\",\"Two\",\"Two\",\"Two\",\"Two\"\
    ,\"Two\",\"Two\",\"Three\",\"Three\",\"Three\",\"Three\",\"Three\",\"Three\",\"\
    Three\",\"Three\",\"Three\",\"Three\",\"Four\",\"Four\",\"Four\",\"Four\",\"Four\"\
    ,\"Four\",\"Four\",\"Four\",\"Four\",\"Four\",\"Five\",\"Five\",\"Five\",\"Five\"\
    ,\"Five\",\"Five\",\"Five\",\"Five\",\"Five\",\"Five\",\"Six\",\"Six\",\"Six\"\
    ,\"Six\",\"Six\",\"Six\",\"Six\",\"Six\",\"Six\",\"Six\",\"Seven\",\"Seven\",\"\
    Seven\",\"Seven\",\"Seven\",\"Seven\",\"Seven\",\"Seven\",\"Seven\",\"Seven\"\
    ,\"Eight\",\"Eight\",\"Eight\",\"Eight\",\"Eight\",\"Eight\",\"Eight\",\"Eight\"\
    ,\"Eight\",\"Eight\",\"Nine\",\"Nine\",\"Nine\",\"Nine\",\"Nine\",\"Nine\",\"\
    Nine\",\"Nine\",\"Nine\",\"Nine\"]\n    @test by_\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"==\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqrxwy1ew.jl:31\nin expression starting at\
    \ /tmp/tmpqrxwy1ew.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    n = length(arr)\n    all_num\
    \ = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"]\n    result = []\n    for i in 1:n\n        num = arr[i]\n       \
    \ if 1 <= num <= 9\n            push!(result, all_num[num])\n        end\n   \
    \ end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5utx9dvy.jl:39\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"Two\", \"One\", \"One\", \"Four\"\
    , \"Five\", \"Eight\", \"Two\", \"Three\"] == [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5utx9dvy.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5utx9dvy.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp5utx9dvy.jl:42\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"One\", \"Three\", \"Two\"] ==\
    \ [\"Three\", \"Two\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5utx9dvy.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5utx9dvy.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp5utx9dvy.jl:43\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"Nine\", \"Four\", \"Eight\"] ==\
    \ [\"Nine\", \"Eight\", \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5utx9dvy.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5utx9dvy.jl:38\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5utx9dvy.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n  x=[\"One\",\"Two\",\"Three\"\
    ,\"Four\",\"Five\",\"Six\",\"Seven\",\"Eight\",\"Nine\"]\n    y=[]\n    for i=1:length(arr)\n\
    \        if(arr[i]<=9)\n            push!(y,x[arr[i]])\n        end\n    end\n\
    \    sort!(y)\n    reverse!(y)\n    return y\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzi098ccw.jl:39\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"Two\", \"Two\", \"Three\", \"One\"\
    , \"One\", \"Four\", \"Five\", \"Eight\"] == [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzi098ccw.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzi098ccw.jl:38\ntest set: Error\
    \ During Test at /tmp/tmpzi098ccw.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  BoundsError: attempt to access 9-element\
    \ Vector{String} at index [-1]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpzi098ccw.jl:27\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpzi098ccw.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpzi098ccw.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpzi098ccw.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  BoundsError: attempt\
    \ to access 9-element Vector{String} at index [-1]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] by_length(arr::Vector{Int64})\n     @\
    \ Main /tmp/tmpzi098ccw.jl:27\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpzi098ccw.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpzi098ccw.jl:38\ntest set:\
    \ Test Failed at /tmp/tmpzi0"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzi098ccw.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    a = sort(arr)\n    b = reverse(a)\n\
    \    c = []\n    for i in b\n        if i == 1\n            push!(c, \"One\")\n\
    \        elseif i == 2\n            push!(c, \"Two\")\n        elseif i == 3\n\
    \            push!(c, \"Three\")\n        elseif i == 4\n            push!(c,\
    \ \"Four\")\n        elseif i == 5\n            push!(c, \"Five\")\n        elseif\
    \ i == 6\n            push!(c, \"Six\")\n        elseif i == 7\n            push!(c,\
    \ \"Seven\")\n        elseif i == 8\n            push!(c, \"Eight\")\n       \
    \ elseif i == 9\n            push!(c, \"Nine\")\n        end\n    end\n    return\
    \ c\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    # We will map each item\
    \ to its String representation\n    # We need to do it with a dictionary\n   \
    \ # The dictionary will be {integer:String representation}\n    dict = Dict{Int64,String}()\n\
    \    dict[1] = \"One\"\n    dict[2] = \"Two\"\n    dict[3] = \"Three\"\n    dict[4]\
    \ = \"Four\"\n    dict[5] = \"Five\"\n    dict[6] = \"Six\"\n    dict[7] = \"\
    Seven\"\n    dict[8] = \"Eight\"\n    dict[9] = \"Nine\"\n    \n    # We filter\
    \ out any weird number\n    sorted_arr = sort(filter(x-> x in 1:9, arr))\n   \
    \ reversed_arr = reverse(sorted_arr)\n    \n    # We map the reversed array to\
    \ its String representation using the dictionary\n    # We use map and not broadcast\
    \ because we are mapping each item to a String\n    # Therefore, we need one to\
    \ one mapping\n    return map(x-> dict[x], reversed_arr)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr) == 0\n  \
    \      return Vector{String}()\n    end\n    for i in 1:length(arr)\n        if\
    \ arr[i] < 1 || arr[i] > 9\n            deleteat!(arr, i)\n        end\n    end\n\
    \    sort!(arr)\n    reverse!(arr)\n    return map(x -> get_word(x), arr)\nend\n\
    \    \n\"\"\"\n    Given a positive integer n, returns the nth Fibonacci number.\n\
    \    For example:\n      fibonacci(1)  = 1\n      fibonacci(2)  = 1\n      fibonacci(3)\
    \  = 2\n      fibonacci(4)  = 3\n      fibonacci(5)  = 5\n      fibonacci(10)\
    \ = 55\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t\
    @test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpqff1o_vd.jl:36\nin expression starting at /tmp/tmpqff1o_vd.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    # your code\nend\n\"\"\"\
    \n# Test cases\n# Do not change any of the code below!\n\"\"\"\n@testset \"by_length\
    \ test cases\" begin\n    @test by_length([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    @test\
    \ by_length([]) == []\n    @test by_length([1, -1 , 55]) == [\"One\"]\n    @test\
    \ by_length([1, 2, 1, 2, 6, 7, 8, 9, 2, 1]) == [\"Nine\", \"Eight\", \"Seven\"\
    , \"Six\", \"Two\", \"Two\", \"Two\", \"One\", \"One\", \"One\"]\n    @test by_length([7,\
    \ 2, 8, 9, 1, 2, 5, 7, 3, 4, 6, 7, 4, 2, 6, 7, 8, 9, 1, 2, 5, 7, 3, 4, 6, 7, 4,\
    \ 2, 6, 7, 8, 9, 1, 2, 5, 7, 3, 4, 6, 7, 4, 2, 6, 7, 8, 9, 1, 2, 5, 7, 3, 4, 6,\
    \ 7, 4, 2, 6, 7, 8, 9, 1, 2, 5, 7, 3, 4, 6, 7, 4, 2, 6, 7, 8, 9, 1, 2, 5, 7, 3,\
    \ 4, 6, 7, 4, 2, 6, 7, 8, 9, 1, 2, 5, 7, 3, 4, 6, 7, 4, 2, 6, 7, 8, 9, 1, 2, 5,\
    \ 7, 3, 4, 6, 7, 4, 2, 6, 7, 8, 9, 1, 2, 5, 7, 3, 4, 6, 7, 4, 2, 6, 7, 8, 9, 1,\
    \ 2, 5, 7, 3, 4, 6, 7, 4, 2, 6, 7, 8, 9, 1, 2, 5, 7, 3, 4, 6, 7, 4, 2, 6, 7, 8,\
    \ 9, 1, 2, 5, 7, 3, 4,\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfg6l083a.jl:37\nin expression starting at\
    \ /tmp/tmpfg6l083a.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    #your code here \n    #\
    \ 1. \u5148\u6392\u5E8F\n    # 2. \u7136\u540E\u6309\u7167\u987A\u5E8F\u8F93\u51FA\
    .\n    # 3. \u5982\u679C\u51FA\u73B0\u6570\u5B57\u4E2D\u95F4\u6F0F\u6389\u4E86\
    ,\u90A3\u4E48\u76F4\u63A5\u7528\u524D\u4E00\u4E2A\u6570\u5B57\u8986\u76D6\n  \
    \  #\n    arr = sort(arr)\n    arr = reverse(arr)\n    res = []\n    for i = 1:length(arr)\n\
    \        if arr[i] == 1\n            push!(res, \"One\")\n        elseif arr[i]\
    \ == 2\n            push!(res, \"Two\")\n        elseif arr[i] == 3\n        \
    \    push!(res, \"Three\")\n        elseif arr[i] == 4\n            push!(res,\
    \ \"Four\")\n        elseif arr[i] == 5\n            push!(res, \"Five\")\n  \
    \      elseif arr[i] == 6\n            push!(res, \"Six\")\n        elseif arr[i]\
    \ == 7\n            push!(res, \"Seven\")\n        elseif arr[i] == 8\n      \
    \      push!(res, \"Eight\")\n        elseif arr[i] == 9\n            push!(res,\
    \ \"Nine\")\n        else\n            push!(res, res[end])\n        end\n   \
    \ end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5p9kzcw8.jl:63\n  Test threw exception\n\
    \  Expression: candidate([1, -1, 55]) == [\"One\"]\n  BoundsError: attempt to\
    \ access 0-element Vector{Any} at index [0]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] by_length(arr::Vector{Int64})\n     @\
    \ Main /tmp/tmp5p9kzcw8.jl:51\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp5p9kzcw8.jl:63 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp5p9kzcw8.jl:60\ntest set:\
    \ Test Failed at /tmp/tmp5p9kzcw8.jl:64\n  Expression: candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"Three\", \"Two\", \"One\"\
    , \"One\"] == [\"Three\", \"Two\", \"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5p9kzcw8.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5p9kzcw8.jl:60\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    3     1      1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5p9kzcw8.jl:58\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr_len = length(arr)\n\
    \    if arr_len > 0\n        res = []\n        for i in 1:arr_len\n          \
    \  if arr[i] == 1 \n                push!(res, \"One\")\n            elseif arr[i]\
    \ == 2 \n                push!(res, \"Two\")\n            elseif arr[i] == 3 \n\
    \                push!(res, \"Three\")\n            elseif arr[i] == 4 \n    \
    \            push!(res, \"Four\")\n            elseif arr[i] == 5 \n         \
    \       push!(res, \"Five\")\n            elseif arr[i] == 6 \n              \
    \  push!(res, \"Six\")\n            elseif arr[i] == 7 \n                push!(res,\
    \ \"Seven\")\n            elseif arr[i] == 8 \n                push!(res, \"Eight\"\
    )\n            elseif arr[i] == 9 \n                push!(res, \"Nine\")\n   \
    \         end\n        end\n        res = sort(res)\n        res = reverse(res)\n\
    \        return res\n    else\n        return []\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmprvcuqksm.jl:59\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"Two\", \"Two\", \"Three\", \"One\"\
    , \"One\", \"Four\", \"Five\", \"Eight\"] == [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprvcuqksm.jl:59 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprvcuqksm.jl:58\ntest set: Test\
    \ Failed at /tmp/tmprvcuqksm.jl:62\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"Two\", \"Three\", \"One\"] ==\
    \ [\"Three\", \"Two\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprvcuqksm.jl:62 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprvcuqksm.jl:58\ntest set: Test\
    \ Failed at /tmp/tmprvcuqksm.jl:63\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"Nine\", \"Four\", \"Eight\"] ==\
    \ [\"Nine\", \"Eight\", \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprvcuqksm.jl:63 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprvcuqksm.jl:58\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprvcuqksm.jl:56\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    i = 1\n    j = length(arr)\n\
    \    arr_new = String[]\n    while i <= j\n        if (1 <= arr[i] <= 9) \n  \
    \          append!(arr_new,string(arr[i]))\n            i += 1\n        else\n\
    \            pop!(arr)\n            j -= 1\n        end\n    end\n    return reverse(arr_new)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmph84c2jkq.jl:42\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{String}, x::Char, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] _append!(a::Vector{String}, #unused#::Base.HasLength,\
    \ iter::String)\n     @ Base ./array.jl:1060\n   [3] append!\n     @ ./array.jl:1050\
    \ [inlined]\n   [4] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmph84c2jkq.jl:28\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmph84c2jkq.jl:42 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmph84c2jkq.jl:41\ntest set:\
    \ Error During Test at /tmp/tmph84c2jkq.jl:44\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type Char to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{String}, x::Char, i1::Int6"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph84c2jkq.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \"\"\"\n    string_array\
    \ = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"]\n    @inbounds for i in 1:length(arr)\n        if arr[i] == 1\n  \
    \          arr[i] = string_array[1]\n        elseif arr[i] == 2\n            arr[i]\
    \ = string_array[2]\n        elseif arr[i] == 3\n            arr[i] = string_array[3]\n\
    \        elseif arr[i] == 4\n            arr[i] = string_array[4]\n        elseif\
    \ arr[i] == 5\n            arr[i] = string_array[5]\n        elseif arr[i] ==\
    \ 6\n            arr[i] = string_array[6]\n        elseif arr[i] == 7\n      \
    \      arr[i] = string_array[7]\n        elseif arr[i] == 8\n            arr[i]\
    \ = string_array[8]\n        elseif arr[i] == 9\n            arr[i] = string_array[9]\n\
    \        end\n    end\n    if length(arr) != 0\n        return reverse(arr)\n\
    \    else\n        return []\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgwkipe_v.jl:1\nin expression starting at /tmp/tmpgwkipe_v.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    elements = [\"One\", \"\
    Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ]\n    num_sort = sort(arr)\n    rev_num_sort = reverse(num_sort)\n    res = []\n\
    \    for i in rev_num_sort\n        if i in 1:9\n            push!(res, elements[i])\n\
    \        end\n    end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    # Filter values that\
    \ fall outside of the range 1 - 9\n    # sort them, reverse them, and then apply\
    \ the names of\n    # numbers from 1 - 9 to them.\n    nums = filter(x -> x >=\
    \ 1 && x <= 9, arr)\n    nums = sort(nums)\n    nums = reverse(nums)\n    nums\
    \ = map(x -> numbers[x], nums)\n    \n    return nums\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp2_ntd0xq.jl:39\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: numbers\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#2#4\")(x::Int64)\n      @ Main\
    \ /tmp/tmp2_ntd0xq.jl:30\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n\
    \    [3] _collect(c::Vector{Int64}, itr::Base.Generator{Vector{Int64}, var\"#2#4\"\
    }, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n\
    \    [4] collect_similar\n      @ ./array.jl:653 [inlined]\n    [5] map\n    \
    \  @ ./abstractarray.jl:2867 [inlined]\n    [6] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmp2_ntd0xq.jl:30\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp2_ntd0xq.jl:39 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp2_ntd0xq.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp2_ntd0xq.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: numbers not defined\n\
    \  Stacktrace:\n    [1] (::var\"#2#4\")(x::Int64)\n      @ Main /tmp/tmp2_ntd0xq.jl:30\n\
    \    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _collect(c::Vector{Int64},\
    \ itr::Base.Generator{Vector{Int64}, var\"#2#4\"}, #unused#::Base.EltypeUnknown,\
    \ isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n    [4] collect_similar\n\
    \      @ ./array.jl:653 [inlined]\n    [5] map\n      @ ./abstractarray.jl:2867\
    \ [inlined]\n    [6] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmp2_ntd0xq.jl:30\n\
    \    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp2_ntd0xq.jl:41 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp2_ntd"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2_ntd0xq.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    # sort the array\n    sorted_arr\
    \ = sort(arr)\n    # reverse the array\n    sorted_arr = reverse(sorted_arr)\n\
    \    # create a name vector by the numbers\n    name_arr = []\n    # loop on the\
    \ sorted array\n    for i = 1:length(sorted_arr)\n        # if the number is -1\
    \ or 0 then don't add it\n        if (sorted_arr[i] == -1 || sorted_arr[i] ==\
    \ 0) \n            continue\n        # else create a dictionary\n        else\n\
    \            number_dict = Dict(\n                1 => \"One\",\n            \
    \    2 => \"Two\",\n                3 => \"Three\",\n                4 => \"Four\"\
    ,\n                5 => \"Five\",\n                6 => \"Six\",\n           \
    \     7 => \"Seven\",\n                8 => \"Eight\",\n                9 => \"\
    Nine\",\n            )\n            # add the value of the number from the dictionary\n\
    \            push!(name_arr, number_dict[sorted_arr[i]])\n        end\n    end\n\
    \    # return the array of strings\n    return name_arr\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpvmbk7aj_.jl:61\n  Test threw exception\n\
    \  Expression: candidate([1, -1, 55]) == [\"One\"]\n  KeyError: key 55 not found\n\
    \  Stacktrace:\n   [1] getindex\n     @ ./dict.jl:481 [inlined]\n   [2] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpvmbk7aj_.jl:48\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpvmbk7aj_.jl:61 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpvmbk7aj_.jl:58\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    4      1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvmbk7aj_.jl:56\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    # your code here\n    new_arr\
    \ = []\n    for x in arr\n        if x >= 1 && x <= 9\n            push!(new_arr,\
    \ x)\n        end\n    end\n    new_arr = sort(new_arr)\n    new_arr = reverse(new_arr)\n\
    \    new_arr2 = []\n    for x in new_arr\n        if x == 1\n            push!(new_arr2,\
    \ \"One\")\n        elseif x == 2\n            push!(new_arr2, \"Two\")\n    \
    \    elseif x == 3\n            push!(new_arr2, \"Three\")\n        elseif x ==\
    \ 4\n            push!(new_arr2, \"Four\")\n        elseif x == 5\n          \
    \  push!(new_arr2, \"Five\")\n        elseif x == 6\n            push!(new_arr2,\
    \ \"Six\")\n        elseif x == 7\n            push!(new_arr2, \"Seven\")\n  \
    \      elseif x == 8\n            push!(new_arr2, \"Eight\")\n        elseif x\
    \ == 9\n            push!(new_arr2, \"Nine\")\n        end\n    end\n    return\
    \ new_arr2\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    # arr = reverse(sort(arr))\n\
    \    # for x in arr \n    #     if x in 1:9\n    #         # Push the One through\
    \ Nine strings to the new array\n    #         # Return the new array\n    # \
    \    end\n    # end\n    # return []\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp0rfsufsh.jl:37\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{String}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp0rfsufsh.jl:31\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0rfsufsh.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0rfsufsh.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp0rfsufsh.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp0rfsufsh.jl:31\n\
    \   [2] macro expansion\n     @ /sha"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0rfsufsh.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n  return [\"\"]\nend\n \nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5r3b55uw.jl:31\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"\"] == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5r3b55uw.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5r3b55uw.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp5r3b55uw.jl:32\n  Expression: candidate(Vector{Int64}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5r3b55uw.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5r3b55uw.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp5r3b55uw.jl:33\n  Expression: candidate([1, -1, 55]) == [\"\
    One\"]\n   Evaluated: [\"\"] == [\"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5r3b55uw.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5r3b55uw.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp5r3b55uw.jl:34\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"\"] == [\"Three\", \"Two\",\
    \ \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5r3b55uw.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5r3b55uw.jl:30\ntest set: Tes"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5r3b55uw.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    # sort the numbers in the\
    \ array that are between 1 and 9 inclusive\n    # sort_arr = sort(filter(x ->\
    \ x > 0 && x < 10, arr))\n    sort_arr = sort(filter(x -> x > 0 && x < 10, arr))\n\
    \    # reverse the array\n    reverse_arr = reverse(sort_arr)\n    # map integers\
    \ to strings \n    string_arr = map(x -> IntToString(x), reverse_arr)\n    return\
    \ string_arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t\
    @test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpa0rts465.jl:37\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: IntToString\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#2#4\")(x::Int64)\n      @ Main\
    \ /tmp/tmpa0rts465.jl:29\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n\
    \    [3] _collect(c::Vector{Int64}, itr::Base.Generator{Vector{Int64}, var\"#2#4\"\
    }, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n\
    \    [4] collect_similar\n      @ ./array.jl:653 [inlined]\n    [5] map\n    \
    \  @ ./abstractarray.jl:2867 [inlined]\n    [6] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmpa0rts465.jl:29\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpa0rts465.jl:37 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpa0rts465.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpa0rts465.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: IntToString not defined\n\
    \  Stacktrace:\n    [1] (::var\"#2#4\")(x::Int64)\n      @ Main /tmp/tmpa0rts465.jl:29\n\
    \    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _collect(c::Vector{Int64},\
    \ itr::Base.Generator{Vector{Int64}, var\"#2#4\"}, #unused#::Base.EltypeUnknown,\
    \ isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n    [4] collect_similar\n\
    \      @ ./array.jl:653 [inlined]\n    [5] map\n      @ ./abstractarray.jl:2867\
    \ [inlined]\n    [6] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmpa0rts465.jl:29\n\
    \    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpa0rts465.jl:39 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa0rts465.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    # your code here\n    arr\
    \ = sort(arr)\n    arr = reverse(arr)\n    digit_names = [\"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    result\
    \ = []\n    for i in arr\n        if i in 1:9\n            push!(result, digit_names[i])\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    # sort the given array\n\
    \    # reverse the resulting array\n    # replace each digit by its corresponding\
    \ name from\n    # \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\"\n    \n    # initialize the output vector\n    output\
    \ = String[]\n    \n    # create a map for the conversion\n    convert = Dict(1\
    \ => \"One\", 2 => \"Two\", 3 => \"Three\", 4 => \"Four\", 5 => \"Five\", 6 =>\
    \ \"Six\", 7 => \"Seven\", 8 => \"Eight\", 9 => \"Nine\")\n    \n    # sort and\
    \ reverse the vector\n    sorted = sort(arr)\n    reversed = reverse(sorted)\n\
    \    \n    # convert the numbers and push them to the output vector\n    for num\
    \ in reversed\n        if num in keys(convert)\n            push!(output, convert[num])\n\
    \        end\n    end\n    \n    return output\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    for i in eachindex(arr)\n        if arr[i] == 1\n      \
    \      arr[i] = \"One\"\n        elseif arr[i] == 2\n            arr[i] = \"Two\"\
    \n        elseif arr[i] == 3\n            arr[i] = \"Three\"\n        elseif arr[i]\
    \ == 4\n            arr[i] = \"Four\"\n        elseif arr[i] == 5\n          \
    \  arr[i] = \"Five\"\n        elseif arr[i] == 6\n            arr[i] = \"Six\"\
    \n        elseif arr[i] == 7\n            arr[i] = \"Seven\"\n        elseif arr[i]\
    \ == 8\n            arr[i] = \"Eight\"\n        elseif arr[i] == 9\n         \
    \   arr[i] = \"Nine\"\n        else\n            arr[i] = nothing\n        end\n\
    \    end\n    arr = filter(!isnothing, arr)\n    return arr\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpa3ai35tp.jl:56\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpa3ai35tp.jl:41\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpa3ai35tp.jl:56 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpa3ai35tp.jl:55\ntest set:\
    \ Error During Test at /tmp/tmpa3ai35tp.jl:58\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::Nothing, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpa3ai35tp.jl:45\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/s"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa3ai35tp.jl:53\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    # Replace \"1\" by \"One\"\
    , \"2\" by \"Two\", ...\n    end\nusing Test\n\n@testset begin\n\ncandidate =\
    \ by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpdypklycg.jl:30\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{String}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpdypklycg.jl:24\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdypklycg.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdypklycg.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpdypklycg.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpdypklycg.jl:24\n\
    \   [2] macro expansion\n     @ /sha"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdypklycg.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    m = Dict(\"One\" =>\
    \ 1, \"Two\" => 2, \"Three\" => 3, \"Four\" => 4, \"Five\" => 5, \"Six\" => 6,\
    \ \"Seven\" => 7, \"Eight\" => 8, \"Nine\" => 9)\n    rev = reverse(sort(arr))\n\
    \    out = []\n    for i in rev\n        if i in m\n            push!(out, get(m,\
    \ i, i))\n        end\n    end\n    return out\nend\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: AbstractDict collections only contain Pairs;\nEither\
    \ look for e.g. A=>B instead, or use the `keys` or `values`\nfunction if you are\
    \ looking for a key or value respectively.\nStacktrace:\n [1] error(s::String)\n\
    \   @ Base ./error.jl:33\n [2] in(p::Int64, a::Dict{String, Int64})\n   @ Base\
    \ ./abstractdict.jl:28\n [3] by_length(arr::Vector{Int64})\n   @ Main /tmp/tmpzi1unpqw.jl:28\n\
    \ [4] top-level scope\n   @ /tmp/tmpzi1unpqw.jl:34\nin expression starting at\
    \ /tmp/tmpzi1unpqw.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    x = Int64[]\n    y = String[]\n\
    \    a = [1, 1, 2, 2, 3, 4, 5, 8]\n    b = [\"One\", \"One\", \"Two\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Eight\"]\n    for i in arr\n        if i in\
    \ a\n            push!(x, i)\n        end\n    end\n    for i in sort(x)\n   \
    \     push!(y,b[a .== i])\n    end\n    return reverse(y)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmppr6ksluq.jl:42\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Vector{String} to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] push!(a::Vector{String}, item::Vector{String})\n\
    \     @ Base ./array.jl:994\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmppr6ksluq.jl:33\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmppr6ksluq.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmppr6ksluq.jl:41\ntest set:\
    \ Error During Test at /tmp/tmppr6ksluq.jl:44\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type Vector{String} to an object of type String\n  Closest candidates are:\n\
    \    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] push!(a::Vector{String}, item::Vector{String})\n\
    \     @ Base ./array.jl:994\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmppr6ksluq.jl:33\n   [3] macro expansion\n     @ /sh"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppr6ksluq.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    sort!(arr)\n    reverse!(arr)\n\
    \    res = [\"\"]\n    for i = 1:length(arr)\n        if arr[i] == 1\n       \
    \     push!(res, \"One\")\n        elseif arr[i] == 2\n            push!(res,\
    \ \"Two\")\n        elseif arr[i] == 3\n            push!(res, \"Three\")\n  \
    \      elseif arr[i] == 4\n            push!(res, \"Four\")\n        elseif arr[i]\
    \ == 5\n            push!(res, \"Five\")\n        elseif arr[i] == 6\n       \
    \     push!(res, \"Six\")\n        elseif arr[i] == 7\n            push!(res,\
    \ \"Seven\")\n        elseif arr[i] == 8\n            push!(res, \"Eight\")\n\
    \        elseif arr[i] == 9\n            push!(res, \"Nine\")\n        end\n \
    \   end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj4vg1xgx.jl:54\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"\", \"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"] == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj4vg1xgx.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj4vg1xgx.jl:53\ntest set: Test\
    \ Failed at /tmp/tmpj4vg1xgx.jl:55\n  Expression: candidate(Vector{Int64}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj4vg1xgx.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj4vg1xgx.jl:53\ntest set: Test\
    \ Failed at /tmp/tmpj4vg1xgx.jl:56\n  Expression: candidate([1, -1, 55]) == [\"\
    One\"]\n   Evaluated: [\"\", \"One\"] == [\"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj4vg1xgx.jl:56 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj4vg1xgx.jl:53\ntest set: Test\
    \ Failed at /tmp/tmpj4vg1xgx.jl:57\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"\", \"Three\", \"Two\", \"One\"\
    ] == [\"Three\", \"Two\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj4vg1xgx.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Te"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj4vg1xgx.jl:51\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    set = sort(setdiff(union(arr),\
    \ -1:10))\n    array = []\n    for i = 1:length(set)\n        array = push!(array,string(set[i]))\n\
    \    end\n    array\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8t0wur0e.jl:35\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: String[] == [\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8t0wur0e.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8t0wur0e.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp8t0wur0e.jl:37\n  Expression: candidate([1, -1, 55]) == [\"\
    One\"]\n   Evaluated: [\"55\"] == [\"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8t0wur0e.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8t0wur0e.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp8t0wur0e.jl:38\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: String[] == [\"Three\", \"Two\"\
    , \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8t0wur0e.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8t0wur0e.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp8t0wur0e.jl:39\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: String[] == [\"Nine\", \"Eight\",\
    \ \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8t0wur0e.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/t"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8t0wur0e.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    # Sort the array\n    arr\
    \ = sort(arr)\n    # Reverse the array\n    arr = reverse(arr)\n    # Replace\
    \ each number by its name from 1-9\n    for i in 1:length(arr)\n        if arr[i]\
    \ == 1\n            arr[i] = \"One\"\n        elseif arr[i] == 2\n           \
    \ arr[i] = \"Two\"\n        elseif arr[i] == 3\n            arr[i] = \"Three\"\
    \n        elseif arr[i] == 4\n            arr[i] = \"Four\"\n        elseif arr[i]\
    \ == 5\n            arr[i] = \"Five\"\n        elseif arr[i] == 6\n          \
    \  arr[i] = \"Six\"\n        elseif arr[i] == 7\n            arr[i] = \"Seven\"\
    \n        elseif arr[i] == 8\n            arr[i] = \"Eight\"\n        elseif arr[i]\
    \ == 9\n            arr[i] = \"Nine\"\n        end\n    end\n    # Sort the array\
    \ such that numbers are on the right and strings are on the left\n    arr = sort(arr)\n\
    \    for i in 1:length(arr)\n        if typeof(arr[i]) != String\n           \
    \ deleteat!(arr, i)\n        end\n    end\n    # Return the array\n    return\
    \ arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmplu4v_s4i.jl:64\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmplu4v_s4i.jl:44\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmplu4v_s4i.jl:64 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmplu4v_s4i.jl:63\ntest set:\
    \ Error During Test at /tmp/tmplu4v_s4i.jl:66\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmplu4v_s4i.jl:30\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplu4v_s4i.jl:61\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    # your code here\nend\n\
    \ \nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgg2_39oe.jl:31\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{String}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpgg2_39oe.jl:24\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgg2_39oe.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgg2_39oe.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpgg2_39oe.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpgg2_39oe.jl:24\n\
    \   [2] macro expansion\n     @ /sha"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgg2_39oe.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr) == 0\n  \
    \      return []\n    end\n    if isempty(arr)\n        return []\n    end\n \
    \   if length(arr) == 1\n        if arr[1] == 1\n            return [\"One\"]\n\
    \        elseif arr[1] == 2\n            return [\"Two\"]\n        elseif arr[1]\
    \ == 3\n            return [\"Three\"]\n        elseif arr[1] == 4\n         \
    \   return [\"Four\"]\n        elseif arr[1] == 5\n            return [\"Five\"\
    ]\n        elseif arr[1] == 6\n            return [\"Six\"]\n        elseif arr[1]\
    \ == 7\n            return [\"Seven\"]\n        elseif arr[1] == 8\n         \
    \   return [\"Eight\"]\n        elseif arr[1] == 9\n            return [\"Nine\"\
    ]\n        else\n            return []\n        end\n    end\n    temp = sort(arr)\n\
    \    temp = reverse(temp)\n    new_arr = []\n    for i = 1:length(temp)\n    \
    \    if temp[i] == 1\n            push!(new_arr, \"One\")\n        elseif temp[i]\
    \ == 2\n            push!(new_arr, \"Two\")\n        elseif temp[i] == 3\n   \
    \         push!(new_arr, \"Three\")\n        elseif temp[i] == 4\n           \
    \ push!(new_arr, \"Four\")\n        elseif temp[i] == 5\n            push!(new_arr,\
    \ \"Five\")\n        elseif temp[i] == 6\n            push!(new_arr, \"Six\")\n\
    \        elseif temp[i] == 7\n            push!(new_arr, \"Seven\")\n        elseif\
    \ temp[i] == 8\n            push!(new_arr, \"Eight\")\n        elseif temp[i]\
    \ == 9\n            push!(new_arr, \"Nine\")\n        end\n    end\n    return\
    \ new_arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    new_list = []\n    for i\
    \ in 1:length(arr)\n        if arr[i] == 1\n            push!(new_list, \"One\"\
    )\n        elseif arr[i] == 2\n            push!(new_list, \"Two\")\n        elseif\
    \ arr[i] == 3\n            push!(new_list, \"Three\")\n        elseif arr[i] ==\
    \ 4\n            push!(new_list, \"Four\")\n        elseif arr[i] == 5\n     \
    \       push!(new_list, \"Five\")\n        elseif arr[i] == 6\n            push!(new_list,\
    \ \"Six\")\n        elseif arr[i] == 7\n            push!(new_list, \"Seven\"\
    )\n        elseif arr[i] == 8\n            push!(new_list, \"Eight\")\n      \
    \  elseif arr[i] == 9\n            push!(new_list, \"Nine\")\n        end\n  \
    \  end\n    return new_list\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwegvakoz.jl:52\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"Two\", \"One\", \"One\", \"Four\"\
    , \"Five\", \"Eight\", \"Two\", \"Three\"] == [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwegvakoz.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwegvakoz.jl:51\ntest set: Test\
    \ Failed at /tmp/tmpwegvakoz.jl:55\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"One\", \"Three\", \"Two\"] ==\
    \ [\"Three\", \"Two\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwegvakoz.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwegvakoz.jl:51\ntest set: Test\
    \ Failed at /tmp/tmpwegvakoz.jl:56\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"Nine\", \"Four\", \"Eight\"] ==\
    \ [\"Nine\", \"Eight\", \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwegvakoz.jl:56 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwegvakoz.jl:51\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwegvakoz.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    return [\"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcbjxgt9y.jl:30\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"] == [\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcbjxgt9y.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcbjxgt9y.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpcbjxgt9y.jl:31\n  Expression: candidate(Vector{Int64}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcbjxgt9y.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcbjxgt9y.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpcbjxgt9y.jl:32\n  Expression: candidate([1, -1, 55]) == [\"\
    One\"]\n   Evaluated: [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"] == [\"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcbjxgt9y.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcbjxgt9y.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpcbjxgt9y.jl:33\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"] == [\"Three\", \"Two\"\
    , \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/st"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcbjxgt9y.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \"\"\"\n    function sort_and_reverse(arr::Vector{Int64})::Vector{Int64}\n\
    \        arr = sort(arr)\n        arr = reverse(arr)\n        return arr\n   \
    \ end\n    \n    function convert_to_string(arr::Vector{Int64})::Vector{String}\n\
    \        one = \"One\"\n        two = \"Two\"\n        three = \"Three\"\n   \
    \     four = \"Four\"\n        five = \"Five\"\n        six = \"Six\"\n      \
    \  seven = \"Seven\"\n        eight = \"Eight\"\n        nine = \"Nine\"\n   \
    \     output = Vector{String}(undef, size(arr)[1])\n        for i = 1:size(arr)[1]\n\
    \            if arr[i] == 1\n                output[i] = one\n            elseif\
    \ arr[i] == 2\n                output[i] = two\n            elseif arr[i] == 3\n\
    \                output[i] = three\n            elseif arr[i] == 4\n         \
    \       output[i] = four\n            elseif arr[i] == 5\n                output[i]\
    \ = five\n            elseif arr[i] == 6\n                output[i] = six\n  \
    \          elseif arr[i] == 7\n                output[i] = seven\n           \
    \ elseif arr[i] == 8\n                output[i] = eight\n            elseif arr[i]\
    \ == 9\n                output[i] = nine\n            end\n        end\n     \
    \   return output\n    end\n    \n    function remove_strange_number(arr::Vector{Int64})::Vector{Int64}\n\
    \        output = Vector{Int64}(undef, size(arr)[1])\n        count = 0\n    \
    \    for i = 1:size(arr)[1]\n            if arr[i] < 10 && arr[i] > 0\n      \
    \          count += 1\n                output[count] = arr[i]\n            end\n\
    \        end\n        return output[1:count]\n    end\n    \n    function remove_empty_element(arr::Vector{Int64})::Vector{Int64}\n\
    \        output = Vector{Int64}(undef, size(arr)[1])\n        count = 0\n    \
    \    for i = 1:size(\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbzu1wj7y.jl:1\nin expression starting at /tmp/tmpbzu1wj7y.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    digits = [\"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  \
    \  sort(reverse(filter(x -> x >= 1 && x <= 9, arr)), by = x -> x) .|> \n     \
    \   x -> [digits[i] for i in x]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgeb_m6ra.jl:32\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Array{String, 0} to an object of type String\n \
    \ Closest candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n    [1] setindex!(A::Vector{String}, x::Array{String,\
    \ 0}, i1::Int64)\n      @ Base ./array.jl:903\n    [2] _unsafe_copyto!(dest::Vector{String},\
    \ doffs::Int64, src::Vector{Array{String, 0}}, soffs::Int64, n::Int64)\n     \
    \ @ Base ./array.jl:253\n    [3] unsafe_copyto!\n      @ ./array.jl:307 [inlined]\n\
    \    [4] _copyto_impl!\n      @ ./array.jl:331 [inlined]\n    [5] copyto!\n  \
    \    @ ./array.jl:317 [inlined]\n    [6] copyto!\n      @ ./array.jl:343 [inlined]\n\
    \    [7] copyto_axcheck!\n      @ ./abstractarray.jl:1104 [inlined]\n    [8] Vector{String}(x::Vector{Array{String,\
    \ 0}})\n      @ Base ./array.jl:563\n    [9] convert\n      @ ./array.jl:554 [inlined]\n\
    \   [10] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmpgeb_m6ra.jl:24\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [12] macro expansion\n      @ /tmp/tmpgeb_m6ra.jl:32 [inlined]\n\
    \   [13] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [14] top-level scope\n      @ /tmp/tmpgeb_m6ra.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpgeb_m6ra.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type Array{String, 0} to an object of type String\n  Closest candidates are:\n\
    \    convert(::"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgeb_m6ra.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    list = []\n    for i in\
    \ 1:length(arr)\n        if arr[i] == 1\n            push!(list, \"One\")\n  \
    \      elseif arr[i] == 2\n            push!(list, \"Two\")\n        elseif arr[i]\
    \ == 3\n            push!(list, \"Three\")\n        elseif arr[i] == 4\n     \
    \       push!(list, \"Four\")\n        elseif arr[i] == 5\n            push!(list,\
    \ \"Five\")\n        elseif arr[i] == 6\n            push!(list, \"Six\")\n  \
    \      elseif arr[i] == 7\n            push!(list, \"Seven\")\n        elseif\
    \ arr[i] == 8\n            push!(list, \"Eight\")\n        elseif arr[i] == 9\n\
    \            push!(list, \"Nine\")\n        end\n    end\n    return list\nend\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3wkd21hb.jl:52\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"Two\", \"One\", \"One\", \"Four\"\
    , \"Five\", \"Eight\", \"Two\", \"Three\"] == [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3wkd21hb.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3wkd21hb.jl:51\ntest set: Test\
    \ Failed at /tmp/tmp3wkd21hb.jl:55\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"One\", \"Three\", \"Two\"] ==\
    \ [\"Three\", \"Two\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3wkd21hb.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3wkd21hb.jl:51\ntest set: Test\
    \ Failed at /tmp/tmp3wkd21hb.jl:56\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"Nine\", \"Four\", \"Eight\"] ==\
    \ [\"Nine\", \"Eight\", \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3wkd21hb.jl:56 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3wkd21hb.jl:51\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3wkd21hb.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    if isempty(arr)\n      \
    \  return []\n    end\n    @assert all(filter(i -> i in 1:9, arr))\n    s = sort(arr)\n\
    \    r = reverse(s)\n    m = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    return [m[i] for i in r]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphw21825a.jl:37\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  TypeError: non-boolean\
    \ (Int64) used in boolean context\n  Stacktrace:\n   [1] _all\n     @ ./reduce.jl:1161\
    \ [inlined]\n   [2] _all\n     @ ./reducedim.jl:903 [inlined]\n   [3] #all#756\n\
    \     @ ./reducedim.jl:901 [inlined]\n   [4] all\n     @ ./reducedim.jl:901 [inlined]\n\
    \   [5] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmphw21825a.jl:26\n  \
    \ [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmphw21825a.jl:37 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmphw21825a.jl:36\ntest set:\
    \ Error During Test at /tmp/tmphw21825a.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  TypeError: non-boolean (Int64) used in\
    \ boolean context\n  Stacktrace:\n   [1] _all\n     @ ./reduce.jl:1161 [inlined]\n\
    \   [2] _all\n     @ ./reducedim.jl:903 [inlined]\n   [3] #all#756\n     @ ./reducedim.jl:901\
    \ [inlined]\n   [4] all\n     @ ./reducedim.jl:901 [inlined]\n   [5] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmphw21825a.jl:26\n   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmphw21825a.jl:39 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmphw21825a.jl:36\ntest set:\
    \ Error During Test at /tmp/tmphw21825a.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  TypeError: non-boolean\
    \ (Int64) used in boolean context\n  Stacktrace:\n   [1] _all\n     @ ./reduce.jl:1161\
    \ [inlined]\n   [2] _all\n     @ ./reducedim.jl:903 [inlined]\n   [3] #all#756\n\
    \     @ ./reducedim.jl:901 [inlined]\n   [4] all\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphw21825a.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \"\"\"\n    Given an array\
    \ of words, sort the words according to their length:\n      arr = [\"Banana\"\
    , \"Owl\", \"Dog\", \"World\", \"Tower\"]\n      return = [\"Owl\", \"Dog\", \"\
    Banana\", \"Tower\", \"World\"]\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpuccujdeq.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpuccujdeq.jl:1\n\
    in expression starting at /tmp/tmpuccujdeq.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    for item in arr \n     \
    \   if (item >= 1) && (item <= 9)\n            return  reverse(sort(arr))\n  \
    \      else \n            return arr\n        end\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpi67im_5n.jl:36\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Int64 to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n    [1] setindex!(A::Vector{String}, x::Int64, i1::Int64)\n\
    \      @ Base ./array.jl:903\n    [2] _unsafe_copyto!(dest::Vector{String}, doffs::Int64,\
    \ src::Vector{Int64}, soffs::Int64, n::Int64)\n      @ Base ./array.jl:253\n \
    \   [3] unsafe_copyto!\n      @ ./array.jl:307 [inlined]\n    [4] _copyto_impl!\n\
    \      @ ./array.jl:331 [inlined]\n    [5] copyto!\n      @ ./array.jl:317 [inlined]\n\
    \    [6] copyto!\n      @ ./array.jl:343 [inlined]\n    [7] copyto_axcheck!\n\
    \      @ ./abstractarray.jl:1104 [inlined]\n    [8] Vector{String}(x::Vector{Int64})\n\
    \      @ Base ./array.jl:563\n    [9] convert\n      @ ./array.jl:554 [inlined]\n\
    \   [10] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmpi67im_5n.jl:25\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [12] macro expansion\n      @ /tmp/tmpi67im_5n.jl:36 [inlined]\n\
    \   [13] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [14] top-level scope\n      @ /tmp/tmpi67im_5n.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpi67im_5n.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlg"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi67im_5n.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    k = [string(i) for i in\
    \ 1:9]\n    return [k[i] for i in sort(reverse(arr)) if i in 1:9]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpk2g0qdra.jl:31\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"1\", \"1\", \"2\", \"2\", \"3\"\
    , \"4\", \"5\", \"8\"] == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\",\
    \ \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk2g0qdra.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk2g0qdra.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpk2g0qdra.jl:33\n  Expression: candidate([1, -1, 55]) == [\"\
    One\"]\n   Evaluated: [\"1\"] == [\"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk2g0qdra.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk2g0qdra.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpk2g0qdra.jl:34\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"1\", \"2\", \"3\"] == [\"Three\"\
    , \"Two\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk2g0qdra.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk2g0qdra.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpk2g0qdra.jl:35\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"4\", \"8\", \"9\"] == [\"Nine\"\
    , \"Eight\", \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk2g0qdra.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:12"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk2g0qdra.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    a = sort(filter(x\
    \ -> x >= 1 && x <= 9, arr))\n    b = reverse(a)\n    println(b)\n    c = []\n\
    \    for i = 1:length(b)\n        if b[i] == 1\n            push!(c, \"One\")\n\
    \        elseif b[i] == 2\n            push!(c, \"Two\")\n        elseif b[i]\
    \ == 3\n            push!(c, \"Three\")\n        elseif b[i] == 4\n          \
    \  push!(c, \"Four\")\n        elseif b[i] == 5\n            push!(c, \"Five\"\
    )\n        elseif b[i] == 6\n            push!(c, \"Six\")\n        elseif b[i]\
    \ == 7\n            push!(c, \"Seven\")\n        elseif b[i] == 8\n          \
    \  push!(c, \"Eight\")\n        elseif b[i] == 9\n            push!(c, \"Nine\"\
    )\n        end\n    end\n    return c\nend\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "[8, 5, 4, 3, 2, 2, 1, 1]\n[8, 5, 4, 3, 2, 2, 1, 1]\nInt64[]\n[1]\n[3, 2,\
    \ 1]\n[9, 8, 4]\nTest Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    sort!(arr)\n    reverse!(arr)\n\
    \    result = []\n    for i in arr\n        if i == 1\n            push!(result,\
    \ \"One\")\n        elseif i == 2\n            push!(result, \"Two\")\n      \
    \  elseif i == 3\n            push!(result, \"Three\")\n        elseif i == 4\n\
    \            push!(result, \"Four\")\n        elseif i == 5\n            push!(result,\
    \ \"Five\")\n        elseif i == 6\n            push!(result, \"Six\")\n     \
    \   elseif i == 7\n            push!(result, \"Seven\")\n        elseif i == 8\n\
    \            push!(result, \"Eight\")\n        elseif i == 9\n            push!(result,\
    \ \"Nine\")\n        end\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    # Sort the array\n    sort!(arr)\n\
    \    # Reverse the array\n    reverse!(arr)\n    # Initialize the array where\
    \ we will store the names of the integers\n    result = String[]\n    # For each\
    \ element in the array\n    for element in arr\n        # Add the name of the\
    \ integer at the end of the result array\n        push!(result, number_to_word(element))\n\
    \    end\n    # Return the result array\n    return result\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpp_kga3jt.jl:42\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: number_to_word\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpp_kga3jt.jl:32\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp_kga3jt.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp_kga3jt.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpp_kga3jt.jl:44\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: number_to_word not defined\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpp_kga3jt.jl:32\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp_kga3jt.jl:44 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp_kga3jt.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpp_kga3jt.jl:45\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ number_to_word not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpp_kga3jt.jl:32\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp_kga3jt.jl:45 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp_kga3jt.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpp_kga3jt.jl:46\n  Test threw exception\n  Expression:\
    \ candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n  UndefVarError: number_to_"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp_kga3jt.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    temp = []\n    mapping = Dict(\"1\" => \"One\", \"2\" =>\
    \ \"Two\", \"3\" => \"Three\", \"4\" => \"Four\", \"5\" => \"Five\", \"6\" =>\
    \ \"Six\", \"7\" => \"Seven\", \"8\" => \"Eight\", \"9\" => \"Nine\")\n    for\
    \ i in arr\n        if (i < 1) || (i > 9)\n            continue\n        end\n\
    \        str = string(i)\n        push!(temp, mapping[str])\n    end\n    return\
    \ temp\nend\narr = [2, 1, 1, 4, 5, 8, 2, 3]\n@testset \"Testing by_length\" begin\n\
    \    @test by_length(arr) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n    @test by_length([1, -1 , 55]) == [\"One\"]\n\
    \    @test by_length([]) == []\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @testset not defined\nin expression starting\
    \ at /tmp/tmp71j750j9.jl:37\nin expression starting at /tmp/tmp71j750j9.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    # sort, reverse and convert\
    \ integers to strings\n    # create an array with nine strings\n    # we need\
    \ this variable in order to compare both arrays\n    # create an array of integers\
    \ from 1 to 9\n    # loop through the array of integers and\n    #   loop through\
    \ the array of strings and\n    #   if they are equal:\n    #     replace the\
    \ integer with the string\n    # return the final array \nend\nusing Test\n\n\
    @testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpt3v6r23r.jl:38\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{String}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpt3v6r23r.jl:32\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt3v6r23r.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt3v6r23r.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpt3v6r23r.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpt3v6r23r.jl:32\n\
    \   [2] macro expansion\n     @ /sha"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt3v6r23r.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \"\"\"\n    Given an array\
    \ of strings, sort them alphabetically, by length.\n    If two strings have the\
    \ same length, put them in alphabetical order.\n    If a string contains numbers,\
    \ it should be sorted like a string of letters.\n    Don't use any loops, instead,\
    \ use sort()\n    \n    For example:\n    arr = [\"Four\", \"Five\", \"Two\",\
    \ \"Four\", \"Six\", \"Three\", \"One\", \"One\", \"Six\", \"One\"]\n    \n  \
    \  sort them by length -> [\"One\", \"Two\", \"Six\", \"Four\", \"Five\", \"Three\"\
    , \"One\", \"One\", \"Four\", \"Six\"]\n    sort them alphabetically, by length\
    \ -> [\"One\", \"One\", \"Four\", \"Four\", \"One\", \"Six\", \"Six\", \"Two\"\
    , \"Three\", \"Five\"]\n    \n    return [\"One\", \"One\", \"Four\", \"Four\"\
    , \"One\", \"Six\", \"Six\", \"Two\", \"Three\", \"Five\"]\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpb7z4_019.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpb7z4_019.jl:1\n\
    in expression starting at /tmp/tmpb7z4_019.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    # sort the array and reverse\
    \ it\n    sorted_arr = sort(arr)\n    reverse_arr = reverse(sorted_arr)\n    \n\
    \    # create a dictionary\n    dict = Dict(\n        1 => \"One\",\n        2\
    \ => \"Two\",\n        3 => \"Three\",\n        4 => \"Four\",\n        5 => \"\
    Five\",\n        6 => \"Six\",\n        7 => \"Seven\",\n        8 => \"Eight\"\
    ,\n        9 => \"Nine\"\n    )\n    \n    out = []\n    for n in reverse_arr\n\
    \        if n in keys(dict)\n            push!(out,dict[n])\n        end\n   \
    \ end\n    return out\nend\narr = [2, 1, 1, 4, 5, 8, 2, 3]\nby_length(arr)\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \"\"\"\n    Given an array\
    \ of integers, sort the integers that are between 1 and 9 inclusive,\n    by their\
    \ length in the reverse order, and then replace each digit by its corresponding\n\
    \    name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcgn_d2fv.jl:1\nin expression starting at /tmp/tmpcgn_d2fv.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    l = length(arr)\n    v =\
    \ Vector{String}(l)\n    for i in 1:l\n        if arr[i] == 1\n            v[i]\
    \ = \"One\"\n        elseif arr[i] == 2\n            v[i] = \"Two\"\n        elseif\
    \ arr[i] == 3\n            v[i] = \"Three\"\n        elseif arr[i] == 4\n    \
    \        v[i] = \"Four\"\n        elseif arr[i] == 5\n            v[i] = \"Five\"\
    \n        elseif arr[i] == 6\n            v[i] = \"Six\"\n        elseif arr[i]\
    \ == 7\n            v[i] = \"Seven\"\n        elseif arr[i] == 8\n           \
    \ v[i] = \"Eight\"\n        elseif arr[i] == 9\n            v[i] = \"Nine\"\n\
    \        end\n    end\n    return v\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpvhvclmtx.jl:53\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching Vector{String}(::Int64)\n  Closest candidates are:\n    Vector{T}()\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/base/boot.jl:476\n    Array{T,\
    \ N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n\
    \    Array{T, N}(!Matched::BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpvhvclmtx.jl:24\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhvclmtx.jl:53 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhvclmtx.jl:52\ntest set:\
    \ Error During Test at /tmp/tmpvhvclmtx.jl:54\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: no method\
    \ matching Vector{String}(::Int64)\n  Closest candidates are:\n    Vector{T}()\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/base/boot.jl:476\n    Array{T,\
    \ N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n\
    \    Array{T, N}(!Matched::BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpvhvclmtx.jl:24\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhvclmtx.jl:54 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhvclmtx.jl:52\ntest set:\
    \ E"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvhvclmtx.jl:50\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = reverse(sort(arr))\n\
    \    result = []\n    for item in arr\n        if item == 1\n            push!(result,\
    \ \"One\")\n        elseif item == 2\n            push!(result, \"Two\")\n   \
    \     elseif item == 3\n            push!(result, \"Three\")\n        elseif item\
    \ == 4\n            push!(result, \"Four\")\n        elseif item == 5\n      \
    \      push!(result, \"Five\")\n        elseif item == 6\n            push!(result,\
    \ \"Six\")\n        elseif item == 7\n            push!(result, \"Seven\")\n \
    \       elseif item == 8\n            push!(result, \"Eight\")\n        elseif\
    \ item == 9\n            push!(result, \"Nine\")\n        end\n    end\n    return\
    \ result\nend\n    \n    \nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = Set(arr)\n    num_to_str\
    \ = Dict(\"1\" => \"One\", \"2\" => \"Two\", \"3\" => \"Three\", \"4\" => \"Four\"\
    , \"5\" => \"Five\",\n        \"6\" => \"Six\", \"7\" => \"Seven\", \"8\" => \"\
    Eight\", \"9\" => \"Nine\")\n    str_arr = []\n    for i in arr\n        if i\
    \ in 1:9\n            push!(str_arr, num_to_str[string(i)])\n        end\n   \
    \ end\n    sort(str_arr)\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe65_49bo.jl:39\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"Eight\", \"Five\", \"Four\", \"\
    One\", \"Three\", \"Two\"] == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe65_49bo.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe65_49bo.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpe65_49bo.jl:42\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"One\", \"Three\", \"Two\"] ==\
    \ [\"Three\", \"Two\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe65_49bo.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe65_49bo.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpe65_49bo.jl:43\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"Eight\", \"Four\", \"Nine\"] ==\
    \ [\"Nine\", \"Eight\", \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe65_49bo.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe65_49bo.jl:38\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe65_49bo.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    result = []\n    sort!(arr)\n\
    \    for i in 1:length(arr)\n        if arr[i] == 1\n            push!(result,\
    \ \"One\")\n        elseif arr[i] == 2\n            push!(result, \"Two\")\n \
    \       elseif arr[i] == 3\n            push!(result, \"Three\")\n        elseif\
    \ arr[i] == 4\n            push!(result, \"Four\")\n        elseif arr[i] == 5\n\
    \            push!(result, \"Five\")\n        elseif arr[i] == 6\n           \
    \ push!(result, \"Six\")\n        elseif arr[i] == 7\n            push!(result,\
    \ \"Seven\")\n        elseif arr[i] == 8\n            push!(result, \"Eight\"\
    )\n        elseif arr[i] == 9\n            push!(result, \"Nine\")\n        end\n\
    \    end\n    return reverse(result)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    word = []\n    l1 = sort(arr[arr.==1])\n\
    \    l2 = sort(arr[arr.==2])\n    l3 = sort(arr[arr.==3])\n    l4 = sort(arr[arr.==4])\n\
    \    l5 = sort(arr[arr.==5])\n    l6 = sort(arr[arr.==6])\n    l7 = sort(arr[arr.==7])\n\
    \    l8 = sort(arr[arr.==8])\n    l9 = sort(arr[arr.==9])\n    for i in eachindex(l1)\n\
    \        push!(word, \"One\")\n    end\n    for i in eachindex(l2)\n        push!(word,\
    \ \"Two\")\n    end\n    for i in eachindex(l3)\n        push!(word, \"Three\"\
    )\n    end\n    for i in eachindex(l4)\n        push!(word, \"Four\")\n    end\n\
    \    for i in eachindex(l5)\n        push!(word, \"Five\")\n    end\n    for i\
    \ in eachindex(l6)\n        push!(word, \"Six\")\n    end\n    for i in eachindex(l7)\n\
    \        push!(word, \"Seven\")\n    end\n    for i in eachindex(l8)\n       \
    \ push!(word, \"Eight\")\n    end\n    for i in eachindex(l9)\n        push!(word,\
    \ \"Nine\")\n    end\n    reverse(word)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    s = sort(arr)\n    r = reverse(s)\n\
    \    d = [\"\",\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"]\n    b = []\n    for i in r\n        if i > 9 || i < 1\n\
    \            continue\n        end\n        push!(b, d[i])\n    end\n    return\
    \ b\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw0683uuz.jl:40\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"Seven\", \"Four\", \"Three\", \"\
    Two\", \"One\", \"One\", \"\", \"\"] == [\"Eight\", \"Five\", \"Four\", \"Three\"\
    , \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpw0683uuz.jl:40 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw0683uuz.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpw0683uuz.jl:42\n  Expression: candidate([1, -1, 55]) == [\"\
    One\"]\n   Evaluated: [\"\"] == [\"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw0683uuz.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw0683uuz.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpw0683uuz.jl:43\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"Two\", \"One\", \"\"] == [\"\
    Three\", \"Two\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw0683uuz.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw0683uuz.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpw0683uuz.jl:44\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"Eight\", \"Seven\", \"Three\"]\
    \ == [\"Nine\", \"Eight\", \"Four\"]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpw0683uuz.jl:44 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/st"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw0683uuz.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \"\"\"\n    For example:\n\
    \      arr = [1, 11, 111, 1111, 11111] \n      return [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\"]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpx3fvd0dr.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpx3fvd0dr.jl:1\n\
    in expression starting at /tmp/tmpx3fvd0dr.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n  if length(arr) == 0\n    return\
    \ []\n  end\n  if length(arr) == 1\n    if arr[1] >= 1 && arr[1] <= 9\n      return\
    \ [get_word(arr[1])]\n    else\n      return []\n    end\n  end\n  \n  remove_idx\
    \ = []\n  for i in 1:length(arr)\n    if arr[i] < 1 || arr[i] > 9\n      push!(remove_idx,\
    \ i)\n    end\n  end\n  for idx in remove_idx\n    deleteat!(arr, idx)\n  end\n\
    \  \n  sort!(arr)\n  reverse!(arr)\n  arr = map(get_word, arr)\n  return arr\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpq38mig68.jl:54\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: get_word\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpq38mig68.jl:46\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq38mig68.jl:54 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq38mig68.jl:53\ntest set:\
    \ Error During Test at /tmp/tmpq38mig68.jl:56\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  BoundsError: attempt to access 2-element\
    \ Vector{Int64} at index [3]\n  Stacktrace:\n   [1] _deleteat!\n     @ ./array.jl:959\
    \ [inlined]\n   [2] deleteat!(a::Vector{Int64}, i::Int64)\n     @ Base ./array.jl:1423\n\
    \   [3] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpq38mig68.jl:41\n  \
    \ [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpq38mig68.jl:56 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpq38mig68.jl:53\ntest set:\
    \ Error During Test at /tmp/tmpq38mig68.jl:57\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ get_word not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpq38mig68.jl:46\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq38mig68.jl:57 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq38mig68.jl:53\ntest set:\
    \ Error During Test at "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq38mig68.jl:51\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \"\"\"\n    This function\
    \ is a helper to the main task.\n    It takes an array of integers and returns\
    \ an array of strings by applying the logic described above.\n    \"\"\"\n   \
    \ arr = filter(x -> (x > 0 && x < 10), arr) # filter numbers that are between\
    \ 1 and 9 inclusive\n    sort!(arr)\n    reverse!(arr)\n    str_arr = map(x ->\
    \ string(x), arr)\n    map(x -> Symbol(x), str_arr)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpqi1_zakp.jl:38\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Symbol to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n    [1] setindex!(A::Vector{String}, x::Symbol, i1::Int64)\n\
    \      @ Base ./array.jl:903\n    [2] _unsafe_copyto!(dest::Vector{String}, doffs::Int64,\
    \ src::Vector{Symbol}, soffs::Int64, n::Int64)\n      @ Base ./array.jl:253\n\
    \    [3] unsafe_copyto!\n      @ ./array.jl:307 [inlined]\n    [4] _copyto_impl!\n\
    \      @ ./array.jl:331 [inlined]\n    [5] copyto!\n      @ ./array.jl:317 [inlined]\n\
    \    [6] copyto!\n      @ ./array.jl:343 [inlined]\n    [7] copyto_axcheck!\n\
    \      @ ./abstractarray.jl:1104 [inlined]\n    [8] Vector{String}(x::Vector{Symbol})\n\
    \      @ Base ./array.jl:563\n    [9] convert\n      @ ./array.jl:554 [inlined]\n\
    \   [10] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmpqi1_zakp.jl:31\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [12] macro expansion\n      @ /tmp/tmpqi1_zakp.jl:38 [inlined]\n\
    \   [13] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [14] top-level scope\n      @ /tmp/tmpqi1_zakp.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpqi1_zakp.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type Symbol to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at /shared/centos7"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqi1_zakp.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    result = []\n    for i in\
    \ arr\n        if i == 1\n            push!(result, \"One\")\n        elseif i\
    \ == 2\n            push!(result, \"Two\")\n        elseif i == 3\n          \
    \  push!(result, \"Three\")\n        elseif i == 4\n            push!(result,\
    \ \"Four\")\n        elseif i == 5\n            push!(result, \"Five\")\n    \
    \    elseif i == 6\n            push!(result, \"Six\")\n        elseif i == 7\n\
    \            push!(result, \"Seven\")\n        elseif i == 8\n            push!(result,\
    \ \"Eight\")\n        elseif i == 9\n            push!(result, \"Nine\")\n   \
    \     end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4yfij_aw.jl:52\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"Two\", \"One\", \"One\", \"Four\"\
    , \"Five\", \"Eight\", \"Two\", \"Three\"] == [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4yfij_aw.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4yfij_aw.jl:51\ntest set: Test\
    \ Failed at /tmp/tmp4yfij_aw.jl:55\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"One\", \"Three\", \"Two\"] ==\
    \ [\"Three\", \"Two\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4yfij_aw.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4yfij_aw.jl:51\ntest set: Test\
    \ Failed at /tmp/tmp4yfij_aw.jl:56\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"Nine\", \"Four\", \"Eight\"] ==\
    \ [\"Nine\", \"Eight\", \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4yfij_aw.jl:56 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4yfij_aw.jl:51\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4yfij_aw.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \"\"\"\n    Given an array\
    \ of integers and two integers (n, m), sort the integers that are between n and\
    \ m inclusive,\n    reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgjc3uuxr.jl:1\nin expression starting at /tmp/tmpgjc3uuxr.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \"\"\"\n    Given an array\
    \ of integers and a function, which returns the length of a number (e.g. number_length(1000)\
    \ == 4),\n    sort the array and return it by the number of digits in descending\
    \ order.\n    If two numbers have the same length, return the smaller one first.\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1osezkrz.jl:1\nin expression starting at /tmp/tmp1osezkrz.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr) == 0\n  \
    \      return []\n    end\n    arr = sort(arr)\n    arr = reverse(arr)\n    vec\
    \ = []\n    for n in arr\n        if n > 0 && n < 10\n            push!(vec, numbers[n])\n\
    \        end\n    end\n    return vec\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptz2nq2mq.jl:41\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: numbers\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmptz2nq2mq.jl:31\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptz2nq2mq.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptz2nq2mq.jl:40\ntest set:\
    \ Error During Test at /tmp/tmptz2nq2mq.jl:43\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: numbers not defined\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmptz2nq2mq.jl:31\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptz2nq2mq.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptz2nq2mq.jl:40\ntest set:\
    \ Error During Test at /tmp/tmptz2nq2mq.jl:44\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ numbers not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n \
    \    @ Main /tmp/tmptz2nq2mq.jl:31\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptz2nq2mq.jl:44 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptz2nq2mq.jl:40\ntest set:\
    \ Error During Test at /tmp/tmptz2nq2mq.jl:45\n  Test threw exception\n  Expression:\
    \ candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n  UndefVarError: numbers\
    \ not defined\n  Stacktrac"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptz2nq2mq.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    v = []\n    for i in arr\n        if i == 1\n          \
    \  push!(v, \"One\")\n        elseif i == 2\n            push!(v, \"Two\")\n \
    \       elseif i == 3\n            push!(v, \"Three\")\n        elseif i == 4\n\
    \            push!(v, \"Four\")\n        elseif i == 5\n            push!(v, \"\
    Five\")\n        elseif i == 6\n            push!(v, \"Six\")\n        elseif\
    \ i == 7\n            push!(v, \"Seven\")\n        elseif i == 8\n           \
    \ push!(v, \"Eight\")\n        elseif i == 9\n            push!(v, \"Nine\")\n\
    \        end\n    end\n    return v\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    isort = sort(arr, by=x->abs(x))\n\
    \    ireverse = reverse(isort)\n    return map(NamedNumber, ireverse)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpi87mvgrv.jl:32\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: NamedNumber\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpi87mvgrv.jl:25\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi87mvgrv.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi87mvgrv.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpi87mvgrv.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  UndefVarError: NamedNumber\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpi87mvgrv.jl:25\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi87mvgrv.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi87mvgrv.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpi87mvgrv.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: NamedNumber not defined\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpi87mvgrv.jl:25\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi87mvgrv.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi87mvgrv.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpi87mvgrv.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ NamedNumber not de"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi87mvgrv.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    if isempty(arr)\n      \
    \  return []\n    end\n    numbers = 1:9\n    names = [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted = sort(arr[(1\
    \ .<= arr) .& (arr .<= 9)])\n    reverse = reversed(sorted)\n    new_arr = []\n\
    \    for i in reverse\n        push!(new_arr, names[i])\n    end\n    return new_arr\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpp1jrt3vg.jl:41\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: reversed\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpp1jrt3vg.jl:29\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp1jrt3vg.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp1jrt3vg.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpp1jrt3vg.jl:43\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: reversed not defined\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpp1jrt3vg.jl:29\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp1jrt3vg.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp1jrt3vg.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpp1jrt3vg.jl:44\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ reversed not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpp1jrt3vg.jl:29\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp1jrt3vg.jl:44 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp1jrt3vg.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpp1jrt3vg.jl:45\n  Test threw exception\n  Expression:\
    \ candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n  UndefVarError: reversed\
    \ not defined\n  Stack"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp1jrt3vg.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    newArr = []\n    for i in\
    \ 1:length(arr)\n        if (arr[i] == 1)\n            push!(newArr, \"One\")\n\
    \        elseif (arr[i] == 2)\n            push!(newArr, \"Two\")\n        elseif\
    \ (arr[i] == 3)\n            push!(newArr, \"Three\")\n        elseif (arr[i]\
    \ == 4)\n            push!(newArr, \"Four\")\n        elseif (arr[i] == 5)\n \
    \           push!(newArr, \"Five\")\n        elseif (arr[i] == 6)\n          \
    \  push!(newArr, \"Six\")\n        elseif (arr[i] == 7)\n            push!(newArr,\
    \ \"Seven\")\n        elseif (arr[i] == 8)\n            push!(newArr, \"Eight\"\
    )\n        elseif (arr[i] == 9)\n            push!(newArr, \"Nine\")\n       \
    \ end\n    end\n    return newArr\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplq6nywli.jl:52\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"Two\", \"One\", \"One\", \"Four\"\
    , \"Five\", \"Eight\", \"Two\", \"Three\"] == [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplq6nywli.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplq6nywli.jl:51\ntest set: Test\
    \ Failed at /tmp/tmplq6nywli.jl:55\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"One\", \"Three\", \"Two\"] ==\
    \ [\"Three\", \"Two\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplq6nywli.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplq6nywli.jl:51\ntest set: Test\
    \ Failed at /tmp/tmplq6nywli.jl:56\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"Nine\", \"Four\", \"Eight\"] ==\
    \ [\"Nine\", \"Eight\", \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplq6nywli.jl:56 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplq6nywli.jl:51\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplq6nywli.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    # sort array \n  \
    \  sort!(arr)\n    \n    # reverse array\n    reverse!(arr)\n    \n    # create\
    \ array of strings with the corresponding value\n    s = String[]\n    for i in\
    \ arr\n        push!(s, by_value(i))\n    end\n    \n    return s\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpq9ydgq1h.jl:43\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: by_value\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpq9ydgq1h.jl:33\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq9ydgq1h.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq9ydgq1h.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpq9ydgq1h.jl:45\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: by_value not defined\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpq9ydgq1h.jl:33\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq9ydgq1h.jl:45 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq9ydgq1h.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpq9ydgq1h.jl:46\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ by_value not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpq9ydgq1h.jl:33\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq9ydgq1h.jl:46 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq9ydgq1h.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpq9ydgq1h.jl:47\n  Test threw exception\n  Expression:\
    \ candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n  UndefVarError: by_value\
    \ not defined\n  Stack"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq9ydgq1h.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    n = length(arr)\n    arr\
    \ = sort(arr)\n    res = []\n    for i in 1:n\n        if arr[i] > 9 || arr[i]\
    \ < 1\n            continue\n        end\n        if arr[i] == 1\n           \
    \ append!(res, \"One\")\n        elseif arr[i] == 2\n            append!(res,\
    \ \"Two\")\n        elseif arr[i] == 3\n            append!(res, \"Three\")\n\
    \        elseif arr[i] == 4\n            append!(res, \"Four\")\n        elseif\
    \ arr[i] == 5\n            append!(res, \"Five\")\n        elseif arr[i] == 6\n\
    \            append!(res, \"Six\")\n        elseif arr[i] == 7\n            append!(res,\
    \ \"Seven\")\n        elseif arr[i] == 8\n            append!(res, \"Eight\")\n\
    \        elseif arr[i] == 9\n            append!(res, \"Nine\")\n        end\n\
    \    end\n    res = reverse(res)\n    return res\nend\nby_length([1, -1 , 55])\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: None
  stderr: "b'ERROR: LoadError: MethodError: Cannot `convert` an object of type Char\
    \ to an object of type String\\nClosest candidates are:\\n  convert(::Type{String},\
    \ !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\\
    n  convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n  convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n  ...\\nStacktrace:\\n  [1] '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxqu0oti3.jl:30\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{String}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpxqu0oti3.jl:24\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxqu0oti3.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxqu0oti3.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpxqu0oti3.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpxqu0oti3.jl:24\n\
    \   [2] macro expansion\n     @ /sha"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxqu0oti3.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr_rev = reverse(sort(arr))\n\
    \    for i in 1:length(arr_rev)\n        if arr_rev[i] == 1\n            arr_rev[i]\
    \ = \"One\"\n        elseif arr_rev[i] == 2\n            arr_rev[i] = \"Two\"\n\
    \        elseif arr_rev[i] == 3\n            arr_rev[i] = \"Three\"\n        elseif\
    \ arr_rev[i] == 4\n            arr_rev[i] = \"Four\"\n        elseif arr_rev[i]\
    \ == 5\n            arr_rev[i] = \"Five\"\n        elseif arr_rev[i] == 6\n  \
    \          arr_rev[i] = \"Six\"\n        elseif arr_rev[i] == 7\n            arr_rev[i]\
    \ = \"Seven\"\n        elseif arr_rev[i] == 8\n            arr_rev[i] = \"Eight\"\
    \n        elseif arr_rev[i] == 9\n            arr_rev[i] = \"Nine\"\n        end\n\
    \    end\n    return arr_rev\nend\nby_length([1, 1, 4, 5, 8, 2, 3])\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: None
  stderr: "b'ERROR: LoadError: MethodError: Cannot `convert` an object of type String\
    \ to an object of type Int64\\nClosest candidates are:\\n  convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\\\
    n  convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\\\
    n  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\\\
    n  ...\\nStacktrace:\\n [1] setindex!('"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    counter = []\n    for i\
    \ in 0:9\n        counter = append!(counter,length(arr[arr.==i]))\n    end\n \
    \   println(counter)\n    return counter\nend\nusing Test\n\n@testset begin\n\n\
    candidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "Any[0, 2, 2, 1, 1, 1, 0, 0, 1, 0]\ntest set: Error During Test at /tmp/tmp04p91orw.jl:35\n\
    \  Test threw exception\n  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) ==\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n  MethodError: Cannot `convert` an object of type Int64 to an object of type\
    \ String\n  Closest candidates are:\n    convert(::Type{String}, !Matched::String)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n    [1] setindex!(A::Vector{String}, x::Int64, i1::Int64)\n\
    \      @ Base ./array.jl:903\n    [2] _unsafe_copyto!(dest::Vector{String}, doffs::Int64,\
    \ src::Vector{Any}, soffs::Int64, n::Int64)\n      @ Base ./array.jl:253\n   \
    \ [3] unsafe_copyto!\n      @ ./array.jl:307 [inlined]\n    [4] _copyto_impl!\n\
    \      @ ./array.jl:331 [inlined]\n    [5] copyto!\n      @ ./array.jl:317 [inlined]\n\
    \    [6] copyto!\n      @ ./array.jl:343 [inlined]\n    [7] copyto_axcheck!\n\
    \      @ ./abstractarray.jl:1104 [inlined]\n    [8] Vector{String}(x::Vector{Any})\n\
    \      @ Base ./array.jl:563\n    [9] convert\n      @ ./array.jl:554 [inlined]\n\
    \   [10] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmp04p91orw.jl:28\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [12] macro expansion\n      @ /tmp/tmp04p91orw.jl:35 [inlined]\n\
    \   [13] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [14] top-level scope\n      @ /tmp/tmp04p91orw.jl:34\nAny[0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0]\ntest set: Error During Test at /tmp/tmp04p91orw.jl:36\n\
    \  Test threw exception\n  Expression: candidate(Vector{Int64}([])) == Vector{String}([])\n\
    \  MethodError: Cannot `convert` an object of type Int64 to an object of type\
    \ String\n  Closest cand"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp04p91orw.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    Dict = Dict(\"One\" => 1, \"Two\" => 2, \"Three\"\
    \ => 3, \"Four\" => 4, \"Five\" => 5, \"Six\" => 6, \"Seven\" => 7, \"Eight\"\
    \ => 8, \"Nine\" => 9)\n    arr2 = []\n    for i in arr\n        if haskey(Dict,i)\n\
    \            push!(arr2,i)\n        end\n    end\n    return arr2\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3_naex3m.jl:40\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: Dict\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp3_naex3m.jl:26\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3_naex3m.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3_naex3m.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp3_naex3m.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  UndefVarError: Dict not\
    \ defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp3_naex3m.jl:26\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3_naex3m.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3_naex3m.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp3_naex3m.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: Dict not defined\n  Stacktrace:\n\
    \   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp3_naex3m.jl:26\n  \
    \ [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3_naex3m.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3_naex3m.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp3_naex3m.jl:43\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ Dict not defined\n  Stacktrace:\n   [1] b"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3_naex3m.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \"\"\"\n    Given an array\
    \ of strings, sort the strings by length, reverse the resulting array, and then\n\
    \    replace each string by its uppercase version.\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyb1a34os.jl:1\nin expression starting at /tmp/tmpyb1a34os.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n  int_to_str = Dict(\"1\" =>\
    \ \"One\",\n                    \"2\" => \"Two\",\n                    \"3\" =>\
    \ \"Three\",\n                    \"4\" => \"Four\",\n                    \"5\"\
    \ => \"Five\",\n                    \"6\" => \"Six\",\n                    \"\
    7\" => \"Seven\",\n                    \"8\" => \"Eight\",\n                 \
    \   \"9\" => \"Nine\")\n  \n  arr_str = []\n  for e in arr\n    push!(arr_str,\
    \ string(e))\n  end\n  \n  reverse(sort(arr_str))\n  \n  out = []\n  for e in\
    \ arr_str\n    if e in keys(int_to_str)\n      push!(out, int_to_str[e])\n   \
    \ end\n  end\n  \n  return out\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplo65a3_n.jl:54\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"Two\", \"One\", \"One\", \"Four\"\
    , \"Five\", \"Eight\", \"Two\", \"Three\"] == [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplo65a3_n.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplo65a3_n.jl:53\ntest set: Test\
    \ Failed at /tmp/tmplo65a3_n.jl:57\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"One\", \"Three\", \"Two\"] ==\
    \ [\"Three\", \"Two\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplo65a3_n.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplo65a3_n.jl:53\ntest set: Test\
    \ Failed at /tmp/tmplo65a3_n.jl:58\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"Nine\", \"Four\", \"Eight\"] ==\
    \ [\"Nine\", \"Eight\", \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplo65a3_n.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplo65a3_n.jl:53\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplo65a3_n.jl:51\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    # filter array to get only\
    \ valid inputs, sort and reverse array\n    sorted_arr = reverse(sort(filter(x\
    \ -> (1 <= x <= 9), arr)))\n    # finally replace each number by its String name\n\
    \    arr_names =  [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\"]\n    [arr_names[i] for i in sorted_arr]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    sorted = sort(arr)\n   \
    \ reversed = reverse(sorted)\n    words = [\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    for i in 1:length(reversed)\n\
    \        if reversed[i] > 9\n            reversed[i] = 0\n        end\n    end\n\
    \    r = []\n    for i in 1:length(reversed)\n        if reversed[i] > 0\n   \
    \         push!(r, words[reversed[i]])\n        end\n    end\n    return r\nend\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    sorted_arr = sort(arr)\n\
    \    reverse_arr = reverse(sorted_arr)\n    final_arr = []\n    for i in reverse_arr\n\
    \        push!(final_arr, string(i))\n    end\n    return final_arr\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppttn8bmp.jl:36\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"8\", \"5\", \"4\", \"3\", \"2\"\
    , \"2\", \"1\", \"1\"] == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\",\
    \ \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppttn8bmp.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppttn8bmp.jl:35\ntest set: Test\
    \ Failed at /tmp/tmppttn8bmp.jl:38\n  Expression: candidate([1, -1, 55]) == [\"\
    One\"]\n   Evaluated: [\"55\", \"1\", \"-1\"] == [\"One\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppttn8bmp.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppttn8bmp.jl:35\ntest set: Test\
    \ Failed at /tmp/tmppttn8bmp.jl:39\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"3\", \"2\", \"1\", \"-1\"] ==\
    \ [\"Three\", \"Two\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppttn8bmp.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppttn8bmp.jl:35\ntest set: Test\
    \ Failed at /tmp/tmppttn8bmp.jl:40\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"9\", \"8\", \"4\"] == [\"Nine\"\
    , \"Eight\", \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppttn8bmp.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/T"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppttn8bmp.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    tosort=[]\n    for i in\
    \ arr\n        if 1<=i<=9\n            push!(tosort,i)\n        end\n    end\n\
    \    sorted=sort(tosort)\n    out=[]\n    if isempty(sorted)\n        return out\n\
    \    end\n    if sorted[1]==1\n        push!(out,\"One\")\n    end\n    if sorted[1]==2\n\
    \        push!(out,\"Two\")\n    end\n    if sorted[1]==3\n        push!(out,\"\
    Three\")\n    end\n    if sorted[1]==4\n        push!(out,\"Four\")\n    end\n\
    \    if sorted[1]==5\n        push!(out,\"Five\")\n    end\n    if sorted[1]==6\n\
    \        push!(out,\"Six\")\n    end\n    if sorted[1]==7\n        push!(out,\"\
    Seven\")\n    end\n    if sorted[1]==8\n        push!(out,\"Eight\")\n    end\n\
    \    if sorted[1]==9\n        push!(out,\"Nine\")\n    end\n    for i in sorted[2:end]\n\
    \        if i==1\n            if out[end]!=\"One\"\n                push!(out,\"\
    One\")\n            end\n        end\n        if i==2\n            if out[end]!=\"\
    Two\"\n                push!(out,\"Two\")\n            end\n        end\n    \
    \    if i==3\n            if out[end]!=\"Three\"\n                push!(out,\"\
    Three\")\n            end\n        end\n        if i==4\n            if out[end]!=\"\
    Four\"\n                push!(out,\"Four\")\n            end\n        end\n  \
    \      if i==5\n            if out[end]!=\"Five\"\n                push!(out,\"\
    Five\")\n            end\n        end\n        if i==6\n            if out[end]!=\"\
    Six\"\n                push!(out,\"Six\")\n            end\n        end\n    \
    \    if i==7\n            if out[end]!=\"Seven\"\n                push!(out,\"\
    Seven\")\n            end\n        end\n        if i==8\n            if out[end]!=\"\
    Eight\"\n\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp84wp60_d.jl:1\nin expression starting at /tmp/tmp84wp60_d.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    sorted_arr = sort(arr)\n\
    \    reverse_arr = reverse(sorted_arr)\n    out = [Strings.capitalize(numbers_names[el])\
    \ for el in reverse_arr]\n    return out\nend\nusing Test\n\n@testset begin\n\n\
    candidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwx48o33s.jl:33\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: Strings\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(el::Int64)\n     @ Main ./none:0\n\
    \   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{Vector{Int64},\
    \ var\"#1#2\"})\n     @ Base ./array.jl:724\n   [4] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpwx48o33s.jl:25\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpwx48o33s.jl:33 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpwx48o33s.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpwx48o33s.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: Strings not defined\n\
    \  Stacktrace:\n   [1] (::var\"#1#2\")(el::Int64)\n     @ Main ./none:0\n   [2]\
    \ iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{Vector{Int64},\
    \ var\"#1#2\"})\n     @ Base ./array.jl:724\n   [4] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpwx48o33s.jl:25\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpwx48o33s.jl:35 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpwx48o33s.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpwx48o33s.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ Strings not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(el::Int64)\n    \
    \ @ Main ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3]\
    \ collect(itr::Base.Generator{Vector{Int64}, var\"#1#2\"})\n     @ Base ./array.jl:724\n\
    \   [4] by_length(arr::Vector"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwx48o33s.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)==0 \n   \
    \     return []\n    end\n    digits=[\"One\",\"Two\",\"Three\",\"Four\",\"Five\"\
    ,\"Six\",\"Seven\",\"Eight\",\"Nine\"]\n    sorted=sort(arr)\n    rev=reverse(sorted)\n\
    \    A=[]\n    for i in rev\n        if 1<=i<=9\n            push!(A,digits[i])\n\
    \        end\n    end\n    return A\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr_sorted = sort(arr)\n\
    \    arr_reversed = reverse(arr_sorted)\n    arr_result = []\n    for x in arr_reversed\n\
    \        if x == 1\n            push!(arr_result, \"One\")\n        elseif x ==\
    \ 2\n            push!(arr_result, \"Two\")\n        elseif x == 3\n         \
    \   push!(arr_result, \"Three\")\n        elseif x == 4\n            push!(arr_result,\
    \ \"Four\")\n        elseif x == 5\n            push!(arr_result, \"Five\")\n\
    \        elseif x == 6\n            push!(arr_result, \"Six\")\n        elseif\
    \ x == 7\n            push!(arr_result, \"Seven\")\n        elseif x == 8\n  \
    \          push!(arr_result, \"Eight\")\n        elseif x == 9\n            push!(arr_result,\
    \ \"Nine\")\n        end\n    end\n    return arr_result\nend\nprintln(by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3]))\nprintln(by_length([]))\nprintln(by_length([1, -1 , 55]))\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: b'["Eight", "Five", "Four", "Three", "Two", "Two", "One", "One"]\n'
  stderr: "b'ERROR: LoadError: MethodError: no method matching by_length(::Vector{Any})\\\
    nClosest candidates are:\\n  by_length(!Matched::Vector{Int64}) at /tmp/tmpoxj4z57r.jl:22\\\
    nStacktrace:\\n [1] top-level scope\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    @assert length(arr)\
    \ > 0 \"array must be not empty\"\n    \n    # sort the array and filter it with\
    \ a \"between\"\n    arr = sort(arr)\n    arr = filter(arr) do x\n        x >=\
    \ 1 && x <= 9\n    end\n    \n    # convert the array to string\n    arr = convert_to_string(arr)\n\
    \    \n    # reverse the array\n    arr = reverse(arr)\n    \n    # return the\
    \ array\n    return arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmppoy14q2h.jl:46\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: convert_to_string\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmppoy14q2h.jl:33\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppoy14q2h.jl:46 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppoy14q2h.jl:45\ntest set:\
    \ Error During Test at /tmp/tmppoy14q2h.jl:47\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  AssertionError: array\
    \ must be not empty\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n   \
    \  @ Main /tmp/tmppoy14q2h.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppoy14q2h.jl:47 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppoy14q2h.jl:45\ntest set:\
    \ Error During Test at /tmp/tmppoy14q2h.jl:48\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: convert_to_string not\
    \ defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmppoy14q2h.jl:33\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppoy14q2h.jl:48 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppoy14q2h.jl:45\ntest set:\
    \ Error During Test at /tmp/tmppoy14q2h.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ conve"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppoy14q2h.jl:43\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n  sort!(arr)\n  reverse!(arr)\n\
    \  for i in 1:length(arr)\n    if arr[i] < 1 || arr[i] > 9\n      arr[i] = 0\n\
    \    end\n  end\n  arr = arr[arr .!= 0]\n  for i in 1:length(arr)\n    if arr[i]\
    \ == 1\n      arr[i] = \"One\"\n    elseif arr[i] == 2\n      arr[i] = \"Two\"\
    \n    elseif arr[i] == 3\n      arr[i] = \"Three\"\n    elseif arr[i] == 4\n \
    \     arr[i] = \"Four\"\n    elseif arr[i] == 5\n      arr[i] = \"Five\"\n   \
    \ elseif arr[i] == 6\n      arr[i] = \"Six\"\n    elseif arr[i] == 7\n      arr[i]\
    \ = \"Seven\"\n    elseif arr[i] == 8\n      arr[i] = \"Eight\"\n    elseif arr[i]\
    \ == 9\n      arr[i] = \"Nine\"\n    end\n  end\n  return arr\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9omrzy07.jl:59\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp9omrzy07.jl:47\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9omrzy07.jl:59 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9omrzy07.jl:58\ntest set:\
    \ Error During Test at /tmp/tmp9omrzy07.jl:61\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp9omrzy07.jl:33\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9omrzy07.jl:56\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    new = Int[]\n    for i in\
    \ arr\n        if (1<=i<=9)\n            push!(new, i)\n        end\n    end\n\
    \    sort!(new)\n    reverse!(new)\n    res = String[]\n    for i in new\n   \
    \     if (i==1)\n            push!(res, \"One\")\n        elseif (i==2)\n    \
    \        push!(res, \"Two\")\n        elseif (i==3)\n            push!(res, \"\
    Three\")\n        elseif (i==4)\n            push!(res, \"Four\")\n        elseif\
    \ (i==5)\n            push!(res, \"Five\")\n        elseif (i==6)\n          \
    \  push!(res, \"Six\")\n        elseif (i==7)\n            push!(res, \"Seven\"\
    )\n        elseif (i==8)\n            push!(res, \"Eight\")\n        elseif (i==9)\n\
    \            push!(res, \"Nine\")\n        end\n    end\n    return res\nend\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    res = [IntToString(x) for\
    \ x in reverse(sort(arr))]\n    return res\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmplmqkc2ih.jl:31\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: IntToString\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(x::Int64)\n     @ Main ./none:0\n\
    \   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{Vector{Int64},\
    \ var\"#1#2\"})\n     @ Base ./array.jl:724\n   [4] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmplmqkc2ih.jl:23\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmplmqkc2ih.jl:31 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmplmqkc2ih.jl:30\ntest set:\
    \ Error During Test at /tmp/tmplmqkc2ih.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: IntToString not defined\n\
    \  Stacktrace:\n   [1] (::var\"#1#2\")(x::Int64)\n     @ Main ./none:0\n   [2]\
    \ iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{Vector{Int64},\
    \ var\"#1#2\"})\n     @ Base ./array.jl:724\n   [4] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmplmqkc2ih.jl:23\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmplmqkc2ih.jl:33 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmplmqkc2ih.jl:30\ntest set:\
    \ Error During Test at /tmp/tmplmqkc2ih.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ IntToString not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(x::Int64)\n \
    \    @ Main ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3]\
    \ collect(itr::Base.Generator{Vector{Int64}, var\"#1#2\"})\n     @ Base ./array.jl:724\n\
    \   [4] by_length(ar"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplmqkc2ih.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    result\
    \ = []\n    for i in arr\n        if i > 0 && i < 10\n            append!(result,\
    \ string(i))\n        end\n    end\n    result = reverse(result)\n    final_arr\
    \ = []\n    for i in result\n        if i == \"1\"\n            append!(final_arr,\
    \ \"One\")\n        elseif i == \"2\"\n            append!(final_arr, \"Two\"\
    )\n        elseif i == \"3\"\n            append!(final_arr, \"Three\")\n    \
    \    elseif i == \"4\"\n            append!(final_arr, \"Four\")\n        elseif\
    \ i == \"5\"\n            append!(final_arr, \"Five\")\n        elseif i == \"\
    6\"\n            append!(final_arr, \"Six\")\n        elseif i == \"7\"\n    \
    \        append!(final_arr, \"Seven\")\n        elseif i == \"8\"\n          \
    \  append!(final_arr, \"Eight\")\n        elseif i == \"9\"\n            append!(final_arr,\
    \ \"Nine\")\n        end\n    end\n    return final_arr\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpeoqmn992.jl:60\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: String[] == [\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeoqmn992.jl:60 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeoqmn992.jl:59\ntest set: Test\
    \ Failed at /tmp/tmpeoqmn992.jl:62\n  Expression: candidate([1, -1, 55]) == [\"\
    One\"]\n   Evaluated: String[] == [\"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeoqmn992.jl:62 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeoqmn992.jl:59\ntest set: Test\
    \ Failed at /tmp/tmpeoqmn992.jl:63\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: String[] == [\"Three\", \"Two\"\
    , \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeoqmn992.jl:63 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeoqmn992.jl:59\ntest set: Test\
    \ Failed at /tmp/tmpeoqmn992.jl:64\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: String[] == [\"Nine\", \"Eight\",\
    \ \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeoqmn992.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeoqmn992.jl:57\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    # Sort the array\n    arr\
    \ = sort(arr)\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprpgkp4mt.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprpgkp4mt.jl:1\n\
    in expression starting at /tmp/tmprpgkp4mt.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    names = [\"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  \
    \  numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    output = Vector{String}()\n    str_arr\
    \ = Vector{String}()\n    number_strings = Vector{String}()\n    for i in arr\n\
    \        push!(str_arr, i)\n    end\n    for i in str_arr\n        if i in numbers\n\
    \            push!(number_strings, i)\n        end\n    end\n    sort!(number_strings)\n\
    \    reverse!(number_strings)\n    for i in number_strings\n        name = names[parse(Int64,\
    \ i)]\n        push!(output, name)\n    end\n    return output\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp0v9k8d2t.jl:49\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Int64 to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] push!(a::Vector{String}, item::Int64)\n     @\
    \ Base ./array.jl:994\n   [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp0v9k8d2t.jl:29\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0v9k8d2t.jl:49 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0v9k8d2t.jl:48\ntest set:\
    \ Error During Test at /tmp/tmp0v9k8d2t.jl:51\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type Int64 to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] push!(a::Vector{String}, item::Int64)\n     @\
    \ Base ./array.jl:994\n   [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp0v9k8d2t.jl:29\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0v9k8d2t.jl:46\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    sorted_arr = sort(arr)\n\
    \    reverted_arr = reverse(sorted_arr)\n    result = [\"\" for i in 1:length(reverted_arr)]\n\
    \    for i in 1:length(reverted_arr)\n        if reverted_arr[i] == 1\n      \
    \      result[i] = \"One\"\n        elseif reverted_arr[i] == 2\n            result[i]\
    \ = \"Two\"\n        elseif reverted_arr[i] == 3\n            result[i] = \"Three\"\
    \n        elseif reverted_arr[i] == 4\n            result[i] = \"Four\"\n    \
    \    elseif reverted_arr[i] == 5\n            result[i] = \"Five\"\n        elseif\
    \ reverted_arr[i] == 6\n            result[i] = \"Six\"\n        elseif reverted_arr[i]\
    \ == 7\n            result[i] = \"Seven\"\n        elseif reverted_arr[i] == 8\n\
    \            result[i] = \"Eight\"\n        elseif reverted_arr[i] == 9\n    \
    \        result[i] = \"Nine\"\n        end\n    end\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1nnfakjp.jl:56\n  Expression: candidate([1,\
    \ -1, 55]) == [\"One\"]\n   Evaluated: [\"\", \"One\", \"\"] == [\"One\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1nnfakjp.jl:56 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1nnfakjp.jl:53\ntest set: Test\
    \ Failed at /tmp/tmp1nnfakjp.jl:57\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"Three\", \"Two\", \"One\", \"\
    \"] == [\"Three\", \"Two\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp1nnfakjp.jl:57 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1nnfakjp.jl:53\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1nnfakjp.jl:51\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n  One = String[]\n  Two = String[]\n\
    \  Three = String[]\n  Four = String[]\n  Five = String[]\n  Six = String[]\n\
    \  Seven = String[]\n  Eight = String[]\n  Nine = String[]\n  \n  for i in arr\n\
    \    if i == 1\n      push!(One, \"One\")\n    elseif i == 2\n      push!(Two,\
    \ \"Two\")\n    elseif i == 3\n      push!(Three, \"Three\")\n    elseif i ==\
    \ 4\n      push!(Four, \"Four\")\n    elseif i == 5\n      push!(Five, \"Five\"\
    )\n    elseif i == 6\n      push!(Six, \"Six\")\n    elseif i == 7\n      push!(Seven,\
    \ \"Seven\")\n    elseif i == 8\n      push!(Eight, \"Eight\")\n    elseif i ==\
    \ 9\n      push!(Nine, \"Nine\")\n    end\n  end\n  return reverse(vcat(One, Two,\
    \ Three, Four, Five, Six, Seven, Eight, Nine))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = arr[1:9] #arr[arr\
    \ .\u2264 9]\n    arr = sort(arr)\n    arr = reverse(arr)\n    for i in eachindex(arr)\n\
    \        if arr[i] == 1\n            arr[i] = \"One\"\n        elseif arr[i] ==\
    \ 2\n            arr[i] = \"Two\"\n        elseif arr[i] == 3\n            arr[i]\
    \ = \"Three\"\n        elseif arr[i] == 4\n            arr[i] = \"Four\"\n   \
    \     elseif arr[i] == 5\n            arr[i] = \"Five\"\n        elseif arr[i]\
    \ == 6\n            arr[i] = \"Six\"\n        elseif arr[i] == 7\n           \
    \ arr[i] = \"Seven\"\n        elseif arr[i] == 8\n            arr[i] = \"Eight\"\
    \n        elseif arr[i] == 9\n            arr[i] = \"Nine\"\n        end\n   \
    \ end\n    return arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6a412fj7.jl:54\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  BoundsError: attempt\
    \ to access 8-element Vector{Int64} at index [1:9]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867\
    \ [inlined]\n   [4] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp6a412fj7.jl:23\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp6a412fj7.jl:54 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp6a412fj7.jl:53\ntest set:\
    \ Error During Test at /tmp/tmp6a412fj7.jl:55\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  BoundsError: attempt to\
    \ access 0-element Vector{Int64} at index [1:9]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867\
    \ [inlined]\n   [4] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp6a412fj7.jl:23\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp6a412fj7.jl:55 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp6a412fj7.jl:53\ntest set:\
    \ Error During Test at /tmp/tmp6a412fj7.jl:56\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [1:9]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n   "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6a412fj7.jl:51\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    # sort the integer in the\
    \ array by size\n    # reverse the sorted array\n    # replace each digit by its\
    \ corresponding name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"\n    \n    if isempty(arr)\n        return\
    \ []\n    end\n    len = length(arr)\n    size_arr = []\n    name_arr = []\n \
    \   names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"]\n    for i = 1:len\n        if arr[i] in [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9]\n            append!(size_arr, arr[i])\n        end\n    end\n \
    \   for i = 1:length(size_arr)\n        push!(name_arr, names[size_arr[i]])\n\
    \    end\n    return reverse(name_arr)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpurre1cai.jl:49\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"Three\", \"Two\", \"Eight\", \"\
    Five\", \"Four\", \"One\", \"One\", \"Two\"] == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpurre1cai.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpurre1cai.jl:48\ntest set: Test\
    \ Failed at /tmp/tmpurre1cai.jl:52\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"Two\", \"Three\", \"One\"] ==\
    \ [\"Three\", \"Two\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpurre1cai.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpurre1cai.jl:48\ntest set: Test\
    \ Failed at /tmp/tmpurre1cai.jl:53\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"Eight\", \"Four\", \"Nine\"] ==\
    \ [\"Nine\", \"Eight\", \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpurre1cai.jl:53 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpurre1cai.jl:48\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpurre1cai.jl:46\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    new_arr = sort(filter(x\
    \ -> isa(x, Int64) && x >= 1 && x <= 9, arr))\n    new_arr = reverse(new_arr)\n\
    \    new_arr = map(x -> switch(x, 1 => \"One\", 2 => \"Two\", 3 => \"Three\",\
    \ 4 => \"Four\", 5 => \"Five\", 6 => \"Six\", 7 => \"Seven\", 8 => \"Eight\",\
    \ 9 => \"Nine\"), new_arr)\n    return new_arr\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9mu2vnp0.jl:33\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: switch\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#2#4\")(x::Int64)\n      @ Main\
    \ /tmp/tmp9mu2vnp0.jl:25\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n\
    \    [3] _collect(c::Vector{Int64}, itr::Base.Generator{Vector{Int64}, var\"#2#4\"\
    }, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n\
    \    [4] collect_similar\n      @ ./array.jl:653 [inlined]\n    [5] map\n    \
    \  @ ./abstractarray.jl:2867 [inlined]\n    [6] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmp9mu2vnp0.jl:25\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp9mu2vnp0.jl:33 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp9mu2vnp0.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp9mu2vnp0.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: switch not defined\n \
    \ Stacktrace:\n    [1] (::var\"#2#4\")(x::Int64)\n      @ Main /tmp/tmp9mu2vnp0.jl:25\n\
    \    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _collect(c::Vector{Int64},\
    \ itr::Base.Generator{Vector{Int64}, var\"#2#4\"}, #unused#::Base.EltypeUnknown,\
    \ isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n    [4] collect_similar\n\
    \      @ ./array.jl:653 [inlined]\n    [5] map\n      @ ./abstractarray.jl:2867\
    \ [inlined]\n    [6] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmp9mu2vnp0.jl:25\n\
    \    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp9mu2vnp0.jl:35 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp9mu2vnp"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9mu2vnp0.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    reverse!(arr)\n\
    \    result = []\n    for i in arr\n        if i == 1\n            push!(result,\
    \ \"One\")\n        elseif i == 2\n            push!(result, \"Two\")\n      \
    \  elseif i == 3\n            push!(result, \"Three\")\n        elseif i == 4\n\
    \            push!(result, \"Four\")\n        elseif i == 5\n            push!(result,\
    \ \"Five\")\n        elseif i == 6\n            push!(result, \"Six\")\n     \
    \   elseif i == 7\n            push!(result, \"Seven\")\n        elseif i == 8\n\
    \            push!(result, \"Eight\")\n        elseif i == 9\n            push!(result,\
    \ \"Nine\")\n        end\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n  # ignore all the strange number\n\
    \  for i in arr\n    if i < 1 || i > 9\n      deleteat!(arr, indexin(arr, i))\n\
    \    end\n  end\n  sort!(arr)\n  reverse!(arr)\n  for i in 1:length(arr)\n   \
    \ if arr[i] == 1\n      arr[i] = \"One\"\n    elseif arr[i] == 2\n      arr[i]\
    \ = \"Two\"\n    elseif arr[i] == 3\n      arr[i] = \"Three\"\n    elseif arr[i]\
    \ == 4\n      arr[i] = \"Four\"\n    elseif arr[i] == 5\n      arr[i] = \"Five\"\
    \n    elseif arr[i] == 6\n      arr[i] = \"Six\"\n    elseif arr[i] == 7\n   \
    \   arr[i] = \"Seven\"\n    elseif arr[i] == 8\n      arr[i] = \"Eight\"\n   \
    \ elseif arr[i] == 9\n      arr[i] = \"Nine\"\n    end\n  end\n  return arr\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp0zm9y4_2.jl:59\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp0zm9y4_2.jl:47\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0zm9y4_2.jl:59 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0zm9y4_2.jl:58\ntest set:\
    \ Error During Test at /tmp/tmp0zm9y4_2.jl:61\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: no method matching indexin(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    indexin(::Any, !Matched::AbstractArray)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2352\n  Stacktrace:\n\
    \   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp0zm9y4_2.jl:26\n  \
    \ [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0zm9y4_2.jl:61 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0zm9y4_2.jl:58\ntest set:\
    \ Error During Test at /tmp/tmp0zm9y4_2.jl:62\n  Test threw exception\n  Expression:\
    \ candidate("
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0zm9y4_2.jl:56\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    sorted_arr = sort(arr)\n\
    \    reverse_arr = reverse(sorted_arr)\n    result = []\n    for num in reverse_arr\n\
    \        if 1 <= num <= 9\n            push!(result, num2str(num))\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_hbvk0zo.jl:38\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: num2str\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp_hbvk0zo.jl:28\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_hbvk0zo.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_hbvk0zo.jl:37\ntest set:\
    \ Error During Test at /tmp/tmp_hbvk0zo.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: num2str not defined\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp_hbvk0zo.jl:28\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_hbvk0zo.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_hbvk0zo.jl:37\ntest set:\
    \ Error During Test at /tmp/tmp_hbvk0zo.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ num2str not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n \
    \    @ Main /tmp/tmp_hbvk0zo.jl:28\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_hbvk0zo.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_hbvk0zo.jl:37\ntest set:\
    \ Error During Test at /tmp/tmp_hbvk0zo.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n  UndefVarError: num2str\
    \ not defined\n  Stacktrac"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_hbvk0zo.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = filter(n -> 1 <= n\
    \ <= 9, arr)\n    sort!(arr)\n    reverse!(arr)\n    return map(str -> [\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ][Int(str)], arr)\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    ######################################################\n\
    \    ################ YOUR CODE HERE ######################\n    ######################################################\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0la742sq.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0la742sq.jl:1\n\
    in expression starting at /tmp/tmp0la742sq.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n  if length(arr) == 0\n    return\
    \ []\n  end\n  if length(arr) == 1 && arr[1] == -1\n    return [\"One\"]\n  end\n\
    \  sorted = sort(arr)\n  reversed = reverse(sorted)\n  result = []\n  for i in\
    \ reversed\n    if i == 1\n      append!(result, \"One\")\n    elseif i == 2\n\
    \      append!(result, \"Two\")\n    elseif i == 3\n      append!(result, \"Three\"\
    )\n    elseif i == 4\n      append!(result, \"Four\")\n    elseif i == 5\n   \
    \   append!(result, \"Five\")\n    elseif i == 6\n      append!(result, \"Six\"\
    )\n    elseif i == 7\n      append!(result, \"Seven\")\n    elseif i == 8\n  \
    \    append!(result, \"Eight\")\n    elseif i == 9\n      append!(result, \"Nine\"\
    )\n    end\n  end\n  return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpi7zd8lu0.jl:60\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n    [1] setindex!(A::Vector{String}, x::Char, i1::Int64)\n\
    \      @ Base ./array.jl:903\n    [2] _unsafe_copyto!(dest::Vector{String}, doffs::Int64,\
    \ src::Vector{Any}, soffs::Int64, n::Int64)\n      @ Base ./array.jl:253\n   \
    \ [3] unsafe_copyto!\n      @ ./array.jl:307 [inlined]\n    [4] _copyto_impl!\n\
    \      @ ./array.jl:331 [inlined]\n    [5] copyto!\n      @ ./array.jl:317 [inlined]\n\
    \    [6] copyto!\n      @ ./array.jl:343 [inlined]\n    [7] copyto_axcheck!\n\
    \      @ ./abstractarray.jl:1104 [inlined]\n    [8] Vector{String}(x::Vector{Any})\n\
    \      @ Base ./array.jl:563\n    [9] convert\n      @ ./array.jl:554 [inlined]\n\
    \   [10] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmpi7zd8lu0.jl:53\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [12] macro expansion\n      @ /tmp/tmpi7zd8lu0.jl:60 [inlined]\n\
    \   [13] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [14] top-level scope\n      @ /tmp/tmpi7zd8lu0.jl:59\ntest set:\
    \ Error During Test at /tmp/tmpi7zd8lu0.jl:62\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type Char to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at /shared/centos7/julia/1.7.3"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi7zd8lu0.jl:57\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    result = []\n    for i in\
    \ [1:9]\n        for j in [1:length(arr)]\n            if arr[j] == i\n      \
    \          push!(result, string(i))\n            end\n        end\n    end\n \
    \   return result\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9akmt8o8.jl:38\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: String[] == [\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9akmt8o8.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9akmt8o8.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp9akmt8o8.jl:40\n  Expression: candidate([1, -1, 55]) == [\"\
    One\"]\n   Evaluated: String[] == [\"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9akmt8o8.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9akmt8o8.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp9akmt8o8.jl:41\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: String[] == [\"Three\", \"Two\"\
    , \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9akmt8o8.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9akmt8o8.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp9akmt8o8.jl:42\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: String[] == [\"Nine\", \"Eight\",\
    \ \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9akmt8o8.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9akmt8o8.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    ordered = sort(arr) \n \
    \   reverse_array = reverse(ordered)\n    m = by(reverse_array,1:end, length)\n\
    \    return [m[2][i] for i in 1:length(m[2])]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1ouq4mbz.jl:25\nin expression\
    \ starting at /tmp/tmp1ouq4mbz.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr_strings = []\n    arr_num\
    \ = []\n    arr_int = []\n    arr_sorted = []\n    arr_sorted_str = []\n    #arr\
    \ = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    for i in arr\n        if i >= 1 && i <= 9\n\
    \            push!(arr_num,i)\n        end\n    end\n    for i in arr_num\n  \
    \      push!(arr_strings,string(i))\n    end\n    arr_sorted = sort(arr_num)\n\
    \    arr_sorted = reverse(arr_sorted)\n    for i in arr_sorted\n        push!(arr_sorted_str,string(i))\n\
    \    end\n    arr_int = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"]\n    for i in 1:length(arr_sorted_str)\n   \
    \     if arr_sorted_str[i] == \"1\"\n            arr_sorted_str[i] = arr_int[1]\n\
    \        elseif arr_sorted_str[i] == \"2\"\n            arr_sorted_str[i] = arr_int[2]\n\
    \        elseif arr_sorted_str[i] == \"3\"\n            arr_sorted_str[i] = arr_int[3]\n\
    \        elseif arr_sorted_str[i] == \"4\"\n            arr_sorted_str[i] = arr_int[4]\n\
    \        elseif arr_sorted_str[i] == \"5\"\n            arr_sorted_str[i] = arr_int[5]\n\
    \        elseif arr_sorted_str[i] == \"6\"\n            arr_sorted_str[i] = arr_int[6]\n\
    \        elseif arr_sorted_str[i] == \"7\"\n            arr_sorted_str[i] = arr_int[7]\n\
    \        elseif arr_sorted_str[i] == \"8\"\n            arr_sorted_str[i] = arr_int[8]\n\
    \        elseif arr_sorted_\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzngl374r.jl:1\nin expression starting at /tmp/tmpzngl374r.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    wordArr = []\n    for i in arr\n        if i == 1\n    \
    \        push!(wordArr, \"One\")\n        elseif i == 2\n            push!(wordArr,\
    \ \"Two\")\n        elseif i == 3\n            push!(wordArr, \"Three\")\n   \
    \     elseif i == 4\n            push!(wordArr, \"Four\")\n        elseif i ==\
    \ 5\n            push!(wordArr, \"Five\")\n        elseif i == 6\n           \
    \ push!(wordArr, \"Six\")\n        elseif i == 7\n            push!(wordArr, \"\
    Seven\")\n        elseif i == 8\n            push!(wordArr, \"Eight\")\n     \
    \   elseif i == 9\n            push!(wordArr, \"Nine\")\n        end\n    end\n\
    \    return wordArr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \"\"\"\n    Given an array\
    \ of strings, sort the strings in descending order by length and return this\n\
    \    new array of strings.\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz_sf_p4c.jl:1\nin expression starting at /tmp/tmpz_sf_p4c.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    # removes numbers\
    \ smaller than 1 and greater than 9\n    arr = filter(x -> x >= 1 && x <= 9, arr)\n\
    \    \n    # reverse the array\n    arr = reverse(sort(arr))\n    \n    # swap\
    \ the numbers with the corresponding string\n    arr = map(x -> number_str[x],\
    \ arr)\n    \n    return arr\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp57ib27vt.jl:40\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: number_str\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#2#4\")(x::Int64)\n      @ Main\
    \ /tmp/tmp57ib27vt.jl:31\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n\
    \    [3] _collect(c::Vector{Int64}, itr::Base.Generator{Vector{Int64}, var\"#2#4\"\
    }, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n\
    \    [4] collect_similar\n      @ ./array.jl:653 [inlined]\n    [5] map\n    \
    \  @ ./abstractarray.jl:2867 [inlined]\n    [6] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmp57ib27vt.jl:31\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp57ib27vt.jl:40 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp57ib27vt.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp57ib27vt.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: number_str not defined\n\
    \  Stacktrace:\n    [1] (::var\"#2#4\")(x::Int64)\n      @ Main /tmp/tmp57ib27vt.jl:31\n\
    \    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _collect(c::Vector{Int64},\
    \ itr::Base.Generator{Vector{Int64}, var\"#2#4\"}, #unused#::Base.EltypeUnknown,\
    \ isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n    [4] collect_similar\n\
    \      @ ./array.jl:653 [inlined]\n    [5] map\n      @ ./abstractarray.jl:2867\
    \ [inlined]\n    [6] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmp57ib27vt.jl:31\n\
    \    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp57ib27vt.jl:42 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tm"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp57ib27vt.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    _sorted = sort(arr)\n  \
    \  if (_sorted == Int64[])\n        return []\n    end\n    _sorted = _sorted[_sorted\
    \ .> 0]\n    _sorted = _sorted[_sorted .< 10]\n    _result = _sorted[end:-1:1]\n\
    \    arr = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"]\n    return arr[_result .- 1]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmprv53m5h_.jl:38\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  BoundsError: attempt\
    \ to access 9-element Vector{String} at index [[7, 4, 3, 2, 1, 1, 0, 0]]\n  Stacktrace:\n\
    \   [1] throw_boundserror(A::Vector{String}, I::Tuple{Vector{Int64}})\n     @\
    \ Base ./abstractarray.jl:691\n   [2] checkbounds\n     @ ./abstractarray.jl:656\
    \ [inlined]\n   [3] _getindex\n     @ ./multidimensional.jl:838 [inlined]\n  \
    \ [4] getindex\n     @ ./abstractarray.jl:1218 [inlined]\n   [5] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmprv53m5h_.jl:31\n   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmprv53m5h_.jl:38 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmprv53m5h_.jl:37\ntest set:\
    \ Error During Test at /tmp/tmprv53m5h_.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  BoundsError: attempt to access 9-element\
    \ Vector{String} at index [[0]]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{String},\
    \ I::Tuple{Vector{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] _getindex\n     @ ./multidimensional.jl:838\
    \ [inlined]\n   [4] getindex\n     @ ./abstractarray.jl:1218 [inlined]\n   [5]\
    \ by_length(arr::Vector{Int64})\n     @ Main /tmp/tmprv53m5h_.jl:31\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmprv53m5h_.jl:40 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmprv53m5h_.jl:37\ntest set:\
    \ Error During Test at /tmp/tmprv53m5h_.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprv53m5h_.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr_sort = sort(arr)\n \
    \   arr_rev = reverse(arr_sort)\n    result = []\n    for i in arr_rev\n     \
    \   if i == 1\n            append!(result, \"One\")\n        elseif i == 2\n \
    \           append!(result, \"Two\")\n        elseif i == 3\n            append!(result,\
    \ \"Three\")\n        elseif i == 4\n            append!(result, \"Four\")\n \
    \       elseif i == 5\n            append!(result, \"Five\")\n        elseif i\
    \ == 6\n            append!(result, \"Six\")\n        elseif i == 7\n        \
    \    append!(result, \"Seven\")\n        elseif i == 8\n            append!(result,\
    \ \"Eight\")\n        elseif i == 9\n            append!(result, \"Nine\")\n \
    \       end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4jl7wy7f.jl:54\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n    [1] setindex!(A::Vector{String}, x::Char, i1::Int64)\n\
    \      @ Base ./array.jl:903\n    [2] _unsafe_copyto!(dest::Vector{String}, doffs::Int64,\
    \ src::Vector{Any}, soffs::Int64, n::Int64)\n      @ Base ./array.jl:253\n   \
    \ [3] unsafe_copyto!\n      @ ./array.jl:307 [inlined]\n    [4] _copyto_impl!\n\
    \      @ ./array.jl:331 [inlined]\n    [5] copyto!\n      @ ./array.jl:317 [inlined]\n\
    \    [6] copyto!\n      @ ./array.jl:343 [inlined]\n    [7] copyto_axcheck!\n\
    \      @ ./abstractarray.jl:1104 [inlined]\n    [8] Vector{String}(x::Vector{Any})\n\
    \      @ Base ./array.jl:563\n    [9] convert\n      @ ./array.jl:554 [inlined]\n\
    \   [10] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmp4jl7wy7f.jl:47\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [12] macro expansion\n      @ /tmp/tmp4jl7wy7f.jl:54 [inlined]\n\
    \   [13] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [14] top-level scope\n      @ /tmp/tmp4jl7wy7f.jl:53\ntest set:\
    \ Error During Test at /tmp/tmp4jl7wy7f.jl:56\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type Char to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at /shared/centos7/julia/1.7.3"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4jl7wy7f.jl:51\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    string_arr = zeros(String,\
    \ length(arr))\n    for i in 1:length(arr)\n        if arr[i] == 1\n         \
    \   string_arr[i] = \"One\"\n        elseif arr[i] == 2\n            string_arr[i]\
    \ = \"Two\"\n        elseif arr[i] == 3\n            string_arr[i] = \"Three\"\
    \n        elseif arr[i] == 4\n            string_arr[i] = \"Four\"\n        elseif\
    \ arr[i] == 5\n            string_arr[i] = \"Five\"\n        elseif arr[i] ==\
    \ 6\n            string_arr[i] = \"Six\"\n        elseif arr[i] == 7\n       \
    \     string_arr[i] = \"Seven\"\n        elseif arr[i] == 8\n            string_arr[i]\
    \ = \"Eight\"\n        elseif arr[i] == 9\n            string_arr[i] = \"Nine\"\
    \n        end\n    end\n    return string_arr\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5q5m5maa.jl:52\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching zero(::Type{String})\n  Closest candidates are:\n    zero(!Matched::Union{Type{P},\
    \ P}) where P<:Dates.Period at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Dates/src/periods.jl:53\n\
    \    zero(!Matched::T) where T<:Dates.TimeType at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Dates/src/types.jl:450\n\
    \    zero(!Matched::LinearAlgebra.UniformScaling{T}) where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:136\n\
    \    ...\n  Stacktrace:\n   [1] zeros(#unused#::Type{String}, dims::Tuple{Int64})\n\
    \     @ Base ./array.jl:526\n   [2] zeros(#unused#::Type{String}, dims::Int64)\n\
    \     @ Base ./array.jl:521\n   [3] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp5q5m5maa.jl:23\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp5q5m5maa.jl:52 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp5q5m5maa.jl:51\ntest set:\
    \ Error During Test at /tmp/tmp5q5m5maa.jl:53\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: no method\
    \ matching zero(::Type{String})\n  Closest candidates are:\n    zero(!Matched::Union{Type{P},\
    \ P}) where P<:Dates.Period at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Dates/src/periods.jl:53\n\
    \    zero(!Matched::T) where T<:Dates.TimeType at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Dates/src/types.jl:450\n\
    \    zero(!Matched::LinearAlgebra.UniformScaling{T}) where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:136\n\
    \    ...\n  Stacktrace:\n   [1] zeros(#unused#::Type{String}, dims::Tuple{Int64})\n\
    \     @ Base ./array.jl:526\n   [2] zero"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5q5m5maa.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    reverse!(arr)\n\
    \    ret = []\n    for x in arr\n        if x == 1\n            push!(ret, \"\
    One\")\n        elseif x == 2\n            push!(ret, \"Two\")\n        elseif\
    \ x == 3\n            push!(ret, \"Three\")\n        elseif x == 4\n         \
    \   push!(ret, \"Four\")\n        elseif x == 5\n            push!(ret, \"Five\"\
    )\n        elseif x == 6\n            push!(ret, \"Six\")\n        elseif x ==\
    \ 7\n            push!(ret, \"Seven\")\n        elseif x == 8\n            push!(ret,\
    \ \"Eight\")\n        elseif x == 9\n            push!(ret, \"Nine\")\n      \
    \  end\n    end\n    return ret\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr) == 0\n  \
    \      return []\n    end\n    if length(arr) == 1\n        if arr[1] == 1\n \
    \           return [\"One\"]\n        elseif arr[1] == 2\n            return [\"\
    Two\"]\n        elseif arr[1] == 3\n            return [\"Three\"]\n        elseif\
    \ arr[1] == 4\n            return [\"Four\"]\n        elseif arr[1] == 5\n   \
    \         return [\"Five\"]\n        elseif arr[1] == 6\n            return [\"\
    Six\"]\n        elseif arr[1] == 7\n            return [\"Seven\"]\n        elseif\
    \ arr[1] == 8\n            return [\"Eight\"]\n        elseif arr[1] == 9\n  \
    \          return [\"Nine\"]\n        else\n            return []\n        end\n\
    \    end\n    ans = []\n    sort!(arr)\n    for i in arr\n        if i == 1\n\
    \            push!(ans, \"One\")\n        elseif i == 2\n            push!(ans,\
    \ \"Two\")\n        elseif i == 3\n            push!(ans, \"Three\")\n       \
    \ elseif i == 4\n            push!(ans, \"Four\")\n        elseif i == 5\n   \
    \         push!(ans, \"Five\")\n        elseif i == 6\n            push!(ans,\
    \ \"Six\")\n        elseif i == 7\n            push!(ans, \"Seven\")\n       \
    \ elseif i == 8\n            push!(ans, \"Eight\")\n        elseif i == 9\n  \
    \          push!(ans, \"Nine\")\n        end\n    end\n    reverse!(ans)\n   \
    \ return ans\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t\
    @test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    if isempty(arr) return []\
    \ end\n    s = [i for i in arr if i > 0 && i < 10]\n    s = sort(s)\n    s = reverse(s)\n\
    \    word_dict = Dict{Int64, String}(1 => \"One\", 2 => \"Two\", 3 => \"Three\"\
    , 4 => \"Four\", 5 => \"Five\",\n            6 => \"Six\", 7 => \"Seven\", 8 =>\
    \ \"Eight\", 9 => \"Nine\")\n    return [word_dict[i] for i in s]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    sorted = sort(arr)\n   \
    \ reversed = reverse(sorted)\n    numbers = convert(reversed)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbheaadvq.jl:32\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching convert(::Vector{Int64})\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpbheaadvq.jl:25\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbheaadvq.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbheaadvq.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpbheaadvq.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: no method\
    \ matching convert(::Vector{Int64})\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpbheaadvq.jl:25\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbheaadvq.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbheaadvq.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpbheaadvq.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: no method matching convert(::Vector{Int64})\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpbheaadvq.jl:25\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbheaadvq.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbheaadvq.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpbheaadvq.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Thr"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbheaadvq.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    for i in 1:length(arr)\n\
    \        if (arr[i] < 1 || arr[i] > 9)\n            arr[i] = 0\n        end\n\
    \    end\n    arr = sort(arr)\n    arr = reverse(arr)\n    string_arr = []\n \
    \   for i in 1:length(arr)\n        if (arr[i] == 1)\n            push!(string_arr,\
    \ \"One\")\n        elseif (arr[i] == 2)\n            push!(string_arr, \"Two\"\
    )\n        elseif (arr[i] == 3)\n            push!(string_arr, \"Three\")\n  \
    \      elseif (arr[i] == 4)\n            push!(string_arr, \"Four\")\n       \
    \ elseif (arr[i] == 5)\n            push!(string_arr, \"Five\")\n        elseif\
    \ (arr[i] == 6)\n            push!(string_arr, \"Six\")\n        elseif (arr[i]\
    \ == 7)\n            push!(string_arr, \"Seven\")\n        elseif (arr[i] == 8)\n\
    \            push!(string_arr, \"Eight\")\n        elseif (arr[i] == 9)\n    \
    \        push!(string_arr, \"Nine\")\n        end\n    end\n    return string_arr\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    # ignore strange numbers\
    \ and negative numbers\n    digits = [i for i in arr if (i > 0 && i < 10)]\n \
    \   \n    # sort array\n    digits = sort(digits)\n    \n    # reverse array\n\
    \    digits = reverse(digits)\n    \n    # convert each digit to string\n    to_str\
    \ = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"]\n    digits = [to_str[i-1] for i in digits]\n    \n    return digits\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpk1xpdp1w.jl:44\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  BoundsError: attempt\
    \ to access 9-element Vector{String} at index [0]\n  Stacktrace:\n    [1] getindex\n\
    \      @ ./array.jl:861 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n  \
    \  [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect_to!\n   \
    \   @ ./array.jl:782 [inlined]\n    [5] collect_to_with_first!\n      @ ./array.jl:760\
    \ [inlined]\n    [6] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Vector{String}}})\n\
    \      @ Base ./array.jl:734\n    [7] by_length(arr::Vector{Int64})\n      @ Main\
    \ /tmp/tmpk1xpdp1w.jl:35\n    [8] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmpk1xpdp1w.jl:44 [inlined]\n\
    \   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpk1xpdp1w.jl:43\ntest set:\
    \ Error During Test at /tmp/tmpk1xpdp1w.jl:46\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  BoundsError: attempt to access 9-element\
    \ Vector{String} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] #2\n     @ ./none:0 [inlined]\n   [3] iterate\n     @ ./generator.jl:47\
    \ [inlined]\n   [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Vector{String}}})\n\
    \     @ Base ./array.jl:724\n   [5] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpk1xpdp1w.jl:35\n   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpk1xpdp1w.jl:46 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpk1xpdp1w.jl:43\ntest set:\
    \ Error During Test at /tmp/tmpk1xpdp1w.jl:47\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) ="
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk1xpdp1w.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    sorted = sort(arr) \n  \
    \  names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"]\n    for i in 1:length(sorted)\n        if sorted[i] >\
    \ 9\n            sorted[i] = names[sorted[i]]\n        end\n    end\n    names\n\
    end\narr = [2, 1, 1, 4, 5, 8, 2, 3]\nby_length(arr)\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpeqwnv6o8.jl:39\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"] == [\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeqwnv6o8.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeqwnv6o8.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpeqwnv6o8.jl:40\n  Expression: candidate(Vector{Int64}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeqwnv6o8.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeqwnv6o8.jl:38\ntest set: Error\
    \ During Test at /tmp/tmpeqwnv6o8.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  BoundsError: attempt to access 9-element\
    \ Vector{String} at index [55]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpeqwnv6o8.jl:27\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpeqwnv6o8.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpeqwnv6o8.jl:38\ntest set:\
    \ Test Failed at /tmp/tmpeqwnv6o8.jl:42\n  Expression: candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\","
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeqwnv6o8.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \"\"\" The sorting of number\
    \ by length.\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0_pkv37k.jl:1\nin expression starting at /tmp/tmp0_pkv37k.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    n = length(arr)\n    for\
    \ i in 1:n\n        if arr[i] > 9 \n            continue\n        end\n      \
    \  for j in i+1:n\n            if arr[j] < arr[i]\n                arr[i], arr[j]\
    \ = arr[j], arr[i]\n            end\n        end\n    end\n    rev = reverse(arr)\n\
    \    ans = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"]\n    nums = []\n    for i in 1:length(rev)\n        nums\
    \ = vcat(nums, ans[rev[i]])\n    end\n    return nums\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmph_new7uw.jl:49\n  Test threw exception\n\
    \  Expression: candidate([1, -1, 55]) == [\"One\"]\n  BoundsError: attempt to\
    \ access 9-element Vector{String} at index [55]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] by_length(arr::Vector{Int64})\n     @\
    \ Main /tmp/tmph_new7uw.jl:38\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph_new7uw.jl:49 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph_new7uw.jl:46\ntest set:\
    \ Error During Test at /tmp/tmph_new7uw.jl:50\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  BoundsError: attempt\
    \ to access 9-element Vector{String} at index [-1]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] by_length(arr::Vector{Int64})\n     @\
    \ Main /tmp/tmph_new7uw.jl:38\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph_new7uw.jl:50 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph_new7uw.jl:46\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph_new7uw.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \"\"\" Given an array of\
    \ strings, sort the strings by length,\n    and then reverse the resulting array.\n\
    \    \n    For example:\n      arr = [\"c\", \"b\", \"cat\", \"bat\", \"a\"]\n\
    \            -> sort arr by length -> [\"a\", \"b\", \"c\", \"bat\", \"cat\"]\n\
    \            -> reverse arr -> [\"cat\", \"bat\", \"c\", \"b\", \"a\"]\n     \
    \ return [\"cat\", \"bat\", \"c\", \"b\", \"a\"]\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphiavle66.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphiavle66.jl:1\n\
    in expression starting at /tmp/tmphiavle66.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    if isempty(arr)\n      \
    \  return []\n    end\n    arr = filter(x -> x in 1:9, arr)\n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    out = map(x -> dic[x], arr)\n    return out\nend\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpv9i5wk0z.jl:37\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: dic not\
    \ defined\n  Stacktrace:\n    [1] (::var\"#2#4\")(x::Int64)\n      @ Main /tmp/tmpv9i5wk0z.jl:29\n\
    \    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _collect(c::Vector{Int64},\
    \ itr::Base.Generator{Vector{Int64}, var\"#2#4\"}, #unused#::Base.EltypeUnknown,\
    \ isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n    [4] collect_similar\n\
    \      @ ./array.jl:653 [inlined]\n    [5] map\n      @ ./abstractarray.jl:2867\
    \ [inlined]\n    [6] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmpv9i5wk0z.jl:29\n\
    \    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpv9i5wk0z.jl:37 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpv9i5wk0z.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpv9i5wk0z.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: dic not defined\n  Stacktrace:\n\
    \    [1] (::var\"#2#4\")(x::Int64)\n      @ Main /tmp/tmpv9i5wk0z.jl:29\n    [2]\
    \ iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _collect(c::Vector{Int64},\
    \ itr::Base.Generator{Vector{Int64}, var\"#2#4\"}, #unused#::Base.EltypeUnknown,\
    \ isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n    [4] collect_similar\n\
    \      @ ./array.jl:653 [inlined]\n    [5] map\n      @ ./abstractarray.jl:2867\
    \ [inlined]\n    [6] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmpv9i5wk0z.jl:29\n\
    \    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpv9i5wk0z.jl:39 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpv9i5wk0z.jl:3"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv9i5wk0z.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    # Sort and reverse the integer\
    \ array\n    sort!(arr)\n    reverse!(arr)\n    \n    # Create the vector of strings\n\
    \    str = [\"\"]\n    for i in arr\n        if i > 0 && i < 10\n            if\
    \ i == 1\n                push!(str, \"One\")\n            elseif i == 2\n   \
    \             push!(str, \"Two\")\n            elseif i == 3\n               \
    \ push!(str, \"Three\")\n            elseif i == 4\n                push!(str,\
    \ \"Four\")\n            elseif i == 5\n                push!(str, \"Five\")\n\
    \            elseif i == 6\n                push!(str, \"Six\")\n            elseif\
    \ i == 7\n                push!(str, \"Seven\")\n            elseif i == 8\n \
    \               push!(str, \"Eight\")\n            elseif i == 9\n           \
    \     push!(str, \"Nine\")\n            end\n        end\n    end\n    str = str[2:end]\n\
    \    return str\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    out = []\n    for i = 1:length(arr)\n        if arr[i] ==\
    \ 1\n            push!(out, \"One\")\n        elseif arr[i] == 2\n           \
    \ push!(out, \"Two\")\n        elseif arr[i] == 3\n            push!(out, \"Three\"\
    )\n        elseif arr[i] == 4\n            push!(out, \"Four\")\n        elseif\
    \ arr[i] == 5\n            push!(out, \"Five\")\n        elseif arr[i] == 6\n\
    \            push!(out, \"Six\")\n        elseif arr[i] == 7\n            push!(out,\
    \ \"Seven\")\n        elseif arr[i] == 8\n            push!(out, \"Eight\")\n\
    \        elseif arr[i] == 9\n            push!(out, \"Nine\")\n        end\n \
    \   end\n    return out\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    output = []\n    for n in\
    \ sort(arr)\n        if n == 1\n            push!(output, \"One\")\n        elseif\
    \ n == 2\n            push!(output, \"Two\")\n        elseif n == 3\n        \
    \    push!(output, \"Three\")\n        elseif n == 4\n            push!(output,\
    \ \"Four\")\n        elseif n == 5\n            push!(output, \"Five\")\n    \
    \    elseif n == 6\n            push!(output, \"Six\")\n        elseif n == 7\n\
    \            push!(output, \"Seven\")\n        elseif n == 8\n            push!(output,\
    \ \"Eight\")\n        elseif n == 9\n            push!(output, \"Nine\")\n   \
    \     end\n    end\n    output = reverse(output)\n    return output\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr) == 0\n  \
    \      return []\n    end\n    if length(arr) == 1 && arr[1] <= 9 && arr[1] >=\
    \ 1\n        return [NAME[arr[1]]]\n    end\n    sort!(arr)\n    result = []\n\
    \    i = 1\n    for num in reverse(arr)\n        if num <= 9 && num >= 1\n   \
    \         push!(result, NAME[num])\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1aj2cn6y.jl:44\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: NAME\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp1aj2cn6y.jl:34\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1aj2cn6y.jl:44 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1aj2cn6y.jl:43\ntest set:\
    \ Error During Test at /tmp/tmp1aj2cn6y.jl:46\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: NAME not defined\n  Stacktrace:\n\
    \   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp1aj2cn6y.jl:34\n  \
    \ [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1aj2cn6y.jl:46 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1aj2cn6y.jl:43\ntest set:\
    \ Error During Test at /tmp/tmp1aj2cn6y.jl:47\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ NAME not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n    \
    \ @ Main /tmp/tmp1aj2cn6y.jl:34\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1aj2cn6y.jl:47 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1aj2cn6y.jl:43\ntest set:\
    \ Error During Test at /tmp/tmp1aj2cn6y.jl:48\n  Test threw exception\n  Expression:\
    \ candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n  UndefVarError: NAME\
    \ not defined\n  Stacktrace:\n   [1] by"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1aj2cn6y.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    # Sort the array\n    arr\
    \ = sort(arr)\n    # Reverse the sorted array\n    arr = reverse(arr)\n    # Create\
    \ an array of numbers from 1 to 9\n    arr_numbers = [i for i in 1:9]\n    # Create\
    \ an array of words for numbers from 1 to 9\n    arr_words = [\"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  \
    \  # Create an empty array to store the output\n    arr_output = []\n    # Loop\
    \ over the sorted array\n    for i in arr\n        # Find the index of the i in\
    \ the array of numbers\n        j = findfirst(x -> x == i, arr_numbers)\n    \
    \    # If the index j is not an empty array\n        if j != []\n            #\
    \ Push the corresponding word to the output array\n            push!(arr_output,\
    \ arr_words[j])\n        end\n    end\n    # Return the output array\n    return\
    \ arr_output\nend\n \n@testset \"Empty array\" begin\n    @test by_length([])\
    \ == []\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @testset not defined\nin expression starting\
    \ at /tmp/tmpf259grae.jl:47\nin expression starting at /tmp/tmpf259grae.jl:47\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    (x::Int64)->string(x)\n\
    \    return [by_length(x) for x in arr]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpijlx_9lz.jl:31\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching by_length(::Int64)\n  Closest candidates are:\n    by_length(!Matched::Vector{Int64})\
    \ at /tmp/tmpijlx_9lz.jl:22\n  Stacktrace:\n   [1] (::var\"#2#4\")(x::Int64)\n\
    \     @ Main ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n  \
    \ [3] collect\n     @ ./array.jl:724 [inlined]\n   [4] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpijlx_9lz.jl:24\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpijlx_9lz.jl:31 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpijlx_9lz.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpijlx_9lz.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: no method matching by_length(::Int64)\n\
    \  Closest candidates are:\n    by_length(!Matched::Vector{Int64}) at /tmp/tmpijlx_9lz.jl:22\n\
    \  Stacktrace:\n   [1] (::var\"#2#4\")(x::Int64)\n     @ Main ./none:0\n   [2]\
    \ iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect\n     @ ./array.jl:724\
    \ [inlined]\n   [4] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpijlx_9lz.jl:24\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpijlx_9lz.jl:33 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpijlx_9lz.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpijlx_9lz.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  MethodError: no\
    \ method matching by_length(::Int64)\n  Closest candidates are:\n    by_length(!Matched::Vector{Int64})\
    \ at /tmp/tmpijlx_9lz.jl:22"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpijlx_9lz.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    if isempty(arr)\n      \
    \  return []\n    end\n    new_arr = reverse(sort(filter(x -> x>=1 && x<=9, arr)))\n\
    \    name_dict = Dict(\"1\" => \"One\", \"2\" => \"Two\", \"3\" => \"Three\",\
    \ \"4\" => \"Four\", \"5\" => \"Five\", \"6\" => \"Six\", \"7\" => \"Seven\",\
    \ \"8\" => \"Eight\", \"9\" => \"Nine\")\n    names = []\n    for i in new_arr\n\
    \        push!(names, name_dict[string(i)])\n    end\n    return names\nend\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    arr = filter(x -> x in 1:9, arr)\n    for i in 1:length(arr)\n\
    \        if arr[i] == 1\n            arr[i] = \"One\"\n        elseif arr[i] ==\
    \ 2\n            arr[i] = \"Two\"\n        elseif arr[i] == 3\n            arr[i]\
    \ = \"Three\"\n        elseif arr[i] == 4\n            arr[i] = \"Four\"\n   \
    \     elseif arr[i] == 5\n            arr[i] = \"Five\"\n        elseif arr[i]\
    \ == 6\n            arr[i] = \"Six\"\n        elseif arr[i] == 7\n           \
    \ arr[i] = \"Seven\"\n        elseif arr[i] == 8\n            arr[i] = \"Eight\"\
    \n        elseif arr[i] == 9\n            arr[i] = \"Nine\"\n        end\n   \
    \ end\n    return arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1l_7hyqw.jl:55\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp1l_7hyqw.jl:43\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp1l_7hyqw.jl:55 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp1l_7hyqw.jl:54\ntest set:\
    \ Error During Test at /tmp/tmp1l_7hyqw.jl:57\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp1l_7hyqw.jl:29\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1l_7hyqw.jl:52\n"
  exit_code: 1
  status: SyntaxError
