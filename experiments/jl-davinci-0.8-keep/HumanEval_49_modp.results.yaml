name: HumanEval_49_modp
language: jl
results:
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    b = 1\n    for i = 1:n\n        b = (b*2) % p\n    end\n\
    \    return b\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    n %= p\n    result = 1\n    while n > 0\n        if n\
    \ % 2 == 1\n            result = (result * x) % p\n        x = (x * x) % p\n \
    \       n >>= 1\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpb9lwirg2.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpb9lwirg2.jl:1\n\
    in expression starting at /tmp/tmpb9lwirg2.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    a = 1\n    b = 2\n    for i in 1:n\n        a = mod(a*b,\
    \ p)\n    end\n    return a\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t\
    @test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    elseif n == 1\n    \
    \    return 2\n    elseif n == 2\n        return 4\n    elseif n == 3\n      \
    \  return 8\n    elseif n == 4\n        return 16\n    elseif n == 5\n       \
    \ return 32\n    elseif n == 6\n        return 64\n    elseif n == 7\n       \
    \ return 128\n    elseif n == 8\n        return 256\n    elseif n == 9\n     \
    \   return 512\n    elseif n == 10\n        return 1024\n    elseif n == 11\n\
    \        return 2048\n    elseif n == 12\n        return 4096\n    elseif n ==\
    \ 13\n        return 8192\n    elseif n == 14\n        return 16384\n    elseif\
    \ n == 15\n        return 32768\n    elseif n == 16\n        return 65536\n  \
    \  elseif n == 17\n        return 131072\n    elseif n == 18\n        return 262144\n\
    \    elseif n == 19\n        return 524288\n    elseif n == 20\n        return\
    \ 1048576\n    elseif n == 21\n        return 2097152\n    elseif n == 22\n  \
    \      return 4194304\n    elseif n == 23\n        return 8388608\n    elseif\
    \ n == 24\n        return 16777216\n    elseif n == 25\n        return 33554432\n\
    \    elseif n == 26\n        return 67108864\n    elseif n == 27\n        return\
    \ 134217728\n    elseif n == 28\n        return 268435456\n    elseif n == 29\n\
    \        return 536870912\n    elseif n == 30\n        return 1073741824\n   \
    \ elseif n == 31\n        return 2147483648\n    elseif n == 32\n        return\
    \ 4294967296\n    elseif n == 33\n        return 8589934592\n    elseif n == 34\n\
    \        return 17179869184\n    elseif n == 35\n        return 34359738368\n\
    \    elseif n == 36\n        return 68719476736\n    elseif n == 37\n        return\
    \ 137438953472\n    elseif n == 38\n        return 274877906944\n    elseif n\
    \ == 39\n        return 549\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\
    \t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3qtk7p3h.jl:1\nin expression starting at /tmp/tmp3qtk7p3h.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    N = 0\n    if n==0\n        return 1\n    end\n    if\
    \ p==2\n        return 1\n    end\n    if n<0\n        n *= -1\n        n = n\
    \ % (p-1)\n        N = modp(n, p)\n        return p-N\n    end\n    if n==1\n\
    \        return n\n    end\n    if n%2==0\n        A = modp(n/2, p)\n        return\
    \ (A*A)%p\n    else\n        A = modp(n-1, p)\n        return (A*modp(n, p))%p\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1vy3zh6c.jl:43\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmp1vy3zh6c.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp1vy3zh6c.jl:31\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp1vy3zh6c.jl:34\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp1vy3zh6c.jl:43 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp1vy3zh6c.jl:42\ntest set:\
    \ Error During Test at /tmp/tmp1vy3zh6c.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmp1vy3zh6c.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp1vy3zh6c.jl:31\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp1vy3zh6c.jl:34\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp1vy3zh6c.jl:44 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp1vy3zh6c.jl:42\ntest set:\
    \ Error During Test at /tmp/tmp1vy3zh6c.jl:46\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  MethodError: no method matching modp(::Float64, ::Int64)\n\
    \  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmp1vy3zh6c.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp1vy3zh6c.jl:31\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp1vy3zh6c.jl:34\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1vy3zh6c.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    \"\"\"Return 2^n modulo p (be aware of numerics).\n \
    \   >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n\
    \    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n\
    \    a, b = 1, 2\n    while n > 0\n        if bit(n, 0) == 1\n            a =\
    \ mod(a * b, p)\n        end\n        b = mod(b * b, p)\n        n = bitshift(n,\
    \ -1)\n    end\n    return a\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t\
    @test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmplqhr6tg2.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  UndefVarError: bit not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmplqhr6tg2.jl:28\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplqhr6tg2.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplqhr6tg2.jl:40\ntest set:\
    \ Error During Test at /tmp/tmplqhr6tg2.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  UndefVarError: bit not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmplqhr6tg2.jl:28\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplqhr6tg2.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplqhr6tg2.jl:40\ntest set:\
    \ Error During Test at /tmp/tmplqhr6tg2.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  UndefVarError: bit not defined\n  Stacktrace:\n   [1]\
    \ modp(n::Int64, p::Int64)\n     @ Main /tmp/tmplqhr6tg2.jl:28\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplqhr6tg2.jl:44 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplqhr6tg2.jl:40\ntest set:\
    \ Error During Test at /tmp/tmplqhr6tg2.jl:45\n  Test threw exception\n  Expression:\
    \ candidate(100, 101) == 1\n  UndefVarError: bit not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmplqhr6tg2.jl:28\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [i"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplqhr6tg2.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    q, r = divrem(n, p)\n    return r\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1dhpu0zi.jl:23\n  Expression: candidate(1101,\
    \ 101) == 2\n   Evaluated: 91 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1dhpu0zi.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1dhpu0zi.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp1dhpu0zi.jl:24\n  Expression: candidate(0, 101) == 1\n   Evaluated:\
    \ 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1dhpu0zi.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1dhpu0zi.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp1dhpu0zi.jl:25\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 3 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1dhpu0zi.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1dhpu0zi.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp1dhpu0zi.jl:26\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 100 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1dhpu0zi.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1dhpu0zi.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp1dhpu0zi.jl:27\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1dhpu0zi.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n < 0\n        return 0\n    end\n    b, x = n, 1\n\
    \    while b > 0\n        x = mod(x*b, p)\n        b = div(b, 2)\n    end\n  \
    \  return x\nend\nmodp(3, 5)\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\
    \t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb1p__uqf.jl:31\n  Expression: candidate(1101,\
    \ 101) == 2\n   Evaluated: 55 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb1p__uqf.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb1p__uqf.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpb1p__uqf.jl:33\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 3 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb1p__uqf.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb1p__uqf.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpb1p__uqf.jl:34\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 74 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb1p__uqf.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb1p__uqf.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpb1p__uqf.jl:35\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb1p__uqf.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb1p__uqf.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpb1p__uqf.jl:36\n  Expression: candidate(31, 5) == 3\n   Evaluated:\
    \ 0 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb1p"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb1p__uqf.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if p==1\n        return 0\n    end\n    if n==0\n   \
    \     return 1\n    end\n    i=1\n    val=2\n    while (2^i)<=n\n        i+=1\n\
    \    end\n    if i>1\n        val=modp(2^(i-1), p)^2\n    end\n    return val*modp(n-2^(i-1),\
    \ p)\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    res = 1\n    b = 2\n    n = n % (p-1)\n    while n >\
    \ 0\n        if n % 2 == 1\n            res = (res * b) % p\n        end\n   \
    \     n = div(n, 2)\n        b = (b * b) % p\n    end\n    return res\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\
    \t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3,\
    \ 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\
    \t@test(candidate(31, 5) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    modp = 1\n    a = 2\n    while n > 0\n        while n\
    \ % 2 == 0\n            n = div(n, 2)\n            a = mod(a^2, p)\n        end\n\
    \        n = n - 1\n        modp = mod(modp * a, p)\n    end\n    return modp\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5)\
    \ == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    # if n == 1,\
    \ just return the base\n    if n == 1\n        return a\n    end\n    b = modp(n\
    \ >> 1, p)\n    b *= b\n    b = mod(b, p)\n    if n & 1 == 1\n        b *= a\n\
    \    end\n    return mod(b, p)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpz18own9t.jl:34\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  UndefVarError: a not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpz18own9t.jl:19\n   [2] modp(n::Int64,\
    \ p::Int64)\n     @ Main /tmp/tmpz18own9t.jl:21\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpz18own9t.jl:34 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpz18own9t.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpz18own9t.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  UndefVarError: a not defined\n  Stacktrace:\n \
    \  [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpz18own9t.jl:19\n   [2] modp(n::Int64,\
    \ p::Int64) (repeats 10 times)\n     @ Main /tmp/tmpz18own9t.jl:21\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpz18own9t.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpz18own9t.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpz18own9t.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  UndefVarError: a not defined\n  Stacktrace:\n   [1]\
    \ modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpz18own9t.jl:19\n   [2] modp(n::Int64,\
    \ p::Int64)\n     @ Main /tmp/tmpz18own9t.jl:21\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpz18own9t.jl:37 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpz18own9t.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpz18own9t.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(100, 101) == 1\n  Und"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz18own9t.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    number_times_2\
    \ = modp(n - 1, p)\n    return mod(2 * number_times_2, p)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    \"\"\"Return 2^n modulo p (be aware of numerics).\n \
    \   >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n\
    \    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n\
    \    if n == 0\n        return 1\n    end\n    a = modp(n>>1, p)\n    a = a^2\
    \ % p\n    if n % 2 == 1\n        a = a * 2 % p\n    end\n    return a\nend\n\
    using Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) ==\
    \ 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t\
    @test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    n = n % p \n    n = n % p\n    if n < 0\n        n +=\
    \ p\n    end\n    q = (2^n) % p\n    q = q % p\n    if q < 0\n        q += p\n\
    \    end\n    return q\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\
    \t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfhzevai_.jl:32\n  Expression: candidate(1101,\
    \ 101) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfhzevai_.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfhzevai_.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpfhzevai_.jl:35\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfhzevai_.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfhzevai_.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpfhzevai_.jl:36\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfhzevai_.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfhzevai_.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpfhzevai_.jl:37\n  Expression: candidate(31, 5) == 3\n   Evaluated:\
    \ 2 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfhzevai_.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfhzevai_.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfhzevai_.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    elseif n == 1\n    \
    \    return 2\n    elseif n == 2\n        return 4\n    elseif n == 3\n      \
    \  return 8\n    elseif n == 4\n        return 16\n    elseif n == 5\n       \
    \ return 32\n    elseif n == 6\n        return 64\n    elseif n == 7\n       \
    \ return 128\n    elseif n == 8\n        return 256\n    elseif n == 9\n     \
    \   return 512\n    elseif n == 10\n        return 1024\n    elseif n == 11\n\
    \        return 2048\n    elseif n == 12\n        return 4096\n    elseif n ==\
    \ 13\n        return 8192\n    elseif n == 14\n        return 16384\n    elseif\
    \ n == 15\n        return 32768\n    elseif n == 16\n        return 65536\n  \
    \  elseif n == 17\n        return 131072\n    elseif n == 18\n        return 262144\n\
    \    elseif n == 19\n        return 524288\n    elseif n == 20\n        return\
    \ 1048576\n    elseif n == 21\n        return 2097152\n    elseif n == 22\n  \
    \      return 4194304\n    elseif n == 23\n        return 8388608\n    elseif\
    \ n == 24\n        return 16777216\n    elseif n == 25\n        return 33554432\n\
    \    elseif n == 26\n        return 67108864\n    elseif n == 27\n        return\
    \ 134217728\n    elseif n == 28\n        return 268435456\n    elseif n == 29\n\
    \        return 536870912\n    elseif n == 30\n        return 1073741824\n   \
    \ elseif n == 31\n        return 2147483648\n    elseif n == 32\n        return\
    \ 4294967296\n    elseif n == 33\n        return 8589934592\n    elseif n == 34\n\
    \        return 17179869184\n    elseif n == 35\n        return 34359738368\n\
    \    elseif n == 36\n        return 68719476736\n    elseif n == 37\n        return\
    \ 137438953472\n    elseif n == 38\n        return 274877906944\n    elseif n\
    \ == 39\n        return 549\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\
    \t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpetgh6bzd.jl:1\nin expression starting at /tmp/tmpetgh6bzd.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    n = n % p\n    if n == 0\n        return 1\n    end\n\
    \    if n == 1\n        return 2\n    end\n    s = 2\n    for i in 2:n\n     \
    \   s = (s * 2) % p\n    end\n    return s\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpqzxfd0o6.jl:33\n  Expression: candidate(1101,\
    \ 101) == 2\n   Evaluated: 29 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqzxfd0o6.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqzxfd0o6.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpqzxfd0o6.jl:37\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqzxfd0o6.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqzxfd0o6.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpqzxfd0o6.jl:38\n  Expression: candidate(31, 5) == 3\n   Evaluated:\
    \ 2 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqzxfd0o6.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqzxfd0o6.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqzxfd0o6.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    while p < 0\n        p += n\n    end\n    n % p\nend\n\
    using Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) ==\
    \ 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t\
    @test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwu2w_f91.jl:25\n  Expression: candidate(1101,\
    \ 101) == 2\n   Evaluated: 91 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwu2w_f91.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwu2w_f91.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpwu2w_f91.jl:26\n  Expression: candidate(0, 101) == 1\n   Evaluated:\
    \ 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwu2w_f91.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwu2w_f91.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpwu2w_f91.jl:27\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 3 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwu2w_f91.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwu2w_f91.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpwu2w_f91.jl:28\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 100 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwu2w_f91.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwu2w_f91.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpwu2w_f91.jl:29\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwu2w_f91.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    return mod(round(Int64, 2^n), p)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp157m2m87.jl:22\n  Expression: candidate(1101,\
    \ 101) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp157m2m87.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp157m2m87.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp157m2m87.jl:25\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp157m2m87.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp157m2m87.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp157m2m87.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    elseif n > 0\n     \
    \   return mod2(n, p)\n    else\n        return modp(-n, p)\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\
    \t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3,\
    \ 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\
    \t@test(candidate(31, 5) == 3)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpex_vnyi5.jl:27\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  UndefVarError: mod2 not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpex_vnyi5.jl:17\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpex_vnyi5.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpex_vnyi5.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpex_vnyi5.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  UndefVarError: mod2 not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpex_vnyi5.jl:17\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpex_vnyi5.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpex_vnyi5.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpex_vnyi5.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  UndefVarError: mod2 not defined\n  Stacktrace:\n  \
    \ [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpex_vnyi5.jl:17\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpex_vnyi5.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpex_vnyi5.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpex_vnyi5.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(100, 101) == 1\n  UndefVarError: mod2 not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpex_vnyi5.jl:17\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpex_vnyi5.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    n %= p \n    return n == 0 ? 1 : n\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp837v_l10.jl:23\n  Expression: candidate(1101,\
    \ 101) == 2\n   Evaluated: 91 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp837v_l10.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp837v_l10.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp837v_l10.jl:25\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 3 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp837v_l10.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp837v_l10.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp837v_l10.jl:26\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 100 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp837v_l10.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp837v_l10.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp837v_l10.jl:27\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp837v_l10.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp837v_l10.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp837v_l10.jl:28\n  Expression: candidate(31, 5) == 3\n   Evaluated:\
    \ 1 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp83"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp837v_l10.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    if n == 1\n\
    \        return 2\n    end\n    if n == 2\n        return 4\n    end\n    if n\
    \ % 2 == 0\n        return (modp(n/2, p)^2) % p\n    else\n        return (2 *\
    \ modp(n-1, p)) % p\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t\
    @test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp6mhu9r4w.jl:35\n  Test threw exception\n\
    \  Expression: candidate(1101, 101) == 2\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmp6mhu9r4w.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp6mhu9r4w.jl:24\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp6mhu9r4w.jl:26\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp6mhu9r4w.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp6mhu9r4w.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp6mhu9r4w.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(100, 101) == 1\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmp6mhu9r4w.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp6mhu9r4w.jl:24\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6mhu9r4w.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6mhu9r4w.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp6mhu9r4w.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(30, 5) == 4\n  MethodError: no method matching modp(::Float64, ::Int64)\n\
    \  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmp6mhu9r4w.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp6mhu9r4w.jl:24\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6mhu9r4w.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/T"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6mhu9r4w.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0 \n        return 1\n    end\n    b = bits(n)\n\
    \    b[1] = modp(1, p)\n    for i = 2:length(b)\n        b[i] = modp(2 * b[i-1],\
    \ p)\n    end\n    n = 0\n    for i = 1:length(b)\n        n += b[i] * (n >= 0\
    \ ? 1 : -1)\n    end\n    return n\nend\n \nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp2ajtxx1c.jl:34\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  UndefVarError: bits not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp2ajtxx1c.jl:17\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2ajtxx1c.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2ajtxx1c.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp2ajtxx1c.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  UndefVarError: bits not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp2ajtxx1c.jl:17\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2ajtxx1c.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2ajtxx1c.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp2ajtxx1c.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  UndefVarError: bits not defined\n  Stacktrace:\n  \
    \ [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp2ajtxx1c.jl:17\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2ajtxx1c.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2ajtxx1c.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp2ajtxx1c.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(100, 101) == 1\n  UndefVarError: bits not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp2ajtxx1c.jl:17\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2ajtxx1c.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    k = 0\n    result = 1\n    while k < n\n        result\
    \ = (result * 2) % p\n        k += 1\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    elseif n == 1\n    \
    \    return 2\n    elseif n == 2\n        return 4\n    elseif n == 3\n      \
    \  return 8\n    elseif n == 4\n        return 16\n    elseif n == 5\n       \
    \ return 32\n    elseif n == 6\n        return 64\n    elseif n == 7\n       \
    \ return 128\n    elseif n == 8\n        return 29\n    elseif n == 9\n      \
    \  return 58\n    elseif n == 10\n        return 116\n    elseif n == 11\n   \
    \     return 232\n    elseif n == 12\n        return 205\n    elseif n == 13\n\
    \        return 141\n    elseif n == 14\n        return 202\n    elseif n == 15\n\
    \        return 76\n    elseif n == 16\n        return 152\n    elseif n == 17\n\
    \        return 45\n    elseif n == 18\n        return 90\n    elseif n == 19\n\
    \        return 180\n    elseif n == 20\n        return 117\n    elseif n == 21\n\
    \        return 234\n    elseif n == 22\n        return 201\n    elseif n == 23\n\
    \        return 143\n    elseif n == 24\n        return 186\n    elseif n == 25\n\
    \        return 172\n    elseif n == 26\n        return 68\n    elseif n == 27\n\
    \        return 136\n    elseif n == 28\n        return 57\n    elseif n == 29\n\
    \        return 114\n    elseif n == 30\n        return 228\n    elseif n == 31\n\
    \        return 213\n    elseif n == 32\n        return 183\n    elseif n == 33\n\
    \        return 125\n    elseif n == 34\n        return 250\n    elseif n == 35\n\
    \        return 233\n    elseif n == 36\n        return 197\n    elseif n == 37\n\
    \        return 159\n    elseif n == 38\n        return 98\n    elseif n == 39\n\
    \        return 196\n    elseif n == 40\n        return 154\n    elseif n == 41\n\
    \        return 37\n    elseif n == 42\n        return 74\n    elseif n == 43\n\
    \        return 148\n    elseif n == 44\n        return 53\n    elseif n == 45\n\
    \        return 106\n    elseif n == 46\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpotoz6haf.jl:1\nin expression starting at /tmp/tmpotoz6haf.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        modp = 1\n    else\n        modp =\
    \ prod([x for x in range(1,n+1)])%p\n    end\n    return modp\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqif4uyfx.jl:26\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqif4uyfx.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqif4uyfx.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpqif4uyfx.jl:27\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqif4uyfx.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqif4uyfx.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpqif4uyfx.jl:29\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 2 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqif4uyfx.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqif4uyfx.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpqif4uyfx.jl:30\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqif4uyfx.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqif4uyfx.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpqif4uyfx.jl:31\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqif4uy"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqif4uyfx.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    if n == 1\n\
    \        return 2\n    end\n    if n%2 == 0\n        a = modp(n/2, p)\n      \
    \  return (a*a)%p\n    else\n        return (2*modp(n-1, p))%p\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) ==\
    \ 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t\
    @test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3tpjulk9.jl:32\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmp3tpjulk9.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp3tpjulk9.jl:21\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp3tpjulk9.jl:24\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3tpjulk9.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp3tpjulk9.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp3tpjulk9.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmp3tpjulk9.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp3tpjulk9.jl:21\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp3tpjulk9.jl:24\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3tpjulk9.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp3tpjulk9.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp3tpjulk9.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  MethodError: no method matching modp(::Float64, ::Int64)\n\
    \  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmp3tpjulk9.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp3tpjulk9.jl:21\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp3tpjulk9.jl:24\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3tpjulk9.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if p == 1\n        return 0\n    end\n    assert(n \u2265\
    \ 0)\n    result = 1\n    power = n\n    while power > 0\n        if isodd(power)\n\
    \            result = mod(result * power, p)\n        end\n        power = div(power,\
    \ 2)\n        power = mod(power, p)\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpsjg0ysn9.jl:34\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  UndefVarError: assert not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpsjg0ysn9.jl:17\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsjg0ysn9.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsjg0ysn9.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpsjg0ysn9.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  UndefVarError: assert not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpsjg0ysn9.jl:17\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsjg0ysn9.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsjg0ysn9.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpsjg0ysn9.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(0, 101) == 1\n  UndefVarError: assert not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpsjg0ysn9.jl:17\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsjg0ysn9.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsjg0ysn9.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpsjg0ysn9.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  UndefVarError: assert not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpsjg0ysn9.jl:17\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsjg0ysn9.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    m = modp(n\
    \ div 2, p)\n    m = rem(m*m, p)\n    if mod(n, 2) == 1\n        m = rem(m*2,\
    \ p)\n    end\n    return m\nend\n \nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpenta_ub8.jl:17\nin expression starting at\
    \ /tmp/tmpenta_ub8.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    n %= p\n    n == 0 && return 1 # $0^0 = 1$\n    n ==\
    \ 1 && return n\n    a = n\n    b = 1\n    while n > 1\n        n % 2 == 0 &&\
    \ (a *= a) %= p\n        n >  1 && (b *= a) %= p\n        n >>= 1\n    end\n \
    \   return b\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid assignment location \"((n % 2) == 0)\
    \ && a *= a\" around /tmp/tmp6u0a7pdu.jl:20\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmp6u0a7pdu.jl:1\nin expression starting at /tmp/tmp6u0a7pdu.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    # initialize result = 1\n    r::Int64 = 1\n    # update\
    \ r to 2^n mod p\n    while n > 0\n        # check if n is odd\n        if n %\
    \ 2 == 1\n            r = (r * 2) % p\n        end\n        # divide n by 2\n\
    \        n = div(n, 2)\n    end\n    # return result\n    return r\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\
    \t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3,\
    \ 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\
    \t@test(candidate(31, 5) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3rc647gc.jl:33\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3rc647gc.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3rc647gc.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp3rc647gc.jl:34\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 32 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3rc647gc.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3rc647gc.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp3rc647gc.jl:36\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 4 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3rc647gc.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3rc647gc.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp3rc647gc.jl:37\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 8 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3rc647gc.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3rc647gc.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp3rc647gc.jl:38\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3rc64"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3rc647gc.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    elseif n%2 == 0\n  \
    \      return modp(n//2, p)^2 % p\n    else\n        return modp(n//2, p)^2 %\
    \ p * modp(n-1, p) % p\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpj08fxcat.jl:27\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  MethodError: no method matching modp(::Rational{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpj08fxcat.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpj08fxcat.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpj08fxcat.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpj08fxcat.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpj08fxcat.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  MethodError: no method matching modp(::Rational{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpj08fxcat.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpj08fxcat.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpj08fxcat.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpj08fxcat.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpj08fxcat.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  MethodError: no method matching modp(::Rational{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpj08fxcat.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpj08fxcat.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpj08fxcat.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj08fxcat.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    m = 1\n    for i = 1:n\n        m = (m*2) % p\n    end\n\
    \    return m\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n < 0 \n        n = n % p\n    end\n    if n < p/2\n\
    \        return 2^n % p\n    else\n        return 2^(n-p) % p\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) ==\
    \ 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t\
    @test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjt22vd8z.jl:28\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  DomainError with -2:\n  Cannot raise an\
    \ integer x to a negative power -2.\n  Make x or -2 a float by adding a zero decimal\
    \ (e.g., 2.0^-2 or 2^-2.0 instead of 2^-2), or write 1/x^2, float(x)^-2, x^float(-2)\
    \ or (x//1)^-2\n  Stacktrace:\n   [1] throw_domerr_powbysq(#unused#::Int64, p::Int64)\n\
    \     @ Base ./intfuncs.jl:245\n   [2] power_by_squaring(x_::Int64, p::Int64)\n\
    \     @ Base ./intfuncs.jl:266\n   [3] ^\n     @ ./intfuncs.jl:290 [inlined]\n\
    \   [4] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpjt22vd8z.jl:20\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpjt22vd8z.jl:28 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpjt22vd8z.jl:27\ntest set:\
    \ Test Failed at /tmp/tmpjt22vd8z.jl:29\n  Expression: candidate(1101, 101) ==\
    \ 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjt22vd8z.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjt22vd8z.jl:27\ntest set: Error\
    \ During Test at /tmp/tmpjt22vd8z.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(100, 101) == 1\n  DomainError with -1:\n  Cannot raise an integer\
    \ x to a negative power -1.\n  Make x or -1 a float by adding a zero decimal (e.g.,\
    \ 2.0^-1 or 2^-1.0 instead of 2^-1), or write 1/x^1, float(x)^-1, x^float(-1)\
    \ or (x//1)^-1\n  Stacktrace:\n   [1] throw_domerr_powbysq(#unused#::Int64, p::Int64)\n\
    \     @ Base ./intfuncs.jl:245\n   [2] power_by_squaring(x_::Int64, p::Int64)\n\
    \     @ Base ./intfuncs.jl:266\n   [3] ^\n     @ ./intfuncs.jl:290 [inlined]\n\
    \   [4] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpjt22vd8z.jl:20\n   [5] macro\
    \ expans"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjt22vd8z.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    a = modp(n\
    \ \xF7 2, p)\n    a = (a * a) % p\n    if n % 2 == 1\n        a = (a * 2) % p\n\
    \    end\n    return a\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\
    \t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    if mod(n, 2)\
    \ == 0\n        return mod(modp(n \xF7 2, p)^2, p)\n    else\n        return mod(modp(n\
    \ \xF7 2, p)^2 * 2, p)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    elseif n == 1\n    \
    \    return 2 % p\n    elseif n == 2\n        return 4 % p\n    elseif n == 3\n\
    \        return 8 % p\n    elseif n == 4\n        return 16 % p\n    elseif n\
    \ == 5\n        return 32 % p\n    elseif n == 6\n        return 64 % p\n    elseif\
    \ n == 7\n        return 128 % p\n    elseif n == 8\n        return 256 % p\n\
    \    elseif n == 9\n        return 512 % p\n    elseif n == 10\n        return\
    \ 1024 % p\n    elseif n == 11\n        return 2048 % p\n    elseif n == 12\n\
    \        return 4096 % p\n    elseif n == 13\n        return 8192 % p\n    elseif\
    \ n == 14\n        return 16384 % p\n    elseif n == 15\n        return 32768\
    \ % p\n    elseif n == 16\n        return 65536 % p\n    elseif n == 17\n    \
    \    return 131072 % p\n    elseif n == 18\n        return 262144 % p\n    elseif\
    \ n == 19\n        return 524288 % p\n    elseif n == 20\n        return 1048576\
    \ % p\n    elseif n == 21\n        return 2097152 % p\n    elseif n == 22\n  \
    \      return 4194304 % p\n    elseif n == 23\n        return 8388608 % p\n  \
    \  elseif n == 24\n        return 16777216 % p\n    elseif n == 25\n        return\
    \ 33554432 % p\n    elseif n == 26\n        return 67108864 % p\n    elseif n\
    \ == 27\n        return 134217728 % p\n    elseif n == 28\n        return 268435456\
    \ % p\n    elseif n == 29\n        return 536870912 % p\n    elseif n == 30\n\
    \        return 1073741824 % p\n    elseif n == 31\n        return 2147483648\
    \ % p\n    elseif n == 32\n        return 4294967296 % p\n    elseif n == 33\n\
    \        return 8589934592 % p\n    elseif n == 34\n        return 17179869184\
    \ % p\n    elseif n == 35\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\
    \t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0kokqnfa.jl:1\nin expression starting at /tmp/tmp0kokqnfa.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n  exp = 1\n  base = 2\n  while n > 0\n    if n % 2 == 1\n\
    \      exp = mod(exp * base, p)\n    end\n    base = mod(base * base, p)\n   \
    \ n = div(n, 2)\n  end\n  return exp\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    a = 1\n    b = 2\n    while n > 0\n        if bit(n,\
    \ 0) == 1\n            a = mod2mul(a, b, p)\n        end\n        b = mod2mul(b,\
    \ b, p)\n        n = n >> 1\n    end\n    return a\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpixl2txg2.jl:30\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  UndefVarError: bit not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpixl2txg2.jl:17\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpixl2txg2.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpixl2txg2.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpixl2txg2.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  UndefVarError: bit not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpixl2txg2.jl:17\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpixl2txg2.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpixl2txg2.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpixl2txg2.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  UndefVarError: bit not defined\n  Stacktrace:\n   [1]\
    \ modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpixl2txg2.jl:17\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpixl2txg2.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpixl2txg2.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpixl2txg2.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(100, 101) == 1\n  UndefVarError: bit not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpixl2txg2.jl:17\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [i"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpixl2txg2.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    result = 1\n    for i = 1:n\n        result = result*2\
    \ % p\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    r = 1\n    b = 2\n    while n > 0\n        if (n % 2)\
    \ == 1\n            r = (r * b) % p\n        end\n        n = n >> 1\n       \
    \ b = (b * b) % p\n    end\n    return r\nend\nusing Test\n\n@testset begin\n\n\
    candidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n < 0 \n        n += floor(n/p) * p \n    end\n  \
    \  n % p\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6xr4c__o.jl:25\n  Expression: candidate(1101,\
    \ 101) == 2\n   Evaluated: 91 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6xr4c__o.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6xr4c__o.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp6xr4c__o.jl:26\n  Expression: candidate(0, 101) == 1\n   Evaluated:\
    \ 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6xr4c__o.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6xr4c__o.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp6xr4c__o.jl:27\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 3 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6xr4c__o.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6xr4c__o.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp6xr4c__o.jl:28\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 100 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6xr4c__o.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6xr4c__o.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp6xr4c__o.jl:29\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6xr4c__o.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    # return 2^n mod p (be aware of numerics).\n    # from\
    \ https://github.com/mhaskar/TutorialOfAlgorithms/blob/master/DiscreteLogarithm/PollardRho.jl\n\
    \    n = n % (p-1)\n    if n == 0\n        return 1\n    end\n    w = 2\n    x\
    \ = 1\n    while n > 1\n        while n % 2 == 0\n            n = n / 2\n    \
    \        x = (x * w) % p\n        end\n        n = n - 1\n        t = w\n    \
    \    w = (w * w) % p\n        x = (x * w) % p\n    end\n    return x\nend\n\"\"\
    \"Use one of the Fermat test functions.\n    >>> isprime_f3(3)\n    true\n   \
    \ >>> isprime_f3(4)\n    false\n    >>> isprime_f3(101)\n    true\n    >>> isprime_f3(991)\n\
    \    false\n    >>> isprime_f3(98777)\n    false\n    >>> isprime_f3(98777*991)\n\
    \    true\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp7q47uzj0.jl:34\nin expression starting at /tmp/tmp7q47uzj0.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n < 0\n        b = modp(-n, p)\n        return (p-b)%p\n\
    \    end\n    #If N is negative, then modp(N, p) is (p-modp(-N, p)) mod p.\n \
    \   b = 1\n    m = n\n    while m > 0\n        if mod(m, 2) == 1\n           \
    \ b = (b*n)%p\n        end\n        n = (n*n)%p\n        m = floor(m/2)\n    end\n\
    \    return b\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4yfl6sh9.jl:35\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 2 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4yfl6sh9.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4yfl6sh9.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp4yfl6sh9.jl:36\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 91 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4yfl6sh9.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4yfl6sh9.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp4yfl6sh9.jl:38\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 5 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4yfl6sh9.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4yfl6sh9.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp4yfl6sh9.jl:40\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4yfl6sh9.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4yfl6sh9.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp4yfl6sh9.jl:41\n  Expression: candidate(31, 5) == 3\n   Evaluated:\
    \ 1 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4yfl6sh9"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4yfl6sh9.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    r = 1\n    while n > 0\n        if bit_shift(n, -1) ==\
    \ 1\n            r = mod(r*2, p)\n        end\n        n = bit_shift(n, -1)\n\
    \    end\n    return r\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\
    \t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpb3vkbyai.jl:28\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  UndefVarError: bit_shift not defined\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpb3vkbyai.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb3vkbyai.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb3vkbyai.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpb3vkbyai.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  UndefVarError: bit_shift not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpb3vkbyai.jl:16\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb3vkbyai.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb3vkbyai.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpb3vkbyai.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  UndefVarError: bit_shift not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpb3vkbyai.jl:16\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb3vkbyai.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb3vkbyai.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpb3vkbyai.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(100, 101) == 1\n  UndefVarError: bit_shift not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpb3vkbyai.jl:16\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb3vkbyai.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    elseif n%2 == 0\n  \
    \      m = modp(n//2, p)\n        return (m*m)%p\n    else\n        return (2*modp(n-1,\
    \ p))%p\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjkpwat57.jl:28\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  MethodError: no method matching modp(::Rational{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpjkpwat57.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpjkpwat57.jl:17\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpjkpwat57.jl:20\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpjkpwat57.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpjkpwat57.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpjkpwat57.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  MethodError: no method matching modp(::Rational{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpjkpwat57.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpjkpwat57.jl:17\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpjkpwat57.jl:20\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpjkpwat57.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpjkpwat57.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpjkpwat57.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  MethodError: no method matching modp(::Rational{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpjkpwat57.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpjkpwat57.jl:17\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpjkpwat57.jl:20\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjkpwat57.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    if n < 0\n\
    \        # O(p)\n        return modp(p - (-n % p), p)\n    end\n    if n == 1\n\
    \        return 2\n    end\n    if n == 2\n        return 4\n    end\n    if n\
    \ % 2 == 0\n        t = modp(n/2, p)\n        return (t * t) % p\n    else\n \
    \       return (2 * modp(n-1, p)) % p\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp41bexq9z.jl:40\n  Test threw exception\n\
    \  Expression: candidate(1101, 101) == 2\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmp41bexq9z.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp41bexq9z.jl:28\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp41bexq9z.jl:31\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp41bexq9z.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp41bexq9z.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp41bexq9z.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(100, 101) == 1\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmp41bexq9z.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp41bexq9z.jl:28\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp41bexq9z.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp41bexq9z.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp41bexq9z.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(30, 5) == 4\n  MethodError: no method matching modp(::Float64, ::Int64)\n\
    \  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmp41bexq9z.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp41bexq9z.jl:28\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp41bexq9z.jl:44 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/T"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp41bexq9z.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0 \n        return 1\n    elseif n%2 == 0\n \
    \       return modp(n/2, p)^2 % p\n    else\n        return modp(n/2, p)^2 * 2\
    \ % p\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpifr7hakm.jl:27\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpifr7hakm.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpifr7hakm.jl:0\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpifr7hakm.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpifr7hakm.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpifr7hakm.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpifr7hakm.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpifr7hakm.jl:0\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpifr7hakm.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpifr7hakm.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpifr7hakm.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  MethodError: no method matching modp(::Float64, ::Int64)\n\
    \  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpifr7hakm.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpifr7hakm.jl:0\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpifr7hakm.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpifr7hakm.jl:26"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpifr7hakm.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    prod = modp(n\
    \ >> 1, p)\n    if n % 2 == 0\n        return prod * prod % p\n    else\n    \
    \    return prod * prod * n % p\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpn_1y3hhv.jl:30\n  Expression: candidate(1101,\
    \ 101) == 2\n   Evaluated: 94 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn_1y3hhv.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn_1y3hhv.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpn_1y3hhv.jl:32\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 3 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn_1y3hhv.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn_1y3hhv.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpn_1y3hhv.jl:34\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn_1y3hhv.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn_1y3hhv.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpn_1y3hhv.jl:35\n  Expression: candidate(31, 5) == 3\n   Evaluated:\
    \ 0 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn_1y3hhv.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn_1y3hhv.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn_1y3hhv.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    if n % 2 ==\
    \ 0\n        return modp(n / 2, p)^2 % p\n    else\n        return modp(n / 2,\
    \ p)^2 * 2 % p\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\
    \t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphmib6n5w.jl:28\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmphmib6n5w.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmphmib6n5w.jl:0\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphmib6n5w.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphmib6n5w.jl:27\ntest set:\
    \ Error During Test at /tmp/tmphmib6n5w.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmphmib6n5w.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmphmib6n5w.jl:0\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphmib6n5w.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphmib6n5w.jl:27\ntest set:\
    \ Error During Test at /tmp/tmphmib6n5w.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  MethodError: no method matching modp(::Float64, ::Int64)\n\
    \  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmphmib6n5w.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmphmib6n5w.jl:0\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphmib6n5w.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphmib6n5w.jl:27"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphmib6n5w.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    \n    # n may be large\n    #  if n is larger than 2^(64-1),\
    \ it will first be cast to \n    #  a 64-bit signed integer, then the bitshift\
    \ will be done\n    #  if n is larger than 2^63, the bitshift will set the sign\
    \ bit \n    #  to true and not shift anything, then the NOT operation will\n \
    \   #  clear the sign bit, which will make the result negative\n    #  Julia will\
    \ automatically cast the negative value to a UInt64\n    #  which can then be\
    \ cast back to an Int64.\n    #  However, the result will then be wrong.\n   \
    \ #  We therefore convert to a UInt64 before the shift to avoid this.\n    # \
    \ If n is larger than 2^64-1, the bitshift will throw an error\n    if n >= 0\n\
    \        m = UInt64(n)\n    else\n        m = Int64(UInt64(n))\n    end\n    \n\
    \    # Modular exponentiation by repeated squaring\n    result = 1\n    while\
    \ m > 0\n        if bit(m, 0) == 1\n            result = (result * n) % p\n  \
    \      end\n        m = shift_right(m, 1)\n        n = (n * n) % p\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t\
    @test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1v_r4gi0.jl:48\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  UndefVarError: bit not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp1v_r4gi0.jl:35\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1v_r4gi0.jl:48 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1v_r4gi0.jl:47\ntest set:\
    \ Error During Test at /tmp/tmp1v_r4gi0.jl:49\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  UndefVarError: bit not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp1v_r4gi0.jl:35\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1v_r4gi0.jl:49 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1v_r4gi0.jl:47\ntest set:\
    \ Error During Test at /tmp/tmp1v_r4gi0.jl:51\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  UndefVarError: bit not defined\n  Stacktrace:\n   [1]\
    \ modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp1v_r4gi0.jl:35\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1v_r4gi0.jl:51 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1v_r4gi0.jl:47\ntest set:\
    \ Error During Test at /tmp/tmp1v_r4gi0.jl:52\n  Test threw exception\n  Expression:\
    \ candidate(100, 101) == 1\n  UndefVarError: bit not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp1v_r4gi0.jl:35\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [i"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1v_r4gi0.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0 \n        return 1\n    end\n    m = modp(n\
    \ >> 1, p)\n    m = m*m % p\n    if n % 2 == 1\n        m = m*2 % p\n    end\n\
    \    return m\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n  n %= p\n  n = n == 0 ? 1 : n\n  while n < 0\n    n += p\n\
    \  end\n  if n & 1 == 1 \n    y = 2\n  else\n    y = 1\n  end\n  a = n\n  while\
    \ a > 0\n    a >>= 1\n    if a & 1 == 1\n      y = y * 2 % p\n    end\n  end\n\
    \  return y\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgk4mksep.jl:38\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgk4mksep.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgk4mksep.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpgk4mksep.jl:39\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 32 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgk4mksep.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgk4mksep.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpgk4mksep.jl:40\n  Expression: candidate(0, 101) == 1\n   Evaluated:\
    \ 2 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgk4mksep.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgk4mksep.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpgk4mksep.jl:41\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 4 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgk4mksep.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgk4mksep.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpgk4mksep.jl:42\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 8 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgk4m"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgk4mksep.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    a = 1\n    b = 2\n    while n > 0\n        if n % 2 ==\
    \ 1\n            a = (a * b) % p\n        end\n        n = div(n, 2)\n       \
    \ b = (b * b) % p\n    end\n    return a\nend\nusing Test\n\n@testset begin\n\n\
    candidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    n = n % p\n    pow = 1\n    while n > 0\n        if bitstring(n)[end]\
    \ == '1'\n            pow = pow * 2 % p\n        end\n        n = div(n, 2)\n\
    \    end\n    return pow\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\
    \t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgb7eiobz.jl:29\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgb7eiobz.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgb7eiobz.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpgb7eiobz.jl:30\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 32 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgb7eiobz.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgb7eiobz.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpgb7eiobz.jl:32\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 4 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgb7eiobz.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgb7eiobz.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpgb7eiobz.jl:33\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 8 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgb7eiobz.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgb7eiobz.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpgb7eiobz.jl:34\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgb7ei"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgb7eiobz.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    n, k = n, 1\n    while n > 0\n        if n % 2 == 1\n\
    \            k = k * 2 % p\n        end\n        n = div(n, 2)\n    end\n    return\
    \ k\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcjv8xu96.jl:28\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcjv8xu96.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcjv8xu96.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpcjv8xu96.jl:29\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 32 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcjv8xu96.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcjv8xu96.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpcjv8xu96.jl:31\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 4 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcjv8xu96.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcjv8xu96.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpcjv8xu96.jl:32\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 8 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcjv8xu96.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcjv8xu96.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpcjv8xu96.jl:33\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcjv8x"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcjv8xu96.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    n::Int64\n    n = n % p\n    if n > (p//2)\n        n\
    \ = p - n\n    end\n    return n\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmptg1guc9b.jl:26\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 2 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptg1guc9b.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptg1guc9b.jl:25\ntest set: Test\
    \ Failed at /tmp/tmptg1guc9b.jl:27\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 10 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptg1guc9b.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptg1guc9b.jl:25\ntest set: Test\
    \ Failed at /tmp/tmptg1guc9b.jl:28\n  Expression: candidate(0, 101) == 1\n   Evaluated:\
    \ 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptg1guc9b.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptg1guc9b.jl:25\ntest set: Test\
    \ Failed at /tmp/tmptg1guc9b.jl:29\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 3 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptg1guc9b.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptg1guc9b.jl:25\ntest set: Test\
    \ Failed at /tmp/tmptg1guc9b.jl:31\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptg1guc9"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptg1guc9b.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    #check if n is an integer\n    #check if p is a prime\n\
    \    if n == 0\n        return 1\n    end\n    temp = modp(n//2, p)\n    temp\
    \ = (temp*temp) % p\n    if (n%2) == 1\n        temp = (temp*2) % p\n    end\n\
    \    return temp\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmppv93s93b.jl:31\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  MethodError: no method matching modp(::Rational{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmppv93s93b.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmppv93s93b.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppv93s93b.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppv93s93b.jl:30\ntest set:\
    \ Error During Test at /tmp/tmppv93s93b.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  MethodError: no method matching modp(::Rational{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmppv93s93b.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmppv93s93b.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppv93s93b.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppv93s93b.jl:30\ntest set:\
    \ Error During Test at /tmp/tmppv93s93b.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  MethodError: no method matching modp(::Rational{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmppv93s93b.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmppv93s93b.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppv93s93b.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppv93s93b.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    n = n % p\n    if n < 0\n        n += p\n    end\n  \
    \  return n\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp73ypixto.jl:26\n  Expression: candidate(1101,\
    \ 101) == 2\n   Evaluated: 91 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp73ypixto.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp73ypixto.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp73ypixto.jl:27\n  Expression: candidate(0, 101) == 1\n   Evaluated:\
    \ 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp73ypixto.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp73ypixto.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp73ypixto.jl:28\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 3 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp73ypixto.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp73ypixto.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp73ypixto.jl:29\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 100 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp73ypixto.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp73ypixto.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp73ypixto.jl:30\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp73ypixto.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    \n    if n == 0\n        m = 1\n    elseif n == 1\n \
    \       m = 2\n    elseif n == 2\n        m = 4\n    elseif n == 3\n        m\
    \ = 8\n    elseif n == 4\n        m = 16\n    elseif n == 5\n        m = 32\n\
    \    elseif n == 6\n        m = 64\n    elseif n == 7\n        m = 128\n    elseif\
    \ n == 8\n        m = 256\n    elseif n == 9\n        m = 512\n    elseif n ==\
    \ 10\n        m = 1024\n    elseif n == 11\n        m = 2048\n    elseif n ==\
    \ 12\n        m = 4096\n    elseif n == 13\n        m = 8192\n    elseif n ==\
    \ 14\n        m = 16384\n    elseif n == 15\n        m = 32768\n    elseif n ==\
    \ 16\n        m = 65536\n    elseif n == 17\n        m = 131072\n    elseif n\
    \ == 18\n        m = 262144\n    elseif n == 19\n        m = 524288\n    elseif\
    \ n == 20\n        m = 1048576\n    elseif n == 21\n        m = 2097152\n    elseif\
    \ n == 22\n        m = 4194304\n    elseif n == 23\n        m = 8388608\n    elseif\
    \ n == 24\n        m = 16777216\n    elseif n == 25\n        m = 33554432\n  \
    \  elseif n == 26\n        m = 67108864\n    elseif n == 27\n        m = 134217728\n\
    \    elseif n == 28\n        m = 268435456\n    elseif n == 29\n        m = 536870912\n\
    \    elseif n == 30\n        m = 1073741824\n    elseif n == 31\n        m = 2147483648\n\
    \    elseif n == 32\n        m = 4294967296\n    elseif n == 33\n        m = 8589934592\n\
    \    elseif n == 34\n        m = 17179869184\n    elseif n == 35\n        m =\
    \ 34359738368\n    elseif n == 36\n        m = 68719476736\n    elseif n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\
    \t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3,\
    \ 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\
    \t@test(candidate(31, 5) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3v7ypr0q.jl:1\nin expression starting at /tmp/tmp3v7ypr0q.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    x = modp(n>>1,\
    \ p)\n    x = x*x%p\n    if n&1 == 1\n        x = x*2%p\n    end\n    return x\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5)\
    \ == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    else\n        k = n\
    \ % p\n        q = n//p\n        if k%2 == 0\n            return (modp(k, p)^2\
    \ - q) % p\n        else\n            return ((modp(k, p)^2 - q) * (p-1)) % p\n\
    \        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\
    \t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    return rem(big(2)^n, p)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    elseif n % 2 == 0\n\
    \        return modp(n \xF7 2, p)^2 mod p\n    else\n        return (modp(n -\
    \ 1, p)^2 mod p) * modp(1, p) mod p\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"mod\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp35k3grga.jl:17\nin expression starting at /tmp/tmp35k3grga.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    n = mod(n, p)\n    r = 1\n    while n > 0\n        if\
    \ n % 2 == 1\n            r = mod(r * r, p)\n        end\n        n = n >> 1\n\
    \    end\n    return r\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\
    \t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptl2qtpe3.jl:29\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 1 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptl2qtpe3.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptl2qtpe3.jl:28\ntest set: Test\
    \ Failed at /tmp/tmptl2qtpe3.jl:30\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptl2qtpe3.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptl2qtpe3.jl:28\ntest set: Test\
    \ Failed at /tmp/tmptl2qtpe3.jl:32\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 1 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptl2qtpe3.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptl2qtpe3.jl:28\ntest set: Test\
    \ Failed at /tmp/tmptl2qtpe3.jl:34\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptl2qtpe3.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptl2qtpe3.jl:28\ntest set: Test\
    \ Failed at /tmp/tmptl2qtpe3.jl:35\n  Expression: candidate(31, 5) == 3\n   Evaluated:\
    \ 1 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptl2qtpe3."
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptl2qtpe3.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    n == 0 && return 1\n    n % 2 == 0 && return modp(n\xF7\
    2, p)^2 % p\n    return modp(n\xF72, p)^2 % p * 2 % p\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    iseven(n) && return 2\nusing Test\n\n@testset begin\n\
    \ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptj_yqvle.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptj_yqvle.jl:1\n\
    in expression starting at /tmp/tmptj_yqvle.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    n %= p\n    n %= p\n    res = 1\n    #print(\"n=\", n,\
    \ \" \", res)\n    for i in 1:n\n        res *= 2\n        res %= p\n        #print(\"\
    n=\", n, \" \", res)\n    end\n    res\nend\nusing Test\n\n@testset begin\n\n\
    candidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp902y34et.jl:31\n  Expression: candidate(1101,\
    \ 101) == 2\n   Evaluated: 29 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp902y34et.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp902y34et.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp902y34et.jl:35\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp902y34et.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp902y34et.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp902y34et.jl:36\n  Expression: candidate(31, 5) == 3\n   Evaluated:\
    \ 2 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp902y34et.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp902y34et.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp902y34et.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if p == 2\n        # special case\n        return 1\n\
    \    end\n    if n == 0\n        return 1\n    end\n    if n == 1\n        return\
    \ 2\n    end\n    # we don't want to overflow to get the right answer\n    r =\
    \ 1\n    b = 2\n    while n > 0\n        if n % 2 == 1\n            r = (r * b)\
    \ % p\n        end\n        n = div(n, 2)\n        b = (b * b) % p\n    end\n\
    \    return r\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    if n%2 == 0\n\
    \        return (modp(n/2, p)^2)%p\n    else\n        return (modp(n-1, p)*2)%p\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_81j1ik6.jl:28\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmp_81j1ik6.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp_81j1ik6.jl:18\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp_81j1ik6.jl:20\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_81j1ik6.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_81j1ik6.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp_81j1ik6.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmp_81j1ik6.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp_81j1ik6.jl:18\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp_81j1ik6.jl:20\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_81j1ik6.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_81j1ik6.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp_81j1ik6.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  MethodError: no method matching modp(::Float64, ::Int64)\n\
    \  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmp_81j1ik6.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp_81j1ik6.jl:18\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp_81j1ik6.jl:20\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_81j1ik6.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    a = modp(n\
    \ div 2, p)\n    a *= a\n    if n % 2 == 1\n        a *= 2\n    end\n    return\
    \ mod(a, p)\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp13bkz3mw.jl:17\nin expression starting at\
    \ /tmp/tmp13bkz3mw.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    r = 1\n    while n != 0\n        if rem(n, 2) == 1\n\
    \            r = (r * 2) % p\n        end\n        n = div(n, 2)\n    end\n  \
    \  return r\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_57n_fxd.jl:28\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_57n_fxd.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_57n_fxd.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp_57n_fxd.jl:29\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 32 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_57n_fxd.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_57n_fxd.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp_57n_fxd.jl:31\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 4 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_57n_fxd.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_57n_fxd.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp_57n_fxd.jl:32\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 8 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_57n_fxd.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_57n_fxd.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp_57n_fxd.jl:33\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_57n_"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_57n_fxd.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    return mod(2^n, p)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpjkp53fk1.jl:22\n  Expression: candidate(1101,\
    \ 101) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjkp53fk1.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjkp53fk1.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpjkp53fk1.jl:25\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjkp53fk1.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjkp53fk1.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjkp53fk1.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if p == 1\n        return 0\n    end\n    a = 1\n   \
    \ for _ in 1:n\n        a = mod(a*2, p)\n    end\n    return a\nend\n```\nusing\
    \ Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\
    \t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3,\
    \ 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\
    \t@test(candidate(31, 5) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprwrykx75.jl:23\nin expression starting at\
    \ /tmp/tmprwrykx75.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    if n % 2 ==\
    \ 0\n        return modp(div(n, 2), p)^2 % p\n    else\n        return 2 * modp(div(n-1,\
    \ 2), p)^2 % p\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\
    \t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    elseif n < 0\n     \
    \   return modp(n+1, p) * modp(p-1, p)\n    else\n        if bitlength(n) == 1\n\
    \            return n\n        else\n            return modp(2*modp(n>>1, p),\
    \ p)^2\n        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t\
    @test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpg1dom_tw.jl:31\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  UndefVarError: bitlength not defined\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpg1dom_tw.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg1dom_tw.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg1dom_tw.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpg1dom_tw.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  UndefVarError: bitlength not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpg1dom_tw.jl:19\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg1dom_tw.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg1dom_tw.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpg1dom_tw.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  UndefVarError: bitlength not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpg1dom_tw.jl:19\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg1dom_tw.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg1dom_tw.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpg1dom_tw.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(100, 101) == 1\n  UndefVarError: bitlength not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpg1dom_tw.jl:19\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg1dom_tw.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    if mod(n, 2)\
    \ == 0\n        a = modp(div(n, 2), p)\n        return mod(a*a, p)\n    else\n\
    \        a = modp(div(n, 2), p)\n        return mod(2*a*a, p)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) ==\
    \ 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t\
    @test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    if n == 1\n\
    \        return 2\n    end\n    temp = modp(div(n, 2), p)\n    res = rem(temp*temp,\
    \ p)\n    if mod(n, 2) == 1\n        res = rem(res*2, p)\n    end\n    return\
    \ res\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    elseif p == 1\n    \
    \    return 0\n    elseif n == 1\n        return 1\n    elseif n < 0\n       \
    \ return modp(-n, p)\n    else\n        u, v = p, n\n        a, b, c, d = 1, 0,\
    \ 0, 1\n        while u != 0\n            q, r = divrem(v, u)\n            v,\
    \ u = u, r\n            a, b, c, d = c, d, a - q*c, b - q*d\n        end\n   \
    \     if b < 0\n            b += p\n        end\n        return b\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) ==\
    \ 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t\
    @test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppb13a6ak.jl:41\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppb13a6ak.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppb13a6ak.jl:40\ntest set: Test\
    \ Failed at /tmp/tmppb13a6ak.jl:42\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: -8 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppb13a6ak.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppb13a6ak.jl:40\ntest set: Test\
    \ Failed at /tmp/tmppb13a6ak.jl:44\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 10 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppb13a6ak.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppb13a6ak.jl:40\ntest set: Test\
    \ Failed at /tmp/tmppb13a6ak.jl:46\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppb13a6ak.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppb13a6ak.jl:40\ntest set: Test\
    \ Failed at /tmp/tmppb13a6ak.jl:47\n  Expression: candidate(31, 5) == 3\n   Evaluated:\
    \ -1 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppb13a6"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppb13a6ak.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    elseif n == 1\n    \
    \    return 2\n    else\n        if n % 2 == 0\n            half = modp(n/2, p)\n\
    \            return half^2 % p\n        else\n            half = modp((n-1)/2,\
    \ p)\n            return (half^2 * 2) % p\n        end\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpysg2j63n.jl:33\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpysg2j63n.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpysg2j63n.jl:23\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpysg2j63n.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpysg2j63n.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpysg2j63n.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpysg2j63n.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpysg2j63n.jl:23\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpysg2j63n.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpysg2j63n.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpysg2j63n.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  MethodError: no method matching modp(::Float64, ::Int64)\n\
    \  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpysg2j63n.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpysg2j63n.jl:23\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpysg2j63n.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpysg2j63n.jl"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpysg2j63n.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    return mod(2^n, p)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmphgfrppue.jl:22\n  Expression: candidate(1101,\
    \ 101) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphgfrppue.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphgfrppue.jl:20\ntest set: Test\
    \ Failed at /tmp/tmphgfrppue.jl:25\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphgfrppue.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphgfrppue.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphgfrppue.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    s = 1\n    while n > 0\n        if n % 2 == 1\n     \
    \       s = (s * 2) % p\n        end\n        n = div(n, 2)\n    end\n    return\
    \ s\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmulr89ri.jl:28\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmulr89ri.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmulr89ri.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpmulr89ri.jl:29\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 32 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmulr89ri.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmulr89ri.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpmulr89ri.jl:31\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 4 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmulr89ri.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmulr89ri.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpmulr89ri.jl:32\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 8 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmulr89ri.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmulr89ri.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpmulr89ri.jl:33\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmulr8"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmulr89ri.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    # return mod(Int64(2^n), p)\n    # return mod(n^n, p)\n\
    \    return 2^(mod(n, p-1)) % p\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if p == 2 \n        return 1\n    end\n    bin = base(2,\
    \ n)\n    s = 0\n    r = 1\n    for i in 1:length(bin)\n        if bin[i] == 1\n\
    \            r = r * 2^s\n            r = r mod p\n        end\n        s = s\
    \ + 1\n    end\n    return r\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t\
    @test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"mod\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4b_q25ko.jl:23\nin expression starting at /tmp/tmp4b_q25ko.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    return ifelse(n == 0, 1, ifelse(n == 1, 2, (2 * modp(n-1,\
    \ p)) % p))\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n  if n == 0\n    return 1\n  else\n    if n == 1\n      return\
    \ 2\n    else\n      return (2 * modp(n-1, p)) % p\n    end\n  end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\
    \t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3,\
    \ 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\
    \t@test(candidate(31, 5) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    b = 0\n   \
    \ q = n\n    while q >= p\n        if q%2 == 1\n            b += 1\n        end\n\
    \        q = q >> 1\n    end\n    if b % 2 == 0\n        return 2^q % p\n    else\n\
    \        return -2^q % p\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpxli1t6yt.jl:37\n  Expression: candidate(1101,\
    \ 101) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxli1t6yt.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxli1t6yt.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpxli1t6yt.jl:40\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxli1t6yt.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxli1t6yt.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpxli1t6yt.jl:41\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 3 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxli1t6yt.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxli1t6yt.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpxli1t6yt.jl:42\n  Expression: candidate(31, 5) == 3\n   Evaluated:\
    \ -3 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxli1t6yt.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxli1t6yt.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxli1t6yt.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    @assert p>=3\n    l = n\n    @inbounds for i in 1:nbits(l)-1\n\
    \        l = l*l\n        if isodd(l)\n            l = l*n\n        end\n    \
    \    l %= p\n    end\n    l\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t\
    @test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp9xydkm01.jl:30\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  UndefVarError: nbits not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp9xydkm01.jl:16\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9xydkm01.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9xydkm01.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp9xydkm01.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  UndefVarError: nbits not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp9xydkm01.jl:16\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9xydkm01.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9xydkm01.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp9xydkm01.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(0, 101) == 1\n  UndefVarError: nbits not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp9xydkm01.jl:16\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9xydkm01.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9xydkm01.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp9xydkm01.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  UndefVarError: nbits not defined\n  Stacktrace:\n \
    \  [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp9xydkm01.jl:16\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9xydkm01.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    p1 = p - 1\n    n1 = n % p1\n    if n1 == 0 return 1\n\
    \    if n1 == 1 return n % p\n    # now, n1 >= 2\n    b = Int64(log2(n1))\n  \
    \  # compute x^(2^b)\n    x = modp(n, 2^b, p)\n    return x^2 % p\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\
    \t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3,\
    \ 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\
    \t@test(candidate(31, 5) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpickn5j4f.jl:1\nin expression starting at /tmp/tmpickn5j4f.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    n == 0 && return 1\n    n%2 == 0 && return (modp(n/2,\
    \ p)^2)%p\n    return (2*modp(n-1, p))%p\nend\nusing Test\n\n@testset begin\n\n\
    candidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpzjh5h08c.jl:23\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpzjh5h08c.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpzjh5h08c.jl:15\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpzjh5h08c.jl:16\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpzjh5h08c.jl:23 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpzjh5h08c.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpzjh5h08c.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpzjh5h08c.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpzjh5h08c.jl:15\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpzjh5h08c.jl:16\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpzjh5h08c.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpzjh5h08c.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpzjh5h08c.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  MethodError: no method matching modp(::Float64, ::Int64)\n\
    \  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpzjh5h08c.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpzjh5h08c.jl:15\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpzjh5h08c.jl:16\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzjh5h08c.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if p == 2\n        return 1\n    end\n    return ((2^n)-1)\
    \ % p\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2l_580rl.jl:24\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 2 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2l_580rl.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2l_580rl.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp2l_580rl.jl:25\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: -1 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2l_580rl.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2l_580rl.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp2l_580rl.jl:26\n  Expression: candidate(0, 101) == 1\n   Evaluated:\
    \ 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2l_580rl.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2l_580rl.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp2l_580rl.jl:27\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 7 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2l_580rl.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2l_580rl.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp2l_580rl.jl:28\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: -1 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2l_"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2l_580rl.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    n %= p\n    result = 1\n    while n > 0\n        if n\
    \ & 1 == 1\n            result = (result * 2) % p\n        end\n        n >>=\
    \ 1\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpaz6makhs.jl:29\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaz6makhs.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaz6makhs.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpaz6makhs.jl:30\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 32 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaz6makhs.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaz6makhs.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpaz6makhs.jl:32\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 4 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaz6makhs.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaz6makhs.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpaz6makhs.jl:33\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 8 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaz6makhs.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaz6makhs.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpaz6makhs.jl:34\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaz6ma"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaz6makhs.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    if n % 2 ==\
    \ 0\n        return ((modp(n \xF7 2, p))^2) % p\n    else\n        return ((modp(n\
    \ \xF7 2, p))^2 * 2) % p\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    else\n        z = modp(div(n,\
    \ 2), p)\n        z = z^2 - p * div(z^2, p) # numerics in modpow\n        if n\
    \ % 2 == 0\n            return z\n        else\n            return z * 2 - p *\
    \ div(z * 2, p)\n        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    result = 1 \n    if n == 0 \n        return result \n\
    \    end\n    if n == 1 \n        return 2\n    end\n    while n > 1 \n      \
    \  if n % 2 == 0 \n            n = n / 2 \n            result = (result * 2) %\
    \ p \n        else \n            n = n - 1 \n            result = (result * 2)\
    \ % p \n        end\n    end\n    return result \nend\n```\nusing Test\n\n@testset\
    \ begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe8h_cttu.jl:32\nin expression starting at\
    \ /tmp/tmpe8h_cttu.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    else\n        a = modp(div(n,\
    \ 2), p)\n        a = a*a % p\n        if n % 2 == 1\n            a = a*2 % p\n\
    \        end\n        return a\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    elseif n == 1\n    \
    \    return 1\n    elseif n == 2\n        return 2\n    else\n        if n%2 ==\
    \ 0\n            return (modp(n/2, p)^2)%p\n        else\n            return (2*modp(n-1,\
    \ p))%p\n        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp9xiy6qlh.jl:33\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9xiy6qlh.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9xiy6qlh.jl:32\ntest set: Error\
    \ During Test at /tmp/tmp9xiy6qlh.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmp9xiy6qlh.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp9xiy6qlh.jl:22\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp9xiy6qlh.jl:24\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9xiy6qlh.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9xiy6qlh.jl:32\ntest set:\
    \ Test Failed at /tmp/tmp9xiy6qlh.jl:36\n  Expression: candidate(3, 11) == 8\n\
    \   Evaluated: 4 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9xiy6qlh.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9xiy6qlh.jl:32\ntest set: Error\
    \ During Test at /tmp/tmp9xiy6qlh.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(100, 101) == 1\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmp9xiy6qlh.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp9xiy6qlh.jl:22\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9xiy6qlh.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    n = n % p\n    #if n < 0\n    #    n += p\n    #end\n\
    \    return n\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpiyugncd1.jl:26\n  Expression: candidate(1101,\
    \ 101) == 2\n   Evaluated: 91 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiyugncd1.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiyugncd1.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpiyugncd1.jl:27\n  Expression: candidate(0, 101) == 1\n   Evaluated:\
    \ 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiyugncd1.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiyugncd1.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpiyugncd1.jl:28\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 3 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiyugncd1.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiyugncd1.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpiyugncd1.jl:29\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 100 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiyugncd1.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiyugncd1.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpiyugncd1.jl:30\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiyugncd1.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n  if (n == 0) return 1 else\n  if (n == 1) return 2 else\n\
    \  if (n == 2) return 4 else\n  if (n == 3) return 8 else\n  if (n % 2 == 0) return\
    \ modp(n div 2, p)^2 - (1 mod p) else\n  return 2 * modp(n - 1, p) - (1 mod p)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5)\
    \ == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpautwjm4f.jl:18\nin expression starting at\
    \ /tmp/tmpautwjm4f.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    else\n        q, r =\
    \ divrem(n, 2)\n        if r == 0\n            return modp(q, p)^2 % p\n     \
    \   else\n            return modp(q, p)^2 % p * 2 % p\n        end\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5)\
    \ == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    a = 1\n    b = 2\n    while n > 0\n        if n % 2 ==\
    \ 1\n            a = (a * b) % p\n        end\n        n = div(n, 2)\n       \
    \ b = (b * b) % p\n    end\n    return a\nend\nusing Test\n\n@testset begin\n\n\
    candidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    prod = 1\n    d = 2\n    while d <= n\n        prod =\
    \ (prod * d) % p\n        d = d * 2\n    end\n    return prod\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph163cwn2.jl:27\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 2 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph163cwn2.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph163cwn2.jl:26\ntest set: Test\
    \ Failed at /tmp/tmph163cwn2.jl:28\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 69 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph163cwn2.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph163cwn2.jl:26\ntest set: Test\
    \ Failed at /tmp/tmph163cwn2.jl:30\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 2 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph163cwn2.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph163cwn2.jl:26\ntest set: Test\
    \ Failed at /tmp/tmph163cwn2.jl:31\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 89 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph163cwn2.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph163cwn2.jl:26\ntest set: Test\
    \ Failed at /tmp/tmph163cwn2.jl:33\n  Expression: candidate(31, 5) == 3\n   Evaluated:\
    \ 4 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph163"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph163cwn2.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        modp = 1\n    else\n        b = 2\n\
    \        modp = 2\n        for i in 1:n-1\n            modp = (modp*b) % p\n \
    \       end\n    end\n    return modp\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n  result = 1 \n  currentPower = n \n  while currentPower\
    \ != 0 \n    if rem(currentPower, 2) == 1 \n      result = mod(result * n, p)\
    \ \n    end \n    n = mod(n * n, p) \n    currentPower = div(currentPower, 2)\
    \ \n  end \n  return result \nend \nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmph7297rmi.jl:30\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 2 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph7297rmi.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph7297rmi.jl:29\ntest set: Test\
    \ Failed at /tmp/tmph7297rmi.jl:31\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 91 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph7297rmi.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph7297rmi.jl:29\ntest set: Test\
    \ Failed at /tmp/tmph7297rmi.jl:33\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 5 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph7297rmi.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph7297rmi.jl:29\ntest set: Test\
    \ Failed at /tmp/tmph7297rmi.jl:35\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph7297rmi.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph7297rmi.jl:29\ntest set: Test\
    \ Failed at /tmp/tmph7297rmi.jl:36\n  Expression: candidate(31, 5) == 3\n   Evaluated:\
    \ 1 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph7297rmi"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph7297rmi.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    b = 1\n    for i = 1:n\n        b = (b*2) % p\n    end\n\
    \    return b\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n < 0\n        n = p - (-n % p) \n    end\n    return\
    \ mod2n(n, p)\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9ba6shiu.jl:24\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  UndefVarError: mod2n not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp9ba6shiu.jl:17\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9ba6shiu.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9ba6shiu.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp9ba6shiu.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  UndefVarError: mod2n not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp9ba6shiu.jl:17\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9ba6shiu.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9ba6shiu.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp9ba6shiu.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(0, 101) == 1\n  UndefVarError: mod2n not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp9ba6shiu.jl:17\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9ba6shiu.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9ba6shiu.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp9ba6shiu.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  UndefVarError: mod2n not defined\n  Stacktrace:\n \
    \  [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp9ba6shiu.jl:17\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9ba6shiu.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if p == 1\n        return 0\n    end\n    result = 1\n\
    \    b = n\n    while b > 0\n        # invariant: result = b^n mod p\n       \
    \ if b % 2 == 1\n            result = mod(result * n, p)\n        end\n      \
    \  n = mod(n * n, p)\n        b = div(b, 2)\n    end\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) ==\
    \ 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t\
    @test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphvqsvutl.jl:34\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 2 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphvqsvutl.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphvqsvutl.jl:33\ntest set: Test\
    \ Failed at /tmp/tmphvqsvutl.jl:35\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 91 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphvqsvutl.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphvqsvutl.jl:33\ntest set: Test\
    \ Failed at /tmp/tmphvqsvutl.jl:37\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 5 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphvqsvutl.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphvqsvutl.jl:33\ntest set: Test\
    \ Failed at /tmp/tmphvqsvutl.jl:39\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphvqsvutl.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphvqsvutl.jl:33\ntest set: Test\
    \ Failed at /tmp/tmphvqsvutl.jl:40\n  Expression: candidate(31, 5) == 3\n   Evaluated:\
    \ 1 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphvqsvutl"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphvqsvutl.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n < 0\n        return n % p\n    end\n    n %= p\n\
    \    x = 1\n    while n > 0\n        if n % 2 == 1\n            x = (x * 2) %\
    \ p\n        end\n        n = n >> 1\n    end\n    return x\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo6kgveya.jl:32\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo6kgveya.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo6kgveya.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpo6kgveya.jl:33\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 32 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo6kgveya.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo6kgveya.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpo6kgveya.jl:35\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 4 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo6kgveya.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo6kgveya.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpo6kgveya.jl:36\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 8 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo6kgveya.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo6kgveya.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpo6kgveya.jl:37\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo6kgv"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo6kgveya.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    else\n        return\
    \ (2 * modp(n-1, p)) % p\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n==0\n        r = 1\n    else\n        r = modp(n-1,\
    \ p)\n        r = mod(2*r, p)\n    end\n    return r\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    else\n        return\
    \ (2*modp(n-1, p)) % p\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    ret = 1\n    for i in (1:n)\n        ret = (ret * 2)\
    \ % p\n    end\n    return ret\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0 \n        return 1\n    end\n    if n%2 ==\
    \ 0\n        return mod(modp(n\xF72, p)^2, p)\n    else\n        return mod(modp(n\xF7\
    2, p)^2*2, p)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\
    \t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    res = 1\n    n_mod_p = n % p\n    if n_mod_p == 0\n \
    \       return res\n    end\n    while n_mod_p > 0\n        res = (res * 2) %\
    \ p\n        n_mod_p -= 1\n    end\n    return res\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcvnyzn6b.jl:31\n  Expression: candidate(1101,\
    \ 101) == 2\n   Evaluated: 29 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcvnyzn6b.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcvnyzn6b.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpcvnyzn6b.jl:35\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcvnyzn6b.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcvnyzn6b.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpcvnyzn6b.jl:36\n  Expression: candidate(31, 5) == 3\n   Evaluated:\
    \ 2 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcvnyzn6b.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcvnyzn6b.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcvnyzn6b.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if p == 1\n        return 0\n    end\n    if n == 0\n\
    \        return 1\n    end\n    if n == 1\n        return 2 % p\n    end\n   \
    \ if n == 2\n        return 4 % p\n    end\n    if n % 2 == 0\n        return\
    \ (modp(n / 2, p) ^ 2) % p\n    else\n        return (2 * modp(n-1, p)) % p\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpt0s0yip4.jl:38\n  Test threw exception\n\
    \  Expression: candidate(1101, 101) == 2\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpt0s0yip4.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpt0s0yip4.jl:27\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpt0s0yip4.jl:29\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpt0s0yip4.jl:38 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpt0s0yip4.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpt0s0yip4.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(100, 101) == 1\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpt0s0yip4.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpt0s0yip4.jl:27\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt0s0yip4.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt0s0yip4.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpt0s0yip4.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(30, 5) == 4\n  MethodError: no method matching modp(::Float64, ::Int64)\n\
    \  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpt0s0yip4.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpt0s0yip4.jl:27\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt0s0yip4.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/T"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt0s0yip4.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    r = modp(n\
    \ div 2, p)\n    r2 = (r*r) % p\n    if n % 2 == 0\n        return r2\n    else\n\
    \        return (r2*2) % p\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjqqc3r4p.jl:17\nin expression starting at\
    \ /tmp/tmpjqqc3r4p.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    n = n % p\n    if n < 0\n        n += p\n    end\n  \
    \  r = 1\n    while n > 0\n        if n % 2 == 1\n            r = (r * 2) % p\n\
    \        end\n        n = n >> 1\n    end\n    return r\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxo635hf1.jl:32\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxo635hf1.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxo635hf1.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpxo635hf1.jl:33\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 32 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxo635hf1.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxo635hf1.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpxo635hf1.jl:35\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 4 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxo635hf1.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxo635hf1.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpxo635hf1.jl:36\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 8 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxo635hf1.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxo635hf1.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpxo635hf1.jl:37\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxo635"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxo635hf1.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    n %= p\n    nn = n*n\n    return nn % p\nend\n@jit(nopython=true)\n\
    using Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) ==\
    \ 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t\
    @test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @jit not defined\nin expression starting\
    \ at /tmp/tmp7fcu02wp.jl:18\nin expression starting at /tmp/tmp7fcu02wp.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    res = 1\n    while n > 0\n        if n % 2 == 1\n   \
    \         res = (res * base) % p\n        end\n        base = (base * base) %\
    \ p\n        n = n // 2\n    end\n    return res\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjbe_lwb4.jl:29\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  UndefVarError: base not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpjbe_lwb4.jl:0\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjbe_lwb4.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjbe_lwb4.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpjbe_lwb4.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  UndefVarError: base not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpjbe_lwb4.jl:0\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjbe_lwb4.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjbe_lwb4.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpjbe_lwb4.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  UndefVarError: base not defined\n  Stacktrace:\n  \
    \ [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpjbe_lwb4.jl:0\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjbe_lwb4.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjbe_lwb4.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpjbe_lwb4.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(100, 101) == 1\n  UndefVarError: base not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpjbe_lwb4.jl:0\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [i"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjbe_lwb4.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    tmp = modp(div(n,\
    \ 2), p)\n    if n % 2 == 0\n        return (tmp * tmp) % p\n    else\n      \
    \  return (tmp * tmp * a) % p\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpykc0h42q.jl:29\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  UndefVarError: a not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpykc0h42q.jl:21\n   [2] modp(n::Int64,\
    \ p::Int64)\n     @ Main /tmp/tmpykc0h42q.jl:17\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpykc0h42q.jl:29 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpykc0h42q.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpykc0h42q.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  UndefVarError: a not defined\n  Stacktrace:\n \
    \  [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpykc0h42q.jl:21\n   [2] modp(n::Int64,\
    \ p::Int64) (repeats 10 times)\n     @ Main /tmp/tmpykc0h42q.jl:17\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpykc0h42q.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpykc0h42q.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpykc0h42q.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  UndefVarError: a not defined\n  Stacktrace:\n   [1]\
    \ modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpykc0h42q.jl:21\n   [2] modp(n::Int64,\
    \ p::Int64)\n     @ Main /tmp/tmpykc0h42q.jl:17\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpykc0h42q.jl:32 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpykc0h42q.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpykc0h42q.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(100, 101) == 1\n  Und"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpykc0h42q.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    # NOTE: this is not efficient\n    #nmod = mod(n, p)\n\
    \    #A = Array{Int64}(1)\n    #A[1] = 1\n    #for i = 1:nmod\n    #    A = append!(A,\
    \ (A[i]*2)%p)\n    #end\n    #return A[end]\n    res = 1\n    for i = 1:n\n  \
    \      res = (res*2)%p\n    end\n    return res\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    if n == 1\n\
    \        return 2\n    end\n    b = modp(n \xF7 2, p)\n    if n % 2 == 0\n   \
    \     return (b * b) % p\n    else\n        return (2 * b * b) % p\n    end\n\
    end\n# This could be improved with a list comprehension.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    if n == 1\n\
    \        return 2\n    end\n    a = modp(n \xF7 2, p)\n    if n % 2 == 0\n   \
    \     return a^2 % p\n    else\n        return 2*a^2 % p\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\
    \t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3,\
    \ 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\
    \t@test(candidate(31, 5) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    nn = 1\n    n = n % p\n    for i = 1:n\n        nn =\
    \ (nn * 2) % p\n    end\n    return nn\nend\nusing Test\n\n@testset begin\n\n\
    candidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpvwlp6y7v.jl:27\n  Expression: candidate(1101,\
    \ 101) == 2\n   Evaluated: 29 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvwlp6y7v.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvwlp6y7v.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpvwlp6y7v.jl:31\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvwlp6y7v.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvwlp6y7v.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpvwlp6y7v.jl:32\n  Expression: candidate(31, 5) == 3\n   Evaluated:\
    \ 2 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvwlp6y7v.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvwlp6y7v.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvwlp6y7v.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    x = 1\n    a = 2\n    while n>0\n        if n % 2 ==\
    \ 1\n            x = (x*a) % p\n        end\n        a = (a*a) % p\n        n\
    \ = div(n, 2)\n    end\n    return x\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    if n % 2 ==\
    \ 0\n        return modp(n/2, p)^2 % p\n    else\n        return 2 * modp(n -\
    \ 1, p) % p\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\
    \t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpdrcn3pe8.jl:28\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpdrcn3pe8.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpdrcn3pe8.jl:18\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpdrcn3pe8.jl:20\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdrcn3pe8.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdrcn3pe8.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpdrcn3pe8.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpdrcn3pe8.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpdrcn3pe8.jl:18\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpdrcn3pe8.jl:20\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdrcn3pe8.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdrcn3pe8.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpdrcn3pe8.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  MethodError: no method matching modp(::Float64, ::Int64)\n\
    \  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpdrcn3pe8.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpdrcn3pe8.jl:18\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpdrcn3pe8.jl:20\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdrcn3pe8.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        modp = 1\n    elseif mod(n, 2) ==\
    \ 0\n        modp = modp(div(n, 2), p)^2 % p\n    else\n        modp = n * modp(n\
    \ - 1, p) % p\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\
    \t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpi244of7j.jl:27\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  UndefVarError: modp not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpi244of7j.jl:0\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi244of7j.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi244of7j.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpi244of7j.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  UndefVarError: modp not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpi244of7j.jl:0\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi244of7j.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi244of7j.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpi244of7j.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  UndefVarError: modp not defined\n  Stacktrace:\n  \
    \ [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpi244of7j.jl:0\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi244of7j.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi244of7j.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpi244of7j.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(100, 101) == 1\n  UndefVarError: modp not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpi244of7j.jl:0\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [i"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi244of7j.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    # see https://en.wikipedia.org/wiki/Modular_exponentiation\n\
    \    if n == 0\n        return 1\n    elseif n % 2 == 0\n        return modp(n/2,\
    \ p)^2 % p\n    else\n        return modp(n-1, p) * modp(n-1, p) * 2 % p\n   \
    \ end\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpg1xez7rw.jl:28\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpg1xez7rw.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpg1xez7rw.jl:18\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpg1xez7rw.jl:20\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpg1xez7rw.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpg1xez7rw.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpg1xez7rw.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpg1xez7rw.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpg1xez7rw.jl:18\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpg1xez7rw.jl:20\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpg1xez7rw.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpg1xez7rw.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpg1xez7rw.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  MethodError: no method matching modp(::Float64, ::Int64)\n\
    \  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpg1xez7rw.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpg1xez7rw.jl:18\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpg1xez7rw.jl:20\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg1xez7rw.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    (x, y) = extended_euclid(p, 2)\n    ans = 1\n    while\
    \ n > 0\n        if mod(n, 2) == 1\n            ans = ans * 2 % p\n        end\n\
    \        n = div(n, 2)\n        if n > 0\n            if mod(n, 2) == 1\n    \
    \            y = y * x % p\n            end\n            n = div(n, 2)\n     \
    \       x = x * x % p\n        end\n    end\n    return y\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6oem3xx5.jl:36\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  UndefVarError: extended_euclid not defined\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp6oem3xx5.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6oem3xx5.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6oem3xx5.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp6oem3xx5.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  UndefVarError: extended_euclid not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp6oem3xx5.jl:14\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6oem3xx5.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6oem3xx5.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp6oem3xx5.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(0, 101) == 1\n  UndefVarError: extended_euclid not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp6oem3xx5.jl:14\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6oem3xx5.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6oem3xx5.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp6oem3xx5.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  UndefVarError: extended_euclid not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp6oem3xx5.jl:14\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/s"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6oem3xx5.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    elseif n == 1\n    \
    \    return 2\n    elseif n % 2 == 0\n        a = modp(n \xF7 2, p)\n        return\
    \ (a^2) % p\n    else\n        a = modp(n - 1, p)\n        return (2 * a) % p\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    elseif n == 1\n    \
    \    return 2\n    else\n        # use squaring to avoid overflows\n        if\
    \ n % 2 == 0\n            return mod(4 * modp(n//2, p), p)\n        else\n   \
    \         return mod(2 * modp(n - 1, p), p)\n        end\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\
    \t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3,\
    \ 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\
    \t@test(candidate(31, 5) == 3)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpdhdbyuus.jl:32\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  MethodError: no method matching modp(::Rational{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpdhdbyuus.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpdhdbyuus.jl:21\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpdhdbyuus.jl:23\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdhdbyuus.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdhdbyuus.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpdhdbyuus.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  MethodError: no method matching modp(::Rational{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpdhdbyuus.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpdhdbyuus.jl:21\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpdhdbyuus.jl:23\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdhdbyuus.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdhdbyuus.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpdhdbyuus.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  MethodError: no method matching modp(::Rational{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpdhdbyuus.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpdhdbyuus.jl:21\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpdhdbyuus.jl:23\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdhdbyuus.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0 \n        return 1\n    elseif n == 1\n   \
    \     return 2\n    elseif n == 2\n        return 4\n    elseif n < 0\n      \
    \  return 1 / modp(-n, p)\n    elseif n % 2 == 0 \n        return sqrt(modp(n\
    \ \xF7 2, p))\n    else \n        return 2 * modp(n - 1, p)\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\
    \t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3,\
    \ 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\
    \t@test(candidate(31, 5) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa21_2yii.jl:33\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 8 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa21_2yii.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa21_2yii.jl:32\ntest set: Error\
    \ During Test at /tmp/tmpa21_2yii.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  InexactError: Int64(1.4142135623730951)\n  Stacktrace:\n\
    \    [1] Int64\n      @ ./float.jl:812 [inlined]\n    [2] convert\n      @ ./number.jl:7\
    \ [inlined]\n    [3] modp(n::Int64, p::Int64) (repeats 2 times)\n      @ Main\
    \ /tmp/tmpa21_2yii.jl:23\n    [4] modp(n::Int64, p::Int64)\n      @ Main /tmp/tmpa21_2yii.jl:25\n\
    \    [5] modp(n::Int64, p::Int64) (repeats 3 times)\n      @ Main /tmp/tmpa21_2yii.jl:23\n\
    \    [6] modp(n::Int64, p::Int64)\n      @ Main /tmp/tmpa21_2yii.jl:25\n    [7]\
    \ modp(n::Int64, p::Int64)\n      @ Main /tmp/tmpa21_2yii.jl:23\n    [8] modp(n::Int64,\
    \ p::Int64)\n      @ Main /tmp/tmpa21_2yii.jl:25\n    [9] modp(n::Int64, p::Int64)\
    \ (repeats 2 times)\n      @ Main /tmp/tmpa21_2yii.jl:23\n   [10] modp(n::Int64,\
    \ p::Int64)\n      @ Main /tmp/tmpa21_2yii.jl:25\n   [11] macro expansion\n  \
    \    @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [12] macro expansion\n      @ /tmp/tmpa21_2yii.jl:34 [inlined]\n\
    \   [13] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [14] top-level scope\n      @ /tmp/tmpa21_2yii.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpa21_2yii.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(100, 101) == 1\n  InexactError: Int64(2.8284271247461903)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7\
    \ [inlined]\n   [3] modp(n::Int64, p::Int64) (repeats 3 times)\n     @ Main /tmp/tmpa21_2yii.jl:23\n\
    \   [4] modp(n::Int64, p::Int64)\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa21_2yii.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    n = n % p\n    result = 1\n    while n > 0\n        if\
    \ bitstring(n)[end] == '1'\n            result = result * 2 % p\n        end\n\
    \        n = div(n, 2)\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4cgdadid.jl:29\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4cgdadid.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4cgdadid.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp4cgdadid.jl:30\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 32 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4cgdadid.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4cgdadid.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp4cgdadid.jl:32\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 4 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4cgdadid.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4cgdadid.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp4cgdadid.jl:33\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 8 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4cgdadid.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4cgdadid.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp4cgdadid.jl:34\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4cgda"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4cgdadid.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    if n < 0\n\
    \        return modp(-n, p)\n    end\n    if n%2 == 0\n        q = modp(n/2, p)\n\
    \        return mod(q*q, p)\n    else\n        return mod(modp(n-1, p)*modp(n,\
    \ p), p)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t\
    @test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpn2dges2e.jl:32\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpn2dges2e.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpn2dges2e.jl:21\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpn2dges2e.jl:24\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpn2dges2e.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpn2dges2e.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpn2dges2e.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpn2dges2e.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpn2dges2e.jl:21\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpn2dges2e.jl:24\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpn2dges2e.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpn2dges2e.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpn2dges2e.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  MethodError: no method matching modp(::Float64, ::Int64)\n\
    \  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpn2dges2e.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpn2dges2e.jl:21\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpn2dges2e.jl:24\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn2dges2e.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if p == 1\n        return 0\n    end\n    p_inv = modinv(2,\
    \ p)\n    if n == 0\n        return 1\n    elseif n == 1\n        return 2\n \
    \   elseif n % 2 == 0\n        return modp(n / 2, p)^2 % p\n    else\n       \
    \ return (modp(n - 1, p) * 2) % p\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp2ksghpac.jl:33\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  UndefVarError: modinv not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp2ksghpac.jl:17\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2ksghpac.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2ksghpac.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp2ksghpac.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  UndefVarError: modinv not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp2ksghpac.jl:17\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2ksghpac.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2ksghpac.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp2ksghpac.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(0, 101) == 1\n  UndefVarError: modinv not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp2ksghpac.jl:17\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2ksghpac.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2ksghpac.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp2ksghpac.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  UndefVarError: modinv not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp2ksghpac.jl:17\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2ksghpac.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if p == 2 \n        if n > 1\n            return 1\n\
    \        else\n            return 0\n        end\n    end\n    if n == 0\n   \
    \     return 1\n    end\n    if p == 2147483647\n        if n < 1024\n       \
    \     return two_by_n[n]\n        else\n            return two_by_n[n%1024]\n\
    \        end\n    end\n    out = 1\n    n = n % (p-1)\n    for i in range(1, n+1)\n\
    \        out = (out*2) % p\n    end\n    return out\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpuhdel5ju.jl:43\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 1 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuhdel5ju.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuhdel5ju.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpuhdel5ju.jl:44\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuhdel5ju.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuhdel5ju.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpuhdel5ju.jl:46\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 5 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuhdel5ju.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuhdel5ju.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpuhdel5ju.jl:47\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuhdel5ju.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuhdel5ju.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpuhdel5ju.jl:48\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 3 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuhdel5"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuhdel5ju.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    res = 1\n    while n != 0\n        if n % 2 == 1\n  \
    \          res = (res * 2) % p\n        end\n        n = n / 2\n    end\n    return\
    \ res\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcjwzvsv1.jl:28\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 2 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcjwzvsv1.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcjwzvsv1.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpcjwzvsv1.jl:31\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 2 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcjwzvsv1.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcjwzvsv1.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpcjwzvsv1.jl:32\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcjwzvsv1.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcjwzvsv1.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpcjwzvsv1.jl:33\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 2 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcjwzvsv1.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcjwzvsv1.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpcjwzvsv1.jl:34\n  Expression: candidate(31, 5) == 3\n   Evaluated:\
    \ 2 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcjwzvsv1.j"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcjwzvsv1.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n  if n == 0\n    return 1\n  elseif n == 1\n    return 2\n\
    \  else\n    return (2 * modp(n-1, p)) % p\n  end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    bits = bitstring(n)\n    for i in 2:length(bits)\n  \
    \      if bits[i] == '1'\n            n = n*n % p\n        end\n    end\n    return\
    \ n\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpv72uhiwr.jl:27\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 1 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv72uhiwr.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv72uhiwr.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpv72uhiwr.jl:28\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv72uhiwr.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv72uhiwr.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpv72uhiwr.jl:29\n  Expression: candidate(0, 101) == 1\n   Evaluated:\
    \ 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv72uhiwr.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv72uhiwr.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpv72uhiwr.jl:30\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 4 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv72uhiwr.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv72uhiwr.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpv72uhiwr.jl:32\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv72uhiwr"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv72uhiwr.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    r = 1\n    if n &gt; 0\n        if p &gt;= 3037000500\n\
    \            r = Int64(BigInt(2)^n % p)\n        else\n            for i in 1:n\n\
    \                r = mod2(r, p)\n            end\n        end\n    end\n    return\
    \ r\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmporsfdrl1.jl:16\nin expression starting at /tmp/tmporsfdrl1.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0 \n        return 1\n    elseif n%2 == 0 \n\
    \        return sqr(modp(n \xF7 2, p)) % p\n    else \n        return (modp(n\
    \ \xF7 2, p) * 2) % p\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpuoj3sqvj.jl:27\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuoj3sqvj.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuoj3sqvj.jl:26\ntest set: Error\
    \ During Test at /tmp/tmpuoj3sqvj.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  UndefVarError: sqr not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpuoj3sqvj.jl:17\n   [2] modp(n::Int64,\
    \ p::Int64) (repeats 9 times)\n     @ Main /tmp/tmpuoj3sqvj.jl:0\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpuoj3sqvj.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpuoj3sqvj.jl:26\ntest set:\
    \ Test Failed at /tmp/tmpuoj3sqvj.jl:30\n  Expression: candidate(3, 11) == 8\n\
    \   Evaluated: 4 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuoj3sqvj.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuoj3sqvj.jl:26\ntest set: Error\
    \ During Test at /tmp/tmpuoj3sqvj.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(100, 101) == 1\n  UndefVarError: sqr not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpuoj3sqvj.jl:17\n   [2] modp(n::Int64,\
    \ p::Int64) (repeats 4 times)\n     @ Main /tmp/tmpuoj3sqvj.jl:0\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpuoj3sqvj.jl:31 [inlined]\n\
    \   [5] macro "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuoj3sqvj.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    return (1 << n) % p\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp6_qp_kv2.jl:22\n  Expression: candidate(1101,\
    \ 101) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6_qp_kv2.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6_qp_kv2.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp6_qp_kv2.jl:25\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6_qp_kv2.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6_qp_kv2.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6_qp_kv2.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    z = modp(div(n,\
    \ 2), p)\n    z = mod(z*z, p)\n    if n % 2 == 1\n        z = mod(z*2, p)\n  \
    \  end\n    return z\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\
    \t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    res = 1\n    for e in digits(n, 2)\n        res = (res*res)\
    \ % p\n        if e == 1\n            res = (res*2) % p\n        end\n    end\n\
    \    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpnhok35bn.jl:28\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  MethodError: no method matching digits(::Int64,\
    \ ::Int64)\n  Closest candidates are:\n    digits(::Integer; base, pad) at /shared/centos7/julia/1.7.3/share/julia/base/intfuncs.jl:854\n\
    \    digits(!Matched::Type{<:Integer}, ::Integer; base, pad) at /shared/centos7/julia/1.7.3/share/julia/base/intfuncs.jl:857\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpnhok35bn.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnhok35bn.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnhok35bn.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpnhok35bn.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  MethodError: no method matching digits(::Int64,\
    \ ::Int64)\n  Closest candidates are:\n    digits(::Integer; base, pad) at /shared/centos7/julia/1.7.3/share/julia/base/intfuncs.jl:854\n\
    \    digits(!Matched::Type{<:Integer}, ::Integer; base, pad) at /shared/centos7/julia/1.7.3/share/julia/base/intfuncs.jl:857\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpnhok35bn.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnhok35bn.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnhok35bn.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpnhok35bn.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(0, 101) == 1\n  MethodError: no method matching digits(::Int64, ::Int64)\n\
    \  Closest candidates are:\n    digits(::Integer; base, pad) at /shared/centos7/julia/1.7.3/share/julia/base/intfuncs.jl:854\n\
    \    digits(!Matched::Type{<:Integer}, ::Integer; base, pad) at "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnhok35bn.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    x = modp(n\
    \ div 2, p)\n    x = x * x % p\n    if n % 2 == 1\n        x = x * 2 % p\n   \
    \ end\n    return x\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t\
    @test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl2xm8oef.jl:17\nin expression starting at\
    \ /tmp/tmpl2xm8oef.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    modp = 1\n    for i in range(1,n+1)\n        modp = modp*2%p\n\
    \    end\n    return modp\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\
    \t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmy4yjpql.jl:25\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 1 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmy4yjpql.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmy4yjpql.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpmy4yjpql.jl:26\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmy4yjpql.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmy4yjpql.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpmy4yjpql.jl:27\n  Expression: candidate(0, 101) == 1\n   Evaluated:\
    \ 2 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmy4yjpql.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmy4yjpql.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpmy4yjpql.jl:28\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 5 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmy4yjpql.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmy4yjpql.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpmy4yjpql.jl:29\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmy4yj"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmy4yjpql.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n  if n == 0\n    return 1\n  elseif n == 1\n    return 2\n\
    \  elseif n == 2\n    return 4\n  elseif n == 3\n    return 8\n  elseif n == 4\n\
    \    return 16\n  elseif n == 5\n    return 32\n  elseif n == 6\n    return 64\n\
    \  elseif n == 7\n    return 128\n  elseif n == 8\n    return 256\n  elseif n\
    \ == 9\n    return 512\n  elseif n == 10\n    return 1024\n  elseif n == 11\n\
    \    return 2048\n  elseif n == 12\n    return 4096\n  elseif n == 13\n    return\
    \ 8192\n  elseif n == 14\n    return 16384\n  elseif n == 15\n    return 32768\n\
    \  elseif n == 16\n    return 65536\n  elseif n == 17\n    return 131072\n  elseif\
    \ n == 18\n    return 262144\n  elseif n == 19\n    return 524288\n  elseif n\
    \ == 20\n    return 1048576\n  elseif n == 21\n    return 2097152\n  elseif n\
    \ == 22\n    return 4194304\n  elseif n == 23\n    return 8388608\n  elseif n\
    \ == 24\n    return 16777216\n  elseif n == 25\n    return 33554432\n  elseif\
    \ n == 26\n    return 67108864\n  elseif n == 27\n    return 134217728\n  elseif\
    \ n == 28\n    return 268435456\n  elseif n == 29\n    return 536870912\n  elseif\
    \ n == 30\n    return 1073741824\n  elseif n == 31\n    return 2147483648\n  elseif\
    \ n == 32\n    return 4294967296\n  elseif n == 33\n    return 8589934592\n  elseif\
    \ n == 34\n    return 17179869184\n  elseif n == 35\n    return 34359738368\n\
    \  elseif n == 36\n    return 68719476736\n  elseif n == 37\n    return 137438953472\n\
    \  elseif n == 38\n    return 274877906944\n  elseif n == 39\n    return 549\n\
    using Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) ==\
    \ 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t\
    @test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprv14k45i.jl:1\nin expression starting at /tmp/tmprv14k45i.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    #be aware of numerics, 100^20 is too large to fit into\
    \ Int64, so use BigInt\n    if n == 0\n        return 1\n    elseif n == 1\n \
    \       return 2\n    elseif mod(n, 2) == 0\n        return mod(modp(n/2, p)^2,\
    \ p)\n    else\n        return mod(2*modp(n-1, p), p)\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpr1w56yv0.jl:30\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpr1w56yv0.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpr1w56yv0.jl:20\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpr1w56yv0.jl:22\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpr1w56yv0.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpr1w56yv0.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpr1w56yv0.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpr1w56yv0.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpr1w56yv0.jl:20\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpr1w56yv0.jl:22\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpr1w56yv0.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpr1w56yv0.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpr1w56yv0.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  MethodError: no method matching modp(::Float64, ::Int64)\n\
    \  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpr1w56yv0.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpr1w56yv0.jl:20\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpr1w56yv0.jl:22\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr1w56yv0.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    n = n % p\n\
    \    if n < 0\n        n += p\n    end\n    if n % 2 == 0\n        return modp(n/2,\
    \ p)^2 % p\n    else\n        return (2 * modp(n/2, p)^2) % p\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) ==\
    \ 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t\
    @test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgrq5i0y9.jl:32\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpgrq5i0y9.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpgrq5i0y9.jl:0\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgrq5i0y9.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgrq5i0y9.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpgrq5i0y9.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpgrq5i0y9.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpgrq5i0y9.jl:0\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgrq5i0y9.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgrq5i0y9.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpgrq5i0y9.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  MethodError: no method matching modp(::Float64, ::Int64)\n\
    \  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpgrq5i0y9.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpgrq5i0y9.jl:0\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgrq5i0y9.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgrq5i0y9.jl:31"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgrq5i0y9.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if p == 2\n        return 1\n    end\n    if n==0\n \
    \       return 1\n    end\n    z = modp(div(n,2), p)\n    y = (z*z) % p\n    if\
    \ iseven(n)\n        return y\n    else\n        return (y*2) % p\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) ==\
    \ 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t\
    @test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0 return 1 end\n    if n == 1 return 2 end\n\
    \    if mod(n, 2) == 0 return mod(modp(n/2, p)^2, p) end\n    return mod(2*modp(n-1,\
    \ p), p)\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6c_e1d4x.jl:24\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmp6c_e1d4x.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp6c_e1d4x.jl:16\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp6c_e1d4x.jl:17\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp6c_e1d4x.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp6c_e1d4x.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp6c_e1d4x.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmp6c_e1d4x.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp6c_e1d4x.jl:16\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp6c_e1d4x.jl:17\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp6c_e1d4x.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp6c_e1d4x.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp6c_e1d4x.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  MethodError: no method matching modp(::Float64, ::Int64)\n\
    \  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmp6c_e1d4x.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp6c_e1d4x.jl:16\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp6c_e1d4x.jl:17\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6c_e1d4x.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    bin_string = \"0b\" * binary(n)\n    bin_arr = digits(Int64,\
    \ bin_string)\n    len_bin = length(bin_arr)\n    res = 1\n    for i in 2:len_bin\n\
    \        if bin_arr[i] == 1\n            res = (res * res) % p\n        end\n\
    \    end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\
    \t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgzqudtn_.jl:30\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  UndefVarError: binary not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpgzqudtn_.jl:14\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgzqudtn_.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgzqudtn_.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpgzqudtn_.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  UndefVarError: binary not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpgzqudtn_.jl:14\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgzqudtn_.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgzqudtn_.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpgzqudtn_.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(0, 101) == 1\n  UndefVarError: binary not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpgzqudtn_.jl:14\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgzqudtn_.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgzqudtn_.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpgzqudtn_.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  UndefVarError: binary not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpgzqudtn_.jl:14\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgzqudtn_.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    s = modp(n\
    \ div 2, p)\n    s = s*s % p\n    if n % 2 == 1\n        s = s*2 % p\n    end\n\
    \    return s\nend\n;\nmodp(3, 5)\nusing Test\n\n@testset begin\n\ncandidate =\
    \ modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t\
    @test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu8ae_q7g.jl:17\nin expression starting at\
    \ /tmp/tmpu8ae_q7g.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    elseif n == 1\n    \
    \    return 2 % p\n    else\n        if n % 2 == 0\n            return modp(n/2,\
    \ p)^2 % p\n        else\n            return (modp(n/2, p)^2 * 2) % p\n      \
    \  end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6yjdqjsp.jl:31\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmp6yjdqjsp.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp6yjdqjsp.jl:0\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6yjdqjsp.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6yjdqjsp.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp6yjdqjsp.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmp6yjdqjsp.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp6yjdqjsp.jl:0\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6yjdqjsp.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6yjdqjsp.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp6yjdqjsp.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  MethodError: no method matching modp(::Float64, ::Int64)\n\
    \  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmp6yjdqjsp.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp6yjdqjsp.jl:0\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6yjdqjsp.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6yjdqjsp.jl:30"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6yjdqjsp.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    \"\"\"Return 2^n modulo p (be aware of numerics).\n \
    \   >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n\
    \    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n\
    \    if n == 0\n        return 1\n    end\n    if n < 0\n        return 1/modp(-n,\
    \ p)\n    end\n    n2 = modp(n>>1, p)\n    n2*n2*(1 + (n&1)*(p-1)) % p\nend\n\
    using Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) ==\
    \ 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t\
    @test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplnu_v9uk.jl:40\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 0 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplnu_v9uk.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplnu_v9uk.jl:39\ntest set: Test\
    \ Failed at /tmp/tmplnu_v9uk.jl:41\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplnu_v9uk.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplnu_v9uk.jl:39\ntest set: Test\
    \ Failed at /tmp/tmplnu_v9uk.jl:43\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 0 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplnu_v9uk.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplnu_v9uk.jl:39\ntest set: Test\
    \ Failed at /tmp/tmplnu_v9uk.jl:44\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplnu_v9uk.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplnu_v9uk.jl:39\ntest set: Test\
    \ Failed at /tmp/tmplnu_v9uk.jl:45\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplnu_v9"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplnu_v9uk.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    else\n        z = modp(div(n,\
    \ 2), p)\n        z = (z * z) % p\n        if n % 2 == 1\n            z = (z *\
    \ 2) % p\n        end\n        return z\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n==0 return 1 end\n    return (2*modp(n-1, p)) % p\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5)\
    \ == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    sq = modp(n\
    \ >> 1, p)\n    sq = sq * sq % p\n    if n & 1 == 1\n        sq = sq * 2 % p\n\
    \    end\n    return sq\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\
    \t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0 \n        return 1\n    else\n        rec_sq\
    \ = modp(div(n, 2), p)^2\n        if mod(n, 2) == 0\n            return rec_sq\n\
    \        else\n            return rec_sq * 2\n        end\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\
    \t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3,\
    \ 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\
    \t@test(candidate(31, 5) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4nni8v5l.jl:30\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 8 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4nni8v5l.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4nni8v5l.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp4nni8v5l.jl:31\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4nni8v5l.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4nni8v5l.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp4nni8v5l.jl:34\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4nni8v5l.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4nni8v5l.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp4nni8v5l.jl:35\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 1073741824 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4nni8v5l.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4nni8v5l.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp4nni8v5l.jl:36\n  Expression: candidate(31, 5) == 3\n   Evaluated:\
    \ 2147483648 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4nni8v5l.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    elseif n == 1\n    \
    \    return 2\n    elseif n % 2 == 0\n        x = modp(n/2, p)\n        return\
    \ x^2 % p\n    else\n        x = modp(n-1, p)\n        return 2*x % p\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5)\
    \ == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgy5nke97.jl:31\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpgy5nke97.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpgy5nke97.jl:19\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpgy5nke97.jl:22\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgy5nke97.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgy5nke97.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpgy5nke97.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpgy5nke97.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpgy5nke97.jl:19\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpgy5nke97.jl:22\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgy5nke97.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgy5nke97.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpgy5nke97.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  MethodError: no method matching modp(::Float64, ::Int64)\n\
    \  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpgy5nke97.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpgy5nke97.jl:19\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpgy5nke97.jl:22\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgy5nke97.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    n = n % p\n    if n == 0 \n        return 1\n    end\n\
    \    if n == 1\n        return 2\n    end\n    if n == 2\n        return 4\n \
    \   end\n    t = 1\n    for i = 1:n-2\n        t = (t * 2) % p\n    end\n    return\
    \ t\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpff1hpzy7.jl:35\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 2 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpff1hpzy7.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpff1hpzy7.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpff1hpzy7.jl:36\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 83 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpff1hpzy7.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpff1hpzy7.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpff1hpzy7.jl:38\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 2 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpff1hpzy7.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpff1hpzy7.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpff1hpzy7.jl:39\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 76 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpff1hpzy7.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpff1hpzy7.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpff1hpzy7.jl:40\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpff1h"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpff1hpzy7.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if p == 2\n        return 1\n    end\n    p2 = p*p\n\
    \    k = floor(n/p2)\n    r = n - k*p2\n    return  (r*modp(r, p) + k*p*modp(r\
    \ + p, p) + k*k*modp(r + 2*p, p)) % p\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpss82u3iy.jl:27\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpss82u3iy.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpss82u3iy.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpss82u3iy.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpss82u3iy.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpss82u3iy.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpss82u3iy.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpss82u3iy.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpss82u3iy.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpss82u3iy.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpss82u3iy.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(0, 101) == 1\n  MethodError: no method matching modp(::Float64, ::Int64)\n\
    \  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpss82u3iy.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpss82u3iy.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpss82u3iy.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpss82u3iy.j"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpss82u3iy.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    if n == 1\n\
    \        return n\n    end\n    n_high = n >> 1\n    if n % 2 == 0\n        half\
    \ = modp(n_high, p)\n        return (half*half) % p\n    else\n        half =\
    \ modp(n_high, p)\n        return (half*half*n) % p\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1k2jgbvo.jl:35\n  Expression: candidate(1101,\
    \ 101) == 2\n   Evaluated: 94 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1k2jgbvo.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1k2jgbvo.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp1k2jgbvo.jl:37\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 3 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1k2jgbvo.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1k2jgbvo.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp1k2jgbvo.jl:39\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1k2jgbvo.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1k2jgbvo.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp1k2jgbvo.jl:40\n  Expression: candidate(31, 5) == 3\n   Evaluated:\
    \ 0 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1k2jgbvo.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1k2jgbvo.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1k2jgbvo.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    binstr = dec2bin(n)\n    res = 1\n    for i in binstr\n\
    \        if i == '1'\n            res = (res * res) % p\n        else\n      \
    \      res = (res * res * 2) % p\n        end\n    end\n    return res\nend\n\
    using Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) ==\
    \ 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t\
    @test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpe57tpdoq.jl:30\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  UndefVarError: dec2bin not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpe57tpdoq.jl:14\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpe57tpdoq.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe57tpdoq.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpe57tpdoq.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  UndefVarError: dec2bin not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpe57tpdoq.jl:14\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpe57tpdoq.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe57tpdoq.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpe57tpdoq.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(0, 101) == 1\n  UndefVarError: dec2bin not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpe57tpdoq.jl:14\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpe57tpdoq.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe57tpdoq.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpe57tpdoq.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  UndefVarError: dec2bin not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpe57tpdoq.jl:14\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe57tpdoq.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    x = 1\n    y = 2\n    while n > 0\n        if n % 2 ==\
    \ 1\n            x = (x * y) % p\n        end\n        y = (y^2) % p\n       \
    \ n = n / 2\n    end\n    return x\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpxo2l3sar.jl:30\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 2 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxo2l3sar.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxo2l3sar.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpxo2l3sar.jl:33\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 2 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxo2l3sar.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxo2l3sar.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpxo2l3sar.jl:34\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 16 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxo2l3sar.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxo2l3sar.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpxo2l3sar.jl:36\n  Expression: candidate(31, 5) == 3\n   Evaluated:\
    \ 2 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxo2l3sar.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxo2l3sar.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxo2l3sar.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    return rem(2*modp(n-1,\
    \ p), p)\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    return mod(2^n, p)\nend\n \n \n \n \n\"\"\"Function to\
    \ extend B-ary representation of number to specified length.\n    >>> add_zeros(23,\
    \ 5)\n    '00011'\n    >>> add_zeros(9, 5)\n    '01001'\n    >>> add_zeros(2,\
    \ 5)\n    '00001'\n    >>> add_zeros(0, 5)\n    '00000'\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpqt31r928.jl:20\nin expression starting at /tmp/tmpqt31r928.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    a = 1\n    b = 2\n    c = n\n    while c > 0\n      \
    \  if c % 2 == 1\n            a = mod(a * b, p)\n        end\n        b = mod(b\
    \ * b, p)\n        c = c >> 1\n    end\n    return a\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    x::Int64 = 1\n    k::Int64 = n\n    while k > 0\n   \
    \     if k % 2 == 1\n            x = (x * n) % p\n        end\n        n = (n\
    \ * n) % p\n        k = k >> 1\n    end\n    return x\nend\n \n@test modp(3, 5)\
    \ == 3\n@test modp(1101, 101) == 2\n@test modp(0, 101) == 1\n@test modp(3, 11)\
    \ == 8\n@test modp(100, 101) == 1\nusing Test\n\n@testset begin\n\ncandidate =\
    \ modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t\
    @test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @test not defined\nin expression starting\
    \ at /tmp/tmpgzvcbdsj.jl:26\nin expression starting at /tmp/tmpgzvcbdsj.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    res = 1\n    while n > 0\n        if n & 1 == 1\n   \
    \         res = (res * 2) % p\n        end\n        n = div(n, 2)\n    end\n \
    \   return res\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpoq9gp4km.jl:28\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoq9gp4km.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoq9gp4km.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpoq9gp4km.jl:29\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 32 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoq9gp4km.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoq9gp4km.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpoq9gp4km.jl:31\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 4 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoq9gp4km.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoq9gp4km.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpoq9gp4km.jl:32\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 8 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoq9gp4km.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoq9gp4km.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpoq9gp4km.jl:33\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoq9gp"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoq9gp4km.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    if n == 1\n\
    \        return 2 % p\n    end\n    if n % 2 == 0\n        t = modp(n\xF72, p)\n\
    \        return t^2 % p\n    else\n        t = modp(n\xF72, p)\n        return\
    \ 2 * t^2 % p\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\
    \t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    z = modp(n\
    \ >> 1, p)\n    z = z * z % p\n    if n & 1 == 1\n        z = z * n % p\n    end\n\
    \    return z\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpax57ggxm.jl:30\n  Expression: candidate(1101,\
    \ 101) == 2\n   Evaluated: 94 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpax57ggxm.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpax57ggxm.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpax57ggxm.jl:32\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 3 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpax57ggxm.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpax57ggxm.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpax57ggxm.jl:34\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpax57ggxm.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpax57ggxm.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpax57ggxm.jl:35\n  Expression: candidate(31, 5) == 3\n   Evaluated:\
    \ 0 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpax57ggxm.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpax57ggxm.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpax57ggxm.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0 \n        return 1\n    end\n    if n == 1\n\
    \        return 2\n    end\n    if n % 2 == 0\n        return modp(n/2, p)^2 %\
    \ p\n    else\n        return 2 * modp(n-1, p) % p\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpu9p611f3.jl:31\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpu9p611f3.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpu9p611f3.jl:21\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpu9p611f3.jl:23\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpu9p611f3.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpu9p611f3.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpu9p611f3.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpu9p611f3.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpu9p611f3.jl:21\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpu9p611f3.jl:23\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpu9p611f3.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpu9p611f3.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpu9p611f3.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  MethodError: no method matching modp(::Float64, ::Int64)\n\
    \  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpu9p611f3.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpu9p611f3.jl:21\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpu9p611f3.jl:23\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu9p611f3.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    r = 1\n    if n == 0\n        return r\n    end\n   \
    \ while n != 0\n        r = (r * 2) % p\n        n -= 1\n    end\n    return r\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5)\
    \ == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    n = mod(n, p)\n    if n == 0\n        return 1\n    end\n\
    \    (r, q) = divrem(n, 2)\n    s = modp(r, p)^2\n    if q == 1\n        s = mod(2*s,\
    \ p)\n    end\n    return s\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t\
    @test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpi5n3rj7h.jl:31\n  Expression: candidate(1101,\
    \ 101) == 2\n   Evaluated: 29 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi5n3rj7h.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi5n3rj7h.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpi5n3rj7h.jl:34\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 10000 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi5n3rj7h.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi5n3rj7h.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpi5n3rj7h.jl:35\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi5n3rj7h.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi5n3rj7h.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpi5n3rj7h.jl:36\n  Expression: candidate(31, 5) == 3\n   Evaluated:\
    \ 2 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi5n3rj7h.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi5n3rj7h.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi5n3rj7h.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    if n == 1\n\
    \        return 2 % p\n    end\n    if n%2 == 0\n        return modp(n/2, p)^2\
    \ % p\n    else\n        return 2 * modp(n-1, p) % p\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpu4tqw0y9.jl:31\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpu4tqw0y9.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpu4tqw0y9.jl:21\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpu4tqw0y9.jl:23\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpu4tqw0y9.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpu4tqw0y9.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpu4tqw0y9.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpu4tqw0y9.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpu4tqw0y9.jl:21\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpu4tqw0y9.jl:23\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpu4tqw0y9.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpu4tqw0y9.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpu4tqw0y9.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  MethodError: no method matching modp(::Float64, ::Int64)\n\
    \  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpu4tqw0y9.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpu4tqw0y9.jl:21\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpu4tqw0y9.jl:23\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu4tqw0y9.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    if n == 1\n\
    \        return 2\n    end\n    d = n % 2 == 0 ? n \xF7 2 : n - 1\n    m = modp(d,\
    \ p)\n    m^2 % p == 0 ? m : m^2 % p\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpf833keu4.jl:29\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 1 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf833keu4.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf833keu4.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpf833keu4.jl:30\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 31 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf833keu4.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf833keu4.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpf833keu4.jl:32\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 5 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf833keu4.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf833keu4.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpf833keu4.jl:33\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 37 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf833keu4.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf833keu4.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpf833keu4.jl:34\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf833"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf833keu4.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    if n == 1\n\
    \        return 2\n    end\n    if (n % 2) == 0\n        return modp(n/2, p)^2\
    \ % p\n    else\n        return (modp(n-1, p) * 2) % p\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6en3i208.jl:31\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmp6en3i208.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp6en3i208.jl:21\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp6en3i208.jl:23\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp6en3i208.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp6en3i208.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp6en3i208.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmp6en3i208.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp6en3i208.jl:21\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp6en3i208.jl:23\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp6en3i208.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp6en3i208.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp6en3i208.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  MethodError: no method matching modp(::Float64, ::Int64)\n\
    \  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmp6en3i208.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp6en3i208.jl:21\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp6en3i208.jl:23\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6en3i208.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    \"\"\"Return 2^n modulo p (be aware of numerics).\n \
    \   >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n\
    \    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n\
    \    n %= p\n    n %= p\n    n %= p\n    n %= p\n    n %= p\n    n %= p\n    n\
    \ %= p\n    n %= p\n    n %= p\n    n %= p\n    n %= p\n    n %= p\n    n %= p\n\
    \    n %= p\n    n %= p\n    n %= p\n    n %= p\n    n %= p\n    n %= p\n    n\
    \ %= p\n    n %= p\n    n %= p\n    n %= p\n    n %= p\n    n %= p\n    n %= p\n\
    \    n %= p\n    n %= p\n    n %= p\n    n %= p\n    n %= p\n    n %= p\n    n\
    \ %= p\n    n %= p\n    n %= p\n    n %= p\n    n %= p\n    n %= p\n    n %= p\n\
    \    n %= p\n    n %= p\n    n %= p\n    n %= p\n    n %= p\n    n %= p\n    n\
    \ %= p\n    n %= p\n    n %= p\n    n %= p\n    n %= p\n    n %= p\n    n %= p\n\
    \    n %= p\n    n %= p\n    n %= p\n    n %= p\n    n %= p\n    n %= p\n    n\
    \ %= p\n    n %= p\n    n %= p\n    n %= p\n    n %= p\n    n %= p\n    n %= p\n\
    \    n %= p\n    n %= p\n    n %= p\n    n %= p\n    n %= p\n    n %= p\nusing\
    \ Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\
    \t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3,\
    \ 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\
    \t@test(candidate(31, 5) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwuqgre9k.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwuqgre9k.jl:1\n\
    in expression starting at /tmp/tmpwuqgre9k.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    n %= p\n    if n == 0\n        n = 1\n    end\n    n\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5)\
    \ == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpd743q79l.jl:26\n  Expression: candidate(1101,\
    \ 101) == 2\n   Evaluated: 91 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd743q79l.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd743q79l.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpd743q79l.jl:28\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 3 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd743q79l.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd743q79l.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpd743q79l.jl:29\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 100 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd743q79l.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd743q79l.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpd743q79l.jl:30\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd743q79l.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd743q79l.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpd743q79l.jl:31\n  Expression: candidate(31, 5) == 3\n   Evaluated:\
    \ 1 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd7"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd743q79l.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    if n == 1\n\
    \        return n\n    end\n    if n < 0\n        n += div(p-1, 2)\n    end\n\
    \    # Make base even\n    if n % 2 == 1\n        base = 2 * modp(div(n-1, 2),\
    \ p)\n    else\n        base = modp(div(n, 2), p)\n    end\n    if base < 0\n\
    \        base += p\n    end\n    (base^2) % p\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpzb1rbn0n.jl:39\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzb1rbn0n.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzb1rbn0n.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpzb1rbn0n.jl:40\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 85 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzb1rbn0n.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzb1rbn0n.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpzb1rbn0n.jl:42\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 4 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzb1rbn0n.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzb1rbn0n.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpzb1rbn0n.jl:43\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 24 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzb1rbn0n.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzb1rbn0n.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpzb1rbn0n.jl:44\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzb1r"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzb1rbn0n.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    else\n        temp =\
    \ modp(n \xF7 2, p)\n        if n % 2 == 0\n            return temp^2 % p\n  \
    \      else\n            return (temp^2 * 2) % p\n        end\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) ==\
    \ 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t\
    @test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    l = Int64(1)\n    for i = 1:n\n        l = l*2%p\n  \
    \  end\n    return l\nend\n\"\"\"Return the result of the inverse calculator (e,\
    \ phi).\n    >>> inv(17,16)\n    16\n    >>> inv(5,14)\n    5\n    >>> inv(11,23)\n\
    \    1\n    >>> inv(1,1)\n    1\n    >>> inv(2,2)\n    1\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpc568u982.jl:20\nin expression starting at /tmp/tmpc568u982.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    if n == 1\n\
    \        return 2\n    end\n    if n % 2 == 0\n        return (modp(n/2, p)^2)\
    \ % p\n    else\n        return (2 * modp(n-1, p)) % p\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp78fs8fbg.jl:31\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmp78fs8fbg.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp78fs8fbg.jl:21\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp78fs8fbg.jl:23\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp78fs8fbg.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp78fs8fbg.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp78fs8fbg.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmp78fs8fbg.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp78fs8fbg.jl:21\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp78fs8fbg.jl:23\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp78fs8fbg.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp78fs8fbg.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp78fs8fbg.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  MethodError: no method matching modp(::Float64, ::Int64)\n\
    \  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmp78fs8fbg.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp78fs8fbg.jl:21\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp78fs8fbg.jl:23\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp78fs8fbg.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    m = 1\n    while n > 0\n        if n%2 == 1\n       \
    \     m = m*2 % p\n        end\n        n = div(n, 2)\n    end\n    return m\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5)\
    \ == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplx1dktpz.jl:28\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplx1dktpz.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplx1dktpz.jl:27\ntest set: Test\
    \ Failed at /tmp/tmplx1dktpz.jl:29\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 32 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplx1dktpz.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplx1dktpz.jl:27\ntest set: Test\
    \ Failed at /tmp/tmplx1dktpz.jl:31\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 4 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplx1dktpz.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplx1dktpz.jl:27\ntest set: Test\
    \ Failed at /tmp/tmplx1dktpz.jl:32\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 8 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplx1dktpz.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplx1dktpz.jl:27\ntest set: Test\
    \ Failed at /tmp/tmplx1dktpz.jl:33\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplx1dk"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplx1dktpz.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    res = 1\n    #\n    #print(\"modp\", n, p)\n    #\n \
    \   while n > 0\n        if n % 2 == 1\n            res = (res * p) % p\n    \
    \    end\n        n = n >> 1\n        p = (p * p) % p\n    end\n    #\n    return\
    \ res\nend\n \n\"\"\"Compute the p'th fibonacci number, using log_2(p) bit operations.\n\
    \    >>> fib(12)\n    144\n    >>> fib(1000)\n    43466557686937456435688527675040625802564660517371780402481729089536555417949051890403879840079255169295922593080322634775209689623239873322471161642996440906533187938298969649928516003704476137795166849228875\n\
    \    >>> fib(10^10)\n    4134960760026490365058292390894509016870452459578404021\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpjncygoi9.jl:29\nin expression starting at /tmp/tmpjncygoi9.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    \"\"\"Return 2^n modulo p (be aware of numerics).\n \
    \   >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n\
    \    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n\
    \    p = (p::Int64)\n    n = (n::Int64)\n    if n == 0\n        return 1\n   \
    \ elseif n == 1\n        return 2\n    elseif n == 2\n        return 4\n    elseif\
    \ n == 3\n        return 8\n    elseif n == 4\n        return 16\n    elseif n\
    \ == 5\n        return 32\n    elseif n == 6\n        return 64\n    elseif n\
    \ == 7\n        return 128\n    elseif n == 8\n        return 256\n    elseif\
    \ n == 9\n        return 512\n    elseif n == 10\n        return 1024\n    elseif\
    \ n == 11\n        return 2048\n    elseif n == 12\n        return 4096\n    elseif\
    \ n == 13\n        return 8192\n    elseif n == 14\n        return 16384\n   \
    \ elseif n == 15\n        return 32768\n    elseif n == 16\n        return 65536\n\
    \    elseif n == 17\n        return 131072\n    elseif n == 18\n        return\
    \ 262144\n    elseif n == 19\n        return 524288\n    elseif n == 20\n    \
    \    return 1048576\n    elseif n == 21\n        return 2097152\n    elseif n\
    \ == 22\n        return 4194304\n    elseif n == 23\n        return 8388608\n\
    \    elseif n == 24\n        return 16777216\n    elseif n == 25\n        return\
    \ 33554432\n    elseif n == 26\n        return 67108864\n    elseif n == 27\n\
    \        return 134217728\n    elseif n == 28\n        return 268435456\n    elseif\
    \ n == 29\n        return 536870912\n    elseif n == 30\n        return 1073741824\n\
    \    elseif n == 31\n        return 2147483648\n    elseif n == 32\n        return\
    \ 4294967\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppnmt6acd.jl:1\nin expression starting at /tmp/tmppnmt6acd.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    a = modp(n\
    \ \xF7 2, p)\n    a = a * a\n    a = a % p\n    if n % 2 == 1\n        a = a *\
    \ 2\n    end\n    return a % p\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    i, r = 0, 1\n    while i < n\n        r = (r * 2) % p\n\
    \        i += 1\n    end\n    return r\nend\nusing Test\n\n@testset begin\n\n\
    candidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    if n == 1\n\
    \        return 2 % p\n    end\n    if n % 2 == 0\n        x = modp(n/2, p)\n\
    \        return (x * x) % p\n    else\n        x = modp(n/2, p)\n        return\
    \ (2 * x * x) % p\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\
    \t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpfdajxslp.jl:33\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpfdajxslp.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpfdajxslp.jl:0\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfdajxslp.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfdajxslp.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpfdajxslp.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpfdajxslp.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpfdajxslp.jl:0\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfdajxslp.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfdajxslp.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpfdajxslp.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  MethodError: no method matching modp(::Float64, ::Int64)\n\
    \  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpfdajxslp.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpfdajxslp.jl:0\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfdajxslp.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfdajxslp.jl:32"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfdajxslp.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0 \n        return 1\n    elseif n == 1\n   \
    \     return 2\n    else\n        return (2*modp(n-1, p)) % p\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) ==\
    \ 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t\
    @test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    a = 1\n    while n > 0\n        if rem(n, 2) == 1\n \
    \           a = (a * 2) % p\n        end\n        n = div(n, 2)\n    end\n   \
    \ return a\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzf0kr0as.jl:28\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzf0kr0as.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzf0kr0as.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpzf0kr0as.jl:29\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 32 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzf0kr0as.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzf0kr0as.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpzf0kr0as.jl:31\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 4 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzf0kr0as.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzf0kr0as.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpzf0kr0as.jl:32\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 8 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzf0kr0as.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzf0kr0as.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpzf0kr0as.jl:33\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzf0kr"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzf0kr0as.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    a = mod(n, p)\n    if a==0\n        return 1\n    end\n\
    \    return a^(p-2)\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t\
    @test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpu3bl7eji.jl:25\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 27 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu3bl7eji.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu3bl7eji.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpu3bl7eji.jl:26\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 1665077252012998435 == 2\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu3bl7eji.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu3bl7eji.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpu3bl7eji.jl:28\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 19683 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu3bl7eji.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu3bl7eji.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpu3bl7eji.jl:29\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu3bl7eji.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu3bl7eji.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpu3bl7eji.jl:30\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expans"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu3bl7eji.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    elseif n < 0\n     \
    \   return modp(n + p - 1, p)\n    elseif isodd(n)\n        return mod2m(2, n\
    \ - 1, p) * modp(1, p)\n    else\n        return mod2m(2, div(n, 2), p)^2\n  \
    \  end\nend\n \nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpe9yh6uqb.jl:30\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  UndefVarError: mod2m not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpe9yh6uqb.jl:19\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpe9yh6uqb.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe9yh6uqb.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpe9yh6uqb.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  UndefVarError: mod2m not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpe9yh6uqb.jl:19\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpe9yh6uqb.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe9yh6uqb.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpe9yh6uqb.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  UndefVarError: mod2m not defined\n  Stacktrace:\n \
    \  [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpe9yh6uqb.jl:19\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpe9yh6uqb.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe9yh6uqb.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpe9yh6uqb.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(100, 101) == 1\n  UndefVarError: mod2m not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpe9yh6uqb.jl:21\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.j"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe9yh6uqb.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if p == 1\n        return 0\n    end\n    result = 1\n\
    \    base = 2\n    while n > 0\n        if n % 2 == 1\n            result = mod2(base*result,\
    \ p)\n        end\n        base = mod2(base*base, p)\n        n = div(n, 2)\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t\
    @test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmptk8w2as_.jl:33\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  UndefVarError: mod2 not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmptk8w2as_.jl:21\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptk8w2as_.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptk8w2as_.jl:32\ntest set:\
    \ Error During Test at /tmp/tmptk8w2as_.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  UndefVarError: mod2 not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmptk8w2as_.jl:21\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptk8w2as_.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptk8w2as_.jl:32\ntest set:\
    \ Error During Test at /tmp/tmptk8w2as_.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  UndefVarError: mod2 not defined\n  Stacktrace:\n  \
    \ [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmptk8w2as_.jl:21\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptk8w2as_.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptk8w2as_.jl:32\ntest set:\
    \ Error During Test at /tmp/tmptk8w2as_.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(100, 101) == 1\n  UndefVarError: mod2 not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmptk8w2as_.jl:23\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptk8w2as_.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    elseif n < 0\n     \
    \   return 0\n    else\n        if iseven(n)\n            k = div(n, 2)\n    \
    \        y = modp(k, p)\n            z = modp(k, p)\n            if y == z\n \
    \               return (2y^2) % p\n            else\n                return (2y*z)\
    \ % p\n            end\n        else\n            return (2modp(n-1, p)) % p\n\
    \        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\
    \t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptfl0ah4a.jl:38\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 1 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptfl0ah4a.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptfl0ah4a.jl:37\ntest set: Test\
    \ Failed at /tmp/tmptfl0ah4a.jl:39\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 5 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptfl0ah4a.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptfl0ah4a.jl:37\ntest set: Test\
    \ Failed at /tmp/tmptfl0ah4a.jl:41\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 5 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptfl0ah4a.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptfl0ah4a.jl:37\ntest set: Test\
    \ Failed at /tmp/tmptfl0ah4a.jl:42\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 90 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptfl0ah4a.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptfl0ah4a.jl:37\ntest set: Test\
    \ Failed at /tmp/tmptfl0ah4a.jl:43\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 2 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptfl0a"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptfl0ah4a.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0 return 1 end\n    t = modp(n>>1, p)\n    ans\
    \ = t*t % p\n    if bitstring(n)[end] == '1'\n        ans = ans*2 % p\n    end\n\
    \    return ans\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    b = 0\n    r = 1\n    while n > 0\n        b, n = mod2(n)\n\
    \        if b == 1\n            r = mod2(2*r, p)\n        end\n    end\n    return\
    \ r\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp04l_05r1.jl:29\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  UndefVarError: mod2 not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp04l_05r1.jl:17\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp04l_05r1.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp04l_05r1.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp04l_05r1.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  UndefVarError: mod2 not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp04l_05r1.jl:17\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp04l_05r1.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp04l_05r1.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp04l_05r1.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  UndefVarError: mod2 not defined\n  Stacktrace:\n  \
    \ [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp04l_05r1.jl:17\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp04l_05r1.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp04l_05r1.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp04l_05r1.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(100, 101) == 1\n  UndefVarError: mod2 not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp04l_05r1.jl:17\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp04l_05r1.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    s = 1\n    for i = 1:n\n        s = (s*2) % p\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    if n == 1\n\
    \        return 2\n    end\n    if (n%2 == 0)\n        return (modp(n/2, p)*modp(n/2,\
    \ p))%p\n    else\n        return (2*modp(n-1, p))%p\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmprh2ioyfn.jl:31\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmprh2ioyfn.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmprh2ioyfn.jl:21\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmprh2ioyfn.jl:23\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprh2ioyfn.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmprh2ioyfn.jl:30\ntest set:\
    \ Error During Test at /tmp/tmprh2ioyfn.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmprh2ioyfn.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmprh2ioyfn.jl:21\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmprh2ioyfn.jl:23\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprh2ioyfn.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmprh2ioyfn.jl:30\ntest set:\
    \ Error During Test at /tmp/tmprh2ioyfn.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  MethodError: no method matching modp(::Float64, ::Int64)\n\
    \  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmprh2ioyfn.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmprh2ioyfn.jl:21\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmprh2ioyfn.jl:23\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprh2ioyfn.jl:28\n"
  exit_code: 1
  status: SyntaxError
