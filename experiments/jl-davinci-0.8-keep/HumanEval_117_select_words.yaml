name: HumanEval_117_select_words
language: jl
prompt: "\"\"\"Given a string s and a natural number n, you have been tasked to implement\
  \ \n    a function that returns a list of all words from string s that contain exactly\
  \ \n    n consonants, in order these words appear in the string s.\n    If the string\
  \ s is empty then the function should return an empty list.\n    Note: you may assume\
  \ the input string contains only letters and spaces.\n    Examples:\n    select_words(\"\
  Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
  \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\",\
  \ 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
  Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
  Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little\
  \ lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\"\
  , 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"\
  ])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\"\
  , 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"\
  c\", \"d\", \"f\"])\nend\n"
completions: ["    words = split(s)\n    result = []\n    for word in words\n    \
    \    word_count = 0\n        for letter in word\n            if letter in \"bBcCdDfFgGhHjJkKlLmMnNpPqQrRsStTvVwWxXyYzZ\"\
    \n                word_count += 1\n            end\n        end\n        if word_count\
    \ == n\n            push!(result, word)\n        end\n    end\n    return result\n\
    end", "    words = split(s, \" \")\n    ans = []\n    for word in words\n    \
    \    if count_consonants(word) == n\n            push!(ans, word)\n        end\n\
    \    end\n    return ans\nend", "    # YOUR CODE HERE\nend", "    words = split(s)\n\
    \    selected = []\n    for word in words\n        if length(consonants(word))\
    \ == n\n            push!(selected, word)\n        end\n    end\n    return selected\n\
    end", "    isvowel(x) = x in [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"]\n    s\
    \ = lowercase(s)\n    words = split(s, \" \")\n    words = map(x -> length(filter(y\
    \ -> !isvowel(y), x)), words)\n    selected_words = filter(x -> x[2] == n, enumerate(words))\n\
    \    selected_words = map(x -> x[1], selected_words)\n    selected_words = map(x\
    \ -> words[x], selected_words)\n    return selected_words\nend", "    \n    vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    words = split(s)\n    words_with_n_consonants\
    \ = []\n    \n    for word in words\n        consonants = 0\n        for letter\
    \ in word\n            if !(letter in vowels)\n                consonants += 1\n\
    \            end\n        end\n        if consonants == n\n            push!(words_with_n_consonants,\
    \ word)\n        end\n    end\n    \n    return words_with_n_consonants\nend",
  "    s = split(s)\n    vec = []\n    for j = 1:length(s)\n        t = s[j]\n   \
    \     count = 0\n        for i = 1:length(t)\n            if t[i] \u2209 [\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"]\n           \
    \     count += 1\n            end\n        end\n        if count == n\n      \
    \      push!(vec, t)\n        end\n    end\n    return vec\nend", "    # write\
    \ your code here\nend\n \n# your code here\n \nend\n \n \n \n \n@testset \"Simple\
    \ string\" begin\n    @test select_words(\"Mary had a little lamb\", 4) == [\"\
    little\"]\n    @test select_words(\"Mary had a little lamb\", 3) == [\"Mary\"\
    , \"lamb\"]\n    @test select_words(\"simple white space\", 2) == []\n    @test\
    \ select_words(\"Hello world\", 4) == [\"world\"]\n    @test select_words(\"Uncle\
    \ sam\", 3) == [\"Uncle\"]\n    @test select_words(\"\", 1) == []\n    @test select_words(\"\
    \ \", 1) == []\n    @test select_words(\"a\", 1) == []\n    @test select_words(\"\
    a \", 1) == []\n    @test select_words(\" a\", 1) == []\n    @test select_words(\"\
    \ a \", 1) == []\n    @test select_words(\"a a\", 1) == []\n    @test select_words(\"\
    bb\", 1) == []\n    @test select_words(\"bb\", 2) == [\"bb\"]\n    @test select_words(\"\
    bb \", 2) == [\"bb\"]\n    @test select_words(\" bb\", 2) == [\"bb\"]\n    @test\
    \ select_words(\" bb \", 2) == [\"bb\"]\n    @test select_words(\"bb bb\", 2)\
    \ == [\"bb\", \"bb\"]\n    @test select_words(\"b b\", 1) == []\n    @test select_words(\"\
    b b\", 2) == [\"b b\"]\n    @test select_words(\"b b \", 2) == [\"b b\"]\n   \
    \ @test select_words(\" b b\", 2) == [\"b b\"]\n    @test select_words(\" b b\
    \ \", 2) == [\"b b\"]\n    @test select_words(\"b b b b\", 2) == [\"b b\", \"\
    b b\"]\n    @test select_words(\"b b b b\", 4) == []\n    @test select_words(\"\
    b b b b\", 0) == []\n    @test select_words(\"b b b b \", 4) == []\n    @test\
    \ select_words(\" b b b b\", 4) == []\n   ", "    vowels = Set(['a', 'e', 'i',\
    \ 'o', 'u'])\n    filtered_string = split(s)\n    filter(x -> x == n, countmap(map(x\
    \ -> length(filter(y -> !y in vowels, x)), map(x -> lowercase(x), split(s)))))\n\
    \    end", "    x = split(s)\n    y = []\n    for i in x\n        if count_consonants(i)\
    \ == n\n            push!(y, i)\n        end\n    end\n    return y\nend", " \
    \   if s == \"\" \n        s = split(s, r\"\\s+\")\n        return []\n    end\n\
    \    s = split(s, r\"\\s+\")\n    selected_words = []\n    for word in s\n   \
    \     if sum(is_consonant(c) for c in word) == n\n            push!(selected_words,\
    \ word)\n        end\n    end\n    return selected_words\nend", "    s = replace(s,\
    \ \" \" => \"\")\n    words = split(s, ' ')\n    result = []\n    for word in\
    \ words\n        if count_consonants(word) == n\n            push!(result, word)\n\
    \        end\n    end\n    return result\nend", "    # separate string s by whitespace\n\
    \    words = split(s)\n    # create list to hold selected words\n    selected_words\
    \ = []\n    # loop through each word in words\n    for word in words\n       \
    \ # keep track of number of consonants in each word\n        consonants = 0\n\
    \        # loop through each character in word\n        for c in word\n      \
    \      # increment consonants if character is not a vowel\n            if !(c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n                consonants\
    \ += 1\n            end\n        end\n        # append to selected_words if number\
    \ of consonants == n\n        if consonants == n\n            push!(selected_words,\
    \ word)\n        end\n    end\n    # return selected_words\n    return selected_words\n\
    end", "    vowels = \"aeiouAEIOU\"\n    words = split(s, \" \")\n    for i in\
    \ 1:length(words)\n        if length(words[i]) == n\n            count = 0\n \
    \           for j in 1:length(words[i])\n                if !in(words[i][j], vowels)\n\
    \                    count += 1\n                end\n            end\n      \
    \      if count == n\n                push!(result, words[i])\n            end\n\
    \        end\n    end\n    return result\nend", "    if n == 0\n        return\
    \ s\n    end\n    letters = s.lowercase\n    letter = letters[1]\n    if letter\
    \ \u2208 \"aeiou\"\n        return select_words(s[2:end], n)\n    else\n     \
    \   return [letters[1]] + select_words(s[2:end], n-1)\n    end\nend", "    \"\"\
    \"\n    >>> select_words(\"Mary had a little lamb\", 4)\n    1-element Array{String,1}:\n\
    \     \"little\"\n    >>> select_words(\"Mary had a little lamb\", 3)\n    2-element\
    \ Array{String,1}:\n     \"Mary\"\n     \"lamb\"\n    >>> select_words(\"simple\
    \ white space\", 2)\n    0-element Array{String,1}\n    >>> select_words(\"Hello\
    \ world\", 4)\n    1-element Array{String,1}:\n     \"world\"\n    >>> select_words(\"\
    Uncle sam\", 3)\n    1-element Array{String,1}:\n     \"Uncle\"\n    \"\"\"\n\
    \    # collect all words in a string s\n    words = split(s, ' ')\n    cons =\
    \ 0\n    result = String[]\n    # for each word, check if it has exactly n consonants,\n\
    \    # and if yes, add to the result\n    for word in words\n        for c in\
    \ word\n            if !(c in ['a', 'e', 'i', 'o', 'u', 'y'])\n              \
    \  cons += 1\n            end\n        end\n        if cons == n\n           \
    \ push!(result, word)\n        end\n        cons = 0\n    end\n    return result\n\
    end", "    A = split(s, \" \")\n    t = typeof(A)\n    B = t[]\n    C = t[]\n\
    \    for i in A\n        cons = 0\n        for j in i\n            if any(j ==\
    \ x for x in \"qwrtypsdfghjklzxcvbnm\")\n                cons += 1\n         \
    \   end\n        end\n        if cons == n\n            push!(B, i)\n        end\n\
    \    end\n    return B\nend", "    words = split(s, r\"\\s+\")\n    rtn = []\n\
    \    for word in words\n        if count_consonants(word) == n\n            push!(rtn,\
    \ word)\n        end\n    end\n    return rtn\nend", "    consonants = ['b', 'c',\
    \ 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w',\
    \ 'x', 'z']\n    words = split(s, \" \")\n    new_words = []\n    for word in\
    \ words\n        counter = 0\n        for letter in word\n            if letter\
    \ in consonants\n                counter += 1\n            end\n        end\n\
    \        if counter == n\n            push!(new_words, word)\n        end\n  \
    \  end\n    return new_words\nend", "    words = split(s)\n    vs = Vector{String}()\n\
    \    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for word in words\n   \
    \     count = 0\n        for letter in word\n            if !(letter in vowels)\n\
    \                count += 1\n            end\n        end\n        if count ==\
    \ n\n            push!(vs, word)\n        end\n    end\n    return vs\nend", " \
    \   res = []\n    arr = split(s)\n    for i in arr\n        if count_consonants(i)\
    \ == n\n            push!(res, i)\n        end\n    end\n    return res\nend",
  "    return map(x -> x[1],filter(x -> x[2] == n, map(x -> [x,length(filter(c ->\
    \ isconsonant(c), x))],split(s, \" \"))))\nend", "    words = split(s)\n    selected\
    \ = []\n    consonants = set([\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"z\"])\n    for word in words\n        if (length(setintersect(Set(split(word)),\
    \ consonants)) == n)\n            push!(selected, word)\n        end\n    end\n\
    \    return selected\nend", "    filter(x -> length(x) == n, split(s))\nend",
  "    # your code goes here\n    list_of_words = split(s)\n    output = []\n    for\
    \ word in list_of_words\n        if length(split(regexp(\"[aeiou]\", word))) ==\
    \ n\n            push!(output, word)\n        end\n    end\n    return output\n\
    end\n \n \n\"\"\"Given a string s, you have been tasked to implement a function\
    \ that replaces \n    all occurrences of the word \"good\" with the word \"best\"\
    \ and returns the modified string.\n    Note: you may assume the input string\
    \ contains only letters and spaces.\n    Examples:\n    replace_good(\"He is good\"\
    ) ==> \"He is best\"\n    replace_good(\"You are good\") ==> \"You are best\"\n\
    \    replace_good(\"Take good care of my goods\") ==> \"Take best care of my bests\"\
    \n    replace_good(\"\") ==> \"\"\n    \"\"\"", "    words = split(s)\n    for\
    \ i in 1:length(words)\n        if length(consonants(words[i])) != n\n       \
    \     words[i] = \"\"\n        end\n    end\n    return filter(x -> x != \"\"\
    , words)\nend", "    consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"\
    j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"\
    w\", \"x\", \"z\"]\n    words = split(s, \" \")\n    selected_words = []\n   \
    \ for word in words\n        count = 0\n        for c in word\n            if\
    \ c in consonants\n                count += 1\n            end\n        end\n\
    \        if count == n\n            push!(selected_words, word)\n        end\n\
    \    end\n    return selected_words\nend", "    const vowels = \"aeiouAEIOU\"\n\
    \    words = split(s)\n    count = 0\n    output = []\n    for i in 1:length(words)\n\
    \        count = 0\n        for j in 1:length(words[i])\n            if !contains(vowels,\
    \ words[i][j])\n                count += 1\n            end\n        end\n   \
    \     if count == n\n            push!(output, words[i])\n        end\n    end\n\
    \    return output\nend", "    words = split(s)\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    vowels = \"aeiou\"\n    words_with_n_consonants = []\n    for word in words\n\
    \        if length(word) > 1\n            if count(consonants, word) == n\n  \
    \              push!(words_with_n_consonants, word)\n            end\n       \
    \ end\n    end\n    return words_with_n_consonants\nend", "    #Your code here\n\
    end\n ", "    words = split(s)\n    filtered_words = []\n    for word in words\n\
    \        consonants = 0\n        for char in word\n            if !is_vowel(char)\n\
    \                consonants += 1\n            end\n        end\n        if consonants\
    \ == n\n            push!(filtered_words, word)\n        end\n    end\n    return\
    \ filtered_words\nend", "    \n    return filter(x -> length(regexp(\"[b-df-hj-np-tv-z]\"\
    , x, \"match\")) == n,\n                  split(s, r\"\\s+\"))\nend", "    \n\
    \    # TODO: Implement Me!\n    if isempty(s) return [] end\n    x=split(s)\n\
    \    output=[]\n    for i in x\n        if count_consonants(i)==n\n          \
    \  push!(output,i)\n        end\n    end\n    return output\nend", "    v = split(s)\n\
    \    out = []\n    for elem in v\n        consonants = 0\n        for letter in\
    \ elem\n            if letter in \"bcdfghjklmnpqrstvwxyz\"\n                consonants\
    \ += 1\n            end\n        end\n        if consonants == n\n           \
    \ push!(out, elem)\n        end\n    end\n    return out\nend", "    vowel = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"]\n    res = String[]\n    for w in split(s)\n\
    \        count = 0\n        for c in w\n            if !(c in vowel)\n       \
    \         count += 1\n            end\n        end\n        if count == n\n  \
    \          push!(res, w)\n        end\n    end\n    return res\nend", "    vowels\
    \ = \"aeiouAEIOU\"\n    words = split(s, \" \")\n    vcons = []\n    for w in\
    \ words\n        cons = 0\n        for c in w\n            if c in vowels\n  \
    \              continue\n            else\n                cons += 1\n       \
    \     end\n        end\n        if cons == n\n            push!(vcons, w)\n  \
    \      end\n    end\n    return vcons\nend", "    vowels = \"aeiouAEIOU\"\n  \
    \  consonants = setdiff(findall(r\"[a-zA-Z]\", s), findall(r\"[\"*vowels*\"]\"\
    , s))\n    n_consonants = length(consonants)\n    words = split(s)\n    ans =\
    \ []\n    for i in 1:length(words)\n        v = setdiff(findall(r\"[a-zA-Z]\"\
    , words[i]), findall(r\"[\"*vowels*\"]\", words[i]))\n        if length(v) ==\
    \ n\n            push!(ans, words[i])\n        end\n    end\n    return ans\n\
    end", "    words = split(s)\n    filter(w -> length(regexp(r\"[^aeiou\\s]\", w))\
    \ == n, words)\nend", "    x = s\n    x=split(x)\n    y=x\n    vowels=[\"a\",\"\
    e\",\"i\",\"o\",\"u\",\"A\",\"E\",\"I\",\"O\",\"U\"]\n    a=[]\n    b=[]\n   \
    \ c=0\n    for i in x\n        if i in vowels\n            a=push!(a,i)\n    \
    \    else\n            c=c+1\n        end\n    end\n    for j in 1:length(x)\n\
    \        if c[j]==n\n            b=push!(b,x[j])\n        end\n    end\nend\n\
    \ \n ", "    return split(lowercase(s))\n        |> filter(x -> count(n -> n in\
    \ \"aeiou\", x) == n)\n    end", "    words = split(s)\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    filter(word -> count(c -> c in consonants, word) == n, words)\nend", " \
    \   words = split(s)\n    ncons = [(count_consonants(w), w) for w in words]\n\
    \    selected = [tpl[2] for tpl in ncons if tpl[1] == n]\n    return selected\n\
    end", "    words = split(s)\n    filtered = filter(x -> count_consonants(x) ==\
    \ n, words)\n    return filtered\nend", "    answer = []\n    for word in split(s)\n\
    \        consonants = 0\n        for c in word\n            if c \u2209 ['a',\
    \ 'e', 'i', 'o', 'u']\n                consonants += 1\n            end\n    \
    \    end\n        if consonants == n\n            push!(answer, word)\n      \
    \  end\n    end\n    return answer\nend", "    res = split(s)\n    words = Vector{String}()\n\
    \    for i = 1:length(res)\n        if count_consonants(res[i]) == n\n       \
    \     push!(words, res[i])\n        end\n    end\n    return words\nend", "  \
    \  \n    words = split(s, r\"\\s+\")\n    new_words = []\n    for word in words\n\
    \        n_consonants = length(word) - length(replace(word, r\"[aeiou]\", \"\"\
    ))\n        if n_consonants == n\n            push!(new_words, word)\n       \
    \ end\n    end\n    return new_words\nend", "    #############\n    # your code\
    \ #\n    #############\nend", "    words = split(s, r\"\\s+\")\n    number_of_consonants(word)\
    \ = length(filter(isconsonant, word))\n    return filter(x -> number_of_consonants(x)\
    \ == n, words)\nend", "    s ==> split(s)\n    v = String[]\n    for i in 1:length(s)\n\
    \        if s[i] != \" \"\n            gsub(s[i],\"[aeiou]\",\"\") ==> s[i]\n\
    \            if length(s[i]) == n\n                push!(v,s[i])\n           \
    \ end\n        end\n    end\n    return v\nend", "    p = eachmatch(r\"[A-Za-z]+\"\
    , s)\n    v = []\n    for m in p\n        if sum(ismatch.(r\"[^aeiou]\", m.match))\
    \ == n\n            push!(v, m.match)\n        end\n    end\n    return v\nend",
  "    return split(s) .|> collect .|> filter(a -> length(a) .== n) .|> collect\n\
    end", "    words = split(s)\n    selected_words = []\n    for word in words\n\
    \        if count_consonants(word) == n\n            push!(selected_words, word)\n\
    \        end\n    end\n    return selected_words\nend", "  n_con = collect(Dict(i\
    \ => count_consonants(i), split(s)))\n  word_list = collect(keys(n_con))\n  selected_words\
    \ = []\n  for i in 1:length(word_list)\n    if n_con[word_list[i]] == n\n    \
    \  push!(selected_words, word_list[i])\n    end\n  end\n  return selected_words\n\
    end", "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    words = split(s,\
    \ \" \")\n    num_consonants(word) = length(word) - sum(word .== vowels)\n   \
    \ return [word for word in words if num_consonants(word) == n]\nend", "    s =\
    \ split(s)\n    res = []\n    for elem in s\n        count = 0\n        for i\
    \ in elem\n            if (i in \"bcdfghjklmnpqrstvwxyz\") count += 1 end\n  \
    \      end\n        if (count == n) push!(res, elem) end\n    end\n    return\
    \ res\nend", "    constant cons = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"\
    j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"\
    w\", \"x\", \"z\"]\n    words = split(s)\n    results = []\n    for i in words\n\
    \        count = 0\n        for j in letters(i)\n            if j in cons\n  \
    \              count += 1\n            end\n        end\n        if count == n\n\
    \            push!(results, i)\n        end\n    end\n    return results\nend",
  "    m = matchall(r\"[A-Za-z]+\", s)\n    cnt = [length(matchall(r\"[b-df-hj-np-tv-z]+\"\
    , x)) for x in m]\n    return m[findall(x -> x == n, cnt)]\nend", "    cons =\
    \ \"bcdfghjklmnpqrstvwxyz\"\n    ys = s |> split\n    return [x for x in ys if\
    \ count(cons, x) == n]\nend", "    strs = split(s, \" \")\n    result = []\n \
    \   for string in strs\n        if length(count_consonants(string)) == n\n   \
    \         push!(result, string)\n        end\n    end\n    return result\nend",
  "    words = split(s)\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    result =\
    \ []\n    for word in words\n        num_consonants = 0\n        for letter in\
    \ word\n            if letter in consonants\n                num_consonants +=\
    \ 1\n            end\n        end\n        if num_consonants == n\n          \
    \  push!(result, word)\n        end\n    end\n    return result\nend", "    s=split(s)\n\
    \    isa(s[1],String)\n    return [x for x in s if consonants(x)==n]\nend", " \
    \   v = []\n    if length(s) == 0 return v end\n    words = split(s, \" \")\n\
    \    for w in words\n        c = 0\n        for c in w\n            if c in ['a',\
    \ 'e', 'i', 'o', 'u'] continue end\n            c += 1\n        end\n        if\
    \ c == n push!(v, w) end\n    end\n    return v\nend", "    words = split(s)\n\
    \    result = String[]\n    for w in words\n        w = replace(w, r\"[aeiouAEIOU]\"\
    , \"\")\n        if length(w) == n\n            push!(result, w)\n        end\n\
    \    end\n    return result\nend", "    words = split(s)\n    result = []\n  \
    \  for word in words\n        n_vowels = n_consonants = 0\n        for c in word\n\
    \            if is_vowel(c)\n                n_vowels += 1\n            else\n\
    \                n_consonants += 1\n            end\n        end\n        if n_consonants\
    \ == n\n            push!(result, word)\n        end\n    end\n    return result\n\
    end", "    for i in n:length(s)\n        if length(regexp(r\"\\b[a-zA-Z]+\",s[i]))\
    \ == n\n            push!(s,s[i])\n        end\n    end\n    return s\nend", " \
    \   lst_words = split(s)\n    res = []\n    for word in lst_words\n        lst_char\
    \ = collect(word)\n        n_consonants = 0\n        for char in lst_char\n  \
    \          if char == 'a' || char == 'e' || char == 'i' || char == 'o' || char\
    \ == 'u' || char == 'y'\n                continue\n            else\n        \
    \        n_consonants += 1\n            end\n        end\n        if n_consonants\
    \ == n\n            push!(res, word)\n        end\n    end\n    return res\nend",
  "    words = split(s, \" \")\n    consonants = [\"b\", \"c\", \"d\", \"f\", \"g\"\
    , \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"v\", \"w\", \"x\", \"z\"]\n    consonants_counts = zeros(length(words))\n\
    \    for (index, word) in enumerate(words)\n        for letter in word\n     \
    \       if letter in consonants\n                consonants_counts[index] += 1\n\
    \            end\n        end\n    end\n    return filter(x -> x == n, consonants_counts)\n\
    end", "    s = split(lowercase(s))\n    consonants = [\"b\", \"c\", \"d\", \"\
    f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"v\", \"w\", \"x\", \"z\"]\n    vector = String[]\n    for i in s\n\
    \        cons = 0\n        for j in i\n            if j in consonants\n      \
    \          cons += 1\n            end\n        end\n        if cons == n\n   \
    \         append!(vector, i)\n        end\n    end\n    return vector\nend", " \
    \   words = split(s, r\"\\s+\")\n    words = [w for w in words if length(w) ==\
    \ n && has_n_con(w, n)]\n    return words\nend", "    words = split(s)\n    n_consonants\
    \ = []\n    for word in words\n        counter = 0\n        for c in word\n  \
    \          if !(c in \"aeiouyAEIOUY\")\n                counter += 1\n       \
    \     end\n        end\n        push!(n_consonants, counter)\n    end\n    return\
    \ [words[i] for (i, n) in enumerate(n_consonants) if n == n]\nend", "    return\
    \ map(x -> x[1], filter(x -> length(x[2]) == n, \n        map(x -> [x, x[1] for\
    \ x in x if !x in \"aeiouAEIOU\"], split(s, \" \"))))\nend", "    words = []\n\
    \    for word in split(s)\n        v = count_consonants(word)\n        if v ==\
    \ n\n            push!(words, word)\n        end\n    end\n    return words\n\
    end", "    words = split(s)\n    consonants = [\"b\", \"c\", \"d\", \"f\", \"\
    g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"v\", \"w\", \"x\", \"z\"]\n    consonants_count = [sum(word .== i for i\
    \ in consonants) for word in words]\n    [words[i] for i in 1:length(words) if\
    \ consonants_count[i] == n]\nend", "    # type-assert \"s\" as String, n as Int\n\
    \    return [word for word in split(s) if count_consonants(word) == n]\nend",
  "    words = split(s)\n    ans = Vector{String}()\n    for i in words\n        if\
    \ nconsts(i) == n\n            push!(ans, i)\n        end\n    end\n    return\
    \ ans\nend", "    v::Vector{String} = split(s)\n    x::Vector{String} = []\n \
    \   for i in v\n        y::Int64 = 0\n        for j in i\n            if j \u2209\
    \ ['a', 'e', 'i', 'o', 'u']\n                y += 1\n            end\n       \
    \ end\n        if y == n\n            push!(x, i)\n        end\n    end\n    return\
    \ x\nend", "    # Your code here\n    words = split(s, \" \")\n    result = []\n\
    \    for w in words\n        if count_consonants(w) == n\n            append!(result,\
    \ w)\n        end\n    end\n    return result\nend", "    s = replace(s, \" \"\
    \ => \"\")\n    return split(s, \"\")\nend", "    consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    words = split(s)\n    findall(x -> count_consonants(x) == n, words)\nend",
  "    \n    if isempty(s)\n        return []\n    end\n    \n    vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n    words = split(s)\n    result = []\n    \n \
    \   for i = 1:length(words)\n        num_consonants = 0\n        word = words[i]\n\
    \        for j = 1:length(word)\n            if !in(lowercase(word[j]), vowels)\n\
    \                num_consonants += 1\n            end\n        end\n        if\
    \ num_consonants == n\n            push!(result, word)\n        end\n    end\n\
    \    \n    return result\nend", "    s=split(s)\n    #Array(String,0)\n    nconsonant(x::String)=length(eachmatch(r\"\
    [^aeiouAEIOU ]\",x))==n\n    k=filter(nconsonant,s)\n    return k\nend", "   \
    \ words = split(s, r\"\\s+\")\n    selected = []\n    for word in words\n    \
    \    if length(filter(is_consonant, word)) == n\n            push!(selected, word)\n\
    \        end\n    end\n    return selected\nend", "    ...\nend", "    v = split(s)\n\
    \    empty!(v)\n    for w in split(s)\n        if ncons(w) == n\n            push!(v,\
    \ w)\n        end\n    end\n    return v\nend", "    words = split(s, \" \")\n\
    \    len_words = length(words)\n    for word in words\n        len_word = length(word)\n\
    \        count = 0\n        for char in word\n            if contains(vowels,\
    \ char)\n                len_word -= 1\n            end\n        end\n       \
    \ if len_word != n\n            len_words -= 1\n        end\n    end\n    new_array\
    \ = zeros(String, len_words)\n    index = 1\n    for word in words\n        len_word\
    \ = length(word)\n        count = 0\n        for char in word\n            if\
    \ contains(vowels, char)\n                len_word -= 1\n            end\n   \
    \     end\n        if len_word == n\n            new_array[index] = word\n   \
    \         index += 1\n        end\n    end\n    return new_array\nend", "    a\
    \ = split(s, \" \")\n    r = []\n    for i in a\n        count = 0\n        for\
    \ j in i\n            if j != 'a' && j != 'e' && j != 'i' && j != 'o' && j !=\
    \ 'u' && j != 'y'\n                count += 1\n            end\n        end\n\
    \        if count == n\n            push!(r, i)\n        end\n    end\n    return\
    \ r\nend", "    cons_vec = Vector{String}()\n    count_cons = Dict{Char, Int64}()\n\
    \    for ch in s\n        if ch in 'bcdfghjklmnpqrstvwxyz'\n            if haskey(count_cons,\
    \ ch)\n                count_cons[ch] += 1\n            else\n               \
    \ count_cons[ch] = 1\n            end\n        end\n    end\n    for key in keys(count_cons)\n\
    \        if count_cons[key] == n\n            push!(cons_vec, key)\n        end\n\
    \    end\n    cons_vec\nend", '    vowels = [false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false,', "    matches = matchall(r\"\
    (\\b[^aeiou ]{$n}\\b)\", s)\n    return matches.captures\nend", "    words = split(s,\
    \ r\"\\s+\")\n    num_consonants(w::String) = length(filter(a-> !haskey(Dict('a','e','i','o','u'),\
    \ a), w))\n    consonant_count = [num_consonants(w) for w in words]\n    return\
    \ words[findall(consonant_count.==n)]\nend", "    # define a vowels list\n   \
    \ vowels = ['a', 'e', 'i', 'o', 'u'] \n    # check if the input string is empty\n\
    \    if isempty(s)\n        return []\n    end\n    # split the string into a\
    \ list of string\n    s_list = split(s)\n    # define a result vector\n    result\
    \ = []\n    # define a counter function\n    function consonant_counter(s::String)::Int64\n\
    \        counter = 0\n        for letter in s\n            if !(letter in vowels)\n\
    \                counter += 1\n            end\n        end\n        return counter\n\
    \    end\n    # check if the number of consonants is equal to n\n    for word\
    \ in s_list\n        if consonant_counter(word) == n\n            push!(result,\
    \ word)\n        end\n    end\n    return result\nend", "    cons, words = 1,\
    \ []\n    while cons <= n\n        for word in split(s)\n            if length(filter(isalpha,\
    \ word)) == n\n                push!(words, word)\n            end\n        end\n\
    \        cons += 1\n    end\n    return words\nend", "    v = split(s, \" \")\
    \ # split the string on spaces into a vector of words\n    for i in 1:length(v)\n\
    \        if count_consonants(v[i]) == n\n            push!(v, v[i])\n        end\n\
    \    end\n    return v\nend", "    count = 0\n    words = []\n    for word in\
    \ split(s)\n        for char in word\n            if char in \"bcdfghjklmnpqrstvwxyz\"\
    \n                count += 1\n            end\n        end\n        if count ==\
    \ n\n            push!(words, word)\n        end\n        count = 0\n    end\n\
    \    return words\nend", "    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    return\
    \ [word for word in split(s) if count(consonants, word) == n]\nend\n    ", " \
    \   words = split(s)\n    inds = findall(countcons(w) == n for w in words)\n \
    \   return [words[i] for i in inds]\nend", "    s = split(s)\n    y = Vector{String}()\n\
    \    for i in s\n        count = 0\n        vowels = [\"a\", \"e\", \"i\", \"\
    o\", \"u\"]\n        for j in i\n            if j in vowels\n                count\
    \ += 1\n            end\n        end\n        if length(i) - count == n\n    \
    \        push!(y, i)\n        end\n    end\n    return y\nend", "    words = split(s,\
    \ \" \")\n    # filter((w) -> count_consonants(w) == n, words)\n    # map((w)\
    \ -> count_consonants(w), words)\n    # select((w) -> count_consonants(w) == n,\
    \ words)\n    return [w for w in words if count_consonants(w) == n]\nend", " \
    \ counter = 0\n  words = split(s, \" \")\n  for word in words\n    for letter\
    \ in word\n      if is_consonant(letter)\n        counter += 1\n      end\n  \
    \  end\n    if counter == n\n      return word\n    end\n    counter = 0\n  end\n\
    \  return []\nend", "    words = split(s)\n    selected_words = []\n    for i\
    \ in 1:length(words)\n        if n == nconsonants(words[i])\n            push!(selected_words,\
    \ words[i])\n        end\n    end\n    return selected_words\nend", "    return\
    \ [w for w in split(s) if count(x -> (x \u2208 'aeiou'), w) == n]\nend", "   \
    \ # Your code here!\nend", "    words = split(s)\n    result = []\n    for i in\
    \ 1:length(words)\n        if length(split(words[i])) - 1 == n\n            push!(result,\
    \ words[i])\n        end\n    end\n    return result\nend", "    words = split(s)\n\
    \    x = []\n    for word in words\n        if length(regexp(\"[^AEIOUaeiou]\"\
    , word)) == n\n            push!(x, word)\n        end\n    end\n    return x\n\
    end", "    arr=split(s)\n    arr_con=Array{Int64}(length(arr))\n    for i in 1:length(arr)\n\
    \        arr_con[i]=length(filter(isalpha,arr[i]))-length(findall(x->x in \"aeiou\"\
    ,arr[i]))\n    end\n    return(arr[findall(x->x==n,arr_con)])\nend", "    n_cons_words\
    \ = split(s, \" \") |> filter(x -> count_consonants(x) == n)\n    return n_cons_words\n\
    end", "    # Split by whitespace\n    words = split(s)\n    # Initialize count\
    \ array\n    counts = []\n    for word in words\n        count = 0\n        for\
    \ char in word\n            if !(char in [\"a\", \"e\", \"i\", \"o\", \"u\"])\n\
    \                count += 1\n            end\n        end\n        append!(counts,\
    \ count)\n    end\n    # Initialize solution vector\n    sol = []\n    for (i,\
    \ count) in enumerate(counts)\n        if count == n\n            append!(sol,\
    \ words[i])\n        end\n    end\n    return sol\nend", "    v = []\n    i =\
    \ 0\n    while i < length(s)\n        if !isalpha(s[i])\n            i += 1\n\
    \            continue\n        end\n        word = String[]\n        while i <\
    \ length(s) && isalpha(s[i])\n            push!(word, s[i])\n            i +=\
    \ 1\n        end\n        if length(word) == n\n            push!(v, join(word))\n\
    \        end\n    end\n    return v\nend", "  return [word for word in split(s)\
    \ if sum(ismatch.(r\"[b-df-hj-np-tv-z]\",word)) == n]\nend\n@test select_words(\"\
    Mary had a little lamb\", 4) == [\"little\"]\n@test select_words(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"]\n@test select_words(\"simple white\
    \ space\", 2) == []\n@test select_words(\"Hello world\", 4) == [\"world\"]\n@test\
    \ select_words(\"Uncle sam\", 3) == [\"Uncle\"]", "    words = split(s, r\"\\\
    s+\")\n    v = Vector{String}()\n    for i = 1:length(words)\n        push!(v,\
    \ words[i]) if sum(ismatch.(r\"\\p{Letter}\", split(words[i], \"\"))) == n\n \
    \   end\n    return v\nend", "    return split(s) |> filter(w -> count_consonants(w)\
    \ == n) |> Vector\nend", "    s = split(s) #split the string into words\n    i\
    \ = 1 #initialize counter\n    v = Vector{String}() #initialize output vector\n\
    \    for word in s #for each word in split string\n        if length(consonants(word))\
    \ == n #if the word has exactly n consonants\n            v = push!(v, word) #push\
    \ the word to output vector\n        end\n    end\n    return v #return output\
    \ vector\nend", "    consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"\
    j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"\
    w\", \"x\", \"z\"]\n    # Splits string by word and iterates over each word\n\
    \    split(s,r\"\\s+\")[reduce(x->contains(consonants, x),split(s,r\"\\s+\")[1],0)==n]\n\
    end", "    #treat s as one word\n    return [x for x in split(s) if consonants(x)\
    \ == n]\nend", "    function isConsonant(c::Char)::Bool\n        if c in \"aeiouAEIOU\"\
    \n            return false\n        else\n            return true\n        end\n\
    \    end\n    function numConsonants(w::String)::Int64\n        nc = 0\n     \
    \   for c in w\n            if isConsonant(c)\n                nc += 1\n     \
    \       end\n        end\n        return nc\n    end\n    for i in split(s)\n\
    \        if numConsonants(i) == n\n            println(i)\n        end\n    end\n\
    end", "    \"\"\"Return a vector of words with n consonants, in order they appear\
    \ in s\"\"\"\n    words = split(s)\n    num_consonants(word) = length(regexp(r\"\
    [bcdfghjklmnpqrstvwxz]\", word, ignorecase=true))\n    consonant_words = [word\
    \ for word in words if num_consonants(word) == n]\n    return consonant_words\n\
    end\n# Test cases:\nprintln(\"\\nNum consonants, then words:\")\nprint(select_words(\"\
    Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\",\
    \ 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello\
    \ world\", 4))\nprint(select_words(\"Uncle sam\", 3))", "    # your code\nend",
  "    nvowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"]\n    if n == 0 \n    \
    \    return split(s)\n    end\n    w = Vector{String}()\n    for j in split(s)\n\
    \        if !(j in nvowels)\n            push!(w, j)\n        end\n    end\n \
    \   return w\nend\ns = \"Mary had a little lamb\"\nselect_words(s, 4)\nselect_words(s,\
    \ 3)", "    L = split(s)\n    L = [w for w in L if length(findall(r\"[bcdfghjklmnpqrstvwxz]\"\
    , w)) == n]\n    return L\nend", "    cons = \"bBcCdDfFgGhHjJkKlLmMnNpPqQrRsStTvVwWxXyYzZ\"\
    \n    words = split(s)\n    if s == \"\"\n        return []\n    end\n    result\
    \ = Vector{String}()\n    for i in 1:length(words)\n        count = 0\n      \
    \  for j in 1:length(words[i])\n            if occursin(words[i][j], cons)\n \
    \               count += 1\n            end\n        end\n        if count ==\
    \ n\n            push!(result, words[i])\n        end\n    end\n    return result\n\
    end", "    words = split(s)\n    matches = []\n    for word in words\n       \
    \ count = 0\n        for c in word\n            if c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u'\n                count += 1\n            end\n \
    \       end\n        if count == n\n            push!(matches, word)\n       \
    \ end\n    end\n    return matches\nend", "    if s == \"\"\n        return []\n\
    \    end\n    ans = []\n    s = split(s)\n    for i = 1:length(s)\n        count\
    \ = 0\n        for j = 1:length(s[i])\n            ch = s[i][j]\n            if\
    \ ch != 'a' && ch != 'e' && ch != 'i' && ch != 'o' && ch != 'u' && ch != 'A' &&\
    \ ch != 'E' && ch != 'I' && ch != 'O' && ch != 'U'\n                count += 1\n\
    \            end\n        end\n        if count == n\n            push!(ans, s[i])\n\
    \        end\n    end\n    return ans\nend", "    # Your code here\n    return\
    \ 0\nend", "    words = split(s, \" \")\n    output = []\n    for word in words\n\
    \        n_consonants = length(consonants(word))\n        if n_consonants == n\n\
    \            push!(output, word)\n        end\n    end\n    return output\nend",
  "    is_consonant(x) = x != 'a' && x != 'e' && x != 'i' && x != 'o' && x != 'u'\n\
    \    count(word) = length(filter(is_consonant, word))\n    arr = map(x -> count(x),\
    \ split(s))\n    return filter(x -> x == n, arr)\nend", "    letters = split(s)\n\
    \    words = []\n    for i in 1:length(letters)\n        c = 0\n        for j\
    \ in 1:length(letters[i])\n            if (letters[i][j] == 'a' || letters[i][j]\
    \ == 'e' || letters[i][j] == 'i' || letters[i][j] == 'o' || letters[i][j] == 'u')\n\
    \                c = c + 1\n            end\n        end\n        if (length(letters[i])\
    \ - c == n)\n            push!(words, letters[i])\n        end\n    end\n    return\
    \ words\nend\n@testset \"Test Cases\" begin\n    @test select_words(\"Mary had\
    \ a little lamb\", 4) == [\"little\"]\n    @test select_words(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"]\n    @test select_words(\"simple white space\"\
    , 2) == []\n    @test select_words(\"Hello world\", 4) == [\"world\"]\n    @test\
    \ select_words(\"Uncle sam\", 3) == [\"Uncle\"]\nend", "    const vowels = \"\
    aeiouAEIOU\"\n    words = split(s)\n    result = []\n    for word in words\n \
    \       word_result = []\n        for char in word\n            if !(char in vowels)\n\
    \                push!(word_result, char)\n            end\n        end\n    \
    \    if length(word_result) == n\n            push!(result, word)\n        end\n\
    \    end\n    return result\nend", "    words = split(s)\n    to_keep = []\n \
    \   for word in words\n        if count_consonants(word) == n\n            push!(to_keep,\
    \ word)\n        end\n    end\n    return to_keep\nend", "    if !isempty(s)\n\
    \        if length(s) <= 1\n            s = filter(isalpha, s)\n            if\
    \ length(s) == 0\n                return []\n            else\n              \
    \  v = isvowel(s[1])\n                if v && n == 0\n                    return\
    \ [s]\n                elseif !v && n == 1\n                    return [s]\n \
    \               else\n                    return []\n                end\n   \
    \         end\n        else\n            words = split(s, \" \")\n           \
    \ return filter(word -> length(word) == n + length(filter(isvowel, word)), words)\n\
    \        end\n    else\n        return []\n    end\nend\n \n \n ", "    # Initialize\
    \ an empty vector \n    words = []\n    # Splitting string s into individual words\n\
    \    s_array = split(s)\n    for i in s_array\n        # Get the length of the\
    \ current word i and number of consonants\n        length_i = length(i)\n    \
    \    i_consonants = get_consonants(i)\n        # If the length of the current\
    \ word i and number of consonants \n        # are equal to the given natural number\
    \ n, then append i to vector words\n        if length_i == n && i_consonants ==\
    \ n\n            push!(words, i)\n        end\n    end\n    return words\nend",
  "    # your code here\n    # for example: you can use the following function to\
    \ determine if a character is a consonant: isconsonant(c::Char) = c in \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \nend\n@test select_words(\"Mary had a little lamb\", 4) == [\"little\"]\n@test\
    \ select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n@test select_words(\"\
    simple white space\", 2) == []\n@test select_words(\"Hello world\", 4) == [\"\
    world\"]\n@test select_words(\"Uncle sam\", 3) == [\"Uncle\"]\n@test select_words(\"\
    \", 4) == []\n@test select_words(\" \", 4) == []\n@test select_words(\" abc\"\
    , 4) == []\n \n@test select_words(\"A b c d E f g h I j k l M n o p Q r s t V\
    \ w x y Z\", 1) == [\"b\", \"d\", \"f\", \"h\", \"j\", \"l\", \"n\", \"p\", \"\
    r\", \"t\", \"v\", \"x\", \"z\"]\n@test select_words(\"A b c d E f g h I j k l\
    \ M n o p Q r s t V w x y Z\", 2) == [\"ab\", \"cd\", \"ef\", \"gh\", \"ij\",\
    \ \"kl\", \"mn\", \"op\", \"qr\", \"st\", \"vw\", \"xy\"]\n@test select_words(\"\
    A b c d E f g h I j k l M n o p Q r s t V w x y Z\", 26) == [\"AbCdEfGhIjKlMnOpQrStVwXyZ\"\
    ]\n@test select_words(\"A b c d E f g h I j k l M n o p Q r s t V w x y Z\", 27)\
    \ == []\n \n@test select_words(\"a a b c d e\", 1) == [\"b\", \"d\"]\n@test select_words(\"\
    a a b c d e\", 2) == [\"ab\", \"cd\"]\n@test select_words(\"a a b c d e\", 3)\
    \ ==", "    #Your implementation goes here\n    count = 0\n    result = String[]\n\
    \    for i in s\n        if isconsonant(i)\n            count += 1\n        else\n\
    \            if count == n\n                push!(result, s[i])\n            end\n\
    \            count = 0\n        end\n    end\n    return result\nend", "    words\
    \ = split(s, \" \")\n    words_with_n_consonants = []\n    consonants = [\"b\"\
    , \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\"]\n    for word in words\n\
    \        word_consonants = []\n        for letter in word\n            if letter\
    \ in consonants\n                push!(word_consonants, letter)\n            end\n\
    \        end\n        if length(word_consonants) == n\n            push!(words_with_n_consonants,\
    \ word)\n        end\n    end\n    return words_with_n_consonants\nend", "   \
    \ t = split(s)\n    v = []\n    for i in t\n        if consonants(i) == n\n  \
    \          push!(v, i)\n        end\n    end\n    return v\nend", "    string_to_vector(s)\n\
    \    number_of_consonants(s)\n    b = []\n    for i in 1:length(s)\n        if\
    \ contains(s[i], ' ')\n            a = number_of_consonants(s[i])\n          \
    \  if a == n\n                push!(b,s[i])\n            end\n        end\n  \
    \  end\n    return b\nend\n            \n    \n    \n    ", "    # vec = split(s,\
    \ \" \")\n    # vec_re = []\n    # for word in vec\n    #     count = 0\n    #\
    \     for c in word\n    #         if c in \"aeiou\"\n    #             count\
    \ += 1\n    #         end\n    #     end\n    #     if count == n\n    #     \
    \    push!(vec_re, word)\n    #     end\n    # end\n    # return vec_re\n    filter(x\
    \ -> count(x, y -> y in \"aeiou\") == n, split(s, \" \"))\nend", "    x = split(s)\n\
    \    output = []\n    for i in 1:length(x)\n        if count_consonants(x[i])\
    \ == n\n            push!(output, x[i])\n        end\n    end\n    return output\n\
    end", "    # Base cases\n    if isempty(s)\n        return []\n    end\n    #\
    \ Count the number of non-vowels in the string\n    consonants = [str for str\
    \ in split(s) if length(str) == n && count_consonants(str) == n]\n    return consonants\n\
    end", "    words = split(s)\n    words_count = []\n    for word in words\n   \
    \     c = 0\n        for letter in word\n            if letter in \"bcdfghjklmnpqrstvwxyz\"\
    \n                c += 1\n            end\n        end\n        if c == n\n  \
    \          push!(words_count, word)\n        end\n    end\n    return words_count\n\
    end", "    s = split(s)\n    num = []\n    for i in s\n        push!(num, num_consonants(i))\n\
    \    end\n    s[num .== n]\nend", "    v_s = split(s)\n    v_res = String[]\n\
    \    for word in v_s\n        count = 0\n        for l in word\n            if\
    \ isconsonant(l)\n                count += 1\n            end\n        end\n \
    \       if count == n\n            push!(v_res, word)\n        end\n    end\n\
    \    return v_res\nend", "    word_list = split(s, \" \")\n    consonant_list\
    \ = []\n    num_list = []\n    final_list = []\n    for i = 1:length(word_list)\n\
    \        consonant_list = []\n        word = word_list[i]\n        for i = 1:length(word)\n\
    \            if lowercase(word[i]) in ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k',\
    \ 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z']\n              \
    \  push!(consonant_list, 1)\n            end\n        end\n        push!(num_list,\
    \ length(consonant_list))\n    end\n    for i = 1:length(num_list)\n        if\
    \ num_list[i] == n\n            push!(final_list, word_list[i])\n        end\n\
    \    end\n    return final_list\nend", "    if s == \"\"\n        return []\n\
    \    end\n    # Split the string\n    words = split(s)\n    consonants = ['b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'z']\n    word_with_n_consonants = []\n    for word in words\n   \
    \     num_consonants = 0\n        for letter in word\n            if letter in\
    \ consonants\n                num_consonants += 1\n            end\n        end\n\
    \        if num_consonants == n\n            push!(word_with_n_consonants, word)\n\
    \        end\n    end\n    return word_with_n_consonants\nend", "    if n==0\n\
    \        return []\n    end\n    words = split(s)\n    indices = findall(x->sum(ismatch.(r\"\
    [bcdfghjklmnpqrstvwxyz]\", collect(x)))==n, words)\n    return words[indices]\n\
    end", "    l = split(s, \" \")\n    r = []\n    v = Vector{String}(0)\n    for\
    \ i in l\n        vowels = 0\n        consonants = 0\n        for j in i\n   \
    \         if j == 'a' || j == 'e' || j == 'i' || j == 'o' || j == 'u' || j ==\
    \ 'A' || j == 'E' || j == 'I' || j == 'O' || j == 'U'\n                vowels\
    \ += 1\n            else\n                consonants += 1\n            end\n \
    \       end\n        if consonants == n\n            push!(r, i)\n        end\n\
    \    end\n    return r\nend", "    a = split(s)\n    b = collect(Set(a))\n   \
    \ c = []\n    for i in b\n        consonants = n_consonants(i)\n        if consonants\
    \ == n\n            push!(c, i)\n        end\n    end\n    return c\nend", " \
    \   # your code here\n    words = split(s)\n    res = []\n    nconsonants(word)\
    \ = length(filter(ch->!(ch in \"aeiouAEIOU\"), word))\n    for word in words\n\
    \        if(nconsonants(word) == n)\n            push!(res, word)\n        end\n\
    \    end\n    return res\nend\n ", "    words = split(s, r\"\\s+\")\n    consonants\
    \ = \"bcdfghjklmnpqrstvwxyz\"\n    words_with_n_consonants = []\n    for word\
    \ in words\n        consonant_count = 0\n        for char in word\n          \
    \  if char in consonants\n                consonant_count += 1\n            end\n\
    \        end\n        if consonant_count == n\n            push!(words_with_n_consonants,\
    \ word)\n        end\n    end\n    return words_with_n_consonants\nend", "   \
    \ split_words = split(s, \" \")\n    output = String[]\n    for item in split_words\n\
    \        consonants = 0\n        if length(item) == 1\n            continue\n\
    \        end\n        for letter in item\n            if letter != \"a\" && letter\
    \ != \"e\" && letter != \"i\" && letter != \"o\" && letter != \"u\"\n        \
    \        consonants += 1\n            end\n        end\n        if consonants\
    \ == n\n            push!(output, item)\n        end\n    end\n    return output\n\
    end", "    \n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"] \n    space = \"\
    \ \"\n    res = split(s, space)\n    #println(res)\n    f = findall(r\"$n\", s)\n\
    \    println(f)\n    #n = length(f)\n    words = []\n    for i in s\n        if\
    \ i in vowels\n            n -= 1\n        end\n        n = n\n    end\n    println(n)\n\
    \    #for i in s\n     #   if i in vowels\n      #      c += 1\n       # end\n\
    \    #end\n    return words\nend", "    s_vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\", \"y\"]\n    s_split = split(s)\n    s_words = []\n    for word in s_split\n\
    \        if length(word) == 1 && word in s_vowels\n            next\n        end\n\
    \        vowels = 0\n        for letter in word\n            if letter in s_vowels\n\
    \                vowels += 1\n            end\n        end\n        if length(word)\
    \ - vowels == n\n            push!(s_words, word)\n        end\n    end\n    return\
    \ s_words\nend", "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    words\
    \ = split(s, \" \")\n    num_consonants = [count_notin(w, vowels) for w in words]\n\
    \    return words[findall(num_consonants .== n)]\nend", "    length(filter(x ->\
    \ length(match(r\"[^aeiouAEIOU\\s]\", x)) == n, split(s))) == 0 ?\n        []\
    \ : filter(x -> length(match(r\"[^aeiouAEIOU\\s]\", x)) == n, split(s))\nend",
  "    words = split(s)\n    ret = String[]\n    for word in words\n        if count_consonants(word)\
    \ == n\n            push!(ret, word)\n        end\n    end\n    return ret\nend",
  "    vowels = \"aeiou\"\n    words = split(s)\n    results = []\n    for word in\
    \ words\n        n_consonants = sum(!(vowels.contains(char) for char in word))\n\
    \        if n_consonants == n\n            push!(results, word)\n        end\n\
    \    end\n    return results\nend", "    if n==0 return split(s) end\n    s=split(s)\n\
    \    c=[]\n    for i in 1:length(s)\n        con=0\n        for j in 1:length(s[i])\n\
    \            for k in 1:length(vowel)\n                if s[i][j] in vowel[k]\
    \ \n                    con+=1\n                    break\n                end\n\
    \            end\n        end\n        if con == n\n            push!(c,s[i])\n\
    \        end\n    end\n    return c\nend\nselect_words(\"Mary had a little lamb\"\
    , 4)", "    words = []\n    for word in split(s)\n        if count_consonants(word)\
    \ == n\n            push!(words, word)\n        end\n    end\n    return words\n\
    end", "    string_count = 0\n    consonants = [\"b\", \"c\", \"d\", \"f\", \"\
    g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"v\", \"w\", \"x\", \"z\"]\n    words = split(s, \" \")\n    result = []\n\
    \    for i in 1:length(words)\n        string_count = 0\n        for j in 1:length(words[i])\n\
    \            for k in 1:length(consonants)\n                if words[i][j] ==\
    \ consonants[k]\n                    string_count += 1\n                end\n\
    \            end\n        end\n        if string_count == n\n            push!(result,\
    \ words[i])\n        end\n    end\n    return result\nend", "    word_array =\
    \ split(s, r\"\\s+\") # Convert string to an array\n    word_array_1 = findall(r\"\
    [A-Za-z]+\", s) # Drop empty strings\n    consonant_array = findall(r\"[^AEIOUaeiou]\"\
    , word_array_1) # Filter words using consonants regular expression\n    return\
    \ consonant_array # Returns the array\nend", "    # Your code here\n    words\
    \ = split(s)\n    selected_words = []\n    for i in 1:length(words)\n        if\
    \ count_consonants(words[i]) == n\n            push!(selected_words, words[i])\n\
    \        end\n    end\n    return selected_words\nend", "    words = split(s)\n\
    \    total = []\n    for word in words\n        consonants = sum(vowels .!= word)\n\
    \        if consonants == n\n            push!(total, word)\n        end\n   \
    \ end\n    return total\nend", "    s = lowercase(s)\n    words = split(s, \"\
    \ \")\n    result = []\n    for word in words\n        count = 0\n        for\
    \ x in word\n            if x \u2209 [\"a\", \"e\", \"i\", \"o\", \"u\"]\n   \
    \             count += 1\n            end\n        end\n        if count == n\n\
    \            push!(result, word)\n        end\n    end\n    return result\nend",
  "    #Select words from string s that contain exactly n consonants\n    #Create\
    \ empty vector for storing words\n    words = []\n    #For every word in string\
    \ s\n    for i = 1:length(s)\n        #If the word contains exactly n consonants\n\
    \        if count_consonants(s[i]) == n\n            #Add the word to the vector\n\
    \            push!(words, s[i])\n        end\n    end\n    #Return the vector\n\
    \    return words\nend", "    vowels = ['a', 'e', 'i', 'o', 'u']\n    words =\
    \ split(s, \" \")\n    indices = findall(x -> count(vowels, x) == n, words)\n\
    \    return words[indices]\nend", "    words = split(s)\n    result = []\n   \
    \ for word in words\n        if length(filter(c -> isconsonant(c), split(word)))\
    \ == n\n            push!(result, word)\n        end\n    end\n    return result\n\
    end", "    words = split(s, \" \")\n    words_with_n_consonants = filter(x ->\
    \ length(filter(a -> !in(\"aeiou\", a),\n                                    \
    \                 collect(x))) == n,\n                                     words)\n\
    \    return words_with_n_consonants\nend", "    words = split(s)\n    words =\
    \ filter(w -> length(regexp(r\"\\w\", w))==n, words)\n    return words\nend",
  "    # your code goes here\nend", "    ret = String[]\n    nc = 0\n    con = [\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\"]\n    for word in\
    \ split(s)\n        nc = 0\n        for l in word\n            if l in con\n \
    \               nc += 1\n            end\n        end\n        if nc == n\n  \
    \          append!(ret, word)\n        end\n    end\n    return ret\nend", " \
    \   words = split(s)\n    vowels = \"aeiou\"\n    result = []\n    for word in\
    \ words\n        word_split = collect(word)\n        cons = 0\n        for letter\
    \ in word_split\n            if !(letter in vowels)\n                cons = cons\
    \ + 1\n            end\n        end\n        if cons == n\n            push!(result,\
    \ word)\n        end\n    end\n    return result\nend", "    #your code here\n\
    end", "    words = split(s)\n    result = []\n    consonants = [\"b\", \"c\",\
    \ \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\"]\n    for word in words\n  \
    \      num = 0\n        for letter in word\n            if letter in consonants\n\
    \                num += 1\n            end\n        end\n        if num == n\n\
    \            push!(result, word)\n        end\n    end\n    return result\nend\n\
    select_words(\"Mary had a little lamb\", 4)", "    words = split(s)\n    num_consonants(w::String)\
    \ = length(findall(x -> x in \"bcdfghjklmnpqrstvwxyz\", w))\n    consonant_words\
    \ = filter(x -> num_consonants(x) == n, words)\n    return consonant_words\nend",
  "    is_not_vowel(c::Char) = !(c in ['a', 'e', 'i', 'o', 'u'])\n    words = split(s)\n\
    \    word_length = length.(words)\n    word_num_consonants = count(is_not_vowel,\
    \ words)\n    is_word_with_exactly_n_consonants = (word_length .== word_num_consonants)\
    \ .& (word_num_consonants .== n)\n    return words[is_word_with_exactly_n_consonants]\n\
    end", "    words = split(s, \" \")\n    counts = [count(w) for w in words]\n \
    \   return words[counts .== n]\nend", "    words = split(s)\n    words_n_consonants\
    \ = []\n    for word in words\n        if count_consonants(word) == n\n      \
    \      push!(words_n_consonants, word)\n        end\n    end\n    return words_n_consonants\n\
    end", "    s = split(s)\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    c = 0\n\
    \    words = []\n    for j in 1:length(s)\n        for i in s[j]\n           \
    \ if i in consonants\n                c += 1\n            end\n        end\n \
    \       if c == n\n            push!(words, s[j])\n        end\n        c = 0\n\
    \    end\n    return words\nend", "    words = split(s)\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    res = String[]\n    for word in words\n        num_consonants = length(consonants)\n\
    \        for letter in word\n            if letter in consonants\n           \
    \     num_consonants -= 1\n            end\n        end\n        if num_consonants\
    \ == n\n            push!(res, word)\n        end\n    end\n    return res\nend",
  "    # TODO\n    end\nend", "    s = split(s)\n    j = 0\n    for i in 1:length(s)\n\
    \        if length(filter(x->x in [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"\
    E\", \"I\", \"O\", \"U\"], split(s[i]))) == length(split(s[i])) - n\n        \
    \    s[j+1] = s[i]\n            j += 1\n        end\n    end\n    return s[1:j]\n\
    end", "    function count_consonants(word::String)::Int64\n        vowels = \"\
    aeiouAEIOU\"\n        consonants = Set(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    )\n        remove = Set(\" \")\n        consonants = copy(consonants)\n      \
    \  remove = copy(remove)\n        for c in word\n            if c in consonants\n\
    \                consonants = delete!(consonants, c)\n            elseif c in\
    \ remove\n                remove = delete!(remove, c)\n            end\n     \
    \   end\n        return length(consonants)\n    end\n    words = split(s, r\"\\\
    s+\")\n    filtered_words = words[(count_consonants.(words)) .== n]\n    return\
    \ filtered_words\nend", "    a = split(s, \" \")\n    output = []\n    for word\
    \ in a\n        if num_consonants(word) == n\n            push!(output, word)\n\
    \        end\n    end\n    return output\nend", "    A = split(s)\n    B = []\n\
    \    C = []\n    for j = 1:length(A)\n        B = []\n        for i = 1:length(A[j])\n\
    \            if !(A[j][i] in ['a','e','i','o','u','A','E','I','O','U',' '])\n\
    \                push!(B,A[j][i])\n            end\n        end\n        if length(B)\
    \ == n\n            push!(C,A[j])\n        end\n    end\n    return C\nend", " \
    \   # your code goes here\nend", "    output = []\n    for word in split(s)\n\
    \        consonants = 0\n        for letter in word\n            if letter in\
    \ [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\"]\n           \
    \     consonants += 1\n            end\n        end\n        if consonants ==\
    \ n\n            push!(output, word)\n        end\n    end\n    return output\n\
    end", "    \n    const consonants = \"bcdfghjklmnpqrstvwxyz\"\n    # initialize\
    \ an empty array\n    words = []\n    # replace space with dot\n    replaced =\
    \ replace(s, \" \" => \".\")\n    # split the string into array\n    splitted\
    \ = split(replaced, \".\")\n    # iterate over the splitted array\n    for i in\
    \ splitted\n        if(count(consonants, i) == n)\n            # if the number\
    \ of consonants is equal to the number n\n            # push the word into the\
    \ array\n            push!(words, i)\n        end\n    end\n    return words\n\
    end", "    n_cons = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"\
    z\"]\n    words = split(s)\n    result = []\n    for word in words\n        if\
    \ length(filter(x -> x in n_cons, word)) == n\n            push!(result, word)\n\
    \        end\n    end\n    return result\nend", "    splitted_s = split(s)\n \
    \   selected_words = []\n    for word in splitted_s\n        if contains_exactly_n_consonants(word,\
    \ n)\n            push!(selected_words, word)\n        end\n    end\n    return\
    \ selected_words\nend", "    words = split(s)\n    selected_words = []\n    for\
    \ i in 1:length(words)\n        nconsonants = get_nconsonants(words[i])\n    \
    \    if nconsonants == n\n            push!(selected_words, words[i])\n      \
    \  end\n    end\n    return selected_words\nend", "    vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"]\n    s_split = split(s)\n    out = Vector{String}()\n \
    \   for i in 1:length(s_split)\n        count = 0\n        for j in 1:length(s_split[i])\n\
    \            if !(s_split[i][j] in vowels)\n                count += 1\n     \
    \       end\n        end\n        if count == n\n            push!(out, s_split[i])\n\
    \        end\n    end\n    return out\nend", "    words = split(s)\n    consonants\
    \ = [c for c in \"bcdfghjklmnpqrstvwxyz\" if c != \"a\" && c != \"e\" && c !=\
    \ \"i\" && c != \"o\" && c != \"u\"]\n    if n == 1\n        consonants = consonants[1]\n\
    \    end\n    matched_words = []\n    for word in words\n        if count(consonants,\
    \ word) == n\n            push!(matched_words, word)\n        end\n    end\n \
    \   return matched_words\nend", "    words = split(s)\n    words_filtered = String[]\n\
    \    for word in words\n        consonants = 0\n        for letter in word\n \
    \           if !(letter in ['a', 'e', 'i', 'o', 'u', 'y'])\n                consonants\
    \ += 1\n            end\n        end\n        if consonants == n\n           \
    \ push!(words_filtered, word)\n        end\n    end\n    return words_filtered\n\
    end", "    str = split(s)\n    dict = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\"\
    , \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\"\
    , \"w\", \"x\", \"z\"]\n    vec = []\n    i = 0\n    while i < length(str)\n \
    \       word = str[i]\n        counter = 0\n        j = 0\n        while j < length(word)\n\
    \            if word[j] in dict\n                counter += 1\n            end\n\
    \            j += 1\n        end\n        if counter == n\n            push!(vec,\
    \ word)\n        end\n        i += 1\n    end\n    return vec\nend", "    # First\
    \ get all words\n    words = split(s)\n    # Then define a function that gets\
    \ all consonents from a word\n    function get_consonents(w::String)::Vector{Char}\n\
    \        letters = split(w)\n        consonents = []\n        for letter in letters\n\
    \            if letter in [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"\
    x\", \"z\"]\n                push!(consonents, letter)\n            end\n    \
    \    end\n        return consonents\n    end\n    # Then apply the above function\
    \ to each word\n    words_with_consonents = [get_consonents(w) for w in words]\n\
    \    # Then find the words that have exactly n consonents\n    words_with_n_consonents\
    \ = [w for w in words_with_consonents if length(w) == n]\n    # Then get the indizes\
    \ of the words that contain exactly n consonents\n    indizes_of_words_with_n_consonents\
    \ = [findall(words_with_consonents .== word_with_n_consonents)[1] for word_with_n_consonents\
    \ in words_with_n_consonents]\n    # Then select the words from the string s at\
    \ the indices\n    return [words[i] for i in indizes_of_words_with_n_consonents]\n\
    end", "    \n    \"\"\" find the number of consonants in a string\"\"\"\n    consonants(w::String)\
    \ = sum( isconsonant(c) for c in w)\n    \n    \"\"\" true if c is a consonant\
    \ \"\"\"\n    isconsonant(c::Char) = ( c \u2208 'bcdfghjklmnpqrstvwxyz' )\n  \
    \  \n    \"\"\" split s by whitespace and count the consonants in each word \n\
    \        then return a list of words with n consonants \"\"\"\n    return [ c[1]\
    \ for c in countmap(consonants,split(s)) if c[2] == n ]\nend", "    # your code\
    \ here\n    return []\nend", "    words = split(s)\n    words = filter(w -> sum(w\
    \ .== \"a\"::String) + sum(w .== \"e\"::String) + \n        sum(w .== \"i\"::String)\
    \ + sum(w .== \"o\"::String) + sum(w .== \"u\"::String) == n, words)\n    return\
    \ words\nend", "    # Your code here\n    # return [\"\"] \nend\n \n ", "    words\
    \ = split(s)\n    consonants = count_consonants.(words)\n    idx = findall(c ->\
    \ c == n, consonants)\n    return words[idx]\nend\nselect_words(\"Mary had a little\
    \ lamb\", 4)", "    # Your code here\n    L = split(s, r\"\\s+\")\n    arr = filter(x\
    \ -> length(x) == n, map(x -> x[regexp(r\"[^aeiou]\", x)], L))\n    return arr\n\
    end"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
