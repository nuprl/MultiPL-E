name: HumanEval_130_tri
language: jl
results:
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    tri_series = Array{Int64}(n+1)\n    tri_series[1] = 1\n    tri_series[2]\
    \ = 3\n    for i in 3:n+1\n        if i % 2 == 0\n            tri_series[i] =\
    \ 1 + i / 2\n        else\n            tri_series[i] = tri_series[i-1] + tri_series[i-2]\
    \ + tri_series[i+1]\n        end\n    end\n    return tri_series\nend\nprintln(tri(4))\n\
    using Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1,\
    \ 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: None
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        [1]\n    elseif n == 1\n        [1, 3]\n    elseif\
    \ n == 2\n        [1, 3, 2]\n    else\n        x = tri(n - 1)\n        if n %\
    \ 2 == 0\n            push!(x, 1 + (n / 2))\n        else\n            push!(x,\
    \ x[end - 2] + x[end - 1] + x[end])\n        end\n        x\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2,\
    \ 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3,\
    \ 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbi6afb7h.jl:39\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 6] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbi6afb7h.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbi6afb7h.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpbi6afb7h.jl:40\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 6, 3] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbi6afb7h.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbi6afb7h.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpbi6afb7h.jl:41\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 6, 3, 11] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbi6afb7h.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbi6afb7h.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpbi6afb7h.jl:42\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 6, 3, 11, 4] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbi6afb7h.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbi6afb7h.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpbi6afb7h.jl:43\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbi6afb7h.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    list = [1, 3, 2]\n    if n < 3\n        return list[1:n+1]\n    end\n\
    \    for i in 4:n+1\n        if i % 2 == 0\n            push!(list, i / 2)\n \
    \       else\n            push!(list, list[end] + list[end-1] + list[end-2])\n\
    \        end\n    end\n    return list\nend\nusing Test\n\n@testset begin\n\n\
    candidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbd__4p8f.jl:36\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 2] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbd__4p8f.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbd__4p8f.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpbd__4p8f.jl:37\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 2, 7] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbd__4p8f.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbd__4p8f.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpbd__4p8f.jl:38\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 2, 7, 3] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbd__4p8f.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbd__4p8f.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpbd__4p8f.jl:39\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 2, 7, 3, 12] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbd__4p8f.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbd__4p8f.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpbd__4p8f.jl:40\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15,"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbd__4p8f.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    r = zeros(Int64, n + 1)\n    r[1] = 1\n    r[2] = 3\n    r[3] = 2\n  \
    \  if n == 3\n        return r\n    end\n    r[4] = r[2] + r[1] + r[3]\n    for\
    \ i in 5:n\n        r[i] = r[i - 1] + r[i - 2] + r[i - 3]\n    end\n    return\
    \ r\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpfofvmo6b.jl:36\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 2, 0] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpfofvmo6b.jl:36 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpfofvmo6b.jl:35\\ntest set: Test\
    \ Failed at /tmp/tmpfofvmo6b.jl:37\\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\\n   Evaluated: [1, 3, 2, 6, 0] == [1, 3, 2, 8, 3]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpfofvmo6b.jl:37 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpfofvmo6b.jl:35\\ntest set: Test\
    \ Failed at /tmp/tmpfofvmo6b.jl:38\\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\\n   Evaluated: [1, 3, 2, 6, 11, 0] == [1, 3, 2, 8, 3, 15]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpfofvmo6b.jl:38 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpfofvmo6b.jl:35\\ntest set: Test\
    \ Failed at /tmp/tmpfofvmo6b.jl:39\\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\\n   Evaluated: [1, 3, 2, 6, 11, 19, 0] == [1, 3, 2, 8, 3, 15, 4]\\\
    nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpfofvmo6b.jl:39 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpfofvmo6b.jl:35\\ntest set: Test\
    \ Failed at /tmp/tmpfofvmo6b.jl:"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1,3]\n\
    \    elseif n == 2\n        return [1,3,2]\n    else\n        return [1,3,2,8]\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5jsbm5pf.jl:34\n  Expression: candidate(4)\
    \ == [1, 3, 2, 8, 3]\n   Evaluated: [1, 3, 2, 8] == [1, 3, 2, 8, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5jsbm5pf.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5jsbm5pf.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp5jsbm5pf.jl:35\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 8] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5jsbm5pf.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5jsbm5pf.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp5jsbm5pf.jl:36\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 8] == [1, 3, 2, 8, 3, 15, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5jsbm5pf.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5jsbm5pf.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp5jsbm5pf.jl:37\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 3, 2, 8] == [1, 3, 2, 8, 3, 15, 4, 24]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5jsbm5pf.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5jsbm5pf.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp5jsbm5pf.jl:38\n  Expression: candidate(8) == [1, 3, 2, "
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5jsbm5pf.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n  if n == 0 return [1] elseif n == 1 return [1, 3] end\n  out = [1, 3, 2]\n\
    \  for i in 3:n\n    push!(out, i % 2 == 0 ? 1 + (i / 2) : out[end] + out[end\
    \ - 1] + out[end - 2])\n  end\n  return out\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpar4vkqr7.jl:30\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 6] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpar4vkqr7.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpar4vkqr7.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpar4vkqr7.jl:31\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 6, 3] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpar4vkqr7.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpar4vkqr7.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpar4vkqr7.jl:32\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 6, 3, 11] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpar4vkqr7.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpar4vkqr7.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpar4vkqr7.jl:33\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 6, 3, 11, 4] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpar4vkqr7.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpar4vkqr7.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpar4vkqr7.jl:34\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpar4vkqr7.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    r = zeros(Int64, n + 1)\n    r[1] = 1\n    for i in 1:n \n        r[i\
    \ + 1] = (i % 2 == 0) ?  1 + i / 2 : r[i] + r[i - 1] + r[i - 2]\n    end\n   \
    \ return r\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmproowkr9z.jl:30\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 4-element Vector{Int64} at index [0]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:861 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmproowkr9z.jl:21\\\
    n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmproowkr9z.jl:30 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmproowkr9z.jl:29\\ntest set:\
    \ Error During Test at /tmp/tmproowkr9z.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [0]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:861\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmproowkr9z.jl:21\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmproowkr9z.jl:31 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmproowkr9z.jl:29\\ntest set:\
    \ Error During Test at /tmp/tmproowkr9z.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 6-element\
    \ Vector{Int64} at index [0]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:861\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmproowkr9z.jl:21\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmproowkr9z.jl:32 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmproowkr9z.jl:29\\ntest set:\
    \ Error During Test at /"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n < 0\n        throw(DomainError())\n    end\n    if n == 0\n     \
    \   return [1]\n    end\n    if n == 1\n        return [1, 3]\n    end\n    if\
    \ n == 2\n        return [1, 3, 2]\n    end\n    array = [1, 3, 2]\n    for i\
    \ in 3:n\n        v = 1 + (i / 2)\n        if i % 2 == 0\n            push!(array,\
    \ v)\n        else\n            push!(array, array[i] + array[i - 1] + array[i\
    \ + 1])\n        end\n    end\n    return array\nend\n\"\"\"Write a function that\
    \ takes two arrays and returns their intersection, sorted\n    in ascending order.\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpkhj52cwp.jl:41\nin expression starting at /tmp/tmpkhj52cwp.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    a = [1, 3, 2]\n    while length(a) != n + 1\n        if iseven(length(a))\n\
    \            push!(a, 1 + (length(a)/2))\n        else\n            push!(a, a[end-2]\
    \ + a[end-1] + a[end])\n        end\n    end\n    return a\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpnh2lmwob.jl:33\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 2, 6] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpnh2lmwob.jl:33 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpnh2lmwob.jl:32\\ntest set: Test\
    \ Failed at /tmp/tmpnh2lmwob.jl:34\\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\\n   Evaluated: [1, 3, 2, 6, 3] == [1, 3, 2, 8, 3]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpnh2lmwob.jl:34 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpnh2lmwob.jl:32\\ntest set: Test\
    \ Failed at /tmp/tmpnh2lmwob.jl:35\\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\\n   Evaluated: [1, 3, 2, 6, 3, 11] == [1, 3, 2, 8, 3, 15]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpnh2lmwob.jl:35 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpnh2lmwob.jl:32\\ntest set: Test\
    \ Failed at /tmp/tmpnh2lmwob.jl:36\\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\\n   Evaluated: [1, 3, 2, 6, 3, 11, 4] == [1, 3, 2, 8, 3, 15, 4]\\\
    nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpnh2lmwob.jl:36 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpnh2lmwob.jl:32\\ntest set: Test\
    \ Failed at /tmp/tmpnh2lmwob.jl:3"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 return [1] end\n    if n == 1 return [1, 3] end\n    if n ==\
    \ 2 return [1, 3, 2] end\n    if n % 2 == 0\n        return vcat(tri(n - 1), 1\
    \ + n / 2)\n    else\n        return vcat(tri(n - 1), sum(tri(n - 1)[end-2:end]))\n\
    \    end\nend\ntri(3) == [1, 3, 2, 8]\n \nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpez4ekcvq.jl:34\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 2, 6] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpez4ekcvq.jl:34 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpez4ekcvq.jl:33\\ntest set: Test\
    \ Failed at /tmp/tmpez4ekcvq.jl:35\\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\\n   Evaluated: [1, 3, 2, 6, 3] == [1, 3, 2, 8, 3]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpez4ekcvq.jl:35 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpez4ekcvq.jl:33\\ntest set: Test\
    \ Failed at /tmp/tmpez4ekcvq.jl:36\\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\\n   Evaluated: [1, 3, 2, 6, 3, 11] == [1, 3, 2, 8, 3, 15]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpez4ekcvq.jl:36 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpez4ekcvq.jl:33\\ntest set: Test\
    \ Failed at /tmp/tmpez4ekcvq.jl:37\\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\\n   Evaluated: [1, 3, 2, 6, 3, 11, 4] == [1, 3, 2, 8, 3, 15, 4]\\\
    nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpez4ekcvq.jl:37 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpez4ekcvq.jl:33\\ntest set: Test\
    \ Failed at /tmp/tmpez4ekcvq.jl:3"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    t = zeros(Int64, n + 1)\n    t[1] = 1\n    for i = 2:n + 1\n        if\
    \ i % 2 == 0\n            t[i] = 1 + (i / 2)\n        else\n            t[i] =\
    \ t[i - 1] + t[i - 2] + t[i + 1]\n        end\n    end\n    return t\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2,\
    \ 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3,\
    \ 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp2ct7yfcl.jl:34\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 2, 3, 3] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp2ct7yfcl.jl:34 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp2ct7yfcl.jl:33\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [0]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    elseif n == 3\n        return\
    \ [1, 3, 2, 8]\n    else\n        v = [1, 3, 2, 8]\n        while length(v) <=\
    \ n\n            if iseven(length(v))\n                push!(v, 1 + length(v)\
    \ / 2)\n            else\n                push!(v, v[end] + v[end - 1] + v[end\
    \ - 2])\n            end\n        end\n        return v\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzj457e1j.jl:45\n  Expression: candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n   Evaluated: [1, 3, 2, 8, 3, 13] == [1, 3, 2, 8, 3,\
    \ 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzj457e1j.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzj457e1j.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpzj457e1j.jl:46\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 8, 3, 13, 4] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzj457e1j.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzj457e1j.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpzj457e1j.jl:47\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 3, 2, 8, 3, 13, 4, 20] == [1, 3, 2, 8, 3, 15,\
    \ 4, 24]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzj457e1j.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzj457e1j.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpzj457e1j.jl:48\n  Expression: candidate(8) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5]\n   Evaluated: [1, 3, 2, 8, 3, 13, 4, 20, 5] == [1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzj457e1j.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzj457e1j.jl:42\ntest set: Te"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzj457e1j.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    #YOUR CODE HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\
    \t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n < 1 \n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        seq = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(seq, 1\
    \ + (i / 2))\n            else\n                push!(seq, seq[i - 1] + seq[i\
    \ - 2] + seq[i + 1])\n            end\n        end\n        return seq\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) ==\
    \ [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpsqooh_d2.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:861 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpsqooh_d2.jl:30\\\
    n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpsqooh_d2.jl:41 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpsqooh_d2.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpsqooh_d2.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:861\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpsqooh_d2.jl:30\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpsqooh_d2.jl:42 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpsqooh_d2.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpsqooh_d2.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:861\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpsqooh_d2.jl:30\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpsqooh_d2.jl:43 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpsqooh_d2.jl:40\\ntest set:\
    \ Error During Test at /"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n < 1 return 1 end \n    if n == 1 return [1, 3] end \n    #initialize\
    \ array\n    tri_arr = zeros(Int64, n + 1)\n    tri_arr[1] = 1\n    tri_arr[2]\
    \ = 3\n    tri_arr[3] = 2\n    # calculate the next n values in the array\n  \
    \  for i in 4:n + 1\n        if mod(i, 2) == 0 tri_arr[i] = div(i, 2) else tri_arr[i]\
    \ = tri_arr[i - 1] + tri_arr[i - 2] + tri_arr[i - 3] end\n    end\n    return\
    \ tri_arr\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp1nk0f_ez.jl:36\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 2, 2] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp1nk0f_ez.jl:36 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp1nk0f_ez.jl:35\\ntest set: Test\
    \ Failed at /tmp/tmp1nk0f_ez.jl:37\\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\\n   Evaluated: [1, 3, 2, 2, 7] == [1, 3, 2, 8, 3]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp1nk0f_ez.jl:37 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp1nk0f_ez.jl:35\\ntest set: Test\
    \ Failed at /tmp/tmp1nk0f_ez.jl:38\\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\\n   Evaluated: [1, 3, 2, 2, 7, 3] == [1, 3, 2, 8, 3, 15]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp1nk0f_ez.jl:38 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp1nk0f_ez.jl:35\\ntest set: Test\
    \ Failed at /tmp/tmp1nk0f_ez.jl:39\\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\\n   Evaluated: [1, 3, 2, 2, 7, 3, 12] == [1, 3, 2, 8, 3, 15, 4]\\\
    nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp1nk0f_ez.jl:39 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp1nk0f_ez.jl:35\\ntest set: Test\
    \ Failed at /tmp/tmp1nk0f_ez.jl:40"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n\
    \    elseif n == 2\n        return [0, 1, 1]\n    else\n        v = [0, 1, 1]\n\
    \        for i in 3:n\n            push!(v, (v[i - 1] + v[i - 2] + v[i - 3]))\n\
    \        end\n        return v\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpers5tg_8.jl:37\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [0]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:861 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpers5tg_8.jl:27\\\
    n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpers5tg_8.jl:37 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpers5tg_8.jl:36\\ntest set:\
    \ Error During Test at /tmp/tmpers5tg_8.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [0]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:861\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpers5tg_8.jl:27\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpers5tg_8.jl:38 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpers5tg_8.jl:36\\ntest set:\
    \ Error During Test at /tmp/tmpers5tg_8.jl:39\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [0]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:861\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpers5tg_8.jl:27\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpers5tg_8.jl:39 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpers5tg_8.jl:36\\ntest set:\
    \ Error During Test at /"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n  result = zeros(Int64, n + 1)\n  result[1] = 1\n  for i in 1:n \n    if i\
    \ == 1\n      result[i + 1] = 3\n    elseif i == 2\n      result[i + 1] = 2\n\
    \    elseif i % 2 == 0\n      result[i + 1] = i/2\n    else \n      result[i +\
    \ 1] = result[i] + result[i - 1] + result[i - 2]\n    end\n  end\n  return result\n\
    end\nprintln(tri(3))\n#[1, 3, 2, 8]\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'[1, 3, 2, 6]\\ntest set: Test Failed at /tmp/tmp7kcw6zam.jl:40\\n  Expression:\
    \ candidate(3) == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 2, 6] == [1, 3, 2, 8]\\\
    nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp7kcw6zam.jl:40 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp7kcw6zam.jl:39\\ntest set: Test\
    \ Failed at /tmp/tmp7kcw6zam.jl:41\\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\\n   Evaluated: [1, 3, 2, 6, 2] == [1, 3, 2, 8, 3]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp7kcw6zam.jl:41 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp7kcw6zam.jl:39\\ntest set: Test\
    \ Failed at /tmp/tmp7kcw6zam.jl:42\\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\\n   Evaluated: [1, 3, 2, 6, 2, 10] == [1, 3, 2, 8, 3, 15]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp7kcw6zam.jl:42 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp7kcw6zam.jl:39\\ntest set: Test\
    \ Failed at /tmp/tmp7kcw6zam.jl:43\\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\\n   Evaluated: [1, 3, 2, 6, 2, 10, 3] == [1, 3, 2, 8, 3, 15, 4]\\\
    nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp7kcw6zam.jl:43 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp7kcw6zam.jl:39\\ntest set: Test\
    \ Failed at /tmp/tm"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    a, b, c = 0, 1, 3\n    s = [a, b, c]\n    for i in 4:n+1\n        a, b,\
    \ c = b, c, c + (a + b + c) / 2\n        push!(s, c)\n    end\n    return s\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) ==\
    \ [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpcl2py965.jl:31\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [0, 1, 3, 5] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpcl2py965.jl:31 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpcl2py965.jl:30\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n  if n == 0\n    return Int64[]\n  end\n  if n == 1\n    return [3]\n  end\n\
    \  if n == 2\n    return [1, 3, 2]\n  end\n  if n == 3\n    return [1, 3, 2, 8]\n\
    \  end\n  sequence = [1, 3, 2, 8]\n  while length(sequence) <= n\n    push!(sequence,\
    \ sequence[end] + sequence[end - 1] + sequence[end - 2])\n  end\n  return sequence\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) ==\
    \ [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmplc7yrsf7.jl:42\\n  Expression: candidate(4)\
    \ == [1, 3, 2, 8, 3]\\n   Evaluated: [1, 3, 2, 8, 13] == [1, 3, 2, 8, 3]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmplc7yrsf7.jl:42 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmplc7yrsf7.jl:40\\ntest set: Test\
    \ Failed at /tmp/tmplc7yrsf7.jl:43\\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\\n   Evaluated: [1, 3, 2, 8, 13, 23] == [1, 3, 2, 8, 3, 15]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmplc7yrsf7.jl:43 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmplc7yrsf7.jl:40\\ntest set: Test\
    \ Failed at /tmp/tmplc7yrsf7.jl:44\\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\\n   Evaluated: [1, 3, 2, 8, 13, 23, 44] == [1, 3, 2, 8, 3, 15, 4]\\\
    nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmplc7yrsf7.jl:44 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmplc7yrsf7.jl:40\\ntest set: Test\
    \ Failed at /tmp/tmplc7yrsf7.jl:45\\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\\n   Evaluated: [1, 3, 2, 8, 13, 23, 44, 80] == [1, 3, 2, 8, 3,\
    \ 15, 4, 24]\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmplc7yrsf7.jl:45 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmplc7yrsf7.jl:40"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 1 passed, 9 failed, 0 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmplc7yrsf7.jl:38\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        return [0]\n    else\n        res = ones(n + 1)\n\
    \        res[1] = 1\n        res[2] = 3\n        res[3] = 2\n        for i in\
    \ 4:n + 1\n            if i % 2 == 0\n                res[i] = 1 + i / 2\n   \
    \         else\n                res[i] = res[i - 1] + res[i - 2] + res[i + 1]\n\
    \            end\n        end\n        return res\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp279wdhaf.jl:40\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 2, 3] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp279wdhaf.jl:40 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp279wdhaf.jl:39\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n < 1 return [1] end\n    if n == 1 return [1, 3] end\n    if n ==\
    \ 2 return [1, 3, 2] end\n    sequence = [1, 3, 2]\n    for i in 3:n\n       \
    \ if i % 2 == 0\n            push!(sequence, floor(1 + i / 2))\n        else\n\
    \            push!(sequence, sequence[i] + sequence[i - 1] + sequence[i + 1])\n\
    \        end\n    end\n    return sequence\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp7up2usd7.jl:36\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:861 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp7up2usd7.jl:26\\\
    n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp7up2usd7.jl:36 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp7up2usd7.jl:35\\ntest set:\
    \ Error During Test at /tmp/tmp7up2usd7.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:861\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp7up2usd7.jl:26\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp7up2usd7.jl:37 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp7up2usd7.jl:35\\ntest set:\
    \ Error During Test at /tmp/tmp7up2usd7.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:861\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp7up2usd7.jl:26\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp7up2usd7.jl:38 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp7up2usd7.jl:35\\ntest set:\
    \ Error During Test at /"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        return []\n    elseif n == 1\n        return [1]\n\
    \    elseif n == 2\n        return [1, 3]\n    else\n        array = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(array,\
    \ 1 + i / 2)\n            else\n                push!(array, array[i - 1] + array[i\
    \ - 2] + array[i + 1])\n            end\n        end\n        return array\n \
    \   end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmps8lkw2e9.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:861 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmps8lkw2e9.jl:30\\\
    n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmps8lkw2e9.jl:41 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmps8lkw2e9.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmps8lkw2e9.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:861\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmps8lkw2e9.jl:30\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmps8lkw2e9.jl:42 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmps8lkw2e9.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmps8lkw2e9.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:861\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmps8lkw2e9.jl:30\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmps8lkw2e9.jl:43 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmps8lkw2e9.jl:40\\ntest set:\
    \ Error During Test at /"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    # your code here\nend\n```\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl97aqm53.jl:20\nin expression starting at\
    \ /tmp/tmpl97aqm53.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        current = [1,\
    \ 3, 2]\n        for i = 4:n+1\n            if i % 2 == 0\n                push!(current,\
    \ div(i, 2))\n            else\n                push!(current, current[end] +\
    \ current[end-1] + current[end-2])\n            end\n        end\n        return\
    \ current\n    end\nend\n \nusing Test\n\n@testset begin\n\ncandidate = tri;\n\
    \t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmplrqedqdx.jl:42\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 2, 2] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmplrqedqdx.jl:42 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmplrqedqdx.jl:41\\ntest set: Test\
    \ Failed at /tmp/tmplrqedqdx.jl:43\\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\\n   Evaluated: [1, 3, 2, 2, 7] == [1, 3, 2, 8, 3]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmplrqedqdx.jl:43 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmplrqedqdx.jl:41\\ntest set: Test\
    \ Failed at /tmp/tmplrqedqdx.jl:44\\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\\n   Evaluated: [1, 3, 2, 2, 7, 3] == [1, 3, 2, 8, 3, 15]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmplrqedqdx.jl:44 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmplrqedqdx.jl:41\\ntest set: Test\
    \ Failed at /tmp/tmplrqedqdx.jl:45\\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\\n   Evaluated: [1, 3, 2, 2, 7, 3, 12] == [1, 3, 2, 8, 3, 15, 4]\\\
    nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmplrqedqdx.jl:45 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmplrqedqdx.jl:41\\ntest set: Test\
    \ Failed at /tmp/tmplrqedqdx.jl:46"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 2 passed, 8 failed, 0 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmplrqedqdx.jl:39\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    a = zeros(Int64, n+1)\n    for i in range(1, n+1)\n        if i == 1\n\
    \            a[i] = 3\n        elseif i == 2\n            a[i] = 1\n        elseif\
    \ i == 3\n            a[i] = 2\n        elseif i % 2 == 0\n            a[i] =\
    \ a[i/2] + 1\n        else\n            a[i] = a[i-1] + a[i-2] + a[i+1]\n    \
    \    end\n    end\n    return a\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpgbqndzom.jl:39\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  ArgumentError: invalid\
    \ index: 2.0 of type Float64\\n  Stacktrace:\\n    [1] to_index(i::Float64)\\\
    n      @ Base ./indices.jl:300\\n    [2] to_index(A::Vector{Int64}, i::Float64)\\\
    n      @ Base ./indices.jl:277\\n    [3] to_indices\\n      @ ./indices.jl:333\
    \ [inlined]\\n    [4] to_indices\\n      @ ./indices.jl:325 [inlined]\\n    [5]\
    \ getindex\\n      @ ./abstractarray.jl:1218 [inlined]\\n    [6] tri(n::Int64)\\\
    n      @ Main /tmp/tmpgbqndzom.jl:27\\n    [7] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n    [8] macro expansion\\n      @ /tmp/tmpgbqndzom.jl:39 [inlined]\\\
    n    [9] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [10] top-level scope\\n      @ /tmp/tmpgbqndzom.jl:38\\ntest\
    \ set: Error During Test at /tmp/tmpgbqndzom.jl:40\\n  Test threw exception\\\
    n  Expression: candidate(4) == [1, 3, 2, 8, 3]\\n  ArgumentError: invalid index:\
    \ 2.0 of type Float64\\n  Stacktrace:\\n    [1] to_index(i::Float64)\\n      @\
    \ Base ./indices.jl:300\\n    [2] to_index(A::Vector{Int64}, i::Float64)\\n  \
    \    @ Base ./indices.jl:277\\n    [3] to_indices\\n      @ ./indices.jl:333 [inlined]\\\
    n    [4] to_indices\\n      @ ./indices.jl:325 [inlined]\\n    [5] getindex\\\
    n      @ ./abstractarray.jl:1218 [inlined]\\n    [6] tri(n::Int64)\\n      @ Main\
    \ /tmp/tmpgbqndzom.jl:27\\n    [7] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n    [8] macro expansion\\n      @ /tmp/tmpgbqndzom.jl:40 [inlined]\\\
    n    [9] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [10] top-level scope\\n      @ /tmp/tmpgbqndzom.jl:38\\ntest\
    \ set: Error During Test at /tmp/tmpgbqndzom.jl:41\\n  Test threw exception\\\
    n  Expression: candidate(5) == [1, 3, 2, 8, 3, 15]\\n  ArgumentError: invalid\
    \ index: 2.0 of type Float64\\n  Stacktrace:\\"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    ret = zeros(Int64, n + 1)\n    ret[1] = 1\n    ret[2] = 3\n    ret[3]\
    \ = 2\n    for i = 4:n + 1\n        if i % 2 == 0\n            ret[i] = 1 + i\
    \ / 2\n        else\n            ret[i] = ret[i - 1] + ret[i - 2] + ret[i + 1]\n\
    \        end\n    end\n    return ret\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp2wafmffk.jl:36\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 2, 3] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp2wafmffk.jl:36 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp2wafmffk.jl:35\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    t = zeros(Int64, n+1)\n    t[1] = 1\n    t[2] = 3\n    t[3] = 2\n    for\
    \ i in 4:n+1\n        t[i] = ifelse(i % 2 == 0, Int64(1 + i / 2), t[i-1] + t[i-2]\
    \ + t[i+1])\n    end\n    return t\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpt0b_bwz3.jl:32\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 4-element Vector{Int64} at index [5]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:861 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpt0b_bwz3.jl:23\\\
    n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpt0b_bwz3.jl:32 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpt0b_bwz3.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpt0b_bwz3.jl:33\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  InexactError: Int64(3.5)\\n  Stacktrace:\\\
    n   [1] Int64\\n     @ ./float.jl:812 [inlined]\\n   [2] tri(n::Int64)\\n    \
    \ @ Main /tmp/tmpt0b_bwz3.jl:23\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpt0b_bwz3.jl:33 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpt0b_bwz3.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpt0b_bwz3.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  InexactError: Int64(3.5)\\n  Stacktrace:\\\
    n   [1] Int64\\n     @ ./float.jl:812 [inlined]\\n   [2] tri(n::Int64)\\n    \
    \ @ Main /tmp/tmpt0b_bwz3.jl:23\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpt0b_bwz3.jl:34 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpt0b_bwz3.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpt0b_bwz3.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3,"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    tri=zeros(Int64,n+1)\n    tri[1]=1\n    for i=2:n+1\n        if (i%2 ==\
    \ 0)\n            tri[i]=Int64(1+(i/2))\n        else\n            tri[i]=tri[i-1]+tri[i-2]+tri[i+1]\n\
    \        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\
    \t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "b'test set: '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        list = [1, 3,\
    \ 2]\n        for i in 3:n\n            if i % 2 == 0\n                push!(list,\
    \ div(i, 2))\n            else\n                push!(list, list[i - 1] + list[i\
    \ - 2] + list[i + 1])\n            end\n        end\n        return list\n   \
    \ end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpjqdjvc94.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:861 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpjqdjvc94.jl:30\\\
    n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpjqdjvc94.jl:41 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpjqdjvc94.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpjqdjvc94.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:861\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpjqdjvc94.jl:30\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpjqdjvc94.jl:42 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpjqdjvc94.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpjqdjvc94.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:861\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpjqdjvc94.jl:30\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpjqdjvc94.jl:43 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpjqdjvc94.jl:40\\ntest set:\
    \ Error During Test at /"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1,3]\n\
    \    elseif n == 2\n        return [1,3,2]\n    else\n        a = [1,3,2]\n  \
    \      for i in 3:n\n            push!(a,tri(i-1)[end]+tri(i-2)[end]+tri(i-3)[end])\n\
    \        end\n        return a\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpofpmu7f7.jl:37\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 2, 6] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpofpmu7f7.jl:37 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpofpmu7f7.jl:36\\ntest set: Test\
    \ Failed at /tmp/tmpofpmu7f7.jl:38\\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\\n   Evaluated: [1, 3, 2, 6, 11] == [1, 3, 2, 8, 3]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpofpmu7f7.jl:38 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpofpmu7f7.jl:36\\ntest set: Test\
    \ Failed at /tmp/tmpofpmu7f7.jl:39\\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\\n   Evaluated: [1, 3, 2, 6, 11, 19] == [1, 3, 2, 8, 3, 15]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpofpmu7f7.jl:39 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpofpmu7f7.jl:36\\ntest set: Test\
    \ Failed at /tmp/tmpofpmu7f7.jl:40\\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\\n   Evaluated: [1, 3, 2, 6, 11, 19, 36] == [1, 3, 2, 8, 3, 15, 4]\\\
    nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpofpmu7f7.jl:40 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpofpmu7f7.jl:36\\ntest set: Test\
    \ Failed at /tmp/tmpofpmu7f7."
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    \"\"\"\n    Input: n::Int64, number of Tribonacci sequence\n    Output:\
    \ Vector{Int64}\n    \"\"\"\n    if n == 0\n        return []\n    elseif n ==\
    \ 1\n        return [3]\n    elseif n == 2\n        return [1, 3]\n    else\n\
    \        vec = [1, 3, 2]\n        for i in 3:n\n            if i % 2 == 0\n  \
    \              append!(vec, 1 + (i / 2))\n            else\n                append!(vec,\
    \ vec[i-1] + vec[i-2] + vec[i+1])\n            end\n        end\n        return\
    \ vec\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpo56082uy.jl:45\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:861 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpo56082uy.jl:34\\\
    n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpo56082uy.jl:45 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpo56082uy.jl:44\\ntest set:\
    \ Error During Test at /tmp/tmpo56082uy.jl:46\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:861\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpo56082uy.jl:34\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpo56082uy.jl:46 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpo56082uy.jl:44\\ntest set:\
    \ Error During Test at /tmp/tmpo56082uy.jl:47\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:861\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpo56082uy.jl:34\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpo56082uy.jl:47 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpo56082uy.jl:44\\ntest set:\
    \ Error During Test at /"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    tri_vec = [1, 3, 2]\n    if n == 0\n        return []\n    elseif n <\
    \ 3\n        return tri_vec[1:n]\n    else\n        for i in 3:n\n           \
    \ val = tri_vec[i]\n            if i % 2 == 0\n                val = 1 + (i /\
    \ 2)\n            else\n                val = tri_vec[i - 1] + tri_vec[i - 2]\
    \ + tri_vec[i + 1]\n            end\n            push!(tri_vec, val)\n       \
    \ end\n        return tri_vec\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpg3o00uzc.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:861 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpg3o00uzc.jl:29\\\
    n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpg3o00uzc.jl:41 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpg3o00uzc.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpg3o00uzc.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:861\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpg3o00uzc.jl:29\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpg3o00uzc.jl:42 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpg3o00uzc.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpg3o00uzc.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:861\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpg3o00uzc.jl:29\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpg3o00uzc.jl:43 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpg3o00uzc.jl:40\\ntest set:\
    \ Error During Test at /"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        return [1]\n    elseif n == 1\n        return [1,\
    \ 3]\n    elseif n == 2\n        return [1, 3, 2]\n    else\n        a = [1, 3,\
    \ 2]\n        for i in 3:n\n            push!(a, 1 + div(i, 2))\n            for\
    \ j in 1:i-1\n                a[i+1] += a[j]\n            end\n        end\n \
    \       return a\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\
    \t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi63_di5z.jl:40\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 6] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi63_di5z.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi63_di5z.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpi63_di5z.jl:41\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 6, 9] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi63_di5z.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi63_di5z.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpi63_di5z.jl:42\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 6, 9, 15] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi63_di5z.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi63_di5z.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpi63_di5z.jl:43\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 6, 9, 15, 25] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi63_di5z.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi63_di5z.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpi63_di5z.jl:44\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 1"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi63_di5z.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    v = zeros(Int64, n+1)\n    v[1] = 1\n    v[2] = 3\n    v[3] = 2\n    for\
    \ i in 4:n+1\n        if (i % 2 == 0)\n            v[i] = 1 + i / 2\n        else\n\
    \            v[i] = v[i-1] + v[i-2] + v[i-3]\n        end\n    end\n    return\
    \ v\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp_8v2fs1x.jl:36\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 2, 3] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp_8v2fs1x.jl:36 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp_8v2fs1x.jl:35\\ntest set: Test\
    \ Failed at /tmp/tmp_8v2fs1x.jl:37\\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\\n   Evaluated: [1, 3, 2, 3, 8] == [1, 3, 2, 8, 3]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp_8v2fs1x.jl:37 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp_8v2fs1x.jl:35\\ntest set: Test\
    \ Failed at /tmp/tmp_8v2fs1x.jl:38\\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\\n   Evaluated: [1, 3, 2, 3, 8, 4] == [1, 3, 2, 8, 3, 15]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp_8v2fs1x.jl:38 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp_8v2fs1x.jl:35\\ntest set: Test\
    \ Failed at /tmp/tmp_8v2fs1x.jl:39\\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\\n   Evaluated: [1, 3, 2, 3, 8, 4, 15] == [1, 3, 2, 8, 3, 15, 4]\\\
    nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp_8v2fs1x.jl:39 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp_8v2fs1x.jl:35\\ntest set: Test\
    \ Failed at /tmp/tmp_8v2fs1x.jl:40"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        return []\n    elseif n == 1\n        return [1]\n\
    \    elseif n == 2\n        return [1, 3]\n    elseif n == 3\n        return [1,\
    \ 3, 2, 8]\n    else\n        s = [1, 3, 2, 8]\n        for i in 4:n\n       \
    \     if i % 2 == 0\n                push!(s, div(i, 2))\n            else\n \
    \               push!(s, s[end] + s[end - 1] + s[end - 2])\n            end\n\
    \        end\n        return s\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3p5hfzkf.jl:44\n  Expression: candidate(4)\
    \ == [1, 3, 2, 8, 3]\n   Evaluated: [1, 3, 2, 8, 2] == [1, 3, 2, 8, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3p5hfzkf.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3p5hfzkf.jl:42\ntest set: Test\
    \ Failed at /tmp/tmp3p5hfzkf.jl:45\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 8, 2, 12] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3p5hfzkf.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3p5hfzkf.jl:42\ntest set: Test\
    \ Failed at /tmp/tmp3p5hfzkf.jl:46\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 8, 2, 12, 3] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3p5hfzkf.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3p5hfzkf.jl:42\ntest set: Test\
    \ Failed at /tmp/tmp3p5hfzkf.jl:47\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 3, 2, 8, 2, 12, 3, 17] == [1, 3, 2, 8, 3, 15,\
    \ 4, 24]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3p5hfzkf.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3p5hfzkf.jl:42\ntest set: Test\
    \ Failed at /tmp/tmp3p5hfzkf.jl:48\n  Expr"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 9 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3p5hfzkf.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    x = zeros(Int64, n+1)\n    x[1] = 1\n    x[2] = 3\n    for i in 3:n+1\n\
    \        if i % 2 == 0\n            x[i] = 1 + (i / 2)\n        else\n       \
    \     x[i] = x[i-1] + x[i-2] + x[i+1]\n        end\n    end\n    return x\nend\n\
    @assert tri(0) == [1]\n@assert tri(1) == [1, 3]\n@assert tri(3) == [1, 3, 2, 8]\n\
    @assert tri(10) == [1, 3, 2, 8, 5, 5, 13, 21, 34, 55, 89]\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: BoundsError: attempt to access 1-element Vector{Int64}\
    \ at index [2]\nStacktrace:\n [1] setindex!\n   @ ./array.jl:903 [inlined]\n [2]\
    \ tri(n::Int64)\n   @ Main /tmp/tmpixumazpo.jl:20\n [3] top-level scope\n   @\
    \ /tmp/tmpixumazpo.jl:30\nin expression starting at /tmp/tmpixumazpo.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n  return [(1 + i/2) % i == 0 ? 1 + i/2 : tri(i-1) + tri(i-2) + tri(i+1) for\
    \ i in 1:n]\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    tri_vec = [1, 3, 2]\n    for i in 3:n\n        iseven(tri_vec[i]) ? push!(tri_vec,\
    \ tri_vec[i] + tri_vec[i - 1] + tri_vec[i - 2]) : push!(tri_vec, 1 + div(i, 2))\n\
    \    end\n    return tri_vec\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp59gt0xp3.jl:29\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 2, 6] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp59gt0xp3.jl:29 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp59gt0xp3.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmp59gt0xp3.jl:30\\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\\n   Evaluated: [1, 3, 2, 6, 11] == [1, 3, 2, 8, 3]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp59gt0xp3.jl:30 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp59gt0xp3.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmp59gt0xp3.jl:31\\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\\n   Evaluated: [1, 3, 2, 6, 11, 3] == [1, 3, 2, 8, 3, 15]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp59gt0xp3.jl:31 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp59gt0xp3.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmp59gt0xp3.jl:32\\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\\n   Evaluated: [1, 3, 2, 6, 11, 3, 4] == [1, 3, 2, 8, 3, 15, 4]\\\
    nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp59gt0xp3.jl:32 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp59gt0xp3.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmp59gt0xp3.jl:"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    tribonacci(1) = 3\n    tribonacci(n) = n % 2 == 0 ? n / 2 + 1 : tribonacci(n\
    \ - 1) + tribonacci(n - 2) + tribonacci(n + 1)\n    [tribonacci(i) for i in 1:n+1]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) ==\
    \ [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"1\" is not a valid function argument name around\
    \ /tmp/tmpzm6frr3y.jl:18\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzm6frr3y.jl:1\n\
    in expression starting at /tmp/tmpzm6frr3y.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    tri = Vector{Int64}(undef, n+1)\n    tri[1] = 1\n    tri[2] = 3\n    tri[3]\
    \ = 2\n    for i in 4:n+1\n        if i % 2 == 0\n            tri[i] = 1 + i /\
    \ 2\n        else\n            tri[i] = tri[i-1] + tri[i-2] + tri[i-3]\n     \
    \   end\n    end\n    return tri\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpu0qzznld.jl:36\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 2, 3] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpu0qzznld.jl:36 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpu0qzznld.jl:35\\ntest set: Test\
    \ Failed at /tmp/tmpu0qzznld.jl:37\\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\\n   Evaluated: [1, 3, 2, 3, 8] == [1, 3, 2, 8, 3]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpu0qzznld.jl:37 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpu0qzznld.jl:35\\ntest set: Test\
    \ Failed at /tmp/tmpu0qzznld.jl:38\\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\\n   Evaluated: [1, 3, 2, 3, 8, 4] == [1, 3, 2, 8, 3, 15]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpu0qzznld.jl:38 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpu0qzznld.jl:35\\ntest set: Test\
    \ Failed at /tmp/tmpu0qzznld.jl:39\\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\\n   Evaluated: [1, 3, 2, 3, 8, 4, 15] == [1, 3, 2, 8, 3, 15, 4]\\\
    nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpu0qzznld.jl:39 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpu0qzznld.jl:35\\ntest set: Test\
    \ Failed at /tmp/tmpu0qzznld.jl:40"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        return [1]\n    else\n        if n == 1\n        \
    \    return [1,3]\n        else\n            sequence = Vector{Int64}(undef, n+1)\n\
    \            sequence[1] = 1\n            sequence[2] = 3\n            sequence[3]\
    \ = 2\n            for i in 4:n+1\n                if i % 2 == 0\n           \
    \         sequence[i] = i / 2\n                else\n                    sequence[i]\
    \ = sequence[i-1] + sequence[i-2] + sequence[i-3]\n                end\n     \
    \       end\n            return sequence\n        end\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpqpbq_rcc.jl:44\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 2, 2] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpqpbq_rcc.jl:44 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpqpbq_rcc.jl:43\\ntest set: Test\
    \ Failed at /tmp/tmpqpbq_rcc.jl:45\\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\\n   Evaluated: [1, 3, 2, 2, 7] == [1, 3, 2, 8, 3]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpqpbq_rcc.jl:45 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpqpbq_rcc.jl:43\\ntest set: Test\
    \ Failed at /tmp/tmpqpbq_rcc.jl:46\\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\\n   Evaluated: [1, 3, 2, 2, 7, 3] == [1, 3, 2, 8, 3, 15]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpqpbq_rcc.jl:46 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpqpbq_rcc.jl:43\\ntest set: Test\
    \ Failed at /tmp/tmpqpbq_rcc.jl:47\\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\\n   Evaluated: [1, 3, 2, 2, 7, 3, 12] == [1, 3, 2, 8, 3, 15, 4]\\\
    nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpqpbq_rcc.jl:47 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpqpbq_rcc.jl:43\\ntest set: Test\
    \ Failed at /tmp/tmpqpbq_rcc.jl:48"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 2 passed, 8 failed, 0 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmpqpbq_rcc.jl:41\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    tri_series = [1, 3, 2]\n    while length(tri_series) < n + 1\n       \
    \ if iseven(length(tri_series)) \n            push!(tri_series, 1 + (length(tri_series)\
    \ / 2))\n        else\n            push!(tri_series, tri_series[end] + tri_series[end\
    \ - 1] + tri_series[end - 2])\n        end\n    end\n    return tri_series\nend\n\
    using Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1,\
    \ 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp8vqc47ow.jl:33\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 2, 6] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp8vqc47ow.jl:33 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp8vqc47ow.jl:32\\ntest set: Test\
    \ Failed at /tmp/tmp8vqc47ow.jl:34\\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\\n   Evaluated: [1, 3, 2, 6, 3] == [1, 3, 2, 8, 3]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp8vqc47ow.jl:34 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp8vqc47ow.jl:32\\ntest set: Test\
    \ Failed at /tmp/tmp8vqc47ow.jl:35\\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\\n   Evaluated: [1, 3, 2, 6, 3, 11] == [1, 3, 2, 8, 3, 15]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp8vqc47ow.jl:35 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp8vqc47ow.jl:32\\ntest set: Test\
    \ Failed at /tmp/tmp8vqc47ow.jl:36\\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\\n   Evaluated: [1, 3, 2, 6, 3, 11, 4] == [1, 3, 2, 8, 3, 15, 4]\\\
    nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp8vqc47ow.jl:36 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp8vqc47ow.jl:32\\ntest set: Test\
    \ Failed at /tmp/tmp8vqc47ow.jl:3"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 0 passed, 10 failed, 0 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmp8vqc47ow.jl:30\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n + 1)\n    for i in 1:n + 1\n        if i == 1\n\
    \            result[i] = 1\n        elseif i == 2\n            result[i] = 3\n\
    \        elseif i == 3\n            result[i] = 2\n        elseif i % 2 == 0\n\
    \            result[i] = i / 2\n        else\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i - 3]\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) ==\
    \ [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_8ic9ii8.jl:39\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 2] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_8ic9ii8.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_8ic9ii8.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp_8ic9ii8.jl:40\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 2, 7] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_8ic9ii8.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_8ic9ii8.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp_8ic9ii8.jl:41\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 2, 7, 3] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_8ic9ii8.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_8ic9ii8.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp_8ic9ii8.jl:42\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 2, 7, 3, 12] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_8ic9ii8.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_8ic9ii8.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp_8ic9ii8.jl:43\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15,"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_8ic9ii8.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        return [1]\n    elseif n == 1\n        return [1,\
    \ 3]\n    else\n        A = tri(n - 1)\n        len = length(A)\n        if (len\
    \ % 2) == 0\n            push!(A, 1 + len / 2)\n        else\n            push!(A,\
    \ A[len - 1] + A[len - 2] + A[len + 1])\n        end\n        return A\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) ==\
    \ [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmppuj03_yh.jl:38\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:861 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmppuj03_yh.jl:28\\\
    n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmppuj03_yh.jl:38 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmppuj03_yh.jl:37\\ntest set:\
    \ Error During Test at /tmp/tmppuj03_yh.jl:39\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:861\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmppuj03_yh.jl:28\\n   [3]\
    \ tri(n::Int64)\\n     @ Main /tmp/tmppuj03_yh.jl:23\\n   [4] macro expansion\\\
    n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [5] macro expansion\\n     @ /tmp/tmppuj03_yh.jl:39 [inlined]\\\
    n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [7] top-level scope\\n     @ /tmp/tmppuj03_yh.jl:37\\ntest set:\
    \ Error During Test at /tmp/tmppuj03_yh.jl:40\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:861\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmppuj03_yh.jl:28\\n   [3]\
    \ tri(n::Int64) (repeats 2 times)\\n     @ Main /tmp/tmppuj03_yh.jl:23\\n   [4]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [5] macro expansion\\n     @ /tmp/tmppuj03_yh.jl:40 [inlined]\\\
    n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/juli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    #Your code here\n    return 1:n\nend\nusing Test\n\n@testset begin\n\n\
    candidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0dv1fibl.jl:26\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 2, 3] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0dv1fibl.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0dv1fibl.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp0dv1fibl.jl:27\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 2, 3, 4] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0dv1fibl.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0dv1fibl.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp0dv1fibl.jl:28\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0dv1fibl.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0dv1fibl.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp0dv1fibl.jl:29\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 2, 3, 4, 5, 6] == [1, 3, 2, 8, 3, 15, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0dv1fibl.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0dv1fibl.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp0dv1fibl.jl:30\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Ev"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 10 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0dv1fibl.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    arr = Int64[]\n    i = 1\n    while i <= n\n        if i == 1\n      \
    \      push!(arr, 1)\n        elseif i == 2\n            push!(arr, 3)\n     \
    \   elseif i == 3\n            push!(arr, 2)\n        else\n            push!(arr,\
    \ arr[i - 1] + arr[i - 2] + arr[i - 3])\n        end\n        i += 1\n    end\n\
    \    return arr\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpbynbbm_o.jl:39\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpbynbbm_o.jl:39 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpbynbbm_o.jl:38\\ntest set: Test\
    \ Failed at /tmp/tmpbynbbm_o.jl:40\\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\\n   Evaluated: [1, 3, 2, 6] == [1, 3, 2, 8, 3]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpbynbbm_o.jl:40 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpbynbbm_o.jl:38\\ntest set: Test\
    \ Failed at /tmp/tmpbynbbm_o.jl:41\\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\\n   Evaluated: [1, 3, 2, 6, 11] == [1, 3, 2, 8, 3, 15]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpbynbbm_o.jl:41 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpbynbbm_o.jl:38\\ntest set: Test\
    \ Failed at /tmp/tmpbynbbm_o.jl:42\\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\\n   Evaluated: [1, 3, 2, 6, 11, 19] == [1, 3, 2, 8, 3, 15, 4]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpbynbbm_o.jl:42 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpbynbbm_o.jl:38\\ntest set: Test\
    \ Failed at /tmp/tmpbynbbm_o.jl:43\\n  Expres"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 0 passed, 10 failed, 0 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmpbynbbm_o.jl:36\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    elseif n == 3\n        return\
    \ [1, 3, 2, 8]\n    else\n        vec = zeros(Int64, n+1)\n        vec[1] = 1\n\
    \        vec[2] = 3\n        vec[3] = 2\n        for i in 4:n+1\n            if\
    \ i % 2 == 0\n                vec[i] = Int64(1 + i / 2)\n            else\n  \
    \              vec[i] = vec[i-1] + vec[i-2] + vec[i-3]\n            end\n    \
    \    end\n        return vec\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp25ep7f_o.jl:47\\n  Expression: candidate(4)\
    \ == [1, 3, 2, 8, 3]\\n   Evaluated: [1, 3, 2, 3, 8] == [1, 3, 2, 8, 3]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp25ep7f_o.jl:47 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp25ep7f_o.jl:45\\ntest set: Test\
    \ Failed at /tmp/tmp25ep7f_o.jl:48\\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\\n   Evaluated: [1, 3, 2, 3, 8, 4] == [1, 3, 2, 8, 3, 15]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp25ep7f_o.jl:48 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp25ep7f_o.jl:45\\ntest set: Test\
    \ Failed at /tmp/tmp25ep7f_o.jl:49\\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\\n   Evaluated: [1, 3, 2, 3, 8, 4, 15] == [1, 3, 2, 8, 3, 15, 4]\\\
    nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp25ep7f_o.jl:49 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp25ep7f_o.jl:45\\ntest set: Test\
    \ Failed at /tmp/tmp25ep7f_o.jl:50\\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\\n   Evaluated: [1, 3, 2, 3, 8, 4, 15, 5] == [1, 3, 2, 8, 3, 15,\
    \ 4, 24]\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp25ep7f_o.jl:50 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp25ep7f_o.jl:45\\ntest s"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = tri(n - 1)\n\
    \        if iseven(n)\n            return vcat(v, div(1 + n, 2))\n        else\n\
    \            return vcat(v, v[end] + v[end - 1] + v[end - 2])\n        end\n \
    \   end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp65x51hjg.jl:38\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 2, 6] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp65x51hjg.jl:38 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp65x51hjg.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmp65x51hjg.jl:39\\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\\n   Evaluated: [1, 3, 2, 6, 2] == [1, 3, 2, 8, 3]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp65x51hjg.jl:39 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp65x51hjg.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmp65x51hjg.jl:40\\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\\n   Evaluated: [1, 3, 2, 6, 2, 10] == [1, 3, 2, 8, 3, 15]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp65x51hjg.jl:40 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp65x51hjg.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmp65x51hjg.jl:41\\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\\n   Evaluated: [1, 3, 2, 6, 2, 10, 3] == [1, 3, 2, 8, 3, 15, 4]\\\
    nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp65x51hjg.jl:41 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp65x51hjg.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmp65x51hjg.jl:4"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    x = Vector{Int64}(undef, n+1)\n    x[1] = 1\n    x[2] = 3\n    x[3] =\
    \ 2\n    for i in 4:n+1\n        if i % 2 == 0\n            x[i] = 1 + i / 2\n\
    \        else\n            x[i] = x[i-1] + x[i-2] + x[i-3]\n        end\n    end\n\
    \    return x\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpy_911n0o.jl:36\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 2, 3] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpy_911n0o.jl:36 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpy_911n0o.jl:35\\ntest set: Test\
    \ Failed at /tmp/tmpy_911n0o.jl:37\\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\\n   Evaluated: [1, 3, 2, 3, 8] == [1, 3, 2, 8, 3]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpy_911n0o.jl:37 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpy_911n0o.jl:35\\ntest set: Test\
    \ Failed at /tmp/tmpy_911n0o.jl:38\\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\\n   Evaluated: [1, 3, 2, 3, 8, 4] == [1, 3, 2, 8, 3, 15]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpy_911n0o.jl:38 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpy_911n0o.jl:35\\ntest set: Test\
    \ Failed at /tmp/tmpy_911n0o.jl:39\\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\\n   Evaluated: [1, 3, 2, 3, 8, 4, 15] == [1, 3, 2, 8, 3, 15, 4]\\\
    nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpy_911n0o.jl:39 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpy_911n0o.jl:35\\ntest set: Test\
    \ Failed at /tmp/tmpy_911n0o.jl:40"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n < 1\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    elseif n % 2 == 0\n        return\
    \ [1, 3, 2, 2]\n    else\n        return [1, 3, 2, 2, 11]\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2,\
    \ 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3,\
    \ 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpg1dw9mzj.jl:35\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 2, 2, 11] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpg1dw9mzj.jl:35 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpg1dw9mzj.jl:34\\ntest set: Test\
    \ Failed at /tmp/tmpg1dw9mzj.jl:36\\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\\n   Evaluated: [1, 3, 2, 2] == [1, 3, 2, 8, 3]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpg1dw9mzj.jl:36 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpg1dw9mzj.jl:34\\ntest set: Test\
    \ Failed at /tmp/tmpg1dw9mzj.jl:37\\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\\n   Evaluated: [1, 3, 2, 2, 11] == [1, 3, 2, 8, 3, 15]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpg1dw9mzj.jl:37 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpg1dw9mzj.jl:34\\ntest set: Test\
    \ Failed at /tmp/tmpg1dw9mzj.jl:38\\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\\n   Evaluated: [1, 3, 2, 2] == [1, 3, 2, 8, 3, 15, 4]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpg1dw9mzj.jl:38 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpg1dw9mzj.jl:34\\ntest set: Test\
    \ Failed at /tmp/tmpg1dw9mzj.jl:39\\n  Express"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    tri = Vector{Int64}(n+1)\n    tri[1] = 1\n    tri[2] = 3\n    tri[3] =\
    \ 2\n    for i in 4:n+1\n        tri[i] = ifelse(rem(i,2) == 0, 1+i/2, tri[i-1]+tri[i-2]+tri[i+1])\n\
    \    end\n    return tri\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\
    \t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpcseg651n.jl:32\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  MethodError: no method\
    \ matching Vector{Int64}(::Int64)\\n  Closest candidates are:\\n    Vector{T}()\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/base/boot.jl:476\\n    Array{T,\
    \ N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\\\
    n    Array{T, N}(!Matched::BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\\\
    n    ...\\n  Stacktrace:\\n   [1] tri(n::Int64)\\n     @ Main /tmp/tmpcseg651n.jl:18\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpcseg651n.jl:32 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpcseg651n.jl:31\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    s = [1, 3, 2]\n    for i = 1:n\n        if mod(i, 2) == 0\n          \
    \  push!(s, div(i, 2))\n        else\n            push!(s, s[end - 2] + s[end\
    \ - 1] + s[end])\n        end\n    end\n    return s\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp6wqt790.jl:33\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 6, 1, 9] == [1, 3, 2, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp6wqt790.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp6wqt790.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpp6wqt790.jl:34\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 6, 1, 9, 2] == [1, 3, 2, 8, 3]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp6wqt790.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp6wqt790.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpp6wqt790.jl:35\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 6, 1, 9, 2, 12] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp6wqt790.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp6wqt790.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpp6wqt790.jl:36\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 6, 1, 9, 2, 12, 3] == [1, 3, 2, 8, 3, 15,\
    \ 4]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp6wqt790.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp6wqt790.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpp6wqt790.jl:37\n  Expression: candidate("
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 10 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp6wqt790.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n==0\n        return [1]\n    elseif n==1\n        return [1, 3]\n\
    \    elseif n==2\n        return [1, 3, 2]\n    elseif n>2\n        v = tri(n-1)\n\
    \        push!(v, tri(n-3)[end] + tri(n-2)[end] + tri(n-1)[end])\n        return\
    \ v\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpk45nm97t.jl:35\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 2, 6] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpk45nm97t.jl:35 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpk45nm97t.jl:34\\ntest set: Test\
    \ Failed at /tmp/tmpk45nm97t.jl:36\\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\\n   Evaluated: [1, 3, 2, 6, 11] == [1, 3, 2, 8, 3]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpk45nm97t.jl:36 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpk45nm97t.jl:34\\ntest set: Test\
    \ Failed at /tmp/tmpk45nm97t.jl:37\\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\\n   Evaluated: [1, 3, 2, 6, 11, 19] == [1, 3, 2, 8, 3, 15]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpk45nm97t.jl:37 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpk45nm97t.jl:34\\ntest set: Test\
    \ Failed at /tmp/tmpk45nm97t.jl:38\\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\\n   Evaluated: [1, 3, 2, 6, 11, 19, 36] == [1, 3, 2, 8, 3, 15, 4]\\\
    nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpk45nm97t.jl:38 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpk45nm97t.jl:34\\ntest set: Test\
    \ Failed at /tmp/tmpk45nm97t."
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    seq = fill(0, n + 1)\n    seq[1] = 1\n    seq[2] = 3\n    seq[3] = 2\n\
    \    for i in 4:n + 1\n        seq[i] = seq[i - 1] + seq[i - 2] + seq[i - 3]\n\
    \    end\n    return seq\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\
    \t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpaj4kh4og.jl:32\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 2, 6] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpaj4kh4og.jl:32 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpaj4kh4og.jl:31\\ntest set: Test\
    \ Failed at /tmp/tmpaj4kh4og.jl:33\\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\\n   Evaluated: [1, 3, 2, 6, 11] == [1, 3, 2, 8, 3]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpaj4kh4og.jl:33 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpaj4kh4og.jl:31\\ntest set: Test\
    \ Failed at /tmp/tmpaj4kh4og.jl:34\\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\\n   Evaluated: [1, 3, 2, 6, 11, 19] == [1, 3, 2, 8, 3, 15]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpaj4kh4og.jl:34 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpaj4kh4og.jl:31\\ntest set: Test\
    \ Failed at /tmp/tmpaj4kh4og.jl:35\\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\\n   Evaluated: [1, 3, 2, 6, 11, 19, 36] == [1, 3, 2, 8, 3, 15, 4]\\\
    nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpaj4kh4og.jl:35 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpaj4kh4og.jl:31\\ntest set: Test\
    \ Failed at /tmp/tmpaj4kh4og."
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    elseif n == 3\n        return\
    \ [1, 3, 2, 8]\n    else\n        x = tri(n - 1)\n        push!(x, 1 + div(n,\
    \ 2))\n        push!(x, x[end] + x[end - 1] + x[end - 2])\n        return x\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz7yl7_bv.jl:39\n  Expression: candidate(4)\
    \ == [1, 3, 2, 8, 3]\n   Evaluated: [1, 3, 2, 8, 3, 13] == [1, 3, 2, 8, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz7yl7_bv.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz7yl7_bv.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpz7yl7_bv.jl:40\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 8, 3, 13, 3, 19] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz7yl7_bv.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz7yl7_bv.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpz7yl7_bv.jl:41\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 8, 3, 13, 3, 19, 4, 26] == [1, 3, 2, 8, 3,\
    \ 15, 4]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz7yl7_bv.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz7yl7_bv.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpz7yl7_bv.jl:42\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 3, 2, 8, 3, 13, 3, 19, 4, 26, 4, 34] == [1,\
    \ 3, 2, 8, 3, 15, 4, 24]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz7yl7_bv.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz7yl7_bv.jl:37\ntest set: Test\
    \ Fai"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz7yl7_bv.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    n += 1\n    result = Vector{Int64}(n)\n    result[1] = 1\n    if n >=\
    \ 2\n        result[2] = 3\n    end\n    if n >= 3\n        result[3] = 2\n  \
    \  end\n    if n >= 4\n        for i = 4:n\n            if mod(i, 2) == 0\n  \
    \              result[i] = 1 + (i / 2)\n            else\n                result[i]\
    \ = result[i - 1] + result[i - 2] + result[i + 1]\n            end\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    t = [3, 1, 2]\n    for i = 4:n+1\n        push!(t, t[i-1] + t[i-2] + t[i-3])\n\
    \    end\n    return t\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\
    \t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpw_0s4zpl.jl:29\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [3, 1, 2, 6] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpw_0s4zpl.jl:29 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpw_0s4zpl.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmpw_0s4zpl.jl:30\\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\\n   Evaluated: [3, 1, 2, 6, 9] == [1, 3, 2, 8, 3]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpw_0s4zpl.jl:30 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpw_0s4zpl.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmpw_0s4zpl.jl:31\\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\\n   Evaluated: [3, 1, 2, 6, 9, 17] == [1, 3, 2, 8, 3, 15]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpw_0s4zpl.jl:31 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpw_0s4zpl.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmpw_0s4zpl.jl:32\\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\\n   Evaluated: [3, 1, 2, 6, 9, 17, 32] == [1, 3, 2, 8, 3, 15, 4]\\\
    nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpw_0s4zpl.jl:32 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpw_0s4zpl.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmpw_0s4zpl.jl:"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 0 passed, 10 failed, 0 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmpw_0s4zpl.jl:26\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    Tri = Array{Int64}(n+1)\n    Tri[1] = 1\n    Tri[2] = 3\n    Tri[3] =\
    \ 2\n    if n <= 2\n        return Tri[1:n+1]\n    end\n    for i in 4:n+1\n \
    \       if i % 2 == 0\n            Tri[i] = Int64(1 + i / 2)\n        else\n \
    \           Tri[i] = Tri[i-1] + Tri[i-2] + Tri[i+1]\n        end\n    end\n  \
    \  return Tri\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp75axcya4.jl:39\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  MethodError: no method\
    \ matching (Array{Int64})(::Int64)\\n  Closest candidates are:\\n    (Array{T})(!Matched::LinearAlgebra.AbstractQ)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/qr.jl:563\\\
    n    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Tuple{Int64,\
    \ Int64}) where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\\\
    n    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\\\
    n    ...\\n  Stacktrace:\\n   [1] tri(n::Int64)\\n     @ Main /tmp/tmp75axcya4.jl:18\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp75axcya4.jl:39 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp75axcya4.jl:38\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    @assert n >= 0 \"n must be non-negative\" \n    result = Vector{Int64}(n\
    \ + 1)\n    result[1] = 1\n    result[2] = 3\n    result[3] = 2\n    for i in\
    \ 4:n + 1\n        result[i] = result[i - 3] + result[i - 2] + result[i - 1]\n\
    \    end\n    return result \nend\ntri(3)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: None
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    \n    if n == 0\n        return [0]\n    end\n    \n    if n == 1\n  \
    \      return [1, 3]\n    end\n    \n    if n == 2\n        return [1, 3, 2]\n\
    \    end\n    \n    arr = [1, 3, 2]\n    \n    for i in 3:n\n        if i % 2\
    \ == 0\n            push!(arr, 1 + (i / 2))\n        else\n            push!(arr,\
    \ arr[i - 1] + arr[i - 2] + arr[i + 1])\n        end\n    end\n    \n    return\
    \ arr\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp274axzo8.jl:48\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:861 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp274axzo8.jl:37\\\
    n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp274axzo8.jl:48 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp274axzo8.jl:47\\ntest set:\
    \ Error During Test at /tmp/tmp274axzo8.jl:49\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:861\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp274axzo8.jl:37\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp274axzo8.jl:49 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp274axzo8.jl:47\\ntest set:\
    \ Error During Test at /tmp/tmp274axzo8.jl:50\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:861\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp274axzo8.jl:37\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp274axzo8.jl:50 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp274axzo8.jl:47\\ntest set:\
    \ Error During Test at /"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    tri_seq = [1, 3, 2]\n    for i in 3:n\n        if i % 2 == 0\n       \
    \     push!(tri_seq, 1 + i / 2)\n        else\n            push!(tri_seq, tri_seq[i-1]\
    \ + tri_seq[i-2] + tri_seq[i+1])\n        end\n    end\n    return tri_seq\nend\n\
    using Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1,\
    \ 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpgu756dpq.jl:33\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:861 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpgu756dpq.jl:23\\\
    n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpgu756dpq.jl:33 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpgu756dpq.jl:32\\ntest set:\
    \ Error During Test at /tmp/tmpgu756dpq.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:861\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpgu756dpq.jl:23\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpgu756dpq.jl:34 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpgu756dpq.jl:32\\ntest set:\
    \ Error During Test at /tmp/tmpgu756dpq.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:861\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpgu756dpq.jl:23\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpgu756dpq.jl:35 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpgu756dpq.jl:32\\ntest set:\
    \ Error During Test at /"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    tri(1) = 3\n    tri(n) = (n % 2 == 0) ? 1 + n / 2 : tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n    (1:n + 1) .> tri\nend\n \nusing Test\n\n@testset begin\n\
    \ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"1\" is not a valid function argument name around\
    \ /tmp/tmpun1d6a9q.jl:18\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpun1d6a9q.jl:1\n\
    in expression starting at /tmp/tmpun1d6a9q.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    l = zeros(Int64, n + 1)\n    l[1] = 1\n    l[2] = 3\n    for i = 3:n\n\
    \        if i % 2 == 0\n            l[i] = 1 + i / 2\n        else\n         \
    \   l[i] = l[i - 1] + l[i - 2] + l[i + 1]\n        end\n    end\n    return l\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) ==\
    \ [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpmyr4olze.jl:35\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 4, 0] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpmyr4olze.jl:35 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpmyr4olze.jl:34\\ntest set: Test\
    \ Failed at /tmp/tmpmyr4olze.jl:36\\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\\n   Evaluated: [1, 3, 4, 3, 0] == [1, 3, 2, 8, 3]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpmyr4olze.jl:36 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpmyr4olze.jl:34\\ntest set: Test\
    \ Failed at /tmp/tmpmyr4olze.jl:37\\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\\n   Evaluated: [1, 3, 4, 3, 7, 0] == [1, 3, 2, 8, 3, 15]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpmyr4olze.jl:37 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpmyr4olze.jl:34\\ntest set: Test\
    \ Failed at /tmp/tmpmyr4olze.jl:38\\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\\n   Evaluated: [1, 3, 4, 3, 7, 4, 0] == [1, 3, 2, 8, 3, 15, 4]\\\
    nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpmyr4olze.jl:38 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpmyr4olze.jl:34\\ntest set: Test\
    \ Failed at /tmp/tmpmyr4olze.jl:39\\"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    n>=0 || throw(DomainError())\n    tri(i::Int64) = i>0 ? 3i : 1\n    [tri(i)\
    \ for i in 0:n]\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpk895086p.jl:27\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 6, 9] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk895086p.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk895086p.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpk895086p.jl:28\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 6, 9, 12] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk895086p.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk895086p.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpk895086p.jl:29\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 6, 9, 12, 15] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk895086p.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk895086p.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpk895086p.jl:30\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 6, 9, 12, 15, 18] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk895086p.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk895086p.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpk895086p.jl:31\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk895086p.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    elseif n == 3\n        return\
    \ [1, 3, 2, 8]\n    elseif n > 3\n        v1 = tri(n - 1)\n        n -= 1\n  \
    \      v2 = v1[n]\n        v3 = v1[n - 1]\n        v4 = v1[n - 2]\n        v5\
    \ = v1[n + 1]\n        if n % 2 == 0\n            return push!(v1, (1 + (n / 2)))\n\
    \        else\n            return push!(v1, (v2 + v3 + v5))\n        end\n   \
    \ end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgrqwllxh.jl:46\n  Expression: candidate(4)\
    \ == [1, 3, 2, 8, 3]\n   Evaluated: [1, 3, 2, 8, 13] == [1, 3, 2, 8, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgrqwllxh.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgrqwllxh.jl:44\ntest set: Test\
    \ Failed at /tmp/tmpgrqwllxh.jl:47\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 8, 13, 3] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgrqwllxh.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgrqwllxh.jl:44\ntest set: Test\
    \ Failed at /tmp/tmpgrqwllxh.jl:48\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 8, 13, 3, 24] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgrqwllxh.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgrqwllxh.jl:44\ntest set: Test\
    \ Failed at /tmp/tmpgrqwllxh.jl:49\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 3, 2, 8, 13, 3, 24, 4] == [1, 3, 2, 8, 3, 15,\
    \ 4, 24]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgrqwllxh.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgrqwllxh.jl:44\ntest set: Test\
    \ Failed at /tmp/tmpgrqwllxh.jl:50\n  Ex"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgrqwllxh.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    tri = zeros(Int64, n+1)\n    tri[1] = 1\n    tri[2] = 3\n    tri[3] =\
    \ 2\n    for i = 4:n+1\n        if iseven(i)\n            tri[i] = Int64(i/2)\n\
    \        else\n            tri[i] = tri[i-1] + tri[i-2] + tri[i-3]\n        end\n\
    \    end\n    return tri\nend\n \nusing Test\n\n@testset begin\n\ncandidate =\
    \ tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp_906c20l.jl:37\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 2, 2] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp_906c20l.jl:37 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp_906c20l.jl:36\\ntest set: Test\
    \ Failed at /tmp/tmp_906c20l.jl:38\\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\\n   Evaluated: [1, 3, 2, 2, 7] == [1, 3, 2, 8, 3]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp_906c20l.jl:38 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp_906c20l.jl:36\\ntest set: Test\
    \ Failed at /tmp/tmp_906c20l.jl:39\\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\\n   Evaluated: [1, 3, 2, 2, 7, 3] == [1, 3, 2, 8, 3, 15]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp_906c20l.jl:39 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp_906c20l.jl:36\\ntest set: Test\
    \ Failed at /tmp/tmp_906c20l.jl:40\\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\\n   Evaluated: [1, 3, 2, 2, 7, 3, 12] == [1, 3, 2, 8, 3, 15, 4]\\\
    nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp_906c20l.jl:40 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp_906c20l.jl:36\\ntest set: Test\
    \ Failed at /tmp/tmp_906c20l.jl:41"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    # Your code\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t\
    @test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n <= 1\n        return 1:n\n    end\n    output = [1; 3; 2]\n    for\
    \ ii in 4:n\n        output = push!(output, output[end-2] + output[end-1] + output[end])\n\
    \    end\n    return output\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpvioz4cvb.jl:32\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpvioz4cvb.jl:32 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpvioz4cvb.jl:31\\ntest set: Test\
    \ Failed at /tmp/tmpvioz4cvb.jl:33\\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\\n   Evaluated: [1, 3, 2, 6] == [1, 3, 2, 8, 3]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpvioz4cvb.jl:33 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpvioz4cvb.jl:31\\ntest set: Test\
    \ Failed at /tmp/tmpvioz4cvb.jl:34\\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\\n   Evaluated: [1, 3, 2, 6, 11] == [1, 3, 2, 8, 3, 15]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpvioz4cvb.jl:34 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpvioz4cvb.jl:31\\ntest set: Test\
    \ Failed at /tmp/tmpvioz4cvb.jl:35\\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\\n   Evaluated: [1, 3, 2, 6, 11, 19] == [1, 3, 2, 8, 3, 15, 4]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpvioz4cvb.jl:35 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpvioz4cvb.jl:31\\ntest set: Test\
    \ Failed at /tmp/tmpvioz4cvb.jl:36\\n  Expres"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    v = zeros(Int64, n + 1)\n    v[1] = 1\n    v[2] = 3\n    v[3] = 2\n  \
    \  for i in 4:n + 1\n        if i % 2 == 0\n            v[i] = Int64(1 + i / 2)\n\
    \        else\n            v[i] = v[i - 1] + v[i - 2] + v[i + 1]\n        end\n\
    \    end\n    return v\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\
    \t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpx1ocwfnk.jl:36\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 2, 3] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpx1ocwfnk.jl:36 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpx1ocwfnk.jl:35\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    a = Array{Int64}(undef, n + 1)\n    a[1] = 1\n    a[2] = 3\n    a[3] =\
    \ 2\n    for i = 4:n + 1\n        if i % 2 == 0\n            a[i] = 1 + i / 2\n\
    \        else\n            a[i] = a[i - 1] + a[i - 2] + a[i + 1]\n        end\n\
    \    end\n    return a\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\
    \t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp8l9vct_b.jl:36\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 2, 3] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp8l9vct_b.jl:36 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp8l9vct_b.jl:35\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    a = [1, 3, 2]\n    if n == 0\n        return [0]\n    elseif n == 1\n\
    \        return [1]\n    elseif n == 2\n        return [1, 3]\n    elseif n ==\
    \ 3\n        return [1, 3, 2]\n    else\n        for i in 1:n-3\n            b\
    \ = a[i] + a[i+1] + a[i+2]\n            push!(a, b)\n        end\n        return\
    \ a\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4l58o_sm.jl:40\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4l58o_sm.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4l58o_sm.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp4l58o_sm.jl:41\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 6] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4l58o_sm.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4l58o_sm.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp4l58o_sm.jl:42\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 6, 11] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4l58o_sm.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4l58o_sm.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp4l58o_sm.jl:43\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 6, 11, 19] == [1, 3, 2, 8, 3, 15, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4l58o_sm.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4l58o_sm.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp4l58o_sm.jl:44\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 10 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4l58o_sm.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    list = Vector{Int64}()\n    for i in 1:n+1\n        if i == 1\n      \
    \      push!(list, 1)\n        elseif i == 2\n            push!(list, 3)\n   \
    \     elseif i == 3\n            push!(list, 2)\n        elseif i % 2 == 0\n \
    \           push!(list, i / 2)\n        else\n            push!(list, list[i-1]\
    \ + list[i-2] + list[i-3])\n        end\n    end\n    return list\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2,\
    \ 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3,\
    \ 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyvpb9_zb.jl:39\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 2] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyvpb9_zb.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyvpb9_zb.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpyvpb9_zb.jl:40\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 2, 7] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyvpb9_zb.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyvpb9_zb.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpyvpb9_zb.jl:41\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 2, 7, 3] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyvpb9_zb.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyvpb9_zb.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpyvpb9_zb.jl:42\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 2, 7, 3, 12] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyvpb9_zb.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyvpb9_zb.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpyvpb9_zb.jl:43\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15,"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyvpb9_zb.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    a = 1\n    b = 3\n    c = 2\n    out = [a, b, c]\n    for i in 4:n+1\n\
    \        x = a + b + c\n        a = b\n        b = c\n        c = x\n        push!(out,\
    \ x)\n    end\n    return out\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5ksfqa_s.jl:36\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 6] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5ksfqa_s.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5ksfqa_s.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp5ksfqa_s.jl:37\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 6, 11] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5ksfqa_s.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5ksfqa_s.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp5ksfqa_s.jl:38\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 6, 11, 19] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5ksfqa_s.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5ksfqa_s.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp5ksfqa_s.jl:39\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 6, 11, 19, 36] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5ksfqa_s.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5ksfqa_s.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp5ksfqa_s.jl:40\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 10 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5ksfqa_s.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    out = Vector{Int64}(n+1)\n    for i in 1:n+1\n        if i == 1\n    \
    \        out[i] = 1\n        elseif i == 2\n            out[i] = 3\n        elseif\
    \ i == 3\n            out[i] = 2\n        else\n            if i % 2 == 0\n  \
    \              out[i] = 1 + i / 2\n            else\n                out[i] =\
    \ out[i-1] + out[i-2] + out[i-3]\n            end\n        end\n    end\n    return\
    \ out\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpk7r4pdp1.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  MethodError: no method\
    \ matching Vector{Int64}(::Int64)\\n  Closest candidates are:\\n    Vector{T}()\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/base/boot.jl:476\\n    Array{T,\
    \ N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\\\
    n    Array{T, N}(!Matched::BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\\\
    n    ...\\n  Stacktrace:\\n   [1] tri(n::Int64)\\n     @ Main /tmp/tmpk7r4pdp1.jl:18\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpk7r4pdp1.jl:41 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpk7r4pdp1.jl:40\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    tribonacci = [1, 3, 2]\n    for i in 4:n\n        if i % 2 == 0\n    \
    \        append!(tribonacci, 1 + (i / 2))\n        else\n            append!(tribonacci,\
    \ tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i + 1])\n        end\n  \
    \  end\n    return tribonacci\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmphl120ldl.jl:33\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmphl120ldl.jl:33 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmphl120ldl.jl:32\\ntest set: Test\
    \ Failed at /tmp/tmphl120ldl.jl:34\\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\\n   Evaluated: [1, 3, 2, 3] == [1, 3, 2, 8, 3]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmphl120ldl.jl:34 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmphl120ldl.jl:32\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    s = zeros(Int64, n + 1)\n    s[1] = 1\n    for i = 2:n\n        if i %\
    \ 2 == 0\n            s[i] = 1 + i / 2\n        else\n            s[i] = s[i -\
    \ 1] + s[i - 2] + s[i + 1]\n        end\n    end\n    return s\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfszgd91v.jl:34\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 2, 3, 0] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfszgd91v.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfszgd91v.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpfszgd91v.jl:35\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 2, 3, 3, 0] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfszgd91v.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfszgd91v.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpfszgd91v.jl:36\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 2, 3, 3, 6, 0] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfszgd91v.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfszgd91v.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpfszgd91v.jl:37\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 2, 3, 3, 6, 4, 0] == [1, 3, 2, 8, 3, 15, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfszgd91v.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfszgd91v.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpfszgd91v.jl:38\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 9 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfszgd91v.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n + 1)\n    result[1] = 1\n    result[2] = 3\n \
    \   result[3] = 2\n    for i in 4:n + 1\n        result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1]\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp022x4sh5.jl:32\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 4-element Vector{Int64} at index [5]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:861 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp022x4sh5.jl:23\\\
    n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp022x4sh5.jl:32 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp022x4sh5.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmp022x4sh5.jl:33\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [6]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:861\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp022x4sh5.jl:23\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp022x4sh5.jl:33 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp022x4sh5.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmp022x4sh5.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 6-element\
    \ Vector{Int64} at index [7]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:861\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp022x4sh5.jl:23\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp022x4sh5.jl:34 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp022x4sh5.jl:31\\ntest set:\
    \ Error During Test at /"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    tri = zeros(Int64, n + 1)\n    for i = 1: n + 1\n        if i == 1\n \
    \           tri[i] = 1\n        elseif i == 2\n            tri[i] = 3\n      \
    \  elseif i == 3\n            tri[i] = 2\n        else\n            tri[i] = tri[i\
    \ - 1] + tri[i - 2] + tri[i - 3]\n        end\n    end\n    return tri\nend\n\
    using Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1,\
    \ 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpybga_0ql.jl:37\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 6] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpybga_0ql.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpybga_0ql.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpybga_0ql.jl:38\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 6, 11] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpybga_0ql.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpybga_0ql.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpybga_0ql.jl:39\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 6, 11, 19] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpybga_0ql.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpybga_0ql.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpybga_0ql.jl:40\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 6, 11, 19, 36] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpybga_0ql.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpybga_0ql.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpybga_0ql.jl:41\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpybga_0ql.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        a, b, c = 1, 3,\
    \ 2\n        x = Vector{Int64}(n + 1)\n        x[1] = a\n        x[2] = b\n  \
    \      x[3] = c\n        for i in 4:n + 1\n            if i % 2 == 0\n       \
    \         x[i] = 1 + (i / 2)\n            else\n                x[i] = a + b +\
    \ c\n                a = b\n                b = c\n                c = x[i]\n\
    \            end\n        end\n        return x\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpufljrpdu.jl:48\\n  Test threw\
    \ exception\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n <= 0\n        return Int64[]\n    end\n    if n == 1\n        return\
    \ [3]\n    end\n    if n == 2\n        return [1, 3, 2]\n    end\n    res = [1,\
    \ 3, 2]\n    for i in 3:n\n        res = [res[end], res[end - 1], res[end - 2],\
    \ res[end] + res[end - 1] + res[end - 2]]\n    end\n    return res\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2,\
    \ 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3,\
    \ 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz73brcsy.jl:38\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [2, 3, 1, 6] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz73brcsy.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz73brcsy.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpz73brcsy.jl:39\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [6, 1, 3, 10] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz73brcsy.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz73brcsy.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpz73brcsy.jl:40\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [10, 3, 1, 14] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz73brcsy.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz73brcsy.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpz73brcsy.jl:41\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [14, 1, 3, 18] == [1, 3, 2, 8, 3, 15, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz73brcsy.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz73brcsy.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpz73brcsy.jl:42\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Eva"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 10 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz73brcsy.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        sum = 0\n    \
    \    t = [1, 3, 2]\n        for i = 3:n\n            sum = t[i] + t[i - 1] + t[i\
    \ - 2]\n            push!(t, sum)\n        end\n        return t\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1,\
    \ 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1mre2aik.jl:39\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 6] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1mre2aik.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1mre2aik.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp1mre2aik.jl:40\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 6, 11] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1mre2aik.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1mre2aik.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp1mre2aik.jl:41\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 6, 11, 19] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1mre2aik.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1mre2aik.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp1mre2aik.jl:42\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 6, 11, 19, 36] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1mre2aik.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1mre2aik.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp1mre2aik.jl:43\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1mre2aik.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n\
    \    elseif n == 2\n        return [0, 1, 2]\n    else\n        nums = [0, 1,\
    \ 2]\n        for i in 3:n\n            if i % 2 == 0\n                nums =\
    \ [nums; 1 + i / 2]\n            else\n                nums = [nums; nums[end]\
    \ + nums[end - 1] + nums[end - 2]]\n            end\n        end\n        return\
    \ nums\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp1gwr8wxb.jl:41\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [0, 1, 2, 3] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp1gwr8wxb.jl:41 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp1gwr8wxb.jl:40\\ntest set: Test\
    \ Failed at /tmp/tmp1gwr8wxb.jl:42\\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\\n   Evaluated: [0, 1, 2, 3, 3] == [1, 3, 2, 8, 3]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp1gwr8wxb.jl:42 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp1gwr8wxb.jl:40\\ntest set: Test\
    \ Failed at /tmp/tmp1gwr8wxb.jl:43\\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\\n   Evaluated: [0, 1, 2, 3, 3, 8] == [1, 3, 2, 8, 3, 15]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp1gwr8wxb.jl:43 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp1gwr8wxb.jl:40\\ntest set: Test\
    \ Failed at /tmp/tmp1gwr8wxb.jl:44\\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\\n   Evaluated: [0, 1, 2, 3, 3, 8, 4] == [1, 3, 2, 8, 3, 15, 4]\\\
    nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp1gwr8wxb.jl:44 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp1gwr8wxb.jl:40\\ntest set: Test\
    \ Failed at /tmp/tmp1gwr8wxb.jl:45\\"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    tri = zeros(Int64, n + 1)\n    tri[1] = 1\n    tri[2] = 3\n    for i in\
    \ 3:n\n        if i % 2 == 0\n            tri[i] = 1 + Int64(i / 2)\n        else\n\
    \            tri[i] = tri[i - 1] + tri[i - 2] + tri[i + 1]\n        end\n    end\n\
    \    return tri\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmps89_lym7.jl:35\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 4, 0] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmps89_lym7.jl:35 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmps89_lym7.jl:34\\ntest set: Test\
    \ Failed at /tmp/tmps89_lym7.jl:36\\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\\n   Evaluated: [1, 3, 4, 3, 0] == [1, 3, 2, 8, 3]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmps89_lym7.jl:36 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmps89_lym7.jl:34\\ntest set: Test\
    \ Failed at /tmp/tmps89_lym7.jl:37\\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\\n   Evaluated: [1, 3, 4, 3, 7, 0] == [1, 3, 2, 8, 3, 15]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmps89_lym7.jl:37 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmps89_lym7.jl:34\\ntest set: Test\
    \ Failed at /tmp/tmps89_lym7.jl:38\\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\\n   Evaluated: [1, 3, 4, 3, 7, 4, 0] == [1, 3, 2, 8, 3, 15, 4]\\\
    nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmps89_lym7.jl:38 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmps89_lym7.jl:34\\ntest set: Test\
    \ Failed at /tmp/tmps89_lym7.jl:39\\"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    tri = [1, 3, 2]\n    for i = 4:n+1\n        if i % 2 == 0\n          \
    \  push!(tri, i / 2)\n        else\n            push!(tri, tri[i-1] + tri[i-2]\
    \ + tri[i-3])\n        end\n    end\n    return tri\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmplvajlhx9.jl:33\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 2, 2] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmplvajlhx9.jl:33 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmplvajlhx9.jl:32\\ntest set: Test\
    \ Failed at /tmp/tmplvajlhx9.jl:34\\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\\n   Evaluated: [1, 3, 2, 2, 7] == [1, 3, 2, 8, 3]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmplvajlhx9.jl:34 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmplvajlhx9.jl:32\\ntest set: Test\
    \ Failed at /tmp/tmplvajlhx9.jl:35\\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\\n   Evaluated: [1, 3, 2, 2, 7, 3] == [1, 3, 2, 8, 3, 15]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmplvajlhx9.jl:35 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmplvajlhx9.jl:32\\ntest set: Test\
    \ Failed at /tmp/tmplvajlhx9.jl:36\\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\\n   Evaluated: [1, 3, 2, 2, 7, 3, 12] == [1, 3, 2, 8, 3, 15, 4]\\\
    nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmplvajlhx9.jl:36 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmplvajlhx9.jl:32\\ntest set: Test\
    \ Failed at /tmp/tmplvajlhx9.jl:37"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    f = zeros(Int64, n + 1)\n    f[1] = 1\n    f[2] = 3\n    f[3] = 2\n  \
    \  for i in range(4, n + 1)\n        f[i] = f[i - 1] + f[i - 2] + f[i + 1]\n \
    \   end\n    return f\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\
    \t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpec6sy1k7.jl:32\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 4-element Vector{Int64} at index [5]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:861 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpec6sy1k7.jl:23\\\
    n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpec6sy1k7.jl:32 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpec6sy1k7.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpec6sy1k7.jl:33\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [6]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:861\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpec6sy1k7.jl:23\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpec6sy1k7.jl:33 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpec6sy1k7.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpec6sy1k7.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 6-element\
    \ Vector{Int64} at index [7]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:861\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpec6sy1k7.jl:23\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpec6sy1k7.jl:34 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpec6sy1k7.jl:31\\ntest set:\
    \ Error During Test at /"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n\
    \    elseif n == 2\n        return [0, 1, 1]\n    else\n        A = zeros(Int64,\
    \ n + 1)\n        A[1] = 0\n        A[2] = 1\n        A[3] = 1\n        for i\
    \ in 4:n + 1\n            A[i] = A[i - 1] + A[i - 2] + A[i - 3]\n        end\n\
    \        return A\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\
    \t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpdn8ur1fi.jl:40\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [0, 1, 1, 2] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpdn8ur1fi.jl:40 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpdn8ur1fi.jl:39\\ntest set: Test\
    \ Failed at /tmp/tmpdn8ur1fi.jl:41\\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\\n   Evaluated: [0, 1, 1, 2, 4] == [1, 3, 2, 8, 3]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpdn8ur1fi.jl:41 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpdn8ur1fi.jl:39\\ntest set: Test\
    \ Failed at /tmp/tmpdn8ur1fi.jl:42\\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\\n   Evaluated: [0, 1, 1, 2, 4, 7] == [1, 3, 2, 8, 3, 15]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpdn8ur1fi.jl:42 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpdn8ur1fi.jl:39\\ntest set: Test\
    \ Failed at /tmp/tmpdn8ur1fi.jl:43\\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\\n   Evaluated: [0, 1, 1, 2, 4, 7, 13] == [1, 3, 2, 8, 3, 15, 4]\\\
    nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpdn8ur1fi.jl:43 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpdn8ur1fi.jl:39\\ntest set: Test\
    \ Failed at /tmp/tmpdn8ur1fi.jl:44"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    tri = zeros(Int64, n + 1)\n    tri[1] = 1\n    tri[2] = 3\n    tri[3]\
    \ = 2\n    for i in 4:n + 1\n        tri[i] = tri[i - 1] + tri[i - 2] + tri[i\
    \ + 1]\n    end\n    return tri\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpdul4r28r.jl:32\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 4-element Vector{Int64} at index [5]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:861 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpdul4r28r.jl:23\\\
    n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpdul4r28r.jl:32 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpdul4r28r.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpdul4r28r.jl:33\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [6]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:861\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpdul4r28r.jl:23\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpdul4r28r.jl:33 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpdul4r28r.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpdul4r28r.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 6-element\
    \ Vector{Int64} at index [7]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:861\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpdul4r28r.jl:23\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpdul4r28r.jl:34 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpdul4r28r.jl:31\\ntest set:\
    \ Error During Test at /"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        return [0]\n    elseif n == 1\n        return [1,\
    \ 3]\n    elseif n == 2\n        return [1, 3, 2]\n    else\n        a, b, c =\
    \ 1, 3, 2\n        list = [a, b, c]\n        for i = 1:n-2\n            d = a\
    \ + b + c\n            if d % 2 == 0\n                d = 1 + d / 2\n        \
    \    end\n            push!(list, d)\n            a, b, c = b, c, d\n        end\n\
    \        return list\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpkz3lann4.jl:43\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 2, 4] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpkz3lann4.jl:43 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpkz3lann4.jl:42\\ntest set: Test\
    \ Failed at /tmp/tmpkz3lann4.jl:44\\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\\n   Evaluated: [1, 3, 2, 4, 9] == [1, 3, 2, 8, 3]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpkz3lann4.jl:44 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpkz3lann4.jl:42\\ntest set: Test\
    \ Failed at /tmp/tmpkz3lann4.jl:45\\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\\n   Evaluated: [1, 3, 2, 4, 9, 15] == [1, 3, 2, 8, 3, 15]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpkz3lann4.jl:45 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpkz3lann4.jl:42\\ntest set: Test\
    \ Failed at /tmp/tmpkz3lann4.jl:46\\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\\n   Evaluated: [1, 3, 2, 4, 9, 15, 15] == [1, 3, 2, 8, 3, 15, 4]\\\
    nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpkz3lann4.jl:46 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpkz3lann4.jl:42\\ntest set: Test\
    \ Failed at /tmp/tmpkz3lann4.jl:"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 1 passed, 9 failed, 0 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmpkz3lann4.jl:40\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        return []\n    elseif n == 1\n        return [1]\n\
    \    elseif n == 2\n        return [1, 3]\n    else\n        lst = [1, 3, 2]\n\
    \        while n > 2\n            append!(lst, lst[end - 2] + lst[end - 1] + lst[end])\n\
    \            n -= 1\n        end\n        return lst\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpo6zzsnj5.jl:38\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 2, 6] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpo6zzsnj5.jl:38 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpo6zzsnj5.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmpo6zzsnj5.jl:39\\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\\n   Evaluated: [1, 3, 2, 6, 11] == [1, 3, 2, 8, 3]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpo6zzsnj5.jl:39 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpo6zzsnj5.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmpo6zzsnj5.jl:40\\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\\n   Evaluated: [1, 3, 2, 6, 11, 19] == [1, 3, 2, 8, 3, 15]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpo6zzsnj5.jl:40 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpo6zzsnj5.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmpo6zzsnj5.jl:41\\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\\n   Evaluated: [1, 3, 2, 6, 11, 19, 36] == [1, 3, 2, 8, 3, 15, 4]\\\
    nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpo6zzsnj5.jl:41 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpo6zzsnj5.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmpo6zzsnj5."
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    res = zeros(Int64, n + 1)\n    res[1] = 1\n    for i = 2:n + 1\n     \
    \   res[i] = ifelse(i % 2 == 0, i / 2, res[i - 1] + res[i - 2] + res[i + 1])\n\
    \    end\n    return res\nend\n@test tri(3) == [1, 3, 2, 8]\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @test not defined\nin expression starting\
    \ at /tmp/tmpw5cgjuk9.jl:25\nin expression starting at /tmp/tmpw5cgjuk9.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n + 1)\n    result[1] = 1\n    result[2] = 3\n \
    \   for i = 3:n + 1\n        if i % 2 == 0\n            result[i] = 1 + i / 2\n\
    \        else\n            result[i] = result[i - 1] + result[i - 2] + result[i\
    \ + 1]\n        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpym6a9j4b.jl:35\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 4, 3] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpym6a9j4b.jl:35 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpym6a9j4b.jl:34\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [0]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        res = [1, 3, 2]\n\
    \        for i = 3:n\n            if (i % 2) == 0\n                push!(res,\
    \ 1 + i / 2)\n            else\n                push!(res, res[i] + res[i - 1]\
    \ + res[i + 1])\n            end\n        end\n        return res\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1,\
    \ 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmptr4klrea.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:861 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmptr4klrea.jl:30\\\
    n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmptr4klrea.jl:41 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmptr4klrea.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmptr4klrea.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:861\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmptr4klrea.jl:30\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmptr4klrea.jl:42 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmptr4klrea.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmptr4klrea.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:861\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmptr4klrea.jl:30\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmptr4klrea.jl:43 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmptr4klrea.jl:40\\ntest set:\
    \ Error During Test at /"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    tria(1) = 3\n    tria(n) = (n%2 == 0) ? 1 + n / 2 : tria(n - 1) + tria(n\
    \ - 2) + tria(n + 1)\n    [tria(i) for i in 1:n+1]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"1\" is not a valid function argument name around\
    \ /tmp/tmpzea9mf8l.jl:18\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzea9mf8l.jl:1\n\
    in expression starting at /tmp/tmpzea9mf8l.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    s = [1, 3, 2] \n    if n < 3 \n        return s[1:n] \n    end\n    for\
    \ i in 4:n \n        push!(s, (i % 2 == 0) ? (1 + i / 2) : (s[end] + s[end - 1]\
    \ + s[end - 2])) \n    end\n    return s\nend\nusing Test\n\n@testset begin\n\n\
    candidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpj75d45cm.jl:32\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpj75d45cm.jl:32 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpj75d45cm.jl:31\\ntest set: Test\
    \ Failed at /tmp/tmpj75d45cm.jl:33\\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\\n   Evaluated: [1, 3, 2, 3] == [1, 3, 2, 8, 3]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpj75d45cm.jl:33 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpj75d45cm.jl:31\\ntest set: Test\
    \ Failed at /tmp/tmpj75d45cm.jl:34\\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\\n   Evaluated: [1, 3, 2, 3, 8] == [1, 3, 2, 8, 3, 15]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpj75d45cm.jl:34 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpj75d45cm.jl:31\\ntest set: Test\
    \ Failed at /tmp/tmpj75d45cm.jl:35\\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\\n   Evaluated: [1, 3, 2, 3, 8, 4] == [1, 3, 2, 8, 3, 15, 4]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpj75d45cm.jl:35 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpj75d45cm.jl:31\\ntest set: Test\
    \ Failed at /tmp/tmpj75d45cm.jl:36\\n  Expressio"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    result = Vector{Int64}(n + 1)\n    result[1] = 1\n    result[2] = 3\n\
    \    result[3] = 2\n    for i in 4:n + 1\n        result[i] = result[i - 1] +\
    \ result[i - 2] + result[i - 3]\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    T = zeros(Int64, n+1)\n    T[1] = 1\n    T[2] = 3\n    T[3] = 2\n    for\
    \ i in 4:n+1\n        if i % 2 == 0\n            T[i] = 1 + (i / 2)\n        else\n\
    \            T[i] = T[i-1] + T[i-2] + T[i+1]\n        end\n    end\n    return\
    \ T\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp_5i7_8xp.jl:36\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 2, 3] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp_5i7_8xp.jl:36 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp_5i7_8xp.jl:35\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    tri = zeros(Int64, n + 1)\n    tri[1] = 1\n    tri[2] = 3\n    tri[3]\
    \ = 2\n    for i in 4:n + 1\n        tri[i] = ifelse(i % 2 == 0, 1 + (i / 2),\
    \ tri[i - 1] + tri[i - 2] + tri[i + 1])\n    end\n    return tri\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpkh0gjxrs.jl:32\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 4-element Vector{Int64} at index [5]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:861 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpkh0gjxrs.jl:23\\\
    n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpkh0gjxrs.jl:32 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpkh0gjxrs.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpkh0gjxrs.jl:33\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [6]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:861\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpkh0gjxrs.jl:23\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpkh0gjxrs.jl:33 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpkh0gjxrs.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpkh0gjxrs.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 6-element\
    \ Vector{Int64} at index [7]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:861\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpkh0gjxrs.jl:23\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpkh0gjxrs.jl:34 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpkh0gjxrs.jl:31\\ntest set:\
    \ Error During Test at /"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    result = [1, 3, 2]\n    for i in 3:n \n        push!(result, result[i]\
    \ + result[i - 1] + result[i - 2])\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpk0l_x679.jl:29\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 2, 6] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpk0l_x679.jl:29 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpk0l_x679.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmpk0l_x679.jl:30\\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\\n   Evaluated: [1, 3, 2, 6, 11] == [1, 3, 2, 8, 3]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpk0l_x679.jl:30 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpk0l_x679.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmpk0l_x679.jl:31\\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\\n   Evaluated: [1, 3, 2, 6, 11, 19] == [1, 3, 2, 8, 3, 15]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpk0l_x679.jl:31 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpk0l_x679.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmpk0l_x679.jl:32\\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\\n   Evaluated: [1, 3, 2, 6, 11, 19, 36] == [1, 3, 2, 8, 3, 15, 4]\\\
    nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpk0l_x679.jl:32 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpk0l_x679.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmpk0l_x679."
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    seq = zeros(Int64, n + 1)\n    seq[1] = 1\n    seq[2] = 3\n    seq[3]\
    \ = 2\n    for i in 4:n + 1\n        if i % 2 == 0\n            seq[i] = seq[i\
    \ - 1] + seq[i - 2] + seq[i - 3]\n        else\n            seq[i] = Int64(round(1\
    \ + i / 2))\n        end\n    end\n    return seq\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpbs1qk3tn.jl:36\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 2, 6] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpbs1qk3tn.jl:36 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpbs1qk3tn.jl:35\\ntest set: Test\
    \ Failed at /tmp/tmpbs1qk3tn.jl:37\\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\\n   Evaluated: [1, 3, 2, 6, 4] == [1, 3, 2, 8, 3]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpbs1qk3tn.jl:37 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpbs1qk3tn.jl:35\\ntest set: Test\
    \ Failed at /tmp/tmpbs1qk3tn.jl:38\\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\\n   Evaluated: [1, 3, 2, 6, 4, 12] == [1, 3, 2, 8, 3, 15]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpbs1qk3tn.jl:38 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpbs1qk3tn.jl:35\\ntest set: Test\
    \ Failed at /tmp/tmpbs1qk3tn.jl:39\\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\\n   Evaluated: [1, 3, 2, 6, 4, 12, 4] == [1, 3, 2, 8, 3, 15, 4]\\\
    nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpbs1qk3tn.jl:39 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpbs1qk3tn.jl:35\\ntest set: Test\
    \ Failed at /tmp/tmpbs1qk3tn.jl:4"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        return [1]\n    elseif n == 1\n        return [1,\
    \ 3]\n    elseif n == 2\n        return [1, 3, 2]\n    else\n        @assert n\
    \ > 2\n        vec = Int64[]\n        append!(vec, [1, 3, 2])\n        for i in\
    \ 3:n\n            push!(vec, (vec[i - 1] + vec[i - 2] + vec[i - 3]))\n      \
    \  end\n        return vec\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp7o4m19kx.jl:39\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [0]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:861 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp7o4m19kx.jl:29\\\
    n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp7o4m19kx.jl:39 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp7o4m19kx.jl:38\\ntest set:\
    \ Error During Test at /tmp/tmp7o4m19kx.jl:40\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [0]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:861\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp7o4m19kx.jl:29\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp7o4m19kx.jl:40 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp7o4m19kx.jl:38\\ntest set:\
    \ Error During Test at /tmp/tmp7o4m19kx.jl:41\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [0]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:861\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp7o4m19kx.jl:29\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp7o4m19kx.jl:41 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp7o4m19kx.jl:38\\ntest set:\
    \ Error During Test at /"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        prev = [1, 3,\
    \ 2]\n        while length(prev) < n + 1\n            if (length(prev) % 2) ==\
    \ 0\n                new = 1 + length(prev) / 2\n            else\n          \
    \      new = prev[end] + prev[end - 1] + prev[end - 2]\n            end\n    \
    \        push!(prev, new)\n        end\n        return prev\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2,\
    \ 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3,\
    \ 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpo398sofq.jl:42\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 2, 6] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpo398sofq.jl:42 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpo398sofq.jl:41\\ntest set: Test\
    \ Failed at /tmp/tmpo398sofq.jl:43\\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\\n   Evaluated: [1, 3, 2, 6, 3] == [1, 3, 2, 8, 3]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpo398sofq.jl:43 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpo398sofq.jl:41\\ntest set: Test\
    \ Failed at /tmp/tmpo398sofq.jl:44\\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\\n   Evaluated: [1, 3, 2, 6, 3, 11] == [1, 3, 2, 8, 3, 15]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpo398sofq.jl:44 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpo398sofq.jl:41\\ntest set: Test\
    \ Failed at /tmp/tmpo398sofq.jl:45\\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\\n   Evaluated: [1, 3, 2, 6, 3, 11, 4] == [1, 3, 2, 8, 3, 15, 4]\\\
    nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpo398sofq.jl:45 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpo398sofq.jl:41\\ntest set: Test\
    \ Failed at /tmp/tmpo398sofq.jl:4"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 2 passed, 8 failed, 0 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmpo398sofq.jl:39\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    arr = zeros(Int64, n + 1)\n    arr[1] = 1\n    arr[2] = 3\n    arr[3]\
    \ = 2\n    for i = 4:n + 1\n        if i % 2 == 0\n            arr[i] = 1 + (i\
    \ / 2)\n        else\n            arr[i] = arr[i - 1] + arr[i - 2] + arr[i + 1]\n\
    \        end\n    end\n    return arr\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmputtee2k6.jl:36\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 2, 3] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmputtee2k6.jl:36 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmputtee2k6.jl:35\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    results = zeros(Int64, n + 1)\n    results[1] = 1\n    results[2] = 3\n\
    \    results[3] = 2\n    for i = 4:n + 1\n        if iseven(i)\n            results[i]\
    \ = 1 + (i / 2)\n        else\n            results[i] = results[i - 1] + results[i\
    \ - 2] + results[i + 1]\n        end\n    end\n    return results\nend\n@testset\
    \ \"Tribonacci\" begin\n    @test tri(3) == [1, 3, 2, 8]\n    @test tri(5) ==\
    \ [1, 3, 2, 8, 5, 13]\n    @test tri(0) == [1]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @testset not defined\nin expression starting\
    \ at /tmp/tmp2hspioxc.jl:31\nin expression starting at /tmp/tmp2hspioxc.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n  if n == 0\n    return [1]\n  elseif n == 1\n    return [1, 3]\n  elseif\
    \ n == 2\n    return [1, 3, 2]\n  else\n    t = [1, 3, 2]\n    while(n > 2)\n\
    \      push!(t, t[end] + t[end - 1] + t[end - 2])\n      n -= 1\n    end\n   \
    \ return t\n  end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj_yo6qu2.jl:38\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 6] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj_yo6qu2.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj_yo6qu2.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpj_yo6qu2.jl:39\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 6, 11] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj_yo6qu2.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj_yo6qu2.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpj_yo6qu2.jl:40\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 6, 11, 19] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj_yo6qu2.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj_yo6qu2.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpj_yo6qu2.jl:41\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 6, 11, 19, 36] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj_yo6qu2.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj_yo6qu2.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpj_yo6qu2.jl:42\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj_yo6qu2.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return []\n    elseif n == 1\n        return [3]\n\
    \    elseif n == 2\n        return [1, 3]\n    else\n        last_three = [1,\
    \ 3, 2]\n        for i in 3:n\n            if i % 2 == 0\n                push!(last_three,\
    \ 1 + i / 2)\n            else\n                push!(last_three, last_three[end]\
    \ + last_three[end - 1] + last_three[end - 2])\n            end\n        end\n\
    \        return last_three\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpzbwj95fl.jl:41\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 2, 6] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpzbwj95fl.jl:41 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpzbwj95fl.jl:40\\ntest set: Test\
    \ Failed at /tmp/tmpzbwj95fl.jl:42\\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\\n   Evaluated: [1, 3, 2, 6, 3] == [1, 3, 2, 8, 3]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpzbwj95fl.jl:42 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpzbwj95fl.jl:40\\ntest set: Test\
    \ Failed at /tmp/tmpzbwj95fl.jl:43\\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\\n   Evaluated: [1, 3, 2, 6, 3, 11] == [1, 3, 2, 8, 3, 15]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpzbwj95fl.jl:43 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpzbwj95fl.jl:40\\ntest set: Test\
    \ Failed at /tmp/tmpzbwj95fl.jl:44\\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\\n   Evaluated: [1, 3, 2, 6, 3, 11, 4] == [1, 3, 2, 8, 3, 15, 4]\\\
    nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpzbwj95fl.jl:44 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpzbwj95fl.jl:40\\ntest set: Test\
    \ Failed at /tmp/tmpzbwj95fl.jl:4"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    elseif n == 3\n        return\
    \ [1, 3, 2, 8]\n    else\n        p = [1, 3, 2, 8]\n        for i in 4:n\n   \
    \         if i % 2 == 0\n                push!(p, div(i, 2) + 1)\n           \
    \ else\n                push!(p, p[i - 1] + p[i - 2] + p[i + 1])\n           \
    \ end\n        end\n        return p\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpf9viz_t8.jl:45\\n  Test threw\
    \ exception\\n  Expression: candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError:\
    \ attempt to access 5-element Vector{Int64} at index [6]\\n  Stacktrace:\\n  \
    \ [1] getindex\\n     @ ./array.jl:861 [inlined]\\n   [2] tri(n::Int64)\\n   \
    \  @ Main /tmp/tmpf9viz_t8.jl:32\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpf9viz_t8.jl:45 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpf9viz_t8.jl:42\\ntest set:\
    \ Error During Test at /tmp/tmpf9viz_t8.jl:46\\n  Test threw exception\\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [6]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:861\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpf9viz_t8.jl:32\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpf9viz_t8.jl:46 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpf9viz_t8.jl:42\\ntest set:\
    \ Error During Test at /tmp/tmpf9viz_t8.jl:47\\n  Test threw exception\\n  Expression:\
    \ candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [6]\\n  Stacktrace:\\n   [1] getindex\\n  \
    \   @ ./array.jl:861 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpf9viz_t8.jl:32\\\
    n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpf9viz_t8.jl:47 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpf9viz_t8.jl:42\\ntest set:\
    \ E"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n\
    \    elseif n == 2\n        return [0, 1, 1]\n    else\n        t = [0, 1, 1]\n\
    \        for i in 3:n + 1\n            if i % 2 == 0\n                push!(t,\
    \ Int64(1 + i / 2))\n            else\n                push!(t, t[i - 1] + t[i\
    \ - 2] + t[i + 1])\n            end\n        end\n        return t\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) ==\
    \ [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp8ek83ied.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:861 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp8ek83ied.jl:30\\\
    n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp8ek83ied.jl:41 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp8ek83ied.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmp8ek83ied.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:861\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp8ek83ied.jl:30\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp8ek83ied.jl:42 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp8ek83ied.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmp8ek83ied.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:861\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp8ek83ied.jl:30\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp8ek83ied.jl:43 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp8ek83ied.jl:40\\ntest set:\
    \ Error During Test at /"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    vec = [1, 3, 2]\n    for i in 3:n\n        if i % 2 == 0\n           \
    \ push!(vec, 1 + i / 2)\n        else\n            push!(vec, vec[i - 1] + vec[i\
    \ - 2] + vec[i + 1])\n        end\n    end\n    return vec\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp13jodspv.jl:33\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:861 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp13jodspv.jl:23\\\
    n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp13jodspv.jl:33 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp13jodspv.jl:32\\ntest set:\
    \ Error During Test at /tmp/tmp13jodspv.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:861\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp13jodspv.jl:23\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp13jodspv.jl:34 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp13jodspv.jl:32\\ntest set:\
    \ Error During Test at /tmp/tmp13jodspv.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:861\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp13jodspv.jl:23\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp13jodspv.jl:35 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp13jodspv.jl:32\\ntest set:\
    \ Error During Test at /"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        seq = zeros(Int64,\
    \ n+1)\n        seq[1:3] = [1, 3, 2]\n        for i in 4:n+1\n            seq[i]\
    \ = seq[i-1] + seq[i-2] + seq[i-3]\n        end\n        return seq\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) ==\
    \ [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmper6et08c.jl:38\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 6] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmper6et08c.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmper6et08c.jl:37\ntest set: Test\
    \ Failed at /tmp/tmper6et08c.jl:39\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 6, 11] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmper6et08c.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmper6et08c.jl:37\ntest set: Test\
    \ Failed at /tmp/tmper6et08c.jl:40\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 6, 11, 19] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmper6et08c.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmper6et08c.jl:37\ntest set: Test\
    \ Failed at /tmp/tmper6et08c.jl:41\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 6, 11, 19, 36] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmper6et08c.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmper6et08c.jl:37\ntest set: Test\
    \ Failed at /tmp/tmper6et08c.jl:42\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmper6et08c.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    #return a list of the first n + 1 numbers of the Tribonacci sequence.\n\
    \    #assume n >= 0\n    result = zeros(Int64, n + 1)\n    if n >= 1\n       \
    \ result[1] = 1\n    end\n    if n >= 2\n        result[2] = 3\n    end\n    if\
    \ n >= 3\n        result[3] = 2\n    end\n    if n >= 4\n        for i in 4:n\
    \ + 1\n            if iseven(i)\n                result[i] = 1 + i / 2\n     \
    \       else\n                result[i] = result[i - 1] + result[i - 2] + result[i\
    \ + 1]\n            end\n        end\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpsui_tf1a.jl:46\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 2, 0] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpsui_tf1a.jl:46 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpsui_tf1a.jl:45\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    output = zeros(Int64, n + 1)\n    output[1] = 1\n    output[2] = 3\n \
    \   output[3] = 2\n    for i in 4:n + 1\n        if i % 2 == 0\n            output[i]\
    \ = 1 + (i / 2)\n        else\n            output[i] = output[i - 1] + output[i\
    \ - 2] + output[i + 1]\n        end\n    end\n    return output\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpi5irm5rq.jl:36\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 2, 3] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpi5irm5rq.jl:36 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpi5irm5rq.jl:35\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    tri = zeros(Int64, n + 1)\n    tri[1] = 1\n    tri[2] = 3\n    tri[3]\
    \ = 2\n    i = 4\n    while i <= n + 1\n        if iseven(i)\n            tri[i]\
    \ = 1 + i / 2\n        else\n            tri[i] = tri[i - 1] + tri[i - 2] + tri[i\
    \ + 1]\n        end\n        i += 1\n    end\n    return tri\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp7dwt4mm8.jl:38\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 2, 3] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp7dwt4mm8.jl:38 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp7dwt4mm8.jl:37\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 return [1]\n    elseif n == 1 return [1, 3]\n    elseif n ==\
    \ 2 return [1, 3, 2]\n    else \n        result = [1, 3, 2]\n        for i in\
    \ 3:n \n            if (i % 2) == 0 result = [result; 1 + (i / 2)]\n         \
    \   else result = [result; result[end] + result[end - 1] + result[end - 2]]\n\
    \            end\n        end\n        return result\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpo_j2pdcu.jl:36\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 2, 6] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpo_j2pdcu.jl:36 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpo_j2pdcu.jl:35\\ntest set: Test\
    \ Failed at /tmp/tmpo_j2pdcu.jl:37\\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\\n   Evaluated: [1, 3, 2, 6, 3] == [1, 3, 2, 8, 3]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpo_j2pdcu.jl:37 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpo_j2pdcu.jl:35\\ntest set: Test\
    \ Failed at /tmp/tmpo_j2pdcu.jl:38\\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\\n   Evaluated: [1, 3, 2, 6, 3, 11] == [1, 3, 2, 8, 3, 15]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpo_j2pdcu.jl:38 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpo_j2pdcu.jl:35\\ntest set: Test\
    \ Failed at /tmp/tmpo_j2pdcu.jl:39\\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\\n   Evaluated: [1, 3, 2, 6, 3, 11, 4] == [1, 3, 2, 8, 3, 15, 4]\\\
    nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpo_j2pdcu.jl:39 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpo_j2pdcu.jl:35\\ntest set: Test\
    \ Failed at /tmp/tmpo_j2pdcu.jl:4"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    n = n+1\n    u = Vector{Int64}(n)\n    if n == 1 \n        u[1] = 1\n\
    \    elseif n == 2\n        u[1] = 1\n        u[2] = 3\n    elseif n == 3\n  \
    \      u[1] = 1\n        u[2] = 3\n        u[3] = 2\n    else\n        u[1] =\
    \ 1\n        u[2] = 3\n        u[3] = 2\n        for i in 4:n\n            if\
    \ i % 2 == 0\n                u[i] = u[i] + i/2\n            else\n          \
    \      u[i] = u[i-1] + u[i-2] + u[i+1]\n            end\n        end\n    end\n\
    \    return u\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "b'test set: '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    result = [1, 3, 2]\n    if n > 2\n        for i = 4:n + 1\n          \
    \  if i % 2 == 0\n                push!(result, 1 + i / 2)\n            else\n\
    \                push!(result, result[i - 1] + result[i - 2] + result[i - 3])\n\
    \            end\n        end\n    end\n    return result\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmplfkp0jnj.jl:35\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 2, 3] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmplfkp0jnj.jl:35 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmplfkp0jnj.jl:34\\ntest set: Test\
    \ Failed at /tmp/tmplfkp0jnj.jl:36\\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\\n   Evaluated: [1, 3, 2, 3, 8] == [1, 3, 2, 8, 3]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmplfkp0jnj.jl:36 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmplfkp0jnj.jl:34\\ntest set: Test\
    \ Failed at /tmp/tmplfkp0jnj.jl:37\\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\\n   Evaluated: [1, 3, 2, 3, 8, 4] == [1, 3, 2, 8, 3, 15]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmplfkp0jnj.jl:37 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmplfkp0jnj.jl:34\\ntest set: Test\
    \ Failed at /tmp/tmplfkp0jnj.jl:38\\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\\n   Evaluated: [1, 3, 2, 3, 8, 4, 15] == [1, 3, 2, 8, 3, 15, 4]\\\
    nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmplfkp0jnj.jl:38 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmplfkp0jnj.jl:34\\ntest set: Test\
    \ Failed at /tmp/tmplfkp0jnj.jl:39"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    #your code here\nend\n \nusing Test\n\n@testset begin\n\ncandidate = tri;\n\
    \t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    res = Vector{Int64}(n + 1)\n    res[1] = 1\n    for i in 2:n + 1\n   \
    \     res[i] = if i % 2 == 0\n            i / 2\n        else\n            if\
    \ i == 3\n                res[2] + res[1] + res[3]\n            else\n       \
    \         res[i - 1] + res[i - 2] + res[i + 1]\n            end\n        end\n\
    \    end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\
    \t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp2cturfpr.jl:38\\n  Test threw\
    \ exception\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1,3]\n\
    \    elseif n == 2\n        return [1,3,2]\n    else\n        a = [1,3,2]\n  \
    \      for i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i\
    \ / 2)\n            else\n                push!(a, a[i-1] + a[i-2] + a[i+1])\n\
    \            end\n        end\n        return a\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpzpqycs1v.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:861 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpzpqycs1v.jl:30\\\
    n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpzpqycs1v.jl:41 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpzpqycs1v.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpzpqycs1v.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:861\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpzpqycs1v.jl:30\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpzpqycs1v.jl:42 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpzpqycs1v.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpzpqycs1v.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:861\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpzpqycs1v.jl:30\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpzpqycs1v.jl:43 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpzpqycs1v.jl:40\\ntest set:\
    \ Error During Test at /"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n==1 return [1]\n    elseif n==2 return [1,3]\n    elseif n==3 return\
    \ [1,3,2]\n    else return [1,3,2,8]\n    end\nend\ntri(3)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp_7bu_v6b.jl:30\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp_7bu_v6b.jl:30 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp_7bu_v6b.jl:29\\ntest set: Test\
    \ Failed at /tmp/tmp_7bu_v6b.jl:31\\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\\n   Evaluated: [1, 3, 2, 8] == [1, 3, 2, 8, 3]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp_7bu_v6b.jl:31 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp_7bu_v6b.jl:29\\ntest set: Test\
    \ Failed at /tmp/tmp_7bu_v6b.jl:32\\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\\n   Evaluated: [1, 3, 2, 8] == [1, 3, 2, 8, 3, 15]\\nStacktrace:\\n\
    \ [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp_7bu_v6b.jl:32 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp_7bu_v6b.jl:29\\ntest set: Test\
    \ Failed at /tmp/tmp_7bu_v6b.jl:33\\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\\n   Evaluated: [1, 3, 2, 8] == [1, 3, 2, 8, 3, 15, 4]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp_7bu_v6b.jl:33 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp_7bu_v6b.jl:29\\ntest set: Test\
    \ Failed at /tmp/tmp_7bu_v6b.jl:34\\n  Expression: candid"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 0 passed, 10 failed, 0 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmp_7bu_v6b.jl:27\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        return vcat(tri(n\
    \ - 1), [1 + (n / 2), tri(n - 1)[end] + tri(n - 2)[end] + tri(n - 3)[end]])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpaok27nwv.jl:33\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  InexactError: Int64(2.5)\\\
    n  Stacktrace:\\n    [1] Int64\\n      @ ./float.jl:812 [inlined]\\n    [2] convert\\\
    n      @ ./number.jl:7 [inlined]\\n    [3] setindex!\\n      @ ./array.jl:903\
    \ [inlined]\\n    [4] _unsafe_copyto!(dest::Vector{Int64}, doffs::Int64, src::Vector{Float64},\
    \ soffs::Int64, n::Int64)\\n      @ Base ./array.jl:253\\n    [5] unsafe_copyto!\\\
    n      @ ./array.jl:307 [inlined]\\n    [6] _copyto_impl!\\n      @ ./array.jl:331\
    \ [inlined]\\n    [7] copyto!\\n      @ ./array.jl:317 [inlined]\\n    [8] copyto!\\\
    n      @ ./array.jl:343 [inlined]\\n    [9] copyto_axcheck!\\n      @ ./abstractarray.jl:1104\
    \ [inlined]\\n   [10] Vector{Int64}(x::Vector{Float64})\\n      @ Base ./array.jl:563\\\
    n   [11] convert\\n      @ ./array.jl:554 [inlined]\\n   [12] tri(n::Int64)\\\
    n      @ Main /tmp/tmpaok27nwv.jl:25\\n   [13] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [14] macro expansion\\n      @ /tmp/tmpaok27nwv.jl:33 [inlined]\\\
    n   [15] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [16] top-level scope\\n      @ /tmp/tmpaok27nwv.jl:32\\ntest\
    \ set: Error During Test at /tmp/tmpaok27nwv.jl:34\\n  Test threw exception\\\
    n  Expression: candidate(4) == [1, 3, 2, 8, 3]\\n  InexactError: Int64(2.5)\\\
    n  Stacktrace:\\n    [1] Int64\\n      @ ./float.jl:812 [inlined]\\n    [2] convert\\\
    n      @ ./number.jl:7 [inlined]\\n    [3] setindex!\\n      @ ./array.jl:903\
    \ [inlined]\\n    [4] _unsafe_copyto!(dest::Vector{Int64}, doffs::Int64, src::Vector{Float64},\
    \ soffs::Int64, n::Int64)\\n      @ Base ./array.jl:253\\n    [5] unsafe_copyto!\\\
    n      @ ./array.jl:307 [inlined]\\n    [6] _copyto_impl!\\n      @ ./array.jl:331\
    \ [inlined]\\n    [7] copyto!\\n      @ ./array.jl:317 [inlined]\\n    [8] copyto!\\\
    n      @ ./array.jl:343 [inlined]\\n    [9] copyto_axcheck!\\n      @ ./abstractarray.jl:1104\
    \ [inlined]\\n   [10] Vector{Int64}(x::"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        return []\n    elseif n == 1\n        return [1]\n\
    \    elseif n == 2\n        return [1, 3]\n    elseif n == 3\n        return [1,\
    \ 3, 2, 8]\n    else\n        arr = [1, 3, 2, 8]\n        n1 = 3\n        n2 =\
    \ 2\n        n3 = 1\n        while length(arr) <= n\n            if n1 % 2 ==\
    \ 0\n                push!(arr, 1 + n1 / 2)\n            else\n              \
    \  push!(arr, arr[n1] + arr[n2] + arr[n3])\n            end\n            n1 +=\
    \ 1\n            n2 += 1\n            n3 += 1\n        end\n        return arr\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmppfcm8cbw.jl:50\\n  Expression: candidate(4)\
    \ == [1, 3, 2, 8, 3]\\n   Evaluated: [1, 3, 2, 8, 6] == [1, 3, 2, 8, 3]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmppfcm8cbw.jl:50 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmppfcm8cbw.jl:48\\ntest set: Test\
    \ Failed at /tmp/tmppfcm8cbw.jl:51\\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\\n   Evaluated: [1, 3, 2, 8, 6, 3] == [1, 3, 2, 8, 3, 15]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmppfcm8cbw.jl:51 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmppfcm8cbw.jl:48\\ntest set: Test\
    \ Failed at /tmp/tmppfcm8cbw.jl:52\\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\\n   Evaluated: [1, 3, 2, 8, 6, 3, 16] == [1, 3, 2, 8, 3, 15, 4]\\\
    nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmppfcm8cbw.jl:52 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmppfcm8cbw.jl:48\\ntest set: Test\
    \ Failed at /tmp/tmppfcm8cbw.jl:53\\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\\n   Evaluated: [1, 3, 2, 8, 6, 3, 16, 4] == [1, 3, 2, 8, 3, 15,\
    \ 4, 24]\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmppfcm8cbw.jl:53 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmppfcm8cbw.jl:48\\ntest s"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 1 passed, 9 failed, 0 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmppfcm8cbw.jl:46\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    tri = Vector{Int64}(n + 1)\n    tri[1] = 1\n    tri[2] = 3\n    tri[3]\
    \ = 2\n    for i in 4:n+1\n        tri[i] = tri[i - 1] + tri[i - 2] + tri[i +\
    \ 1]\n    end\n    return tri\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    tri_vec = zeros(Int64, n + 1)\n    tri_vec[1] = 1\n    tri_vec[2] = 3\n\
    \    tri_vec[3] = 2\n    for i = 4:n+1\n        if i % 2 == 0\n            tri_vec[i]\
    \ = 1 + i / 2\n        else\n            tri_vec[i] = tri_vec[i - 1] + tri_vec[i\
    \ - 2] + tri_vec[i + 1]\n        end\n    end\n    return tri_vec\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2,\
    \ 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3,\
    \ 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpx4_nlp__.jl:36\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 2, 3] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpx4_nlp__.jl:36 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpx4_nlp__.jl:35\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    t = [1, 3, 2]\n    for i = 4:n+1\n        if i % 2 == 0\n            push!(t,\
    \ i / 2)\n        else\n            push!(t, t[i-2] + t[i-1] + t[i-3])\n     \
    \   end\n    end\n    return t\nend\n\"\"\"\n    The QWERTY keyboard that you\
    \ use on your phone or computer\n    is a layout used for Latin-based languages,\
    \ English being \n    one of them. The most frequent used keys get moved to the\
    \ \n    bottom row and are centered on your fingers to reduce \n    overall hand\
    \ movement.\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps1da31z6.jl:28\nin expression starting at\
    \ /tmp/tmps1da31z6.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    tri_vec = zeros(Int64, n + 1)\n    tri_vec[1] = 1\n    tri_vec[2] = 3\n\
    \    for i in 3:n + 1\n        if i % 2 == 0\n            tri_vec[i] = 1 + (i\
    \ / 2)\n        else\n            tri_vec[i] = tri_vec[i - 1] + tri_vec[i - 2]\
    \ + tri_vec[i + 1]\n        end\n    end\n    return tri_vec\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpc39crn6w.jl:35\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 4, 3] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpc39crn6w.jl:35 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpc39crn6w.jl:34\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    res = [1, 3, 2]\n    if n == 1\n        return [1]\n    elseif n == 2\n\
    \        return [1, 3]\n    elseif n == 3\n        return res\n    else\n    \
    \    for i in 4:n + 1\n            if i % 2 == 0\n                push!(res, 1\
    \ + (i / 2))\n            else\n                push!(res, res[end] + res[end\
    \ - 1] + res[end - 2])\n            end\n        end\n        return res\n   \
    \ end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmptrr_rzal.jl:41\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmptrr_rzal.jl:41 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmptrr_rzal.jl:40\\ntest set: Test\
    \ Failed at /tmp/tmptrr_rzal.jl:42\\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\\n   Evaluated: [1, 3, 2, 3, 8] == [1, 3, 2, 8, 3]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmptrr_rzal.jl:42 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmptrr_rzal.jl:40\\ntest set: Test\
    \ Failed at /tmp/tmptrr_rzal.jl:43\\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\\n   Evaluated: [1, 3, 2, 3, 8, 4] == [1, 3, 2, 8, 3, 15]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmptrr_rzal.jl:43 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmptrr_rzal.jl:40\\ntest set: Test\
    \ Failed at /tmp/tmptrr_rzal.jl:44\\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\\n   Evaluated: [1, 3, 2, 3, 8, 4, 15] == [1, 3, 2, 8, 3, 15, 4]\\\
    nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmptrr_rzal.jl:44 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmptrr_rzal.jl:40\\ntest set: Test\
    \ Failed at /tmp/tmptrr_rzal.jl:45\\n "
  stderr: "b'ERROR: LoadError: Some tests did not pass: 0 passed, 10 failed, 0 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmptrr_rzal.jl:38\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        return [1]\n    elseif n == 1\n        return [1,\
    \ 3]\n    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3,\
    \ 2]\n        for i in 3:n\n            if i % 2 == 0\n                push!(v,\
    \ 1 + i / 2)\n            else\n                push!(v, v[i] + v[i - 1] + v[i\
    \ + 1])\n            end\n        end\n        return v\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpjqcdpjak.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:861 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpjqcdpjak.jl:30\\\
    n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpjqcdpjak.jl:41 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpjqcdpjak.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpjqcdpjak.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:861\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpjqcdpjak.jl:30\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpjqcdpjak.jl:42 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpjqcdpjak.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpjqcdpjak.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:861\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpjqcdpjak.jl:30\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpjqcdpjak.jl:43 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpjqcdpjak.jl:40\\ntest set:\
    \ Error During Test at /"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        return [0]\n    elseif n == 1\n        return [1,\
    \ 3]\n    elseif n == 2\n        return [1, 3, 2]\n    elseif n == 3\n       \
    \ return [1, 3, 2, 8]\n    else\n        vec = [1, 3, 2, 8]\n        for i in\
    \ 4:n\n            if i % 2 == 0\n                push!(vec, floor(Int64, 1 +\
    \ i / 2))\n            else\n                push!(vec, vec[i - 1] + vec[i - 2]\
    \ + vec[i + 1])\n            end\n        end\n        return vec\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1,\
    \ 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmptwa54zph.jl:45\\n  Test threw\
    \ exception\\n  Expression: candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError:\
    \ attempt to access 5-element Vector{Int64} at index [6]\\n  Stacktrace:\\n  \
    \ [1] getindex\\n     @ ./array.jl:861 [inlined]\\n   [2] tri(n::Int64)\\n   \
    \  @ Main /tmp/tmptwa54zph.jl:32\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmptwa54zph.jl:45 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmptwa54zph.jl:42\\ntest set:\
    \ Error During Test at /tmp/tmptwa54zph.jl:46\\n  Test threw exception\\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [6]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:861\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmptwa54zph.jl:32\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmptwa54zph.jl:46 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmptwa54zph.jl:42\\ntest set:\
    \ Error During Test at /tmp/tmptwa54zph.jl:47\\n  Test threw exception\\n  Expression:\
    \ candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [6]\\n  Stacktrace:\\n   [1] getindex\\n  \
    \   @ ./array.jl:861 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmptwa54zph.jl:32\\\
    n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmptwa54zph.jl:47 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmptwa54zph.jl:42\\ntest set:\
    \ E"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    s = Vector{Int64}(undef, n + 1)\n    s[1] = 1\n    s[2] = 3\n    s[3]\
    \ = 2\n    if n <= 3\n        return s[1:n]\n    end\n    for i in 4:n\n     \
    \   s[i] = s[i - 1] + s[i - 2] + s[i + 1]\n    end\n    return s\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpgocqr2th.jl:35\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpgocqr2th.jl:35 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpgocqr2th.jl:34\\ntest set: Test\
    \ Failed at /tmp/tmpgocqr2th.jl:36\\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\\n   Evaluated: [1, 3, 2, 5, 0] == [1, 3, 2, 8, 3]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpgocqr2th.jl:36 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpgocqr2th.jl:34\\ntest set: Test\
    \ Failed at /tmp/tmpgocqr2th.jl:37\\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\\n   Evaluated: [1, 3, 2, 47700634979829, 95401269962983, 47700634983152]\
    \ == [1, 3, 2, 8, 3, 15]\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpgocqr2th.jl:37 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpgocqr2th.jl:34\\ntest set: Test\
    \ Failed at /tmp/tmpgocqr2th.jl:38\\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\\n   Evaluated: [1, 3, 2, 47700646138901, 95401291378711, 143101937517612,\
    \ 0] == [1, 3, 2, 8, 3, 15, 4]\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpgocqr2th.jl:38 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    tri_nums = Vector{Int64}(undef, n + 1)\n    for i in 1:n + 1\n       \
    \ if i == 1\n            tri_nums[i] = 1\n        elseif i == 2\n            tri_nums[i]\
    \ = 3\n        elseif i == 3\n            tri_nums[i] = 2\n        elseif i %\
    \ 2 == 0\n            tri_nums[i] = floor(Int64, i / 2)\n        else\n      \
    \      tri_nums[i] = tri_nums[i - 1] + tri_nums[i - 2] + tri_nums[i - 3]\n   \
    \     end\n    end\n    return tri_nums\nend\nusing Test\n\n@testset begin\n\n\
    candidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcizvstu1.jl:39\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 2] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcizvstu1.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcizvstu1.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpcizvstu1.jl:40\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 2, 7] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcizvstu1.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcizvstu1.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpcizvstu1.jl:41\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 2, 7, 3] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcizvstu1.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcizvstu1.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpcizvstu1.jl:42\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 2, 7, 3, 12] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcizvstu1.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcizvstu1.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpcizvstu1.jl:43\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15,"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcizvstu1.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    #your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\
    \t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n + 1)\n    for i = 1:n\n        if i == 1\n   \
    \         result[i] = 3\n        elseif iseven(i)\n            result[i] = 1 +\
    \ i / 2\n        else\n            result[i] = result[i - 1] + result[i - 2] +\
    \ result[i + 1]\n        end\n    end\n    return result\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsrhw67ym.jl:35\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [3, 2, 5, 0] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsrhw67ym.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsrhw67ym.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpsrhw67ym.jl:36\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [3, 2, 5, 3, 0] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsrhw67ym.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsrhw67ym.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpsrhw67ym.jl:37\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [3, 2, 5, 3, 8, 0] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsrhw67ym.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsrhw67ym.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpsrhw67ym.jl:38\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [3, 2, 5, 3, 8, 4, 0] == [1, 3, 2, 8, 3, 15, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsrhw67ym.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsrhw67ym.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpsrhw67ym.jl:39\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 10 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsrhw67ym.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        return Vector(Int64, 1, 2)\n    end\n    if n == 1\n\
    \        return Vector(Int64, 1, 2, 3)\n    end\n    if n == 2\n        return\
    \ Vector(Int64, 1, 2, 3, 4)\n    end\n    i = 0\n    a, b, c = Int64(1), Int64(2),\
    \ Int64(3)\n    r = Vector(Int64, 1, a, b, c)\n    while i < n - 2\n        i\
    \ += 1\n        if i % 2 == 0\n            c = 1 + (i / 2)\n        else\n   \
    \         c = a + b + c\n        end\n        push!(r, c)\n    end\n    return\
    \ r\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpj_7zygpf.jl:46\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  MethodError: no method\
    \ matching (Vector)(::Type{Int64}, ::Int64, ::Int64, ::Int64, ::Int64)\\n  Closest\
    \ candidates are:\\n    (Vector)(!Matched::UndefInitializer, ::Integer) at /shared/centos7/julia/1.7.3/share/julia/base/baseext.jl:32\\\
    n  Stacktrace:\\n   [1] tri(n::Int64)\\n     @ Main /tmp/tmpj_7zygpf.jl:29\\n\
    \   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpj_7zygpf.jl:46 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpj_7zygpf.jl:45\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\
    \t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return []\n    elseif n == 1\n        return [3]\n\
    \    elseif n == 2\n        return [1, 3]\n    elseif n == 3\n        return [1,\
    \ 3, 2]\n    else\n        l = tri(n - 1)\n        push!(l, mod(n, 2) == 0 ? 1\
    \ + Int64(n / 2) : l[end - 2] + l[end - 1] + l[end])\n        return l\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) ==\
    \ [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpwcfi0d_y.jl:37\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpwcfi0d_y.jl:37 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpwcfi0d_y.jl:36\\ntest set: Test\
    \ Failed at /tmp/tmpwcfi0d_y.jl:38\\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\\n   Evaluated: [1, 3, 2, 3] == [1, 3, 2, 8, 3]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpwcfi0d_y.jl:38 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpwcfi0d_y.jl:36\\ntest set: Test\
    \ Failed at /tmp/tmpwcfi0d_y.jl:39\\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\\n   Evaluated: [1, 3, 2, 3, 8] == [1, 3, 2, 8, 3, 15]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpwcfi0d_y.jl:39 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpwcfi0d_y.jl:36\\ntest set: Test\
    \ Failed at /tmp/tmpwcfi0d_y.jl:40\\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\\n   Evaluated: [1, 3, 2, 3, 8, 4] == [1, 3, 2, 8, 3, 15, 4]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpwcfi0d_y.jl:40 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpwcfi0d_y.jl:36\\ntest set: Test\
    \ Failed at /tmp/tmpwcfi0d_y.jl:41\\n  Expressio"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n  d = zeros(Int64, n + 1)\n  d[1] = 1\n  d[2] = 3\n  d[3] = 2\n  for i = 4:n\n\
    \    if i % 2 == 0\n      d[i] = 1 + i / 2\n    else\n      d[i] = d[i - 1] +\
    \ d[i - 2] + d[i + 1]\n    end\n  end\n  return d\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpaju5mhlx.jl:36\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 2, 0] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpaju5mhlx.jl:36 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpaju5mhlx.jl:35\\ntest set: Test\
    \ Failed at /tmp/tmpaju5mhlx.jl:37\\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\\n   Evaluated: [1, 3, 2, 3, 0] == [1, 3, 2, 8, 3]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpaju5mhlx.jl:37 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpaju5mhlx.jl:35\\ntest set: Test\
    \ Failed at /tmp/tmpaju5mhlx.jl:38\\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\\n   Evaluated: [1, 3, 2, 3, 5, 0] == [1, 3, 2, 8, 3, 15]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpaju5mhlx.jl:38 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpaju5mhlx.jl:35\\ntest set: Test\
    \ Failed at /tmp/tmpaju5mhlx.jl:39\\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\\n   Evaluated: [1, 3, 2, 3, 5, 4, 0] == [1, 3, 2, 8, 3, 15, 4]\\\
    nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpaju5mhlx.jl:39 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpaju5mhlx.jl:35\\ntest set: Test\
    \ Failed at /tmp/tmpaju5mhlx.jl:40\\"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    res = [1, 3, 2]\n    for i in 4:n+1\n        if i % 2 == 0\n         \
    \   push!(res,1 + (i / 2))\n        else\n            push!(res,res[end-2] + res[end-1]\
    \ + res[end])\n        end\n    end\n    return res\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmprm3kmmua.jl:33\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 2, 3] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmprm3kmmua.jl:33 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmprm3kmmua.jl:32\\ntest set: Test\
    \ Failed at /tmp/tmprm3kmmua.jl:34\\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\\n   Evaluated: [1, 3, 2, 3, 8] == [1, 3, 2, 8, 3]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmprm3kmmua.jl:34 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmprm3kmmua.jl:32\\ntest set: Test\
    \ Failed at /tmp/tmprm3kmmua.jl:35\\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\\n   Evaluated: [1, 3, 2, 3, 8, 4] == [1, 3, 2, 8, 3, 15]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmprm3kmmua.jl:35 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmprm3kmmua.jl:32\\ntest set: Test\
    \ Failed at /tmp/tmprm3kmmua.jl:36\\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\\n   Evaluated: [1, 3, 2, 3, 8, 4, 15] == [1, 3, 2, 8, 3, 15, 4]\\\
    nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmprm3kmmua.jl:36 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmprm3kmmua.jl:32\\ntest set: Test\
    \ Failed at /tmp/tmprm3kmmua.jl:37"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    x = Int64[]\n    if n > 1\n        x = [1, 3, 2]\n    elseif n > 0\n \
    \       x = [1, 3]\n    elseif n == 0\n        x = [1]\n    end\n    j = 0\n \
    \   while j < n\n        if length(x) == j\n            if j % 2 == 0\n      \
    \          push!(x, 1 + (j / 2))\n            else\n                push!(x, x[j\
    \ - 1] + x[j - 2] + x[j + 1])\n            end\n        end\n        j += 1\n\
    \    end\n    return x\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\
    \t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpb4au3mba.jl:44\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpb4au3mba.jl:44 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpb4au3mba.jl:43\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        arr = [1, 3, 2]\n\
    \        i = 3\n        while i <= n\n            x = arr[end] + arr[end - 1]\
    \ + arr[end - 2]\n            push!(arr, x)\n            i += 1\n        end\n\
    \        return arr\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpqfjxq8ff.jl:40\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 2, 6] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpqfjxq8ff.jl:40 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpqfjxq8ff.jl:39\\ntest set: Test\
    \ Failed at /tmp/tmpqfjxq8ff.jl:41\\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\\n   Evaluated: [1, 3, 2, 6, 11] == [1, 3, 2, 8, 3]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpqfjxq8ff.jl:41 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpqfjxq8ff.jl:39\\ntest set: Test\
    \ Failed at /tmp/tmpqfjxq8ff.jl:42\\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\\n   Evaluated: [1, 3, 2, 6, 11, 19] == [1, 3, 2, 8, 3, 15]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpqfjxq8ff.jl:42 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpqfjxq8ff.jl:39\\ntest set: Test\
    \ Failed at /tmp/tmpqfjxq8ff.jl:43\\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\\n   Evaluated: [1, 3, 2, 6, 11, 19, 36] == [1, 3, 2, 8, 3, 15, 4]\\\
    nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpqfjxq8ff.jl:43 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpqfjxq8ff.jl:39\\ntest set: Test\
    \ Failed at /tmp/tmpqfjxq8ff."
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        return [0]\n    elseif n == 1\n        return [1,\
    \ 3]\n    else\n        tribo = [1, 3, 2]\n        for i = 3:n\n            push!(tribo,\
    \ tribo[i - 1] + tribo[i - 2] + tribo[i - 3])\n        end\n        return tribo\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp5bh6rw01.jl:35\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [0]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:861 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp5bh6rw01.jl:25\\\
    n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp5bh6rw01.jl:35 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp5bh6rw01.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmp5bh6rw01.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [0]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:861\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp5bh6rw01.jl:25\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp5bh6rw01.jl:36 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp5bh6rw01.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmp5bh6rw01.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [0]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:861\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp5bh6rw01.jl:25\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp5bh6rw01.jl:37 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp5bh6rw01.jl:34\\ntest set:\
    \ Error During Test at /"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return Int64[]\n    end\n    if n == 1\n        return\
    \ [3]\n    end\n    tri = zeros(Int64, n+1)\n    tri[1] = 3\n    tri[2] = 1\n\
    \    tri[3] = 2\n    for i = 4:n+1\n        if i % 2 == 0\n            tri[i]\
    \ = 1 + i / 2\n        else\n            tri[i] = tri[i-1] + tri[i-2] + tri[i-3]\n\
    \        end\n    end\n    return tri\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpfteywfxi.jl:42\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [3, 1, 2, 3] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpfteywfxi.jl:42 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpfteywfxi.jl:41\\ntest set: Test\
    \ Failed at /tmp/tmpfteywfxi.jl:43\\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\\n   Evaluated: [3, 1, 2, 3, 6] == [1, 3, 2, 8, 3]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpfteywfxi.jl:43 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpfteywfxi.jl:41\\ntest set: Test\
    \ Failed at /tmp/tmpfteywfxi.jl:44\\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\\n   Evaluated: [3, 1, 2, 3, 6, 4] == [1, 3, 2, 8, 3, 15]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpfteywfxi.jl:44 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpfteywfxi.jl:41\\ntest set: Test\
    \ Failed at /tmp/tmpfteywfxi.jl:45\\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\\n   Evaluated: [3, 1, 2, 3, 6, 4, 13] == [1, 3, 2, 8, 3, 15, 4]\\\
    nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpfteywfxi.jl:45 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpfteywfxi.jl:41\\ntest set: Test\
    \ Failed at /tmp/tmpfteywfxi.jl:46"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 return 0\n    if n == 1 return 3\n    tri_list = zeros(Int64,\
    \ n + 1)\n    tri_list[1] = 1\n    tri_list[2] = 3\n    for i in 3:n + 1\n   \
    \     if i % 2 == 0\n            tri_list[i] = 1 + i / 2\n        else\n     \
    \       tri_list[i] = tri_list[i - 1] + tri_list[i - 2] + tri_list[i + 1]\n  \
    \      end\n    end\n    return tri_list\nend\nusing Test\n\n@testset begin\n\n\
    candidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqp7m10v8.jl:1\nin expression starting at /tmp/tmpqp7m10v8.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n <= 0 \n        return [1]\n    elseif n == 1\n        return [1,\
    \ 3]\n    elseif n == 2\n        return [1, 3, 2]\n    else\n        res = [1,\
    \ 3, 2]\n        for i in 3:n\n            if i % 2 == 0\n                push!(res,\
    \ 1 + i / 2)\n            else\n                push!(res, res[i - 1] + res[i\
    \ - 2] + res[i + 1])\n            end\n        end\n        return res\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) ==\
    \ [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpb1j_qs9d.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:861 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpb1j_qs9d.jl:30\\\
    n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpb1j_qs9d.jl:41 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpb1j_qs9d.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpb1j_qs9d.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:861\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpb1j_qs9d.jl:30\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpb1j_qs9d.jl:42 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpb1j_qs9d.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpb1j_qs9d.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:861\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpb1j_qs9d.jl:30\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpb1j_qs9d.jl:43 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpb1j_qs9d.jl:40\\ntest set:\
    \ Error During Test at /"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    @assert n > 0 \"Please provide a non-negative integer\"\n    n < 4 ? [1,\
    \ 3, 2, 8][1:n] : vcat(tri(n - 1), sum(tri(n - 3:n - 1)))\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpfq7_zidf.jl:26\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpfq7_zidf.jl:26 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpfq7_zidf.jl:25\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    sequence = [1, 3, 2]\n    if n == 0\n        return []\n    elseif n <=\
    \ 3\n        return sequence[1:n]\n    else\n        for i = 4:n\n           \
    \ if mod(i, 2) == 0\n                push!(sequence, div(i, 2))\n            else\n\
    \                push!(sequence, sequence[i - 1] + sequence[i - 2] + sequence[i\
    \ - 3])\n            end\n        end\n        return sequence\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1,\
    \ 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpsspxgi9m.jl:39\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpsspxgi9m.jl:39 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpsspxgi9m.jl:38\\ntest set: Test\
    \ Failed at /tmp/tmpsspxgi9m.jl:40\\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\\n   Evaluated: [1, 3, 2, 2] == [1, 3, 2, 8, 3]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpsspxgi9m.jl:40 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpsspxgi9m.jl:38\\ntest set: Test\
    \ Failed at /tmp/tmpsspxgi9m.jl:41\\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\\n   Evaluated: [1, 3, 2, 2, 7] == [1, 3, 2, 8, 3, 15]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpsspxgi9m.jl:41 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpsspxgi9m.jl:38\\ntest set: Test\
    \ Failed at /tmp/tmpsspxgi9m.jl:42\\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\\n   Evaluated: [1, 3, 2, 2, 7, 3] == [1, 3, 2, 8, 3, 15, 4]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpsspxgi9m.jl:42 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpsspxgi9m.jl:38\\ntest set: Test\
    \ Failed at /tmp/tmpsspxgi9m.jl:43\\n  Expressio"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    \"\"\"Tribonacci sequence of the first n + 1 numbers\n    \"\"\"\n   \
    \ if n == 0 \n        return [1]\n    elseif n == 1\n        return [1, 3]\n \
    \   elseif n == 2\n        return [1, 3, 2]\n    else\n        tri_vec = [1, 3,\
    \ 2]\n        i = 3\n        while i <= n\n            if i % 2 == 0\n       \
    \         tri_vec = [tri_vec..., Int64(i / 2 + 1)]\n            else\n       \
    \         tri_vec = [tri_vec..., tri_vec[end] + tri_vec[end - 1] + tri_vec[end\
    \ - 2]]\n            end\n            i += 1\n        end\n        return tri_vec\n\
    \    end\nend\n# Test\nprintln(\"Basic tests\")\n@test tri(0) == [1]\n@test tri(1)\
    \ == [1, 3]\n@test tri(2) == [1, 3, 2]\n@test tri(3) == [1, 3, 2, 8]\n@test tri(4)\
    \ == [1, 3, 2, 8, 4]\n@test tri(5) == [1, 3, 2, 8, 4, 13]\n@test tri(6) == [1,\
    \ 3, 2, 8, 4, 13, 9]\n@test tri(7) == [1, 3, 2, 8, 4, 13, 9, 7]\n@test tri(8)\
    \ == [1, 3, 2, 8, 4, 13, 9, 7, 12]\n@test tri(9) == [1, 3, 2, 8, 4, 13, 9, 7,\
    \ 12, 10]\n@test tri(10) == [1, 3, 2, 8, 4, 13, 9, 7, 12, 10, 18]\n@test tri(11)\
    \ == [1, 3, 2, 8, 4, 13, 9, 7, 12, 10, 18, 16]\n@test tri(12) == [1, 3, 2, 8,\
    \ 4, 13, 9, 7, 12, 10, 18, 16, 15]\n@test tri(13) == [1, 3, 2, 8, 4, 13, 9, 7\n\
    using Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1,\
    \ 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "Basic tests\n"
  stderr: "ERROR: LoadError: UndefVarError: @test not defined\nin expression starting\
    \ at /tmp/tmppycjfrm1.jl:42\nin expression starting at /tmp/tmppycjfrm1.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    arr = Array{Int64}(n + 1)\n    arr[1] = 1\n    arr[2] = 3\n    arr[3]\
    \ = 2\n    for i in 4:n + 1\n        if i % 2 == 0\n            arr[i] = 1 + i\
    \ / 2\n        else\n            arr[i] = arr[i - 1] + arr[i - 2] + arr[i + 1]\n\
    \        end\n    end\n    return arr\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpk40qsx97.jl:36\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  MethodError: no method\
    \ matching (Array{Int64})(::Int64)\\n  Closest candidates are:\\n    (Array{T})(!Matched::LinearAlgebra.AbstractQ)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/qr.jl:563\\\
    n    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Tuple{Int64,\
    \ Int64}) where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\\\
    n    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\\\
    n    ...\\n  Stacktrace:\\n   [1] tri(n::Int64)\\n     @ Main /tmp/tmpk40qsx97.jl:18\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpk40qsx97.jl:36 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpk40qsx97.jl:35\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        p = [1, 3, 2]\n\
    \        for i in 1:n-2\n            push!(p, p[end-2] + p[end-1] + p[end])\n\
    \        end\n        return p\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpczbtlvd7.jl:37\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 6] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpczbtlvd7.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpczbtlvd7.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpczbtlvd7.jl:38\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 6, 11] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpczbtlvd7.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpczbtlvd7.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpczbtlvd7.jl:39\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 6, 11, 19] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpczbtlvd7.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpczbtlvd7.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpczbtlvd7.jl:40\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 6, 11, 19, 36] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpczbtlvd7.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpczbtlvd7.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpczbtlvd7.jl:41\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpczbtlvd7.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        a = 1\n      \
    \  b = 3\n        c = 2\n        tri = [a, b, c]\n        for i = 1:n-2\n    \
    \        a = tri[end-2]\n            b = tri[end-1]\n            c = tri[end]\n\
    \            if iseven(i)\n                push!(tri, 1 + i / 2)\n           \
    \ else\n                push!(tri, a + b + c)\n            end\n        end\n\
    \        return tri\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpg__cv6mh.jl:47\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 2, 6] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpg__cv6mh.jl:47 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpg__cv6mh.jl:46\\ntest set: Test\
    \ Failed at /tmp/tmpg__cv6mh.jl:48\\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\\n   Evaluated: [1, 3, 2, 6, 2] == [1, 3, 2, 8, 3]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpg__cv6mh.jl:48 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpg__cv6mh.jl:46\\ntest set: Test\
    \ Failed at /tmp/tmpg__cv6mh.jl:49\\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\\n   Evaluated: [1, 3, 2, 6, 2, 10] == [1, 3, 2, 8, 3, 15]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpg__cv6mh.jl:49 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpg__cv6mh.jl:46\\ntest set: Test\
    \ Failed at /tmp/tmpg__cv6mh.jl:50\\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\\n   Evaluated: [1, 3, 2, 6, 2, 10, 3] == [1, 3, 2, 8, 3, 15, 4]\\\
    nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpg__cv6mh.jl:50 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpg__cv6mh.jl:46\\ntest set: Test\
    \ Failed at /tmp/tmpg__cv6mh.jl:5"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 2 passed, 8 failed, 0 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmpg__cv6mh.jl:44\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    # Your code here!\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\
    \t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n < 0 error(\"n cannot be negative\") end\n    if n == 0 return [1]\
    \ end\n    if n == 1 return [1, 3] end\n    if n == 2 return [1, 3, 2] end\n \
    \   a, b, c = [1, 3, 2]\n    for i in 3:n\n        if i % 2 == 0\n           \
    \ push!(a, (1 + i / 2))\n        else\n            push!(a, (a[i] + a[i - 1] +\
    \ a[i + 1]))\n        end\n    end\n    return a\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpxzkuvf4b.jl:37\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError\\n  Stacktrace:\\\
    n   [1] getindex\\n     @ ./number.jl:98 [inlined]\\n   [2] tri(n::Int64)\\n \
    \    @ Main /tmp/tmpxzkuvf4b.jl:27\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpxzkuvf4b.jl:37 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpxzkuvf4b.jl:36\\ntest set:\
    \ Error During Test at /tmp/tmpxzkuvf4b.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./number.jl:98 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpxzkuvf4b.jl:27\\\
    n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpxzkuvf4b.jl:38 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpxzkuvf4b.jl:36\\ntest set:\
    \ Error During Test at /tmp/tmpxzkuvf4b.jl:39\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError\\n  Stacktrace:\\n   [1]\
    \ getindex\\n     @ ./number.jl:98 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main\
    \ /tmp/tmpxzkuvf4b.jl:27\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpxzkuvf4b.jl:39 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpxzkuvf4b.jl:36\\ntest set:\
    \ Error During Test at /tmp/tmpxzkuvf4b.jl:40\\n  Test threw exception\\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\\n  BoundsError\\n  Stacktrace:\\n  \
    \ [1] getindex\\n     @ ./number.jl:9"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    vec = []\n    for i in 1:n+1\n        push!(vec, tri(i))\n    end\n  \
    \  return vec\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    result = [1, 3, 2]\n    for i in 4:n+1\n        result = push!(result,\
    \ tri(i-1) + tri(i-2) + tri(i+1))\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    (last,cur,last_two) = (0,0,0)\n    myList = Int64[]\n    myList = append!(myList,1)\n\
    \    for i in 2:n+1\n        cur = floor(i/2)\n        if i%2 == 0\n         \
    \   cur = 1 + cur\n        else\n            cur = last + last_two + cur\n   \
    \     end\n        last_two = last\n        last = cur\n        append!(myList,cur)\n\
    \    end\n    return myList\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmputtvd1qa.jl:39\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 2, 3, 3] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmputtvd1qa.jl:39 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmputtvd1qa.jl:38\\ntest set: Test\
    \ Failed at /tmp/tmputtvd1qa.jl:40\\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\\n   Evaluated: [1, 2, 3, 3, 8] == [1, 3, 2, 8, 3]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmputtvd1qa.jl:40 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmputtvd1qa.jl:38\\ntest set: Test\
    \ Failed at /tmp/tmputtvd1qa.jl:41\\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\\n   Evaluated: [1, 2, 3, 3, 8, 4] == [1, 3, 2, 8, 3, 15]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmputtvd1qa.jl:41 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmputtvd1qa.jl:38\\ntest set: Test\
    \ Failed at /tmp/tmputtvd1qa.jl:42\\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\\n   Evaluated: [1, 2, 3, 3, 8, 4, 15] == [1, 3, 2, 8, 3, 15, 4]\\\
    nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmputtvd1qa.jl:42 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmputtvd1qa.jl:38\\ntest set: Test\
    \ Failed at /tmp/tmputtvd1qa.jl:43"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    tri = zeros(Int64, n+1)\n    tri[1] = 1\n    tri[2] = 3\n    tri[3] =\
    \ 2\n    for i in 4:n+1\n        if i % 2 == 0\n            tri[i] = 1 + i / 2\n\
    \        else\n            tri[i] = tri[i-1] + tri[i-2] + tri[i-3]\n        end\n\
    \    end\n    return tri\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\
    \t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp6qwnupft.jl:36\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 2, 3] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp6qwnupft.jl:36 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp6qwnupft.jl:35\\ntest set: Test\
    \ Failed at /tmp/tmp6qwnupft.jl:37\\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\\n   Evaluated: [1, 3, 2, 3, 8] == [1, 3, 2, 8, 3]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp6qwnupft.jl:37 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp6qwnupft.jl:35\\ntest set: Test\
    \ Failed at /tmp/tmp6qwnupft.jl:38\\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\\n   Evaluated: [1, 3, 2, 3, 8, 4] == [1, 3, 2, 8, 3, 15]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp6qwnupft.jl:38 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp6qwnupft.jl:35\\ntest set: Test\
    \ Failed at /tmp/tmp6qwnupft.jl:39\\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\\n   Evaluated: [1, 3, 2, 3, 8, 4, 15] == [1, 3, 2, 8, 3, 15, 4]\\\
    nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp6qwnupft.jl:39 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp6qwnupft.jl:35\\ntest set: Test\
    \ Failed at /tmp/tmp6qwnupft.jl:40"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    seq = [3]\n    for i in 1:n\n        val = i % 2 == 0 ? 1 + i / 2 : seq[end\
    \ - 2] + seq[end - 1] + seq[end]\n        push!(seq, val)\n    end\n    return\
    \ seq\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpayiiilrz.jl:30\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 1-element Vector{Int64} at index [-1]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:861 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpayiiilrz.jl:20\\\
    n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpayiiilrz.jl:30 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpayiiilrz.jl:29\\ntest set:\
    \ Error During Test at /tmp/tmpayiiilrz.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 1-element\
    \ Vector{Int64} at index [-1]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:861\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpayiiilrz.jl:20\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpayiiilrz.jl:31 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpayiiilrz.jl:29\\ntest set:\
    \ Error During Test at /tmp/tmpayiiilrz.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 1-element\
    \ Vector{Int64} at index [-1]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:861\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpayiiilrz.jl:20\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpayiiilrz.jl:32 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpayiiilrz.jl:29\\ntest set:\
    \ Error During Test a"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n + 1)\n    result[1] = 1\n    for i in 2:n + 1\n\
    \        result[i] = result[i - 1] + result[i - 2] + (1 + (i - 1) / 2)\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t\
    @test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpyfw_1v20.jl:30\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 4-element Vector{Int64} at index [0]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:861 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpyfw_1v20.jl:21\\\
    n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpyfw_1v20.jl:30 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpyfw_1v20.jl:29\\ntest set:\
    \ Error During Test at /tmp/tmpyfw_1v20.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [0]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:861\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpyfw_1v20.jl:21\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpyfw_1v20.jl:31 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpyfw_1v20.jl:29\\ntest set:\
    \ Error During Test at /tmp/tmpyfw_1v20.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 6-element\
    \ Vector{Int64} at index [0]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:861\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpyfw_1v20.jl:21\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpyfw_1v20.jl:32 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpyfw_1v20.jl:29\\ntest set:\
    \ Error During Test at /"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    elseif n > 2\n        seq =\
    \ [1, 3, 2]\n        for i = 4:n + 1\n            if i % 2 == 0\n            \
    \    push!(seq, i / 2)\n            else\n                push!(seq, seq[i - 1]\
    \ + seq[i - 2] + seq[i - 3])\n            end\n        end\n        return seq\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpp30xiiql.jl:41\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 2, 2] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpp30xiiql.jl:41 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpp30xiiql.jl:40\\ntest set: Test\
    \ Failed at /tmp/tmpp30xiiql.jl:42\\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\\n   Evaluated: [1, 3, 2, 2, 7] == [1, 3, 2, 8, 3]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpp30xiiql.jl:42 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpp30xiiql.jl:40\\ntest set: Test\
    \ Failed at /tmp/tmpp30xiiql.jl:43\\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\\n   Evaluated: [1, 3, 2, 2, 7, 3] == [1, 3, 2, 8, 3, 15]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpp30xiiql.jl:43 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpp30xiiql.jl:40\\ntest set: Test\
    \ Failed at /tmp/tmpp30xiiql.jl:44\\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\\n   Evaluated: [1, 3, 2, 2, 7, 3, 12] == [1, 3, 2, 8, 3, 15, 4]\\\
    nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpp30xiiql.jl:44 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpp30xiiql.jl:40\\ntest set: Test\
    \ Failed at /tmp/tmpp30xiiql.jl:45"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n  if n == 0\n    return 0\n  end\n  res = Vector{Int64}(undef,n+1)\n  res[1]\
    \ = 1\n  res[2] = 3\n  res[3] = 2\n  if n == 3\n    return res\n  end\n  for i\
    \ in 4:n+1\n    if i % 2 == 0\n      res[i] = div(i,2) + 1\n    else\n      res[i]\
    \ = res[i-1] + res[i-2] + res[i-3]\n    end\n  end\n  return res\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpoe165chn.jl:42\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 2, 0] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpoe165chn.jl:42 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpoe165chn.jl:41\\ntest set: Test\
    \ Failed at /tmp/tmpoe165chn.jl:43\\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\\n   Evaluated: [1, 3, 2, 3, 8] == [1, 3, 2, 8, 3]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpoe165chn.jl:43 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpoe165chn.jl:41\\ntest set: Test\
    \ Failed at /tmp/tmpoe165chn.jl:44\\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\\n   Evaluated: [1, 3, 2, 3, 8, 4] == [1, 3, 2, 8, 3, 15]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpoe165chn.jl:44 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpoe165chn.jl:41\\ntest set: Test\
    \ Failed at /tmp/tmpoe165chn.jl:45\\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\\n   Evaluated: [1, 3, 2, 3, 8, 4, 15] == [1, 3, 2, 8, 3, 15, 4]\\\
    nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpoe165chn.jl:45 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpoe165chn.jl:41\\ntest set: Test\
    \ Failed at /tmp/tmpoe165chn.jl:46"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    (n == 1) && return [1, 3]\n    (n == 2) && return [1, 3, 2]\n    tribonacci\
    \ = zeros(Int64, n+1)\n    tribonacci[1] = 1\n    tribonacci[2] = 3\n    tribonacci[3]\
    \ = 2\n    for i in 4:n+1\n        if i % 2 == 0\n            tribonacci[i] =\
    \ 1 + (i/2)\n        else\n            tribonacci[i] = tribonacci[i-1] + tribonacci[i-2]\
    \ + tribonacci[i+1]\n        end\n    end\n    return tribonacci\nend\n\"\"\"\
    You are given a string s. Each character represents a vote for a candidate of\
    \ a \n    popularity contest. If a character is uppercase, then it is a vote for\
    \ a male \n    candidate. If it is lowercase, then it is a vote for a female candidate.\n\
    \    Return the name of the winner of the contest and the percentage of votes\
    \ they \n    received formatted as a string with exactly 2 decimal places.\n \
    \   If there is a tie for the highest number of votes, then return the names of\
    \ \n    all winners in sorted order separated by a comma and a space.\n    Examples:\n\
    \    popular_vote(\"aAbBABacafe\") = \"B, F (50.00%)\"\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpqb0ti5tn.jl:33\nin expression starting at /tmp/tmpqb0ti5tn.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    function recurse(n::Int64)::Int64\n        if n == 1\n            return\
    \ 3\n        elseif n == 2\n            return 2\n        elseif n % 2 == 0\n\
    \            return 1 + n / 2\n        else\n            return recurse(n - 1)\
    \ + recurse(n - 2) + recurse(n + 1)\n        end\n    end\n    return [recurse(i)\
    \ for i = 1:n + 1]\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t\
    @test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpfwelpq9n.jl:36\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [3, 2, 8, 3] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpfwelpq9n.jl:36 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpfwelpq9n.jl:35\\ntest set: Test\
    \ Failed at /tmp/tmpfwelpq9n.jl:37\\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\\n   Evaluated: [3, 2, 8, 3, 15] == [1, 3, 2, 8, 3]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpfwelpq9n.jl:37 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpfwelpq9n.jl:35\\ntest set: Test\
    \ Failed at /tmp/tmpfwelpq9n.jl:38\\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\\n   Evaluated: [3, 2, 8, 3, 15, 4] == [1, 3, 2, 8, 3, 15]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpfwelpq9n.jl:38 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpfwelpq9n.jl:35\\ntest set: Test\
    \ Failed at /tmp/tmpfwelpq9n.jl:39\\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\\n   Evaluated: [3, 2, 8, 3, 15, 4, 24] == [1, 3, 2, 8, 3, 15, 4]\\\
    nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpfwelpq9n.jl:39 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpfwelpq9n.jl:35\\ntest set: Test\
    \ Failed at /tmp/tmpfwelpq9n.jl"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    vec = Vector{Int64}(undef, n + 1)\n    vec[1] = 1\n    vec[2] = 3\n  \
    \  vec[3] = 2\n    for i in 4:n + 1\n        if mod(i, 2) == 0\n            vec[i]\
    \ = i / 2\n        else\n            vec[i] = vec[i - 1] + vec[i - 2] + vec[i\
    \ + 1]\n        end\n    end\n    return vec\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpilx62syn.jl:36\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 2, 2] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpilx62syn.jl:36 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpilx62syn.jl:35\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    n = n + 1 # n + 1 because we need n + 1 elements\n    a = zeros(Int64,\
    \ n)\n    a[1] = 1\n    for i = 2:n\n        a[i] = tri(i - 1) + tri(i - 2) +\
    \ tri(i + 1)\n    end\n    return a\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    # your code\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t\
    @test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    \n    if n == 0\n        return 0\n    end\n    \n    if n == 1\n    \
    \    return [1, 3]\n    end\n    \n    xs = [1, 3, 2]\n    \n    while length(xs)\
    \ <= n\n        if mod(length(xs), 2) == 0\n            append!(xs, (1 + (length(xs)\
    \ / 2)))\n        else\n            append!(xs, (xs[end - 2] + xs[end - 1] + xs[end]))\n\
    \        end\n    end\n    \n    return xs\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpg2tnsfe6.jl:44\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 2, 6] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpg2tnsfe6.jl:44 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpg2tnsfe6.jl:43\\ntest set: Test\
    \ Failed at /tmp/tmpg2tnsfe6.jl:45\\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\\n   Evaluated: [1, 3, 2, 6, 3] == [1, 3, 2, 8, 3]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpg2tnsfe6.jl:45 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpg2tnsfe6.jl:43\\ntest set: Test\
    \ Failed at /tmp/tmpg2tnsfe6.jl:46\\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\\n   Evaluated: [1, 3, 2, 6, 3, 11] == [1, 3, 2, 8, 3, 15]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpg2tnsfe6.jl:46 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpg2tnsfe6.jl:43\\ntest set: Test\
    \ Failed at /tmp/tmpg2tnsfe6.jl:47\\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\\n   Evaluated: [1, 3, 2, 6, 3, 11, 4] == [1, 3, 2, 8, 3, 15, 4]\\\
    nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpg2tnsfe6.jl:47 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpg2tnsfe6.jl:43\\ntest set: Test\
    \ Failed at /tmp/tmpg2tnsfe6.jl:4"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    out = zeros(Int64, n+1)\n    out[1] = 1\n    out[2] = 3\n    out[3] =\
    \ 2\n    if n > 3\n        for i in 4:n+1\n            if i % 2 == 0\n       \
    \         out[i] = 1 + i / 2\n            else\n                out[i] = out[i-1]\
    \ + out[i-2] + out[i-3]\n            end\n        end\n    end\n    return out\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) ==\
    \ [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpaeawuynf.jl:38\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 2, 0] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpaeawuynf.jl:38 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpaeawuynf.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmpaeawuynf.jl:39\\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\\n   Evaluated: [1, 3, 2, 3, 8] == [1, 3, 2, 8, 3]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpaeawuynf.jl:39 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpaeawuynf.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmpaeawuynf.jl:40\\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\\n   Evaluated: [1, 3, 2, 3, 8, 4] == [1, 3, 2, 8, 3, 15]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpaeawuynf.jl:40 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpaeawuynf.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmpaeawuynf.jl:41\\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\\n   Evaluated: [1, 3, 2, 3, 8, 4, 15] == [1, 3, 2, 8, 3, 15, 4]\\\
    nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpaeawuynf.jl:41 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpaeawuynf.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmpaeawuynf.jl:42"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    tri_vec = zeros(Int64, n+1)\n    tri_vec[1] = 1\n    tri_vec[2] = 3\n\
    \    tri_vec[3] = 2\n    for i = 4:n+1\n        if i % 2 == 0\n            tri_vec[i]\
    \ = i / 2\n        else\n            tri_vec[i] = tri_vec[i-1] + tri_vec[i-2]\
    \ + tri_vec[i-3]\n        end\n    end\n    return tri_vec\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmptqckivjf.jl:36\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 2, 2] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmptqckivjf.jl:36 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmptqckivjf.jl:35\\ntest set: Test\
    \ Failed at /tmp/tmptqckivjf.jl:37\\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\\n   Evaluated: [1, 3, 2, 2, 7] == [1, 3, 2, 8, 3]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmptqckivjf.jl:37 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmptqckivjf.jl:35\\ntest set: Test\
    \ Failed at /tmp/tmptqckivjf.jl:38\\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\\n   Evaluated: [1, 3, 2, 2, 7, 3] == [1, 3, 2, 8, 3, 15]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmptqckivjf.jl:38 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmptqckivjf.jl:35\\ntest set: Test\
    \ Failed at /tmp/tmptqckivjf.jl:39\\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\\n   Evaluated: [1, 3, 2, 2, 7, 3, 12] == [1, 3, 2, 8, 3, 15, 4]\\\
    nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmptqckivjf.jl:39 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmptqckivjf.jl:35\\ntest set: Test\
    \ Failed at /tmp/tmptqckivjf.jl:40"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return []\n    elseif n == 1\n        return [3]\n\
    \    elseif n == 2\n        return [1, 3]\n    else\n        x = [1, 3, 2]\n \
    \       for i = 3:n\n            x = [x[1], x[2], x[3], x[1] + x[2] + x[3]]\n\
    \        end\n        return x\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpgzsttdei.jl:37\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 2, 6] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpgzsttdei.jl:37 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpgzsttdei.jl:36\\ntest set: Test\
    \ Failed at /tmp/tmpgzsttdei.jl:38\\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\\n   Evaluated: [1, 3, 2, 6] == [1, 3, 2, 8, 3]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpgzsttdei.jl:38 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpgzsttdei.jl:36\\ntest set: Test\
    \ Failed at /tmp/tmpgzsttdei.jl:39\\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\\n   Evaluated: [1, 3, 2, 6] == [1, 3, 2, 8, 3, 15]\\nStacktrace:\\n\
    \ [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpgzsttdei.jl:39 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpgzsttdei.jl:36\\ntest set: Test\
    \ Failed at /tmp/tmpgzsttdei.jl:40\\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\\n   Evaluated: [1, 3, 2, 6] == [1, 3, 2, 8, 3, 15, 4]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpgzsttdei.jl:40 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpgzsttdei.jl:36\\ntest set: Test\
    \ Failed at /tmp/tmpgzsttdei.jl:41\\n  Expression: can"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    tri(0) = 1\n    tri(1) = 3\n    tri(2) = 2\n    for i in 3:n\n       \
    \ tri(i) = i % 2 == 0 ? 1 + (i / 2) : tri(i - 1) + tri(i - 2) + tri(i + 1)\n \
    \   end\n    return [ tri(i) for i in 0:n ]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"0\" is not a valid function argument name around\
    \ /tmp/tmpgju4j242.jl:18\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgju4j242.jl:1\n\
    in expression starting at /tmp/tmpgju4j242.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    tri = zeros(Int64, n + 1)\n    tri[1] = 1\n    tri[2] = 3\n    tri[3]\
    \ = 2\n    for i in 4:n + 1\n        if i % 2 == 0\n            tri[i] = 1 + i\
    \ / 2\n        else\n            tri[i] = tri[i - 1] + tri[i - 2] + tri[i + 1]\n\
    \        end\n    end\n    return tri\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpfor8ljj1.jl:36\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 2, 3] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpfor8ljj1.jl:36 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpfor8ljj1.jl:35\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    a = [1, 3, 2]\n    for i in 3:n\n        append!(a, i % 2 == 0 ? 1 + (i\
    \ / 2) : a[i - 1] + a[i - 2] + a[i + 1])\n    end\n    return a\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpbkv45d19.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:861 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpbkv45d19.jl:20\\\
    n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpbkv45d19.jl:29 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpbkv45d19.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpbkv45d19.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:861\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpbkv45d19.jl:20\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpbkv45d19.jl:30 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpbkv45d19.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpbkv45d19.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:861\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpbkv45d19.jl:20\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpbkv45d19.jl:31 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpbkv45d19.jl:28\\ntest set:\
    \ Error During Test at /"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 return [1]\n    else \n        tri = [1, 3, 2]\n        if n\
    \ > 2\n            for i = 4:n+1\n                if i % 2 == 0 \n           \
    \         push!(tri, Int64(1 + i / 2))\n                else\n               \
    \     push!(tri, tri[i-2] + tri[i-1] + tri[i+1])\n                end\n      \
    \      end\n        end\n        return tri\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp2cniwhzn.jl:38\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 2, 3] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp2cniwhzn.jl:38 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp2cniwhzn.jl:37\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    output = zeros(Int64, n+1)\n    if n == 0\n        return []\n    elseif\
    \ n == 1\n        return [1]\n    elseif n == 2\n        return [1, 1]\n    else\n\
    \        output[1] = 1\n        output[2] = 1\n        output[3] = 2\n       \
    \ for i in 4:n+1\n            if iseven(i)\n                output[i] = i/2\n\
    \            else\n                output[i] = output[i-1] + output[i-2] + output[i-3]\n\
    \            end\n        end\n    end\n    return output\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpww_dn2t_.jl:44\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 1, 2, 2] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpww_dn2t_.jl:44 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpww_dn2t_.jl:43\\ntest set: Test\
    \ Failed at /tmp/tmpww_dn2t_.jl:45\\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\\n   Evaluated: [1, 1, 2, 2, 5] == [1, 3, 2, 8, 3]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpww_dn2t_.jl:45 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpww_dn2t_.jl:43\\ntest set: Test\
    \ Failed at /tmp/tmpww_dn2t_.jl:46\\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\\n   Evaluated: [1, 1, 2, 2, 5, 3] == [1, 3, 2, 8, 3, 15]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpww_dn2t_.jl:46 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpww_dn2t_.jl:43\\ntest set: Test\
    \ Failed at /tmp/tmpww_dn2t_.jl:47\\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\\n   Evaluated: [1, 1, 2, 2, 5, 3, 10] == [1, 3, 2, 8, 3, 15, 4]\\\
    nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpww_dn2t_.jl:47 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpww_dn2t_.jl:43\\ntest set: Test\
    \ Failed at /tmp/tmpww_dn2t_.jl:48"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    result = []\n    for i = 1:n+1\n        if i == 1\n            push!(result,\
    \ 3)\n        elseif i == 2\n            push!(result, 1)\n        elseif i ==\
    \ 3\n            push!(result, 2)\n        elseif i % 2 == 0\n            push!(result,\
    \ Int64(1 + i / 2))\n        else\n            push!(result, result[i-1] + result[i-2]\
    \ + result[i-3])\n        end\n    end\n    return result\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpl2dzpipc.jl:39\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [3, 1, 2, 3] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpl2dzpipc.jl:39 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpl2dzpipc.jl:38\\ntest set: Test\
    \ Failed at /tmp/tmpl2dzpipc.jl:40\\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\\n   Evaluated: [3, 1, 2, 3, 6] == [1, 3, 2, 8, 3]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpl2dzpipc.jl:40 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpl2dzpipc.jl:38\\ntest set: Test\
    \ Failed at /tmp/tmpl2dzpipc.jl:41\\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\\n   Evaluated: [3, 1, 2, 3, 6, 4] == [1, 3, 2, 8, 3, 15]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpl2dzpipc.jl:41 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpl2dzpipc.jl:38\\ntest set: Test\
    \ Failed at /tmp/tmpl2dzpipc.jl:42\\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\\n   Evaluated: [3, 1, 2, 3, 6, 4, 13] == [1, 3, 2, 8, 3, 15, 4]\\\
    nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpl2dzpipc.jl:42 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpl2dzpipc.jl:38\\ntest set: Test\
    \ Failed at /tmp/tmpl2dzpipc.jl:43"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        seq = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(seq, 1\
    \ + i / 2)\n            else\n                push!(seq, seq[i - 1] + seq[i -\
    \ 2] + seq[i + 1])\n            end\n        end\n        return seq\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) ==\
    \ [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp_vuvzst1.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:861 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp_vuvzst1.jl:30\\\
    n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp_vuvzst1.jl:41 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp_vuvzst1.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmp_vuvzst1.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:861\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp_vuvzst1.jl:30\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp_vuvzst1.jl:42 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp_vuvzst1.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmp_vuvzst1.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:861\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp_vuvzst1.jl:30\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp_vuvzst1.jl:43 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp_vuvzst1.jl:40\\ntest set:\
    \ Error During Test at /"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    tri(n::Int64) = [1, 3, 2, 8][1:n+1]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    tri1 = zeros(Int64, n + 1)\n    tri1[1] = 1\n    for i = 2:n + 1\n   \
    \     if i == 2\n            tri1[i] = 2\n        elseif i == 3\n            tri1[i]\
    \ = 3\n        else\n            tri1[i] = tri1[i - 1] + tri1[i - 2] + tri1[i\
    \ - 3]\n        end\n    end\n    return tri1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp8ujv2lhy.jl:36\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 2, 3, 6] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp8ujv2lhy.jl:36 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp8ujv2lhy.jl:35\\ntest set: Test\
    \ Failed at /tmp/tmp8ujv2lhy.jl:37\\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\\n   Evaluated: [1, 2, 3, 6, 11] == [1, 3, 2, 8, 3]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp8ujv2lhy.jl:37 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp8ujv2lhy.jl:35\\ntest set: Test\
    \ Failed at /tmp/tmp8ujv2lhy.jl:38\\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\\n   Evaluated: [1, 2, 3, 6, 11, 20] == [1, 3, 2, 8, 3, 15]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp8ujv2lhy.jl:38 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp8ujv2lhy.jl:35\\ntest set: Test\
    \ Failed at /tmp/tmp8ujv2lhy.jl:39\\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\\n   Evaluated: [1, 2, 3, 6, 11, 20, 37] == [1, 3, 2, 8, 3, 15, 4]\\\
    nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp8ujv2lhy.jl:39 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp8ujv2lhy.jl:35\\ntest set: Test\
    \ Failed at /tmp/tmp8ujv2lhy."
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    a = [1, 3, 2]\n    for i = 4:n+1\n        if i % 2 == 0\n            push!(a,\
    \ div(i, 2))\n        else\n            push!(a, a[i-1] + a[i-2] + a[i-3])\n \
    \       end\n    end\n    return a\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpha_mlmop.jl:33\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 2, 2] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpha_mlmop.jl:33 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpha_mlmop.jl:32\\ntest set: Test\
    \ Failed at /tmp/tmpha_mlmop.jl:34\\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\\n   Evaluated: [1, 3, 2, 2, 7] == [1, 3, 2, 8, 3]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpha_mlmop.jl:34 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpha_mlmop.jl:32\\ntest set: Test\
    \ Failed at /tmp/tmpha_mlmop.jl:35\\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\\n   Evaluated: [1, 3, 2, 2, 7, 3] == [1, 3, 2, 8, 3, 15]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpha_mlmop.jl:35 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpha_mlmop.jl:32\\ntest set: Test\
    \ Failed at /tmp/tmpha_mlmop.jl:36\\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\\n   Evaluated: [1, 3, 2, 2, 7, 3, 12] == [1, 3, 2, 8, 3, 15, 4]\\\
    nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpha_mlmop.jl:36 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpha_mlmop.jl:32\\ntest set: Test\
    \ Failed at /tmp/tmpha_mlmop.jl:37"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 0 passed, 10 failed, 0 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmpha_mlmop.jl:30\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    first_value = 1\n    second_value = 3\n    third_value = 2\n    result\
    \ = [first_value, second_value, third_value]\n    for i in 4:n + 1\n        if\
    \ i % 2 == 0\n            result = push!(result, result[i - 1] + (i / 2))\n  \
    \      else\n            result = push!(result, result[i - 1] + result[i - 2]\
    \ + result[i - 3])\n        end\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpeyxkw2ar.jl:36\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 4] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeyxkw2ar.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeyxkw2ar.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpeyxkw2ar.jl:37\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 4, 9] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeyxkw2ar.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeyxkw2ar.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpeyxkw2ar.jl:38\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 4, 9, 12] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeyxkw2ar.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeyxkw2ar.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpeyxkw2ar.jl:39\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 4, 9, 12, 25] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeyxkw2ar.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeyxkw2ar.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpeyxkw2ar.jl:40\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 1"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 10 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeyxkw2ar.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return []\n    elseif n == 1\n        return [3]\n\
    \    elseif n == 2\n        return [1, 3]\n    else\n        v = [1, 3, 2]\n \
    \       while length(v) != n + 1\n            if mod(length(v), 2) == 0\n    \
    \            push!(v, 1 + (length(v) / 2))\n            else\n               \
    \ push!(v, v[end] + v[end - 1] + v[end - 2])\n            end\n        end\n \
    \       return v\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\
    \t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpitdyv_kz.jl:41\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 2, 6] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpitdyv_kz.jl:41 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpitdyv_kz.jl:40\\ntest set: Test\
    \ Failed at /tmp/tmpitdyv_kz.jl:42\\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\\n   Evaluated: [1, 3, 2, 6, 3] == [1, 3, 2, 8, 3]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpitdyv_kz.jl:42 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpitdyv_kz.jl:40\\ntest set: Test\
    \ Failed at /tmp/tmpitdyv_kz.jl:43\\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\\n   Evaluated: [1, 3, 2, 6, 3, 11] == [1, 3, 2, 8, 3, 15]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpitdyv_kz.jl:43 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpitdyv_kz.jl:40\\ntest set: Test\
    \ Failed at /tmp/tmpitdyv_kz.jl:44\\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\\n   Evaluated: [1, 3, 2, 6, 3, 11, 4] == [1, 3, 2, 8, 3, 15, 4]\\\
    nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpitdyv_kz.jl:44 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpitdyv_kz.jl:40\\ntest set: Test\
    \ Failed at /tmp/tmpitdyv_kz.jl:4"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        return [1]\n    elseif n == 1\n        return [1,\
    \ 3]\n    elseif n == 2\n        return [1, 3, 2]\n    else\n        x = tri(n\
    \ - 1)\n        if n % 2 == 0\n            append!(x, 1 + n / 2)\n        else\n\
    \            append!(x, x[end] + x[end - 1] + x[end - 2])\n        end\n     \
    \   return x\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\
    \t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpoelq8g3x.jl:39\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 6] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoelq8g3x.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoelq8g3x.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpoelq8g3x.jl:40\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 6, 3] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoelq8g3x.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoelq8g3x.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpoelq8g3x.jl:41\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 6, 3, 11] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoelq8g3x.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoelq8g3x.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpoelq8g3x.jl:42\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 6, 3, 11, 4] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoelq8g3x.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoelq8g3x.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpoelq8g3x.jl:43\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoelq8g3x.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    # n should be a non-negative integer.\n    if n < 0\n        throw(DomainError())\n\
    \    end\n    if n == 0\n        return Vector{Int64}([])\n    end\n    function\
    \ tri_rec(n::Int64)::Int64\n        if n == 1\n            return 3\n        elseif\
    \ n == 2\n            return 1\n        elseif iseven(n)\n            return 1\
    \ + n / 2\n        else\n            return tri_rec(n - 1) + tri_rec(n - 2) +\
    \ tri_rec(n + 1)\n        end\n    end\n    return [tri_rec(i) for i in 1:n]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) ==\
    \ [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpczqk9qc1.jl:43\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [3, 1, 7] == [1, 3, 2, 8]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpczqk9qc1.jl:43 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpczqk9qc1.jl:42\\ntest set: Test\
    \ Failed at /tmp/tmpczqk9qc1.jl:44\\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\\n   Evaluated: [3, 1, 7, 3] == [1, 3, 2, 8, 3]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpczqk9qc1.jl:44 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpczqk9qc1.jl:42\\ntest set: Test\
    \ Failed at /tmp/tmpczqk9qc1.jl:45\\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\\n   Evaluated: [3, 1, 7, 3, 14] == [1, 3, 2, 8, 3, 15]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpczqk9qc1.jl:45 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpczqk9qc1.jl:42\\ntest set: Test\
    \ Failed at /tmp/tmpczqk9qc1.jl:46\\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\\n   Evaluated: [3, 1, 7, 3, 14, 4] == [1, 3, 2, 8, 3, 15, 4]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpczqk9qc1.jl:46 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpczqk9qc1.jl:42\\ntest set: Test\
    \ Failed at /tmp/tmpczqk9qc1.jl:47\\n  Express"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        return []\n    elseif n == 1\n        return [1]\n\
    \    elseif n == 2\n        return [1, 1]\n    elseif n == 3\n        return [1,\
    \ 1, 1]\n    else\n        _tri = [1, 1, 1]\n        for i in 4:n+1\n        \
    \    _tri = [_tri..., _tri[end] + _tri[end-1] + _tri[end-2]]\n        end\n  \
    \      return _tri\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8m2jr4fx.jl:39\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 1, 1] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8m2jr4fx.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8m2jr4fx.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp8m2jr4fx.jl:40\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 1, 1, 3, 5] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8m2jr4fx.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8m2jr4fx.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp8m2jr4fx.jl:41\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 1, 1, 3, 5, 9] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8m2jr4fx.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8m2jr4fx.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp8m2jr4fx.jl:42\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 1, 1, 3, 5, 9, 17] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8m2jr4fx.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8m2jr4fx.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp8m2jr4fx.jl:43\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4,"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 10 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8m2jr4fx.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    result = [1, 3, 2]\n    for i in 1:n-2\n        push!(result, (i % 2 ==\
    \ 0 ? 1 + i / 2 : result[end] + result[end-1] + result[end-2]))\n    end\n   \
    \ return result\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqvqv0dro.jl:29\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 6] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqvqv0dro.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqvqv0dro.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpqvqv0dro.jl:30\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 6, 2] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqvqv0dro.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqvqv0dro.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpqvqv0dro.jl:31\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 6, 2, 10] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqvqv0dro.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqvqv0dro.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpqvqv0dro.jl:32\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 6, 2, 10, 3] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqvqv0dro.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqvqv0dro.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpqvqv0dro.jl:33\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 10 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqvqv0dro.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    \n    # Create vector to store sequence, starting with 1, 3, 2\n    tribonacci\
    \ = [1, 3, 2]\n    \n    # Add to vector until the length is n + 1\n    while\
    \ length(tribonacci) < n + 1\n        # If the last element is even\n        if\
    \ tribonacci[end] % 2 == 0\n            push!(tribonacci, 1 + tribonacci[end]\
    \ / 2)\n        # If the last element is odd\n        else\n            push!(tribonacci,\
    \ tribonacci[end - 1] + tribonacci[end - 2] + tribonacci[end + 1])\n        end\n\
    \    end\n    \n    return tribonacci\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8wdrazu7.jl:40\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 2] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8wdrazu7.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8wdrazu7.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp8wdrazu7.jl:41\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 2, 2] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8wdrazu7.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8wdrazu7.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp8wdrazu7.jl:42\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 2, 2, 2] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8wdrazu7.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8wdrazu7.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp8wdrazu7.jl:43\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 2, 2, 2, 2] == [1, 3, 2, 8, 3, 15, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8wdrazu7.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8wdrazu7.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp8wdrazu7.jl:44\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 10 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8wdrazu7.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    #Define tribonacci sequence\n    tribonacci(x::Int64) = x < 3 ? x : tribonacci(x-1)\
    \ + tribonacci(x-2) + tribonacci(x-3)\n    #Create vector of Tribonacci terms\n\
    \    return [tribonacci(i) for i in 0:n]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_xeepmeq.jl:28\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [0, 1, 2, 3] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_xeepmeq.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_xeepmeq.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp_xeepmeq.jl:29\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [0, 1, 2, 3, 6] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_xeepmeq.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_xeepmeq.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp_xeepmeq.jl:30\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [0, 1, 2, 3, 6, 11] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_xeepmeq.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_xeepmeq.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp_xeepmeq.jl:31\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [0, 1, 2, 3, 6, 11, 20] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_xeepmeq.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_xeepmeq.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp_xeepmeq.jl:32\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 1"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 10 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_xeepmeq.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    a = fill(0, n+1)\n    a[1] = 1\n    a[2] = 3\n    a[3] = 2\n    if n <\
    \ 3\n        return a[1:n]\n    end\n    i = 4\n    while i <= n+1\n        if\
    \ i % 2 == 0\n            a[i] = 1 + div(i, 2)\n        else\n            a[i]\
    \ = a[i-1] + a[i-2] + a[i-3]\n        end\n        i += 1\n    end\n    return\
    \ a\nend\ntri(3)\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpc57swpe6.jl:42\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 2, 3] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpc57swpe6.jl:42 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpc57swpe6.jl:41\\ntest set: Test\
    \ Failed at /tmp/tmpc57swpe6.jl:43\\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\\n   Evaluated: [1, 3, 2, 3, 8] == [1, 3, 2, 8, 3]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpc57swpe6.jl:43 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpc57swpe6.jl:41\\ntest set: Test\
    \ Failed at /tmp/tmpc57swpe6.jl:44\\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\\n   Evaluated: [1, 3, 2, 3, 8, 4] == [1, 3, 2, 8, 3, 15]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpc57swpe6.jl:44 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpc57swpe6.jl:41\\ntest set: Test\
    \ Failed at /tmp/tmpc57swpe6.jl:45\\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\\n   Evaluated: [1, 3, 2, 3, 8, 4, 15] == [1, 3, 2, 8, 3, 15, 4]\\\
    nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpc57swpe6.jl:45 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpc57swpe6.jl:41\\ntest set: Test\
    \ Failed at /tmp/tmpc57swpe6.jl:46"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    @assert n >= 0\n    res = zeros(Int64, n + 1)\n    res[1] = 1\n    res[2]\
    \ = 3\n    res[3] = 2\n    for i = 4:n + 1\n        res[i] = (i % 2 == 0) ? res[i]\
    \ = 1 + (i / 2) : res[i] = res[i - 1] + res[i - 2] + res[i + 1]\n    end\n   \
    \ return res\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpw1cejkob.jl:33\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 2, 3] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpw1cejkob.jl:33 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpw1cejkob.jl:32\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return 1\n    elseif n % 2 == 0\n        return 1 +\
    \ n / 2\n    else\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) ==\
    \ [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpawbpdz0l.jl:31\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  MethodError: Cannot\
    \ `convert` an object of type Float64 to an object of type Vector{Int64}\\n  Closest\
    \ candidates are:\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\\\
    n    ...\\n  Stacktrace:\\n   [1] tri(n::Int64)\\n     @ Main /tmp/tmpawbpdz0l.jl:21\\\
    n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpawbpdz0l.jl:23\\n   [3] macro expansion\\\
    n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpawbpdz0l.jl:31 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpawbpdz0l.jl:30\\ntest set:\
    \ Error During Test at /tmp/tmpawbpdz0l.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  MethodError: Cannot `convert` an object\
    \ of type Float64 to an object of type Vector{Int64}\\n  Closest candidates are:\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\\\
    n    ...\\n  Stacktrace:\\n   [1] tri(n::Int64)\\n     @ Main /tmp/tmpawbpdz0l.jl:21\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    res = zeros(Int64, n+1)\n    res[1] = 1\n    for i in 1:n\n        if\
    \ i%2==0\n            res[i+1] = res[i] + floor(i/2) + 1\n        else\n     \
    \       res[i+1] = res[i] + res[i-1] + res[i+1-2]\n        end\n    end\n    return\
    \ res\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp916oolxb.jl:34\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 4-element Vector{Int64} at index [0]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:861 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp916oolxb.jl:24\\\
    n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp916oolxb.jl:34 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp916oolxb.jl:33\\ntest set:\
    \ Error During Test at /tmp/tmp916oolxb.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [0]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:861\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp916oolxb.jl:24\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp916oolxb.jl:35 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp916oolxb.jl:33\\ntest set:\
    \ Error During Test at /tmp/tmp916oolxb.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 6-element\
    \ Vector{Int64} at index [0]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:861\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp916oolxb.jl:24\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp916oolxb.jl:36 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp916oolxb.jl:33\\ntest set:\
    \ Error During Test at /"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    x = zeros(Int64, n+1)\n    for i in 1:n+1\n        if i == 1\n       \
    \     x[i] = 1\n        elseif i == 2\n            x[i] = 3\n        elseif i\
    \ == 3\n            x[i] = 2\n        elseif i % 2 == 0\n            x[i] = 1\
    \ + i / 2\n        else\n            x[i] = x[i-1] + x[i-2] + x[i-3]\n       \
    \ end\n    end\n    return x\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmska6z9q.jl:39\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 3] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmska6z9q.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmska6z9q.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpmska6z9q.jl:40\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 3, 8] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmska6z9q.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmska6z9q.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpmska6z9q.jl:41\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 3, 8, 4] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmska6z9q.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmska6z9q.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpmska6z9q.jl:42\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 3, 8, 4, 15] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmska6z9q.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmska6z9q.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpmska6z9q.jl:43\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15,"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmska6z9q.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    elseif n > 2\n        list =\
    \ [1, 3, 2]\n        for i in 3:n\n            if i % 2 == 0\n               \
    \ push!(list, i / 2)\n            else\n                push!(list, list[i - 1]\
    \ + list[i - 2] + list[i + 1])\n            end\n        end\n        return list\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmptiluzgck.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:861 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmptiluzgck.jl:30\\\
    n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmptiluzgck.jl:41 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmptiluzgck.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmptiluzgck.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:861\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmptiluzgck.jl:30\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmptiluzgck.jl:42 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmptiluzgck.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmptiluzgck.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:861\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmptiluzgck.jl:30\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmptiluzgck.jl:43 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmptiluzgck.jl:40\\ntest set:\
    \ Error During Test at /"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    v = zeros(Int64, n + 1)\n    v[1] = 1\n    v[2] = 3\n    v[3] = 2\n  \
    \  for i = 4:n + 1\n        if i % 2 == 0\n            v[i] = 1 + i / 2\n    \
    \    else\n            v[i] = v[i - 1] + v[i - 2] + v[i + 1]\n        end\n  \
    \  end\n    return v\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t\
    @test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp51hphl1m.jl:36\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 2, 3] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp51hphl1m.jl:36 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp51hphl1m.jl:35\\ntest set: Error\
    \ During Test at /tmp/tmp51hphl1m.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [6]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:861\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp51hphl1m.jl:26\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp51hphl1m.jl:37 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp51hphl1m.jl:35\\ntest set:\
    \ Test Failed at /tmp/tmp51hphl1m.jl:38\\n  Expression: candidate(5) == [1, 3,\
    \ 2, 8, 3, 15]\\n   Evaluated: [1, 3, 2, 3, 5, 4] == [1, 3, 2, 8, 3, 15]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp51hphl1m.jl:38 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp51hphl1m.jl:35\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    tri_arr = [1, 3, 2]\n    if n <= 2\n        return tri_arr[1:n+1]\n  \
    \  end\n    for i in 3:n\n        push!(tri_arr, (tri_arr[i-1] + tri_arr[i-2]\
    \ + tri_arr[i+1]))\n    end\n    return tri_arr\nend\nprintln(tri(2))\nprintln(tri(3))\n\
    println(tri(4))\nprintln(tri(5))\nprintln(tri(6))\nusing Test\n\n@testset begin\n\
    \ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "[1, 3, 2]\n"
  stderr: "ERROR: LoadError: BoundsError: attempt to access 3-element Vector{Int64}\
    \ at index [4]\nStacktrace:\n [1] getindex\n   @ ./array.jl:861 [inlined]\n [2]\
    \ tri(n::Int64)\n   @ Main /tmp/tmpepglaafd.jl:23\n [3] top-level scope\n   @\
    \ /tmp/tmpepglaafd.jl:28\nin expression starting at /tmp/tmpepglaafd.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 return [1] end\n    if n == 1 return [1, 3] end\n    if n ==\
    \ 2 return [1, 3, 2] end\n    L = [1, 3, 2]\n    for i in 3:n\n        push!(L,\
    \ L[i-1] + L[i-2] + L[i+1])\n    end\n    return L\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpnggvdvac.jl:32\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpnggvdvac.jl:23\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpnggvdvac.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpnggvdvac.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpnggvdvac.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpnggvdvac.jl:23\n   [3]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpnggvdvac.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpnggvdvac.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpnggvdvac.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpnggvdvac.jl:23\n   [3]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpnggvdvac.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpnggvdvac.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpnggvdvac.jl:35\n  Test threw exception\n  Expres"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnggvdvac.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        vector = [1, 3,\
    \ 2]\n        for i = 4:n + 1\n            if i % 2 == 0\n                push!(vector,\
    \ Int64(1 + i / 2))\n            else\n                push!(vector, vector[i\
    \ - 1] + vector[i - 2] + vector[i - 3])\n            end\n        end\n      \
    \  return vector\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\
    \t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpduir18wt.jl:41\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 3] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpduir18wt.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpduir18wt.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpduir18wt.jl:42\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 3, 8] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpduir18wt.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpduir18wt.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpduir18wt.jl:43\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 3, 8, 4] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpduir18wt.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpduir18wt.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpduir18wt.jl:44\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 3, 8, 4, 15] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpduir18wt.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpduir18wt.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpduir18wt.jl:45\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15,"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpduir18wt.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [0]\n    elseif n == 1\n        return [0,1]\n\
    \    elseif n == 2\n        return [0,1,1]\n    else\n        v = tri(n-1)\n \
    \       append!(v, v[end] + v[end-1] + v[end-2])\n        return v\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) ==\
    \ [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4hst0glh.jl:35\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [0, 1, 1, 2] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4hst0glh.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4hst0glh.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp4hst0glh.jl:36\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [0, 1, 1, 2, 4] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4hst0glh.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4hst0glh.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp4hst0glh.jl:37\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [0, 1, 1, 2, 4, 7] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4hst0glh.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4hst0glh.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp4hst0glh.jl:38\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [0, 1, 1, 2, 4, 7, 13] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4hst0glh.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4hst0glh.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp4hst0glh.jl:39\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15,"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 10 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4hst0glh.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n < 1\n        print(\"The number should be positive!\")\n        return\n\
    \    end\n    l = zeros(Int64, n+1)\n    l[1] = 1\n    l[2] = 3\n    l[3] = 2\n\
    \    for i = 4:n+1\n        if i % 2 == 0\n            l[i] = 1 + i / 2\n    \
    \    else\n            l[i] = l[i-1] + l[i-2] + l[i-3]\n        end\n    end\n\
    \    return l\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmplmg_t667.jl:40\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 2, 3] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmplmg_t667.jl:40 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmplmg_t667.jl:39\\ntest set: Test\
    \ Failed at /tmp/tmplmg_t667.jl:41\\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\\n   Evaluated: [1, 3, 2, 3, 8] == [1, 3, 2, 8, 3]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmplmg_t667.jl:41 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmplmg_t667.jl:39\\ntest set: Test\
    \ Failed at /tmp/tmplmg_t667.jl:42\\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\\n   Evaluated: [1, 3, 2, 3, 8, 4] == [1, 3, 2, 8, 3, 15]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmplmg_t667.jl:42 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmplmg_t667.jl:39\\ntest set: Test\
    \ Failed at /tmp/tmplmg_t667.jl:43\\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\\n   Evaluated: [1, 3, 2, 3, 8, 4, 15] == [1, 3, 2, 8, 3, 15, 4]\\\
    nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmplmg_t667.jl:43 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmplmg_t667.jl:39\\ntest set: Test\
    \ Failed at /tmp/tmplmg_t667.jl:44"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    res = zeros(Int64, n + 1)\n    res[1] = 1\n    res[2] = 3\n    res[3]\
    \ = 2\n    for i in 4:n + 1\n        res[i] = res[i - 1] + res[i - 2] + res[i\
    \ - 3]\n    end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxyrj6244.jl:32\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 6] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxyrj6244.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxyrj6244.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpxyrj6244.jl:33\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 6, 11] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxyrj6244.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxyrj6244.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpxyrj6244.jl:34\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 6, 11, 19] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxyrj6244.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxyrj6244.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpxyrj6244.jl:35\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 6, 11, 19, 36] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxyrj6244.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxyrj6244.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpxyrj6244.jl:36\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 8 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxyrj6244.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    start = [1, 3, 2]\n    if n <= 3 \n        return start[1:n+1]\n    end\n\
    \    while n >= 3\n        x = 1 + (n / 2)\n        n -= 1\n        if n % 2 ==\
    \ 0\n            push!(start, x)\n        else\n            push!(start, start[end]\
    \ + start[end-1] + start[end-2])\n        end\n    end\n    return start\nend\n\
    using Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1,\
    \ 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpywtfslgf.jl:38\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [1:4]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867\
    \ [inlined]\n   [4] tri(n::Int64)\n     @ Main /tmp/tmpywtfslgf.jl:20\n   [5]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpywtfslgf.jl:38 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpywtfslgf.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpywtfslgf.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  InexactError: Int64(2.5)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7\
    \ [inlined]\n   [3] push!\n     @ ./array.jl:994 [inlined]\n   [4] tri(n::Int64)\n\
    \     @ Main /tmp/tmpywtfslgf.jl:26\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpywtfslgf.jl:39 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpywtfslgf.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpywtfslgf.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  InexactError: Int64(3.5)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7\
    \ [inlined]\n   [3] push!\n     @ ./array.jl:994 [inlined]\n   [4] tri(n::Int64)\n\
    \     @ Main /tmp/tmpywtfslgf.jl:26\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpywtfslgf.jl:40 [inli"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpywtfslgf.jl:35\n"
  exit_code: 1
  status: SyntaxError
