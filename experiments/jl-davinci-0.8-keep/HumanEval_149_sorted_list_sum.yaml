name: HumanEval_149_sorted_list_sum
language: jl
prompt: "\"\"\"Write a function that accepts a list of strings as a parameter,\n \
  \   deletes the strings that have odd lengths from it,\n    and returns the resulted\
  \ list with a sorted order,\n    The list is always a list of strings and never\
  \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
  \ list should be ascending by length of each word, and you\n    should return the\
  \ list sorted by that rule.\n    If two words have the same length, sort the list\
  \ alphabetically.\n    The function should return a list of strings in sorted order.\n\
  \    You may assume that all words will have the same length.\n    For example:\n\
  \    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"\
  ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
  aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\"\
  , \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"\
  c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"abcd\"\
  , \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"au\"])\
  \ == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"c\", \"\
  c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\", \"dd\"\
  , \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
completions: []
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
