name: HumanEval_158_find_max
language: jl
prompt: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
  \ different words. Return the word with maximum number\n    of unique characters.\
  \ If multiple strings have maximum number of unique\n    characters, return the\
  \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
  of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) ==\
  \ \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\
  \"\"\nfunction find_max(words::Vector{String})::String \n"
tests: "using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
  name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
  , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"\
  aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
  play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
  we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"\
  are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\"\
  , \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\
  \t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
completions: ["    #chars::Vector{Vector{Bool}} = zeros(Bool, length(words), 26)\n\
    \    #for (i, word) in enumerate(words)\n    #    for char in word\n    #    \
    \    chars[i, findin(alphabet, char)] = true\n    #    end\n    #end\n    #maxchar\
    \ = findmax(count(chars, 1))\n    #maxchar = findmax(count(map(chars, (i) -> count(chars[i])),\
    \ 1))\n    maxchar = findmax(count(map(words, (word) -> unique(word)), 1))\n \
    \   return words[maxchar]\nend", "    max_word = \"\"\n    num_unique_char = 0\n\
    \    for word in words\n        num_unique_char_word = length(unique(word))\n\
    \        if num_unique_char_word > num_unique_char\n            max_word = word\n\
    \            num_unique_char = num_unique_char_word\n        end\n    end\n  \
    \  return max_word\nend", "    max_unique_chars = -1\n    ans = \"\"\n    for\
    \ word in words\n        unique_chars = count(x -> !(x in ans), word)\n      \
    \  if unique_chars > max_unique_chars\n            max_unique_chars = unique_chars\n\
    \            ans = word\n        end\n    end\n    return ans\nend", "    \"\"\
    \"Find the word with maximum number of unique characters.\n    \n    Keyword arguments:\n\
    \    words -- a list of strings\n    \"\"\"\n    return max_word(words)\nend",
  "    #TODO: Implement the function\n    max_unique = 0\n    max_string = \"\"\n\
    \    for word in words\n        if length(unique(word)) > max_unique\n       \
    \     max_unique = length(unique(word))\n            max_string = word\n     \
    \   end\n    end\n    return max_string\nend", "    # Your code goes here\n  \
    \  maxind = 1\n    maxcnt = 0\n    for i in 1:length(words)\n        l = length(unique(words[i]))\n\
    \        if l > maxcnt\n            maxcnt = l\n            maxind = i\n     \
    \   end\n    end\n    return words[maxind]\nend", "    \"\"\"\n    \"\"\"\n  \
    \  max_value = -1\n    max_index = -1\n    for i in 1:length(words)\n        word\
    \ = words[i]\n        word_set = Set(collect(word))\n        if(length(word_set)\
    \ > max_value)\n            max_value = length(word_set)\n            max_index\
    \ = i\n        end\n    end\n    return words[max_index]\nend", "    max_word\
    \ = words[1]\n    max_num_unique_chars = 0\n    for i = 1:length(words)\n    \
    \    if length(unique(words[i])) > max_num_unique_chars\n            max_num_unique_chars\
    \ = length(unique(words[i]))\n            max_word = words[i]\n        end\n \
    \   end\n    return max_word\nend", "    max_string = \"\"\n    max_string_char_num\
    \ = 0\n    for word in words\n        if length(Set(word)) > max_string_char_num\n\
    \            max_string = word\n            max_string_char_num = length(Set(word))\n\
    \        end\n    end\n    return max_string\nend", "    max_word = \"\"\n   \
    \ max_uniq = 0\n    for word in words\n        uniq = size(unique(word))[1]\n\
    \        if uniq > max_uniq || (uniq == max_uniq && word < max_word)\n       \
    \     max_word = word\n            max_uniq = uniq\n        end\n    end\n   \
    \ return max_word\nend", "    max_word = words[1]\n    max_len = length(unique(words[1]))\n\
    \    for w in words[2:end]\n        if max_len < length(unique(w))\n         \
    \   max_len = length(unique(w))\n            max_word = w\n        end\n    end\n\
    \    return max_word\nend", "    #Determine length of each string and store in\
    \ vector\n    x = [length(word) for word in words]\n    #Determine max number\
    \ of characters in string\n    y = maximum(x)\n    #Match max number of characters\
    \ to the string\n    for word in words\n        if length(word) == y\n       \
    \     return word\n        end\n    end\nend\nfind_max([\"name\", \"of\", \"string\"\
    ])", "    max_unique = 0 \n    max_word = \"\"\n    for w in words \n        s\
    \ = Set(w)\n        if length(s) > max_unique \n            max_unique = length(s)\n\
    \            max_word = w\n        end\n    end\n    return max_word\nend", " \
    \   max_chars = 0\n    max_word = \"\"\n    for word in words\n        if length(unique(collect(word)))\
    \ > max_chars\n            max_chars = length(unique(collect(word)))\n       \
    \     max_word = word\n        end\n    end\n    return max_word\nend", "    max_uniques\
    \ = 0\n    max_word = \"\"\n    for w in words\n        uniques = length(unique(w))\n\
    \        if uniques > max_uniques\n            max_uniques = uniques\n       \
    \     max_word = w\n        end\n    end\n    return max_word\nend", "    max\
    \ = 0\n    for word in words\n        if length(unique(word)) > max\n        \
    \    max = length(unique(word))\n            max_word = word\n        end\n  \
    \  end\n    return max_word\nend", "    length(words) == 0 && throw(ArgumentError(\"\
    Input list can't be empty\"))\n    max_len = 0\n    max_word = \"\"\n    for word\
    \ in words\n        if length(word) == 0 \n            continue\n        end\n\
    \        unique_len = length(Set(word))\n        if unique_len > max_len\n   \
    \         max_len = unique_len\n            max_word = word\n        elseif unique_len\
    \ == max_len\n            if word < max_word\n                max_word = word\n\
    \            end\n        end\n    end\n    return max_word\nend", "    n = length(words)\n\
    \    max_count = 0\n    max_word = \"\"\n    for i in 1:n\n        unique_chars\
    \ = unique(words[i])\n        if length(unique_chars) > max_count\n          \
    \  max_count = length(unique_chars)\n            max_word = words[i]\n       \
    \ end\n    end\n    return max_word\nend", "    num_uniques = map(x -> length(unique(x)),\
    \ words)\n    max_index = findmax(num_uniques)[2]\n    words[max_index]\nend",
  "    max_so_far = (\"\", 0)\n    for word in words\n        num_uniq_chars = length(unique(word))\n\
    \        if num_uniq_chars > max_so_far[2]\n            max_so_far = (word, num_uniq_chars)\n\
    \        elseif num_uniq_chars == max_so_far[2]\n            # if the number of\
    \ unique chars is same, check\n            # lexicographic order\n           \
    \ if word < max_so_far[1]\n                max_so_far = (word, num_uniq_chars)\n\
    \            end\n        end\n    end\n    return max_so_far[1]\nend", "    unique_length\
    \ = [length(unique(w)) for w in words]\n    index = indmax(unique_length)\n  \
    \  return words[index]\nend", "    unique_words = [Set(word) for word in words]\n\
    \    unique_chars = [length(unique_word) for unique_word in unique_words]\n  \
    \  max_unique_chars = maximum(unique_chars)\n    max_unique_chars_indices = findall(unique_chars\
    \ .== max_unique_chars)\n    max_unique_chars_words = [words[index] for index\
    \ in max_unique_chars_indices]\n    if length(max_unique_chars_words) == 1\n \
    \       return max_unique_chars_words[1]\n    else\n        return min(max_unique_chars_words)\n\
    \    end\nend", "    s = sort(unique(collect(collect(chars) for chars in words)))\n\
    \    max_len = maximum(length.(s))\n    findmax(length.(s))\n    vcat(s[i] for\
    \ i in 1:length(s) if length(s[i]) == max_len)\nend", "    max=0\n    max_word\
    \ = \"\"\n    for i in 1:length(words)\n        a = unique(words[i])\n       \
    \ if length(a) > max\n            max = length(a)\n            max_word = words[i]\n\
    \        end\n    end\n    return max_word\nend", "    \n    #initialize a maximum\
    \ word for the for loop\n    max_word = nothing\n    #initialize a maximum number\
    \ of characters for the for loop\n    max_chars = 0\n    \n    #iterate through\
    \ each word and check for maximum number of characters\n    for word in words\n\
    \        #return the string with maximum number of unique characters\n       \
    \ if length(unique(word)) > max_chars\n            max_chars = length(unique(word))\n\
    \            max_word = word\n        end\n    end\n    #return the first word\
    \ in the lexicographical order if multiple words have maximum number of unique\
    \ characters\n    if count(x -> length(unique(x)) == max_chars, words) > 1\n \
    \       return sort(words)[1]\n    end\n    return max_word\nend", "    # find\
    \ max number of unique characters\n    max_unique = 0\n    max_unique_word = \"\
    \"\n    for word in words\n        unique_char = unique(word)\n        if length(unique_char)\
    \ > max_unique\n            max_unique = length(unique_char)\n            max_unique_word\
    \ = word\n        end\n    end\n    return max_unique_word\nend", "    #takes\
    \ vector of strings as input and outputs one string\n    #This function has to\
    \ run over a vector of strings and return one string\n    #Initialize first word\
    \ as max\n    #for loop: iterate over input vector\n        #if the number of\
    \ unique characters in a word is greater than the\n        #number of unique characters\
    \ in the max word:\n            #set the word being looked at to be the max word\n\
    \        #else:\n            #continue\n    #return max word\n    max = words[1]\n\
    \    for word in words\n        if length(unique(word)) > length(unique(max))\n\
    \            max = word\n        else\n            continue\n        end\n   \
    \ end\n    return max\nend", "    maxword = nothing\n    maxwordcount = 0\n  \
    \  for word in words\n        wordcount = 0\n        for letter in word\n    \
    \        wordcount += !(letter in maxword)\n        end\n        if wordcount\
    \ > maxwordcount\n            maxword = word\n            maxwordcount = wordcount\n\
    \        end\n    end\n    return maxword\nend", "    max = 0\n    i = 1\n   \
    \ index = 0\n    max_word = \"\"\n    while i <= length(words)\n        curr_word\
    \ = words[i]\n        curr_word_dict = Dict{String, Bool}()\n        for c in\
    \ curr_word\n            curr_word_dict[c] = true\n        end\n        if length(curr_word_dict)\
    \ > max\n            max = length(curr_word_dict)\n            max_word = curr_word\n\
    \            index = i\n        end\n        i += 1\n    end\n    return max_word\n\
    end", "    char_counter = Dict()\n    for word in words\n        for char in word\n\
    \            char_counter[char] = get(char_counter, char, 0) + 1\n        end\n\
    \    end\n    max_word = words[1]\n    max_word_size = length(unique(max_word))\n\
    \    for word in words\n        if max_word_size < length(unique(word))\n    \
    \        max_word = word\n            max_word_size = length(unique(word))\n \
    \       end\n    end\n    return max_word\nend\nprintln(find_max([\"name\", \"\
    of\", \"string\"]))\nprintln(find_max([\"name\", \"enam\", \"game\"]))\nprintln(find_max([\"\
    aaaaaaa\", \"bb\" ,\"cc\"]))", "    cnt = Dict{String, Int}()\n    for w in words\n\
    \        for c in w\n            cnt[c] = get(cnt, c, 0) + 1\n        end\n  \
    \  end\n    max_ = findmax(collect(values(cnt)))\n    max_w = \"\"\n    max_score\
    \ = 0\n    for w in words\n        score = sum(get(cnt, w[i], 0) for i in 1:length(w))\n\
    \        if score > max_score\n            max_score = score\n            max_w\
    \ = w\n        end\n    end\n    return max_w\nend", "    unique_character_counts\
    \ = map(w -> length(unique(collect(w))), words)\n    maximum_unique_characters\
    \ = maximum(unique_character_counts)\n    index_of_max = findall(unique_character_counts\
    \ .== maximum_unique_characters)[1]\n    return words[index_of_max]\nend", " \
    \   if length(words) == 0\n        return \"\"\n    end\n    #   i       is current\
    \ index\n    #   i_max   is the index of string with maximum number of unique\
    \ characters\n    i_max = 1\n    for i in 2:length(words)\n        if nunique(words[i])\
    \ > nunique(words[i_max])\n            i_max = i\n        end\n    end\n    return\
    \ words[i_max]\nend", "    length_words = length(words)\n    max_char = \"\"\n\
    \    max_count = 0\n    pos = 0\n    for i in 1:length_words\n        word = words[i]\n\
    \        word_length = length(word)\n        count = 0\n        chars = Dict()\n\
    \        for j in 1:word_length\n            c = word[j]\n            if (c in\
    \ keys(chars)) == false\n                count += 1\n                chars[c]\
    \ = true\n            end\n        end\n        if count > max_count\n       \
    \     max_count = count\n            max_char = word\n            pos = i\n  \
    \      elseif count == max_count\n            if word < max_char\n           \
    \     max_char = word\n                pos = i\n            end\n        end\n\
    \    end\n    return max_char\nend", "    max_letters = 0\n    max_word = \"\"\
    \n    for word in words\n        unique_letter_count = unique_letter_count_word(word)\n\
    \        if unique_letter_count > max_letters\n            max_letters = unique_letter_count\n\
    \            max_word = word\n        end\n    end\n    return max_word\nend",
  "    max_len = 0\n    index = 0\n    for i in 1:length(words)\n        u_char =\
    \ unique(collect(words[i]))\n        if length(u_char) > max_len\n           \
    \ max_len = length(u_char)\n            index = i\n        end\n    end\n    return\
    \ words[index]\nend", "    max_count = -1\n    max_word = \"\"\n    for w in words\n\
    \        letter_count = length(Set(w))\n        if letter_count > max_count\n\
    \            max_count = letter_count\n            max_word = w\n        end\n\
    \    end\n    return max_word\nend", "    res = []\n    for word in words\n  \
    \      uniques = Set(word)\n        push!(res, (word, length(uniques)))\n    end\n\
    \    sorted_res = sort(res, by=x->x[2], rev=true)\n    return sorted_res[1][1]\n\
    end\n        ", "    max_uniq_count = 0\n    max_word = \"\"\n    for word in\
    \ words\n        uniq_count = length(unique(word))\n        if max_uniq_count\
    \ < uniq_count\n            max_uniq_count = uniq_count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend", "    max_string = \"\
    \"\n    max_set = Set{Char}()\n    for w in words\n        s = Set(chars(w))\n\
    \        if length(s) > length(max_set)\n            max_set = s\n           \
    \ max_string = w\n        elseif length(s) == length(max_set)\n            max_string\
    \ = min(max_string, w)\n        end\n    end\n    return max_string\nend", " \
    \   unique_chars = map(w -> Set(collect(w)), words)\n    l = length.(unique_chars)\n\
    \    max_len = findmax(l)[1]\n    words[indmin(l[l .== max_len])]\nend", "   \
    \ \"\"\"\n    initalize index to 0\n    initalize max_len to 0\n    create a empty\
    \ index vector, i.e. vec = Int64[]\n    iterate through words\n        if unique\
    \ chars in word > max_len, \n            update max_len\n            update index\
    \ vector, i.e. vec = [i]\n        elseif unique chars in word == max_len,\n  \
    \          append current index i to index vector, i.e. vec = push!(vec, i)\n\
    \        end\n    end\n    sort the index vector\n    return words[vec[1]]\n \
    \   \"\"\"\n    indx = 0\n    max_len = 0\n    vec = Int64[]\n    for i = 1:length(words)\n\
    \        if length(unique(words[i])) > max_len\n            max_len = length(unique(words[i]))\n\
    \            vec = [i]\n        elseif length(unique(words[i])) == max_len\n \
    \           push!(vec, i)\n        end\n    end\n    sort!(vec)\n    return words[vec[1]]\n\
    end", "    unique_char_list = map(list, get_unique_char(words))\n    count_list\
    \ = map(length, unique_char_list)\n    count_max = maximum(count_list)\n    index_max\
    \ = findall(count_list .== count_max)\n    if length(index_max) == 1\n       \
    \ return words[index_max[1]]\n    else\n        words_max = []\n        for i\
    \ in index_max\n            push!(words_max, words[i])\n        end\n        return\
    \ get_lexicographical_order(words_max)\n    end\nend", "    max_len = 0\n    word\
    \ = \"\"\n    for w in words\n        len = length(unique(w))\n        if len\
    \ > max_len || len == max_len && w < word\n            max_len = len\n       \
    \     word = w\n        end\n    end\n    return word\nend", "    max_word = words[1]\n\
    \    max_len = length(unique(words[1]))\n    for word in words[2:end]\n      \
    \  if length(unique(word)) > max_len\n            max_word = word\n          \
    \  max_len = length(unique(word))\n        end\n    end\n    return max_word\n\
    end", "    uniq_dict = Dict{Char,Bool}()\n    uniq_max = 0\n    for word in words\n\
    \        for letter in word\n            uniq_dict[letter] = true\n        end\n\
    \        if length(keys(uniq_dict)) > uniq_max\n            uniq_max = length(keys(uniq_dict))\n\
    \            max_word = word\n        end\n        uniq_dict = Dict{Char,Bool}()\n\
    \    end\n    return max_word\nend", "    # find the word with max number of unique\
    \ characters\n    l_max = 0\n    word_max = \"\"\n    for word in words\n    \
    \    l = length(unique(word))\n        if l > l_max\n            l_max = l\n \
    \           word_max = word\n        end\n    end\n    return word_max\nend",
  "    max_length::Int64 = 0\n    max_word::String = \"\"\n    for word in words\n\
    \        s = sort(unique(word))\n        if length(s) > max_length\n         \
    \   max_length = length(s)\n            max_word = word\n        end\n    end\n\
    \    return max_word\nend", "    n = length(words)\n    if n == 0\n        return\
    \ \"\"\n    end\n    max_word = words[1]\n    max_length = length(unique(collect(words[1])))\n\
    \    for i in 1:n\n        if length(unique(collect(words[i]))) > max_length\n\
    \            max_word = words[i]\n            max_length = length(unique(collect(words[i])))\n\
    \        end\n    end\n    return max_word\nend", "    # find words with max unique\
    \ characters, return first one in lexicographical order\n    nmax, max_words =\
    \ -1, String[]\n    for w in words\n        n = length(unique(w))\n        if\
    \ n > nmax\n            nmax, max_words = n, [w]\n        elseif n == nmax\n \
    \           push!(max_words, w)\n        end\n    end\n    # return first word\
    \ lexicographically\n    return minimum(max_words)\nend", "    # TODO: write your\
    \ code here\n    maxlength = 0\n    maxword = \"\"\n    for word in words\n  \
    \      l = length(unique(word))\n        if l > maxlength\n            maxlength\
    \ = l\n            maxword = word\n        end\n    end\n    return maxword\n\
    end", "    #find the max of set length\n    max_len = maximum([length(unique(i))\
    \ for i in words])\n    #find the words who have this max length\n    words_having_max_len\
    \ = words[findall(x->length(unique(x)) == max_len, words)]\n    #return the first\
    \ word in the lexicographical order\n    return first(sort(words_having_max_len))\n\
    end", "    max_unique_count = 0\n    max_unique_index = 0\n    for (i,word) in\
    \ enumerate(words)\n        unique_count = length(unique(word))\n        if unique_count\
    \ > max_unique_count\n            max_unique_count = unique_count\n          \
    \  max_unique_index = i\n        end\n    end\n    return words[max_unique_index]\n\
    end", "    for w in words\n        println(w)\n    end\n    return \"string\"\n\
    end", "    if length(words) == 0\n        return \"\"\n    end\n    if length(words)\
    \ == 1\n        return words[1]\n    end\n    mx_word = words[1]\n    for i in\
    \ 2:length(words)\n        if length(unique(mx_word)) < length(unique(words[i]))\n\
    \            mx_word = words[i]\n        end\n    end\n    return mx_word\nend",
  "    n = length(words)\n    maxi = -1\n    idx = -1\n    for i in 1:n\n        current_word\
    \ = words[i]\n        unique_letters = unique(current_word)\n        unique_letters_length\
    \ = length(unique_letters)\n        if unique_letters_length > maxi\n        \
    \    maxi = unique_letters_length\n            idx = i\n        end\n    end\n\
    \    return words[idx]\nend", "    max_word = \"\"\n    max_uniq_len = 0\n   \
    \ for word in words\n        uniq_len = length(unique(word))\n        if uniq_len\
    \ > max_uniq_len || (uniq_len == max_uniq_len && word < max_word)\n          \
    \  max_word = word\n            max_uniq_len = uniq_len\n        end\n    end\n\
    \    return max_word\nend", "    max_unique_chars = 0\n    index = 1\n    for\
    \ i in 1:length(words)\n        if length(unique(words[i])) > max_unique_chars\n\
    \            max_unique_chars = length(unique(words[i]))\n            index =\
    \ i\n        end\n    end\n    return words[index]\nend", "    max_len, max_word\
    \ = 0, \"\"\n    for word in words\n        n_unique = nunique(word)\n       \
    \ if n_unique > max_len\n            max_len, max_word = n_unique, word\n    \
    \    elseif n_unique == max_len\n            if word < max_word\n            \
    \    max_word = word\n            end\n        end\n    end\n    return max_word\n\
    end", "    max_length = 0\n    max_word = \"\"\n    for word in words\n      \
    \  this_word_length = length(Set(word))\n        if this_word_length > max_length\n\
    \            max_length = this_word_length\n            max_word = word\n    \
    \    end\n    end\n    return max_word\nend", "    max_unique_characters = 0\n\
    \    max_unique_word = \"\"\n    for word in words\n        unique_chars = count_unique_characters(word)\n\
    \        if (unique_chars > max_unique_characters) ||\n            (unique_chars\
    \ == max_unique_characters && word < max_unique_word)\n            max_unique_characters\
    \ = unique_chars\n            max_unique_word = word\n        end\n    end\n \
    \   return max_unique_word\nend", "    max_len = 0\n    res = \"\"\n    for i\
    \ in 1:length(words)\n        cur_word = words[i]\n        cur_unique_chars =\
    \ length(unique(collect(cur_word)))\n        if cur_unique_chars > max_len\n \
    \           max_len = cur_unique_chars\n            res = cur_word\n        end\n\
    \    end\n    return res\nend", "    return \"\"\nend", "    my_map = Dict{String,\
    \ Int}()\n    for i in 1:length(words)\n        my_map[words[i]] = length(unique(words[i]))\n\
    \    end\n    out = \"\"\n    max_v = 0\n    for (k, v) in my_map\n        if\
    \ v > max_v\n            max_v = v\n            out = k\n        elseif v == max_v\n\
    \            if k < out\n                out = k\n            end\n        end\n\
    \    end\n    return out\nend", "    #initialize empty string \n    #initialize\
    \ maximum number of unique characters in words\n    #loop through words\n    \
    \    #check number of unique characters\n        #check if it is more than current\
    \ maximum number of unique characters\n            #update max_unique_char\n \
    \           #update max_string\n    #return max_string\nend", "    num_unique_chars\
    \ = zeros(length(words))\n    for i = 1:length(words)\n        num_unique_chars[i]\
    \ = length(Set(collect(words[i])))\n    end\n    index = findmax(num_unique_chars)[2]\n\
    \    return words[index]\nend\n    ", "    \n    max_len = length(unique(collect(words[1])))\n\
    \    max_word = words[1]\n    \n    for i in 2:length(words)\n        if length(unique(collect(words[i])))\
    \ > max_len\n            max_len = length(unique(collect(words[i])))\n       \
    \     max_word = words[i]\n        end\n    end\n    return max_word\nend", " \
    \   \n    # preallocate a vector to store the number of unique characters in each\
    \ word\n    num_uniq_chars = zeros(length(words))\n    \n    # loop through each\
    \ word in words\n    for i = 1:length(words)\n        # check for unique characters\
    \ in the word\n        for j = 1:length(words[i])\n            if !in(words[i][j],words[i][1:j-1])\n\
    \                num_uniq_chars[i] += 1\n            end\n        end\n    end\n\
    \    # find the index of the word with the most unique characters\n    max_index\
    \ = findall(num_uniq_chars .== maximum(num_uniq_chars))[1]\n    return words[max_index]\n\
    end", "    max_length = 0\n    max_word = \"\"\n    for word in words\n      \
    \  if length(unique(word)) > max_length\n            max_length = length(unique(word))\n\
    \            max_word = word\n        end\n    end\n    return max_word\nend",
  "    if length(words) == 0\n        error(\"input must not be empty\")\n    end\n\
    \    max_unique_count = 0\n    max_unique_word = \"\"\n    for w in words\n  \
    \      unique_count = length(unique(w))\n        if unique_count > max_unique_count\
    \ || (unique_count == max_unique_count && w < max_unique_word)\n            max_unique_count\
    \ = unique_count\n            max_unique_word = w\n        end\n    end\n    return\
    \ max_unique_word\nend", "    # initialize largest word with first element\n \
    \   largest_word = words[1]\n    largest_uniq = 0 \n    # loop over all words\
    \ in list\n    for i = 1:length(words)\n        # if the length of the set of\
    \ the current word is larger \n        # than the largest_uniq, we have a new\
    \ winner!\n        if length(Set(words[i])) > largest_uniq\n            largest_uniq\
    \ = length(Set(words[i]))\n            largest_word = words[i]\n        end\n\
    \    end\n    # return the largest word\n    return largest_word\nend", "    if\
    \ length(words) == 0\n        return \"\"\n    end\n    max_word = words[1]\n\
    \    max_count = length(unique(words[1]))\n    for w in words[2:end]\n       \
    \ count = length(unique(w))\n        if (count > max_count) || (count == max_count\
    \ && compare(w, max_word) < 0)\n            max_word = w\n            max_count\
    \ = count\n        end\n    end\n    return max_word\nend", "    n = length(words)\n\
    \    max_string_length = 0\n    max_string = \"\"\n    for i in 1:n\n        #\
    \ Find number of unique characters in each string\n        freq = Dict()\n   \
    \     for c in words[i]\n            if haskey(freq, c)\n                freq[c]\
    \ += 1\n            else\n                freq[c] = 1\n            end\n     \
    \   end\n        if length(freq) > max_string_length\n            max_string_length\
    \ = length(freq)\n            max_string = words[i]\n        end\n    end\n  \
    \  return max_string\nend", "    # YOUR CODE HERE\nend\n ", "    unique_char_dict\
    \ = Dict()\n    for word in words\n        unique_char_dict[word] = count_unique_char(word)\n\
    \    end\n    max_unique_char = 0\n    max_unique_char_word = \"\"\n    for (word,\
    \ num_unique_char) in unique_char_dict\n        if max_unique_char < num_unique_char\n\
    \            max_unique_char = num_unique_char\n            max_unique_char_word\
    \ = word\n        end\n    end\n    return max_unique_char_word\nend", "    ichars\
    \ = map(s -> length(unique(s)), words)\n    i = indmax(ichars)\n    return words[i]\n\
    end", "    str_max = \"\"\n    unique_max = 0\n    for word in words\n       \
    \ unique_count = length(unique(word))\n        if unique_count > unique_max\n\
    \            unique_max = unique_count\n            str_max = word\n        end\n\
    \    end\n    return str_max\nend", "  n = length(words)\n  max_word = \"\"\n\
    \  max_n_unique = 0\n  for i in 1:n\n    string = words[i]\n    n_unique = length(unique(string))\n\
    \    if n_unique > max_n_unique\n      max_n_unique = n_unique\n      max_word\
    \ = string\n    end\n  end\n  return max_word\nend", "    max_word = \"\"\n  \
    \  max_count = 0\n    for word in words\n        unique_chars = unique(word)\n\
    \        unique_count = length(unique_chars)\n        if unique_count > max_count\
    \ || \n            (unique_count == max_count && word < max_word)\n          \
    \  max_word = word\n            max_count = unique_count\n        end\n    end\n\
    \    return max_word\nend", "    \n    max_count = 0\n    max_word = \"\"\n  \
    \  \n    for i in eachindex(words)\n        word = words[i]\n        unique_count\
    \ = count_unique(word)\n        if unique_count > max_count\n            max_count\
    \ = unique_count\n            max_word = word\n        end\n    end\n    \n  \
    \  return max_word\nend", "    max_str = \"\"\n    max_str_freq = 0\n    for word\
    \ in words\n        word_freq = length(unique(collect(word)))\n        if word_freq\
    \ > max_str_freq\n            max_str = word\n            max_str_freq = word_freq\n\
    \        end\n    end\n    return max_str\nend", "    max_unique_chars = 0\n \
    \   max_unique_chars_word = \"\"\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_unique_chars = unique_chars\n            max_unique_chars_word = word\n\
    \        end\n    end\n    return max_unique_chars_word\nend", "    max(length(unique(word))\
    \ for word in words)\nend", "    longest = \"\"\n    for w in words\n        if\
    \ length(unique(w)) >= length(unique(longest))\n            longest = w\n    \
    \    end\n    end\n    return longest\nend", "    length(unique(words[1])) > length(unique(words[2]))\
    \ ? words[1] : words[2]\nend", "    # RETURN ANSWER HERE\nend\n\"\"\"\n    checker(find_max,\
    \ [\"name\", \"of\", \"string\"], \"string\")\n    checker(find_max, [\"name\"\
    , \"enam\", \"game\"], \"enam\")\n    checker(find_max, [\"aaaaaaa\", \"bb\" ,\"\
    cc\"], \"aaaaaaa\")\n\"\"\"\n \n \n \n # PROBLEM 3:\n\"\"\"Write a function that\
    \ takes in two vectors x and y of equal length as well\n    as a threshold value.\
    \ This function should return x and y, but with all\n    the points exceeding\
    \ the threshold removed. The points that are kept \n    should be in the same\
    \ order as they were before filtering.\n    Threshold filtering is commonly used\
    \ in signal processing.\n    \n    filter_threshold( [0, 1, 2, 3, 4, 5], [0, 0,\
    \ 1, 1, 2, 2], 1) = ([1, 2, 3, 4, 5], [0, 1, 1, 2, 2])\n    filter_threshold(\
    \ [0, 1, 2, 3, 4, 5], [0, 0, 1, 1, 2, 2], 0) = ([0, 1, 2, 3, 4, 5], [0, 0, 1,\
    \ 1, 2, 2])\n    filter_threshold( [0, 1, 2, 3, 4, 5], [0, 0, 1, 1, 2, 2], 2)\
    \ = ([2, 3, 4, 5], [1, 1, 2, 2])\n    \"\"\"\n    ", "    # process...\nend\n\
    ```", "    max_word = \"\"\n    max_num_unique_chars = 0\n    for word in words\n\
    \        unique_chars = unique(word)\n        num_unique_chars = length(unique_chars)\n\
    \        if num_unique_chars > max_num_unique_chars\n            max_num_unique_chars\
    \ = num_unique_chars\n            max_word = word\n        end\n    end\n    return\
    \ max_word\nend", "    nmax, max_word = 0, \"\"\n    for word in words\n     \
    \   set(word)\n        n = length(word)\n        if n > nmax\n            nmax\
    \ = n\n            max_word = word\n        end\n    end\n    return max_word\n\
    end", "    max_len = 0\n    max_str = \"\"\n    for word in words\n        if\
    \ length(unique(word)) > max_len\n            max_len = length(unique(word))\n\
    \            max_str = word\n        end\n    end\n    return max_str\nend", " \
    \   # TODO\n    # Calculate number of unique characters for each word\n    # Find\
    \ the max number of unique characters\n    # Find the word which has max number\
    \ of unique characters\n    # Find the words which have max number of unique characters\n\
    \    # If there are multiple words with max number of unique characters\n    #\
    \ return the word that comes first in lexicographical order\n    max_unique_char\
    \ = 0\n    max_unique_char_words = []\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars == max_unique_char\n       \
    \     push!(max_unique_char_words, word)\n        elseif unique_chars > max_unique_char\n\
    \            max_unique_char = unique_chars\n            max_unique_char_words\
    \ = [word]\n        end\n    end\n    return min(max_unique_char_words)\nend",
  "    \"\"\"Find string with maximum number of unique characters\n    \"\"\"\n  \
    \  if length(words) == 0\n        return \"\"\n    end\n    if length(words) ==\
    \ 1\n        return words[1]\n    end\n    max_unique = 0\n    max_word = \"\"\
    \n    for w in words\n        unique = length(unique_chars(w))\n        if unique\
    \ > max_unique\n            max_unique = unique\n            max_word = w\n  \
    \      end\n    end\n    return max_word\nend", "    # your code goes here\nend\n\
    \ \n@testset \"Find max\" begin\n    @test find_max([\"name\", \"of\", \"string\"\
    ]) == \"string\"\n    @test find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\
    \n    @test find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"aaaaaaa\"\nend", "  #\
    \ initialize our variables to store the max unique characters,\n  # string with\
    \ max unique characters, and a set of the current unique characters\n  max_unique_chars\
    \ = 0\n  max_string = \"\"\n  unique_chars = Set{Char}()\n  \n  # for each word\
    \ in the list\n  for word in words\n      # set the number of unique characters\
    \ to 0\n      num_unique_chars = 0\n      # set our set of unique characters to\
    \ an empty set\n      unique_chars = Set{Char}()\n      # for each character in\
    \ the word\n      for c in word\n          # if the character is not already in\
    \ the set\n          if !in(c, unique_chars)\n              # add the character\
    \ to the set and increment the count\n              push!(unique_chars, c)\n \
    \             num_unique_chars += 1\n          end\n      end\n      # if the\
    \ number of unique characters is greater than the previous maximum\n      if num_unique_chars\
    \ > max_unique_chars\n          # store the new maximum and the word with that\
    \ number of unique characters\n          max_unique_chars = num_unique_chars\n\
    \          max_string = word\n      end\n  end\n  # return the string with maximum\
    \ number of unique characters\n  return max_string\nend", "    max_unique_chars\
    \ = 0\n    max_unique_words = []\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_unique_chars = unique_chars\n            max_unique_words = [word]\n\
    \        elseif unique_chars == max_unique_chars\n            push!(max_unique_words,\
    \ word)\n        end\n    end\n    return sort(max_unique_words)[1]\nend", " \
    \   max_count = 0\n    max_word = \"\"\n    for word in words\n        c = unique_char_count(word)\n\
    \        if c > max_count\n            max_count = c\n            max_word = word\n\
    \        elseif c == max_count\n            if word < max_word\n             \
    \   max_word = word\n            end\n        end\n    end\n    return max_word\n\
    end", "    unique_strings = Dict{String, Int}()\n    for i = 1:length(words)\n\
    \        unique_strings[words[i]] = unique_chars(words[i])\n    end\n    max_chars\
    \ = maximum(values(unique_strings))\n    sorted_words = sort(collect(keys(unique_strings)))\n\
    \    for i = 1:length(sorted_words)\n        if unique_strings[sorted_words[i]]\
    \ == max_chars\n            return sorted_words[i]\n        end\n    end\nend",
  "    max_unique_char, max_unique_char_word = 0, \"\"\n    for word in words\n  \
    \      unique_chars = length(unique(word))\n        if unique_chars > max_unique_char\n\
    \            max_unique_char = unique_chars\n            max_unique_char_word\
    \ = word\n        end\n    end\n    return max_unique_char_word\nend", "    max\
    \ = 0\n    for i in 1:length(words)\n        if length(unique(words[i])) >= max\n\
    \            max = length(unique(words[i]))\n            b = words[i]\n      \
    \  end\n    end\n    return b\nend", "    \n    max_unique_words = findmax(length.(unique(words))[:])\
    \ # returns the max number of unique characters\n    # find the first string in\
    \ words with max number of unique characters\n    first_element = findfirst(unique(words),\
    \ x -> length(x) == max_unique_words)\n    return first_element\nend", "    max_unique_chars\
    \ = 0\n    max_unique_word = \"\"\n    for i in 1:length(words)\n        nunique_chars\
    \ = length(unique(collect(words[i])))\n        if nunique_chars > max_unique_chars\
    \ ||\n            (nunique_chars == max_unique_chars && words[i] < max_unique_word)\n\
    \            max_unique_chars = nunique_chars\n            max_unique_word = words[i]\n\
    \        end\n    end\n    return max_unique_word\nend", "    length_of_words\
    \ = length(words)\n    maximum_unique_letters = 0\n    maximum_unique_letters_word\
    \ = \"\"\n    for i in 1:length_of_words\n        characters = Set(words[i])\n\
    \        length_of_unique_characters = length(characters)\n        if length_of_unique_characters\
    \ > maximum_unique_letters\n            maximum_unique_letters = length_of_unique_characters\n\
    \            maximum_unique_letters_word = words[i]\n        end\n    end\n  \
    \  return maximum_unique_letters_word\nend", "    n = length(words)\n    max_num\
    \ = 0\n    max_word = \"\"\n    for i in 1:n\n        x = words[i]\n        num\
    \ = length(unique(x))\n        if num > max_num\n            max_num = num\n \
    \           max_word = x\n        end\n    end\n    return max_word\nend", " \
    \   length_max = 0\n    char_list = []\n    index = 0\n    for (i, word) in enumerate(words)\n\
    \        char_list = []\n        for char in word\n            if char in char_list\n\
    \                next\n            else\n                push!(char_list, char)\n\
    \            end\n        end\n        if length(char_list) >= length_max\n  \
    \          length_max = length(char_list)\n            index = i\n        end\n\
    \    end\n    return words[index]\nend", "    max_count = -1\n    max_word = \"\
    \"\n    # compare each word with max_word\n    for word in words\n        num_uniq_chars\
    \ = length(unique(word))\n        if num_uniq_chars > max_count\n            max_count\
    \ = num_uniq_chars\n            max_word = word\n        end\n    end\n    return\
    \ max_word\nend", "    sorted = sort(words, rev=true)\n    if length(unique(sorted[1]))\
    \ == length(unique(sorted[2]))\n        return sorted[2]\n    else\n        return\
    \ sorted[1]\n    end\nend", "    minimum_length = length(words[1])\n    for word\
    \ in words\n        if length(word) < minimum_length\n            minimum_length\
    \ = length(word)\n        end\n    end\n    possible_words = Vector{String}()\n\
    \    for word in words\n        if length(word) == minimum_length\n          \
    \  push!(possible_words, word)\n        end\n    end\n    #println(possible_words)\n\
    \    minimum_word = possible_words[1]\n    for word in possible_words\n      \
    \  if word < minimum_word\n            minimum_word = word\n        end\n    end\n\
    \    return minimum_word\nend", "    max = 0\n    maxword = \"\"\n    for word\
    \ in words\n        if length(unique(word)) > max\n            max = length(unique(word))\n\
    \            maxword = word\n        end\n    end\n    return maxword\nend", " \
    \   max_unique_char = 0\n    max_unique_char_word = \"\"\n    for word in words\n\
    \        uniq_char = Set(word)\n        if length(uniq_char) > max_unique_char\n\
    \            max_unique_char = length(uniq_char)\n            max_unique_char_word\
    \ = word\n        end\n    end\n    return max_unique_char_word\nend", "    max\
    \ = 0\n    max_word = \"\"\n    for word in words\n        unique_chars = unique(word)\n\
    \        if length(unique_chars) > max\n            max = length(unique_chars)\n\
    \            max_word = word\n        end\n    end\n    return max_word\nend",
  "    if length(words) == 0\n        return \"\"\n    end\n    if length(words) ==\
    \ 1\n        return words[1]\n    end\n    # sort by the length of the unique\
    \ characters in each word\n    # If a tie is formed, sort by lexicographical order\n\
    \    sorted_words = sort(words, by=x->(length(unique(x)), x))\n    max_len = length(unique(sorted_words[end]))\n\
    \    # Iterate over all the words, using a cursor to keep track of the index of\
    \ the\n    # words we are currently iterating over.\n    # If at any point the\
    \ length of the unique characters is less than the max_len\n    # we break out\
    \ of the loop, as all other strings will have less unique characters\n    cursor\
    \ = 1\n    while cursor <= length(sorted_words)\n        if length(unique(sorted_words[cursor]))\
    \ < max_len\n            break\n        end\n        cursor += 1\n    end\n  \
    \  # Return the maximum length word(s) in lexicographical order.\n    return sorted_words[cursor-1]\n\
    end", "    max_word::String = words[1]\n    for i = 2:length(words)\n        if\
    \ length(unique(words[i])) > length(unique(max_word))\n            max_word =\
    \ words[i]\n        end\n    end\n    return max_word\nend", "    # in the first\
    \ step, find the string with the largest number of unique chars\n    max_chars\
    \ = maximum(count(eachchar(w)) for w in words)\n    # in the second step, find\
    \ the lexicographically smallest string among\n    # the strings with the largest\
    \ number of unique chars\n    lex_min = minimum(w for w in words if count(eachchar(w))\
    \ == max_chars)\n    return lex_min\nend", "    max_word = \"\"\n    max_count\
    \ = 0\n    for word in words\n        if length(unique(word)) > max_count\n  \
    \          max_count = length(unique(word))\n            max_word = word\n   \
    \     end\n    end\n    return max_word\nend", "    # output to save the final\
    \ answer\n    output = \" \"\n    # save the maximum count of unique characters\
    \ for each word\n    max_count = 0\n    # iterate through each string\n    for\
    \ x in words\n        # count the number of unique characters\n        n = length(unique(x))\n\
    \        # if n is greater than the max_count saved, then update output and max_count\n\
    \        if n > max_count\n            output = x\n            max_count = n\n\
    \        end\n    end\n    return output\nend", "    if length(words) == 0\n \
    \       return \"\"\n    end\n    if length(words) == 1\n        return words[1]\n\
    \    end\n    words_char_count = Dict{String,Int}()\n    for word in words\n \
    \       words_char_count[word] = length(unique(word))\n    end\n    values = collect(values(words_char_count))\n\
    \    max_val = maximum(values)\n    max_val_indices = findall(values .== max_val)\n\
    \    if length(max_val_indices) == 1\n        return getkey(words_char_count,max_val)\n\
    \    end\n    max_val_words = words[max_val_indices]\n    return max_val_words[1]\n\
    end", "    len_words = length(words)\n    # init the word with max len to the\
    \ first word\n    word_max = words[1]\n    # the corresponding number of unique\
    \ characters\n    # the number of uniques characters in \"name\" is 4\n    n_max\
    \ = length(unique(word_max))\n    for i in 2:len_words\n        word = words[i]\n\
    \        n = length(unique(word))\n        if n > n_max\n            word_max\
    \ = word\n            n_max = n\n        end\n    end\n    return word_max\nend",
  "    max_size = 0\n    max_words = []\n    for word in words\n        word_chars\
    \ = unique(collect(word))\n        if length(word_chars) > max_size\n        \
    \    max_size = length(word_chars)\n            max_words = [word]\n        elseif\
    \ length(word_chars) == max_size\n            append!(max_words, word)\n     \
    \   end\n    end\n    max_words = sort(max_words)\n    return max_words[1]\nend",
  "    #get the length of words\n    n = length(words)\n    #create an empty vector\
    \ that holds the unique number of characters in each string\n    freq = []\n \
    \   #iterate through each string\n    for i = 1:n\n        #get the unique number\
    \ of characters in each string\n        unique_set = unique(words[i])\n      \
    \  #push the unique number of characters in each string to the empty vector\n\
    \        push!(freq, length(unique_set))\n    end\n    #get the max unique number\
    \ of characters\n    max_freq = maximum(freq)\n    #find the index of the max\
    \ unique number of characters\n    max_freq_idx = findall(x -> x == max_freq,\
    \ freq)\n    #sort the index of the max unique number of characters in lexicographical\
    \ order\n    sorted_idx = sort(max_freq_idx)\n    #return the word with the max\
    \ unique number of characters\n    return words[sorted_idx[1]]\nend", "    # TODO:\
    \ implement this function\n    max_unique_words = 0\n    max_unique_word = \"\"\
    \n    for word in words\n        char_dict = Dict{Char, Int}()\n        for char\
    \ in word\n            char_dict[char] = 1\n        end\n        if length(keys(char_dict))\
    \ > max_unique_words\n            max_unique_words = length(keys(char_dict))\n\
    \            max_unique_word = word\n        end\n    end\n    return max_unique_word\n\
    end", "    unique_char = Dict{String,Int}()\n    for word in words\n        unique_char[word]\
    \ = length(unique(collect(word)))\n    end\n    max_count = maximum(values(unique_char))\n\
    \    max_word = \"\"\n    for (key, value) in unique_char\n        if max_count\
    \ == value && max_word > key\n            max_word = key\n        end\n    end\n\
    \    return max_word\nend", "    \"\"\"find the word with the maximum number of\
    \ unique characters\"\"\"\n    return words[findmax(unique(char.(words)))[2]]\n\
    end", "    if isempty(words)\n        return \"\"\n    end\n    word = words[1]\n\
    \    max_unique = size(unique(word), 1)\n    for i = 2:size(words, 1)\n      \
    \  new_unique = size(unique(words[i]), 1)\n        if new_unique > max_unique\n\
    \            word = words[i]\n            max_unique = new_unique\n        end\n\
    \    end\n    return word\nend", "    \n    max_word = \"\"\n    max_unique_letter\
    \ = 0\n    \n    for word in words\n        unique_letters = unique(word)\n  \
    \      if max_unique_letter < length(unique_letters)\n            max_unique_letter\
    \ = length(unique_letters)\n            max_word = word\n        end\n    end\n\
    \    return max_word\nend", "    max_unique_chars = 0\n    max_unique_chars_word\
    \ = \"\"\n    for word in words\n        unique_chars = unique(word)\n       \
    \ if max_unique_chars < length(unique_chars)\n            max_unique_chars = length(unique_chars)\n\
    \            max_unique_chars_word = word\n        end\n    end\n    return max_unique_chars_word\n\
    end", "  max_s = \"\"\n  max_count = 0\n  for i in 1:length(words)\n    curr_count\
    \ = count_unique(words[i])\n    if curr_count > max_count\n      max_count = curr_count\n\
    \      max_s = words[i]\n    elseif curr_count == max_count\n      max_s = iffirst(max_s,\
    \ words[i])\n    end\n  end\n  return max_s\nend", "    new_words = String[]\n\
    \    for word in words\n        push!(new_words, word)\n    end\n    inds = sortperm(new_words,\
    \ by=length)\n    return new_words[inds[end]]\nend", "    # initializing variables\n\
    \    max_val = 0\n    word = \"\"\n    for i in 1:length(words)\n        if length(unique(words[i]))\
    \ > max_val\n            max_val = length(unique(words[i]))\n            word\
    \ = words[i]\n        end\n    end\n    return word\nend", "    wset = Set(collect(words[1]))\n\
    \    max_wrd = words[1]\n    for i in 2:length(words)\n        iset = Set(collect(words[i]))\n\
    \        if length(iset) > length(wset)\n            wset = iset\n           \
    \ max_wrd = words[i]\n        end\n    end\n    return max_wrd\nend", "    out\
    \ = \"\"\n    max_len = 0\n    for word in words\n        unique_chars = unique(word)\n\
    \        if length(unique_chars) > max_len\n            max_len = length(unique_chars)\n\
    \            out = word\n        end\n    end\n    return out\nend", "    len=length(words)\n\
    \    ans=\"\"\n    max_uniq=0\n    for i=1:len\n        if max_uniq<length(unique(words[i]))\n\
    \            max_uniq=length(unique(words[i]))\n            ans=words[i]\n   \
    \     end\n    end\n    return ans\nend\nprintln(find_max([\"name\", \"of\", \"\
    string\"]))\nprintln(find_max([\"name\", \"enam\", \"game\"]))\nprintln(find_max([\"\
    aaaaaaa\", \"bb\" ,\"cc\"]))", "    maxWord = \"\"\n    maxCount = 0\n    for\
    \ word in words\n        set = Set{Char}()\n        for c in word\n          \
    \  push!(set, c)\n        end\n        if length(set) > maxCount\n           \
    \ maxCount = length(set)\n            maxWord = word\n        end\n    end\n \
    \   return maxWord\nend\n    \n    \n    ", "    # Initialize best_word and length.\n\
    \    best_word = \"\"\n    best_word_length = 0\n    # Iterate over the words.\n\
    \    for word in words\n        # Create a hashmap of chars and their counts.\n\
    \        counts = Dict{Char, Int}()\n        for char in word\n            if\
    \ haskey(counts, char)\n                counts[char] += 1\n            else\n\
    \                counts[char] = 1\n            end\n        end\n        # Find\
    \ the number of unique chars in the hashmap.\n        unique_chars = length(counts)\n\
    \        # If unique_chars > best_word_length, then update best_word and\n   \
    \     # best_word_length.\n        if unique_chars > best_word_length\n      \
    \      best_word = word\n            best_word_length = unique_chars\n       \
    \ end\n    end\n    return best_word\nend", "    best_word::String = \"\"\n  \
    \  best_unique_chars::Int = 0\n    for w in words\n        # Get a set of unique\
    \ chars\n        unique_chars::Set{Char} = Set(w)\n        if length(unique_chars)\
    \ > best_unique_chars\n            best_unique_chars = length(unique_chars)\n\
    \            best_word = w\n        end\n    end\n    return best_word\nend",
  "    idx = findmax(map(str->length(unique(str)), words))[2]\n    words[idx]\nend",
  "    num_unique_chars = [length(unique(word)) for word in words]\n    max_unique_char\
    \ = maximum(num_unique_chars)\n    unique_char_indices = findall(x -> x == max_unique_char,\
    \ num_unique_chars)\n    sorted_words = sort(words[unique_char_indices])\n   \
    \ return sorted_words[1]\nend", "    string_to_return = \"\"\n    max_count =\
    \ 0\n    for word in words\n        if length(unique(word)) > max_count\n    \
    \        max_count = length(unique(word))\n            string_to_return = word\n\
    \        end\n    end\n    return string_to_return\nend", "    max_len = 0\n \
    \   max_word = \"\"\n    for word in words\n        if length(unique(word)) >\
    \ max_len\n            max_len = length(unique(word))\n            max_word =\
    \ word\n        end\n    end\n    return max_word\nend", "    max_count = 0\n\
    \    index = 0\n    for i in 1:length(words)\n        if length(unique(words[i]))\
    \ > max_count\n            max_count = length(unique(words[i]))\n            index\
    \ = i\n        end\n    end\n    return words[index]\nend", "    # se declara\
    \ una variable para almacenar el m\xE1ximo n\xFAmero de letras distintas\n   \
    \ local max_num_distinct_letters = 0\n    #se declara una variable para almacenar\
    \ el \xEDndice del vector palabras\n    local max_num_distinct_letters_ind = 0\n\
    \    #se recorre cada una de las palabras dentro del vector palabras\n    for\
    \ i in 1:length(words)\n        #se declara un vector de caracteres que almacena\
    \ los caracteres de la palabra\n        local caracteres = split(words[i],\"\"\
    )\n        #se declara una variable para almacenar el n\xFAmero de letras distintas\n\
    \        local num_distinct_letters = 0\n        #se recorre cada uno de los caracteres\
    \ de la palabra\n        for j in 1:length(caracteres)\n            #se compara\
    \ la posici\xF3n del caracter con todas las siguientes para detectar si hay letras\
    \ repetidas\n            for k in j+1:length(caracteres)\n                #se\
    \ compara si hay caracteres iguales y se aumenta el n\xFAmero de letras repetidas\n\
    \                if caracteres[j] == caracteres[k]\n                    num_distinct_letters\
    \ += 1\n                end\n            end\n        end\n        #se compara\
    \ si el n\xFAmero de letras distintas de la palabra que se est\xE1 analizando\
    \ es mayor que el n\xFAmero de letras distintas de la palabra con el m\xE1ximo\
    \ n\xFAmero de letras distintas\n        if num_distinct_letters > max_num_distinct_letters\n\
    \            #se asigna a la variable max_num_distinct_letters el n\xFAmero de\
    \ letras distintas de la palabra analizada\n            max_num_distinct_letters\
    \ = num_distinct_letters\n            #se asigna a la variable max_num_distinct_letters_ind\
    \ el \xEDndice de la palabra que se", "    l = length(words)\n    max_word = \"\
    \"\n    max_len = 0\n    for i = 1:l\n        num_unique = 0\n        for j =\
    \ 1:length(words[i])\n            c = words[i][j]\n            if !(c in max_word)\n\
    \                num_unique += 1\n            end\n        end\n        if num_unique\
    \ > max_len\n            max_len = num_unique\n            max_word = words[i]\n\
    \        end\n    end\n    return max_word\nend", "    max_unique = 0\n    max_unique_word\
    \ = \"\"\n    # maximum number of unique characters in any word\n    for word\
    \ in words\n        unique_chars = unique(word)\n        n_unique = length(unique_chars)\n\
    \        if n_unique > max_unique\n            max_unique = n_unique\n       \
    \     max_unique_word = word\n        end\n    end\n    max_unique_word\nend",
  "    max = 0\n    max_word = words[1]\n    for word in words\n        if length(unique(word))\
    \ > max\n            max = length(unique(word))\n            max_word = word\n\
    \        end\n    end\n    return max_word\nend", "    u = map(w -> Set(w), words)\n\
    \    return words[maximum_index(map(c -> length(c), u))]\nend", "    if length(words)\
    \ == 0\n        return nothing\n    end\n    if length(words) == 1\n        return\
    \ words[1]\n    end\n    sorted_words = sort(words, by = length)\n    max_word\
    \ = sorted_words[end]\n    for i in 1:length(sorted_words)\n        set = Set(sorted_words[i])\n\
    \        if length(set) == length(max_word)\n            return sorted_words[i]\n\
    \        end\n    end\nend", "    curr_unique = length(unique(words[1]))\n   \
    \ res = words[1]\n    for w in words[2:end]\n        c = length(unique(w))\n \
    \       if c > curr_unique\n            curr_unique = c\n            res = w\n\
    \        elseif c == curr_unique\n            if w < res\n                res\
    \ = w\n            end\n        end\n    end\n    return res\nend", "    unique_characters\
    \ = map(x -> unique(x), words)\n    max_characters = maximum(map(x -> length(x),\
    \ unique_characters))\n    max_list = filter(x -> length(x) == max_characters,\
    \ unique_characters)\n    words[sortperm(unique_characters)[1]]\nend", "    #\
    \ Base case\n    if length(words) == 1\n        return words[1]\n    end\n   \
    \ \n    # Compare lexicographical order and number of characters\n    c1 = count_unique(words[1])\n\
    \    c2 = count_unique(words[2])\n    if c1 > c2\n        return find_max([words[1]])\n\
    \    elseif c1 < c2\n        return find_max([words[2]])\n    elseif words[1]\
    \ < words[2]\n        return find_max([words[1]])\n    else\n        return find_max([words[2]])\n\
    \    end\nend", "    local max_word = \"\"\n    local max_length = 0\n    for\
    \ word in words\n        if length(unique(word)) > max_length\n            max_word\
    \ = word\n            max_length = length(unique(word))\n        end\n    end\n\
    \    return max_word\nend", "    max_unique_chars = length(unique(words[1]))\n\
    \    max_unique_chars_idx = 1\n    for i = 2:length(words)\n        unique_chars\
    \ = length(unique(words[i]))\n        if unique_chars > max_unique_chars\n   \
    \         max_unique_chars = unique_chars\n            max_unique_chars_idx =\
    \ i\n        end\n    end\n    return words[max_unique_chars_idx]\nend", "   \
    \ # construct a dictionary with the number of unique characters\n    # as the\
    \ keys and the string as the value\n    d = Dict{Int, Vector{String}}()\n    for\
    \ word in words\n        d[length(unique(collect(word)))] = [word]\n    end\n\
    \    # sort the keys and select the first one\n    return sort(keys(d))[end]\n\
    end", "    unique_words = length.(map(Set, words))\n    return words[findfirst(unique_words\
    \ .== maximum(unique_words))]\nend", "    max_count = 0\n    max_word = \"\"\n\
    \    for word in words\n        unique_chars = unique(word)\n        if length(unique_chars)\
    \ > max_count\n            max_count = length(unique_chars)\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend", "    max_len = 0\n\
    \    max_word = \"\"\n    for i in 1:length(words)\n        j = 1\n        uniq_char\
    \ = Set()\n        for char in words[i]\n            push!(uniq_char, char)\n\
    \        end\n        if length(uniq_char) > max_len\n            max_len = length(uniq_char)\n\
    \            max_word = words[i]\n        end\n    end\n    return max_word\n\
    end", "    \"\"\"\n    Return the string with the max number of unique characters\n\
    \    \"\"\"\n    # create a dictionary of (word, unique_chars_in_word)\n    #\
    \ sort the dictionary by unique_chars_in_word\n    # return the first tuple[0]\n\
    \    \n    dict_words = Dict()\n    for word in words\n        dict_words[word]\
    \ = length(unique(word))\n    end\n    sorted_by_value = sort(collect(dict_words),\
    \ by=x->x[2], rev=true)\n    sorted_by_value[1][1]\nend", "    max_string = \"\
    \"\n    max_count = 0\n    for w in words\n        if count_unique(w) > max_count\n\
    \            max_string = w\n            max_count = count_unique(w)\n       \
    \ end\n    end\n    return max_string\nend\n ", "    n=length(words)\n    l=Int[]\n\
    \    for i in 1:n\n        append!(l, length(unique(collect(words[i]))))\n   \
    \ end\n    ind=findmax(l)[2]\n    return words[ind]\nend", "    max_word = \"\"\
    \n    max_len = 0\n    for word in words\n        word_len = length(unique(word))\n\
    \        if word_len > max_len \n            max_len = word_len\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend", "    longitud_palabra_maxima\
    \ = 0\n    palabra_maxima = \"\"\n    for palabra in words\n        numero_letras_unicas\
    \ = length(Set(chars(palabra)))\n        if numero_letras_unicas > longitud_palabra_maxima\n\
    \            longitud_palabra_maxima = numero_letras_unicas\n            palabra_maxima\
    \ = palabra\n        end\n    end\n    return palabra_maxima\nend", "    max_unique\
    \ = 0\n    max_unique_index = 0\n    for i in 1:length(words)\n        word =\
    \ words[i]\n        word_unique = length(unique(word))\n        if word_unique\
    \ > max_unique\n            max_unique = word_unique\n            max_unique_index\
    \ = i\n        end\n    end\n    return words[max_unique_index]\nend", "    unique_chars\
    \ = [length(unique(word)) for word in words]\n    max_value = maximum(unique_chars)\n\
    \    max_index = findall(unique_chars .== max_value)[1]\n    return words[max_index]\n\
    end", "    max_unique_chars = 0\n    max_unique_chars_word = \"\"\n    for word\
    \ in words\n        unique_chars = length(unique(word))\n        if unique_chars\
    \ > max_unique_chars\n            max_unique_chars = unique_chars\n          \
    \  max_unique_chars_word = word\n        end\n    end\n    return max_unique_chars_word\n\
    end", "    word_max, word_max_char = words[1], count_unique_chars(words[1])\n\
    \    for w in words[2:end]\n        w_char = count_unique_chars(w)\n        if\
    \ (w_char > word_max_char) || (w_char == word_max_char && w < word_max)\n    \
    \        word_max, word_max_char = w, w_char\n        end\n    end\n    return\
    \ word_max\nend", "    \"\"\"\n    Given a list of words, returns the word with\
    \ the maximum number of unique\n    characters. If multiple strings have maximum\
    \ number of unique characters,\n    returns the one which comes first in lexicographical\
    \ order.\n    \"\"\"\n    max_length = 0\n    unique_length = 0\n    max_word\
    \ = \"\"\n    for word in words\n        unique_length = length(unique(word))\n\
    \        if unique_length > max_length\n            max_length = unique_length\n\
    \            max_word = word\n        end\n    end\n    return max_word\nend",
  "    maxlength, word=0,\"\"\n    for i in words\n        count = length(unique(split(i,\"\
    \")))\n        if count > maxlength\n            maxlength, word = count, i\n\
    \        end\n    end\n    return word\nend", "    num_chars = Dict()\n    for\
    \ word in words\n        chars = Dict()\n        for char in collect(word)\n \
    \           chars[char] = 1\n        end\n        num_chars[word] = length(chars)\n\
    \    end\n    maximum(num_chars, dims=1)[2]\nend", "    \n    \n    \nend\n ",
  "    characters_seen::Set{String} = Set{String}()\n    word::String = \"\"\n   \
    \ if length(words) > 0\n        max_unique_characters = 0\n        for string_input\
    \ in words\n            characters_seen = Set{String}()\n            for character\
    \ in string_input\n                characters_seen = push!(characters_seen, character)\n\
    \            end\n            if length(characters_seen) > max_unique_characters\n\
    \                max_unique_characters = length(characters_seen)\n           \
    \     word = string_input\n            end\n        end\n    end\n    return word\n\
    end", "    max_word = \"\"\n    max_count = 0\n    for word in words\n       \
    \ count = count_unique(word)\n        if count > max_count\n            max_count\
    \ = count\n            max_word = word\n        end\n    end\n    return max_word\n\
    end", "    if length(words) == 0\n        throw(ArgumentError(\"Length of words\
    \ cannot be zero\"))\n    end\n    l = map(word -> length(Set(word)), words)\n\
    \    i = findall(l .== maximum(l))\n    i = i[1]\n    return words[i]\nend", " \
    \   max_ind = 1\n    for i = 2:length(words)\n        if length(unique(collect(words[i])))\
    \ > length(unique(collect(words[max_ind])))\n            max_ind = i\n       \
    \ end\n    end\n    return words[max_ind]\nend", "    max_index = 1\n    max_num_unique\
    \ = length(unique(words[1]))\n    #  Looping through all the indices\n    for\
    \ i in 2:length(words)\n        # if number of unique characters in that index\
    \ is greater than the \n        # the current max, then replace the max value\n\
    \        if length(unique(words[i])) > max_num_unique\n            max_num_unique\
    \ = length(unique(words[i]))\n            max_index = i\n        end\n    end\n\
    \    return words[max_index]\nend", "    word_set = Set{String}()\n    max_unique_set\
    \ = Set{String}()\n    for w in words\n        word_set = Set(w)\n        max_unique_set\
    \ = union(max_unique_set, word_set)\n    end\n    max_unique_vec = collect(max_unique_set)\n\
    \    max_str = max_unique_vec[1]\n    for w in max_unique_vec\n        if w <\
    \ max_str\n            max_str = w\n        end\n    end\n    return max_str\n\
    end", "    max_num = 0\n    max_idx = 0\n    for i in 1:length(words)\n      \
    \  word = words[i]\n        word_count = Set(countmap(word))\n        if length(word_count)\
    \ > max_num\n            max_num = length(word_count)\n            max_idx = i\n\
    \        end\n    end\n    return words[max_idx]\nend", "    max_word = \"\"\n\
    \    max_char = 0\n    for word in words\n        if length(unique(word)) > max_char\n\
    \            max_char = length(unique(word))\n            max_word = word\n  \
    \      end\n    end\n    return max_word\nend", "    # your code here\n    n =\
    \ length(words)\n    max_words = []\n    max_chars = 0\n    for i in 1:n\n   \
    \     chars = unique(collect(words[i]))\n        if length(chars) >= max_chars\n\
    \            max_chars = length(chars)\n            push!(max_words,i)\n     \
    \   end\n    end\n    if length(max_words) == 1\n        return words[max_words[1]]\n\
    \    else\n        max_ind = max_words[1]\n        for i in max_words\n      \
    \      if words[i] < words[max_ind]\n                max_ind = i\n           \
    \ end\n        end\n        return words[max_ind]\n    end\nend", "    max_word\
    \ = \"\"\n    max_chars = 0\n    for word in words\n        unique_chars = unique(word)\n\
    \        if length(unique_chars) > max_chars\n            max_chars = length(unique_chars)\n\
    \            max_word = word\n        end\n    end\n    return max_word\nend",
  "    max_count = 0\n    max_word = \"\"\n    for word in words\n        if count_unique(word)\
    \ > max_count \n            max_count = count_unique(word)\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend", "    if length(words)\
    \ == 0\n        return \"\"\n    end\n    max_string = words[1]\n    max_unique_chars\
    \ = length(unique(chars(max_string)))\n    for i = 2:length(words)\n        word\
    \ = words[i]\n        num_unique_chars = length(unique(chars(word)))\n       \
    \ if num_unique_chars > max_unique_chars ||\n                (num_unique_chars\
    \ == max_unique_chars && word < max_string)\n            max_string = word\n \
    \           max_unique_chars = num_unique_chars\n        end\n    end\n    return\
    \ max_string\nend", "    result = \"\"\n    max = 0\n    for word in words\n \
    \       if length(unique(word)) > max\n            max = length(unique(word))\n\
    \            result = word\n        end\n    end\n    return result\nend", " \
    \   # sort the words by number of unique characters\n    words_sort = sort(words,\
    \ by=length, rev=true)\n    # get words with maximum number of unique characters\n\
    \    max_words = [w for w in words_sort if length(w) == length(words_sort[1])]\n\
    \    # sort maximum words in lexicographical order\n    max_words_sort = sort(max_words)\n\
    \    # return the first word\n    return max_words_sort[1]\nend", "    max_unique_count\
    \ = 0\n    max_unique_word = \"\"\n    for w in words\n        unique_count =\
    \ length(unique(w))\n        if unique_count > max_unique_count\n            max_unique_count\
    \ = unique_count\n            max_unique_word = w\n        end\n    end\n    return\
    \ max_unique_word\nend", "    indices = []\n    for i in 1:length(words)\n   \
    \     indices = append!(indices, length(unique(string(words[i]))))\n    end\n\
    \    index_of_max = indmax(indices)\n    answer = words[index_of_max]\n    answer\n\
    end", "    max = 0\n    res = \"\"\n    for i in 1:length(words)\n        tmp\
    \ = length(unique(words[i]))\n        if tmp > max\n            max = tmp\n  \
    \          res = words[i]\n        end\n    end\n    return res\nend", "    answer\
    \ = \"\"\n    maximum = 0\n    for word in words\n        unique = unique_characters(word)\n\
    \        if unique > maximum\n            maximum = unique\n            answer\
    \ = word\n        end\n    end\n    return answer\nend", "  max_unique_chars =\
    \ 0\n  max_unique_string = \"\"\n  for word in words\n    unique_chars = length(unique(chars(word)))\n\
    \    if unique_chars > max_unique_chars\n      max_unique_chars = unique_chars\n\
    \      max_unique_string = word\n    end\n  end\n  return max_unique_string\n\
    end", "    \"\"\"Return the word with maximum number of unique characters.\n \
    \   If multiple strings have maximum number of unique characters, \n    return\
    \ the one which comes first in lexicographical order.\n    \"\"\"\n    return\
    \ maximum([(length(unique(word)), word) for word in words])[2]\nend", "    max\
    \ = maximum(w -> length(unique(w)), words) \n    return findfirst(w -> length(unique(w))\
    \ == max, words)\nend", "    max_unique_length = 0\n    max_word = \"\"\n    for\
    \ word in words\n        unique_length = length(unique(word))\n        if unique_length\
    \ > max_unique_length\n            max_unique_length = unique_length\n       \
    \     max_word = word\n        end\n    end\n    return max_word\nend", "    words_max_char\
    \ = 0\n    words_max_num = 0\n    words_max_char_idx = 0\n    for i in 1:length(words)\n\
    \        if words_max_num < length(unique(words[i]))\n            words_max_num\
    \ = length(unique(words[i]))\n            words_max_char_idx = i\n        end\n\
    \    end\n    return words[words_max_char_idx]\nend", "    # 1. find word with\
    \ max number of unique characters\n    max_char_count = 0\n    max_word = \"\"\
    \n    for word in words\n        if length(unique(word)) > max_char_count\n  \
    \          max_char_count = length(unique(word))\n            max_word = word\n\
    \        end\n    end\n    # 2. handle case when there are multiple words with\
    \ max number of unique characters\n    for word in words\n        if length(unique(word))\
    \ == max_char_count && word < max_word\n            max_word = word\n        end\n\
    \    end\n    return max_word\nend", "    #using Base.sort # for sorting in place\n\
    \    #using Base.sort! # for sorting in place and mutating original vector\n \
    \   #using Base.sort # for sorting without mutating original vector\n    #using\
    \ StatsBase.sort # for sorting without mutating original vector", "    max_unique,\
    \ max_word = 0, \"\"\n    for word in words\n        unique_chars = unique(word)\n\
    \        unique_chars_count = length(unique_chars)\n        if unique_chars_count\
    \ > max_unique\n            max_unique, max_word = unique_chars_count, word\n\
    \        elseif unique_chars_count == max_unique\n            if word < max_word\n\
    \                max_word = word\n            end\n        end\n    end\n    return\
    \ max_word\nend", "    max_length = 0\n    max_word = \"\"\n    for word in words\n\
    \        if length(unique(word)) > max_length\n            max_length = length(unique(word))\n\
    \            max_word = word\n        end\n    end\n    return max_word\nend",
  "    max_num_letters = 0\n    max_word = \"\"\n    for word in words\n        if\
    \ max_num_letters < length(unique(word))\n            max_num_letters = length(unique(word))\n\
    \            max_word = word\n        end\n    end\n    return max_word\nend",
  "    # convert words to a vector of (word, no of unique characters)\n    word_len_tuple\
    \ = [(word, length(unique(word))) for word in words]\n    # get the maximum unique\
    \ character length and the index\n    max_len, max_len_index = findmax(word_len_tuple,\
    \ by=x->x[2])\n    return word_len_tuple[max_len_index][1]\nend", "    max_unique_letters\
    \ = 0\n    max_unique_string = \"\"\n    for word in words\n        unique_letters\
    \ = unique(word)\n        if length(unique_letters) > max_unique_letters\n   \
    \         max_unique_letters = length(unique_letters)\n            max_unique_string\
    \ = word\n        end\n    end\n    return max_unique_string\nend", "    \n  \
    \  # To store the result\n    max_unique_word = \"\"\n    \n    # To store maximum\
    \ count of unique \n    # characters in a word\n    max_unique_count = 0\n   \
    \ \n    for word in words\n        \n        unique_set = Set{Char}()\n      \
    \  \n        # traverse every character in a word\n        for ch in word\n  \
    \          \n            # if character is not encountered before, \n        \
    \    # increment count and insert it into set\n            if !(ch in unique_set)\n\
    \                push!(unique_set, ch)\n            end\n        end\n       \
    \ \n        # compare maximum count with \n        # current count and update\
    \ \n        # maximum count if required\n        if length(unique_set) > max_unique_count\n\
    \            max_unique_count = length(unique_set)\n            max_unique_word\
    \ = word\n        end\n    end\n    \n    return max_unique_word\nend", "    \"\
    \"\"Return the word with max number of unique chars.\"\"\"\n    # Find the word\
    \ with maximum number of unique characters\n    # If multiple words have maximum\
    \ number of unique characters,\n    # return the one which comes first in lexicographical\
    \ order.\n    max_word = \"\"\n    max_chars = 0\n    for word in words\n    \
    \    unique_chars = length(unique(word))\n        if unique_chars > max_chars\n\
    \            max_chars = unique_chars\n            max_word = word\n        end\n\
    \    end\n    return max_word\nend", "    return sort(words)[end]\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
