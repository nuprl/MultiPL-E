name: HumanEval_153_Strongest_Extension
language: jl
prompt: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
  \    The extensions are to be used to load additional classes to the class. The\n\
  \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  \    letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
  \ \n    You should find the strongest extension and return a string in this \n \
  \   format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
  \ with the same strength, you should\n    choose the one that comes first in the\
  \ list.\n    For example, if you are given \"Slices\" as the class and a list of\
  \ the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
  \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
  \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
  \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
  \ extensions::Vector{String})::String \n"
tests: "using Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
  Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
  Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
  )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
  , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
  K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
  __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
  YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
  YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"\
  Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\", \"91245\"\
  ]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\"\
  )\nend\n"
completions: ["    function calculate_strength(extension)::Float64\n        upper_case_letters\
    \ = 0\n        lower_case_letters = 0\n        for i = 1:length(extension)\n \
    \           if isupper(extension[i])\n                upper_case_letters += 1\n\
    \            elseif islower(extension[i])\n                lower_case_letters\
    \ += 1\n            end\n        end\n        return upper_case_letters - lower_case_letters\n\
    \    end\n    \n    strengths = map(calculate_strength, extensions)\n    max_strength\
    \ = maximum(strengths)\n    max_strength_index = indmax(strengths)\n    return\
    \ class_name * \".\" * extensions[max_strength_index]\nend", "    cap::Int64 =\
    \ 0\n    cap_idx::Int64 = 0\n    sm::Int64 = 0\n    sm_idx::Int64 = 0\n    for\
    \ (i, str) in enumerate(extensions)\n        for (j, ch) in enumerate(str)\n \
    \           if !isalpha(ch)\n                continue\n            end\n     \
    \       if isupper(ch)\n                cap += 1\n            else\n         \
    \       sm += 1\n            end\n        end\n        if (cap - sm) >= 0 && (cap\
    \ - sm) > (cap_idx - sm_idx)\n            cap_idx = cap\n            sm_idx =\
    \ sm\n        end\n        cap = 0\n        sm = 0\n    end\n    return \"$class_name.$extensions[$(cap_idx\
    \ - sm_idx)]\"\nend", "    strength = [0.0]\n    index = 0\n    for i = 1:length(extensions)\n\
    \        uppercase_count = 0\n        lowercase_count = 0\n        for j = 1:length(extensions[i])\n\
    \            if uppercase(extensions[i][j]) == extensions[i][j]\n            \
    \    uppercase_count += 1\n            elseif lowercase(extensions[i][j]) == extensions[i][j]\n\
    \                lowercase_count += 1\n            end\n        end\n        strength\
    \ = append!(strength, uppercase_count - lowercase_count)\n        if strength[i]\
    \ > strength[i+1]\n            index = i\n        end\n    end\n    return class_name\
    \ * \".\" * extensions[index]\nend", "    max_strength, strongest_extension =\
    \ 0, \"\"\n    for extension in extensions\n        caps, smalls = 0, 0\n    \
    \    for letter in extension\n            if letter in upper(string(letter))\n\
    \                caps += 1\n            elseif letter in lower(string(letter))\n\
    \                smalls += 1\n            end\n        end\n        if max_strength\
    \ == 0 || (caps - smalls) > max_strength\n            max_strength = caps - smalls\n\
    \            strongest_extension = extension\n        end\n    end\n    return\
    \ class_name * \".\" * strongest_extension\nend", "    # CAP = sum(class_name\
    \ .>= 'A' .& class_name .<= 'Z')\n    # SM = sum(class_name .>= 'a' .& class_name\
    \ .<= 'z')\n    # return CAP - SM\n    strengths = [sum(extension .>= 'A' .& extension\
    \ .<= 'Z') - sum(extension .>= 'a' .& extension .<= 'z') for extension in extensions]\n\
    \    return \"$class_name.$(extensions[indmax(strengths)])\"\nend", "    # find\
    \ strengths for each extension\n    strengths = [sum(isupper.(x)) - sum(islower.(x))\
    \ for x in extensions]\n    strongest_extension = extensions[argmax(strengths)]\n\
    \    return string(class_name, \".\", strongest_extension)\nend", "    # your\
    \ code goes here\n    strength = zeros(size(extensions))\n    for i = 1:length(extensions)\n\
    \        strength[i] = sum(extensions[i] .>= 'A') - sum(extensions[i] .<= 'z')\n\
    \    end\n    i = findmax(strength)[2]\n    #println(i)\n    return class_name\
    \ * \".\" * extensions[i]\nend", "    cap_counts = 0.0\n    sm_counts = 0.0\n\
    \    ext_counts = 0.0\n    strongest_extension = \"\"\n    # Iterate through every\
    \ extension\n    for i = 1:length(extensions)\n        ext = extensions[i]\n \
    \       # For every single character, check if it is uppercase or lowercase\n\
    \        for j = 1:length(ext)\n            c = ext[j]\n            if isupper(c)\n\
    \                cap_counts += 1\n            elseif islower(c)\n            \
    \    sm_counts += 1\n            end\n        end\n        # Find the strongest\
    \ extension\n        if cap_counts - sm_counts > ext_counts\n            ext_counts\
    \ = cap_counts - sm_counts\n            strongest_extension = ext\n        end\n\
    \        cap_counts = 0.0\n        sm_counts = 0.0\n    end\n    return class_name\
    \ * \".\" * strongest_extension\nend", "    current_strongest_extension = \"\"\
    \n    current_extension_strength = -Inf\n    for ext in extensions\n        cap\
    \ = 0\n        sm = 0\n        for c in ext\n            if isupper(c)\n     \
    \           cap += 1\n            else\n                sm += 1\n            end\n\
    \        end\n        if cap - sm > current_extension_strength\n            current_strongest_extension\
    \ = ext\n            current_extension_strength = cap - sm\n        end\n    end\n\
    \    return \"$class_name.$current_strongest_extension\"\nend", "    max_strength\
    \ = -1\n    strongest_extension = \"\"\n    for ext in extensions\n        uppercase_chars\
    \ = count(c -> isupper(c), ext)\n        lowercase_chars = count(c -> islower(c),\
    \ ext)\n        strength = uppercase_chars - lowercase_chars\n        if strength\
    \ > max_strength\n            max_strength = strength\n            strongest_extension\
    \ = ext\n        end\n    end\n    return \"$class_name.$strongest_extension\"\
    \nend", "    N = length(extensions)\n    cnt = 0\n    strongest_extension = \"\
    \"\n    while cnt < N\n        if strongest_extension == \"\"\n            strongest_extension\
    \ = extensions[cnt]\n        else\n            strongest_extension = if Strength(extensions[cnt])\
    \ > Strength(strongest_extension)\n                                    extensions[cnt]\n\
    \                                else\n                                    strongest_extension\n\
    \                                end\n        end\n        cnt += 1\n    end\n\
    \    class_name * \".\" * strongest_extension\nend", "    max_strength = -Inf\n\
    \    strongest_extension = \"\"\n    for ext in extensions\n        strength =\
    \ count(x -> x in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', ext) - \n                    count(x\
    \ -> x in 'abcdefghijklmnopqrstuvwxyz', ext)\n        if strength > max_strength\n\
    \            max_strength = strength\n            strongest_extension = ext\n\
    \        end\n    end\n    class_name * \".\" * strongest_extension\nend", " \
    \   caps = count_caps(extensions)\n    smalls = count_smalls(extensions)\n   \
    \ strong = caps - smalls\n    strength = dict(zip(extensions, strong))\n    strongest\
    \ = [value for value in strength.values() if value == maximum(strong)]\n    return\
    \ \"$class_name.$(strongest[1])\"\nend", "    strs = [count_upper(x) - count_lower(x)\
    \ for x in extensions]\n    strs = strs .+ 100 .* range(1, stop=length(strs))\n\
    \    imax = findmax(strs)[2]\n    return \"$class_name.$(extensions[imax])\"\n\
    end", "    strongest_extension_name = \"\"\n    strongest_extension_strength =\
    \ 0.0\n    for extension in extensions\n        caps = length(search(extension,\
    \ '[A-Z]'))\n        sms = length(search(extension, '[a-z]'))\n        strength\
    \ = caps - sms\n        if strength > strongest_extension_strength\n         \
    \   strongest_extension_name = extension\n            strongest_extension_strength\
    \ = strength\n        end\n    end\n    return \"$class_name.$strongest_extension_name\"\
    \nend", "    cap = 0\n    sm = 0\n    index = 1\n    j = 1\n    result = \"\"\n\
    \    cap_list = []\n    sm_list = []\n    strength_list = []\n    for i in extensions\n\
    \        for k in i\n            if isupper(k)\n                cap += 1\n   \
    \         else\n                sm += 1\n            end\n        end\n      \
    \  push!(cap_list, cap)\n        push!(sm_list, sm)\n        push!(strength_list,\
    \ (cap - sm))\n        cap = 0\n        sm = 0\n    end\n    #println(cap_list)\n\
    \    #println(sm_list)\n    #println(strength_list)\n    #println(typeof(strength_list))\n\
    \    #println(strength_list[1])\n    #println(strength_list[1] >= strength_list[2])\n\
    \    while j < length(strength_list)\n        if strength_list[j] > strength_list[j+1]\n\
    \            index = j\n        end\n        j += 1\n    end\n    #println(index)\n\
    \    #println(extensions[index])\n    result = class_name * \".\" * extensions[index]\n\
    \    #println(result)\n    return result\nend", "    # Note that length(extensions)\
    \ can be zero.\n    strength_max = -Inf # maximum extension strength, the default\
    \ value is -infinity\n    strongest_extension = \"\" # the name of the strongest\
    \ extension, the default value is an empty string\n    for ext in extensions\n\
    \        strength = count(ext.isupper) - count(ext.islower)\n        if strength\
    \ > strength_max\n            strength_max = strength\n            strongest_extension\
    \ = ext\n        end\n    end\n    return class_name * \".\" * strongest_extension\n\
    end", "    max, strongest = 0, \"\"\n    for i in 1:length(extensions)\n     \
    \   ext = extensions[i]\n        caps, smalls = 0, 0\n        for letter in ext\n\
    \            if letter in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n                caps +=\
    \ 1\n            elseif letter in 'abcdefghijklmnopqrstuvwxyz'\n             \
    \   smalls += 1\n            end\n        end\n        strength = caps - smalls\n\
    \        if strength > max\n            max, strongest = strength, ext\n     \
    \   end\n    end\n    return class_name * \".\" * strongest\nend\n \n \n\"\"\"\
    You will be given a list of DNA codons and a DNA string. \n    You should return\
    \ a string in this format:\n    codon->amino\n    Each codon and its amino are\
    \ separated by a \"->\".\n    Codons are separated by a comma and a space(\",\
    \ \").\n    The amino acids are always capitalized.\n    If the DNA string contains\
    \ a codon that is not on the list you should\n    replace it with a \"?\", and\
    \ you should return a \"?\".\n    Example:\n    for Codon_Translation([\"ATG\"\
    , \"AAG\", \"GTT\"], \"GTTAAGTTATG\") == \"GTT->A, ATG->M\"\n    \"\"\"", "  \
    \  strenght = 0.0\n    extension = \"\"\n    for i in extensions\n        cap\
    \ = count(isupper, i)\n        sm = count(islower, i)\n        if cap-sm > strenght\n\
    \            strenght = cap-sm\n            extension = i\n        end\n    end\n\
    \    return class_name * \".\" * extension\nend", "    i = 0\n    strength = -1\n\
    \    for ext in extensions\n        cap = 0\n        sm = 0\n        for c in\
    \ ext\n            if isupper(c)\n                cap += 1\n            else\n\
    \                sm += 1\n            end\n        end\n        if (cap - sm)\
    \ > strength\n            strength = cap - sm\n            my_ext = ext\n    \
    \    end\n    end\n    return class_name * \".\" * my_ext\nend", "    # function\
    \ that computes the strength\n    function strength(extension)::Float64\n    \
    \    return (sum(extension.^(Upper_Case)) - sum(extension.^(Lower_Case))) / length(extension)\n\
    \    end\n    # initialize the strength value, maximum\n    strength_value = 0.0\n\
    \    maximum = \"\"\n    # iterate through the extensions vector\n    for i in\
    \ 1:length(extensions)\n        # get the current strength value\n        strength_value\
    \ = strength(extensions[i])\n        # set the current maximum to be the extension\
    \ with the maximum strength value\n        if strength_value > strength(maximum)\n\
    \            maximum = extensions[i]\n        end\n    end\n    # return the class\
    \ name with the extension\n    return \"$class_name.$maximum\"\nend", "    caps\
    \ = [count(isupper, ext) for ext in extensions]\n    lowers = [count(islower,\
    \ ext) for ext in extensions]\n    strength = [caps[i] - lowers[i] for i in 1:length(caps)]\n\
    \    ind = findall(x -> x == maximum(strength), strength)\n    if length(ind)\
    \ == 1\n        ext = extensions[ind[1]]\n    elseif length(ind) > 1\n       \
    \ ext = extensions[ind[1]]\n    end\n    return \"$class_name.$ext\"\nend", " \
    \   num_uppercase(s::String) = sum(isupper.(s))\n    num_lowercase(s::String)\
    \ = sum(islower.(s))\n    strengths = [((num_uppercase(ext) - num_lowercase(ext))/length(ext))\
    \ for ext in extensions]\n    strongest_extension = extensions[find(strengths\
    \ .== maximum(strengths))[1]]\n    return \"$class_name.$strongest_extension\"\
    \nend", "    # [['SErviNGSliCes', -1], ['Cheese', 0], ['StuFfed', 0]]\n    strengths\
    \ = [[x, cap2str(x)] for x in extensions]\n    return \"$class_name.$(maximum(strengths)[1])\"\
    \nend", "    \"\"\"\n    cap_sm = [sum(upper(ext))-sum(lower(ext)) for ext in\
    \ extensions]\n    idx_max = argmax(cap_sm)\n    return \"$class_name.$(extensions[idx_max])\"\
    \n    \"\"\"\n    max_strength = -Inf\n    result = \"$class_name.none\"\n   \
    \ for ext in extensions\n        if sum(upper(ext))-sum(lower(ext)) > max_strength\n\
    \            max_strength = sum(upper(ext))-sum(lower(ext))\n            result\
    \ = \"$class_name.$ext\"\n        end\n    end\n    return result\nend", "   \
    \ capp = 0\n    sm = 0\n    strength = 0\n    strongest_extension = \"\"\n   \
    \ for i in 1:length(extensions)\n        for j in 1:length(extensions[i])\n  \
    \          if (extensions[i][j] == uppercase(extensions[i][j]))\n            \
    \    capp += 1\n            elseif (extensions[i][j] == lowercase(extensions[i][j]))\n\
    \                sm += 1\n            end\n        end\n        if (capp - sm\
    \ > strength)\n            strength = capp - sm\n            strongest_extension\
    \ = extensions[i]\n        end\n        capp = 0\n        sm = 0\n    end\n  \
    \  class_name * \".\" * strongest_extension\nend", "    # get a vector of the\
    \ strengths of each extension (CAP - SM)\n    strengths = [length(str) - sum(islower.(str))\
    \ for str in extensions]\n    # find the index of the maximal strength\n    max_index\
    \ = indmax(strengths)\n    # return ClassName.StrongestExtensionName\n    return\
    \ \"$class_name.$(extensions[max_index])\"\nend\n```", "    total = 0\n    extension\
    \ = 0\n    for i in 1:length(extensions)\n        for j in 1:length(extensions[i])\n\
    \            if Char.isupper(extensions[i][j])\n                total += 1\n \
    \           elseif Char.islower(extensions[i][j])\n                total -= 1\n\
    \            end\n        end\n        if total > extension\n            extension\
    \ = total\n            ext = extensions[i]\n        end\n    end\n    return \"\
    $class_name.$ext\"\nend", "    lst = Array{String,1}[]\n    for i in extensions\n\
    \        lst = [lst; split(i)]\n    end\n    lst = lst[2:end]\n    lst = [lst[i]*\"\
    .\" for i in 1:length(lst)]\n    lst = lst[1:end-1]\n    lst = [lst[i][1] for\
    \ i in 1:length(lst)]\n    a = [\"\" for i in 1:length(lst)]\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if (lst[i][j] in string(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ))\n                a[i] = a[i]*\"1\"\n            else\n                a[i]\
    \ = a[i]*\"0\"\n            end\n        end\n    end\n    lst = [length(string(a[i],\"\
    1\")) for i in 1:length(a)]\n    lst2 = [length(string(a[i],\"0\")) for i in 1:length(a)]\n\
    \    lst = lst - lst2\n    a = findall(x->x==maximum(lst),lst)\n    b = a[1]\n\
    \    return class_name*\".\"*extensions[b]\nend", "    if length(extensions) ==\
    \ 0 return class_name end\n    strength = -Inf\n    for i in 1:length(extensions)\n\
    \        ext_strength = sum(isupper.(extensions[i])) - sum(islower.(extensions[i]))\n\
    \        if ext_strength > strength\n            strongest_ext = extensions[i]\n\
    \            strength = ext_strength\n        end\n    end\n    return string(class_name,\
    \ \".\", strongest_ext)\nend", "    # write your code here\n    return\nend",
  "    strength = 0\n    CAP = 0\n    SM = 0\n    str_ext = \"\"\n    for i in 1:length(extensions)\n\
    \        CAP = 0\n        SM = 0\n        ext = extensions[i]\n        for j in\
    \ 1:length(ext)\n            if isupper(ext[j])\n                CAP += 1\n  \
    \          else\n                SM += 1\n            end\n        end\n     \
    \   if strength == 0\n            strength = CAP - SM\n            str_ext = ext\n\
    \        elseif (CAP - SM) > strength\n            strength = CAP - SM\n     \
    \       str_ext = ext\n        end\n    end\n    return class_name * \".\" * str_ext\n\
    end", "    strongest_extension = \"\"\n    strongest_extension_strength = 0\n\
    \    for extension in extensions\n        if extension == \"\"\n            continue\n\
    \        end\n        extension_strength = get_extension_strength(extension)\n\
    \        if extension_strength > strongest_extension_strength\n            strongest_extension\
    \ = extension\n            strongest_extension_strength = extension_strength\n\
    \        end\n    end\n    return string(class_name, \".\", strongest_extension)\n\
    end\n\"\"\" \n    HELPER METHODS\n\"\"\"", "    strenght::Vector{Int} = zeros(length(extensions),1)\n\
    \    class_final::String = class_name\n    strength_max::Int = -1\n    for i in\
    \ 1:length(extensions)\n        strenght[i] = sum(extensions[i] .>= 'A') - sum(extensions[i]\
    \ .<= 'z')\n        if strenght[i] > strength_max\n            strength_max =\
    \ strenght[i]\n            class_final = class_name * \".\" * extensions[i]\n\
    \        end\n    end\n    return class_final\nend", "    return class_name *\
    \ \".\" * Strongest_Extension_aux(extensions)\nend", "    strengths = -Inf\n \
    \   for i in extensions\n        cap = length(string(i[findall(isdigit, i)]))\n\
    \        small = length(string(i[findall(isalpha, i)]))\n        if cap - small\
    \ > strengths\n            index = extensions[i]\n            strengths = cap\
    \ - small\n        end\n    end\n    return string(class_name, \".\", index)\n\
    end", "    #Your code here\n    return \"my_class.AA\"\nend", "    strength_list\
    \ = [sum(isupper.(e)) - sum(islower.(e)) for e in extensions]\n    \"not very\
    \ elegant:\"\n    maximum_value = maximum(strength_list)\n    first_match = findfirst(strength_list\
    \ .== maximum_value)\n    string_extension = extensions[first_match]\n    full_name\
    \ = string(class_name, \".\", string_extension)\n    return full_name\nend", " \
    \   sm = []\n    for ext in extensions\n        sm = push!(sm, sum(isupper.(ext))\
    \ - sum(islower.(ext)))\n    end\n    return class_name * \".\" * extensions[argmax(sm)]\n\
    end", "    n = length(extensions)\n    if n == 0\n        return \"There are no\
    \ extensions\"\n    end\n    strengths = []\n    for i in 1:n\n        push!(strengths,\
    \ -sum(extensions[i] .< \"a\") + sum(extensions[i] .< \"A\"))\n    end\n    strongest\
    \ = strengths[1]\n    for i in 2:n\n        if strengths[i] > strongest\n    \
    \        strongest = strengths[i]\n        end\n    end\n    str = class_name\
    \ * \".\" * extensions[1]\n    for i in 2:n\n        if strengths[i] == strongest\n\
    \            str = class_name * \".\" * extensions[i]\n            break\n   \
    \     end\n    end\n    return str\nend", "    max = 0\n    my_ext = \"\"\n  \
    \  for ext in extensions\n        cap = 0\n        sm = 0\n        for c in ext\n\
    \            if is_uppercase(c)\n                cap += 1\n            else\n\
    \                sm += 1\n            end\n        end\n        if cap - sm >\
    \ max\n            max = cap - sm\n            my_ext = ext\n        end\n   \
    \ end\n    return class_name * \".\" * my_ext\nend", "    strength = -1\n    extension\
    \ = class_name\n    for i in 1:length(extensions)\n        if(class_name[1] ==\
    \ extensions[i][1])\n            if(class_name[end] == extensions[i][end])\n \
    \               cap = length(filter(x -> x in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', extensions[i]))\n\
    \                sm = length(filter(x -> x in 'abcdefghijklmnopqrstuvwxyz', extensions[i]))\n\
    \                if((cap - sm) > strength)\n                    strength = cap\
    \ - sm\n                    extension = extensions[i]\n                end\n \
    \           end\n        end\n    end\n    return string(class_name, \".\", extension)\n\
    end", "    cap = [sum(isupper.(x)) for x in extensions] # Number of uppercase\
    \ letters\n    sm = [sum(islower.(x)) for x in extensions] # Number of lowercase\
    \ letters\n    strength = [cap[i] - sm[i] for i in 1:length(cap)] # Strength of\
    \ extensions\n    idx = findmax(strength)[2] # Find the strongest extension\n\
    \    return \"$class_name.$(extensions[idx])\" # Return the strongest extension\n\
    end", "    max_strength = -Float64.MAX\n    class_extension = \"\"\n    for ext\
    \ in extensions\n        num_upper = sum(isupper.(ext))\n        num_lower = sum(islower.(ext))\n\
    \        strength = num_upper - num_lower\n        if strength > max_strength\n\
    \            max_strength = strength\n            class_extension = ext\n    \
    \    end\n    end\n    return class_name * \".\" * class_extension\nend", "  \
    \  idx = 0\n    cap = 0\n    sm = 0\n    st = 0\n    for i in 1:length(extensions)\n\
    \        if isuppercase(extensions[i])\n            cap += 1\n        else\n \
    \           sm += 1\n        end\n        if ((cap - sm) >= st)\n            idx\
    \ = i\n            st = cap - sm\n        end\n    end\n    return \"$class_name.$extensions[idx]\"\
    \nend", "    strs = Dict()\n    for ext in extensions\n        u_count = sum(isupper.(ext))\n\
    \        l_count = sum(islower.(ext))\n        strs[ext] = u_count - l_count\n\
    \    end\n    strongest = \"\"\n    str = -Inf\n    for ext in strs\n        if\
    \ ext[2] > str\n            strongest = ext[1]\n            str = ext[2]\n   \
    \     end\n    end\n    return class_name * \".\" * strongest\nend", "    strength(s::String)\
    \ = sum(char -> char in 'A':'Z' ? 1 : 0, s) - sum(char -> char in 'a':'z' ? 1\
    \ : 0, s)\n    strengths = [strength(extension) for extension in extensions]\n\
    \    strongest_index = indmax(strengths)\n    return \"$class_name.$(extensions[strongest_index])\"\
    \nend", "    n = length(extensions)\n    diffs = Float64[]\n    for k = 1:n\n\
    \        cap = sum(isupper.(extensions[k]))\n        sm = sum(islower.(extensions[k]))\n\
    \        push!(diffs, cap - sm)\n    end\n    idx = findmax(diffs)[2]\n    return\
    \ class_name * \".\" * extensions[idx]\nend", "    strengths = Vector{Float64}(undef,\
    \ length(extensions))\n    for i in 1:length(extensions)\n        strengths[i]\
    \ = length(filter(isupper, extensions[i])) - length(filter(islower, extensions[i]))\n\
    \    end\n    index = indmax(strengths)\n    return class_name * \".\" * extensions[index]\n\
    end", "    strength::Float64 = -1\n    strongest_ext::String = \"0\"\n    for\
    \ i in 1:length(extensions)\n        current_ext::String = extensions[i]\n   \
    \     lower_case::Int = sum(islower.(collect(current_ext)))\n        upper_case::Int\
    \ = sum(isupper.(collect(current_ext)))\n        current_strength::Float64 = upper_case\
    \ - lower_case\n        if current_strength > strength\n            strength =\
    \ current_strength\n            strongest_ext = current_ext\n        end\n   \
    \ end\n    return class_name * \".\" * strongest_ext\nend", "    max_strength\
    \ = -Inf\n    strongest_extension = \"\"\n    for extension in extensions\n  \
    \      strength = Extension_Strength(extension)\n        if strength > max_strength\n\
    \            max_strength = strength\n            strongest_extension = extension\n\
    \        end\n    end\n    return class_name * \".\" * strongest_extension\nend",
  "    strengths = [count_upper(x) - count_lower(x) for x in extensions]\n    strength_inds\
    \ = findall(strengths .== maximum(strengths))[1]\n    strength_ind = strength_inds[1]\n\
    \    return \"$class_name.$(extensions[strength_ind])\"\nend", "    \"\"\" Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})\n    =\n        begin\n            class_name *\
    \ '.' * Strongest_Extension(extensions)\n        end\n    \"\"\"\n    class_name\
    \ = string(class_name) * '.' * Strongest_Extension(extensions)\n    return class_name\n\
    end", "    m = [get_strength(ext) for ext in extensions]\n    return \"$class_name.$(extensions[findmax(m)[2]])\"\
    \nend", "    class_strength = 0.0\n    strongest_extension = \"\"\n    for ext\
    \ in extensions\n        caps = sum(Char.(uppercase(ext)))\n        smalls = sum(Char.(lowercase(ext)))\n\
    \        strength = caps - smalls\n        if strength > class_strength\n    \
    \        class_strength = strength\n            strongest_extension = ext\n  \
    \      end\n    end\n    return class_name * \".\" * strongest_extension\nend",
  "    cap_strength = Array{Int64}(0)\n    for extension in extensions\n        cap_strength\
    \ = append!(cap_strength, count_uppercase(extension) - count_lowercase(extension))\n\
    \    end\n    return class_name * \".\" * extensions[argmax(cap_strength)] * \"\
    \"\nend", "    return \"$class_name.$(extensions[findmax(map(e->sum(islowercase.(e))-sum(isuppercase.(e)),\
    \ extensions))[2]])\"\nend", "    # Define a function which takes the name of\
    \ a extension and returns the strength:\n    strength(extension) = sum(isupper.(extension))\
    \ - sum(islower.(extension))\n    # Find the strongest extension:\n    strongest_extension\
    \ = extensions[argmax(strength.(extensions))]\n    # Return the strongest extension:\n\
    \    return \"$class_name.$strongest_extension\"\nend", "    strenght_dict = Dict{Float64,\
    \ String}()\n    for extension in extensions\n        strenght_dict[(sum(extension\
    \ .>= 'A') - sum(extension .<= 'z')) / size(extension)[1]] = extension\n    end\n\
    \    sort!(collect(keys(strenght_dict)))\n    return \"$class_name.$(strenght_dict[collect(keys(strenght_dict))[end]])\"\
    \nend", "    strength = [sum(isupper.(x)) - sum(islower.(x)) for x in extensions]\n\
    \    class_extension = [class_name * \".\" * extensions[i] for i in eachindex(extensions)]\n\
    \    return class_extension[argmax(strength)]\nend", "    max_strength, res_extension\
    \ = -Float64(Inf), \"\"\n    for extension in extensions\n        strength = count_upper(extension)\
    \ - count_lower(extension)\n        if strength > max_strength\n            max_strength,\
    \ res_extension = strength, extension\n        end\n    end\n    return class_name\
    \ * \".\" * res_extension\nend", "    # Calculate the number of uppercase letters\
    \ in each word of the vector extensions\n    count_upper_case = map(word -> length(regexp(r\"\
    [A-Z]\", word)), extensions)\n    # Calculate the number of lowercase letters\
    \ in each word of the vector extensions\n    count_lower_case = map(word -> length(regexp(r\"\
    [a-z]\", word)), extensions)\n    # Calculate the strength of each word in the\
    \ vector extensions\n    strength = map(x -> x[1] - x[2], zip(count_upper_case,\
    \ count_lower_case))\n    # Pick the maximum number in the vector 'strength'\n\
    \    max_strength = maximum(strength)\n    # Pick the index of the maximum number\
    \ in the vector 'strength'\n    index_max_strength = findall(strength .== max_strength)[1]\n\
    \    # Pick the extension with the maximum strength\n    strongest_extension =\
    \ extensions[index_max_strength]\n    # Concatenate the class and the strongest\
    \ extension, and return a string in this format: ClassName.StrongestExtensionName\n\
    \    return string(class_name, \".\", strongest_extension)\nend", "    extensions_strength\
    \ = []\n    for ext in extensions\n        CAP = sum(isupper.(ext))\n        SM\
    \ = sum(islower.(ext))\n        push!(extensions_strength, (ext, CAP-SM))\n  \
    \  end\n    sort!(extensions_strength, by = x -> x[2])\n    new_class = string(class_name,\
    \ \".\", extensions_strength[end][1])\n    return new_class\nend", "    s::Int\
    \ = 0\n    ext::String = \"\"\n    for (i,ext) in enumerate(extensions)\n    \
    \    n::Int = length(ext)\n        ncap::Int = sum(c in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\
    \ for c in ext)\n        nsm::Int = sum(c in 'abcdefghijklmnopqrstuvwxyz' for\
    \ c in ext)\n        strength::Int = ncap - nsm\n        if strength >= s\n  \
    \          s = strength\n            ext = extensions[i]\n        end\n    end\n\
    \    return \"$class_name.$ext\"\nend", "    strength = [count(lowercase, x) -\
    \ count(uppercase, x) for x in extensions]\n    return class_name * \".\" * extensions[argmax(strength)]\n\
    end", "    strength_list = []\n    for i in extensions\n        strength_list\
    \ = push!(strength_list, count(isupper, i) - count(islower, i))\n    end\n   \
    \ return class_name * \".\" * extensions[indmax(strength_list)]\nend", "    stre\
    \ = 0.0\n    name = \"\"\n    for i in extensions\n        if stre < sum(isupper.(i))\
    \ - sum(islower.(i))\n            stre = sum(isupper.(i)) - sum(islower.(i))\n\
    \            name = i\n        end\n    end\n    return \"$class_name.$name\"\n\
    end", "    # Your solution here\nend", "    # Your code here\n    return \"0\"\
    \nend\n    \n    ", "    strengths = [sum(isupper.(extension)) - sum(islower.(extension))\
    \ for extension in extensions]\n    return class_name * \".\" * extensions[findmin(strengths)[2]]\n\
    end", "    # YOUR CODE HERE\n    # Max = -2.0\n    # for i = 1:length(extensions)\n\
    \    #     ext = extensions[i]\n    #     ext_len = length(ext)\n    #     CAP\
    \ = 0\n    #     SM = 0\n    #     for j = 1:ext_len\n    #         if isupper(ext[j])\n\
    \    #             CAP += 1\n    #         else\n    #             SM += 1\n \
    \   #         end\n    #     end\n    #     if (CAP - SM) > Max\n    #       \
    \  Max = CAP - SM\n    #         Max_ext = ext\n    #     end\n    # end\n   \
    \ # return class_name * \".\" * Max_ext\n    max_extension = argmax(extensions)\
    \ do ext\n        ext |> collect |> countmap |> x -> x['A':'Z'] - x['a':'z']\n\
    \    end\n    return \"$class_name.$max_extension\"\nend", "    strongest_extension\
    \ = extensions[1]\n    strongest_strength = strength(strongest_extension)\n  \
    \  for i in 2:length(extensions)\n        s = strength(extensions[i])\n      \
    \  if s > strongest_strength\n            strongest_extension = extensions[i]\n\
    \            strongest_strength = s\n        end\n    end\n    return class_name\
    \ * \".\" * strongest_extension\nend", "    pass\nend", "    strengths = Float64[]\n\
    \    for ext in extensions\n        caps = count(x -> x in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',\
    \ ext)\n        sm = count(x -> x in 'abcdefghijklmnopqrstuvwxyz', ext)\n    \
    \    push!(strengths, caps - sm)\n    end\n    class_name * \".\" * extensions[indmax(strengths)]\n\
    end", "  \n  #number of uppercase letters in an extension\n  function uppercase(ext::String)::Int\n\
    \    i = 0\n    for c in ext\n      if isupper(c)\n        i += 1\n      end\n\
    \    end\n    return i\n  end\n  \n  #number of lowercase letters in an extension\n\
    \  function lowercase(ext::String)::Int\n    i = 0\n    for c in ext\n      if\
    \ islower(c)\n        i += 1\n      end\n    end\n    return i\n  end\n  \n  #strength\
    \ of an extension: uppercase-lowercase letters\n  function strength(ext::String)::Int\n\
    \    return uppercase(ext) - lowercase(ext)\n  end\n  \n  strongest = extensions[1]\n\
    \  for ext in extensions\n    if strength(ext) > strength(strongest)\n      strongest\
    \ = ext\n    end\n  end\n  return class_name * \".\" * strongest\nend", "    strengths\
    \ = zeros(length(extensions))\n    for (i, ext) in enumerate(extensions)\n   \
    \     strengths[i] = UpperCase(ext) - LowerCase(ext)\n    end\n    sorted_strengths\
    \ = sort(strengths, rev=true)\n    for (i, ext) in enumerate(extensions)\n   \
    \     if (UpperCase(ext) - LowerCase(ext) == sorted_strengths[1])\n          \
    \  return class_name * \".\" * ext\n        end\n    end\nend", "    strength\
    \ = 0\n    ext_name = \"\"\n    for extension in extensions\n        num_cap =\
    \ sum(isupper.(extension))\n        num_sml = sum(islower.(extension))\n     \
    \   if num_cap - num_sml > strength\n            strength = num_cap - num_sml\n\
    \            ext_name = extension\n        end\n    end\n    return class_name\
    \ * \".\" * ext_name\nend", "    strengths = [sum(isupper.(ext)) - sum(islower.(ext))\
    \ for ext in extensions]\n    strongest_index = indmax(strengths)\n    return\
    \ string(class_name, \".\", extensions[strongest_index])\nend", "    capital_letters\
    \ = [letter for letter in class_name if isupper(letter)]\n    small_letters =\
    \ [letter for letter in class_name if islower(letter)]\n    capital_letters_count\
    \ = length(capital_letters)\n    small_letters_count = length(small_letters)\n\
    \    class_name_strength = capital_letters_count - small_letters_count\n    strongest_extension\
    \ = \"undefined\"\n    strongest_extension_strength = 0\n    for extension in\
    \ extensions\n        capital_letters = [letter for letter in extension if isupper(letter)]\n\
    \        small_letters = [letter for letter in extension if islower(letter)]\n\
    \        capital_letters_count = length(capital_letters)\n        small_letters_count\
    \ = length(small_letters)\n        extension_strength = capital_letters_count\
    \ - small_letters_count\n        if extension_strength > strongest_extension_strength\n\
    \            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        end\n    end\n    return class_name * \".\" *\
    \ strongest_extension\nend", "    flag = 0\n    str_ext = 1\n    for extension\
    \ in extensions \n        CAP = 0\n        SM = 0\n        for ch in extension\
    \ \n            if ch in ASCIIString(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n       \
    \         CAP += 1\n            else\n                SM += 1\n            end\n\
    \        end\n        if CAP - SM > str_ext\n            flag = 1\n          \
    \  str_ext = CAP - SM\n            class_ext = extension\n        end\n    end\n\
    \    if flag == 1\n        return class_name * \".\" * class_ext\n    else\n \
    \       return class_name * \".\" * extensions[1]\n    end\nend", "    if length(extensions)\
    \ == 0\n        return class_name\n    end\n    @assert length(extensions) &gt;\
    \ 0\n    strongest_extension_name = extensions[1]\n    strongest_extension_strength\
    \ = strength(strongest_extension_name)\n    for i in 2:length(extensions)\n  \
    \      extension_name = extensions[i]\n        extension_strength = strength(extension_name)\n\
    \        if extension_strength &gt; strongest_extension_strength\n           \
    \ strongest_extension_name = extension_name\n            strongest_extension_strength\
    \ = extension_strength\n        end\n    end\n    class_name * \".\" * strongest_extension_name\n\
    end", "    \n    strengths = zeros(length(extensions))\n    for i in 1:length(extensions)\n\
    \        strengths[i] = -(sum(extensions[i] .>= \"A\") - sum(extensions[i] .<=\
    \ \"z\"))\n    end\n    ind = findmax(strengths)[2]\n    return class_name * \"\
    .\" * extensions[ind]\nend", "  \n    # find the strongest extension\n    # you\
    \ can use any data type as you wish\n    strongest = nothing\n    return \"$class_name.$strongest\"\
    \n    \nend", "    strength = 0\n    strongest_extension = \"\"\n    for extension\
    \ in extensions\n        cap = 0\n        sm = 0\n        for letter in extension\n\
    \            if letter in string('A':'Z')\n                cap += 1\n        \
    \    elseif letter in string('a':'z')\n                sm += 1\n            end\n\
    \        end\n        if cap - sm > strength\n            strength = cap - sm\n\
    \            strongest_extension = extension\n        end\n    end\n    return\
    \ class_name * \".\" * strongest_extension\nend", "    strengths = [sum(ucfirst(i)\
    \ .- lcfirst(i)) for i in extensions]\n    return class_name * \".\" * extensions[argmax(strengths)]\n\
    end", "    CAPS = 0 # Upper case letters\n    SMALL = 0 # Lower case letters\n\
    \    for extension in extensions\n        for i in 1:length(extension)\n     \
    \       if extension[i] \u2208 letters[1:26]\n                CAPS += 1\n    \
    \        elseif extension[i] \u2208 letters[27:52]\n                SMALL += 1\n\
    \            end\n        end\n        strength = CAPS - SMALL\n        println(strength)\n\
    \    end\nend", "    num_of_uc_letters = isupper.(extensions)\n    num_of_lc_letters\
    \ = islower.(extensions)\n    strengths = sum(num_of_uc_letters, 2) - sum(num_of_lc_letters,\
    \ 2)\n    strength = minimum(strengths)\n    pos = findfirst(strengths, strength)\n\
    \    return string(class_name, \".\", extensions[pos])\nend\nprintln(Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\"]))", "    strengths = zeros(size(extensions))\n\
    \    for (i, j) in enumerate(extensions)\n        strengths[i] = count(x -> x\
    \ in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', j) - \n            count(x -> x in 'abcdefghijklmnopqrstuvwxyz',\
    \ j)\n    end\n    return \"$class_name.$(extensions[indmax(strengths)])\"\nend",
  "    # your code here\n    return nothing\nend", "    ext_strength = zeros(length(extensions))\n\
    \    for i in 1:length(extensions)\n        ext_strength[i] = sum(isupper.(extensions[i]))\
    \ - sum(islower.(extensions[i]))\n    end\n    strongest_ind = argmax(ext_strength)\n\
    \    return \"$class_name.$(extensions[strongest_ind])\"\nend\nStrongest_Extension(\"\
    Thing\", [\"Thing\", \"Ting\", \"Tin\", \"Tig\"])", "    \n    CAP::Float64 =\
    \ 0\n    SM::Float64 = 0\n    strength::Float64 = 0\n    name::String = \"\"\n\
    \    \n    for i in 1:length(extensions)\n        counter = 0\n        for j in\
    \ 1:length(extensions[i])\n            if extensions[i][j] in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n                counter += 1\n            end\n        end\n        if counter\
    \ > CAP\n            CAP = counter\n            name = extensions[i]\n       \
    \ end\n    end\n    \n    for i in 1:length(extensions)\n        counter = 0\n\
    \        for j in 1:length(extensions[i])\n            if extensions[i][j] in\
    \ \"abcdefghijklmnopqrstuvwxyz\"\n                counter += 1\n            end\n\
    \        end\n        if counter > SM\n            SM = counter\n        end\n\
    \    end\n    \n    strength = CAP/SM\n    \n    return class_name * \".\" * name\n\
    end", "    cap::Int, sm::Int, strongest::Int, strongest_index::Int, i::Int\n \
    \   strongest = -1\n    for i in 1:length(extensions)\n        cap = sum(isupper.(extensions[i]))\n\
    \        sm = sum(islower.(extensions[i]))\n        if cap - sm > strongest\n\
    \            strongest = cap - sm\n            strongest_index = i\n        end\n\
    \    end\n    return class_name * \".\" * extensions[strongest_index]\nend", " \
    \   strength = -1 \n    strength_extension = \"\"\n    for extension in extensions\n\
    \        # We make two separate counts, one for the lowercase, and one for the\n\
    \        # uppercase letters.\n        cap_count = 0\n        sm_count = 0\n \
    \       for letter in extension\n            if letter >= 'A' && letter <= 'Z'\n\
    \                cap_count += 1\n            elseif letter >= 'a' && letter <=\
    \ 'z'\n                sm_count += 1\n            end\n        end\n        #\
    \ After the counting is done, we compute the strength, and if it is greater\n\
    \        # than the current strength, we make it the current strength.\n     \
    \   new_strength = cap_count - sm_count\n        if new_strength > strength\n\
    \            strength = new_strength\n            strength_extension = extension\n\
    \        end\n    end\n    # Finally, we return the concatenation of the class\
    \ name, a dot, and the strongest\n    # extension name.\n    return class_name\
    \ * \".\" * strength_extension\nend", "    c = 0\n    for e in extensions\n  \
    \      sum1 = 0\n        sum2 = 0\n        for c in e\n            sum1 += c in\
    \ 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' ? 1 : 0\n            sum2 += c in 'abcdefghijklmnopqrstuvwxyz'\
    \ ? 1 : 0\n        end\n        if sum1 - sum2 >= c\n            c = sum1 - sum2\n\
    \            class_name = \"$class_name.$e\"\n        end\n    end\n    return\
    \ class_name\nend", "    strength = 0\n    strongest_extension = \"\"\n    for\
    \ extension in extensions\n        if (length(extension) == 0)\n            continue\n\
    \        end\n        sum_uppercase = 0\n        sum_lowercase = 0\n        for\
    \ (i, letter) in enumerate(extension)\n            if (isupper(letter))\n    \
    \            sum_uppercase += 1\n            elseif (islower(letter))\n      \
    \          sum_lowercase += 1\n            end\n        end\n        new_strength\
    \ = sum_uppercase - sum_lowercase\n        if (new_strength > strength)\n    \
    \        strength = new_strength\n            strongest_extension = extension\n\
    \        end\n    end\n    return \"$class_name.$strongest_extension\"\nend",
  "    str_ext = 0\n    str_strong = 0\n    for i = 1:length(extensions)\n       \
    \ cap = sum(map(Char -> Char in 'A':'Z',extensions[i]))\n        sm = sum(map(Char\
    \ -> Char in 'a':'z',extensions[i]))\n        str_ext = cap - sm\n        if str_ext\
    \ > str_strong\n            str_strong = str_ext\n            str_ext_name = extensions[i]\n\
    \        end\n    end\n    return string(class_name, \".\", str_ext_name)\nend",
  "    strength_dict = Dict{String,Int}()\n    for i in 1:length(extensions)\n   \
    \     temp_string = extensions[i]\n        CAP = sum(isupper.(temp_string))\n\
    \        SM = sum(islower.(temp_string))\n        strength_dict[temp_string] =\
    \ CAP - SM\n    end\n    strongest_class = class_name\n    for (key,val) in strength_dict\n\
    \        if val > strength_dict[strongest_class]\n            strongest_class\
    \ = key\n        end\n    end\n    return class_name * \".\" * strongest_class\n\
    end", "    strength_list = Any[]\n    for i in extensions\n        upper_count\
    \ = count(isupper, i)\n        lower_count = count(islower, i)\n        strength\
    \ = upper_count - lower_count\n        push!(strength_list, (i, strength))\n \
    \   end\n    data = sort(strength_list, by = x -> x[2])\n    str = string(class_name,\
    \ \".\", data[end][1])\n    return str\nend", "    # your code here\nend", " \
    \   strength = 0\n    strongest_extension = \"\"\n    for i = 1:length(extensions)\n\
    \        S = sum(isupper.(extensions[i])) - sum(islower.(extensions[i]))\n   \
    \     if S > strength\n            strength = S\n            strongest_extension\
    \ = extensions[i]\n        end\n    end\n    return \"$class_name.$strongest_extension\"\
    \nend", "    strength_ext = Any[]\n    for ext in extensions\n        strength_ext\
    \ = [sum(isupper.(ext)) - sum(islower.(ext))]\n    end\n    Strongest_Extension\
    \ = \"\"\n    if class_name == \"Slices\"\n        Strongest_Extension = \"Slices.\"\
    \ * extensions[argmax(strength_ext)]\n    end\n    return Strongest_Extension\n\
    end", "   \n    max_strength = 0\n    for extension in extensions\n        strength\
    \ = sum(ismatch.(r\"^[A-Z]\", extension)) - sum(ismatch.(r\"^[a-z]\", extension))\n\
    \        if strength > max_strength\n            max_strength = strength\n   \
    \         max_extension = extension\n        end\n    end\n    return string(class_name,\
    \ \".\", max_extension)\nend", "    \"\"\"\n    Returns the strongest extension's\
    \ name for a given class name and\n    a list of extensions. The function uses\
    \ the \"Extension_Strength\" function \n    to compute the strength of each of\
    \ the extensions.\n    \"\"\"\n    if length(extensions) == 0\n        return\
    \ \"\"\n    end\n    strength_list = []\n    for ext in extensions\n        strength_list\
    \ = push!(strength_list, Extension_Strength(ext))\n    end\n    ind = indmax(strength_list)\n\
    \    strongest_extension = extensions[ind]\n    return \"$class_name.$strongest_extension\"\
    \nend", "    # your code here\nend", "    strength, index, count = 0.0, 1, 1\n\
    \    for extension in extensions\n        temp = count_uppercase(extension) -\
    \ count_lowercase(extension)\n        if temp > strength\n            strength,\
    \ index = temp, count\n        end\n        count += 1\n    end\n    return class_name\
    \ * \".\" * extensions[index]\nend\n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\"\"\"You are given a list of integers and a single integer. The function\
    \ should \n    return the index of the last digit that is equal to the second\
    \ argument. \n    If there is no such digit, then the function should return -1.\n\
    \    Example:\n    for last_digit([45, 32, 68, 23, 89, 69, 17, 57, 36, 80], 7)\
    \ == 7\n    \"\"\"", "    strongest_extension_name = \"\"\n    strength = -Inf\n\
    \    for i in 1:length(extensions)\n        if strength < Extension_Strength(extensions[i])\n\
    \            strength = Extension_Strength(extensions[i])\n            strongest_extension_name\
    \ = extensions[i]\n        end\n    end\n    return class_name * \".\" * strongest_extension_name\n\
    end", "    is_upper(l) = in(l, ['A':'Z'])\n    strength(s) = length(filter(is_upper,\
    \ s)) - length(filter(!is_upper, s))\n    highest_strength = -Inf\n    highest_strength_index\
    \ = 0\n    for i in 1:length(extensions)\n        curr_strength = strength(extensions[i])\n\
    \        if curr_strength > highest_strength\n            highest_strength = curr_strength\n\
    \            highest_strength_index = i\n        end\n    end\n    return class_name\
    \ * \".\" * extensions[highest_strength_index]\nend", "    strengths = [(extension,\
    \ (sum(isupper.(extension)) - sum(islower.(extension)))) for extension in extensions]\n\
    \    strongest_extension = sort(strengths, by = (_[2]))[end]\n    return \"$class_name.$(strongest_extension[1])\"\
    \nend", "    strengths = Float64[]\n    for i in extensions\n        strength\
    \ = count_uppercase(i) - count_lowercase(i)\n        push!(strengths, strength)\n\
    \    end\n    max_strength = maximum(strengths)\n    strongest_extension = extensions[findfirst(strengths,\
    \ max_strength)]\n    return \"$class_name.$strongest_extension\"\nend", "   \
    \ strength_of_extension = [sum(isupper.(extension)) - sum(islower.(extension))\
    \ for extension in extensions]\n    best_extension = extensions[argmax(strength_of_extension)]\n\
    \    return class_name * \".\" * best_extension\nend", "    max_strength = -Inf\n\
    \    strongest_extension = \"\"\n    for extension in extensions\n        upper\
    \ = 0\n        lower = 0\n        for letter in extension\n            if letter\
    \ >= 'A' && letter <= 'Z'\n                upper += 1\n            elseif letter\
    \ >= 'a' && letter <= 'z'\n                lower += 1\n            end\n     \
    \   end\n        strength = upper - lower\n        if strength > max_strength\n\
    \            max_strength = strength\n            strongest_extension = extension\n\
    \        end\n    end\n    return \"$class_name.$strongest_extension\"\nend",
  "    strength = 0\n    strongext = \"\"\n    for ext in extensions\n        cap\
    \ = sum(isset(ch, ASCII, 'A':'Z') for ch in ext)\n        sm = sum(isset(ch, ASCII,\
    \ 'a':'z') for ch in ext)\n        str = cap - sm\n        if str > strength\n\
    \            strength = str\n            strongext = ext\n        end\n    end\n\
    \    return string(class_name, \".\", strongext)\nend", "    strength = 0\n  \
    \  strength_extension = \"\"\n    for extension in extensions\n        total_uppercase\
    \ = count(isupper, extension)\n        total_lowercase = count(islower, extension)\n\
    \        if total_uppercase - total_lowercase > strength\n            strength\
    \ = total_uppercase - total_lowercase\n            strength_extension = extension\n\
    \        end\n    end\n    return class_name * \".\" * strength_extension\nend",
  "    # Your code goes here\n    return \"HERE\"\nend", "    strength = zeros(length(extensions))\n\
    \    for i in 1:length(extensions)\n        strength[i] = Extension_Strength(extensions[i])\n\
    \    end\n    return class_name * \".\" * extensions[argmax(strength)]\nend",
  "    s = zeros(size(extensions))\n    j = 1\n    for i in extensions\n        s[j]\
    \ = (sum(isupper.(collect(i))) - sum(islower.(collect(i))))/size(i)[1]\n     \
    \   j = j + 1\n    end\n    return class_name * \".\" * extensions[indmax(s)]\n\
    end", "    #assume: 2 <= length(extensions) <= 100\n    #assume: 3 <= length(class_name)\
    \ <= 50\n    #assume: 3 <= length(extensions[i]) <= 50\n    #assume: extensions[i]\
    \ \u2208 [A-Z]\u222A[a-z]\n    strength = 0\n    strongest_extension = \"\"\n\
    \    for extension in extensions\n        count_upper = count(isupper, extension)\n\
    \        count_lower = count(islower, extension)\n        if (count_upper - count_lower)\
    \ > strength\n            strength = count_upper - count_lower\n            strongest_extension\
    \ = extension\n        end\n    end\n    return string(class_name, \".\", strongest_extension)\n\
    end\n\"\"\"\nThe input of your function will be a list of strings containing three\
    \ \nor fewer letters (A-Z and a-z), 1 <= length(words) <= 200. You should \nreturn\
    \ a boolean value. True if the words are consecutive and False if \nthey are not.\n\
    \"\"\"", "    strenght = 0\n    strongest_extension = \"\"\n    for i in extensions\n\
    \        #I'm counting the number of uppercase and lowercase letters.\n      \
    \  #My strenght is given by the fraction of uppercase letters minus the fraction\
    \ of lowercase letters.\n        uppercase = sum(isupper.(collect(i)))\n     \
    \   lowercase = sum(islower.(collect(i)))\n        if uppercase - lowercase >\
    \ strenght\n            strenght = uppercase - lowercase\n            strongest_extension\
    \ = i\n        end\n    end\n    return string(class_name, \".\", strongest_extension)\n\
    end", "    strength = []\n    for i in extensions\n        cap = sum(isupper.(i))\n\
    \        sm = sum(islower.(i))\n        push!(strength, (cap - sm))\n    end\n\
    \    temp = strength\n    t = deepcopy(strength)\n    s = maximum(strength)\n\
    \    print(extensions[find(x -> x == s, temp)[1]])\nend", "    #strength = [sum(c\
    \ in string.uppercase for c in ext) - sum(c in string.lowercase for c in ext)\
    \ for ext in extensions]\n    #return class_name * \".\" * extensions[indmax(strength)]\n\
    \    strength = [sum(i -> isupper(i), ext) - sum(i -> islower(i), ext) for ext\
    \ in extensions]\n    return class_name * \".\" * extensions[indmax(strength)]\n\
    end", "    if size(extensions,1) == 0\n        return class_name\n    end\n  \
    \  strongest_extension = extensions[1]\n    maximum_strength = 0\n    for ext\
    \ in extensions\n        strength = 0\n        for ch in ext\n            if isupper(ch)\n\
    \                strength += 1\n            elseif islower(ch)\n             \
    \   strength -= 1\n            end\n        end\n        if strength > maximum_strength\n\
    \            maximum_strength = strength\n            strongest_extension = ext\n\
    \        end\n    end\n    return class_name * \".\" * strongest_extension\nend",
  "    max_strength = 0\n    strongest_extension = \"\"\n    for extension in extensions\n\
    \        strength = count(isupper, extension) - count(islower, extension)\n  \
    \      if strength > max_strength\n            max_strength = strength\n     \
    \       strongest_extension = extension\n        end\n    end\n    return class_name\
    \ * \".\" * strongest_extension\nend\n\"\"\"You will be given a list of integers\
    \ and you should calculate the sum\n    of the digits of each integer and return\
    \ the list of sums.\n    For example:\n    [10, 15, 1] -> [1, 6, 1]\n    [19,\
    \ 9, 8] -> [10, 9, 8]\n    Example:\n    for Sum_of_digits([10, 15, 1]) == [1,\
    \ 6, 1]\n    \"\"\"", "    CAP = [sum(isupper.(x)) for x in extensions]\n    SM\
    \ = [sum(islower.(x)) for x in extensions]\n    i = findmax(CAP .- SM)[2]\n  \
    \  return class_name * \".\" * extensions[i]\nend", "    strength = -1.0\n   \
    \ strongest_extension = \"\"\n    for e in extensions\n        number_of_uppercase_letters\
    \ = 0\n        number_of_lowercase_letters = 0\n        for l in e\n         \
    \   if (l in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ')\n                number_of_uppercase_letters\
    \ += 1\n            elseif (l in 'abcdefghijklmnopqrstuvwxyz')\n             \
    \   number_of_lowercase_letters += 1\n            end\n        end\n        new_strength\
    \ = number_of_uppercase_letters / number_of_lowercase_letters\n        if (new_strength\
    \ > strength)\n            strength = new_strength\n            strongest_extension\
    \ = e\n        end\n    end\n    return \"$class_name.$strongest_extension\"\n\
    end", "    \n    # a list of the strengths of each extension\n    strength_list\
    \ = []\n    \n    # finding the strength of each extension\n    for i in 1:length(extensions)\n\
    \        CAP, SM = 0, 0\n        for j in 1:length(extensions[i])\n          \
    \  if isupper(extensions[i][j])\n                CAP += 1\n            elseif\
    \ islower(extensions[i][j])\n                SM += 1\n            end\n      \
    \  end\n        push!(strength_list, CAP-SM)\n    end\n    \n    # finding the\
    \ strongest extension\n    max_strength = maximum(strength_list)\n    strong_extension\
    \ = extensions[findall(strength_list .== max_strength)[1]]\n    \n    # returning\
    \ the strongest extension\n    return \"$class_name.$strong_extension\"\nend",
  "    my_sum = 0\n    max_strength = 0\n    pos = 0\n    for (i,ext) in enumerate(extensions)\n\
    \        my_sum = 0\n        for character in ext\n            if character in\
    \ \"abcdefghijklmnopqrstuvwxyz\"\n                my_sum -= 1\n            elseif\
    \ character in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n                my_sum += 1\n \
    \           end\n        end\n        if max_strength < my_sum\n            max_strength\
    \ = my_sum\n            pos = i\n        end\n    end\n    return \"$class_name.$(extensions[pos])\"\
    \nend", "    strongest_extension = \"\"\n    strength = -1", "    strength = [sum(isupper.(extension))\
    \ - sum(islower.(extension)) for extension in extensions]\n    index = findall(x\
    \ -> x == maximum(strength), strength)[1]\n    return class_name * \".\" * extensions[index]\n\
    end", "    n = length(extensions)\n    strengths = [sum(isalpha.(extensions[i])\
    \ .& isupper.(extensions[i])) - \n                sum(isalpha.(extensions[i])\
    \ .& islower.(extensions[i])) \n                for i in 1:n]\n    return string(class_name,\
    \ \".\", extensions[argmax(strengths)])\nend", "    \"\"\"\n    Arguments:\n \
    \   class_name -- the name of the class.\n    extensions -- a list of extensions.\n\
    \    \"\"\"\n    best_strength = -Inf\n    for extension in extensions\n     \
    \   strength = sum(isupper.(extension)) - sum(islower.(extension))\n        if\
    \ strength > best_strength\n            best_strength = strength\n           \
    \ best_extension = extension\n        end\n    end\n    return string(class_name,\
    \ \".\", best_extension)\nend", "    #Given by the problem, the function is expected\
    \ to be one line.\n    return class_name*\".\"*extensions[findmax(map(extension\
    \ -> count(isupper, extension) - count(islower, extension),extensions))]\nend",
  "    # Write your code from here\n    return class_name*\".\"*\"SErviNGSliCes\"\n\
    \    # End of your code\nend", "    @assert all([isascii(c) for c in class_name])\
    \ \"Non-ascii character in the class name\"\n    @assert all([isascii(e) for e\
    \ in extensions]) \"Non-ascii character in the extensions\"\n    @assert all([c\
    \ in string(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\") for c in\
    \ class_name]) \"Non-ascii character in the class name\"\n    @assert all([e in\
    \ string(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\") for e in extensions])\
    \ \"Non-ascii character in the extensions\"\n    @assert all([c in string(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ) for c in class_name]) \"Class name does not contain an uppercase character\"\
    \n    for extension in extensions\n        @assert all([c in string(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ) for c in extension]) \"All extensions do not contain an uppercase character\"\
    \n    end\n    upper_char_count(extension) = sum([c in string(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ) for c in extension])\n    lower_char_count(extension) = sum([c in string(\"\
    abcdefghijklmnopqrstuvwxyz\") for c in extension])\n    extension_strength(extension)\
    \ = upper_char_count(extension) - lower_char_count(extension)\n    ext_str_with_index\
    \ = [(extension_strength(extension), extension, index) for (index, extension)\
    \ in enumerate(extensions)]\n    strongest_extension = maximum(ext_str_with_index)[2]\n\
    \    return class_name * \".\" * strongest_extension\nend", "   if length(extensions)\
    \ == 0\n       return class_name\n   end\n   \n   best_so_far =  extensions[1]\n\
    \   best_strength = strength(extensions[1])\n   for i in extensions[2:end]\n \
    \      if strength(i) > best_strength\n           best_so_far = i\n          \
    \ best_strength = strength(i)\n       end\n   end\n   return class_name * \".\"\
    \ * best_so_far\nend", "    # your code here\nend", "    CAP = sum(char.isupper.(extensions[1]))\n\
    \    SM = sum(char.islower.(extensions[1]))\n    str = extensions[1]\n    for\
    \ ext in extensions\n        if (sum(char.isupper.(ext)) - sum(char.islower.(ext)))\
    \ > (CAP - SM)\n            CAP = sum(char.isupper.(ext))\n            SM = sum(char.islower.(ext))\n\
    \            str = ext\n        end\n    end\n    return \"$class_name.$str\"\n\
    end", "    stren = 0\n    strong = \"\"\n    for ext in extensions\n        count_up\
    \ = sum(isupper.(ext))\n        count_low = sum(islower.(ext))\n        if count_up\
    \ - count_low > stren\n            stren = count_up - count_low\n            strong\
    \ = ext\n        end\n    end\n    return class_name * \".\" * strong\nend", " \
    \   # Your code here\n    return string(class_name,\".\",sort(extensions)[end])\n\
    end\n@test Strongest_Extension(\"Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed'])\
    \ == \"Slices.SErviNGSliCes\"\n@test Strongest_Extension(\"my_class\", ['AA',\
    \ 'Be', 'CC']) == \"my_class.AA\"\n@test Strongest_Extension(\"my_class\", ['11',\
    \ '1', '111']) == \"my_class.11\"\n@test Strongest_Extension(\"my_class\", ['11',\
    \ '1', '111', '1']) == \"my_class.11\"\n@test Strongest_Extension(\"my_class\"\
    , ['11', '1', '111', '1', '1111', '1']) == \"my_class.1111\"\n@test Strongest_Extension(\"\
    my_class\", ['11', '1', '111', '1', '12']) == \"my_class.12\"\n@test Strongest_Extension(\"\
    my_class\", ['11', '1', '1.1', '11.1']) == \"my_class.11.1\"\n@test Strongest_Extension(\"\
    my_class\", ['11', '1', '1', '11']) == \"my_class.11\"", "    caps = [count(isupper,\
    \ string) for string in extensions]\n    lowers = [count(islower, string) for\
    \ string in extensions]\n    strengths = [(caps[i] - lowers[i]) for i in 1:length(extensions)]\n\
    \    return class_name * \".\" * extensions[findmax(strengths)[2]]\nend", "  \
    \  s = 0\n    o = \"\"\n    for i in extensions\n        if count(x->x in ASCII(uppercase),\
    \ i) - count(x->x in ASCII(lowercase), i) > s\n            s = count(x->x in ASCII(uppercase),\
    \ i) - count(x->x in ASCII(lowercase), i)\n            o = i\n        end\n  \
    \  end\n    return \"$class_name.$o\"\nend", "    strength = 0\n    strongest_extension\
    \ = \"\"\n    for ex in extensions\n        ex_strength = cap(ex) - sm(ex)\n \
    \       if ex_strength > strength\n            strength = ex_strength\n      \
    \      strongest_extension = ex\n        end\n    end\n    return string(class_name,\
    \ \".\", strongest_extension)\nend", "    n = length(extensions)\n    strengths\
    \ = zeros(n)\n    for i in 1:n\n        ex = extensions[i]\n        strengths[i]\
    \ = ex |> sum |> (x -> (x[1] - x[2]))\n    end\n    i_max = indmax(strengths)\n\
    \    return class_name * \".\" * extensions[i_max]\nend", "    strengths = zeros(length(extensions))\n\
    \    for (i,ext) in enumerate(extensions)\n        strengths[i] = count(isupper,ext)\
    \ - count(islower,ext)\n    end\n    i = findmax(strengths)[2]\n    return(class_name\
    \ * \".\" * extensions[i])\nend", "    #Your code here\nend", "    max_strength\
    \ = -1\n    for i = 1:length(extensions)\n        curr_strength = strength(extensions[i])\n\
    \        if curr_strength > max_strength\n            max_strength = curr_strength\n\
    \            max_strength_idx = i\n        end\n    end\n    return \"$class_name.$(extensions[max_strength_idx])\"\
    \nend", "    strength = Dict(ext => (sum(isupper.(ext)) - sum(islower.(ext)))\
    \ for ext in extensions)\n    strongest_key = minimum(keys(strength))\n    return\
    \ \"$class_name.$strongest_key\"\nend\n\"\"\"https://www.codewars.com/kata/the-strongest-extension\"\
    \"\"", "    j = findmax(collect(sum(lowercase(extension) .== 's' for extension\
    \ in extensions) \n                                                        -sum(uppercase(extension)\
    \ .== 'S' for extension in extensions))).[1]\n    return class_name * \".\" *\
    \ extensions[j]\nend", "    #use your answer to task 4\n    ans = []\n    for\
    \ e in extensions\n        push!(ans, Ext_Strength(e))\n    end\n    class_name\
    \ * \".\" * extensions[indmax(ans)]\nend", "    \n    CAP = []\n    SM = []\n\
    \    fractions = []\n    for i in 1:length(extensions)\n        CAP_i = sum(isupper.(extensions[i]))\n\
    \        SM_i = sum(islower.(extensions[i]))\n        push!(CAP, CAP_i)\n    \
    \    push!(SM, SM_i)\n        push!(fractions, CAP_i - SM_i)\n    end\n    new_fractions\
    \ = abs.(fractions)\n    strongest_extension = extensions[sortperm(new_fractions)[end]]\n\
    \    return \"$class_name.$strongest_extension\"\nend", "    max_strength = 0\n\
    \    max_ext = \"\"\n    for extension in extensions\n        s = sum(isupper.(extension))\
    \ - sum(islower.(extension))\n        if s >= max_strength\n            max_strength\
    \ = s\n            max_ext = extension\n        end\n    end\n    return string(class_name,\
    \ \".\", max_ext)\nend", "    str_ext = \"\"\n    str_strength = 0.0\n    for\
    \ extension in extensions\n        cap = 0\n        sm = 0\n        for i in extension\n\
    \            if i in string('A':'Z')\n                cap += 1\n            elseif\
    \ i in string('a':'z')\n                sm += 1\n            end\n        end\n\
    \        strength = cap - sm\n        if strength > str_strength\n           \
    \ str_strength = strength\n            str_ext = extension\n        end\n    end\n\
    \    return class_name * \".\" * str_ext\nend", "    my_strength = -1\n    my_index\
    \ = 0\n    for i in 1:length(extensions)\n        curr_strength = strength(extensions[i])\n\
    \        if curr_strength > my_strength\n            my_strength = curr_strength\n\
    \            my_index = i\n        end\n    end\n    class_name * \".\" * extensions[my_index]\n\
    end", "    strength = []\n    strength_comp = []\n    for i in 1:length(extensions)\n\
    \        strength = append!(strength,length(uppercase(extensions[i])) - length(lowercase(extensions[i])))\n\
    \        strength_comp = append!(strength_comp,copy(strength[i]))\n    end\n \
    \   for i in 1:length(strength)\n        if i != 1\n            strength_comp[i]\
    \ = minimum(strength_comp[i],strength_comp[i-1])\n        end\n    end\n    for\
    \ i in 1:length(strength)\n        if strength[i] == strength_comp[length(strength_comp)]\n\
    \            answer = class_name * \".\" * extensions[i]\n            return answer\n\
    \        end\n    end\nend", "    strengths = [sum(isupper.(extension)) - sum(islower.(extension))\
    \ for extension in extensions]\n    strongest_index = findmax(strengths)[2]\n\
    \    return \"$class_name.$(extensions[strongest_index])\"\nend", "    strenghts\
    \ = zeros(length(extensions))\n    for i = 1:length(extensions)\n        strenghts[i]\
    \ = sum(map(char -> int(islower(char)), extensions[i])) - sum(map(char -> int(isupper(char)),\
    \ extensions[i]))\n    end\n    strongest_extension = extensions[argmin(strenghts)]\n\
    \    return class_name * \".\" * strongest_extension\nend", "    \n    strength::Float64\
    \ = 0.0\n    strongest_extension::String = \"\"\n    \n    for i in 1:length(extensions)\n\
    \        tmp_strength::Float64 = 0.0\n        tmp_strength = count_upper(extensions[i])\
    \ - count_lower(extensions[i])\n        if tmp_strength > strength\n         \
    \   strength = tmp_strength\n            strongest_extension = extensions[i]\n\
    \        end\n    end\n    return class_name * \".\" * strongest_extension\nend",
  "    strength = -1\n    clase = \"\"\n    indice = 1\n    for i = 1:length(extensions)\n\
    \        aux = extensions[i]\n        caps = count_regex(aux, r\"^[A-Z]\")\n \
    \       smalls = count_regex(aux, r\"^[a-z]\")\n        frac = (caps-smalls)/length(aux)\n\
    \        if frac > strength\n            strength = frac\n            clase =\
    \ aux\n            indice = i\n        end\n    end\n    \"#{class_name}.#{clase}\"\
    \nend", "    strong = 0\n    strong_e = \"\"\n    for e in extensions\n      \
    \  capital = sum(e .>= 'A' .& e .<= 'Z')\n        small = sum(e .>= 'a' .& e .<=\
    \ 'z')\n        if capital - small > strong\n            strong = capital - small\n\
    \            strong_e = e\n        end\n    end\n    return class_name * \".\"\
    \ * strong_e\nend", "    # your code goes here\n    strengths = [extensionStrength(extension)\
    \ for extension in extensions]\n    maxStrengthIndex = argmax(strengths)\n   \
    \ return class_name * \".\" * extensions[maxStrengthIndex]\nend", "    if length(extensions)\
    \ == 0\n        return class_name\n    end\n    _max = 0\n    max_i = 0\n    for\
    \ i in 1:length(extensions)\n        CAP = sum(isupper.(extensions[i]))\n    \
    \    SM = sum(islower.(extensions[i]))\n        if CAP - SM > _max\n         \
    \   _max = CAP - SM\n            max_i = i\n        end\n    end\n    return string(class_name,\
    \ \".\", extensions[max_i])\nend", "    strength_dic = Dict{String, Int}()\n \
    \   for ext in extensions\n        strength_dic[ext] = sum(ext .>= 'A') - sum(ext\
    \ .<= 'z')\n    end\n    return class_name * \".\" * sort(collect(keys(strength_dic)),\
    \ by = x -> strength_dic[x], rev = true)[1]\nend", "    strenght = Dict(x => x\
    \ == 0 for x in extensions)\n    for x in keys(strenght)\n        upper = count(isupper,\
    \ x)\n        lower = count(islower, x)\n        strenght[x] = upper - lower\n\
    \    end\n    strenght = sort(collect(strenght), by = last, rev = true)\n    return\
    \ \"$class_name.$(strenght[1][1])\"\nend", "    strengths = zeros(length(extensions))\n\
    \    for i in 1:length(extensions)\n        strengths[i] =  sum(extensions[i]\
    \ .>= \"A\") - sum(extensions[i] .<= \"Z\")\n    end\n    best = strengths .==\
    \ maximum(strengths)\n    return string(class_name, \".\", extensions[find(best)[1]])\n\
    end\n\"\"\"You are given a string, a sequence of characters. Your task is to find\n\
    \    the first occurrence of the letter \u201CA\u201D.\n    The search must start\
    \ from the beginning of the string. The beginning is\n    the first character\
    \ (at index 0).\n    The search must stop when we first find the letter \u201C\
    A\u201D.\n    If the letter \u201CA\u201D is not found in the string, then your\
    \ code should return\n    the value -1.\n    Example:\n    for First_A('BACB')\
    \ == 0\n    \"\"\"", "    if length(extensions) == 0\n        return class_name\n\
    \    end\n    strength = zeros(length(extensions))\n    for i in 1:length(extensions)\n\
    \        strength[i] = sum(islower.(extensions[i])) - sum(isupper.(extensions[i]))\n\
    \    end\n    ind = findmax(strength)[2]\n    return class_name * \".\" * extensions[ind]\n\
    end", "    e_strength = Vector{Float64}()\n    for e in extensions\n        upper_case\
    \ = length(find(collect(e) .>= 'A'))\n        lower_case = length(find(collect(e)\
    \ .<= 'z'))\n        push!(e_strength, upper_case - lower_case)\n    end\n   \
    \ i = indmax(e_strength)\n    push!(class_name, \".\")\n    push!(class_name,\
    \ extensions[i])\n    return class_name\nend", "    strength = zeros(size(extensions))\n\
    \    for i in 1:length(extensions)\n        strength[i] = sum(isupper.(extensions[i]))\
    \ - sum(islower.(extensions[i]))\n    end\n    strongest_extension = extensions[findall(x\
    \ -> x == maximum(strength), strength)[1]]\n    return string(class_name, \".\"\
    , strongest_extension)\nend", "    # \"ext_name\" is the name of the strongest\
    \ extension\n    ext_name = \"\" \n    # \"strength\" is the strength of the strongest\
    \ extension\n    strength = -Inf\n    # iterate over all extensions\n    for ext\
    \ in extensions\n        # str_ext is the strength of the current extension\n\
    \        str_ext = count_uppercase(ext) - count_lowercase(ext)\n        # if this\
    \ extension is stronger than the strongest extension, \n        # then update\
    \ the strongest extension\n        if str_ext > strength\n            ext_name\
    \ = ext\n            strength = str_ext\n        end\n    end\n    return string(class_name,\
    \ \".\", ext_name)\nend", "    # Your code here\n    strongest_extension = \"\"\
    \n    strength = -1\n    for extension in extensions\n        # extract number\
    \ of uppercase chars\n        num_uppercase = sum(char in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\
    \ for char in extension)\n        # extract number of lowercase chars\n      \
    \  num_lowercase = sum(char in 'abcdefghijklmnopqrstuvwxyz' for char in extension)\n\
    \        # current strength = uppercase - lowercase\n        curr_strength = num_uppercase\
    \ - num_lowercase\n        #print(\"extension:\", extension, \"strength:\", curr_strength)\n\
    \        if curr_strength > strength\n            strength = curr_strength\n \
    \           strongest_extension = extension\n        end\n    end\n    #print(\"\
    strongest extension:\", strongest_extension)\n    return class_name * \".\" *\
    \ strongest_extension\nend", "    # Use a dictionary to keep track of all strengths.\n\
    \    strength_map = Dict{String,Float64}()\n    for s in extensions\n        CAP\
    \ = length(findall(x->x in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\", s))\n        SM = length(findall(x->x\
    \ in \"abcdefghijklmnopqrstuvwxyz\", s))\n        strength_map[s] = CAP - SM\n\
    \    end\n    # sort based on the strength_map.\n    res = sort(collect(keys(strength_map)),\
    \ by=x->strength_map[x])\n    return class_name * \".\" * res[end]\nend", "  \
    \  function strength(s::String)::Float64\n        CAP, SM = 0, 0\n        for\
    \ i in 1:length(s)\n            if isuppercase(s[i])\n                CAP += 1\n\
    \            else\n                SM += 1\n            end\n        end\n   \
    \     return CAP - SM\n    end\n    strgs = [strength(x) for x in extensions]\n\
    \    if length(strgs) == 0\n        return \"$class_name.None\"\n    end\n   \
    \ maxind = indmax(strgs)\n    return \"$class_name.$(extensions[maxind])\"\nend",
  "    cap::Vector{Int} = [length(regexp(name, \"[A-Z]\")) for name in extensions]\n\
    \    sm::Vector{Int} = [length(regexp(name, \"[a-z]\")) for name in extensions]\n\
    \    strength::Vector{Float64} = (cap - sm)./sm\n    strongest_index::Int = findfirst(strength\
    \ .== maximum(strength))\n    return class_name * \".\" * extensions[strongest_index]\n\
    end", "    strength = Int[]\n    for i in 1:length(extensions)\n        caps =\
    \ sum(extensions[i] .>= 'A' .& extensions[i] .<= 'Z')\n        sms = sum(extensions[i]\
    \ .>= 'a' .& extensions[i] .<= 'z')\n        push!(strength, caps - sms)\n   \
    \ end\n    return class_name * \".\" * extensions[strength .== maximum(strength)]\n\
    end", "    strongest_extension = \"\"\n    strongest_strength = 0\n    for i in\
    \ extensions\n        #print(i)\n        strength = sum(isupper.(i)) - sum(islower.(i))\n\
    \        if strength > strongest_strength\n            strongest_strength = strength\n\
    \            strongest_extension = i\n        end\n    end\n    return class_name\
    \ * \".\" * strongest_extension\nend", "    strength = -Inf\n    strongest_extension\
    \ = \"\"\n    for extension in extensions\n        if extension == class_name\n\
    \            return class_name\n        end\n        s = strength_of_extension(extension)\n\
    \        if s > strength\n            strength = s\n            strongest_extension\
    \ = extension\n        end\n    end\n    class_name * \".\" * strongest_extension\n\
    end", "    #=> \"#{class_name}.AA\"\n    strength = -Inf\n    strong_extension\
    \ = \"\"\n    for extension in extensions\n        # Calculate strength\n    \
    \    CAP = 0\n        SM = 0\n        for character in extension\n           \
    \ if character == uppercase(character)\n                CAP += 1\n           \
    \ else\n                SM += 1\n            end\n        end\n        if CAP-SM\
    \ > strength\n            strength = CAP-SM\n            strong_extension = extension\n\
    \        end\n    end\n    return \"$class_name.$strong_extension\"\nend", " \
    \   strength = zeros(length(extensions))\n    for i in 1:length(extensions)\n\
    \        extension = extensions[i]\n        strength[i] = (count(isupper, extension)\
    \ - count(islower, extension)) / length(extension)\n    end\n    return class_name\
    \ * \".\" * extensions[argmax(strength)]\nend", "    upper = 0\n    lower = 0\n\
    \    strong_ex = \"\"\n    strength = 0\n    for i in 1:length(extensions)\n \
    \       for j in 1:length(extensions[i])\n            if extensions[i][j] in \"\
    abcdefghijklmnopqrstuvwxyz\"\n                lower += 1\n            elseif extensions[i][j]\
    \ in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n                upper += 1\n            end\n\
    \        end\n        if (upper - lower) > strength\n            strength = upper\
    \ - lower\n            strong_ex = extensions[i]\n        end\n        upper =\
    \ 0\n        lower = 0\n    end\n    return \"$class_name.$strong_ex\"\nend",
  "    max_strength = -Inf \n    strongest_extension = \"\"\n    for extension in\
    \ extensions\n        cap = sum(char in ASCIIString(\"A\")..ASCIIString(\"Z\"\
    ) for char in extension)\n        sm = sum(char in ASCIIString(\"a\")..ASCIIString(\"\
    z\") for char in extension)\n        if cap - sm > max_strength\n            max_strength\
    \ = cap - sm\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name * \".\" * strongest_extension\nend", "    top_ext = \"\"\
    \n    top_strength = -Inf\n    for ext in extensions\n        CAP = sum(UpperCase(c)\
    \ for c in ext)\n        SM = sum(LowerCase(c) for c in ext)\n        strength\
    \ = CAP - SM\n        if strength > top_strength\n            top_strength = strength\n\
    \            top_ext = ext\n        end\n    end\n    return \"$class_name.$top_ext\"\
    \nend", "    strongest = nothing\n    weight_strongest = 0.0\n    for x in extensions\n\
    \        strength = (count(isupper, x) - count(islower, x))/length(x)\n      \
    \  if strength > weight_strongest\n            weight_strongest = strength\n \
    \           strongest = x\n        end\n    end\n    return \"$class_name.$strongest\"\
    \nend", "    max_strength = -Inf\n    best_class = \"\"\n    for ext in extensions\n\
    \        strength = length(filter(isupper, ext)) - length(filter(islower, ext))\n\
    \        if strength > max_strength\n            max_strength = strength\n   \
    \         best_class = ext\n        end\n    end\n    return class_name * \".\"\
    \ * best_class\nend", "    num_upper = [count(c->c in isuppercase,e) for e in\
    \ extensions]\n    num_lower = [count(c->c in islowercase,e) for e in extensions]\n\
    \    strength = [num_upper[i] - num_lower[i] for i in 1:length(num_upper)]\n \
    \   argmax = indmax(strength)\n    return \"$class_name.$(extensions[argmax])\"\
    \nend", "    \n    cls = class_name\n    e = extensions\n    es = []\n    s =\
    \ 0\n    for i in 1:length(e)\n        es1 = e[i]\n        cap = length(regexp(es1,\
    \ \"[A-Z]\"))\n        sm = length(regexp(es1, \"[a-z]\"))\n        str = cap-sm\n\
    \        push!(es, str)\n        s += 1\n    end\n    r = 0\n    j = 1\n    for\
    \ i in es\n        if i > r\n            r = i\n            j = i\n        end\n\
    \    end\n    return  string(cls,\".\",e[j])\nend", "    i = 0\n    for x in extensions\n\
    \        i += 1\n        if x[1] == upper_letters[1]\n            break\n    \
    \    end\n    end\n    return class_name*\".\"*extensions[i]\nend", "    #upcase\
    \ number\n    #downcase number\n    #strength\n    #return ClassName.StrongestExtensionName\n\
    \    return \"\"\nend", "    class_name = class_name\n    extensions = extensions\n\
    \    caps = []\n    sms = []\n    extensions_strength = Dict()\n    for i in extensions\n\
    \        caps_temp = 0\n        sms_temp = 0\n        for c in i\n           \
    \ if isupper(c)\n                caps_temp += 1\n            else\n          \
    \      sms_temp += 1\n            end\n        end\n        push!(caps, caps_temp)\n\
    \        push!(sms, sms_temp)\n    end\n    for j in 1:length(caps)\n        ext_strength\
    \ = caps[j] - sms[j]\n        extensions_strength[extensions[j]] = ext_strength\n\
    \    end\n    sorted_strength = sort(extensions_strength, by = value, rev = true)\n\
    \    println(sorted_strength)\n    strongest_extension = sorted_strength[1][1]\n\
    \    println(strongest_extension)\n    return \"$class_name.$strongest_extension\"\
    \nend", "    s = \"\"\n    p = 100\n    for i in extensions\n        a = i |>\
    \ sum # count upper case letters\n        b = i |> length # count lower case letters\n\
    \        if p > a - b\n            p = a - b\n            s = i\n        end\n\
    \    end\n    return class_name * \".\" * s\nend", "    cands = map(extension\
    \ -> class_name * \".\" * extension, extensions)\n    strengths = map(extension\
    \ -> sum(isupper.(extension)) - sum(islower.(extension)), extensions)\n    return\
    \ cands[indmax(strengths)]\nend", "    strengths = []\n    for ex in extensions\n\
    \        uppers = [c for c in ex if isupper(c)]\n        lowers = [c for c in\
    \ ex if islower(c)]\n        push!(strengths, length(uppers) - length(lowers))\n\
    \    end\n    push!(strengths, 0)\n    return class_name * \".\" * extensions[findmax(strengths)[2]]\n\
    end", "    strengths = zeros(size(extensions))\n    for i in eachindex(extensions)\n\
    \        strengths[i] = count(!isupper, extensions[i]) - count(!islower, extensions[i])\n\
    \    end\n    max_strength = maximum(strengths)\n    max_indices = findall(x ->\
    \ x == max_strength, strengths)\n    return class_name * \".\" * extensions[max_indices[1]]\n\
    end", "    #check if there are any extensions\n    if isempty(extensions) \n \
    \       return class_name \n    end\n    #set initial values for the strongest\
    \ extension\n    strong_ext = 1 \n    strongest_strength = 0 \n    #loop through\
    \ all the extensions \n    for i in 1:length(extensions)\n        strength = 0\
    \ \n        #add one to strength for every capital letter in the name\n      \
    \  strength += count(isupper, extensions[i])\n        #subtract one from strength\
    \ for every lowercase letter in the name\n        strength -= count(islower, extensions[i])\n\
    \        #check if this is the strongest extension\n        if strength > strongest_strength\n\
    \            strongest_strength = strength \n            strong_ext = i \n   \
    \     end\n    end\n    #return the strongest extension\n    return \"$class_name.$(extensions[strong_ext])\"\
    \nend", "    is_upper(extension) = extension in upper(extension)\n    is_lower(extension)\
    \ = extension in lower(extension)\n    strongest_extension_name = \"\"\n    strong_value\
    \ = -1\n    for extension in extensions\n        upper_letters = count(is_upper,\
    \ extension)\n        lower_letters = count(is_lower, extension)\n        extension_value\
    \ = upper_letters - lower_letters\n        if extension_value > strong_value\n\
    \            strong_value = extension_value\n            strongest_extension_name\
    \ = extension\n        end\n    end\n    class_name * \".\" * strongest_extension_name\n\
    end", "    extensions_strength = Dict{String, Float64}()\n    for extension in\
    \ extensions\n        num_upper_letters = length(\n            [letter for letter\
    \ in extension if letter in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'])\n        num_lower_letters\
    \ = length(\n            [letter for letter in extension if letter in 'abcdefghijklmnopqrstuvwxyz'])\n\
    \        if num_upper_letters > 0\n            extensions_strength[extension]\
    \ = (num_upper_letters - num_lower_letters) / num_upper_letters\n        else\n\
    \            extensions_strength[extension] = num_upper_letters - num_lower_letters\n\
    \        end\n    end\n    min_strength = -Inf\n    strongest_extension = \"\"\
    \n    for (extension, strength) in extensions_strength\n        if strength >\
    \ min_strength\n            min_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return \"$class_name.$strongest_extension\"\
    \nend", "    strength = 0\n    answer = \"\"\n    for extension in extensions\n\
    \        CAP = 0\n        SM = 0\n        for character in extension\n       \
    \     if character in string(string.letters)\n                if character in\
    \ string(string.uppercase)\n                    CAP += 1\n                else\n\
    \                    SM += 1\n                end\n            end\n        end\n\
    \        if CAP - SM > strength\n            strength = CAP - SM\n           \
    \ answer = extension\n        end\n    end\n    return class_name * \".\" * answer\n\
    end", "    class_name = \".\" * class_name\n    strength = 0.0\n    strongest_extension\
    \ = \"\"\n    for extension in extensions\n        CAP, SM = 0, 0\n        for\
    \ char in extension\n            if isuppercase(char)\n                CAP +=\
    \ 1\n            elseif islowercase(char)\n                SM += 1\n         \
    \   end\n        end\n        if CAP - SM > strength\n            strength = CAP\
    \ - SM\n            strongest_extension = extension\n        end\n    end\n  \
    \  class_name * \".\" * strongest_extension\nend", "    \n    # your code here\n\
    \    \n    return\nend", "  extension_number = length(extensions)\n  str_ls =\
    \ zeros(extension_number)\n  for i = 1:extension_number\n    str_ls[i] = count_upper(extensions[i])\
    \ - count_lower(extensions[i])\n  end\n  max_number = findmax(str_ls)[1]\n  max_index\
    \ = findall(str_ls .== max_number)[1]\n  return string(class_name, \".\", extensions[max_index])\n\
    end", "    return class_name * \".\" * Strongest_Extension_(extensions)\nend",
  "    # equals to:\n    # function Strongest_Extension(class_name, extensions):\n\
    \    #     return class_name + '.' + max(extensions, key=extension_strength)\n\
    \    # i.e.\n    # >>> def Strongest_Extension(class_name, extensions):\n    #\
    \ ...     return class_name + '.' + max(extensions, key=extension_strength)\n\
    \    str_class_name = string(class_name)\n    # str_class_name = class_name +\
    \ \"\" #convert to String\n    strongest_extension = maximum(extensions, key=extension_strength)\n\
    \    return str_class_name * \".\" * strongest_extension\nend", "    counter =\
    \ 0\n    strength = 0\n    index = 0\n    for i in 1:length(extensions)\n    \
    \    if extension_strength(extensions[i]) > strength\n            strength = extension_strength(extensions[i])\n\
    \            index = i\n        end\n    end\n    return class_name * \".\" *\
    \ extensions[index]\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
