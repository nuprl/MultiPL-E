name: HumanEval_130_tri
language: jl
prompt: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
  \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
  \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) =\
  \ 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2)\
  \ + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n \
  \   tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 =\
  \ 8 \n    You are given a non-negative integer number n, you have to a return a\
  \ list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
  \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) ==\
  \ [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
  \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
  \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4,\
  \ 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
  \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
  \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
completions: ["    tri_series = Array{Int64}(n+1)\n    tri_series[1] = 1\n    tri_series[2]\
    \ = 3\n    for i in 3:n+1\n        if i % 2 == 0\n            tri_series[i] =\
    \ 1 + i / 2\n        else\n            tri_series[i] = tri_series[i-1] + tri_series[i-2]\
    \ + tri_series[i+1]\n        end\n    end\n    return tri_series\nend\nprintln(tri(4))",
  "    if n == 0\n        [1]\n    elseif n == 1\n        [1, 3]\n    elseif n ==\
    \ 2\n        [1, 3, 2]\n    else\n        x = tri(n - 1)\n        if n % 2 ==\
    \ 0\n            push!(x, 1 + (n / 2))\n        else\n            push!(x, x[end\
    \ - 2] + x[end - 1] + x[end])\n        end\n        x\n    end\nend", "    list\
    \ = [1, 3, 2]\n    if n < 3\n        return list[1:n+1]\n    end\n    for i in\
    \ 4:n+1\n        if i % 2 == 0\n            push!(list, i / 2)\n        else\n\
    \            push!(list, list[end] + list[end-1] + list[end-2])\n        end\n\
    \    end\n    return list\nend", "    r = zeros(Int64, n + 1)\n    r[1] = 1\n\
    \    r[2] = 3\n    r[3] = 2\n    if n == 3\n        return r\n    end\n    r[4]\
    \ = r[2] + r[1] + r[3]\n    for i in 5:n\n        r[i] = r[i - 1] + r[i - 2] +\
    \ r[i - 3]\n    end\n    return r\nend", "    if n == 0\n        return [1]\n\
    \    elseif n == 1\n        return [1,3]\n    elseif n == 2\n        return [1,3,2]\n\
    \    else\n        return [1,3,2,8]\n    end\nend", "  if n == 0 return [1] elseif\
    \ n == 1 return [1, 3] end\n  out = [1, 3, 2]\n  for i in 3:n\n    push!(out,\
    \ i % 2 == 0 ? 1 + (i / 2) : out[end] + out[end - 1] + out[end - 2])\n  end\n\
    \  return out\nend", "    r = zeros(Int64, n + 1)\n    r[1] = 1\n    for i in\
    \ 1:n \n        r[i + 1] = (i % 2 == 0) ?  1 + i / 2 : r[i] + r[i - 1] + r[i -\
    \ 2]\n    end\n    return r\nend", "    if n < 0\n        throw(DomainError())\n\
    \    end\n    if n == 0\n        return [1]\n    end\n    if n == 1\n        return\
    \ [1, 3]\n    end\n    if n == 2\n        return [1, 3, 2]\n    end\n    array\
    \ = [1, 3, 2]\n    for i in 3:n\n        v = 1 + (i / 2)\n        if i % 2 ==\
    \ 0\n            push!(array, v)\n        else\n            push!(array, array[i]\
    \ + array[i - 1] + array[i + 1])\n        end\n    end\n    return array\nend\n\
    \"\"\"Write a function that takes two arrays and returns their intersection, sorted\n\
    \    in ascending order.\n    \"\"\"", "    a = [1, 3, 2]\n    while length(a)\
    \ != n + 1\n        if iseven(length(a))\n            push!(a, 1 + (length(a)/2))\n\
    \        else\n            push!(a, a[end-2] + a[end-1] + a[end])\n        end\n\
    \    end\n    return a\nend", "    if n == 0 return [1] end\n    if n == 1 return\
    \ [1, 3] end\n    if n == 2 return [1, 3, 2] end\n    if n % 2 == 0\n        return\
    \ vcat(tri(n - 1), 1 + n / 2)\n    else\n        return vcat(tri(n - 1), sum(tri(n\
    \ - 1)[end-2:end]))\n    end\nend\ntri(3) == [1, 3, 2, 8]\n ", "    t = zeros(Int64,\
    \ n + 1)\n    t[1] = 1\n    for i = 2:n + 1\n        if i % 2 == 0\n         \
    \   t[i] = 1 + (i / 2)\n        else\n            t[i] = t[i - 1] + t[i - 2] +\
    \ t[i + 1]\n        end\n    end\n    return t\nend", "    if n == 0\n       \
    \ return [0]\n    elseif n == 1\n        return [1, 3]\n    elseif n == 2\n  \
    \      return [1, 3, 2]\n    elseif n == 3\n        return [1, 3, 2, 8]\n    else\n\
    \        v = [1, 3, 2, 8]\n        while length(v) <= n\n            if iseven(length(v))\n\
    \                push!(v, 1 + length(v) / 2)\n            else\n             \
    \   push!(v, v[end] + v[end - 1] + v[end - 2])\n            end\n        end\n\
    \        return v\n    end\nend", "    #YOUR CODE HERE\nend", "    if n < 1 \n\
    \        return [1]\n    elseif n == 1\n        return [1, 3]\n    elseif n ==\
    \ 2\n        return [1, 3, 2]\n    else\n        seq = [1, 3, 2]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(seq, 1 + (i / 2))\n\
    \            else\n                push!(seq, seq[i - 1] + seq[i - 2] + seq[i\
    \ + 1])\n            end\n        end\n        return seq\n    end\nend", "  \
    \  if n < 1 return 1 end \n    if n == 1 return [1, 3] end \n    #initialize array\n\
    \    tri_arr = zeros(Int64, n + 1)\n    tri_arr[1] = 1\n    tri_arr[2] = 3\n \
    \   tri_arr[3] = 2\n    # calculate the next n values in the array\n    for i\
    \ in 4:n + 1\n        if mod(i, 2) == 0 tri_arr[i] = div(i, 2) else tri_arr[i]\
    \ = tri_arr[i - 1] + tri_arr[i - 2] + tri_arr[i - 3] end\n    end\n    return\
    \ tri_arr\nend", "    if n == 0\n        return [0]\n    elseif n == 1\n     \
    \   return [0, 1]\n    elseif n == 2\n        return [0, 1, 1]\n    else\n   \
    \     v = [0, 1, 1]\n        for i in 3:n\n            push!(v, (v[i - 1] + v[i\
    \ - 2] + v[i - 3]))\n        end\n        return v\n    end\nend", "  result =\
    \ zeros(Int64, n + 1)\n  result[1] = 1\n  for i in 1:n \n    if i == 1\n     \
    \ result[i + 1] = 3\n    elseif i == 2\n      result[i + 1] = 2\n    elseif i\
    \ % 2 == 0\n      result[i + 1] = i/2\n    else \n      result[i + 1] = result[i]\
    \ + result[i - 1] + result[i - 2]\n    end\n  end\n  return result\nend\nprintln(tri(3))\n\
    #[1, 3, 2, 8]", "    a, b, c = 0, 1, 3\n    s = [a, b, c]\n    for i in 4:n+1\n\
    \        a, b, c = b, c, c + (a + b + c) / 2\n        push!(s, c)\n    end\n \
    \   return s\nend", "  if n == 0\n    return Int64[]\n  end\n  if n == 1\n   \
    \ return [3]\n  end\n  if n == 2\n    return [1, 3, 2]\n  end\n  if n == 3\n \
    \   return [1, 3, 2, 8]\n  end\n  sequence = [1, 3, 2, 8]\n  while length(sequence)\
    \ <= n\n    push!(sequence, sequence[end] + sequence[end - 1] + sequence[end -\
    \ 2])\n  end\n  return sequence\nend", "    if n == 0 \n        return [0]\n \
    \   else\n        res = ones(n + 1)\n        res[1] = 1\n        res[2] = 3\n\
    \        res[3] = 2\n        for i in 4:n + 1\n            if i % 2 == 0\n   \
    \             res[i] = 1 + i / 2\n            else\n                res[i] = res[i\
    \ - 1] + res[i - 2] + res[i + 1]\n            end\n        end\n        return\
    \ res\n    end\nend", "    if n < 1 return [1] end\n    if n == 1 return [1, 3]\
    \ end\n    if n == 2 return [1, 3, 2] end\n    sequence = [1, 3, 2]\n    for i\
    \ in 3:n\n        if i % 2 == 0\n            push!(sequence, floor(1 + i / 2))\n\
    \        else\n            push!(sequence, sequence[i] + sequence[i - 1] + sequence[i\
    \ + 1])\n        end\n    end\n    return sequence\nend", "    if n == 0 \n  \
    \      return []\n    elseif n == 1\n        return [1]\n    elseif n == 2\n \
    \       return [1, 3]\n    else\n        array = [1, 3, 2]\n        for i in 3:n\n\
    \            if i % 2 == 0\n                push!(array, 1 + i / 2)\n        \
    \    else\n                push!(array, array[i - 1] + array[i - 2] + array[i\
    \ + 1])\n            end\n        end\n        return array\n    end\nend", " \
    \   # your code here\nend\n```", "    if n == 0\n        return [1]\n    elseif\
    \ n == 1\n        return [1, 3]\n    elseif n == 2\n        return [1, 3, 2]\n\
    \    else\n        current = [1, 3, 2]\n        for i = 4:n+1\n            if\
    \ i % 2 == 0\n                push!(current, div(i, 2))\n            else\n  \
    \              push!(current, current[end] + current[end-1] + current[end-2])\n\
    \            end\n        end\n        return current\n    end\nend\n ", "   \
    \ a = zeros(Int64, n+1)\n    for i in range(1, n+1)\n        if i == 1\n     \
    \       a[i] = 3\n        elseif i == 2\n            a[i] = 1\n        elseif\
    \ i == 3\n            a[i] = 2\n        elseif i % 2 == 0\n            a[i] =\
    \ a[i/2] + 1\n        else\n            a[i] = a[i-1] + a[i-2] + a[i+1]\n    \
    \    end\n    end\n    return a\nend", "    ret = zeros(Int64, n + 1)\n    ret[1]\
    \ = 1\n    ret[2] = 3\n    ret[3] = 2\n    for i = 4:n + 1\n        if i % 2 ==\
    \ 0\n            ret[i] = 1 + i / 2\n        else\n            ret[i] = ret[i\
    \ - 1] + ret[i - 2] + ret[i + 1]\n        end\n    end\n    return ret\nend",
  "    t = zeros(Int64, n+1)\n    t[1] = 1\n    t[2] = 3\n    t[3] = 2\n    for i\
    \ in 4:n+1\n        t[i] = ifelse(i % 2 == 0, Int64(1 + i / 2), t[i-1] + t[i-2]\
    \ + t[i+1])\n    end\n    return t\nend", "    tri=zeros(Int64,n+1)\n    tri[1]=1\n\
    \    for i=2:n+1\n        if (i%2 == 0)\n            tri[i]=Int64(1+(i/2))\n \
    \       else\n            tri[i]=tri[i-1]+tri[i-2]+tri[i+1]\n        end\n   \
    \ end\nend", "    if n == 0\n        return [1]\n    elseif n == 1\n        return\
    \ [1, 3]\n    elseif n == 2\n        return [1, 3, 2]\n    else\n        list\
    \ = [1, 3, 2]\n        for i in 3:n\n            if i % 2 == 0\n             \
    \   push!(list, div(i, 2))\n            else\n                push!(list, list[i\
    \ - 1] + list[i - 2] + list[i + 1])\n            end\n        end\n        return\
    \ list\n    end\nend", "    if n == 0\n        return [1]\n    elseif n == 1\n\
    \        return [1,3]\n    elseif n == 2\n        return [1,3,2]\n    else\n \
    \       a = [1,3,2]\n        for i in 3:n\n            push!(a,tri(i-1)[end]+tri(i-2)[end]+tri(i-3)[end])\n\
    \        end\n        return a\n    end\nend", "    \"\"\"\n    Input: n::Int64,\
    \ number of Tribonacci sequence\n    Output: Vector{Int64}\n    \"\"\"\n    if\
    \ n == 0\n        return []\n    elseif n == 1\n        return [3]\n    elseif\
    \ n == 2\n        return [1, 3]\n    else\n        vec = [1, 3, 2]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                append!(vec, 1 + (i / 2))\n\
    \            else\n                append!(vec, vec[i-1] + vec[i-2] + vec[i+1])\n\
    \            end\n        end\n        return vec\n    end\nend", "    tri_vec\
    \ = [1, 3, 2]\n    if n == 0\n        return []\n    elseif n < 3\n        return\
    \ tri_vec[1:n]\n    else\n        for i in 3:n\n            val = tri_vec[i]\n\
    \            if i % 2 == 0\n                val = 1 + (i / 2)\n            else\n\
    \                val = tri_vec[i - 1] + tri_vec[i - 2] + tri_vec[i + 1]\n    \
    \        end\n            push!(tri_vec, val)\n        end\n        return tri_vec\n\
    \    end\nend", "    if n == 0 \n        return [1]\n    elseif n == 1\n     \
    \   return [1, 3]\n    elseif n == 2\n        return [1, 3, 2]\n    else\n   \
    \     a = [1, 3, 2]\n        for i in 3:n\n            push!(a, 1 + div(i, 2))\n\
    \            for j in 1:i-1\n                a[i+1] += a[j]\n            end\n\
    \        end\n        return a\n    end\nend", "    v = zeros(Int64, n+1)\n  \
    \  v[1] = 1\n    v[2] = 3\n    v[3] = 2\n    for i in 4:n+1\n        if (i % 2\
    \ == 0)\n            v[i] = 1 + i / 2\n        else\n            v[i] = v[i-1]\
    \ + v[i-2] + v[i-3]\n        end\n    end\n    return v\nend", "    if n == 0\
    \ \n        return []\n    elseif n == 1\n        return [1]\n    elseif n ==\
    \ 2\n        return [1, 3]\n    elseif n == 3\n        return [1, 3, 2, 8]\n \
    \   else\n        s = [1, 3, 2, 8]\n        for i in 4:n\n            if i % 2\
    \ == 0\n                push!(s, div(i, 2))\n            else\n              \
    \  push!(s, s[end] + s[end - 1] + s[end - 2])\n            end\n        end\n\
    \        return s\n    end\nend", "    x = zeros(Int64, n+1)\n    x[1] = 1\n \
    \   x[2] = 3\n    for i in 3:n+1\n        if i % 2 == 0\n            x[i] = 1\
    \ + (i / 2)\n        else\n            x[i] = x[i-1] + x[i-2] + x[i+1]\n     \
    \   end\n    end\n    return x\nend\n@assert tri(0) == [1]\n@assert tri(1) ==\
    \ [1, 3]\n@assert tri(3) == [1, 3, 2, 8]\n@assert tri(10) == [1, 3, 2, 8, 5, 5,\
    \ 13, 21, 34, 55, 89]", "  return [(1 + i/2) % i == 0 ? 1 + i/2 : tri(i-1) + tri(i-2)\
    \ + tri(i+1) for i in 1:n]\nend", "    tri_vec = [1, 3, 2]\n    for i in 3:n\n\
    \        iseven(tri_vec[i]) ? push!(tri_vec, tri_vec[i] + tri_vec[i - 1] + tri_vec[i\
    \ - 2]) : push!(tri_vec, 1 + div(i, 2))\n    end\n    return tri_vec\nend", " \
    \   tribonacci(1) = 3\n    tribonacci(n) = n % 2 == 0 ? n / 2 + 1 : tribonacci(n\
    \ - 1) + tribonacci(n - 2) + tribonacci(n + 1)\n    [tribonacci(i) for i in 1:n+1]\n\
    end", "    tri = Vector{Int64}(undef, n+1)\n    tri[1] = 1\n    tri[2] = 3\n \
    \   tri[3] = 2\n    for i in 4:n+1\n        if i % 2 == 0\n            tri[i]\
    \ = 1 + i / 2\n        else\n            tri[i] = tri[i-1] + tri[i-2] + tri[i-3]\n\
    \        end\n    end\n    return tri\nend", "    if n == 0 \n        return [1]\n\
    \    else\n        if n == 1\n            return [1,3]\n        else\n       \
    \     sequence = Vector{Int64}(undef, n+1)\n            sequence[1] = 1\n    \
    \        sequence[2] = 3\n            sequence[3] = 2\n            for i in 4:n+1\n\
    \                if i % 2 == 0\n                    sequence[i] = i / 2\n    \
    \            else\n                    sequence[i] = sequence[i-1] + sequence[i-2]\
    \ + sequence[i-3]\n                end\n            end\n            return sequence\n\
    \        end\n    end\nend", "    tri_series = [1, 3, 2]\n    while length(tri_series)\
    \ < n + 1\n        if iseven(length(tri_series)) \n            push!(tri_series,\
    \ 1 + (length(tri_series) / 2))\n        else\n            push!(tri_series, tri_series[end]\
    \ + tri_series[end - 1] + tri_series[end - 2])\n        end\n    end\n    return\
    \ tri_series\nend", "    result = zeros(Int64, n + 1)\n    for i in 1:n + 1\n\
    \        if i == 1\n            result[i] = 1\n        elseif i == 2\n       \
    \     result[i] = 3\n        elseif i == 3\n            result[i] = 2\n      \
    \  elseif i % 2 == 0\n            result[i] = i / 2\n        else\n          \
    \  result[i] = result[i - 1] + result[i - 2] + result[i - 3]\n        end\n  \
    \  end\n    return result\nend", "    if n == 0 \n        return [1]\n    elseif\
    \ n == 1\n        return [1, 3]\n    else\n        A = tri(n - 1)\n        len\
    \ = length(A)\n        if (len % 2) == 0\n            push!(A, 1 + len / 2)\n\
    \        else\n            push!(A, A[len - 1] + A[len - 2] + A[len + 1])\n  \
    \      end\n        return A\n    end\nend", "    #Your code here\n    return\
    \ 1:n\nend", "    arr = Int64[]\n    i = 1\n    while i <= n\n        if i ==\
    \ 1\n            push!(arr, 1)\n        elseif i == 2\n            push!(arr,\
    \ 3)\n        elseif i == 3\n            push!(arr, 2)\n        else\n       \
    \     push!(arr, arr[i - 1] + arr[i - 2] + arr[i - 3])\n        end\n        i\
    \ += 1\n    end\n    return arr\nend", "    if n == 0\n        return [1]\n  \
    \  elseif n == 1\n        return [1, 3]\n    elseif n == 2\n        return [1,\
    \ 3, 2]\n    elseif n == 3\n        return [1, 3, 2, 8]\n    else\n        vec\
    \ = zeros(Int64, n+1)\n        vec[1] = 1\n        vec[2] = 3\n        vec[3]\
    \ = 2\n        for i in 4:n+1\n            if i % 2 == 0\n                vec[i]\
    \ = Int64(1 + i / 2)\n            else\n                vec[i] = vec[i-1] + vec[i-2]\
    \ + vec[i-3]\n            end\n        end\n        return vec\n    end\nend",
  "    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n \
    \   elseif n == 2\n        return [1, 3, 2]\n    else\n        v = tri(n - 1)\n\
    \        if iseven(n)\n            return vcat(v, div(1 + n, 2))\n        else\n\
    \            return vcat(v, v[end] + v[end - 1] + v[end - 2])\n        end\n \
    \   end\nend", "    x = Vector{Int64}(undef, n+1)\n    x[1] = 1\n    x[2] = 3\n\
    \    x[3] = 2\n    for i in 4:n+1\n        if i % 2 == 0\n            x[i] = 1\
    \ + i / 2\n        else\n            x[i] = x[i-1] + x[i-2] + x[i-3]\n       \
    \ end\n    end\n    return x\nend", "    if n < 1\n        return [1]\n    elseif\
    \ n == 1\n        return [1, 3]\n    elseif n == 2\n        return [1, 3, 2]\n\
    \    elseif n % 2 == 0\n        return [1, 3, 2, 2]\n    else\n        return\
    \ [1, 3, 2, 2, 11]\n    end\nend", "    tri = Vector{Int64}(n+1)\n    tri[1] =\
    \ 1\n    tri[2] = 3\n    tri[3] = 2\n    for i in 4:n+1\n        tri[i] = ifelse(rem(i,2)\
    \ == 0, 1+i/2, tri[i-1]+tri[i-2]+tri[i+1])\n    end\n    return tri\nend", " \
    \   s = [1, 3, 2]\n    for i = 1:n\n        if mod(i, 2) == 0\n            push!(s,\
    \ div(i, 2))\n        else\n            push!(s, s[end - 2] + s[end - 1] + s[end])\n\
    \        end\n    end\n    return s\nend", "    if n==0\n        return [1]\n\
    \    elseif n==1\n        return [1, 3]\n    elseif n==2\n        return [1, 3,\
    \ 2]\n    elseif n>2\n        v = tri(n-1)\n        push!(v, tri(n-3)[end] + tri(n-2)[end]\
    \ + tri(n-1)[end])\n        return v\n    end\nend", "    seq = fill(0, n + 1)\n\
    \    seq[1] = 1\n    seq[2] = 3\n    seq[3] = 2\n    for i in 4:n + 1\n      \
    \  seq[i] = seq[i - 1] + seq[i - 2] + seq[i - 3]\n    end\n    return seq\nend",
  "    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n \
    \   elseif n == 2\n        return [1, 3, 2]\n    elseif n == 3\n        return\
    \ [1, 3, 2, 8]\n    else\n        x = tri(n - 1)\n        push!(x, 1 + div(n,\
    \ 2))\n        push!(x, x[end] + x[end - 1] + x[end - 2])\n        return x\n\
    \    end\nend", "    n += 1\n    result = Vector{Int64}(n)\n    result[1] = 1\n\
    \    if n >= 2\n        result[2] = 3\n    end\n    if n >= 3\n        result[3]\
    \ = 2\n    end\n    if n >= 4\n        for i = 4:n\n            if mod(i, 2) ==\
    \ 0\n                result[i] = 1 + (i / 2)\n            else\n             \
    \   result[i] = result[i - 1] + result[i - 2] + result[i + 1]\n            end\n\
    \        end\n    end\n    return result\nend", "    t = [3, 1, 2]\n    for i\
    \ = 4:n+1\n        push!(t, t[i-1] + t[i-2] + t[i-3])\n    end\n    return t\n\
    end", "    Tri = Array{Int64}(n+1)\n    Tri[1] = 1\n    Tri[2] = 3\n    Tri[3]\
    \ = 2\n    if n <= 2\n        return Tri[1:n+1]\n    end\n    for i in 4:n+1\n\
    \        if i % 2 == 0\n            Tri[i] = Int64(1 + i / 2)\n        else\n\
    \            Tri[i] = Tri[i-1] + Tri[i-2] + Tri[i+1]\n        end\n    end\n \
    \   return Tri\nend", "    @assert n >= 0 \"n must be non-negative\" \n    result\
    \ = Vector{Int64}(n + 1)\n    result[1] = 1\n    result[2] = 3\n    result[3]\
    \ = 2\n    for i in 4:n + 1\n        result[i] = result[i - 3] + result[i - 2]\
    \ + result[i - 1]\n    end\n    return result \nend\ntri(3)", "    \n    if n\
    \ == 0\n        return [0]\n    end\n    \n    if n == 1\n        return [1, 3]\n\
    \    end\n    \n    if n == 2\n        return [1, 3, 2]\n    end\n    \n    arr\
    \ = [1, 3, 2]\n    \n    for i in 3:n\n        if i % 2 == 0\n            push!(arr,\
    \ 1 + (i / 2))\n        else\n            push!(arr, arr[i - 1] + arr[i - 2] +\
    \ arr[i + 1])\n        end\n    end\n    \n    return arr\nend", "    tri_seq\
    \ = [1, 3, 2]\n    for i in 3:n\n        if i % 2 == 0\n            push!(tri_seq,\
    \ 1 + i / 2)\n        else\n            push!(tri_seq, tri_seq[i-1] + tri_seq[i-2]\
    \ + tri_seq[i+1])\n        end\n    end\n    return tri_seq\nend", "    tri(1)\
    \ = 3\n    tri(n) = (n % 2 == 0) ? 1 + n / 2 : tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n    (1:n + 1) .> tri\nend\n ", "    l = zeros(Int64, n + 1)\n    l[1]\
    \ = 1\n    l[2] = 3\n    for i = 3:n\n        if i % 2 == 0\n            l[i]\
    \ = 1 + i / 2\n        else\n            l[i] = l[i - 1] + l[i - 2] + l[i + 1]\n\
    \        end\n    end\n    return l\nend", "    n>=0 || throw(DomainError())\n\
    \    tri(i::Int64) = i>0 ? 3i : 1\n    [tri(i) for i in 0:n]\nend", "    if n\
    \ == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n    elseif\
    \ n == 2\n        return [1, 3, 2]\n    elseif n == 3\n        return [1, 3, 2,\
    \ 8]\n    elseif n > 3\n        v1 = tri(n - 1)\n        n -= 1\n        v2 =\
    \ v1[n]\n        v3 = v1[n - 1]\n        v4 = v1[n - 2]\n        v5 = v1[n + 1]\n\
    \        if n % 2 == 0\n            return push!(v1, (1 + (n / 2)))\n        else\n\
    \            return push!(v1, (v2 + v3 + v5))\n        end\n    end\nend", " \
    \   tri = zeros(Int64, n+1)\n    tri[1] = 1\n    tri[2] = 3\n    tri[3] = 2\n\
    \    for i = 4:n+1\n        if iseven(i)\n            tri[i] = Int64(i/2)\n  \
    \      else\n            tri[i] = tri[i-1] + tri[i-2] + tri[i-3]\n        end\n\
    \    end\n    return tri\nend\n ", "    # Your code\nend", "    if n <= 1\n  \
    \      return 1:n\n    end\n    output = [1; 3; 2]\n    for ii in 4:n\n      \
    \  output = push!(output, output[end-2] + output[end-1] + output[end])\n    end\n\
    \    return output\nend", "    v = zeros(Int64, n + 1)\n    v[1] = 1\n    v[2]\
    \ = 3\n    v[3] = 2\n    for i in 4:n + 1\n        if i % 2 == 0\n           \
    \ v[i] = Int64(1 + i / 2)\n        else\n            v[i] = v[i - 1] + v[i - 2]\
    \ + v[i + 1]\n        end\n    end\n    return v\nend", "    a = Array{Int64}(undef,\
    \ n + 1)\n    a[1] = 1\n    a[2] = 3\n    a[3] = 2\n    for i = 4:n + 1\n    \
    \    if i % 2 == 0\n            a[i] = 1 + i / 2\n        else\n            a[i]\
    \ = a[i - 1] + a[i - 2] + a[i + 1]\n        end\n    end\n    return a\nend",
  "    a = [1, 3, 2]\n    if n == 0\n        return [0]\n    elseif n == 1\n     \
    \   return [1]\n    elseif n == 2\n        return [1, 3]\n    elseif n == 3\n\
    \        return [1, 3, 2]\n    else\n        for i in 1:n-3\n            b = a[i]\
    \ + a[i+1] + a[i+2]\n            push!(a, b)\n        end\n        return a\n\
    \    end\nend", "    list = Vector{Int64}()\n    for i in 1:n+1\n        if i\
    \ == 1\n            push!(list, 1)\n        elseif i == 2\n            push!(list,\
    \ 3)\n        elseif i == 3\n            push!(list, 2)\n        elseif i % 2\
    \ == 0\n            push!(list, i / 2)\n        else\n            push!(list,\
    \ list[i-1] + list[i-2] + list[i-3])\n        end\n    end\n    return list\n\
    end", "    a = 1\n    b = 3\n    c = 2\n    out = [a, b, c]\n    for i in 4:n+1\n\
    \        x = a + b + c\n        a = b\n        b = c\n        c = x\n        push!(out,\
    \ x)\n    end\n    return out\nend", "    out = Vector{Int64}(n+1)\n    for i\
    \ in 1:n+1\n        if i == 1\n            out[i] = 1\n        elseif i == 2\n\
    \            out[i] = 3\n        elseif i == 3\n            out[i] = 2\n     \
    \   else\n            if i % 2 == 0\n                out[i] = 1 + i / 2\n    \
    \        else\n                out[i] = out[i-1] + out[i-2] + out[i-3]\n     \
    \       end\n        end\n    end\n    return out\nend", "    tribonacci = [1,\
    \ 3, 2]\n    for i in 4:n\n        if i % 2 == 0\n            append!(tribonacci,\
    \ 1 + (i / 2))\n        else\n            append!(tribonacci, tribonacci[i - 1]\
    \ + tribonacci[i - 2] + tribonacci[i + 1])\n        end\n    end\n    return tribonacci\n\
    end", "    s = zeros(Int64, n + 1)\n    s[1] = 1\n    for i = 2:n\n        if\
    \ i % 2 == 0\n            s[i] = 1 + i / 2\n        else\n            s[i] = s[i\
    \ - 1] + s[i - 2] + s[i + 1]\n        end\n    end\n    return s\nend", "    result\
    \ = zeros(Int64, n + 1)\n    result[1] = 1\n    result[2] = 3\n    result[3] =\
    \ 2\n    for i in 4:n + 1\n        result[i] = result[i - 1] + result[i - 2] +\
    \ result[i + 1]\n    end\n    return result\nend", "    tri = zeros(Int64, n +\
    \ 1)\n    for i = 1: n + 1\n        if i == 1\n            tri[i] = 1\n      \
    \  elseif i == 2\n            tri[i] = 3\n        elseif i == 3\n            tri[i]\
    \ = 2\n        else\n            tri[i] = tri[i - 1] + tri[i - 2] + tri[i - 3]\n\
    \        end\n    end\n    return tri\nend", "    if n == 0\n        return [1]\n\
    \    elseif n == 1\n        return [1, 3]\n    elseif n == 2\n        return [1,\
    \ 3, 2]\n    else\n        a, b, c = 1, 3, 2\n        x = Vector{Int64}(n + 1)\n\
    \        x[1] = a\n        x[2] = b\n        x[3] = c\n        for i in 4:n +\
    \ 1\n            if i % 2 == 0\n                x[i] = 1 + (i / 2)\n         \
    \   else\n                x[i] = a + b + c\n                a = b\n          \
    \      b = c\n                c = x[i]\n            end\n        end\n       \
    \ return x\n    end\nend", "    if n <= 0\n        return Int64[]\n    end\n \
    \   if n == 1\n        return [3]\n    end\n    if n == 2\n        return [1,\
    \ 3, 2]\n    end\n    res = [1, 3, 2]\n    for i in 3:n\n        res = [res[end],\
    \ res[end - 1], res[end - 2], res[end] + res[end - 1] + res[end - 2]]\n    end\n\
    \    return res\nend", "    if n == 0\n        return [1]\n    elseif n == 1\n\
    \        return [1, 3]\n    elseif n == 2\n        return [1, 3, 2]\n    else\n\
    \        sum = 0\n        t = [1, 3, 2]\n        for i = 3:n\n            sum\
    \ = t[i] + t[i - 1] + t[i - 2]\n            push!(t, sum)\n        end\n     \
    \   return t\n    end\nend", "    if n == 0\n        return [0]\n    elseif n\
    \ == 1\n        return [0, 1]\n    elseif n == 2\n        return [0, 1, 2]\n \
    \   else\n        nums = [0, 1, 2]\n        for i in 3:n\n            if i % 2\
    \ == 0\n                nums = [nums; 1 + i / 2]\n            else\n         \
    \       nums = [nums; nums[end] + nums[end - 1] + nums[end - 2]]\n           \
    \ end\n        end\n        return nums\n    end\nend", "    tri = zeros(Int64,\
    \ n + 1)\n    tri[1] = 1\n    tri[2] = 3\n    for i in 3:n\n        if i % 2 ==\
    \ 0\n            tri[i] = 1 + Int64(i / 2)\n        else\n            tri[i] =\
    \ tri[i - 1] + tri[i - 2] + tri[i + 1]\n        end\n    end\n    return tri\n\
    end", "    tri = [1, 3, 2]\n    for i = 4:n+1\n        if i % 2 == 0\n       \
    \     push!(tri, i / 2)\n        else\n            push!(tri, tri[i-1] + tri[i-2]\
    \ + tri[i-3])\n        end\n    end\n    return tri\nend", "    f = zeros(Int64,\
    \ n + 1)\n    f[1] = 1\n    f[2] = 3\n    f[3] = 2\n    for i in range(4, n +\
    \ 1)\n        f[i] = f[i - 1] + f[i - 2] + f[i + 1]\n    end\n    return f\nend",
  "    if n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n \
    \   elseif n == 2\n        return [0, 1, 1]\n    else\n        A = zeros(Int64,\
    \ n + 1)\n        A[1] = 0\n        A[2] = 1\n        A[3] = 1\n        for i\
    \ in 4:n + 1\n            A[i] = A[i - 1] + A[i - 2] + A[i - 3]\n        end\n\
    \        return A\n    end\nend", "    tri = zeros(Int64, n + 1)\n    tri[1] =\
    \ 1\n    tri[2] = 3\n    tri[3] = 2\n    for i in 4:n + 1\n        tri[i] = tri[i\
    \ - 1] + tri[i - 2] + tri[i + 1]\n    end\n    return tri\nend", "    if n ==\
    \ 0 \n        return [0]\n    elseif n == 1\n        return [1, 3]\n    elseif\
    \ n == 2\n        return [1, 3, 2]\n    else\n        a, b, c = 1, 3, 2\n    \
    \    list = [a, b, c]\n        for i = 1:n-2\n            d = a + b + c\n    \
    \        if d % 2 == 0\n                d = 1 + d / 2\n            end\n     \
    \       push!(list, d)\n            a, b, c = b, c, d\n        end\n        return\
    \ list\n    end\nend", "    if n == 0 \n        return []\n    elseif n == 1\n\
    \        return [1]\n    elseif n == 2\n        return [1, 3]\n    else\n    \
    \    lst = [1, 3, 2]\n        while n > 2\n            append!(lst, lst[end -\
    \ 2] + lst[end - 1] + lst[end])\n            n -= 1\n        end\n        return\
    \ lst\n    end\nend", "    res = zeros(Int64, n + 1)\n    res[1] = 1\n    for\
    \ i = 2:n + 1\n        res[i] = ifelse(i % 2 == 0, i / 2, res[i - 1] + res[i -\
    \ 2] + res[i + 1])\n    end\n    return res\nend\n@test tri(3) == [1, 3, 2, 8]",
  "    result = zeros(Int64, n + 1)\n    result[1] = 1\n    result[2] = 3\n    for\
    \ i = 3:n + 1\n        if i % 2 == 0\n            result[i] = 1 + i / 2\n    \
    \    else\n            result[i] = result[i - 1] + result[i - 2] + result[i +\
    \ 1]\n        end\n    end\n    return result\nend", "    if n == 0\n        return\
    \ [0]\n    elseif n == 1\n        return [1, 3]\n    elseif n == 2\n        return\
    \ [1, 3, 2]\n    else\n        res = [1, 3, 2]\n        for i = 3:n\n        \
    \    if (i % 2) == 0\n                push!(res, 1 + i / 2)\n            else\n\
    \                push!(res, res[i] + res[i - 1] + res[i + 1])\n            end\n\
    \        end\n        return res\n    end\nend", "    tria(1) = 3\n    tria(n)\
    \ = (n%2 == 0) ? 1 + n / 2 : tria(n - 1) + tria(n - 2) + tria(n + 1)\n    [tria(i)\
    \ for i in 1:n+1]\nend", "    s = [1, 3, 2] \n    if n < 3 \n        return s[1:n]\
    \ \n    end\n    for i in 4:n \n        push!(s, (i % 2 == 0) ? (1 + i / 2) :\
    \ (s[end] + s[end - 1] + s[end - 2])) \n    end\n    return s\nend", "    result\
    \ = Vector{Int64}(n + 1)\n    result[1] = 1\n    result[2] = 3\n    result[3]\
    \ = 2\n    for i in 4:n + 1\n        result[i] = result[i - 1] + result[i - 2]\
    \ + result[i - 3]\n    end\n    return result\nend", "    T = zeros(Int64, n+1)\n\
    \    T[1] = 1\n    T[2] = 3\n    T[3] = 2\n    for i in 4:n+1\n        if i %\
    \ 2 == 0\n            T[i] = 1 + (i / 2)\n        else\n            T[i] = T[i-1]\
    \ + T[i-2] + T[i+1]\n        end\n    end\n    return T\nend", "    tri = zeros(Int64,\
    \ n + 1)\n    tri[1] = 1\n    tri[2] = 3\n    tri[3] = 2\n    for i in 4:n + 1\n\
    \        tri[i] = ifelse(i % 2 == 0, 1 + (i / 2), tri[i - 1] + tri[i - 2] + tri[i\
    \ + 1])\n    end\n    return tri\nend", "    result = [1, 3, 2]\n    for i in\
    \ 3:n \n        push!(result, result[i] + result[i - 1] + result[i - 2])\n   \
    \ end\n    return result\nend", "    seq = zeros(Int64, n + 1)\n    seq[1] = 1\n\
    \    seq[2] = 3\n    seq[3] = 2\n    for i in 4:n + 1\n        if i % 2 == 0\n\
    \            seq[i] = seq[i - 1] + seq[i - 2] + seq[i - 3]\n        else\n   \
    \         seq[i] = Int64(round(1 + i / 2))\n        end\n    end\n    return seq\n\
    end", "    if n == 0 \n        return [1]\n    elseif n == 1\n        return [1,\
    \ 3]\n    elseif n == 2\n        return [1, 3, 2]\n    else\n        @assert n\
    \ > 2\n        vec = Int64[]\n        append!(vec, [1, 3, 2])\n        for i in\
    \ 3:n\n            push!(vec, (vec[i - 1] + vec[i - 2] + vec[i - 3]))\n      \
    \  end\n        return vec\n    end\nend", "    if n == 0\n        return [1]\n\
    \    elseif n == 1\n        return [1, 3]\n    elseif n == 2\n        return [1,\
    \ 3, 2]\n    else\n        prev = [1, 3, 2]\n        while length(prev) < n +\
    \ 1\n            if (length(prev) % 2) == 0\n                new = 1 + length(prev)\
    \ / 2\n            else\n                new = prev[end] + prev[end - 1] + prev[end\
    \ - 2]\n            end\n            push!(prev, new)\n        end\n        return\
    \ prev\n    end\nend", "    arr = zeros(Int64, n + 1)\n    arr[1] = 1\n    arr[2]\
    \ = 3\n    arr[3] = 2\n    for i = 4:n + 1\n        if i % 2 == 0\n          \
    \  arr[i] = 1 + (i / 2)\n        else\n            arr[i] = arr[i - 1] + arr[i\
    \ - 2] + arr[i + 1]\n        end\n    end\n    return arr\nend", "    results\
    \ = zeros(Int64, n + 1)\n    results[1] = 1\n    results[2] = 3\n    results[3]\
    \ = 2\n    for i = 4:n + 1\n        if iseven(i)\n            results[i] = 1 +\
    \ (i / 2)\n        else\n            results[i] = results[i - 1] + results[i -\
    \ 2] + results[i + 1]\n        end\n    end\n    return results\nend\n@testset\
    \ \"Tribonacci\" begin\n    @test tri(3) == [1, 3, 2, 8]\n    @test tri(5) ==\
    \ [1, 3, 2, 8, 5, 13]\n    @test tri(0) == [1]\nend", "  if n == 0\n    return\
    \ [1]\n  elseif n == 1\n    return [1, 3]\n  elseif n == 2\n    return [1, 3,\
    \ 2]\n  else\n    t = [1, 3, 2]\n    while(n > 2)\n      push!(t, t[end] + t[end\
    \ - 1] + t[end - 2])\n      n -= 1\n    end\n    return t\n  end\nend", "    if\
    \ n == 0\n        return []\n    elseif n == 1\n        return [3]\n    elseif\
    \ n == 2\n        return [1, 3]\n    else\n        last_three = [1, 3, 2]\n  \
    \      for i in 3:n\n            if i % 2 == 0\n                push!(last_three,\
    \ 1 + i / 2)\n            else\n                push!(last_three, last_three[end]\
    \ + last_three[end - 1] + last_three[end - 2])\n            end\n        end\n\
    \        return last_three\n    end\nend", "    if n == 0\n        return [1]\n\
    \    elseif n == 1\n        return [1, 3]\n    elseif n == 2\n        return [1,\
    \ 3, 2]\n    elseif n == 3\n        return [1, 3, 2, 8]\n    else\n        p =\
    \ [1, 3, 2, 8]\n        for i in 4:n\n            if i % 2 == 0\n            \
    \    push!(p, div(i, 2) + 1)\n            else\n                push!(p, p[i -\
    \ 1] + p[i - 2] + p[i + 1])\n            end\n        end\n        return p\n\
    \    end\nend", "    if n == 0\n        return [0]\n    elseif n == 1\n      \
    \  return [0, 1]\n    elseif n == 2\n        return [0, 1, 1]\n    else\n    \
    \    t = [0, 1, 1]\n        for i in 3:n + 1\n            if i % 2 == 0\n    \
    \            push!(t, Int64(1 + i / 2))\n            else\n                push!(t,\
    \ t[i - 1] + t[i - 2] + t[i + 1])\n            end\n        end\n        return\
    \ t\n    end\nend", "    vec = [1, 3, 2]\n    for i in 3:n\n        if i % 2 ==\
    \ 0\n            push!(vec, 1 + i / 2)\n        else\n            push!(vec, vec[i\
    \ - 1] + vec[i - 2] + vec[i + 1])\n        end\n    end\n    return vec\nend",
  "    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n \
    \   elseif n == 2\n        return [1, 3, 2]\n    else\n        seq = zeros(Int64,\
    \ n+1)\n        seq[1:3] = [1, 3, 2]\n        for i in 4:n+1\n            seq[i]\
    \ = seq[i-1] + seq[i-2] + seq[i-3]\n        end\n        return seq\n    end\n\
    end", "    #return a list of the first n + 1 numbers of the Tribonacci sequence.\n\
    \    #assume n >= 0\n    result = zeros(Int64, n + 1)\n    if n >= 1\n       \
    \ result[1] = 1\n    end\n    if n >= 2\n        result[2] = 3\n    end\n    if\
    \ n >= 3\n        result[3] = 2\n    end\n    if n >= 4\n        for i in 4:n\
    \ + 1\n            if iseven(i)\n                result[i] = 1 + i / 2\n     \
    \       else\n                result[i] = result[i - 1] + result[i - 2] + result[i\
    \ + 1]\n            end\n        end\n    end\n    return result\nend", "    output\
    \ = zeros(Int64, n + 1)\n    output[1] = 1\n    output[2] = 3\n    output[3] =\
    \ 2\n    for i in 4:n + 1\n        if i % 2 == 0\n            output[i] = 1 +\
    \ (i / 2)\n        else\n            output[i] = output[i - 1] + output[i - 2]\
    \ + output[i + 1]\n        end\n    end\n    return output\nend", "    tri = zeros(Int64,\
    \ n + 1)\n    tri[1] = 1\n    tri[2] = 3\n    tri[3] = 2\n    i = 4\n    while\
    \ i <= n + 1\n        if iseven(i)\n            tri[i] = 1 + i / 2\n        else\n\
    \            tri[i] = tri[i - 1] + tri[i - 2] + tri[i + 1]\n        end\n    \
    \    i += 1\n    end\n    return tri\nend", "    if n == 0 return [1]\n    elseif\
    \ n == 1 return [1, 3]\n    elseif n == 2 return [1, 3, 2]\n    else \n      \
    \  result = [1, 3, 2]\n        for i in 3:n \n            if (i % 2) == 0 result\
    \ = [result; 1 + (i / 2)]\n            else result = [result; result[end] + result[end\
    \ - 1] + result[end - 2]]\n            end\n        end\n        return result\n\
    \    end\nend", "    n = n+1\n    u = Vector{Int64}(n)\n    if n == 1 \n     \
    \   u[1] = 1\n    elseif n == 2\n        u[1] = 1\n        u[2] = 3\n    elseif\
    \ n == 3\n        u[1] = 1\n        u[2] = 3\n        u[3] = 2\n    else\n   \
    \     u[1] = 1\n        u[2] = 3\n        u[3] = 2\n        for i in 4:n\n   \
    \         if i % 2 == 0\n                u[i] = u[i] + i/2\n            else\n\
    \                u[i] = u[i-1] + u[i-2] + u[i+1]\n            end\n        end\n\
    \    end\n    return u\nend", "    result = [1, 3, 2]\n    if n > 2\n        for\
    \ i = 4:n + 1\n            if i % 2 == 0\n                push!(result, 1 + i\
    \ / 2)\n            else\n                push!(result, result[i - 1] + result[i\
    \ - 2] + result[i - 3])\n            end\n        end\n    end\n    return result\n\
    end", "    #your code here\nend\n ", "    res = Vector{Int64}(n + 1)\n    res[1]\
    \ = 1\n    for i in 2:n + 1\n        res[i] = if i % 2 == 0\n            i / 2\n\
    \        else\n            if i == 3\n                res[2] + res[1] + res[3]\n\
    \            else\n                res[i - 1] + res[i - 2] + res[i + 1]\n    \
    \        end\n        end\n    end\n    return res\nend", "    if n == 0\n   \
    \     return [1]\n    elseif n == 1\n        return [1,3]\n    elseif n == 2\n\
    \        return [1,3,2]\n    else\n        a = [1,3,2]\n        for i in 3:n\n\
    \            if i % 2 == 0\n                push!(a, 1 + i / 2)\n            else\n\
    \                push!(a, a[i-1] + a[i-2] + a[i+1])\n            end\n       \
    \ end\n        return a\n    end\nend", "    if n==1 return [1]\n    elseif n==2\
    \ return [1,3]\n    elseif n==3 return [1,3,2]\n    else return [1,3,2,8]\n  \
    \  end\nend\ntri(3)", "    if n == 0\n        return [1]\n    elseif n == 1\n\
    \        return [1, 3]\n    elseif n == 2\n        return [1, 3, 2]\n    else\n\
    \        return vcat(tri(n - 1), [1 + (n / 2), tri(n - 1)[end] + tri(n - 2)[end]\
    \ + tri(n - 3)[end]])\n    end\nend", "    if n == 0 \n        return []\n   \
    \ elseif n == 1\n        return [1]\n    elseif n == 2\n        return [1, 3]\n\
    \    elseif n == 3\n        return [1, 3, 2, 8]\n    else\n        arr = [1, 3,\
    \ 2, 8]\n        n1 = 3\n        n2 = 2\n        n3 = 1\n        while length(arr)\
    \ <= n\n            if n1 % 2 == 0\n                push!(arr, 1 + n1 / 2)\n \
    \           else\n                push!(arr, arr[n1] + arr[n2] + arr[n3])\n  \
    \          end\n            n1 += 1\n            n2 += 1\n            n3 += 1\n\
    \        end\n        return arr\n    end\nend", "    tri = Vector{Int64}(n +\
    \ 1)\n    tri[1] = 1\n    tri[2] = 3\n    tri[3] = 2\n    for i in 4:n+1\n   \
    \     tri[i] = tri[i - 1] + tri[i - 2] + tri[i + 1]\n    end\n    return tri\n\
    end", "    tri_vec = zeros(Int64, n + 1)\n    tri_vec[1] = 1\n    tri_vec[2] =\
    \ 3\n    tri_vec[3] = 2\n    for i = 4:n+1\n        if i % 2 == 0\n          \
    \  tri_vec[i] = 1 + i / 2\n        else\n            tri_vec[i] = tri_vec[i -\
    \ 1] + tri_vec[i - 2] + tri_vec[i + 1]\n        end\n    end\n    return tri_vec\n\
    end", "    t = [1, 3, 2]\n    for i = 4:n+1\n        if i % 2 == 0\n         \
    \   push!(t, i / 2)\n        else\n            push!(t, t[i-2] + t[i-1] + t[i-3])\n\
    \        end\n    end\n    return t\nend\n\"\"\"\n    The QWERTY keyboard that\
    \ you use on your phone or computer\n    is a layout used for Latin-based languages,\
    \ English being \n    one of them. The most frequent used keys get moved to the\
    \ \n    bottom row and are centered on your fingers to reduce \n    overall hand\
    \ movement.", "    tri_vec = zeros(Int64, n + 1)\n    tri_vec[1] = 1\n    tri_vec[2]\
    \ = 3\n    for i in 3:n + 1\n        if i % 2 == 0\n            tri_vec[i] = 1\
    \ + (i / 2)\n        else\n            tri_vec[i] = tri_vec[i - 1] + tri_vec[i\
    \ - 2] + tri_vec[i + 1]\n        end\n    end\n    return tri_vec\nend", "   \
    \ res = [1, 3, 2]\n    if n == 1\n        return [1]\n    elseif n == 2\n    \
    \    return [1, 3]\n    elseif n == 3\n        return res\n    else\n        for\
    \ i in 4:n + 1\n            if i % 2 == 0\n                push!(res, 1 + (i /\
    \ 2))\n            else\n                push!(res, res[end] + res[end - 1] +\
    \ res[end - 2])\n            end\n        end\n        return res\n    end\nend",
  "    if n == 0 \n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i] + v[i - 1] + v[i + 1])\n\
    \            end\n        end\n        return v\n    end\nend", "    if n == 0\
    \ \n        return [0]\n    elseif n == 1\n        return [1, 3]\n    elseif n\
    \ == 2\n        return [1, 3, 2]\n    elseif n == 3\n        return [1, 3, 2,\
    \ 8]\n    else\n        vec = [1, 3, 2, 8]\n        for i in 4:n\n           \
    \ if i % 2 == 0\n                push!(vec, floor(Int64, 1 + i / 2))\n       \
    \     else\n                push!(vec, vec[i - 1] + vec[i - 2] + vec[i + 1])\n\
    \            end\n        end\n        return vec\n    end\nend", "    s = Vector{Int64}(undef,\
    \ n + 1)\n    s[1] = 1\n    s[2] = 3\n    s[3] = 2\n    if n <= 3\n        return\
    \ s[1:n]\n    end\n    for i in 4:n\n        s[i] = s[i - 1] + s[i - 2] + s[i\
    \ + 1]\n    end\n    return s\nend", "    tri_nums = Vector{Int64}(undef, n +\
    \ 1)\n    for i in 1:n + 1\n        if i == 1\n            tri_nums[i] = 1\n \
    \       elseif i == 2\n            tri_nums[i] = 3\n        elseif i == 3\n  \
    \          tri_nums[i] = 2\n        elseif i % 2 == 0\n            tri_nums[i]\
    \ = floor(Int64, i / 2)\n        else\n            tri_nums[i] = tri_nums[i -\
    \ 1] + tri_nums[i - 2] + tri_nums[i - 3]\n        end\n    end\n    return tri_nums\n\
    end", "    #your code here\nend", "    result = zeros(Int64, n + 1)\n    for i\
    \ = 1:n\n        if i == 1\n            result[i] = 3\n        elseif iseven(i)\n\
    \            result[i] = 1 + i / 2\n        else\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1]\n        end\n    end\n    return result\n\
    end", "    if n == 0 \n        return Vector(Int64, 1, 2)\n    end\n    if n ==\
    \ 1\n        return Vector(Int64, 1, 2, 3)\n    end\n    if n == 2\n        return\
    \ Vector(Int64, 1, 2, 3, 4)\n    end\n    i = 0\n    a, b, c = Int64(1), Int64(2),\
    \ Int64(3)\n    r = Vector(Int64, 1, a, b, c)\n    while i < n - 2\n        i\
    \ += 1\n        if i % 2 == 0\n            c = 1 + (i / 2)\n        else\n   \
    \         c = a + b + c\n        end\n        push!(r, c)\n    end\n    return\
    \ r\nend", "    # Your code here\nend", "    if n == 0\n        return []\n  \
    \  elseif n == 1\n        return [3]\n    elseif n == 2\n        return [1, 3]\n\
    \    elseif n == 3\n        return [1, 3, 2]\n    else\n        l = tri(n - 1)\n\
    \        push!(l, mod(n, 2) == 0 ? 1 + Int64(n / 2) : l[end - 2] + l[end - 1]\
    \ + l[end])\n        return l\n    end\nend", "  d = zeros(Int64, n + 1)\n  d[1]\
    \ = 1\n  d[2] = 3\n  d[3] = 2\n  for i = 4:n\n    if i % 2 == 0\n      d[i] =\
    \ 1 + i / 2\n    else\n      d[i] = d[i - 1] + d[i - 2] + d[i + 1]\n    end\n\
    \  end\n  return d\nend", "    res = [1, 3, 2]\n    for i in 4:n+1\n        if\
    \ i % 2 == 0\n            push!(res,1 + (i / 2))\n        else\n            push!(res,res[end-2]\
    \ + res[end-1] + res[end])\n        end\n    end\n    return res\nend", "    x\
    \ = Int64[]\n    if n > 1\n        x = [1, 3, 2]\n    elseif n > 0\n        x\
    \ = [1, 3]\n    elseif n == 0\n        x = [1]\n    end\n    j = 0\n    while\
    \ j < n\n        if length(x) == j\n            if j % 2 == 0\n              \
    \  push!(x, 1 + (j / 2))\n            else\n                push!(x, x[j - 1]\
    \ + x[j - 2] + x[j + 1])\n            end\n        end\n        j += 1\n    end\n\
    \    return x\nend", "    if n == 0\n        return [1]\n    elseif n == 1\n \
    \       return [1, 3]\n    elseif n == 2\n        return [1, 3, 2]\n    else\n\
    \        arr = [1, 3, 2]\n        i = 3\n        while i <= n\n            x =\
    \ arr[end] + arr[end - 1] + arr[end - 2]\n            push!(arr, x)\n        \
    \    i += 1\n        end\n        return arr\n    end\nend", "    if n == 0 \n\
    \        return [0]\n    elseif n == 1\n        return [1, 3]\n    else\n    \
    \    tribo = [1, 3, 2]\n        for i = 3:n\n            push!(tribo, tribo[i\
    \ - 1] + tribo[i - 2] + tribo[i - 3])\n        end\n        return tribo\n   \
    \ end\nend", "    if n == 0\n        return Int64[]\n    end\n    if n == 1\n\
    \        return [3]\n    end\n    tri = zeros(Int64, n+1)\n    tri[1] = 3\n  \
    \  tri[2] = 1\n    tri[3] = 2\n    for i = 4:n+1\n        if i % 2 == 0\n    \
    \        tri[i] = 1 + i / 2\n        else\n            tri[i] = tri[i-1] + tri[i-2]\
    \ + tri[i-3]\n        end\n    end\n    return tri\nend", "    if n == 0 return\
    \ 0\n    if n == 1 return 3\n    tri_list = zeros(Int64, n + 1)\n    tri_list[1]\
    \ = 1\n    tri_list[2] = 3\n    for i in 3:n + 1\n        if i % 2 == 0\n    \
    \        tri_list[i] = 1 + i / 2\n        else\n            tri_list[i] = tri_list[i\
    \ - 1] + tri_list[i - 2] + tri_list[i + 1]\n        end\n    end\n    return tri_list\n\
    end", "    if n <= 0 \n        return [1]\n    elseif n == 1\n        return [1,\
    \ 3]\n    elseif n == 2\n        return [1, 3, 2]\n    else\n        res = [1,\
    \ 3, 2]\n        for i in 3:n\n            if i % 2 == 0\n                push!(res,\
    \ 1 + i / 2)\n            else\n                push!(res, res[i - 1] + res[i\
    \ - 2] + res[i + 1])\n            end\n        end\n        return res\n    end\n\
    end", "    @assert n > 0 \"Please provide a non-negative integer\"\n    n < 4\
    \ ? [1, 3, 2, 8][1:n] : vcat(tri(n - 1), sum(tri(n - 3:n - 1)))\nend", "    sequence\
    \ = [1, 3, 2]\n    if n == 0\n        return []\n    elseif n <= 3\n        return\
    \ sequence[1:n]\n    else\n        for i = 4:n\n            if mod(i, 2) == 0\n\
    \                push!(sequence, div(i, 2))\n            else\n              \
    \  push!(sequence, sequence[i - 1] + sequence[i - 2] + sequence[i - 3])\n    \
    \        end\n        end\n        return sequence\n    end\nend", "    \"\"\"\
    Tribonacci sequence of the first n + 1 numbers\n    \"\"\"\n    if n == 0 \n \
    \       return [1]\n    elseif n == 1\n        return [1, 3]\n    elseif n ==\
    \ 2\n        return [1, 3, 2]\n    else\n        tri_vec = [1, 3, 2]\n       \
    \ i = 3\n        while i <= n\n            if i % 2 == 0\n                tri_vec\
    \ = [tri_vec..., Int64(i / 2 + 1)]\n            else\n                tri_vec\
    \ = [tri_vec..., tri_vec[end] + tri_vec[end - 1] + tri_vec[end - 2]]\n       \
    \     end\n            i += 1\n        end\n        return tri_vec\n    end\n\
    end\n# Test\nprintln(\"Basic tests\")\n@test tri(0) == [1]\n@test tri(1) == [1,\
    \ 3]\n@test tri(2) == [1, 3, 2]\n@test tri(3) == [1, 3, 2, 8]\n@test tri(4) ==\
    \ [1, 3, 2, 8, 4]\n@test tri(5) == [1, 3, 2, 8, 4, 13]\n@test tri(6) == [1, 3,\
    \ 2, 8, 4, 13, 9]\n@test tri(7) == [1, 3, 2, 8, 4, 13, 9, 7]\n@test tri(8) ==\
    \ [1, 3, 2, 8, 4, 13, 9, 7, 12]\n@test tri(9) == [1, 3, 2, 8, 4, 13, 9, 7, 12,\
    \ 10]\n@test tri(10) == [1, 3, 2, 8, 4, 13, 9, 7, 12, 10, 18]\n@test tri(11) ==\
    \ [1, 3, 2, 8, 4, 13, 9, 7, 12, 10, 18, 16]\n@test tri(12) == [1, 3, 2, 8, 4,\
    \ 13, 9, 7, 12, 10, 18, 16, 15]\n@test tri(13) == [1, 3, 2, 8, 4, 13, 9, 7", " \
    \   arr = Array{Int64}(n + 1)\n    arr[1] = 1\n    arr[2] = 3\n    arr[3] = 2\n\
    \    for i in 4:n + 1\n        if i % 2 == 0\n            arr[i] = 1 + i / 2\n\
    \        else\n            arr[i] = arr[i - 1] + arr[i - 2] + arr[i + 1]\n   \
    \     end\n    end\n    return arr\nend", "    if n == 0\n        return [1]\n\
    \    elseif n == 1\n        return [1, 3]\n    elseif n == 2\n        return [1,\
    \ 3, 2]\n    else\n        p = [1, 3, 2]\n        for i in 1:n-2\n           \
    \ push!(p, p[end-2] + p[end-1] + p[end])\n        end\n        return p\n    end\n\
    end", "    if n == 0\n        return [1]\n    elseif n == 1\n        return [1,\
    \ 3]\n    elseif n == 2\n        return [1, 3, 2]\n    else\n        a = 1\n \
    \       b = 3\n        c = 2\n        tri = [a, b, c]\n        for i = 1:n-2\n\
    \            a = tri[end-2]\n            b = tri[end-1]\n            c = tri[end]\n\
    \            if iseven(i)\n                push!(tri, 1 + i / 2)\n           \
    \ else\n                push!(tri, a + b + c)\n            end\n        end\n\
    \        return tri\n    end\nend", "    # Your code here!\nend", "    if n <\
    \ 0 error(\"n cannot be negative\") end\n    if n == 0 return [1] end\n    if\
    \ n == 1 return [1, 3] end\n    if n == 2 return [1, 3, 2] end\n    a, b, c =\
    \ [1, 3, 2]\n    for i in 3:n\n        if i % 2 == 0\n            push!(a, (1\
    \ + i / 2))\n        else\n            push!(a, (a[i] + a[i - 1] + a[i + 1]))\n\
    \        end\n    end\n    return a\nend", "    vec = []\n    for i in 1:n+1\n\
    \        push!(vec, tri(i))\n    end\n    return vec\nend", "    result = [1,\
    \ 3, 2]\n    for i in 4:n+1\n        result = push!(result, tri(i-1) + tri(i-2)\
    \ + tri(i+1))\n    end\n    return result\nend", "    (last,cur,last_two) = (0,0,0)\n\
    \    myList = Int64[]\n    myList = append!(myList,1)\n    for i in 2:n+1\n  \
    \      cur = floor(i/2)\n        if i%2 == 0\n            cur = 1 + cur\n    \
    \    else\n            cur = last + last_two + cur\n        end\n        last_two\
    \ = last\n        last = cur\n        append!(myList,cur)\n    end\n    return\
    \ myList\nend", "    tri = zeros(Int64, n+1)\n    tri[1] = 1\n    tri[2] = 3\n\
    \    tri[3] = 2\n    for i in 4:n+1\n        if i % 2 == 0\n            tri[i]\
    \ = 1 + i / 2\n        else\n            tri[i] = tri[i-1] + tri[i-2] + tri[i-3]\n\
    \        end\n    end\n    return tri\nend", "    seq = [3]\n    for i in 1:n\n\
    \        val = i % 2 == 0 ? 1 + i / 2 : seq[end - 2] + seq[end - 1] + seq[end]\n\
    \        push!(seq, val)\n    end\n    return seq\nend", "    result = zeros(Int64,\
    \ n + 1)\n    result[1] = 1\n    for i in 2:n + 1\n        result[i] = result[i\
    \ - 1] + result[i - 2] + (1 + (i - 1) / 2)\n    end\n    return result\nend",
  "    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n \
    \   elseif n == 2\n        return [1, 3, 2]\n    elseif n > 2\n        seq = [1,\
    \ 3, 2]\n        for i = 4:n + 1\n            if i % 2 == 0\n                push!(seq,\
    \ i / 2)\n            else\n                push!(seq, seq[i - 1] + seq[i - 2]\
    \ + seq[i - 3])\n            end\n        end\n        return seq\n    end\nend",
  "  if n == 0\n    return 0\n  end\n  res = Vector{Int64}(undef,n+1)\n  res[1] =\
    \ 1\n  res[2] = 3\n  res[3] = 2\n  if n == 3\n    return res\n  end\n  for i in\
    \ 4:n+1\n    if i % 2 == 0\n      res[i] = div(i,2) + 1\n    else\n      res[i]\
    \ = res[i-1] + res[i-2] + res[i-3]\n    end\n  end\n  return res\nend", "    (n\
    \ == 1) && return [1, 3]\n    (n == 2) && return [1, 3, 2]\n    tribonacci = zeros(Int64,\
    \ n+1)\n    tribonacci[1] = 1\n    tribonacci[2] = 3\n    tribonacci[3] = 2\n\
    \    for i in 4:n+1\n        if i % 2 == 0\n            tribonacci[i] = 1 + (i/2)\n\
    \        else\n            tribonacci[i] = tribonacci[i-1] + tribonacci[i-2] +\
    \ tribonacci[i+1]\n        end\n    end\n    return tribonacci\nend\n\"\"\"You\
    \ are given a string s. Each character represents a vote for a candidate of a\
    \ \n    popularity contest. If a character is uppercase, then it is a vote for\
    \ a male \n    candidate. If it is lowercase, then it is a vote for a female candidate.\n\
    \    Return the name of the winner of the contest and the percentage of votes\
    \ they \n    received formatted as a string with exactly 2 decimal places.\n \
    \   If there is a tie for the highest number of votes, then return the names of\
    \ \n    all winners in sorted order separated by a comma and a space.\n    Examples:\n\
    \    popular_vote(\"aAbBABacafe\") = \"B, F (50.00%)\"\n    \"\"\"", "    function\
    \ recurse(n::Int64)::Int64\n        if n == 1\n            return 3\n        elseif\
    \ n == 2\n            return 2\n        elseif n % 2 == 0\n            return\
    \ 1 + n / 2\n        else\n            return recurse(n - 1) + recurse(n - 2)\
    \ + recurse(n + 1)\n        end\n    end\n    return [recurse(i) for i = 1:n +\
    \ 1]\nend", "    vec = Vector{Int64}(undef, n + 1)\n    vec[1] = 1\n    vec[2]\
    \ = 3\n    vec[3] = 2\n    for i in 4:n + 1\n        if mod(i, 2) == 0\n     \
    \       vec[i] = i / 2\n        else\n            vec[i] = vec[i - 1] + vec[i\
    \ - 2] + vec[i + 1]\n        end\n    end\n    return vec\nend", "    n = n +\
    \ 1 # n + 1 because we need n + 1 elements\n    a = zeros(Int64, n)\n    a[1]\
    \ = 1\n    for i = 2:n\n        a[i] = tri(i - 1) + tri(i - 2) + tri(i + 1)\n\
    \    end\n    return a\nend", "    # your code\nend", "    \n    if n == 0\n \
    \       return 0\n    end\n    \n    if n == 1\n        return [1, 3]\n    end\n\
    \    \n    xs = [1, 3, 2]\n    \n    while length(xs) <= n\n        if mod(length(xs),\
    \ 2) == 0\n            append!(xs, (1 + (length(xs) / 2)))\n        else\n   \
    \         append!(xs, (xs[end - 2] + xs[end - 1] + xs[end]))\n        end\n  \
    \  end\n    \n    return xs\nend", "    out = zeros(Int64, n+1)\n    out[1] =\
    \ 1\n    out[2] = 3\n    out[3] = 2\n    if n > 3\n        for i in 4:n+1\n  \
    \          if i % 2 == 0\n                out[i] = 1 + i / 2\n            else\n\
    \                out[i] = out[i-1] + out[i-2] + out[i-3]\n            end\n  \
    \      end\n    end\n    return out\nend", "    tri_vec = zeros(Int64, n+1)\n\
    \    tri_vec[1] = 1\n    tri_vec[2] = 3\n    tri_vec[3] = 2\n    for i = 4:n+1\n\
    \        if i % 2 == 0\n            tri_vec[i] = i / 2\n        else\n       \
    \     tri_vec[i] = tri_vec[i-1] + tri_vec[i-2] + tri_vec[i-3]\n        end\n \
    \   end\n    return tri_vec\nend", "    if n == 0\n        return []\n    elseif\
    \ n == 1\n        return [3]\n    elseif n == 2\n        return [1, 3]\n    else\n\
    \        x = [1, 3, 2]\n        for i = 3:n\n            x = [x[1], x[2], x[3],\
    \ x[1] + x[2] + x[3]]\n        end\n        return x\n    end\nend", "    tri(0)\
    \ = 1\n    tri(1) = 3\n    tri(2) = 2\n    for i in 3:n\n        tri(i) = i %\
    \ 2 == 0 ? 1 + (i / 2) : tri(i - 1) + tri(i - 2) + tri(i + 1)\n    end\n    return\
    \ [ tri(i) for i in 0:n ]\nend", "    tri = zeros(Int64, n + 1)\n    tri[1] =\
    \ 1\n    tri[2] = 3\n    tri[3] = 2\n    for i in 4:n + 1\n        if i % 2 ==\
    \ 0\n            tri[i] = 1 + i / 2\n        else\n            tri[i] = tri[i\
    \ - 1] + tri[i - 2] + tri[i + 1]\n        end\n    end\n    return tri\nend",
  "    a = [1, 3, 2]\n    for i in 3:n\n        append!(a, i % 2 == 0 ? 1 + (i / 2)\
    \ : a[i - 1] + a[i - 2] + a[i + 1])\n    end\n    return a\nend", "    if n ==\
    \ 0 return [1]\n    else \n        tri = [1, 3, 2]\n        if n > 2\n       \
    \     for i = 4:n+1\n                if i % 2 == 0 \n                    push!(tri,\
    \ Int64(1 + i / 2))\n                else\n                    push!(tri, tri[i-2]\
    \ + tri[i-1] + tri[i+1])\n                end\n            end\n        end\n\
    \        return tri\n    end\nend", "    output = zeros(Int64, n+1)\n    if n\
    \ == 0\n        return []\n    elseif n == 1\n        return [1]\n    elseif n\
    \ == 2\n        return [1, 1]\n    else\n        output[1] = 1\n        output[2]\
    \ = 1\n        output[3] = 2\n        for i in 4:n+1\n            if iseven(i)\n\
    \                output[i] = i/2\n            else\n                output[i]\
    \ = output[i-1] + output[i-2] + output[i-3]\n            end\n        end\n  \
    \  end\n    return output\nend", "    result = []\n    for i = 1:n+1\n       \
    \ if i == 1\n            push!(result, 3)\n        elseif i == 2\n           \
    \ push!(result, 1)\n        elseif i == 3\n            push!(result, 2)\n    \
    \    elseif i % 2 == 0\n            push!(result, Int64(1 + i / 2))\n        else\n\
    \            push!(result, result[i-1] + result[i-2] + result[i-3])\n        end\n\
    \    end\n    return result\nend", "    if n == 0\n        return [1]\n    elseif\
    \ n == 1\n        return [1, 3]\n    elseif n == 2\n        return [1, 3, 2]\n\
    \    else\n        seq = [1, 3, 2]\n        for i in 3:n\n            if i % 2\
    \ == 0\n                push!(seq, 1 + i / 2)\n            else\n            \
    \    push!(seq, seq[i - 1] + seq[i - 2] + seq[i + 1])\n            end\n     \
    \   end\n        return seq\n    end\nend", "    tri(n::Int64) = [1, 3, 2, 8][1:n+1]\n\
    end", "    tri1 = zeros(Int64, n + 1)\n    tri1[1] = 1\n    for i = 2:n + 1\n\
    \        if i == 2\n            tri1[i] = 2\n        elseif i == 3\n         \
    \   tri1[i] = 3\n        else\n            tri1[i] = tri1[i - 1] + tri1[i - 2]\
    \ + tri1[i - 3]\n        end\n    end\n    return tri1\nend", "    a = [1, 3,\
    \ 2]\n    for i = 4:n+1\n        if i % 2 == 0\n            push!(a, div(i, 2))\n\
    \        else\n            push!(a, a[i-1] + a[i-2] + a[i-3])\n        end\n \
    \   end\n    return a\nend", "    first_value = 1\n    second_value = 3\n    third_value\
    \ = 2\n    result = [first_value, second_value, third_value]\n    for i in 4:n\
    \ + 1\n        if i % 2 == 0\n            result = push!(result, result[i - 1]\
    \ + (i / 2))\n        else\n            result = push!(result, result[i - 1] +\
    \ result[i - 2] + result[i - 3])\n        end\n    end\n    return result\nend",
  "    if n == 0\n        return []\n    elseif n == 1\n        return [3]\n    elseif\
    \ n == 2\n        return [1, 3]\n    else\n        v = [1, 3, 2]\n        while\
    \ length(v) != n + 1\n            if mod(length(v), 2) == 0\n                push!(v,\
    \ 1 + (length(v) / 2))\n            else\n                push!(v, v[end] + v[end\
    \ - 1] + v[end - 2])\n            end\n        end\n        return v\n    end\n\
    end", "    if n == 0 \n        return [1]\n    elseif n == 1\n        return [1,\
    \ 3]\n    elseif n == 2\n        return [1, 3, 2]\n    else\n        x = tri(n\
    \ - 1)\n        if n % 2 == 0\n            append!(x, 1 + n / 2)\n        else\n\
    \            append!(x, x[end] + x[end - 1] + x[end - 2])\n        end\n     \
    \   return x\n    end\nend", "    # n should be a non-negative integer.\n    if\
    \ n < 0\n        throw(DomainError())\n    end\n    if n == 0\n        return\
    \ Vector{Int64}([])\n    end\n    function tri_rec(n::Int64)::Int64\n        if\
    \ n == 1\n            return 3\n        elseif n == 2\n            return 1\n\
    \        elseif iseven(n)\n            return 1 + n / 2\n        else\n      \
    \      return tri_rec(n - 1) + tri_rec(n - 2) + tri_rec(n + 1)\n        end\n\
    \    end\n    return [tri_rec(i) for i in 1:n]\nend", "    if n == 0 \n      \
    \  return []\n    elseif n == 1\n        return [1]\n    elseif n == 2\n     \
    \   return [1, 1]\n    elseif n == 3\n        return [1, 1, 1]\n    else\n   \
    \     _tri = [1, 1, 1]\n        for i in 4:n+1\n            _tri = [_tri..., _tri[end]\
    \ + _tri[end-1] + _tri[end-2]]\n        end\n        return _tri\n    end\nend",
  "    result = [1, 3, 2]\n    for i in 1:n-2\n        push!(result, (i % 2 == 0 ?\
    \ 1 + i / 2 : result[end] + result[end-1] + result[end-2]))\n    end\n    return\
    \ result\nend", "    \n    # Create vector to store sequence, starting with 1,\
    \ 3, 2\n    tribonacci = [1, 3, 2]\n    \n    # Add to vector until the length\
    \ is n + 1\n    while length(tribonacci) < n + 1\n        # If the last element\
    \ is even\n        if tribonacci[end] % 2 == 0\n            push!(tribonacci,\
    \ 1 + tribonacci[end] / 2)\n        # If the last element is odd\n        else\n\
    \            push!(tribonacci, tribonacci[end - 1] + tribonacci[end - 2] + tribonacci[end\
    \ + 1])\n        end\n    end\n    \n    return tribonacci\nend", "    #Define\
    \ tribonacci sequence\n    tribonacci(x::Int64) = x < 3 ? x : tribonacci(x-1)\
    \ + tribonacci(x-2) + tribonacci(x-3)\n    #Create vector of Tribonacci terms\n\
    \    return [tribonacci(i) for i in 0:n]\nend", "    a = fill(0, n+1)\n    a[1]\
    \ = 1\n    a[2] = 3\n    a[3] = 2\n    if n < 3\n        return a[1:n]\n    end\n\
    \    i = 4\n    while i <= n+1\n        if i % 2 == 0\n            a[i] = 1 +\
    \ div(i, 2)\n        else\n            a[i] = a[i-1] + a[i-2] + a[i-3]\n     \
    \   end\n        i += 1\n    end\n    return a\nend\ntri(3)", "    @assert n >=\
    \ 0\n    res = zeros(Int64, n + 1)\n    res[1] = 1\n    res[2] = 3\n    res[3]\
    \ = 2\n    for i = 4:n + 1\n        res[i] = (i % 2 == 0) ? res[i] = 1 + (i /\
    \ 2) : res[i] = res[i - 1] + res[i - 2] + res[i + 1]\n    end\n    return res\n\
    end", "    if n == 0\n        return 1\n    elseif n % 2 == 0\n        return\
    \ 1 + n / 2\n    else\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n \
    \   end\nend", "    res = zeros(Int64, n+1)\n    res[1] = 1\n    for i in 1:n\n\
    \        if i%2==0\n            res[i+1] = res[i] + floor(i/2) + 1\n        else\n\
    \            res[i+1] = res[i] + res[i-1] + res[i+1-2]\n        end\n    end\n\
    \    return res\nend", "    x = zeros(Int64, n+1)\n    for i in 1:n+1\n      \
    \  if i == 1\n            x[i] = 1\n        elseif i == 2\n            x[i] =\
    \ 3\n        elseif i == 3\n            x[i] = 2\n        elseif i % 2 == 0\n\
    \            x[i] = 1 + i / 2\n        else\n            x[i] = x[i-1] + x[i-2]\
    \ + x[i-3]\n        end\n    end\n    return x\nend", "    if n == 0\n       \
    \ return [1]\n    elseif n == 1\n        return [1, 3]\n    elseif n == 2\n  \
    \      return [1, 3, 2]\n    elseif n > 2\n        list = [1, 3, 2]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(list, i / 2)\n  \
    \          else\n                push!(list, list[i - 1] + list[i - 2] + list[i\
    \ + 1])\n            end\n        end\n        return list\n    end\nend", " \
    \   v = zeros(Int64, n + 1)\n    v[1] = 1\n    v[2] = 3\n    v[3] = 2\n    for\
    \ i = 4:n + 1\n        if i % 2 == 0\n            v[i] = 1 + i / 2\n        else\n\
    \            v[i] = v[i - 1] + v[i - 2] + v[i + 1]\n        end\n    end\n   \
    \ return v\nend", "    tri_arr = [1, 3, 2]\n    if n <= 2\n        return tri_arr[1:n+1]\n\
    \    end\n    for i in 3:n\n        push!(tri_arr, (tri_arr[i-1] + tri_arr[i-2]\
    \ + tri_arr[i+1]))\n    end\n    return tri_arr\nend\nprintln(tri(2))\nprintln(tri(3))\n\
    println(tri(4))\nprintln(tri(5))\nprintln(tri(6))", "    if n == 0 return [1]\
    \ end\n    if n == 1 return [1, 3] end\n    if n == 2 return [1, 3, 2] end\n \
    \   L = [1, 3, 2]\n    for i in 3:n\n        push!(L, L[i-1] + L[i-2] + L[i+1])\n\
    \    end\n    return L\nend", "    if n == 0\n        return [1]\n    elseif n\
    \ == 1\n        return [1, 3]\n    elseif n == 2\n        return [1, 3, 2]\n \
    \   else\n        vector = [1, 3, 2]\n        for i = 4:n + 1\n            if\
    \ i % 2 == 0\n                push!(vector, Int64(1 + i / 2))\n            else\n\
    \                push!(vector, vector[i - 1] + vector[i - 2] + vector[i - 3])\n\
    \            end\n        end\n        return vector\n    end\nend", "    if n\
    \ == 0\n        return [0]\n    elseif n == 1\n        return [0,1]\n    elseif\
    \ n == 2\n        return [0,1,1]\n    else\n        v = tri(n-1)\n        append!(v,\
    \ v[end] + v[end-1] + v[end-2])\n        return v\n    end\nend", "    if n <\
    \ 1\n        print(\"The number should be positive!\")\n        return\n    end\n\
    \    l = zeros(Int64, n+1)\n    l[1] = 1\n    l[2] = 3\n    l[3] = 2\n    for\
    \ i = 4:n+1\n        if i % 2 == 0\n            l[i] = 1 + i / 2\n        else\n\
    \            l[i] = l[i-1] + l[i-2] + l[i-3]\n        end\n    end\n    return\
    \ l\nend", "    res = zeros(Int64, n + 1)\n    res[1] = 1\n    res[2] = 3\n  \
    \  res[3] = 2\n    for i in 4:n + 1\n        res[i] = res[i - 1] + res[i - 2]\
    \ + res[i - 3]\n    end\n    return res\nend", "    start = [1, 3, 2]\n    if\
    \ n <= 3 \n        return start[1:n+1]\n    end\n    while n >= 3\n        x =\
    \ 1 + (n / 2)\n        n -= 1\n        if n % 2 == 0\n            push!(start,\
    \ x)\n        else\n            push!(start, start[end] + start[end-1] + start[end-2])\n\
    \        end\n    end\n    return start\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
