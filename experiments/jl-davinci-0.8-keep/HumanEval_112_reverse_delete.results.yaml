name: HumanEval_112_reverse_delete
language: jl
results:
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    #My Solution\n    for j = 1:length(c)\n\
    \        if in('\\$(c[j])', s) == true\n            s = replace(s, c[j], \"\"\
    )\n        end\n    end\n    return (s, ispalindrome(s))\nusing Test\n\n@testset\
    \ begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") ==\
    \ (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\
    \t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"\
    dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"\
    vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") ==\
    \ (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmphngxc5ft.jl:14\nin expression\
    \ starting at /tmp/tmphngxc5ft.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    s = join(setdiff(collect(s), collect(c)))\n\
    \    return (s, s == reverse(s))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw3bnxu5b.jl:22\n  Expression: candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true)\n   Evaluated: (\"cde\", false) == (\"\
    cdedc\", true)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw3bnxu5b.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw3bnxu5b.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpw3bnxu5b.jl:25\n  Expression: candidate(\"abcdedcba\", \"\"\
    ) == (\"abcdedcba\", true)\n   Evaluated: (\"abcde\", false) == (\"abcdedcba\"\
    , true)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw3bnxu5b.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw3bnxu5b.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpw3bnxu5b.jl:26\n  Expression: candidate(\"abcdedcba\", \"\
    v\") == (\"abcdedcba\", true)\n   Evaluated: (\"abcde\", false) == (\"abcdedcba\"\
    , true)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw3bnxu5b.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw3bnxu5b.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpw3bnxu5b.jl:27\n  Expression: candidate(\"vabba\", \"v\")\
    \ == (\"abba\", true)\n   Evaluated: (\"ab\", false) == (\"abba\", true)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw3bnxu5b.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw3bnxu5b.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |  "
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw3bnxu5b.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    # This method take O(n)\n    s_lst = Set(s)\n\
    \    c_lst = Set(c)\n    intersec = s_lst & c_lst\n    s_lst = filter(x -> !(x\
    \ in intersec), s_lst)\n    is_palindrome = check_palindrome(s_lst)\n    return\
    \ (\"\".join(s_lst), is_palindrome)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpq0_kgq9i.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ no method matching &(::Set{Char}, ::Set{Char})\n  Closest candidates are:\n\
    \    &(::Any, ::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main /tmp/tmpq0_kgq9i.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq0_kgq9i.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq0_kgq9i.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpq0_kgq9i.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: no method\
    \ matching &(::Set{Char}, ::Set{Char})\n  Closest candidates are:\n    &(::Any,\
    \ ::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main /tmp/tmpq0_kgq9i.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq0_kgq9i.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq0_kgq9i.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpq0_kgq9i.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true)\n  MethodError: no method\
    \ matching &(::Set{Char}, ::Set{Char})\n  Closest candidates are:\n    &(::Any,\
    \ ::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main /tmp/tmpq0_kgq9i.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7."
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq0_kgq9i.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    new_s = String(filter(y -> !(y in c),\
    \ s))\n    return (new_s, new_s == reverse(new_s))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") ==\
    \ (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\
    \t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"\
    dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"\
    vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") ==\
    \ (\"\", true))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    s = collect(s)\n    c = collect(c)\n \
    \   for i in c\n        while i in s\n            deleteat!(s, s.index(i))\n \
    \       end\n    end\n    return (join(s), s == reverse(s))\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\",\
    \ \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpacc5fgwy.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  type Array\
    \ has no field index\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] reverse_delete(s::String, c::String)\n     @ Main /tmp/tmpacc5fgwy.jl:16\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpacc5fgwy.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpacc5fgwy.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpacc5fgwy.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  type Array has no field\
    \ index\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n  \
    \ [2] reverse_delete(s::String, c::String)\n     @ Main /tmp/tmpacc5fgwy.jl:16\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpacc5fgwy.jl:27 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpacc5fgwy.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpacc5fgwy.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true)\n  type Array has no field\
    \ index\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n  \
    \ [2] reverse_delete(s::String, c::String)\n     @ Main /tmp/tmpacc5fgwy.jl:16\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpacc5fgwy.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpacc5fgwy.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpacc5fgwy.jl:29\n  Test threw exception\n  Expressio"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpacc5fgwy.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    for i in c\n        s = replace(s, i,\
    \ \"\")\n    end\n    return s, ispalindrome(s)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\"\
    , false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpuf0b_v3u.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ no method matching replace(::String, ::Char, ::String)\n  Closest candidates\
    \ are:\n    replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpuf0b_v3u.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuf0b_v3u.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuf0b_v3u.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpuf0b_v3u.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: no method\
    \ matching replace(::String, ::Char, ::String)\n  Closest candidates are:\n  \
    \  replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpuf0b_v3u.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuf0b_v3u.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level sc"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuf0b_v3u.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    str_s = copy(s)\n    for i in c\n    \
    \    str_s = replace(str_s, i => \"\")\n    end\n    return (str_s, str_s == reverse(str_s))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmppluxbpka.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ no method matching copy(::String)\n  Closest candidates are:\n    copy(!Matched::LinearAlgebra.Hessenberg{<:Any,\
    \ <:LinearAlgebra.UpperHessenberg}) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/hessenberg.jl:418\n\
    \    copy(!Matched::LinearAlgebra.Hessenberg{<:Any, <:LinearAlgebra.SymTridiagonal})\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/hessenberg.jl:419\n\
    \    copy(!Matched::LinearAlgebra.CholeskyPivoted) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/cholesky.jl:492\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmppluxbpka.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppluxbpka.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppluxbpka.jl:22\ntest set:\
    \ Error During Test at /tmp/tmppluxbpka.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: no method\
    \ matching copy(::String)\n  Closest candidates are:\n    copy(!Matched::LinearAlgebra.Hessenberg{<:Any,\
    \ <:LinearAlgebra.UpperHessenberg}) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/hessenberg.jl:418\n\
    \    copy(!Matched::LinearAlgebra.Hessenberg{<:Any, <:LinearAlgebra.SymTridiagonal})\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/hessenberg.jl:419\n\
    \    copy(!Matched::LinearAlgebra.CholeskyPivoted) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/cholesky.jl:492\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmppluxbpka.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppluxbpka.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    for i in c\n        s = replace(s, i,\
    \ \"\")\n    end\n    return s, ispalindrome(s)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\"\
    , false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpnocrkr5w.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ no method matching replace(::String, ::Char, ::String)\n  Closest candidates\
    \ are:\n    replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpnocrkr5w.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnocrkr5w.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnocrkr5w.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpnocrkr5w.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: no method\
    \ matching replace(::String, ::Char, ::String)\n  Closest candidates are:\n  \
    \  replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpnocrkr5w.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnocrkr5w.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level sc"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnocrkr5w.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    for x in c\n        s = replace(s, x,\
    \ \"\")\n    end\n    return (s, isequal(s, reverse(s)))\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"\
    ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpab_uw87b.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ no method matching replace(::String, ::Char, ::String)\n  Closest candidates\
    \ are:\n    replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpab_uw87b.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpab_uw87b.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpab_uw87b.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpab_uw87b.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: no method\
    \ matching replace(::String, ::Char, ::String)\n  Closest candidates are:\n  \
    \  replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpab_uw87b.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpab_uw87b.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level sc"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpab_uw87b.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    # your code here\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"\
    ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpr8w3isdt.jl:19\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Tuple{String,\
    \ Bool}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Tuple at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:336\n\
    \    convert(::Type{T}, !Matched::Tuple{Vararg{Any, N}}) where {N, T<:Tuple} at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:337\n    convert(::Type{T},\
    \ !Matched::CartesianIndex) where T<:Tuple at /shared/centos7/julia/1.7.3/share/julia/base/multidimensional.jl:137\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpr8w3isdt.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr8w3isdt.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr8w3isdt.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpr8w3isdt.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Tuple{String, Bool}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Tuple at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:336\n\
    \    convert(::Type{T}, !Matched::Tuple{Vararg{Any, N}}) where {N, T<:Tuple} at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:337\n    convert(::Type{T},\
    \ !Matched::CartesianIndex) where T<:Tuple at /shared/centos7/julia/1.7.3/share/julia/base/multidimensional.jl:137\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpr8w3isdt.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr8w3isdt.jl:20 [inlined]\n\
    \   [4] macro expa"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr8w3isdt.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    return (match(r\"[^$c]*\", s).match, s\
    \ == reverse(s))\nend\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw2a460u1.jl:19\n  Expression: candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false)\n   Evaluated: (\"ab\", false) == (\"bcd\"\
    , false)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw2a460u1.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw2a460u1.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpw2a460u1.jl:20\n  Expression: candidate(\"abcdef\", \"b\"\
    ) == (\"acdef\", false)\n   Evaluated: (\"ab\", false) == (\"acdef\", false)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw2a460u1.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw2a460u1.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpw2a460u1.jl:21\n  Expression: candidate(\"abcdedcba\", \"\
    ab\") == (\"cdedc\", true)\n   Evaluated: (\"ab\", true) == (\"cdedc\", true)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw2a460u1.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw2a460u1.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpw2a460u1.jl:22\n  Expression: candidate(\"dwik\", \"w\") ==\
    \ (\"dik\", false)\n   Evaluated: (\"dwik\", false) == (\"dik\", false)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw2a460u1.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw2a460u1.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpw2a460u1.jl:23\n  Expression: candidate(\"a\", \"a"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 9 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw2a460u1.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    del = []\n    for i = 1:length(s)\n  \
    \      for j = 1:length(c)\n            if s[i] == c[j]\n                push!(del,i)\n\
    \            end\n        end\n    end\n    s1 = s\n    s2 = s\n    for i = 1:length(del)\n\
    \        deleteat!(s1,del[i]-i+1)\n    end\n    s2 = reverse(s2)\n    if s1 ==\
    \ s2\n        return (s1,true)\n    else\n        return (s1,false)\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpadvvvxu_.jl:37\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ no method matching deleteat!(::String, ::Int64)\n  Closest candidates are:\n\
    \    deleteat!(!Matched::Vector, ::Integer) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1421\n\
    \    deleteat!(!Matched::Vector, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1468\n\
    \    deleteat!(!Matched::BitVector, ::Integer) at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:949\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpadvvvxu_.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpadvvvxu_.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpadvvvxu_.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpadvvvxu_.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: no method\
    \ matching deleteat!(::String, ::Int64)\n  Closest candidates are:\n    deleteat!(!Matched::Vector,\
    \ ::Integer) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1421\n \
    \   deleteat!(!Matched::Vector, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1468\n\
    \    deleteat!(!Matched::BitVector, ::Integer) at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:949\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpadvvvxu_.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpadvvvxu_.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpadvvvxu_.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpadvvvxu_.jl:39\n  Test threw exception\n  E"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpadvvvxu_.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    str = s\n    for char in c\n        str\
    \ = replace(str, char)\n    end\n    return (str, str == reverse(str))\nend\n\
    using Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpt5qv84h6.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ no method matching replace(::String, ::Char)\n  Closest candidates are:\n  \
    \  replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpt5qv84h6.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt5qv84h6.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt5qv84h6.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpt5qv84h6.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: no method\
    \ matching replace(::String, ::Char)\n  Closest candidates are:\n    replace(!Matched::Union{Function,\
    \ Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpt5qv84h6.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt5qv84h6.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt5qv84h6.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    rev = reverse(s)\n    for i in c\n   \
    \     if i in s\n            s = replace(s, i => \"\")\n            rev = replace(rev,\
    \ i => \"\")\n        end\n    end\n    res = (s, rev == s)\n    return res\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    filter!(x -> !(x in c), s)\n    return\
    \ s, ispalindrome(s)\nend\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_rcwqrif.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ no method matching filter!(::var\"#1#2\"{String}, ::String)\n  Closest candidates\
    \ are:\n    filter!(::Any, !Matched::AbstractVector) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2525\n\
    \    filter!(::Any, !Matched::IdDict) at /shared/centos7/julia/1.7.3/share/julia/base/iddict.jl:193\n\
    \    filter!(::Any, !Matched::Base.IdSet) at /shared/centos7/julia/1.7.3/share/julia/base/idset.jl:28\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmp_rcwqrif.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_rcwqrif.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_rcwqrif.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp_rcwqrif.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: no method\
    \ matching filter!(::var\"#1#2\"{String}, ::String)\n  Closest candidates are:\n\
    \    filter!(::Any, !Matched::AbstractVector) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2525\n\
    \    filter!(::Any, !Matched::IdDict) at /shared/centos7/julia/1.7.3/share/julia/base/iddict.jl:193\n\
    \    filter!(::Any, !Matched::Base.IdSet) at /shared/centos7/julia/1.7.3/share/julia/base/idset.jl:28\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmp_rcwqrif.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_rcwqrif.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_rcwqrif.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp_rcwqrif.jl:22\n  Test threw exception\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_rcwqrif.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    s_new = \"\"\n    for char in s\n    \
    \    if !(char in c)\n            s_new *= char\n        end\n    end\n    return\
    \ (s_new, s_new == reverse(s_new))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    s = delete!(s, collect(c))\n    return\
    \ (s, ispalindrome(s))\nend\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpoodjqulw.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ no method matching delete!(::String, ::Vector{Char})\n  Closest candidates are:\n\
    \    delete!(!Matched::IdDict{K}, ::Any) where K at /shared/centos7/julia/1.7.3/share/julia/base/iddict.jl:130\n\
    \    delete!(!Matched::Base.IdSet, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/idset.jl:23\n\
    \    delete!(!Matched::Dict, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/dict.jl:661\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpoodjqulw.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpoodjqulw.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpoodjqulw.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpoodjqulw.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: no method\
    \ matching delete!(::String, ::Vector{Char})\n  Closest candidates are:\n    delete!(!Matched::IdDict{K},\
    \ ::Any) where K at /shared/centos7/julia/1.7.3/share/julia/base/iddict.jl:130\n\
    \    delete!(!Matched::Base.IdSet, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/idset.jl:23\n\
    \    delete!(!Matched::Dict, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/dict.jl:661\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpoodjqulw.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpoodjqulw.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpoodjqulw.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpoodjqulw.jl:22\n  Test threw exception\n  Expression:"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoodjqulw.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    out = \"\"\n    for e in s\n        if\
    \ e in c\n            continue\n        end\n        out = out * e\n    end\n\
    \    if out == reverse(out)\n        return out, true\n    end\n    return out,\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t\
    @test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    s = [i for i in s if i not in c]\n   \
    \ return (\"\".join(s), s == s[::-1])\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmpk9pw4t4y.jl:12\nin expression starting at /tmp/tmpk9pw4t4y.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    result = \"\"\n    for letter in s\n \
    \       for letter2 in c\n            if letter == letter2\n                result\
    \ = result\n            else\n                result = result * letter\n     \
    \       end\n        end\n    end\n    if reverse(result) == result\n        return\
    \ (result, true)\n    else\n        return (result, false)\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmu3popl6.jl:33\n  Expression: candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false)\n   Evaluated: (\"abbccdde\", false) == (\"\
    bcd\", false)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmu3popl6.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmu3popl6.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpmu3popl6.jl:35\n  Expression: candidate(\"abcdedcba\", \"\
    ab\") == (\"cdedc\", true)\n   Evaluated: (\"abccddeeddccba\", true) == (\"cdedc\"\
    , true)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmu3popl6.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmu3popl6.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpmu3popl6.jl:38\n  Expression: candidate(\"abcdedcba\", \"\"\
    ) == (\"abcdedcba\", true)\n   Evaluated: (\"\", true) == (\"abcdedcba\", true)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmu3popl6.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmu3popl6.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpmu3popl6.jl:41\n  Expression: candidate(\"mamma\", \"mia\"\
    ) == (\"\", true)\n   Evaluated: (\"mmaammmmaa\", false) == (\"\", true)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmu3popl6.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmu3popl6.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5 "
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmu3popl6.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    result_string = \"\"\n    str_status =\
    \ true\n    for i in s\n        if i in c\n            continue\n        else\n\
    \            result_string *= i\n        end\n    end\n    if(result_string ==\
    \ reverse(result_string))\n        str_status = true\n    else\n        str_status\
    \ = false\n    end\n    return result_string, str_status\nend\n \n\"\"\"Task\n\
    \    Given an array a, create a new array with the elements in reverse order.\n\
    \    Example\n    For a = [1, 2, 3, 4, 5], the result should be [5, 4, 3, 2, 1]\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp8s2qel85.jl:29\nin expression starting at /tmp/tmp8s2qel85.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    for char in c\n        s = replace(s,\
    \ char => \"\")\n    end\n    return s, s == reverse(s)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") ==\
    \ (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\
    \t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"\
    dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"\
    vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") ==\
    \ (\"\", true))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    is_palindrome = true\n    c_indices =\
    \ findall(x -> x in c, s)\n    for i in 1:length(c_indices)\n        ind = c_indices[i]\n\
    \        s = s[1:ind-1] * s[ind+1:end]\n    end\n    if s == reverse(s)\n    \
    \    is_palindrome = true\n    else\n        is_palindrome = false\n    end\n\
    \    return s, is_palindrome\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7f1q_8zr.jl:30\n  Expression: candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false)\n   Evaluated: (\"bcde\", false) == (\"bcd\"\
    , false)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7f1q_8zr.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7f1q_8zr.jl:29\ntest set: Error\
    \ During Test at /tmp/tmp7f1q_8zr.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true)\n  BoundsError: attempt\
    \ to access 7-codeunit String at index [1:8]\n  Stacktrace:\n   [1] checkbounds\n\
    \     @ ./strings/basic.jl:216 [inlined]\n   [2] getindex\n     @ ./strings/string.jl:261\
    \ [inlined]\n   [3] reverse_delete(s::String, c::String)\n     @ Main /tmp/tmp7f1q_8zr.jl:16\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp7f1q_8zr.jl:32 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp7f1q_8zr.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp7f1q_8zr.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"mamma\", \"mia\") == (\"\", true)\n  BoundsError: attempt to access\
    \ 2-codeunit String at index [1:3]\n  Stacktrace:\n   [1] checkbounds\n     @\
    \ ./strings/basic.jl:216 [inlined]\n   [2] getindex\n     @ ./strings/string.jl:261\
    \ [inlined]\n   [3] reverse_delete(s::String, c::String)\n     @ Main /tmp/tmp7f1q_8zr.jl:16\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp7f1q_8zr.jl:38 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp7f1q_8zr.jl:29\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set "
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7f1q_8zr.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    \"Returns s after the characters in c\
    \ are deleted, and a boolean value if it is a palindrome\"\n    s = delete!(s,\
    \ c)\n    return s, s == reverse(s)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3mcwjjy8.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ no method matching delete!(::String, ::String)\n  Closest candidates are:\n\
    \    delete!(!Matched::IdDict{K}, ::Any) where K at /shared/centos7/julia/1.7.3/share/julia/base/iddict.jl:130\n\
    \    delete!(!Matched::Base.IdSet, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/idset.jl:23\n\
    \    delete!(!Matched::Dict, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/dict.jl:661\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmp3mcwjjy8.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3mcwjjy8.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3mcwjjy8.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp3mcwjjy8.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: no method\
    \ matching delete!(::String, ::String)\n  Closest candidates are:\n    delete!(!Matched::IdDict{K},\
    \ ::Any) where K at /shared/centos7/julia/1.7.3/share/julia/base/iddict.jl:130\n\
    \    delete!(!Matched::Base.IdSet, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/idset.jl:23\n\
    \    delete!(!Matched::Dict, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/dict.jl:661\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmp3mcwjjy8.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3mcwjjy8.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3mcwjjy8.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp3mcwjjy8.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\""
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3mcwjjy8.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    # task starts here\n    #check if it's\
    \ already a palindrome\n    if s == reverse(s) \n        pal = true\n    else\n\
    \        pal = false\n    end\n    for i in c\n        s = replace(s, i, \"\"\
    )\n    end\n    if s == reverse(s) \n        pal = true\n    else\n        pal\
    \ = false\n    end\n    return s, pal\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpja7hkkdt.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ no method matching replace(::String, ::Char, ::String)\n  Closest candidates\
    \ are:\n    replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpja7hkkdt.jl:20\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpja7hkkdt.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpja7hkkdt.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpja7hkkdt.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: no method\
    \ matching replace(::String, ::Char, ::String)\n  Closest candidates are:\n  \
    \  replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpja7hkkdt.jl:20\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpja7hkkdt.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level sc"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpja7hkkdt.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    s = filter(x -> !(x in c), s)\n    return\
    \ (s, ispalindrome(s))\nend\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpferjzvvh.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  UndefVarError:\
    \ ispalindrome not defined\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n\
    \     @ Main /tmp/tmpferjzvvh.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpferjzvvh.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpferjzvvh.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpferjzvvh.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  UndefVarError: ispalindrome\
    \ not defined\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n  \
    \   @ Main /tmp/tmpferjzvvh.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpferjzvvh.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpferjzvvh.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpferjzvvh.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true)\n  UndefVarError: ispalindrome\
    \ not defined\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n  \
    \   @ Main /tmp/tmpferjzvvh.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpferjzvvh.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpferjzvvh.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpferjzvvh.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"dwik\", \"w\") == (\"dik\", false)\n  UndefVarError: ispalindrome\
    \ not defined\n  Stacktrace:\n   [1] reverse_de"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpferjzvvh.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    s = replace(s, r\"[$c]\", \"\")\n    b\
    \ = ispalindrome(s)\n    return s, b\nend\n \nreverse_delete(\"abcdedcba\", \"\
    ab\")\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: MethodError: no method matching replace(::String, ::Regex,\
    \ ::String)\nClosest candidates are:\n  replace(!Matched::Union{Function, Type},\
    \ ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n \
    \ replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \  replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \  ...\nStacktrace:\n [1] reverse_delete(s::String, c::String)\n   @ Main /tmp/tmpt3jzjs2r.jl:12\n\
    \ [2] top-level scope\n   @ /tmp/tmpt3jzjs2r.jl:17\nin expression starting at\
    \ /tmp/tmpt3jzjs2r.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    for i in 1:length(c)\n        s = replace(s,c[i],\"\
    \")\n    end\n    return s, s == reverse(s)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\"\
    , false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp0j3gpnq_.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ no method matching replace(::String, ::Char, ::String)\n  Closest candidates\
    \ are:\n    replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmp0j3gpnq_.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0j3gpnq_.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0j3gpnq_.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp0j3gpnq_.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: no method\
    \ matching replace(::String, ::Char, ::String)\n  Closest candidates are:\n  \
    \  replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmp0j3gpnq_.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0j3gpnq_.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level sc"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0j3gpnq_.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    \n    res = String(setdiff(s,c))\n   \
    \ return (res, res == reverse(res))\nend\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpg_80n1uv.jl:24\n  Expression: candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true)\n   Evaluated: (\"cde\", false) == (\"\
    cdedc\", true)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg_80n1uv.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg_80n1uv.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpg_80n1uv.jl:27\n  Expression: candidate(\"abcdedcba\", \"\"\
    ) == (\"abcdedcba\", true)\n   Evaluated: (\"abcde\", false) == (\"abcdedcba\"\
    , true)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg_80n1uv.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg_80n1uv.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpg_80n1uv.jl:28\n  Expression: candidate(\"abcdedcba\", \"\
    v\") == (\"abcdedcba\", true)\n   Evaluated: (\"abcde\", false) == (\"abcdedcba\"\
    , true)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg_80n1uv.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg_80n1uv.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpg_80n1uv.jl:29\n  Expression: candidate(\"vabba\", \"v\")\
    \ == (\"abba\", true)\n   Evaluated: (\"ab\", false) == (\"abba\", true)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg_80n1uv.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg_80n1uv.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |  "
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg_80n1uv.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    #length(c) == 0 ? return (s, is_palindrome(s))\n\
    \    #length(s) == 0 ? return (\"\", false)\n    #s = delete!(s, c)\n    #s =\
    \ filter(s, c)\n    s = filter(s, x -> !occursin(x, c))\n    return (s, is_palindrome(s))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpoo3fi3uv.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ no method matching filter(::String, ::var\"#1#2\"{String})\n  Closest candidates\
    \ are:\n    filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpoo3fi3uv.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpoo3fi3uv.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpoo3fi3uv.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpoo3fi3uv.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: no method\
    \ matching filter(::String, ::var\"#1#2\"{String})\n  Closest candidates are:\n\
    \    filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpoo3fi3uv.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpoo3fi3uv.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpoo3fi3uv.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpoo3fi3uv.jl"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoo3fi3uv.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    s = foldl(t -> replace(t, r\"$c\", \"\"\
    ), s, c)\n    c = \"ab\"\n    return (s, s == reverse(s))\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"\
    ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpi41fqaff.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ no method matching foldl(::var\"#1#2\", ::String, ::String)\n  Closest candidates\
    \ are:\n    foldl(::Any, ::Any; kw...) at /shared/centos7/julia/1.7.3/share/julia/base/reduce.jl:180\n\
    \  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main /tmp/tmpi41fqaff.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi41fqaff.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi41fqaff.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpi41fqaff.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: no method\
    \ matching foldl(::var\"#1#2\", ::String, ::String)\n  Closest candidates are:\n\
    \    foldl(::Any, ::Any; kw...) at /shared/centos7/julia/1.7.3/share/julia/base/reduce.jl:180\n\
    \  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main /tmp/tmpi41fqaff.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi41fqaff.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi41fqaff.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpi41fqaff.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true)\n  MethodError: no method\
    \ matching foldl(::var\"#1#2\", ::String, ::String)\n  Closest candidates are:\n\
    \    foldl(::Any, ::Any; kw...) at /shared/centos7/julia/1.7.3/share/julia/base/reduce.jl:180\n\
    \  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main /tmp/tmpi41fqaff.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi41fqaff.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    output_string = \"\"\n    for i in s\n\
    \        if !(i in c)\n            output_string *= i\n        end\n    end\n\
    \    output_tuple = (output_string, output_string == reverse(output_string))\n\
    \    return output_tuple\nend\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    for c in c\n        s = replace(s, c =>\
    \ \"\")\n    end\n    return (s, s == reverse(s))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") ==\
    \ (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\
    \t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"\
    dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"\
    vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") ==\
    \ (\"\", true))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    result::String = \"\"\n    for i in s\n\
    \        if !(i in c)\n            result *= i\n        end\n    end\n    return\
    \ (result,result == reverse(result))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    d = \"\";\n    for i in 1:length(s)\n\
    \        if s[i] \u2209 c\n            d *= s[i]\n        end\n    end\n    return\
    \ (d, d == reverse(d))\nend\nreverse_delete(\"abcde\", \"ae\") # \"bcd\", False\n\
    reverse_delete(\"abcdef\", \"b\") # \"acdef\", False\nreverse_delete(\"abcdedcba\"\
    , \"ab\") # \"cdedc\", True\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    # your code goes here\n    for i in c\n\
    \        delete!(s,i)\n    end\n    return s, s == reverse(s)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\",\
    \ \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptbqf80uf.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ no method matching delete!(::String, ::Char)\n  Closest candidates are:\n  \
    \  delete!(!Matched::IdDict{K}, ::Any) where K at /shared/centos7/julia/1.7.3/share/julia/base/iddict.jl:130\n\
    \    delete!(!Matched::Base.IdSet, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/idset.jl:23\n\
    \    delete!(!Matched::Dict, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/dict.jl:661\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmptbqf80uf.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptbqf80uf.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptbqf80uf.jl:22\ntest set:\
    \ Error During Test at /tmp/tmptbqf80uf.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: no method\
    \ matching delete!(::String, ::Char)\n  Closest candidates are:\n    delete!(!Matched::IdDict{K},\
    \ ::Any) where K at /shared/centos7/julia/1.7.3/share/julia/base/iddict.jl:130\n\
    \    delete!(!Matched::Base.IdSet, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/idset.jl:23\n\
    \    delete!(!Matched::Dict, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/dict.jl:661\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmptbqf80uf.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptbqf80uf.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptbqf80uf.jl:22\ntest set:\
    \ Error During Test at /tmp/tmptbqf80uf.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"abcd"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptbqf80uf.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    # your code here\n    return (\"\", false)\n\
    end\n```\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv5sbs20e.jl:15\nin expression starting at\
    \ /tmp/tmpv5sbs20e.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    ss = \"\"\n    for i in s\n        if\
    \ !(i in c)\n            ss *= i\n        end\n    end\n    if ss == reverse(ss)\n\
    \        return ss, true\n    else\n        return ss, false\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    s = replace(s, c)\n    return (s, ispalindrome(s))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgt3q54h5.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ no method matching replace(::String, ::String)\n  Closest candidates are:\n\
    \    replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpgt3q54h5.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgt3q54h5.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgt3q54h5.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpgt3q54h5.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: no method\
    \ matching replace(::String, ::String)\n  Closest candidates are:\n    replace(!Matched::Union{Function,\
    \ Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpgt3q54h5.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgt3q54h5.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgt3q54h5.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    s_new = \"\"\n    for c_s in s\n     \
    \   if c_s in c\n            continue\n        end\n        push!(s_new, c_s)\n\
    \    end\n    return (s_new, s_new == reverse(s_new))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") ==\
    \ (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\
    \t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"\
    dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"\
    vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") ==\
    \ (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpi7ci5hz7.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ no method matching push!(::String, ::Char)\n  Closest candidates are:\n    push!(::Any,\
    \ ::Any, !Matched::Any) at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:2970\n\
    \    push!(::Any, ::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:2971\n\
    \    push!(!Matched::Base.InvasiveLinkedListSynchronized{T}, ::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/task.jl:605\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpi7ci5hz7.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi7ci5hz7.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi7ci5hz7.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpi7ci5hz7.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: no method\
    \ matching push!(::String, ::Char)\n  Closest candidates are:\n    push!(::Any,\
    \ ::Any, !Matched::Any) at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:2970\n\
    \    push!(::Any, ::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:2971\n\
    \    push!(!Matched::Base.InvasiveLinkedListSynchronized{T}, ::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/task.jl:605\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpi7ci5hz7.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi7ci5hz7.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tm"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi7ci5hz7.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    for i in c\n        s = replace(s, i,\
    \ \"\")\n    end\n    return (s, isequal(s, reverse(s)))\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"\
    ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpp8umjrcf.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ no method matching replace(::String, ::Char, ::String)\n  Closest candidates\
    \ are:\n    replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpp8umjrcf.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp8umjrcf.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp8umjrcf.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpp8umjrcf.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: no method\
    \ matching replace(::String, ::Char, ::String)\n  Closest candidates are:\n  \
    \  replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpp8umjrcf.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp8umjrcf.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level sc"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp8umjrcf.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    s_modified = s\n    for i in c\n     \
    \   s_modified = replace(s_modified, i, \"\")\n    end\n    return s_modified,\
    \ s_modified == reverse(s_modified)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpuq49l5x9.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ no method matching replace(::String, ::Char, ::String)\n  Closest candidates\
    \ are:\n    replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpuq49l5x9.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuq49l5x9.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuq49l5x9.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpuq49l5x9.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: no method\
    \ matching replace(::String, ::Char, ::String)\n  Closest candidates are:\n  \
    \  replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpuq49l5x9.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuq49l5x9.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level sc"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuq49l5x9.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    #first create a new string from s, called\
    \ s2 that does not contain any character from c\n    # use replace replace(str,\
    \ old, new[, count]) to remove characters from c\n    s2 = replace(s, c, \"\"\
    )\n    # then check if s2 is palindrome\n    # use string.firstindex to iterate\
    \ through the string.\n    # return tuple\n    return s2, s2 == reverse(s2)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2dmak_3x.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ no method matching replace(::String, ::String, ::String)\n  Closest candidates\
    \ are:\n    replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmp2dmak_3x.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2dmak_3x.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2dmak_3x.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp2dmak_3x.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: no method\
    \ matching replace(::String, ::String, ::String)\n  Closest candidates are:\n\
    \    replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmp2dmak_3x.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2dmak_3x.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-leve"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2dmak_3x.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    s_copy = s\n    for i in s\n        if\
    \ in(i, c)\n            delete!(s_copy, findfirst(s_copy, i))\n        end\n \
    \   end\n    return (s_copy, isequal(s_copy, reverse(s_copy)))\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\",\
    \ \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4op_att_.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ no method matching findfirst(::String, ::Char)\n  Closest candidates are:\n\
    \    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n\
    \    findfirst(::AbstractString, !Matched::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:104\n\
    \    findfirst(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n\
    \  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main /tmp/tmp4op_att_.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4op_att_.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4op_att_.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp4op_att_.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: no method\
    \ matching findfirst(::String, ::Char)\n  Closest candidates are:\n    findfirst(!Matched::Function,\
    \ ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractString,\
    \ !Matched::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:104\n\
    \    findfirst(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n\
    \  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main /tmp/tmp4op_att_.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4op_att_.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4op_att_.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp4op_att_.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\""
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4op_att_.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    #@show s, c\n    for char in c\n     \
    \   s = replace(s, char => \"\")\n    end\n    #@show s\n    return s, s == reverse(s)\n\
    end\n    \n    \n@test reverse_delete(\"abcde\", \"ae\") == (\"bcd\", false)\n\
    @test reverse_delete(\"abcdef\", \"b\") == (\"acdef\", false)\n@test reverse_delete(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @test not defined\nin expression starting\
    \ at /tmp/tmpj3pboqcr.jl:21\nin expression starting at /tmp/tmpj3pboqcr.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    # write your code here\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\",\
    \ \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9kw4drlo.jl:19\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Tuple{String,\
    \ Bool}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Tuple at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:336\n\
    \    convert(::Type{T}, !Matched::Tuple{Vararg{Any, N}}) where {N, T<:Tuple} at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:337\n    convert(::Type{T},\
    \ !Matched::CartesianIndex) where T<:Tuple at /shared/centos7/julia/1.7.3/share/julia/base/multidimensional.jl:137\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmp9kw4drlo.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9kw4drlo.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9kw4drlo.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp9kw4drlo.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Tuple{String, Bool}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Tuple at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:336\n\
    \    convert(::Type{T}, !Matched::Tuple{Vararg{Any, N}}) where {N, T<:Tuple} at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:337\n    convert(::Type{T},\
    \ !Matched::CartesianIndex) where T<:Tuple at /shared/centos7/julia/1.7.3/share/julia/base/multidimensional.jl:137\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmp9kw4drlo.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9kw4drlo.jl:20 [inlined]\n\
    \   [4] macro expa"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9kw4drlo.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    x = [i for i in s if i not in c]\n   \
    \ return (join(x), x == reverse(x))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmp2tlm9430.jl:12\nin expression starting at /tmp/tmp2tlm9430.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n \n    if s == \"\"\n        return s, true\n\
    \    end\n    if c == \"\"\n        return s, true\n    end\n    match_list =\
    \ []\n    for i in c\n        for j in 1:length(s)\n            if s[j] == i\n\
    \                push!(match_list, j)\n            end\n        end\n    end\n\
    \    match_list = sort(match_list, rev=true)\n    for i in match_list\n      \
    \  s = replace(s, i, \"\")\n    end\n    return s, s == reverse(s)\nend\n# Or\
    \ we can use:\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t\
    @test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpavlyyqp5.jl:39\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ no method matching replace(::String, ::Int64, ::String)\n  Closest candidates\
    \ are:\n    replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpavlyyqp5.jl:29\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpavlyyqp5.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpavlyyqp5.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpavlyyqp5.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: no method\
    \ matching replace(::String, ::Int64, ::String)\n  Closest candidates are:\n \
    \   replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpavlyyqp5.jl:29\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpavlyyqp5.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level "
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpavlyyqp5.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    delete_indices = []\n    for (i, ci) in\
    \ enumerate(s)\n        if ci in c\n            push!(delete_indices, i)\n   \
    \     end\n    end\n    is_palindrome = true\n    delete_indices[end:-1:1] # s[end]\
    \ is the last element, and so on\n    for i in 1:ceil(Int, length(delete_indices)/2)\n\
    \        if s[delete_indices[i]] != s[delete_indices[end-i+1]]\n            is_palindrome\
    \ = false\n            break\n        end\n    end\n    return (delete!(s, delete_indices),\
    \ is_palindrome)\nend\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpakz2fn4c.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ no method matching delete!(::String, ::Vector{Any})\n  Closest candidates are:\n\
    \    delete!(!Matched::IdDict{K}, ::Any) where K at /shared/centos7/julia/1.7.3/share/julia/base/iddict.jl:130\n\
    \    delete!(!Matched::Base.IdSet, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/idset.jl:23\n\
    \    delete!(!Matched::Dict, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/dict.jl:661\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpakz2fn4c.jl:26\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpakz2fn4c.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpakz2fn4c.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpakz2fn4c.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: no method\
    \ matching delete!(::String, ::Vector{Any})\n  Closest candidates are:\n    delete!(!Matched::IdDict{K},\
    \ ::Any) where K at /shared/centos7/julia/1.7.3/share/julia/base/iddict.jl:130\n\
    \    delete!(!Matched::Base.IdSet, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/idset.jl:23\n\
    \    delete!(!Matched::Dict, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/dict.jl:661\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpakz2fn4c.jl:26\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpakz2fn4c.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpakz2fn4c.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpakz2fn4c.jl:35\n  Test threw exception\n  Expression:\
    \ c"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpakz2fn4c.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    x = [i for i in s if i not in c]\n   \
    \ return join(x), x == reverse(x)\nend\n \nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmpu8dnnqrc.jl:12\nin expression starting at /tmp/tmpu8dnnqrc.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    for i in c\n        s = replace(s, i,\
    \ \"\")\n    end\n    reverse_delete = s == reverse(s)\n    return s, reverse_delete\n\
    end\nreverse_delete(\"abcde\", \"ae\")\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: None
  stderr: "b'ERROR: LoadError: MethodError: no method matching replace(::String, ::Char,\
    \ ::String)\\nClosest candidates are:\\n  replace(!Matched::Union{Function, Type},\
    \ ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\\n\
    \  replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\\\
    n  replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\\\
    n  ...\\nStacktrace:\\n [1] reverse_delete(s::String, c::String)\\n   @ '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    for char in c\n        s = replace(s,\
    \ char, \"\")\n    end\n    return (s, s == reverse(s))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") ==\
    \ (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\
    \t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"\
    dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"\
    vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") ==\
    \ (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmprjo_0__o.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ no method matching replace(::String, ::Char, ::String)\n  Closest candidates\
    \ are:\n    replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmprjo_0__o.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprjo_0__o.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprjo_0__o.jl:21\ntest set:\
    \ Error During Test at /tmp/tmprjo_0__o.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: no method\
    \ matching replace(::String, ::Char, ::String)\n  Closest candidates are:\n  \
    \  replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmprjo_0__o.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprjo_0__o.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level sc"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprjo_0__o.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    \n    for ch in c\n        s = replace(s,\
    \ ch, \"\")\n    end\n    res = isequal(s, reverse(s)) ? true : false\n    return\
    \ s, res\nend\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t\
    @test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpf28392yr.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ no method matching replace(::String, ::Char, ::String)\n  Closest candidates\
    \ are:\n    replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpf28392yr.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf28392yr.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf28392yr.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpf28392yr.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: no method\
    \ matching replace(::String, ::Char, ::String)\n  Closest candidates are:\n  \
    \  replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpf28392yr.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf28392yr.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level sc"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf28392yr.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    result::String = \"\"\n    for i in s\n\
    \        if !(i in c)\n            result *= i\n        end\n    end\n    for\
    \ i in 1:length(result)\n        if result[i] != result[end - i + 1]\n       \
    \     return result, false\n        end\n    end\n    return result, true\nend\n\
    using Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    result = \"\"\n    for i = 1:length(s)\n\
    \        append!(result,s[i])\n    end\n    for i = 1:length(c)\n        result\
    \ = replace(result,c[i])\n    end\n    return (result, ispalindrome(result))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpy5to57a5.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ no method matching append!(::String, ::Char)\n  Closest candidates are:\n  \
    \  append!(!Matched::BitVector, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:782\n\
    \    append!(!Matched::AbstractVector, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1050\n\
    \    append!(!Matched::AbstractVector, ::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1053\n\
    \  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main /tmp/tmpy5to57a5.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy5to57a5.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy5to57a5.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpy5to57a5.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: no method\
    \ matching append!(::String, ::Char)\n  Closest candidates are:\n    append!(!Matched::BitVector,\
    \ ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:782\n   \
    \ append!(!Matched::AbstractVector, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1050\n\
    \    append!(!Matched::AbstractVector, ::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1053\n\
    \  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main /tmp/tmpy5to57a5.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy5to57a5.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy5to57a5.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpy5to57a5.jl:28\n  Test threw exception\n  Expression:\
    \ c"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy5to57a5.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    s_new = []\n    for i in s\n        if\
    \ i in c\n            continue\n        else\n            push!(s_new, i)\n  \
    \      end\n    end\n    s_new = join(s_new)\n    is_palindrome = ispalindrome(s_new)\n\
    \    return s_new, is_palindrome\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptd21krnh.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  UndefVarError:\
    \ ispalindrome not defined\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n\
    \     @ Main /tmp/tmptd21krnh.jl:21\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptd21krnh.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptd21krnh.jl:28\ntest set:\
    \ Error During Test at /tmp/tmptd21krnh.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  UndefVarError: ispalindrome\
    \ not defined\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n  \
    \   @ Main /tmp/tmptd21krnh.jl:21\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptd21krnh.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptd21krnh.jl:28\ntest set:\
    \ Error During Test at /tmp/tmptd21krnh.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true)\n  UndefVarError: ispalindrome\
    \ not defined\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n  \
    \   @ Main /tmp/tmptd21krnh.jl:21\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptd21krnh.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptd21krnh.jl:28\ntest set:\
    \ Error During Test at /tmp/tmptd21krnh.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"dwik\", \"w\") == (\"dik\", false)\n  UndefVarError: ispalindrome\
    \ not defined\n  Stacktrace:\n   [1] reverse_de"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptd21krnh.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    remain = String[]\n    for i in s\n  \
    \      if !(i in c)\n            push!(remain, i)\n        end\n    end\n    new_s\
    \ = join(remain)\n    return (new_s, new_s == reverse(new_s))\nend\nreverse_delete(\"\
    abcde\", \"ae\")\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: MethodError: Cannot `convert` an object of type Char\
    \ to an object of type String\nClosest candidates are:\n  convert(::Type{String},\
    \ !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \  convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \  convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \  ...\nStacktrace:\n [1] push!(a::Vector{String}, item::Char)\n   @ Base ./array.jl:994\n\
    \ [2] reverse_delete(s::String, c::String)\n   @ Main /tmp/tmpw417bx27.jl:15\n\
    \ [3] top-level scope\n   @ /tmp/tmpw417bx27.jl:21\nin expression starting at\
    \ /tmp/tmpw417bx27.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    # Delete all the characters in s that\
    \ are equal to any character in c\n    s = [i for i in s if !(i in c)]\n    #\
    \ Check if the result string is palindrome\n    r = s == s[end:-1:1]\n    return\
    \ (join(s), r)\nend\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    # common characters\n    d = intersect(collect(s),\
    \ collect(c))\n    # delete common characters\n    s_new = [x for x in s if x\
    \ \u2209 d]\n    # check palindrome\n    pal = s_new == reverse(s_new)\n    return\
    \ (join(s_new, \"\"), pal)\nend\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    new_string = \"\"\n    for i in s\n  \
    \      if i in c\n            continue\n        else\n            new_string =\
    \ new_string * i\n        end\n    end\n    #println(new_string)\n    #println(new_string\
    \ == reverse(new_string))\n    return (new_string, new_string == reverse(new_string))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    #c is string of characters to delete\n\
    \    #s is string to be reverse and delete\n    #true for palindrome, false for\
    \ not\n    del_char = Set(c)\n    result = \"\"\n    for i in s\n        if !(i\
    \ in del_char)\n            result = result * i\n        end\n    end\n    is_palindrome\
    \ = (result == reverse(result))\n    return (result, is_palindrome)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    delete_c = Set(c)\n    s_reverse = reverse(s)\n\
    \    s_filtered = filter(s -> s in delete_c, s)\n    s_reverse_filtered = filter(s\
    \ -> s in delete_c, s_reverse)\n    return (replace(s, s_filtered, \"\"), s_filtered\
    \ == s_reverse_filtered)\nend\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxjlzk45s.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ no method matching replace(::String, ::String, ::String)\n  Closest candidates\
    \ are:\n    replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpxjlzk45s.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxjlzk45s.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxjlzk45s.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpxjlzk45s.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: no method\
    \ matching replace(::String, ::String, ::String)\n  Closest candidates are:\n\
    \    replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpxjlzk45s.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxjlzk45s.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-leve"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxjlzk45s.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    # Delete all the characters from s that\
    \ are equal to any character in c\n    for character in c\n        s = replace(s,\
    \ character, \"\")\n    end\n    return s, s == reverse(s)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"\
    ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmprpg137n8.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ no method matching replace(::String, ::Char, ::String)\n  Closest candidates\
    \ are:\n    replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmprpg137n8.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprpg137n8.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprpg137n8.jl:22\ntest set:\
    \ Error During Test at /tmp/tmprpg137n8.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: no method\
    \ matching replace(::String, ::Char, ::String)\n  Closest candidates are:\n  \
    \  replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmprpg137n8.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprpg137n8.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level sc"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprpg137n8.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    res, l, r = [], 1, length(s)\n    while\
    \ l <= r\n        if contains(c, s[l]) || contains(c, s[r])\n            l +=\
    \ (s[l] in c)\n            r -= (s[r] in c)\n        else\n            push!(res,\
    \ s[l])\n            l += 1\n            r -= 1\n        end\n    end\n    return\
    \ (join(res), l >= r)\nend\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbbqwaktp.jl:30\n  Expression: candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false)\n   Evaluated: (\"bc\", true) == (\"bcd\"\
    , false)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbbqwaktp.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbbqwaktp.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpbbqwaktp.jl:31\n  Expression: candidate(\"abcdef\", \"b\"\
    ) == (\"acdef\", false)\n   Evaluated: (\"acd\", true) == (\"acdef\", false)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbbqwaktp.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbbqwaktp.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpbbqwaktp.jl:32\n  Expression: candidate(\"abcdedcba\", \"\
    ab\") == (\"cdedc\", true)\n   Evaluated: (\"cde\", true) == (\"cdedc\", true)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbbqwaktp.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbbqwaktp.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpbbqwaktp.jl:33\n  Expression: candidate(\"dwik\", \"w\") ==\
    \ (\"dik\", false)\n   Evaluated: (\"di\", true) == (\"dik\", false)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbbqwaktp.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbbqwaktp.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpbbqwaktp.jl:35\n  Expression: candidate(\"abcdedcba"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbbqwaktp.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    a = s\n    for i in c\n        a = replace(a,i\
    \ => \"\")\n    end\n    if a == reverse(a)\n        return a, true\n    else\n\
    \        return a, false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    s = delete!(s, c)\n    return (s, s ==\
    \ reverse(s))\nend\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjw68p_a3.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ no method matching delete!(::String, ::String)\n  Closest candidates are:\n\
    \    delete!(!Matched::IdDict{K}, ::Any) where K at /shared/centos7/julia/1.7.3/share/julia/base/iddict.jl:130\n\
    \    delete!(!Matched::Base.IdSet, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/idset.jl:23\n\
    \    delete!(!Matched::Dict, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/dict.jl:661\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpjw68p_a3.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjw68p_a3.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjw68p_a3.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpjw68p_a3.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: no method\
    \ matching delete!(::String, ::String)\n  Closest candidates are:\n    delete!(!Matched::IdDict{K},\
    \ ::Any) where K at /shared/centos7/julia/1.7.3/share/julia/base/iddict.jl:130\n\
    \    delete!(!Matched::Base.IdSet, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/idset.jl:23\n\
    \    delete!(!Matched::Dict, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/dict.jl:661\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpjw68p_a3.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjw68p_a3.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjw68p_a3.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpjw68p_a3.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\""
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjw68p_a3.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    s = delete(s, c)\n    return (s, ispalindrome(s))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpsxgwe6hg.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  UndefVarError:\
    \ delete not defined\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n\
    \     @ Main /tmp/tmpsxgwe6hg.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsxgwe6hg.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsxgwe6hg.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpsxgwe6hg.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  UndefVarError: delete\
    \ not defined\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n  \
    \   @ Main /tmp/tmpsxgwe6hg.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsxgwe6hg.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsxgwe6hg.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpsxgwe6hg.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true)\n  UndefVarError: delete\
    \ not defined\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n  \
    \   @ Main /tmp/tmpsxgwe6hg.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsxgwe6hg.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsxgwe6hg.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpsxgwe6hg.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"dwik\", \"w\") == (\"dik\", false)\n  UndefVarError: delete not\
    \ defined\n  Stacktrace:\n   [1] reverse_delete(s::String, c::Strin"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsxgwe6hg.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    #Your code here\n    s1 = filter(a->a\u2209\
    c, s)\n    return s1, s1==reverse(s1)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    #1 delete all characters in s that are\
    \ equal to any character in c\n    s2 = \"\"\n    c2 = Set(c)\n    for i in s\n\
    \        if i in c2\n            continue\n        end\n        s2 = s2 * i\n\
    \    end\n    #2 then check if the result string is palindrome.\n    if s2 ==\
    \ reverse(s2)\n        return (s2, true)\n    else\n        return (s2, false)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t\
    @test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    new_s = \"\"\n    for i in s\n       \
    \ (i in c) && continue\n        new_s *= i\n    end\n    return (new_s, new_s\
    \ == reverse(new_s))\nend\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    result = \"\"\n    for character in s\n\
    \        if !(character in c)\n            result *= character\n        end\n\
    \    end\n    return result, result == reverse(result)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") ==\
    \ (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\
    \t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"\
    dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"\
    vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") ==\
    \ (\"\", true))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    new_s = String(filter(x -> x \u2209 c,\
    \ s))\n    if new_s == reverse(new_s)\n        (new_s, true)\n    else\n     \
    \   (new_s, false)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    s = replace(s, r\"[\"*c*\"]\", \"\")\n\
    \    r = reverse(s)\n    return s, s == r\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\"\
    , false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: PCRE compilation error: missing terminating ] for character\
    \ class at offset 1\nStacktrace:\n  [1] error(s::String)\n    @ Base ./error.jl:33\n\
    \  [2] compile(pattern::String, options::UInt32)\n    @ Base.PCRE ./pcre.jl:155\n\
    \  [3] compile(regex::Regex)\n    @ Base ./regex.jl:82\n  [4] Regex(pattern::String,\
    \ compile_options::UInt32, match_options::UInt32)\n    @ Base ./regex.jl:47\n\
    \  [5] Regex(pattern::String)\n    @ Base ./regex.jl:70\n  [6] var\"@r_str\"(__source__::LineNumberNode,\
    \ __module__::Module, pattern::Any, flags::Vararg{Any})\n    @ Base ./regex.jl:119\n\
    \  [7] #macroexpand#51\n    @ ./expr.jl:115 [inlined]\n  [8] macroexpand\n   \
    \ @ ./expr.jl:114 [inlined]\n  [9] docm(source::LineNumberNode, mod::Module, meta::Any,\
    \ ex::Any, define::Bool) (repeats 2 times)\n    @ Base.Docs ./docs/Docs.jl:537\n\
    \ [10] var\"@doc\"(::LineNumberNode, ::Module, ::String, ::Vararg{Any})\n    @\
    \ Core ./boot.jl:517\nin expression starting at /tmp/tmp87z9xu5j.jl:1\nin expression\
    \ starting at /tmp/tmp87z9xu5j.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    s = replace(s, r\"[$c]\", \"\")\n    return\
    \ s,s == reverse(s)\nend\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmppoceck9o.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ no method matching replace(::String, ::Regex, ::String)\n  Closest candidates\
    \ are:\n    replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmppoceck9o.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppoceck9o.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppoceck9o.jl:19\ntest set:\
    \ Error During Test at /tmp/tmppoceck9o.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: no method\
    \ matching replace(::String, ::Regex, ::String)\n  Closest candidates are:\n \
    \   replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmppoceck9o.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppoceck9o.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppoceck9o.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    #First we delete the characters\n    for\
    \ x in c\n        s = replace(s, x, \"\")\n    end\n    #Check if palindrome\n\
    \    if s == reverse(s)\n        return (s, true)\n    else\n        return (s,\
    \ false)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpyocayzd6.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ no method matching replace(::String, ::Char, ::String)\n  Closest candidates\
    \ are:\n    replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpyocayzd6.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyocayzd6.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyocayzd6.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpyocayzd6.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: no method\
    \ matching replace(::String, ::Char, ::String)\n  Closest candidates are:\n  \
    \  replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpyocayzd6.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyocayzd6.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level sc"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyocayzd6.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n  str = \"\"\n  for i in s\n    if i \u2209\
    \ c\n      str *= i\n    end\n  end\n  return str, str == reverse(str)\nend\n\
    reverse_delete(\"abcde\", \"ae\") == (\"bcd\", false)\nreverse_delete(\"abcdef\"\
    , \"b\") == (\"acdef\", false)\nreverse_delete(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true)\n \n \n \n@testset \"Basic tests\" begin\n    @test reverse_delete(\"\
    abcde\", \"ae\") == (\"bcd\", false)\n    @test reverse_delete(\"abcdef\", \"\
    b\") == (\"acdef\", false)\n    @test reverse_delete(\"abcdedcba\", \"ab\") ==\
    \ (\"cdedc\", true)\nend\n \n@testset \"Random tests\" begin\n    function rev_del(s,\
    \ c)\n        s = filter(!(c->c in c), s)\n        b = s == reverse(s)\n     \
    \   return s, b\n    end\n   \n    for i in 1:100\n        a = join(rand(1:25,\
    \ rand(1:50), 'A':'Z')...)\n        b = join(rand(1:25, rand(1:50), 'A':'Z')...)\n\
    \        @test reverse_delete(a, b) == rev_del(a, b)\n    end\nend\n \n \nend\
    \ # module\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nusing Test\n\n@testset begin\n\n\
    candidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\"\
    , false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @testset not defined\nin expression starting\
    \ at /tmp/tmpfkkrdt87.jl:26\nin expression starting at /tmp/tmpfkkrdt87.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    new_s = split(s, \"\")\n    c_arr = split(c,\
    \ \"\")\n    for i in 1:length(new_s)\n        for j in 1:length(c_arr)\n    \
    \        if new_s[i] == c_arr[j]\n                deleteat!(new_s, i)\n      \
    \      end\n        end\n    end\n    for i in 1:length(new_s)\n        if new_s[i]\
    \ != new_s[end-i+1]\n            return (join(new_s), false)\n        end\n  \
    \  end\n    return (join(new_s), true)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\"\
    , false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpvr1pw681.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  BoundsError:\
    \ attempt to access 3-element Vector{SubString{String}} at index [5]\n  Stacktrace:\n\
    \   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2] reverse_delete(s::String,\
    \ c::String)\n     @ Main /tmp/tmpvr1pw681.jl:16\n   [3] macro expansion\n   \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpvr1pw681.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpvr1pw681.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpvr1pw681.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  BoundsError: attempt to\
    \ access 5-element Vector{SubString{String}} at index [6]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] reverse_delete(s::String,\
    \ c::String)\n     @ Main /tmp/tmpvr1pw681.jl:16\n   [3] macro expansion\n   \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpvr1pw681.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpvr1pw681.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpvr1pw681.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true)\n  BoundsError: attempt\
    \ to access 6-element Vector{SubString{String}} at index [7]\n  Stacktrace:\n\
    \   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2] reverse_delete(s::String,\
    \ c::String)\n     @ Main /tmp/tmpvr1pw681.jl:16\n   [3] macro expansion\n   \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpvr1pw681.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inl"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvr1pw681.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    s_list = s\n    c_list = c\n    if c_list\
    \ in s_list\n        s_list = s_list.replace(c_list, \"\")\n    end\n    if s_list\
    \ == s_list[end:-1:1]\n        return (s_list, true)\n    else\n        return\
    \ (s_list, false)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbk21c10q.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  use occursin(x,\
    \ y) for string containment\n  Stacktrace:\n   [1] error(s::String)\n     @ Base\
    \ ./error.jl:33\n   [2] in(#unused#::String, #unused#::String)\n     @ Base ./strings/search.jl:638\n\
    \   [3] reverse_delete(s::String, c::String)\n     @ Main /tmp/tmpbk21c10q.jl:14\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpbk21c10q.jl:28 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpbk21c10q.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpbk21c10q.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n\
    \   [2] in(#unused#::String, #unused#::String)\n     @ Base ./strings/search.jl:638\n\
    \   [3] reverse_delete(s::String, c::String)\n     @ Main /tmp/tmpbk21c10q.jl:14\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpbk21c10q.jl:29 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpbk21c10q.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpbk21c10q.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true)\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n   [1] error(s::String)\n     @ Base\
    \ ./error.jl:33\n   [2] in(#unused#::String, #unused#::String)\n     @ Base ./strings/search.jl:638\n\
    \   [3] reverse_delete(s::String, c::String)\n     @ Main /tmp/tmpbk21c10q.jl:14\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tm"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbk21c10q.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    #delete all the characters in s that are\
    \ equal to any character in c\n    result = \"\"\n    for i in s\n        if i\
    \ in c\n            continue\n        else\n            result *= i\n        end\n\
    \    end\n    #check if the result string is palindrome\n    return (result, result\
    \ == reverse(result))\nend\n@testset \"example tests\" begin\n    @test reverse_delete(\"\
    abcde\", \"ae\") == (\"bcd\", false)\n    @test reverse_delete(\"abcdef\", \"\
    b\") == (\"acdef\", false)\n    @test reverse_delete(\"abcdedcba\", \"ab\") ==\
    \ (\"cdedc\", true)\nend\n \n\"Task\"\n\"\"\"Task\n    In this task you will be\
    \ given some strings s and t and you have to find the the number of distinct characters\
    \ in the intersection between the strings.\n    For example, the intersection\
    \ of strings \"abac\" and \"acaba\" consists of only one character - 'a', so the\
    \ answer is 1.\n    The intersection of strings \"abc\" and \"def\" is empty,\
    \ so the answer is 0.\n    Please note, that the number of distinct characters\
    \ in an intersection of strings is the number of distinct characters that appear\
    \ in both strings at the same time.\n    You should return a list containing the\
    \ number of distinct characters in the intersection of all pairs of strings from\
    \ the array.\n    Example\n    For s = [\"abac\", \"acaba\", \"aca\", \"baca\"\
    ], the result should be [1,1,1,1].\n    For s = [\"abc\", \"def\", \"ghi\", \"\
    jkl\"], the result should be [0,0,0,0].\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\"\
    , false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @testset not defined\nin expression starting\
    \ at /tmp/tmpdt3nzs6q.jl:24\nin expression starting at /tmp/tmpdt3nzs6q.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if count(x->x in c, s) == 0\n        return\
    \ (s, true)\n    end\n    return (collect(filter(x->x not in c, s)), collect(filter(x->x\
    \ not in c, s)) == collect(filter(x->x not in c, reverse(s))))\nend\n@test reverse_delete(\"\
    abcde\", \"ae\") == (\"bcd\", false)\n@test reverse_delete(\"abcdef\", \"b\")\
    \ == (\"acdef\", false)\n@test reverse_delete(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true)\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj9ilbwvn.jl:15\nin expression starting at\
    \ /tmp/tmpj9ilbwvn.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    set = Set(c)\n    s = [x for x in s if\
    \ x in set]\n    s = reverse(s)\n    res = join(s, \"\")\n    return (res, res\
    \ == res)\nend\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t\
    @test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqodb59yj.jl:23\n  Expression: candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false)\n   Evaluated: (\"ea\", true) == (\"bcd\"\
    , false)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqodb59yj.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqodb59yj.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpqodb59yj.jl:24\n  Expression: candidate(\"abcdef\", \"b\"\
    ) == (\"acdef\", false)\n   Evaluated: (\"b\", true) == (\"acdef\", false)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqodb59yj.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqodb59yj.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpqodb59yj.jl:25\n  Expression: candidate(\"abcdedcba\", \"\
    ab\") == (\"cdedc\", true)\n   Evaluated: (\"abba\", true) == (\"cdedc\", true)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqodb59yj.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqodb59yj.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpqodb59yj.jl:26\n  Expression: candidate(\"dwik\", \"w\") ==\
    \ (\"dik\", false)\n   Evaluated: (\"w\", true) == (\"dik\", false)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqodb59yj.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqodb59yj.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpqodb59yj.jl:27\n  Expression: candidate(\"a\", \"a\") =="
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 9 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqodb59yj.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    s = replace(s,c,\"\")\n    result = (s,\
    \ isequal(s,reverse(s)))\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\"\
    , false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpr8017jmi.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ no method matching replace(::String, ::String, ::String)\n  Closest candidates\
    \ are:\n    replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpr8017jmi.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr8017jmi.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr8017jmi.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpr8017jmi.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: no method\
    \ matching replace(::String, ::String, ::String)\n  Closest candidates are:\n\
    \    replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpr8017jmi.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr8017jmi.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-leve"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr8017jmi.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    a = [i for i in s if i not in c]\n   \
    \ b = a == a[::-1]\n    return \"\".join(a), b\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\"\
    , false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmpsfmf311i.jl:12\nin expression starting at /tmp/tmpsfmf311i.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    res = \"\"\n    for i in s\n        i\
    \ in c ? continue : push!(res, i)\n    end\n    reversed_res = res[end:-1:1]\n\
    \    return res, res == reversed_res\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpp22k84bb.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ no method matching push!(::String, ::Char)\n  Closest candidates are:\n    push!(::Any,\
    \ ::Any, !Matched::Any) at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:2970\n\
    \    push!(::Any, ::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:2971\n\
    \    push!(!Matched::Base.InvasiveLinkedListSynchronized{T}, ::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/task.jl:605\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpp22k84bb.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp22k84bb.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp22k84bb.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpp22k84bb.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: no method\
    \ matching push!(::String, ::Char)\n  Closest candidates are:\n    push!(::Any,\
    \ ::Any, !Matched::Any) at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:2970\n\
    \    push!(::Any, ::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:2971\n\
    \    push!(!Matched::Base.InvasiveLinkedListSynchronized{T}, ::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/task.jl:605\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpp22k84bb.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp22k84bb.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tm"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp22k84bb.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    new_s = \"\"\n    for i = 1:length(s)\n\
    \        if !(any(s[i] == t for t in c))\n            new_s *= s[i]\n        end\n\
    \    end\n    for i = 1:length(new_s)\n        if new_s[i] != new_s[end-i+1]\n\
    \            return (new_s, false)\n        end\n    end\n    return (new_s, true)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    # First we delete all the characters in\
    \ s that are equal to any character in c\n    characters_to_delete = Set(c)\n\
    \    s = collect(s)\n    s = [value for value in s if value \u2209 characters_to_delete]\n\
    \    s = join(s, \"\")\n    # Then we check if the result string is palindrome\n\
    \    return (s, s == reverse(s))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    s = [ss for ss in s if ss in c]\n    return\
    \ join(s, \"\"), s == reverse(s)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp591up8_n.jl:20\n  Expression: candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false)\n   Evaluated: (\"ae\", false) == (\"bcd\"\
    , false)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp591up8_n.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp591up8_n.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp591up8_n.jl:21\n  Expression: candidate(\"abcdef\", \"b\"\
    ) == (\"acdef\", false)\n   Evaluated: (\"b\", true) == (\"acdef\", false)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp591up8_n.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp591up8_n.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp591up8_n.jl:22\n  Expression: candidate(\"abcdedcba\", \"\
    ab\") == (\"cdedc\", true)\n   Evaluated: (\"abba\", true) == (\"cdedc\", true)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp591up8_n.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp591up8_n.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp591up8_n.jl:23\n  Expression: candidate(\"dwik\", \"w\") ==\
    \ (\"dik\", false)\n   Evaluated: (\"w\", true) == (\"dik\", false)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp591up8_n.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp591up8_n.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp591up8_n.jl:24\n  Expression: candidate(\"a\", \"a\") ="
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 9 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp591up8_n.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    x = map(ch -> match(ch in c, true=>'',\
    \ false=>ch), s)\n    y = join(x)\n    reverse(y) == y ? (y, true) : (y, false)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid empty character literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr5mzcgsk.jl:12\nin expression starting at\
    \ /tmp/tmpr5mzcgsk.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    for i in eachindex(c) \n        s = replace(s,\
    \ c[i], \"\")\n    end\n    # map!(x -> (x in c ? \"\":\"x\"), s)\n    revstr\
    \ = reverse(s)\n    return (s, s == revstr)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\"\
    , false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3r2t6je4.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ no method matching replace(::String, ::Char, ::String)\n  Closest candidates\
    \ are:\n    replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmp3r2t6je4.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3r2t6je4.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3r2t6je4.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp3r2t6je4.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: no method\
    \ matching replace(::String, ::Char, ::String)\n  Closest candidates are:\n  \
    \  replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmp3r2t6je4.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3r2t6je4.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level sc"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3r2t6je4.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    deletes = [e for e in c]\n    string =\
    \ [e for e in s]\n    for d in deletes\n        string = filter(x -> x != d, string)\n\
    \    end\n    string = join(string)\n    return string, string == reverse(string)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    s = filter(a->!(a in c), s)\n    return\
    \ (s, s == reverse(s))\nend\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    string(filter(!(x->x in c), s)) in s ?\
    \ (string(filter(!(x->x in c), s)), true) : (string(filter(!(x->x in c), s)),\
    \ false)\nend\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t\
    @test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpiddxtzra.jl:19\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  use occursin(x,\
    \ y) for string containment\n  Stacktrace:\n   [1] error(s::String)\n     @ Base\
    \ ./error.jl:33\n   [2] in(#unused#::String, #unused#::String)\n     @ Base ./strings/search.jl:638\n\
    \   [3] reverse_delete(s::String, c::String)\n     @ Main /tmp/tmpiddxtzra.jl:12\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpiddxtzra.jl:19 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpiddxtzra.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpiddxtzra.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n\
    \   [2] in(#unused#::String, #unused#::String)\n     @ Base ./strings/search.jl:638\n\
    \   [3] reverse_delete(s::String, c::String)\n     @ Main /tmp/tmpiddxtzra.jl:12\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpiddxtzra.jl:20 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpiddxtzra.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpiddxtzra.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true)\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n   [1] error(s::String)\n     @ Base\
    \ ./error.jl:33\n   [2] in(#unused#::String, #unused#::String)\n     @ Base ./strings/search.jl:638\n\
    \   [3] reverse_delete(s::String, c::String)\n     @ Main /tmp/tmpiddxtzra.jl:12\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tm"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiddxtzra.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    #complete the function\n    return (s,\
    \ false)\nend\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t\
    @test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi421g8qq.jl:20\n  Expression: candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false)\n   Evaluated: (\"abcde\", false) == (\"\
    bcd\", false)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi421g8qq.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi421g8qq.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpi421g8qq.jl:21\n  Expression: candidate(\"abcdef\", \"b\"\
    ) == (\"acdef\", false)\n   Evaluated: (\"abcdef\", false) == (\"acdef\", false)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi421g8qq.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi421g8qq.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpi421g8qq.jl:22\n  Expression: candidate(\"abcdedcba\", \"\
    ab\") == (\"cdedc\", true)\n   Evaluated: (\"abcdedcba\", false) == (\"cdedc\"\
    , true)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi421g8qq.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi421g8qq.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpi421g8qq.jl:23\n  Expression: candidate(\"dwik\", \"w\") ==\
    \ (\"dik\", false)\n   Evaluated: (\"dwik\", false) == (\"dik\", false)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi421g8qq.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi421g8qq.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpi421g8qq.jl:24\n  Expression: ca"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 9 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi421g8qq.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    for char in c\n        s = replace(s,\
    \ char => \"\")\n    end\n    return (s, s == reverse(s))\nend\n \n# tests\ns\
    \ = \"abcdedcba\"\nc = \"ab\"\nresult = \"cdedc\"\ntest_reverse_delete(s, c, result)\n\
    s = \"abcdef\"\nc = \"b\"\nresult = \"acdef\"\ntest_reverse_delete(s, c, result)\n\
    using Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: test_reverse_delete not defined\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbi7unqbx.jl:22\nin expression starting at\
    \ /tmp/tmpbi7unqbx.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    chars_to_delete = Set(c)\n    deleted_string\
    \ = s[filter(!(c -> c in chars_to_delete),eachindex(s))]\n    return (deleted_string,\
    \ deleted_string == reverse(deleted_string))\nend\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: MethodError: no method matching filter(::Base.var\"#84#85\"\
    {var\"#1#2\"{Set{Char}}}, ::Base.EachStringIndex{String})\nClosest candidates\
    \ are:\n  filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \  filter(::Any, !Matched::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \  filter(::Any, !Matched::AbstractDict) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:434\n\
    \  ...\nStacktrace:\n [1] reverse_delete(s::String, c::String)\n   @ Main /tmp/tmpjh5fn0wy.jl:13\n\
    \ [2] top-level scope\n   @ /tmp/tmpjh5fn0wy.jl:16\nin expression starting at\
    \ /tmp/tmpjh5fn0wy.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    for i in c\n        s = replace(s, i =>\
    \ \"\")\n    end\n    return (s, isequal(s, reverse(s)))\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"\
    ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} = \n        let\n            s = filter(c->!(c in c), s)\n           \
    \ (s, s == reverse(s))\n        end\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpd7rjmp72.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd7rjmp72.jl:1\n\
    in expression starting at /tmp/tmpd7rjmp72.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    for e in c\n        s = replace(s, e =>\
    \ \"\")\n    end\n    return s, ispalindrome(s)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\"\
    , false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptkw5cjaw.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  UndefVarError:\
    \ ispalindrome not defined\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n\
    \     @ Main /tmp/tmptkw5cjaw.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptkw5cjaw.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptkw5cjaw.jl:21\ntest set:\
    \ Error During Test at /tmp/tmptkw5cjaw.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  UndefVarError: ispalindrome\
    \ not defined\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n  \
    \   @ Main /tmp/tmptkw5cjaw.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptkw5cjaw.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptkw5cjaw.jl:21\ntest set:\
    \ Error During Test at /tmp/tmptkw5cjaw.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true)\n  UndefVarError: ispalindrome\
    \ not defined\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n  \
    \   @ Main /tmp/tmptkw5cjaw.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptkw5cjaw.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptkw5cjaw.jl:21\ntest set:\
    \ Error During Test at /tmp/tmptkw5cjaw.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"dwik\", \"w\") == (\"dik\", false)\n  UndefVarError: ispalindrome\
    \ not defined\n  Stacktrace:\n   [1] reverse_de"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptkw5cjaw.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    s = s[search(s, r\"[^$c]\")]\n    return\
    \ (s, s == reverse(s))\nend\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp95g29ghw.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  UndefVarError:\
    \ search not defined\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n\
    \     @ Main /tmp/tmp95g29ghw.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp95g29ghw.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp95g29ghw.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp95g29ghw.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  UndefVarError: search\
    \ not defined\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n  \
    \   @ Main /tmp/tmp95g29ghw.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp95g29ghw.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp95g29ghw.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp95g29ghw.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true)\n  UndefVarError: search\
    \ not defined\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n  \
    \   @ Main /tmp/tmp95g29ghw.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp95g29ghw.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp95g29ghw.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp95g29ghw.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"dwik\", \"w\") == (\"dik\", false)\n  UndefVarError: search not\
    \ defined\n  Stacktrace:\n   [1] reverse_delete(s::String, c::Strin"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp95g29ghw.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    \n    s = string(filter(x -> !in(x,c),\
    \ collect(s)))\n    return (s, s == reverse(s))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\"\
    , false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm0t0e_gp.jl:21\n  Expression: candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false)\n   Evaluated: (\"['b', 'c', 'd']\", false)\
    \ == (\"bcd\", false)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm0t0e_gp.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm0t0e_gp.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpm0t0e_gp.jl:22\n  Expression: candidate(\"abcdef\", \"b\"\
    ) == (\"acdef\", false)\n   Evaluated: (\"['a', 'c', 'd', 'e', 'f']\", false)\
    \ == (\"acdef\", false)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm0t0e_gp.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm0t0e_gp.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpm0t0e_gp.jl:23\n  Expression: candidate(\"abcdedcba\", \"\
    ab\") == (\"cdedc\", true)\n   Evaluated: (\"['c', 'd', 'e', 'd', 'c']\", false)\
    \ == (\"cdedc\", true)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm0t0e_gp.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm0t0e_gp.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpm0t0e_gp.jl:24\n  Expression: candidate(\"dwik\", \"w\") ==\
    \ (\"dik\", false)\n   Evaluated: (\"['d', 'i', 'k']\", false) == (\"dik\", false)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm0t0e_gp.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm0t0e_gp.jl:20\ntest set"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 9 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm0t0e_gp.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    s = delete(s, findall(in(c), s))\n   \
    \ return s, isequal(s, reverse(s))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkloph_z4.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  UndefVarError:\
    \ delete not defined\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n\
    \     @ Main /tmp/tmpkloph_z4.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkloph_z4.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkloph_z4.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpkloph_z4.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  UndefVarError: delete\
    \ not defined\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n  \
    \   @ Main /tmp/tmpkloph_z4.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkloph_z4.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkloph_z4.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpkloph_z4.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true)\n  UndefVarError: delete\
    \ not defined\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n  \
    \   @ Main /tmp/tmpkloph_z4.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkloph_z4.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkloph_z4.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpkloph_z4.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"dwik\", \"w\") == (\"dik\", false)\n  UndefVarError: delete not\
    \ defined\n  Stacktrace:\n   [1] reverse_delete(s::String, c::Strin"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkloph_z4.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    new_s = \"\"\n    for i in s\n       \
    \ if i \u2209 c\n            push!(new_s, i)\n        end\n    end\n    return\
    \ (new_s, new_s == reverse(new_s))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgrj8hc3e.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ no method matching push!(::String, ::Char)\n  Closest candidates are:\n    push!(::Any,\
    \ ::Any, !Matched::Any) at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:2970\n\
    \    push!(::Any, ::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:2971\n\
    \    push!(!Matched::Base.InvasiveLinkedListSynchronized{T}, ::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/task.jl:605\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpgrj8hc3e.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgrj8hc3e.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgrj8hc3e.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpgrj8hc3e.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: no method\
    \ matching push!(::String, ::Char)\n  Closest candidates are:\n    push!(::Any,\
    \ ::Any, !Matched::Any) at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:2970\n\
    \    push!(::Any, ::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:2971\n\
    \    push!(!Matched::Base.InvasiveLinkedListSynchronized{T}, ::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/task.jl:605\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpgrj8hc3e.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgrj8hc3e.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tm"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgrj8hc3e.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    p = [e for e in s if e in c]\n    res\
    \ = string(filter(e->e \u2209 p,s))\n    return res, res == reverse(res)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    s = replace(s, c, \"\")\n    return (s,\
    \ ispalindrome(s))\nend\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpl4i2rqu5.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ no method matching replace(::String, ::String, ::String)\n  Closest candidates\
    \ are:\n    replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpl4i2rqu5.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl4i2rqu5.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl4i2rqu5.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpl4i2rqu5.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: no method\
    \ matching replace(::String, ::String, ::String)\n  Closest candidates are:\n\
    \    replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpl4i2rqu5.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl4i2rqu5.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-leve"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl4i2rqu5.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    for c_char in c\n        s = replace(s,\
    \ c_char, \"\")\n    end\n    return (s, is_palindrome(s))\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"\
    ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwvhctrg0.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ no method matching replace(::String, ::Char, ::String)\n  Closest candidates\
    \ are:\n    replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpwvhctrg0.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvhctrg0.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvhctrg0.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpwvhctrg0.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: no method\
    \ matching replace(::String, ::Char, ::String)\n  Closest candidates are:\n  \
    \  replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpwvhctrg0.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvhctrg0.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level sc"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwvhctrg0.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    s_c = delete!(s, c)\n    return (s_c,\
    \ s_c == reverse(s_c))\nend\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpf8nsctvx.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ no method matching delete!(::String, ::String)\n  Closest candidates are:\n\
    \    delete!(!Matched::IdDict{K}, ::Any) where K at /shared/centos7/julia/1.7.3/share/julia/base/iddict.jl:130\n\
    \    delete!(!Matched::Base.IdSet, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/idset.jl:23\n\
    \    delete!(!Matched::Dict, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/dict.jl:661\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpf8nsctvx.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf8nsctvx.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf8nsctvx.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpf8nsctvx.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: no method\
    \ matching delete!(::String, ::String)\n  Closest candidates are:\n    delete!(!Matched::IdDict{K},\
    \ ::Any) where K at /shared/centos7/julia/1.7.3/share/julia/base/iddict.jl:130\n\
    \    delete!(!Matched::Base.IdSet, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/idset.jl:23\n\
    \    delete!(!Matched::Dict, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/dict.jl:661\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpf8nsctvx.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf8nsctvx.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf8nsctvx.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpf8nsctvx.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\""
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf8nsctvx.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    s = [ i for i in s if i \u2209 c ]\n \
    \   return (s, s == reverse(s))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpc3pfz64x.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ Cannot `convert` an object of type Vector{Char} to an object of type String\n\
    \  Closest candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] cvt1\n     @ ./essentials.jl:343 [inlined]\n \
    \  [2] ntuple\n     @ ./ntuple.jl:49 [inlined]\n   [3] convert(#unused#::Type{Tuple{String,\
    \ Bool}}, x::Tuple{Vector{Char}, Bool})\n     @ Base ./essentials.jl:344\n   [4]\
    \ reverse_delete(s::String, c::String)\n     @ Main /tmp/tmpc3pfz64x.jl:13\n \
    \  [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpc3pfz64x.jl:20 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpc3pfz64x.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpc3pfz64x.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: Cannot `convert`\
    \ an object of type Vector{Char} to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] cvt1\n     @ ./essentials.jl:343 [inlined]\n \
    \  [2] ntuple\n     @ ./ntuple.jl:49 [inlined]\n   [3] c"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc3pfz64x.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    for i in c\n        s = replace(s, i =>\
    \ \"\")\n    end\n    return s, s == reverse(s)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\"\
    , false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    # Your code here. Good luck\n    return\
    \ s, false\nend\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcnaluzf0.jl:20\n  Expression: candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false)\n   Evaluated: (\"abcde\", false) == (\"\
    bcd\", false)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcnaluzf0.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcnaluzf0.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpcnaluzf0.jl:21\n  Expression: candidate(\"abcdef\", \"b\"\
    ) == (\"acdef\", false)\n   Evaluated: (\"abcdef\", false) == (\"acdef\", false)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcnaluzf0.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcnaluzf0.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpcnaluzf0.jl:22\n  Expression: candidate(\"abcdedcba\", \"\
    ab\") == (\"cdedc\", true)\n   Evaluated: (\"abcdedcba\", false) == (\"cdedc\"\
    , true)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcnaluzf0.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcnaluzf0.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpcnaluzf0.jl:23\n  Expression: candidate(\"dwik\", \"w\") ==\
    \ (\"dik\", false)\n   Evaluated: (\"dwik\", false) == (\"dik\", false)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcnaluzf0.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcnaluzf0.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpcnaluzf0.jl:24\n  Expression: ca"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 9 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcnaluzf0.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    for i in c\n        s = replace(s, i,\
    \ \"\")\n    end\n    s = replace(s, \" \", \"\")\n    return s, s == reverse(s)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptw_92h10.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ no method matching replace(::String, ::Char, ::String)\n  Closest candidates\
    \ are:\n    replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmptw_92h10.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptw_92h10.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptw_92h10.jl:22\ntest set:\
    \ Error During Test at /tmp/tmptw_92h10.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: no method\
    \ matching replace(::String, ::Char, ::String)\n  Closest candidates are:\n  \
    \  replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmptw_92h10.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptw_92h10.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level sc"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptw_92h10.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    result = [x for x in s if x in c]\n  \
    \  new_s = join(result, \"\")\n    return(new_s, is_palindrome(new_s))\nend\n\
    using Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxfuqy61m.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  UndefVarError:\
    \ is_palindrome not defined\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n\
    \     @ Main /tmp/tmpxfuqy61m.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxfuqy61m.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxfuqy61m.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpxfuqy61m.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  UndefVarError: is_palindrome\
    \ not defined\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n  \
    \   @ Main /tmp/tmpxfuqy61m.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxfuqy61m.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxfuqy61m.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpxfuqy61m.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true)\n  UndefVarError: is_palindrome\
    \ not defined\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n  \
    \   @ Main /tmp/tmpxfuqy61m.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxfuqy61m.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxfuqy61m.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpxfuqy61m.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"dwik\", \"w\") == (\"dik\", false)\n  UndefVarError: is_palindrome\
    \ not defined\n  Stacktrace:\n   [1] revers"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxfuqy61m.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    s = replace(s, c, \"\")\n    return (s,\
    \ s == reverse(s))\nend\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjq_0dn0b.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ no method matching replace(::String, ::String, ::String)\n  Closest candidates\
    \ are:\n    replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpjq_0dn0b.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjq_0dn0b.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjq_0dn0b.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpjq_0dn0b.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: no method\
    \ matching replace(::String, ::String, ::String)\n  Closest candidates are:\n\
    \    replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpjq_0dn0b.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjq_0dn0b.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-leve"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjq_0dn0b.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    s = string(s)\n    c = string(c)\n   \
    \ while !isempty(s) && occursin(c, s[end]) \n        pop!(s)\n    end\n    while\
    \ !isempty(s) && occursin(c, s[1]) \n        shift!(s)\n    end\n    is_palindrome\
    \ = s == reverse(s)\n    (s, is_palindrome)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\"\
    , false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjpk0ns2v.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ no method matching occursin(::String, ::Char)\n  Closest candidates are:\n \
    \   occursin(::Union{AbstractChar, AbstractString}, !Matched::AbstractString)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:622\n    occursin(::Any)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:636\n  Stacktrace:\n\
    \   [1] reverse_delete(s::String, c::String)\n     @ Main /tmp/tmpjpk0ns2v.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjpk0ns2v.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjpk0ns2v.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpjpk0ns2v.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: no method\
    \ matching occursin(::String, ::Char)\n  Closest candidates are:\n    occursin(::Union{AbstractChar,\
    \ AbstractString}, !Matched::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:622\n\
    \    occursin(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:636\n\
    \  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main /tmp/tmpjpk0ns2v.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjpk0ns2v.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjpk0ns2v.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpjpk0ns2v.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true)\n  MethodError: no method\
    \ matching occursin(::String, ::Char)\n  Closest candidates are:\n    occursin(::Union{AbstractC"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjpk0ns2v.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    s = filter(e->!(e in c), s)\n    return\
    \ (s, s == reverse(s))\nend\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    new_s = filter(ch -> ch \u2209 c, s)\n\
    \    return (new_s, new_s == reverse(new_s))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\"\
    , false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    \n    for i in c \n        s = replace(s,\
    \ i, \"\")\n    end\n    \n    if s == reverse(s)\n        return s, true\n  \
    \  else\n        return s, false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\"\
    , false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4uyk43xq.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ no method matching replace(::String, ::Char, ::String)\n  Closest candidates\
    \ are:\n    replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmp4uyk43xq.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4uyk43xq.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4uyk43xq.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp4uyk43xq.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: no method\
    \ matching replace(::String, ::Char, ::String)\n  Closest candidates are:\n  \
    \  replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmp4uyk43xq.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4uyk43xq.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level sc"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4uyk43xq.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    s = split(s,r\"[$c]\") * \"\"\n    return\
    \ (s,s == reverse(s))\nend\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpluftwti7.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\\\
    n  MethodError: no method matching *(::Vector{SubString{String}}, ::String)\\\
    n  Closest candidates are:\\n    *(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\\n    *(!Matched::Union{AbstractChar,\
    \ AbstractString}, ::Union{AbstractChar, AbstractString}...) at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:260\\\
    n    *(::StridedVecOrMat, !Matched::LinearAlgebra.Adjoint{<:Any, <:LinearAlgebra.LQPackedQ})\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:266\\\
    n    ...\\n  Stacktrace:\\n   [1] reverse_delete(s::String, c::String)\\n    \
    \ @ Main /tmp/tmpluftwti7.jl:12\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpluftwti7.jl:20 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpluftwti7.jl:19\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    new_string = [i for i in s if i not in\
    \ c]\n    return (join(new_string), ispalindrome(new_string))\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\",\
    \ \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmpbpbwtoqr.jl:12\nin expression starting at /tmp/tmpbpbwtoqr.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    #deleting all the characters in s that\
    \ are equal to any character in c\n    for ch in c\n        s = replace(s, ch\
    \ => \"\")\n    end\n    #checking if the result string is palindrome.\n    res\
    \ = s == reverse(s) ? true : false\n    return (s, res)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") ==\
    \ (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\
    \t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"\
    dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"\
    vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") ==\
    \ (\"\", true))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    s_ = s\n    for c_ in c\n        s_ =\
    \ replace(s_, c_ => \"\")\n    end\n    res = String(s_) == String(reverse(s_))\n\
    \    return (s_, res)\nend\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    t = [x for x in s if x not in c] \n  \
    \  if t == reverse(t) \n        return (string(t), true) \n    else \n       \
    \ return (string(t), false) \n    end \nend \n</code>\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") ==\
    \ (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\
    \t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"\
    dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"\
    vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") ==\
    \ (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmpb7o6vood.jl:12\nin expression starting at /tmp/tmpb7o6vood.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    s1 = replace(s, r\"[$c]\", \"\")\n   \
    \ s2 = reverse(s1)\n    return (s1, s1 == s2)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\"\
    , false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpc2u5xjmh.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ no method matching replace(::String, ::Regex, ::String)\n  Closest candidates\
    \ are:\n    replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpc2u5xjmh.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc2u5xjmh.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc2u5xjmh.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpc2u5xjmh.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: no method\
    \ matching replace(::String, ::Regex, ::String)\n  Closest candidates are:\n \
    \   replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpc2u5xjmh.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc2u5xjmh.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc2u5xjmh.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    s = join(filter(x -> !(x in c), collect(s)))\n\
    \    return (s, s == reverse(s))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    new_s = \"\"\n    for i in s\n       \
    \ if i in c\n            new_s *= \"\"\n        else\n            new_s *= i\n\
    \        end\n    end\n    for i in 1:length(new_s)\n        if new_s[i] != new_s[end-i+1]\n\
    \            return (new_s, false)\n        end\n    end\n    return (new_s, true)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    s_new = \"\"\n    for i in s\n       \
    \ if !(i in c)\n            s_new *= i\n        end\n    end\n    s_rev = reverse(s_new)\n\
    \    return s_new, s_new == s_rev\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    s = replace(s,c=>\"\")\n    b = reverse(s)\n\
    \    return s, s == b\nend\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp94za__ig.jl:21\n  Expression: candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false)\n   Evaluated: (\"abcde\", false) == (\"\
    bcd\", false)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp94za__ig.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp94za__ig.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp94za__ig.jl:23\n  Expression: candidate(\"abcdedcba\", \"\
    ab\") == (\"cdedc\", true)\n   Evaluated: (\"cdedcba\", false) == (\"cdedc\",\
    \ true)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp94za__ig.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp94za__ig.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp94za__ig.jl:29\n  Expression: candidate(\"mamma\", \"mia\"\
    ) == (\"\", true)\n   Evaluated: (\"mamma\", false) == (\"\", true)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp94za__ig.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp94za__ig.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp94za__ig.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    s = s .* replace(r\"[\" * join(c) * \"\
    ]\", \"\")\n    return s, s == reverse(s)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\"\
    , false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: PCRE compilation error: missing terminating ] for character\
    \ class at offset 1\nStacktrace:\n  [1] error(s::String)\n    @ Base ./error.jl:33\n\
    \  [2] compile(pattern::String, options::UInt32)\n    @ Base.PCRE ./pcre.jl:155\n\
    \  [3] compile(regex::Regex)\n    @ Base ./regex.jl:82\n  [4] Regex(pattern::String,\
    \ compile_options::UInt32, match_options::UInt32)\n    @ Base ./regex.jl:47\n\
    \  [5] Regex(pattern::String)\n    @ Base ./regex.jl:70\n  [6] var\"@r_str\"(__source__::LineNumberNode,\
    \ __module__::Module, pattern::Any, flags::Vararg{Any})\n    @ Base ./regex.jl:119\n\
    \  [7] #macroexpand#51\n    @ ./expr.jl:115 [inlined]\n  [8] macroexpand\n   \
    \ @ ./expr.jl:114 [inlined]\n  [9] docm(source::LineNumberNode, mod::Module, meta::Any,\
    \ ex::Any, define::Bool) (repeats 2 times)\n    @ Base.Docs ./docs/Docs.jl:537\n\
    \ [10] var\"@doc\"(::LineNumberNode, ::Module, ::String, ::Vararg{Any})\n    @\
    \ Core ./boot.jl:517\nin expression starting at /tmp/tmp6luq6eiu.jl:1\nin expression\
    \ starting at /tmp/tmp6luq6eiu.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    for cc in c\n        s = replace(s, cc,\
    \ \"\")\n    end\n    return (s, s == reverse(s))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") ==\
    \ (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\
    \t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"\
    dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"\
    vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") ==\
    \ (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpq6by72kj.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ no method matching replace(::String, ::Char, ::String)\n  Closest candidates\
    \ are:\n    replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpq6by72kj.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq6by72kj.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq6by72kj.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpq6by72kj.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: no method\
    \ matching replace(::String, ::Char, ::String)\n  Closest candidates are:\n  \
    \  replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpq6by72kj.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq6by72kj.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level sc"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq6by72kj.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    result = s \n    for ch in c \n      \
    \  result = replace(result, ch)\n    end\n    return (result, result == reverse(result))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbywifwe_.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ no method matching replace(::String, ::Char)\n  Closest candidates are:\n  \
    \  replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpbywifwe_.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbywifwe_.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbywifwe_.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpbywifwe_.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: no method\
    \ matching replace(::String, ::Char)\n  Closest candidates are:\n    replace(!Matched::Union{Function,\
    \ Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpbywifwe_.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbywifwe_.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbywifwe_.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    filter!(a->a in s, c)\n    deletethem\
    \ = []\n    for i = 1:length(s)\n        append!(deletethem, find(s[i] .== c))\n\
    \    end\n    deletethem = collect(Set(deletethem))\n    deletethem = sort(deletethem)\n\
    \    todelete = []\n    for i = 1:length(deletethem)\n        append!(todelete,\
    \ s[deletethem[i]])\n    end\n    todelete = collect(Set(todelete))\n    string\
    \ = s\n    for i = 1:length(todelete)\n        string = replace(string, todelete[i])\n\
    \    end\n    palindrome = string == reverse(string)\n    return (string, palindrome)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpb4zy8b2s.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ no method matching filter!(::var\"#1#2\"{String}, ::String)\n  Closest candidates\
    \ are:\n    filter!(::Any, !Matched::AbstractVector) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2525\n\
    \    filter!(::Any, !Matched::IdDict) at /shared/centos7/julia/1.7.3/share/julia/base/iddict.jl:193\n\
    \    filter!(::Any, !Matched::Base.IdSet) at /shared/centos7/julia/1.7.3/share/julia/base/idset.jl:28\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpb4zy8b2s.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb4zy8b2s.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb4zy8b2s.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpb4zy8b2s.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: no method\
    \ matching filter!(::var\"#1#2\"{String}, ::String)\n  Closest candidates are:\n\
    \    filter!(::Any, !Matched::AbstractVector) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2525\n\
    \    filter!(::Any, !Matched::IdDict) at /shared/centos7/julia/1.7.3/share/julia/base/iddict.jl:193\n\
    \    filter!(::Any, !Matched::Base.IdSet) at /shared/centos7/julia/1.7.3/share/julia/base/idset.jl:28\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpb4zy8b2s.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb4zy8b2s.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb4zy8b2s.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpb4zy8b2s.jl:38\n  Test threw exception\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb4zy8b2s.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n     for i in s \n        for j in c\n   \
    \         if i == j\n                deleteat!(s, findall(x->x==i, s))\n     \
    \       end\n        end\n    end\n    r = s == reverse(s)\n    return (s, r)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_lv_oma1.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ no method matching deleteat!(::String, ::Vector{Int64})\n  Closest candidates\
    \ are:\n    deleteat!(!Matched::Vector, ::AbstractVector) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1469\n\
    \    deleteat!(!Matched::Vector, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1468\n\
    \    deleteat!(!Matched::BitVector, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:982\n\
    \  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main /tmp/tmp_lv_oma1.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_lv_oma1.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_lv_oma1.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp_lv_oma1.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: no method\
    \ matching deleteat!(::String, ::Vector{Int64})\n  Closest candidates are:\n \
    \   deleteat!(!Matched::Vector, ::AbstractVector) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1469\n\
    \    deleteat!(!Matched::Vector, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1468\n\
    \    deleteat!(!Matched::BitVector, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:982\n\
    \  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main /tmp/tmp_lv_oma1.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_lv_oma1.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_lv_oma1.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp_lv_oma1.jl:29\n  Test threw excepti"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_lv_oma1.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    # your code here\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"\
    ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3r0uxtc5.jl:19\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Tuple{String,\
    \ Bool}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Tuple at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:336\n\
    \    convert(::Type{T}, !Matched::Tuple{Vararg{Any, N}}) where {N, T<:Tuple} at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:337\n    convert(::Type{T},\
    \ !Matched::CartesianIndex) where T<:Tuple at /shared/centos7/julia/1.7.3/share/julia/base/multidimensional.jl:137\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmp3r0uxtc5.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3r0uxtc5.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3r0uxtc5.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp3r0uxtc5.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Tuple{String, Bool}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Tuple at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:336\n\
    \    convert(::Type{T}, !Matched::Tuple{Vararg{Any, N}}) where {N, T<:Tuple} at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:337\n    convert(::Type{T},\
    \ !Matched::CartesianIndex) where T<:Tuple at /shared/centos7/julia/1.7.3/share/julia/base/multidimensional.jl:137\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmp3r0uxtc5.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3r0uxtc5.jl:20 [inlined]\n\
    \   [4] macro expa"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3r0uxtc5.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    s_new = \"\"\n    for i in s\n       \
    \ if !(i in c)\n            s_new *= i\n        end\n    end\n    return (s_new,\
    \ is_palindrome(s_new))\nend\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpi1cqb90_.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  UndefVarError:\
    \ is_palindrome not defined\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n\
    \     @ Main /tmp/tmpi1cqb90_.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi1cqb90_.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi1cqb90_.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpi1cqb90_.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  UndefVarError: is_palindrome\
    \ not defined\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n  \
    \   @ Main /tmp/tmpi1cqb90_.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi1cqb90_.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi1cqb90_.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpi1cqb90_.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true)\n  UndefVarError: is_palindrome\
    \ not defined\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n  \
    \   @ Main /tmp/tmpi1cqb90_.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi1cqb90_.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi1cqb90_.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpi1cqb90_.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"dwik\", \"w\") == (\"dik\", false)\n  UndefVarError: is_palindrome\
    \ not defined\n  Stacktrace:\n   [1] revers"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi1cqb90_.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    s_, c_ = delete_in!(s, c)\n    return\
    \ s_, is_palindrome(s_)\nend\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_2ieo0h1.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  UndefVarError:\
    \ delete_in! not defined\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n\
    \     @ Main /tmp/tmp_2ieo0h1.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_2ieo0h1.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_2ieo0h1.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp_2ieo0h1.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  UndefVarError: delete_in!\
    \ not defined\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n  \
    \   @ Main /tmp/tmp_2ieo0h1.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_2ieo0h1.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_2ieo0h1.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp_2ieo0h1.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true)\n  UndefVarError: delete_in!\
    \ not defined\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n  \
    \   @ Main /tmp/tmp_2ieo0h1.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_2ieo0h1.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_2ieo0h1.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp_2ieo0h1.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"dwik\", \"w\") == (\"dik\", false)\n  UndefVarError: delete_in!\
    \ not defined\n  Stacktrace:\n   [1] reverse_delete(s::"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_2ieo0h1.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    s_clean = [e for e in s if !(e in c)]\n\
    \    x = reverse(s_clean)\n    return join(s_clean, \"\"), x == s_clean\nend\n\
    using Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    s = split(s, \"\")\n    c = split(c, \"\
    \")\n    for i in c\n        for j in s\n            if i == j\n             \
    \   deleteat!(s, findfirst(s, i))\n            end\n        end\n    end\n   \
    \ s = join(s, \"\")\n    return (s, s == reverse(s))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") ==\
    \ (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\
    \t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"\
    dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"\
    vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") ==\
    \ (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpoh4zwuqb.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ no method matching findfirst(::Vector{SubString{String}}, ::SubString{String})\n\
    \  Closest candidates are:\n    findfirst(!Matched::Function, ::Union{AbstractString,\
    \ AbstractArray}) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2002\n\
    \    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n\
    \    findfirst(!Matched::AbstractString, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:104\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpoh4zwuqb.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpoh4zwuqb.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpoh4zwuqb.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpoh4zwuqb.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: no method\
    \ matching findfirst(::Vector{SubString{String}}, ::SubString{String})\n  Closest\
    \ candidates are:\n    findfirst(!Matched::Function, ::Union{AbstractString, AbstractArray})\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2002\n    findfirst(!Matched::Function,\
    \ ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(!Matched::AbstractString,\
    \ ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:104\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpoh4zwuqb.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpoh4zwuqb.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/T"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoh4zwuqb.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    l = 0\n    r = length(s) - 1\n    while\
    \ l <= r\n        if s[l] in c\n            deleteat!(s, l)\n            r -=\
    \ 1\n        elseif s[r] in c\n            deleteat!(s, r)\n            r -= 1\n\
    \        else\n            l += 1\n        end\n    end\n    return s, ispalindrome(s)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpg046hxw_.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  BoundsError:\
    \ attempt to access 5-codeunit String at index [0]\n  Stacktrace:\n   [1] checkbounds\n\
    \     @ ./strings/basic.jl:216 [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102\
    \ [inlined]\n   [3] getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4]\
    \ reverse_delete(s::String, c::String)\n     @ Main /tmp/tmpg046hxw_.jl:15\n \
    \  [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpg046hxw_.jl:32 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpg046hxw_.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpg046hxw_.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  BoundsError: attempt to\
    \ access 6-codeunit String at index [0]\n  Stacktrace:\n   [1] checkbounds\n \
    \    @ ./strings/basic.jl:216 [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102\
    \ [inlined]\n   [3] getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4]\
    \ reverse_delete(s::String, c::String)\n     @ Main /tmp/tmpg046hxw_.jl:15\n \
    \  [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpg046hxw_.jl:33 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpg046hxw_.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpg046hxw_.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true)\n  BoundsError: attempt\
    \ to access 9-codeunit String at index [0]\n  Stacktrace:\n   [1] checkbounds\n\
    \     @ ./strings/basic.jl:216 [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102\
    \ [inlined]\n   [3] getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4]\
    \ reverse_delete(s::String, c::String"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg046hxw_.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    s = delete(s, c)\n    return (s, ispalindrome(s))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmprch7nq2u.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  UndefVarError:\
    \ delete not defined\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n\
    \     @ Main /tmp/tmprch7nq2u.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprch7nq2u.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprch7nq2u.jl:19\ntest set:\
    \ Error During Test at /tmp/tmprch7nq2u.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  UndefVarError: delete\
    \ not defined\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n  \
    \   @ Main /tmp/tmprch7nq2u.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprch7nq2u.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprch7nq2u.jl:19\ntest set:\
    \ Error During Test at /tmp/tmprch7nq2u.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true)\n  UndefVarError: delete\
    \ not defined\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n  \
    \   @ Main /tmp/tmprch7nq2u.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprch7nq2u.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprch7nq2u.jl:19\ntest set:\
    \ Error During Test at /tmp/tmprch7nq2u.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"dwik\", \"w\") == (\"dik\", false)\n  UndefVarError: delete not\
    \ defined\n  Stacktrace:\n   [1] reverse_delete(s::String, c::Strin"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprch7nq2u.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    filtered = [x for x in s if x in c]\n\
    \    return (reverse(filtered), filtered == reverse(filtered))\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\",\
    \ \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8zz5_te7.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ Cannot `convert` an object of type Vector{Char} to an object of type String\n\
    \  Closest candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] cvt1\n     @ ./essentials.jl:343 [inlined]\n \
    \  [2] ntuple\n     @ ./ntuple.jl:49 [inlined]\n   [3] convert(#unused#::Type{Tuple{String,\
    \ Bool}}, x::Tuple{Vector{Char}, Bool})\n     @ Base ./essentials.jl:344\n   [4]\
    \ reverse_delete(s::String, c::String)\n     @ Main /tmp/tmp8zz5_te7.jl:13\n \
    \  [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp8zz5_te7.jl:20 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp8zz5_te7.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp8zz5_te7.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: Cannot `convert`\
    \ an object of type Vector{Char} to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] cvt1\n     @ ./essentials.jl:343 [inlined]\n \
    \  [2] ntuple\n     @ ./ntuple.jl:49 [inlined]\n   [3] c"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8zz5_te7.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    for character in c \n        s = replace(s,\
    \ character, \"\")\n    end \n    return s, isequal(s, reverse(s))\nend \nusing\
    \ Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpupqwqniy.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ no method matching replace(::String, ::Char, ::String)\n  Closest candidates\
    \ are:\n    replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpupqwqniy.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpupqwqniy.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpupqwqniy.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpupqwqniy.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: no method\
    \ matching replace(::String, ::Char, ::String)\n  Closest candidates are:\n  \
    \  replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpupqwqniy.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpupqwqniy.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level sc"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpupqwqniy.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    \"\"\"Takes two strings:\n    s: string\n\
    \    c: string\n    returns: tuple, (String, Bool)\"\"\"\n    # your code here\n\
    \    s = copy(s)\n    for i in c\n        s = replace(s, i=>\"\")\n    end\n \
    \   s = replace(s, \" \"=>\"\")\n    b = ispalindrome(s)\n    return s, b\nend\n\
    using Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpu958b4u8.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ no method matching copy(::String)\n  Closest candidates are:\n    copy(!Matched::LinearAlgebra.Hessenberg{<:Any,\
    \ <:LinearAlgebra.UpperHessenberg}) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/hessenberg.jl:418\n\
    \    copy(!Matched::LinearAlgebra.Hessenberg{<:Any, <:LinearAlgebra.SymTridiagonal})\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/hessenberg.jl:419\n\
    \    copy(!Matched::LinearAlgebra.CholeskyPivoted) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/cholesky.jl:492\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpu958b4u8.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpu958b4u8.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu958b4u8.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpu958b4u8.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: no method\
    \ matching copy(::String)\n  Closest candidates are:\n    copy(!Matched::LinearAlgebra.Hessenberg{<:Any,\
    \ <:LinearAlgebra.UpperHessenberg}) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/hessenberg.jl:418\n\
    \    copy(!Matched::LinearAlgebra.Hessenberg{<:Any, <:LinearAlgebra.SymTridiagonal})\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/hessenberg.jl:419\n\
    \    copy(!Matched::LinearAlgebra.CholeskyPivoted) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/cholesky.jl:492\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpu958b4u8.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu958b4u8.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    s_reversed = reverse(s)\n    c_reversed\
    \ = reverse(c)\n    for i in 1:length(c)\n        s_reversed = replace(s_reversed,\
    \ c_reversed[i], \"\")\n    end\n    return s_reversed, s_reversed == s\nend\n\
    using Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp25s6opq1.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ no method matching replace(::String, ::Char, ::String)\n  Closest candidates\
    \ are:\n    replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmp25s6opq1.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp25s6opq1.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp25s6opq1.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp25s6opq1.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: no method\
    \ matching replace(::String, ::Char, ::String)\n  Closest candidates are:\n  \
    \  replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmp25s6opq1.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp25s6opq1.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level sc"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp25s6opq1.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    for i in c\n        s = replace(s, i,\
    \ \"\")\n    end\n    for i in s\n        if i != s[end:-1:1]\n            return\
    \ (s,false)\n        end\n    end\n    return (s,true)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") ==\
    \ (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\
    \t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"\
    dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"\
    vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") ==\
    \ (\"\", true))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpt66bjy1v.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\\\
    n  MethodError: no method matching replace(::String, ::Char, ::String)\\n  Closest\
    \ candidates are:\\n    replace(!Matched::Union{Function, Type}, ::Any; count)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\\n    replace(::String,\
    \ !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\\\
    n    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\\\
    n    ...\\n  Stacktrace:\\n   [1] reverse_delete(s::String, c::String)\\n    \
    \ @ Main /tmp/tmpt66bjy1v.jl:13\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpt66bjy1v.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpt66bjy1v.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpt66bjy1v.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\\n  MethodError: no method\
    \ matching replace(::String, ::Char, ::String)\\n  Closest candidates are:\\n\
    \    replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\\\
    n    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\\\
    n    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\\\
    n    ...\\n  Stacktrace:\\n   [1] reverse_delete(s::String, c::String)\\n    \
    \ @ Main /tmp/tmpt66bjy1v.jl:13\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpt66bjy1v.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Tes"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    s_clean = s\n    for ci in c\n       \
    \ s_clean = replace(s_clean, ci, \"\")\n    end\n    s_clean_reverse = reverse(s_clean)\n\
    \    return s_clean, s_clean == s_clean_reverse\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\"\
    , false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_rkztp3m.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ no method matching replace(::String, ::Char, ::String)\n  Closest candidates\
    \ are:\n    replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmp_rkztp3m.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_rkztp3m.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_rkztp3m.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp_rkztp3m.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: no method\
    \ matching replace(::String, ::Char, ::String)\n  Closest candidates are:\n  \
    \  replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmp_rkztp3m.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_rkztp3m.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level sc"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_rkztp3m.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    # remove all the characters in s that\
    \ are equal to any character in c\n    s_new = replace(s, r\"[$c]\")  # [$c] match\
    \ any character in c\n    # check if the result string is palindrome\n    s_new\
    \ == reverse(s_new) ? (s_new, true) : (s_new, false)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") ==\
    \ (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\
    \t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"\
    dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"\
    vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") ==\
    \ (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmps42u9uep.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ no method matching replace(::String, ::Regex)\n  Closest candidates are:\n \
    \   replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmps42u9uep.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps42u9uep.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps42u9uep.jl:21\ntest set:\
    \ Error During Test at /tmp/tmps42u9uep.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: no method\
    \ matching replace(::String, ::Regex)\n  Closest candidates are:\n    replace(!Matched::Union{Function,\
    \ Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmps42u9uep.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps42u9uep.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tm"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps42u9uep.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    for letter in c \n        s = replace(s,\
    \ letter)\n    end\n    return (s, is_palindrome(s))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") ==\
    \ (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\
    \t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"\
    dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"\
    vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") ==\
    \ (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpvbnjh9vv.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ no method matching replace(::String, ::Char)\n  Closest candidates are:\n  \
    \  replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpvbnjh9vv.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvbnjh9vv.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvbnjh9vv.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpvbnjh9vv.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: no method\
    \ matching replace(::String, ::Char)\n  Closest candidates are:\n    replace(!Matched::Union{Function,\
    \ Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpvbnjh9vv.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvbnjh9vv.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvbnjh9vv.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    s1 = (replace(s, c => \"\"))\n    #s1\
    \ = [i for i in s if !(i in c)]\n    return (s1, s1 == reverse(s1))\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5bhgdp25.jl:21\n  Expression: candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false)\n   Evaluated: (\"abcde\", false) == (\"\
    bcd\", false)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5bhgdp25.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5bhgdp25.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp5bhgdp25.jl:23\n  Expression: candidate(\"abcdedcba\", \"\
    ab\") == (\"cdedc\", true)\n   Evaluated: (\"cdedcba\", false) == (\"cdedc\",\
    \ true)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5bhgdp25.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5bhgdp25.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp5bhgdp25.jl:29\n  Expression: candidate(\"mamma\", \"mia\"\
    ) == (\"\", true)\n   Evaluated: (\"mamma\", false) == (\"\", true)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5bhgdp25.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5bhgdp25.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5bhgdp25.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    deleted_string = replace(s, x -> x in\
    \ c ? \"\" : x)\n    return deleted_string, deleted_string == reverse(deleted_string)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmppovszrvq.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ no method matching replace(::String, ::var\"#1#2\"{String})\n  Closest candidates\
    \ are:\n    replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmppovszrvq.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppovszrvq.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppovszrvq.jl:19\ntest set:\
    \ Error During Test at /tmp/tmppovszrvq.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: no method\
    \ matching replace(::String, ::var\"#1#2\"{String})\n  Closest candidates are:\n\
    \    replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmppovszrvq.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppovszrvq.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-le"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppovszrvq.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    filtered = s |> collect |> filter!((x)\
    \ -> !(occursin(x, c))) |> join \n    return filtered, filtered == reverse(filtered)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpcm5n5q7c.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ no method matching filter!(::var\"#1#2\"{String})\n  Closest candidates are:\n\
    \    filter!(::Any, !Matched::AbstractVector) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2525\n\
    \    filter!(::Any, !Matched::IdDict) at /shared/centos7/julia/1.7.3/share/julia/base/iddict.jl:193\n\
    \    filter!(::Any, !Matched::Base.IdSet) at /shared/centos7/julia/1.7.3/share/julia/base/idset.jl:28\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpcm5n5q7c.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcm5n5q7c.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcm5n5q7c.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpcm5n5q7c.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: no method\
    \ matching filter!(::var\"#1#2\"{String})\n  Closest candidates are:\n    filter!(::Any,\
    \ !Matched::AbstractVector) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2525\n\
    \    filter!(::Any, !Matched::IdDict) at /shared/centos7/julia/1.7.3/share/julia/base/iddict.jl:193\n\
    \    filter!(::Any, !Matched::Base.IdSet) at /shared/centos7/julia/1.7.3/share/julia/base/idset.jl:28\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpcm5n5q7c.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcm5n5q7c.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcm5n5q7c.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpcm5n5q7c.jl:22\n  Test threw exception\n  Expression:\
    \ candida"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcm5n5q7c.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    for char in c\n        if char in s\n\
    \            s = replace(s, char => \"\")\n        end\n    end\n    if s == reverse(s)\n\
    \        return s, true\n    else\n        return s, false\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    for i in c\n        delete!(s, i)\n  \
    \  end\n    if s == reverse(s)\n        return (s, true)\n    else\n        return\
    \ (s, false)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpn21hbf2c.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ no method matching delete!(::String, ::Char)\n  Closest candidates are:\n  \
    \  delete!(!Matched::IdDict{K}, ::Any) where K at /shared/centos7/julia/1.7.3/share/julia/base/iddict.jl:130\n\
    \    delete!(!Matched::Base.IdSet, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/idset.jl:23\n\
    \    delete!(!Matched::Dict, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/dict.jl:661\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpn21hbf2c.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpn21hbf2c.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn21hbf2c.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpn21hbf2c.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: no method\
    \ matching delete!(::String, ::Char)\n  Closest candidates are:\n    delete!(!Matched::IdDict{K},\
    \ ::Any) where K at /shared/centos7/julia/1.7.3/share/julia/base/iddict.jl:130\n\
    \    delete!(!Matched::Base.IdSet, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/idset.jl:23\n\
    \    delete!(!Matched::Dict, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/dict.jl:661\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpn21hbf2c.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpn21hbf2c.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn21hbf2c.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpn21hbf2c.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"abcd"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn21hbf2c.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    new_s = String[]\n    string_backward\
    \ = String[]\n    for i in 1:length(s)\n        if !(s[i] in c)\n            push!(new_s,\
    \ s[i])\n        end\n    end\n    for i in 1:length(new_s)\n        push!(string_backward,\
    \ new_s[end-i+1])\n    end\n    is_palindrome = new_s == string_backward\n   \
    \ return join(new_s, \"\"), is_palindrome\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\"\
    , false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2zvrwjnk.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] push!(a::Vector{String}, item::Char)\n     @ Base\
    \ ./array.jl:994\n   [2] reverse_delete(s::String, c::String)\n     @ Main /tmp/tmp2zvrwjnk.jl:16\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp2zvrwjnk.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp2zvrwjnk.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp2zvrwjnk.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: Cannot `convert`\
    \ an object of type Char to an object of type String\n  Closest candidates are:\n\
    \    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] push!(a::Vector{String}, item::Char)\n     @ Base\
    \ ./array.jl:994\n   [2] reverse_delete(s::String, c::String)\n     @ Main /tmp/tmp2zvrwjnk.jl:16\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inl"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2zvrwjnk.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    s_new = \"\"\n    for i in 1:length(s)\n\
    \        if !(s[i] in c)\n            s_new *= s[i]\n        end\n    end\n  \
    \  if is_palindrome(s_new)\n        return (s_new, true)\n    else\n        return\
    \ (s_new, false)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxu4lgffd.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  UndefVarError:\
    \ is_palindrome not defined\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n\
    \     @ Main /tmp/tmpxu4lgffd.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxu4lgffd.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxu4lgffd.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpxu4lgffd.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  UndefVarError: is_palindrome\
    \ not defined\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n  \
    \   @ Main /tmp/tmpxu4lgffd.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxu4lgffd.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxu4lgffd.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpxu4lgffd.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true)\n  UndefVarError: is_palindrome\
    \ not defined\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n  \
    \   @ Main /tmp/tmpxu4lgffd.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxu4lgffd.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxu4lgffd.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpxu4lgffd.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"dwik\", \"w\") == (\"dik\", false)\n  UndefVarError: is_palindrome\
    \ not defined\n  Stacktrace:\n   [1] revers"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxu4lgffd.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    s_new = String(delete!(s, c))\n    return\
    \ (s_new, s_new == reverse(s_new))\nend\n# Testing\nusing Test\n\n@testset begin\n\
    \ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\"\
    , false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqkwejmxr.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ no method matching delete!(::String, ::String)\n  Closest candidates are:\n\
    \    delete!(!Matched::IdDict{K}, ::Any) where K at /shared/centos7/julia/1.7.3/share/julia/base/iddict.jl:130\n\
    \    delete!(!Matched::Base.IdSet, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/idset.jl:23\n\
    \    delete!(!Matched::Dict, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/dict.jl:661\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpqkwejmxr.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqkwejmxr.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqkwejmxr.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpqkwejmxr.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: no method\
    \ matching delete!(::String, ::String)\n  Closest candidates are:\n    delete!(!Matched::IdDict{K},\
    \ ::Any) where K at /shared/centos7/julia/1.7.3/share/julia/base/iddict.jl:130\n\
    \    delete!(!Matched::Base.IdSet, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/idset.jl:23\n\
    \    delete!(!Matched::Dict, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/dict.jl:661\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpqkwejmxr.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqkwejmxr.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqkwejmxr.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpqkwejmxr.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\""
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqkwejmxr.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    new_s = String[]\n    i = 0\n    while\
    \ i < length(s)\n        if !occursin(s[i+1], c)\n            push!(new_s, s[i+1])\n\
    \        end\n        i += 1\n    end\n    new_s = join(new_s)\n    if new_s ==\
    \ reverse(new_s)\n        return (new_s, true)\n    else\n        return (new_s,\
    \ false)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp52_540ry.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] push!(a::Vector{String}, item::Char)\n     @ Base\
    \ ./array.jl:994\n   [2] reverse_delete(s::String, c::String)\n     @ Main /tmp/tmp52_540ry.jl:16\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp52_540ry.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp52_540ry.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp52_540ry.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: Cannot `convert`\
    \ an object of type Char to an object of type String\n  Closest candidates are:\n\
    \    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] push!(a::Vector{String}, item::Char)\n     @ Base\
    \ ./array.jl:994\n   [2] reverse_delete(s::String, c::String)\n     @ Main /tmp/tmp52_540ry.jl:16\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inl"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp52_540ry.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    res = \"\"\n    for i in 1:length(s)\n\
    \        if !(s[i] in c)\n            res *= s[i]\n        end\n    end\n    return\
    \ (res, res == reverse(res))\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    for e in c \n        s = replace(s, e\
    \ => \"\")\n    end\n    return (s,s == reverse(s))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") ==\
    \ (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\
    \t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"\
    dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"\
    vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") ==\
    \ (\"\", true))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    res = String(filter(ch -> !(ch in c),\
    \ s))\n    return res, res == reverse(res)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\"\
    , false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    s = filter(ch -> !(ch in c), s)\n    return\
    \ (s, s == reverse(s))\nend\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n  to_delete = Set(c)\n  s = filter(x -> !(x\
    \ in to_delete), s)\n  res = s == reverse(s)\n  return (s, res)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\",\
    \ \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    #s = replace(s, c => \"\")\n    #s = replace(s,\
    \ c => \"\") \n    # need to figure out how to write the line above without getting\
    \ an error\n    #s = replace(s, c => \"\") # need to figure out how to write the\
    \ line above without getting an error\n    #s = replace(s, c => \"\")\n    return\
    \ s, ispalindrome(s)\nend\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphqqasyha.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  UndefVarError:\
    \ ispalindrome not defined\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n\
    \     @ Main /tmp/tmphqqasyha.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphqqasyha.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphqqasyha.jl:23\ntest set:\
    \ Error During Test at /tmp/tmphqqasyha.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  UndefVarError: ispalindrome\
    \ not defined\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n  \
    \   @ Main /tmp/tmphqqasyha.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphqqasyha.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphqqasyha.jl:23\ntest set:\
    \ Error During Test at /tmp/tmphqqasyha.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true)\n  UndefVarError: ispalindrome\
    \ not defined\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n  \
    \   @ Main /tmp/tmphqqasyha.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphqqasyha.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphqqasyha.jl:23\ntest set:\
    \ Error During Test at /tmp/tmphqqasyha.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"dwik\", \"w\") == (\"dik\", false)\n  UndefVarError: ispalindrome\
    \ not defined\n  Stacktrace:\n   [1] reverse_de"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphqqasyha.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    \n    # your code here\n    \nend\n@testset\
    \ \"Example Tests\" begin\n    @test reverse_delete(\"abcde\", \"ae\") == (\"\
    bcd\", false)\n    @test reverse_delete(\"abcdef\", \"b\") == (\"acdef\", false)\n\
    \    @test reverse_delete(\"abcdedcba\", \"ab\") == (\"cdedc\", true)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @testset not defined\nin expression starting\
    \ at /tmp/tmp2bq01m5a.jl:16\nin expression starting at /tmp/tmp2bq01m5a.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    for i in c\n        s = replace(s, i =>\
    \ \"\")\n    end\n    return s, s == reverse(s)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\"\
    , false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    for i in c\n        s = replace(s, i =>\
    \ \"\")\n    end\n    return s, isequal(s, reverse(s))\nend\n \nusing Test\n\n\
    @testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"\
    ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    for char in c\n        s = replace(s,char=>\"\
    \")\n    end\n    return s, isequal(s,reverse(s))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") ==\
    \ (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\
    \t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"\
    dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"\
    vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") ==\
    \ (\"\", true))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    str = filter(x -> x in c, s)\n    return\
    \ str, str == reverse(str)\nend\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcnzwzynv.jl:20\n  Expression: candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false)\n   Evaluated: (\"ae\", false) == (\"bcd\"\
    , false)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcnzwzynv.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcnzwzynv.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpcnzwzynv.jl:21\n  Expression: candidate(\"abcdef\", \"b\"\
    ) == (\"acdef\", false)\n   Evaluated: (\"b\", true) == (\"acdef\", false)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcnzwzynv.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcnzwzynv.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpcnzwzynv.jl:22\n  Expression: candidate(\"abcdedcba\", \"\
    ab\") == (\"cdedc\", true)\n   Evaluated: (\"abba\", true) == (\"cdedc\", true)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcnzwzynv.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcnzwzynv.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpcnzwzynv.jl:23\n  Expression: candidate(\"dwik\", \"w\") ==\
    \ (\"dik\", false)\n   Evaluated: (\"w\", true) == (\"dik\", false)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcnzwzynv.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcnzwzynv.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpcnzwzynv.jl:24\n  Expression: candidate(\"a\", \"a\") ="
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 9 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcnzwzynv.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    # remove s[i] if s[i] == c[j]\n    # then\
    \ check is s palindrome\n    s_arr = [x for x in s]\n    c_arr = [x for x in c]\n\
    \    for i in s_arr, j in c_arr\n        if i == j\n            deleteat!(s_arr,\
    \ i)\n        end\n    end\n    if s_arr == s_arr[end:-1:1]\n        return (s_arr,\
    \ true)\n    else\n        return (s_arr, false)\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"\
    ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6tml32px.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  ArgumentError:\
    \ unable to check bounds for indices of type Char\n  Stacktrace:\n    [1] checkindex(#unused#::Type{Bool},\
    \ inds::Base.OneTo{Int64}, i::Char)\n      @ Base ./abstractarray.jl:713\n   \
    \ [2] checkbounds\n      @ ./abstractarray.jl:641 [inlined]\n    [3] checkbounds\n\
    \      @ ./abstractarray.jl:656 [inlined]\n    [4] _deleteat!(a::Vector{Char},\
    \ inds::Char, dltd::Base.Nowhere)\n      @ Base ./array.jl:1479\n    [5] _deleteat!(a::Vector{Char},\
    \ inds::Char)\n      @ Base ./array.jl:1475\n    [6] deleteat!(a::Vector{Char},\
    \ inds::Char)\n      @ Base ./array.jl:1468\n    [7] reverse_delete(s::String,\
    \ c::String)\n      @ Main /tmp/tmp6tml32px.jl:18\n    [8] macro expansion\n \
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmp6tml32px.jl:32 [inlined]\n\
    \   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp6tml32px.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp6tml32px.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  ArgumentError: unable\
    \ to check bounds for indices of type Char\n  Stacktrace:\n    [1] checkindex(#unused#::Type{Bool},\
    \ inds::Base.OneTo{Int64}, i::Char)\n      @ Base ./abstractarray.jl:713\n   \
    \ [2] checkbounds\n      @ ./abstractarray.jl:641 [inlined]\n    [3] checkbounds\n\
    \      @ ./abstractarray.jl:656 [inlined]\n    [4] _deleteat!(a::Vector{Char},\
    \ inds::Char, dltd::Base.Nowhere)\n      @ Base ./array.jl:1479\n    [5] _deleteat!(a::Vector{Char},\
    \ inds::Char)\n      @ Base ./array.jl:1475\n    [6] deleteat!(a::Vector{Char},\
    \ inds::Char)\n      @ Base ./array.jl:1468\n    [7] reverse_delete(s::String,\
    \ c::String)\n      @ Main /tmp/tmp6tml32px.jl:18\n    [8] macro expansion\n \
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6tml32px.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    s = replace(s, c, \"\")\n    return (s,\
    \ is_palindrome(s))\nend\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpe9nbv8bn.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ no method matching replace(::String, ::String, ::String)\n  Closest candidates\
    \ are:\n    replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpe9nbv8bn.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpe9nbv8bn.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe9nbv8bn.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpe9nbv8bn.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: no method\
    \ matching replace(::String, ::String, ::String)\n  Closest candidates are:\n\
    \    replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpe9nbv8bn.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpe9nbv8bn.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-leve"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe9nbv8bn.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    c_set = Set(c)\n    s_new = \"\"\n   \
    \ for i in s\n        if i in c_set\n            continue\n        end\n     \
    \   s_new *= i\n    end\n    return s_new, s_new == reverse(s_new)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    s = [x for x in s if x \u2209 c]\n   \
    \ return (s, s == reverse(s))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_46e41ap.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ Cannot `convert` an object of type Vector{Char} to an object of type String\n\
    \  Closest candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] cvt1\n     @ ./essentials.jl:343 [inlined]\n \
    \  [2] ntuple\n     @ ./ntuple.jl:49 [inlined]\n   [3] convert(#unused#::Type{Tuple{String,\
    \ Bool}}, x::Tuple{Vector{Char}, Bool})\n     @ Base ./essentials.jl:344\n   [4]\
    \ reverse_delete(s::String, c::String)\n     @ Main /tmp/tmp_46e41ap.jl:13\n \
    \  [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp_46e41ap.jl:20 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp_46e41ap.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp_46e41ap.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: Cannot `convert`\
    \ an object of type Vector{Char} to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] cvt1\n     @ ./essentials.jl:343 [inlined]\n \
    \  [2] ntuple\n     @ ./ntuple.jl:49 [inlined]\n   [3] c"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_46e41ap.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    s = filter(c -> !in(c, c), s)\n    return\
    \ (s, s == reverse(s))\nend\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpne6vmoa3.jl:20\n  Expression: candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false)\n   Evaluated: (\"\", true) == (\"bcd\",\
    \ false)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpne6vmoa3.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpne6vmoa3.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpne6vmoa3.jl:21\n  Expression: candidate(\"abcdef\", \"b\"\
    ) == (\"acdef\", false)\n   Evaluated: (\"\", true) == (\"acdef\", false)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpne6vmoa3.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpne6vmoa3.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpne6vmoa3.jl:22\n  Expression: candidate(\"abcdedcba\", \"\
    ab\") == (\"cdedc\", true)\n   Evaluated: (\"\", true) == (\"cdedc\", true)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpne6vmoa3.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpne6vmoa3.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpne6vmoa3.jl:23\n  Expression: candidate(\"dwik\", \"w\") ==\
    \ (\"dik\", false)\n   Evaluated: (\"\", true) == (\"dik\", false)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpne6vmoa3.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpne6vmoa3.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpne6vmoa3.jl:25\n  Expression: candidate(\"abcdedcba\", \"\"\
    ) == "
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpne6vmoa3.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    \n    for i in c\n        s = replace(s,i\
    \ => \"\")\n    end\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfn7epilv.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfn7epilv.jl:1\n\
    in expression starting at /tmp/tmpfn7epilv.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    s = replace(s, c, \"\")\n    is_palindrome\
    \ = s == reverse(s)\n    return (s, is_palindrome)\nend\nreverse_delete(\"abcbac\"\
    ,\"a\")\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: MethodError: no method matching replace(::String, ::String,\
    \ ::String)\nClosest candidates are:\n  replace(!Matched::Union{Function, Type},\
    \ ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n \
    \ replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \  replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \  ...\nStacktrace:\n [1] reverse_delete(s::String, c::String)\n   @ Main /tmp/tmpwr8667jx.jl:12\n\
    \ [2] top-level scope\n   @ /tmp/tmpwr8667jx.jl:16\nin expression starting at\
    \ /tmp/tmpwr8667jx.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    t=Set(c)\n    a=String[]\n    for i in\
    \ s\n        if i in t\n            continue\n        end\n        push!(a,i)\n\
    \    end\n    if a==reverse(a)\n        return join(a, \"\"), true\n    else\n\
    \        return join(a, \"\"), false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\"\
    , false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpodaocqkt.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] push!(a::Vector{String}, item::Char)\n     @ Base\
    \ ./array.jl:994\n   [2] reverse_delete(s::String, c::String)\n     @ Main /tmp/tmpodaocqkt.jl:18\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpodaocqkt.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpodaocqkt.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpodaocqkt.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: Cannot `convert`\
    \ an object of type Char to an object of type String\n  Closest candidates are:\n\
    \    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] push!(a::Vector{String}, item::Char)\n     @ Base\
    \ ./array.jl:994\n   [2] reverse_delete(s::String, c::String)\n     @ Main /tmp/tmpodaocqkt.jl:18\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inl"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpodaocqkt.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    s = string(filter(a->!(a in c),s))\n \
    \   return s, s == reverse(s)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    s = replace(s, r\"[$c]\", \"\") # Remove\
    \ characters in s that are equal to any character in c\n    return s, s == reverse(s)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwi_h5fu7.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ no method matching replace(::String, ::Regex, ::String)\n  Closest candidates\
    \ are:\n    replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpwi_h5fu7.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwi_h5fu7.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwi_h5fu7.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpwi_h5fu7.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: no method\
    \ matching replace(::String, ::Regex, ::String)\n  Closest candidates are:\n \
    \   replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpwi_h5fu7.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwi_h5fu7.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwi_h5fu7.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    delete!(s, c)\n    (s, s == reverse(s))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpl8orqixh.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ no method matching delete!(::String, ::String)\n  Closest candidates are:\n\
    \    delete!(!Matched::IdDict{K}, ::Any) where K at /shared/centos7/julia/1.7.3/share/julia/base/iddict.jl:130\n\
    \    delete!(!Matched::Base.IdSet, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/idset.jl:23\n\
    \    delete!(!Matched::Dict, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/dict.jl:661\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpl8orqixh.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl8orqixh.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl8orqixh.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpl8orqixh.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: no method\
    \ matching delete!(::String, ::String)\n  Closest candidates are:\n    delete!(!Matched::IdDict{K},\
    \ ::Any) where K at /shared/centos7/julia/1.7.3/share/julia/base/iddict.jl:130\n\
    \    delete!(!Matched::Base.IdSet, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/idset.jl:23\n\
    \    delete!(!Matched::Dict, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/dict.jl:661\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpl8orqixh.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl8orqixh.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl8orqixh.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpl8orqixh.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\""
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl8orqixh.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    return (join(filter(i->!(i in c), split(s,\
    \ \"\"))), join(filter(i->!(i in c), split(s, \"\"))) == join(reverse(filter(i->!(i\
    \ in c), split(s, \"\")))))\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpq78pg2sk.jl:19\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  use occursin(x,\
    \ y) for string containment\n  Stacktrace:\n   [1] error(s::String)\n     @ Base\
    \ ./error.jl:33\n   [2] in(#unused#::SubString{String}, #unused#::String)\n  \
    \   @ Base ./strings/search.jl:638\n   [3] (::var\"#1#4\"{String})(i::SubString{String})\n\
    \     @ Main /tmp/tmpq78pg2sk.jl:12\n   [4] filter(f::var\"#1#4\"{String}, a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [5] reverse_delete(s::String, c::String)\n  \
    \   @ Main /tmp/tmpq78pg2sk.jl:12\n   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpq78pg2sk.jl:19 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpq78pg2sk.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpq78pg2sk.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n\
    \   [2] in(#unused#::SubString{String}, #unused#::String)\n     @ Base ./strings/search.jl:638\n\
    \   [3] (::var\"#1#4\"{String})(i::SubString{String})\n     @ Main /tmp/tmpq78pg2sk.jl:12\n\
    \   [4] filter(f::var\"#1#4\"{String}, a::Vector{SubString{String}})\n     @ Base\
    \ ./array.jl:2484\n   [5] reverse_delete(s::String, c::String)\n     @ Main /tmp/tmpq78pg2sk.jl:12\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpq78pg2sk.jl:20 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpq78pg2sk.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpq78pg2sk.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true)\n  use occursin(x, y)\
    \ for string c"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq78pg2sk.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    s_f = \"\"\n    for i in s\n        if\
    \ !(i in c)\n            s_f *= i\n        end\n    end\n    return (s_f, s_f\
    \ == reverse(s_f))\nend\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    \n    for i in 1:length(c)\n        \n\
    \        s = replace(s,c[i],\"\")\n    end\n    return s, s == reverse(s)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmplgp5pf3a.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ no method matching replace(::String, ::Char, ::String)\n  Closest candidates\
    \ are:\n    replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmplgp5pf3a.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplgp5pf3a.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplgp5pf3a.jl:23\ntest set:\
    \ Error During Test at /tmp/tmplgp5pf3a.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: no method\
    \ matching replace(::String, ::Char, ::String)\n  Closest candidates are:\n  \
    \  replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmplgp5pf3a.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplgp5pf3a.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level sc"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplgp5pf3a.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    s = String(filter(x -> !(x in c), s))\n\
    \    return (s, s == reverse(s))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    b = String[]\n    flag = true\n    for\
    \ si in s\n        if si in c\n            continue\n        end\n        push!(b,\
    \ si)\n    end\n    if b == reverse(b)\n        flag = true\n    else\n      \
    \  flag = false\n    end\n    return join(b), flag\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") ==\
    \ (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\
    \t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"\
    dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"\
    vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") ==\
    \ (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpiwkce3fm.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] push!(a::Vector{String}, item::Char)\n     @ Base\
    \ ./array.jl:994\n   [2] reverse_delete(s::String, c::String)\n     @ Main /tmp/tmpiwkce3fm.jl:18\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpiwkce3fm.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpiwkce3fm.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpiwkce3fm.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: Cannot `convert`\
    \ an object of type Char to an object of type String\n  Closest candidates are:\n\
    \    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] push!(a::Vector{String}, item::Char)\n     @ Base\
    \ ./array.jl:994\n   [2] reverse_delete(s::String, c::String)\n     @ Main /tmp/tmpiwkce3fm.jl:18\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inl"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiwkce3fm.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    result = String(filter(x -> x \u2209 c,\
    \ s))\n    return (result, result == reverse(result))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") ==\
    \ (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\
    \t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"\
    dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"\
    vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") ==\
    \ (\"\", true))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    new_s = delete_char(s, c)\n    return\
    \ new_s, reverse_check(new_s)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpox9548a8.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  UndefVarError:\
    \ delete_char not defined\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n\
    \     @ Main /tmp/tmpox9548a8.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpox9548a8.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpox9548a8.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpox9548a8.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  UndefVarError: delete_char\
    \ not defined\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n  \
    \   @ Main /tmp/tmpox9548a8.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpox9548a8.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpox9548a8.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpox9548a8.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true)\n  UndefVarError: delete_char\
    \ not defined\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n  \
    \   @ Main /tmp/tmpox9548a8.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpox9548a8.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpox9548a8.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpox9548a8.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"dwik\", \"w\") == (\"dik\", false)\n  UndefVarError: delete_char\
    \ not defined\n  Stacktrace:\n   [1] reverse_delete"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpox9548a8.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    r = filter(x -> !occursin(x, c), s)\n\
    \    s == reverse(r) ? (r, true) : (r, false)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\"\
    , false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfpuq5m9x.jl:22\n  Expression: candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true)\n   Evaluated: (\"cdedc\", false) ==\
    \ (\"cdedc\", true)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfpuq5m9x.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfpuq5m9x.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpfpuq5m9x.jl:24\n  Expression: candidate(\"a\", \"a\") == (\"\
    \", true)\n   Evaluated: (\"\", false) == (\"\", true)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfpuq5m9x.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfpuq5m9x.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpfpuq5m9x.jl:27\n  Expression: candidate(\"vabba\", \"v\")\
    \ == (\"abba\", true)\n   Evaluated: (\"abba\", false) == (\"abba\", true)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfpuq5m9x.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfpuq5m9x.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpfpuq5m9x.jl:28\n  Expression: candidate(\"mamma\", \"mia\"\
    ) == (\"\", true)\n   Evaluated: (\"\", false) == (\"\", true)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfpuq5m9x.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfpuq5m9x.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     4      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfpuq5m9x.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    for i in c\n        s = replace(s, i =>\
    \ \"\")\n    end\n    return s, isequal(s, reverse(s))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") ==\
    \ (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\
    \t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"\
    dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"\
    vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") ==\
    \ (\"\", true))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    # replace characters in s that appear\
    \ in c with empty string\n    s = replace(s,c,\"\")\n    # reverse string\n  \
    \  s = reverse(s)\n    # cast to tuple\n    return (s, s==reverse(s))\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpay29tqdg.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ no method matching replace(::String, ::String, ::String)\n  Closest candidates\
    \ are:\n    replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpay29tqdg.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpay29tqdg.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpay29tqdg.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpay29tqdg.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: no method\
    \ matching replace(::String, ::String, ::String)\n  Closest candidates are:\n\
    \    replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpay29tqdg.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpay29tqdg.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-leve"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpay29tqdg.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    res = copy(s)\n    for x in collect(c)\n\
    \        res = replace(res, r\"$x\", \"\")\n    end\n    return res, reverse(res)\
    \ == res\nend\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t\
    @test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpge1wekd8.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ no method matching copy(::String)\n  Closest candidates are:\n    copy(!Matched::LinearAlgebra.Hessenberg{<:Any,\
    \ <:LinearAlgebra.UpperHessenberg}) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/hessenberg.jl:418\n\
    \    copy(!Matched::LinearAlgebra.Hessenberg{<:Any, <:LinearAlgebra.SymTridiagonal})\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/hessenberg.jl:419\n\
    \    copy(!Matched::LinearAlgebra.CholeskyPivoted) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/cholesky.jl:492\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpge1wekd8.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpge1wekd8.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpge1wekd8.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpge1wekd8.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: no method\
    \ matching copy(::String)\n  Closest candidates are:\n    copy(!Matched::LinearAlgebra.Hessenberg{<:Any,\
    \ <:LinearAlgebra.UpperHessenberg}) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/hessenberg.jl:418\n\
    \    copy(!Matched::LinearAlgebra.Hessenberg{<:Any, <:LinearAlgebra.SymTridiagonal})\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/hessenberg.jl:419\n\
    \    copy(!Matched::LinearAlgebra.CholeskyPivoted) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/cholesky.jl:492\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpge1wekd8.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpge1wekd8.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    for (i,_) in enumerate(c)\n        s =\
    \ replace(s,c[i],\"\")\n    end\n    return (s, isequal(s,reverse(s)))\nend\n\
    using Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpn33fl_js.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ no method matching replace(::String, ::Char, ::String)\n  Closest candidates\
    \ are:\n    replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpn33fl_js.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpn33fl_js.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn33fl_js.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpn33fl_js.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: no method\
    \ matching replace(::String, ::Char, ::String)\n  Closest candidates are:\n  \
    \  replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpn33fl_js.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpn33fl_js.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level sc"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn33fl_js.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    s = replace(s,c)\n    return (s, ispalindrome(s))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwy47bvvm.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ no method matching replace(::String, ::String)\n  Closest candidates are:\n\
    \    replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpwy47bvvm.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwy47bvvm.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwy47bvvm.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpwy47bvvm.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: no method\
    \ matching replace(::String, ::String)\n  Closest candidates are:\n    replace(!Matched::Union{Function,\
    \ Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpwy47bvvm.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwy47bvvm.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwy47bvvm.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    diff = setdiff(s, c)\n    return (diff,\
    \ diff == reverse(diff))\nend\n@testset \"reverse_delete\" begin\n    @test reverse_delete(\"\
    abcde\", \"ae\") == (\"bcd\", false)\n    @test reverse_delete(\"abcdef\", \"\
    b\") == (\"acdef\", false)\n    @test reverse_delete(\"abcdedcba\", \"ab\") ==\
    \ (\"cdedc\", true)\nend\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @testset not defined\nin expression starting\
    \ at /tmp/tmpqfibrzv6.jl:15\nin expression starting at /tmp/tmpqfibrzv6.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    s = replace(s, r\"[\"*c*\"]\", \"\")\n\
    \    return s, s == reverse(s)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: PCRE compilation error: missing terminating ] for character\
    \ class at offset 1\nStacktrace:\n  [1] error(s::String)\n    @ Base ./error.jl:33\n\
    \  [2] compile(pattern::String, options::UInt32)\n    @ Base.PCRE ./pcre.jl:155\n\
    \  [3] compile(regex::Regex)\n    @ Base ./regex.jl:82\n  [4] Regex(pattern::String,\
    \ compile_options::UInt32, match_options::UInt32)\n    @ Base ./regex.jl:47\n\
    \  [5] Regex(pattern::String)\n    @ Base ./regex.jl:70\n  [6] var\"@r_str\"(__source__::LineNumberNode,\
    \ __module__::Module, pattern::Any, flags::Vararg{Any})\n    @ Base ./regex.jl:119\n\
    \  [7] #macroexpand#51\n    @ ./expr.jl:115 [inlined]\n  [8] macroexpand\n   \
    \ @ ./expr.jl:114 [inlined]\n  [9] docm(source::LineNumberNode, mod::Module, meta::Any,\
    \ ex::Any, define::Bool) (repeats 2 times)\n    @ Base.Docs ./docs/Docs.jl:537\n\
    \ [10] var\"@doc\"(::LineNumberNode, ::Module, ::String, ::Vararg{Any})\n    @\
    \ Core ./boot.jl:517\nin expression starting at /tmp/tmp195bbvxg.jl:1\nin expression\
    \ starting at /tmp/tmp195bbvxg.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    s = replace(s, \",\", \"\")\n    s = replace(s,\
    \ \" \", \"\")\n    c = replace(c, \",\", \"\")\n    c = replace(c, \" \", \"\"\
    )\n    deleted_string = [e for e in s if e not in c]\n    if deleted_string ==\
    \ deleted_string[end:-1:1]\n        return join(deleted_string, \"\"), true\n\
    \    else\n        return join(deleted_string, \"\"), false\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmp2zl08f5e.jl:16\nin expression starting at /tmp/tmp2zl08f5e.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    remove!(s, ismatch.(c))\n    s == reverse(s)\
    \ ? return s, true : return s, false\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: colon expected in \"?\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvzxfou7b.jl:14\nin expression starting at\
    \ /tmp/tmpvzxfou7b.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    res = \"\"\n    for i in s\n        if\
    \ !(i in c)\n            push!(res, i)\n        end\n    end\n    return res,\
    \ ispalindrome(res)\nend\nreverse_delete(\"abcde\", \"ae\")\nusing Test\n\n@testset\
    \ begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") ==\
    \ (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\
    \t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"\
    dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"\
    vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") ==\
    \ (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: MethodError: no method matching push!(::String, ::Char)\n\
    Closest candidates are:\n  push!(::Any, ::Any, !Matched::Any) at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:2970\n\
    \  push!(::Any, ::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:2971\n\
    \  push!(!Matched::Base.InvasiveLinkedListSynchronized{T}, ::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/task.jl:605\n\
    \  ...\nStacktrace:\n [1] reverse_delete(s::String, c::String)\n   @ Main /tmp/tmp0jxltaqe.jl:15\n\
    \ [2] top-level scope\n   @ /tmp/tmp0jxltaqe.jl:20\nin expression starting at\
    \ /tmp/tmp0jxltaqe.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    new_s = s\n    for i in c\n        new_s\
    \ = replace(new_s, i => \"\")\n    end\n    if new_s == reverse(new_s)\n     \
    \   return new_s, true\n    else\n        return new_s, false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    s = s[s .!= c] #delete all chars from\
    \ s that match any from c\n    return (s, ispalindrome(s))\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"\
    ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjviyy288.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  UndefVarError:\
    \ ispalindrome not defined\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n\
    \     @ Main /tmp/tmpjviyy288.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjviyy288.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjviyy288.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpjviyy288.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  UndefVarError: ispalindrome\
    \ not defined\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n  \
    \   @ Main /tmp/tmpjviyy288.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjviyy288.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjviyy288.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpjviyy288.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true)\n  UndefVarError: ispalindrome\
    \ not defined\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n  \
    \   @ Main /tmp/tmpjviyy288.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjviyy288.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjviyy288.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpjviyy288.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"dwik\", \"w\") == (\"dik\", false)\n  UndefVarError: ispalindrome\
    \ not defined\n  Stacktrace:\n   [1] reverse_de"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjviyy288.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    new_string = \"\"\n    for i in s \n \
    \       if i \u2209 c \n            new_string *= i\n        end\n    end\n  \
    \  if ispalindrome(new_string)\n        return (new_string, true)\n    else\n\
    \        return (new_string, false)\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\"\
    , false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpten9s84n.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  UndefVarError:\
    \ ispalindrome not defined\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n\
    \     @ Main /tmp/tmpten9s84n.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpten9s84n.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpten9s84n.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpten9s84n.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  UndefVarError: ispalindrome\
    \ not defined\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n  \
    \   @ Main /tmp/tmpten9s84n.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpten9s84n.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpten9s84n.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpten9s84n.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true)\n  UndefVarError: ispalindrome\
    \ not defined\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n  \
    \   @ Main /tmp/tmpten9s84n.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpten9s84n.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpten9s84n.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpten9s84n.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"dwik\", \"w\") == (\"dik\", false)\n  UndefVarError: ispalindrome\
    \ not defined\n  Stacktrace:\n   [1] reverse_de"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpten9s84n.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    new_s = \"\"\n    for i in s\n       \
    \ if !(i in c)\n            new_s *= i\n        end\n    end\n    if (new_s ==\
    \ reverse(new_s))\n        return (new_s, true)\n    else\n        return (new_s,\
    \ false)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    s = replace(s,r\"[$c]\",r\"\")\n    s_reverse\
    \ = String(reverse(s))\n    return (s, s == s_reverse)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") ==\
    \ (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\
    \t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"\
    dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"\
    vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") ==\
    \ (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpa170a5c_.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  MethodError:\
    \ no method matching replace(::String, ::Regex, ::Regex)\n  Closest candidates\
    \ are:\n    replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpa170a5c_.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa170a5c_.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa170a5c_.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpa170a5c_.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n  MethodError: no method\
    \ matching replace(::String, ::Regex, ::Regex)\n  Closest candidates are:\n  \
    \  replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] reverse_delete(s::String, c::String)\n     @ Main\
    \ /tmp/tmpa170a5c_.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa170a5c_.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level sc"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa170a5c_.jl:18\n"
  exit_code: 1
  status: SyntaxError
