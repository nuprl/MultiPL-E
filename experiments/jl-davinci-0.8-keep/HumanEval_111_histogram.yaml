name: HumanEval_111_histogram
language: jl
prompt: "\"\"\"Given a string representing a space separated lowercase letters, return\
  \ a dictionary\n    of the letter with the most repetition and containing the corresponding\
  \ count.\n    If several letters have the same occurrence, return all of them.\n\
  \    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a\
  \ b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n\
  \    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n\
  function histogram(test::String)::Dict{String, Int64}> \n"
tests: "using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
  a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") ==\
  \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\"\
  \ => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r\
  \ t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b\
  \ b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1,\
  \ \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
  a\") == Dict(\"a\" => 1))\nend\n"
completions: ["    hist = Dict{String, Int64}()\n    for letter in split(test)\n \
    \       hist[letter] = get(hist, letter, 0) + 1\n    end\n    return hist\nend",
  "    hist = Dict()\n    for letter in test\n        if haskey(hist, letter)\n  \
    \          hist[letter] += 1\n        else\n            hist[letter] = 1\n   \
    \     end\n    end\n    return hist\nend", "    hist = Dict()\n    for letter\
    \ in split(test)\n        if haskey(hist, letter)\n            hist[letter] +=\
    \ 1\n        else\n            hist[letter] = 1\n        end\n    end\n    return\
    \ hist\nend", "    d1=Dict() \n    for i in split(test) \n        d1[i]=get(d1,i,0)+1\
    \ \n    end \n    return d1 \nend \nhistogram(\"b b b b a\")", "    letter_count\
    \ = Dict{String, Int64}()\n    highest_count = 0", "    \n \n    \n    dict =\
    \ Dict{String, Int64}()\n    # test2 = char.(lowercase(test))\n    test2 = split(lowercase(test))\n\
    \    count = 0\n    if length(test2) == 0\n        dict\n        return dict\n\
    \    end\n    # test2 = split(test2)\n    # test2 = strip(test2)\n    println(test2)\n\
    \    for i in 1:length(test2)\n        for j in 1:length(test2)\n            if\
    \ test2[i] == test2[j]\n                count += 1\n            end\n        end\n\
    \        dict[test2[i]] = count\n        count = 0\n    end\n    # return maximum(values(dict))\n\
    \    return dict\nend\n# histogram('a b c')\nhistogram('b b b b a')", "    return\
    \ Dict([(c, count(test, c)) for c in unique(test)])\nend", "    if length(test)\
    \ == 0\n        return Dict{String, Int64}()\n    end\n    letters::Array{String,\
    \ 1} = split(test)\n    d::Dict{String, Int64} = Dict{String, Int64}()\n    for\
    \ l in letters\n        if haskey(d, l)\n            d[l] += 1\n        else\n\
    \            d[l] = 1\n        end\n    end\n    return d\nend\n ", "    # Create\
    \ dictionary to store counts of letters\n    letter_counts = Dict{String, Int64}()",
  "    output = Dict{String, Int64}()\n    for c in test\n        output[c] = get(output,\
    \ c, 0) + 1\n    end\n    output\nend", "    my_dict = Dict{String, Int64}()\n\
    \    for letter in test\n        if (haskey(my_dict, letter))\n            my_dict[letter]\
    \ += 1\n        else\n            my_dict[letter] = 1\n        end\n    end\n\
    \    max_value = maximum(values(my_dict))\n    to_return = Dict{String, Int64}()\n\
    \    for (key, value) in my_dict\n        if value == max_value\n            to_return[key]\
    \ = value\n        end\n    end\n    return to_return\nend", "    # init dictionary\n\
    \    h = Dict{String, Int64}()\n    # get each lowercase letter and count occurrences\n\
    \    for letter in test\n        if letter != ' '\n            h[string(letter)]\
    \ = get(h, string(letter), 0) + 1\n        end\n    end\n    # get keys from the\
    \ dictionary\n    get_keys = collect(keys(h))\n    # get highest count of the\
    \ dictionary\n    get_highest_count = maximum(values(h))\n    # init dictionary\
    \ of the letters that have the same highest occurrences\n    highest_values =\
    \ Dict{String, Int64}()\n    # add the letters that have the same highest occurrences\n\
    \    for key in get_keys\n        if h[key] == get_highest_count\n           \
    \ highest_values[key] = get_highest_count\n        end\n    end\n    # return\
    \ the dictionary with letters that have the same highest occurrences\n    return\
    \ highest_values\nend", '    test::Dict{String, Int64} = Dict()', "    return\
    \ Dict(a->1, b->1, c->1)\nend", "    hist_dict = Dict{String, Int64}()\n    for\
    \ letter in test\n        if hist_dict[letter] == nothing\n            hist_dict[letter]\
    \ = 1\n        else\n            hist_dict[letter] += 1\n        end\n    end\n\
    \    return hist_dict\nend", "    dict = Dict{String, Int64}()\n    for c in test\n\
    \        if haskey(dict, c)\n            dict[c] += 1\n        else\n        \
    \    dict[c] = 1\n        end\n    end\n    dict\nend", "    # initialize the\
    \ output dictionary\n    hist = Dict{String, Int64}()\n    # split the string\
    \ in list of words\n    words = split(test)\n    # iterate over all words\n  \
    \  for w in words\n        # if the word is not already in the dictionary add\
    \ it and initialize the count\n        if haskey(hist, w) == false\n         \
    \   hist[w] = 0\n        end\n        # increase the count of the word\n     \
    \   hist[w] += 1\n    end\n    # sort the dictionary by value\n    return sort(hist,\
    \ by=x->x[2], rev=true)\nend", "    d = Dict()\n    for c in split(test, \" \"\
    )\n        d[c] = get(d, c, 0) + 1\n    end\n    d\nend", "    hist = Dict{String,\
    \ Int64}()\n    for c in test.replace(\" \", \"\")\n        hist[c] = get(hist,\
    \ c, 0) + 1\n    end\n    return hist\nend", "    d = Dict()\n    for c in test\n\
    \        if haskey(d, c)\n            d[c] += 1\n        else\n            d[c]\
    \ = 1\n        end\n    end\n    return d\nend", "    let counter::Dict{String,\
    \ Int64} = Dict(c => count(test, c) for c in Set(test))\n    return counter\n\
    end", "    t = split(test)\n    letter = []\n    count = []\n    for i in t\n\
    \        if i in letter\n            count[findfirst(x->x==i, letter)] += 1\n\
    \        else\n            push!(letter, i)\n            push!(count, 1)\n   \
    \     end\n    end\n    return Dict(letter[i] => count[i] for i in 1:length(letter))\n\
    end", "    hist = Dict{String, Int64}()\n    for letter in split(test)\n     \
    \   if haskey(hist, letter)\n            hist[letter] += 1\n        else\n   \
    \         hist[letter] = 1\n        end\n    end\n    values = values(hist)\n\
    \    maxval = maximum(values)\n    maxdict = Dict{String, Int64}()\n    for (key,\
    \ value) in hist\n        if value == maxval\n            maxdict[key] = value\n\
    \        end\n    end\n    return maxdict\nend", "    if length(test) == 0\n \
    \       return Dict{String, Int64}()\n    end\n    if length(test) == 1\n    \
    \    return Dict(test => 1)\n    end\n    test = replace(test, \" \", \"\")\n\
    \    histo = Dict{String, Int64}()\n    for i in 1:length(test)\n        if haskey(histo,\
    \ test[i])\n            histo[test[i]] += 1\n        else\n            histo[test[i]]\
    \ = 1\n        end\n    end\n    return histo\nend", "    \n    count = Dict()\n\
    \    for char in test\n        if haskey(count,char)\n            count[char]\
    \ += 1\n        else\n            count[char] = 1\n        end\n    end\n    count\n\
    end", "    countDict = Dict{String, Int64}()\n    for word in split(test)\n  \
    \      if haskey(countDict, word)\n            countDict[word] += 1\n        else\n\
    \            countDict[word] = 1\n        end\n    end\n    maxCount = maximum(values(countDict))\n\
    \    d = Dict{String, Int64}()\n    for (key, value) in countDict\n        if\
    \ value == maxCount\n            d[key] = value\n        end\n    end\n    return\
    \ d\nend", "    if test == \"\"\n        return(Dict())\n    end\n    hist = Dict{String,\
    \ Int64}()\n    for c in split(test)\n        hist[c] = get(hist, c, 0) + 1\n\
    \    end\n    max_count = maximum(hist.values)\n    return(hist[[k for k in hist\
    \ if hist[k] == max_count]])\nend", "    hist = Dict{String, Int64}()\n    for\
    \ ch in split(test)\n        try\n            hist[ch] += 1\n        catch\n \
    \           hist[ch] = 1\n        end\n    end\n    return hist\nend\nhistogram(\"\
    a b c\")\nhistogram(\"a b b a\")\nhistogram(\"a b c a b\")\nhistogram(\"b b b\
    \ b a\")\nhistogram(\"\")", "    testDict = Dict{String, Int64}()\n    max_value\
    \ = 0\n    max_key = \"\"\n    for s in test\n        if !haskey(testDict, s)\n\
    \            testDict[s] = 1\n        else\n            testDict[s] += 1\n   \
    \     end\n        if testDict[s] > max_value\n            max_value = testDict[s]\n\
    \            max_key = s\n        end\n    end\n    for s in test\n        if\
    \ testDict[s] == max_value\n            max_key = s\n        end\n    end\n  \
    \  return testDict\nend", "    # your code goes here\nend", "    dict = Dict()\n\
    \    dict = count(split(test))\n    dict = sort(dict, by=last)\n    dict = filter(dict)\n\
    \    dict = maximum(dict)\n    return dict\nend", "    counts = Dict{String, Int64}()\n\
    \    for word in test\n        if word in keys(counts)\n            counts[word]\
    \ += 1\n        else\n            counts[word] = 1\n        end\n    end\n   \
    \ return counts\nend\nhistogram(\"a b c\")\nhistogram(\"a b b a\")\nhistogram(\"\
    a b c a b\")\nhistogram(\"b b b b a\")\nhistogram(\"\")", " \n    histogram =\
    \ Dict()\n    letters = split(test, \" \")\n    for letter in letters\n      \
    \  histogram[letter] = get(histogram, letter, 0) + 1\n    end\n    return histogram\n\
    end", "    \n    letters = Dict{String, Int64}()\n    for l in test\n        if\
    \ haskey(letters, l)\n            letters[l] += 1\n        else\n            letters[l]\
    \ = 1\n        end\n    end\n    return letters\nend\nhistogram(\"a b c\")\nhistogram(\"\
    a b b a\")\nhistogram(\"a b c a b\")\nhistogram(\"b b b b a\")\nhistogram(\"\"\
    )\n ", "    counts = Dict()\n    for c in test\n        if haskey(counts, c)\n\
    \            counts[c] += 1\n        else\n            counts[c] = 1\n       \
    \ end\n    end\n    return counts\nend\n ", "    histogram = Dict()\n    max_count\
    \ = 0\n    for letter in test\n        if !haskey(histogram, letter)\n       \
    \     histogram[letter] = 1\n        else\n            histogram[letter] += 1\n\
    \        end\n        if histogram[letter] > max_count\n            max_count\
    \ = histogram[letter]\n        end\n    end\n    return filter(x -> x[2] == max_count,\
    \ histogram)\nend", "    str_test = split(test, \" \")\n    hist = Dict{String,\
    \ Int64}()\n    for i in str_test\n        if(haskey(hist, i))\n            hist[i]\
    \ += 1\n        else\n            hist[i] = 1\n        end\n    end\n    return\
    \ hist\nend", "    hist = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        hist[letter] = get(hist, letter, 0) + 1\n    end\n    return hist\nend",
  "    \n    words = split(test)\n    counts = Dict()\n    for word in words\n   \
    \     counts[word] = get(counts, word, 0) + 1\n    end\n    return counts\nend",
  "    return Dict(unique(split(test)))\nend", "    # create a counter map of the\
    \ test string\n    hist = Dict(x => count(x == c for c in test) for x in test)\n\
    \    # get the maximum occurrence\n    maxcount = maximum(collect(values(hist)))\n\
    \    # extract the corresponding keys \n    maxhist = filter(hist) do kv\n   \
    \     kv[2] == maxcount\n    end\n    # return the dict\n    return maxhist\n\
    end\n# test\ntesthisto = histogram(\"a b c\")\ntesthisto2 = histogram(\"a b b\
    \ a\")\ntesthisto3 = histogram(\"a b c a b\")\ntesthisto4 = histogram(\"b b b\
    \ b a\")\ntesthisto5 = histogram(\"\")\nprintln(testhisto)\nprintln(testhisto2)\n\
    println(testhisto3)\nprintln(testhisto4)\nprintln(testhisto5)", "    dict = Dict{String,\
    \ Int64}()\n    word = split(test)\n    for s in word\n        if haskey(dict,\
    \ s)\n            dict[s] += 1\n        else\n            dict[s] = 1\n      \
    \  end\n    end\n    return dict\nend\n ", "    histogram = []\n    for i in test\n\
    \        push!(histogram, Dict(i=>count(test, i)))\n    end\n    test = Dict(histogram...)\n\
    \    return test\nend", "\nend\n ", "    test_hist = Dict{String, Int64}()\n \
    \   for key in split(test)\n        test_hist[key] = get(test_hist, key, 0) +\
    \ 1\n    end\n    return test_hist\nend\n# test cases", "    hist = Dict()\n \
    \   for (idx, letter) in enumerate(test)\n        if letter in keys(hist)\n  \
    \          hist[letter] += 1\n        else\n            hist[letter] = 1\n   \
    \     end\n    end\n    return hist\nend", "    #define the dictionary to be returned\n\
    \    results = Dict{String, Int64}()\n    #split the string into characters\n\
    \    words = split(test)\n    #loop through the characters\n    for word in words\n\
    \        if !haskey(results, word)\n            results[word] = 1\n        else\n\
    \            results[word] += 1\n        end\n    end\n    return results\nend",
  "    \n    println(\"sou um teste\")\n    \n    return Dict(\"a\" => 1, \"b\" =>\
    \ 2)\nend", "    new_dict = Dict{String, Int64}()\n    for letter in split(test)\
    \ \n        if !haskey(new_dict, letter)\n            new_dict[letter] = 1\n \
    \       else\n            new_dict[letter] += 1\n        end\n    end\n    new_dict\n\
    end", "    letter_counts = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for i = 1:length(letters)\n        letter = letters[i]\n        if letter\
    \ in keys(letter_counts)\n            letter_counts[letter] += 1\n        else\n\
    \            letter_counts[letter] = 1\n        end\n    end\n    return letter_counts\n\
    end", "    hist = Dict{String, Int64}()\n    for letter in split(test)\n     \
    \   hist[letter] = get(hist, letter, 0) + 1\n    end\n    return hist\nend", " \
    \   words = split(test)\n    letters = countmap(words)\n    return letters\nend",
  "    result::Dict{String, Int64} = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        result[letter] = get(result, letter, 0) + 1\n    end\n    return result\n\
    end", "    test_set = split(test, \" \") \n    hist = Dict{String, Int64}()\n\
    \    hist_max = 0\n    hist_max_all = []\n    keys = []\n    for i in test_set\n\
    \        hist[i] = get(hist, i, 0) + 1\n        if hist[i] > hist_max\n      \
    \      hist_max = hist[i]\n            hist_max_all = [i]\n        elseif hist[i]\
    \ == hist_max\n            append!(hist_max_all, i)\n        end\n    end\n  \
    \  keys = []\n    for i in hist_max_all\n        push!(keys, i)\n    end\n   \
    \ return hist\nend", "    \n    letters = Dict{String, Int64}()\n    for str in\
    \ split(test)\n        if !haskey(letters, str)\n            letters[str] = 1\n\
    \        else\n            letters[str] += 1\n        end\n    end\n    return\
    \ letters\nend", "    str = split(test, ' ')\n    d = Dict()\n    for i in str\n\
    \        d[i] = get(d, i, 0) + 1\n    end\n    (d, maximum(values(d)))\nend",
  "    my_dict = Dict()\n    for word in split(test, ' ')\n        if word in keys(my_dict)\n\
    \            my_dict[word] += 1\n        else\n            my_dict[word] = 1\n\
    \        end\n    end\n    max = findmax(values(my_dict))[1]\n    filtered_dict\
    \ = filter(x -> x[2] == max, my_dict)\n    return filtered_dict\nend", "    myDict\
    \ = Dict{String, Int64}()\n    for word in split(test)\n        if haskey(myDict,\
    \ word)\n            myDict[word] += 1\n        else\n            myDict[word]\
    \ = 1\n        end\n    end\n    return myDict\nend", "    letters = countmap(test)\n\
    \    maximum = maximum(collect(values(letters)))\n    return filter(x -> letters[x]\
    \ == maximum, keys(letters))\nend", "    hist = Dict{String, Int64}()\n    for\
    \ letter in split(test)\n        try\n            hist[letter] += 1\n        catch\
    \ e\n            hist[letter] = 1\n        end\n    end\n    return hist\nend",
  "    #Returns a dictionary containing the number of times a character appears in\
    \ the string\n    #If the string is empty, returns empty dictionary", "    counts\
    \ = Dict()\n    for c in test\n        if haskey(counts, c)\n            counts[c]\
    \ += 1\n        else\n            counts[c] = 1\n        end\n    end\n    return\
    \ counts\nend", "    # Your code here\nend\n@assert histogram('a b c') == Dict('a'\
    \ => 1, 'b' => 1, 'c' => 1)\n@assert histogram('a b b a') == Dict('a' => 2, 'b'\
    \ => 2)\n@assert histogram('a b c a b') == Dict('a' => 2, 'b' => 2)\n@assert histogram('b\
    \ b b b a') == Dict('b' => 4)\n@assert histogram('') == Dict{String, Int64}()\n\
    \ \n ", "    valDict = Dict{String, Int64}()\n    for char in test\n        if\
    \ char in keys(valDict)\n            valDict[char] += 1\n        else\n      \
    \      valDict[char] = 1\n        end\n    end\n    valDict\nend", "    let \n\
    \        result::Dict{String, Int64} = Dict()\n        for c in test\n       \
    \     result[c] = get(result, c, 0) + 1\n        end\n    return result\nend",
  "    d = Dict{String, Int64}()\n    for w in split(test)\n        if w in keys(d)\n\
    \            d[w] += 1\n        else\n            d[w] = 1\n        end\n    end\n\
    \    d\nend\ntest = histogram(\"a b c\")\ntest[\"a\"]", "    letters = split(test)\n\
    \    counts = Int64[]\n    for l in letters\n        push!(counts, count(x ->\
    \ x == l, letters))\n    end\n    return Dict(zip(letters, counts))\nend", " \
    \   let\n        result::Dict{String, Int64} = Dict()\n        split_string =\
    \ split(test, \" \")\n        for i in split_string\n            if result[i]\
    \ == nothing\n                result[i] = 1\n            else\n              \
    \  result[i] += 1\n            end\n        end\n        return result\n    end\n\
    end\nhistogram(\"b b b b a\")", "    histogramDict = Dict()\n    for letter in\
    \ test \n        if !haskey(histogramDict, letter)\n            histogramDict[letter]\
    \ = 1\n        else\n            histogramDict[letter] += 1\n        end\n   \
    \ end\n    return histogramDict\nend", "  \n    letters_dict = Dict{String, Int64}()\n\
    \    \n    for letter in split(test)>\n        if haskey(letters_dict, letter)>\n\
    \            letters_dict[letter] += 1>\n        else>\n            letters_dict[letter]\
    \ = 1>\n        end>\n    end>\n    \n    biggest_letter = \"\">\n    biggest_count\
    \ = 0>\n    \n    for key in keys(letters_dict)>\n        if letters_dict[key]\
    \ > biggest_count>\n            biggest_count = letters_dict[key]>\n         \
    \   biggest_letter = key>\n        end>\n    end>\n    \n    results = Dict{String,\
    \ Int64}()>\n    \n    for key in keys(letters_dict)>\n        if letters_dict[key]\
    \ == biggest_count>\n            results[key] = biggest_count>\n        end>\n\
    \    end>\n    \n    return results>\n  \nend>", "    w = letters(lowercase(test))\n\
    \    wsort = sort(w)\n    i = 2\n    count = 1\n    str = \"\"\n    d = Dict{String,\
    \ Int64}()\n    while i <= length(wsort)\n        if wsort[i] == wsort[i-1]\n\
    \            count += 1\n        elseif count > 1\n            str = string(wsort[i-1])\n\
    \            push!(d, str => count)\n            count = 1\n        end\n    \
    \    i += 1\n    end\n    return d\nend", "    return {c=>count(test,c) for c\
    \ in test}\nend", "    dict = Dict{String, Int64}()\n    for c in test\n     \
    \   dict[c] = get(dict, c, 0) + 1\n    end\n    return dict\nend", "    \n   \
    \ #Check if empty string, return empty dict\n    if test == \"\"\n        return\
    \ Dict{String, Int64}()\n    end\n    \n    #Seperate letters into array\n   \
    \ text = split(test)\n    \n    #Create a dict to store the output\n    dict =\
    \ Dict{String, Int64}()\n    \n    #Define our value for evaluating the maximum\n\
    \    max_count = 0\n    \n    #Loop through text\n    for i in text\n        if\
    \ !haskey(dict, i)\n            dict[i] = 1\n        else\n            dict[i]\
    \ += 1\n        end\n        \n        #Check if i key is at max value.\n    \
    \    if dict[i] > max_count\n            max_count = dict[i]\n        end\n  \
    \  end\n    \n    #Iterate over dict, removing all keys not equal to max_count\n\
    \    for (k, v) in dict\n        if v != max_count\n            delete!(dict,\
    \ k)\n        end\n    end\n    \n    return dict\n    \nend", "    dct = Dict{String,\
    \ Int64}()\n    for letter in test\n        dct[letter] = get(dct, letter, 0)\
    \ + 1\n    end\n    return dct\nend", "    #TODO\n    return Dict{String, Int64}()\n\
    end", "    words=split(test)\n    out=Dict{String, Int64}()\n    for w in words\n\
    \        if haskey(out,w)\n            out[w]+=1\n        else\n            out[w]=1\n\
    \        end\n    end\n    return out\nend", "    newDict = Dict()\n    for c\
    \ in test\n        if in(c, keys(newDict))\n            newDict[c] += 1\n    \
    \    else\n            newDict[c] = 1\n        end\n    end\n    return newDict\n\
    end", "    counts = Dict{String, Int64}()\n    for word in split(test)\n     \
    \   if haskey(counts, word)\n            counts[word] += 1\n        else\n   \
    \         counts[word] = 1\n        end\n    end\n    counts\nend", "  count =\
    \ Dict{String, Int64}()\n  for word in split(test, \" \")\n    if haskey(count,\
    \ word)\n      count[word] += 1\n    else\n      count[word] = 1\n    end\n  end\n\
    \  return count\nend", "    max_count = 0\n    letter_max_count = \"\"\n    histogram\
    \ = Dict{String, Int64}()\n    for letter in test\n        if haskey(histogram,\
    \ letter) == false\n            histogram[letter] = 1\n        else\n        \
    \    histogram[letter] += 1\n        end\n        if histogram[letter] > max_count\n\
    \            max_count = histogram[letter]\n            letter_max_count = letter\n\
    \        end\n    end\n    max_count_letters = filter(x -> x == max_count, values(histogram))\n\
    \    max_count_keys = collect(keys(histogram))[filter(x -> x == max_count, values(histogram))]\n\
    \    histogram_max_count = Dict{String, Int64}()\n    for i in 1:length(max_count_letters)\n\
    \        histogram_max_count[max_count_keys[i]] = max_count_letters[i]\n    end\n\
    \    return histogram_max_count\nend", "    counts = Dict{String, Int64}()\n \
    \   for letter in split(test)\n        if haskey(counts, letter)\n           \
    \ counts[letter] += 1\n        else\n            counts[letter] = 1\n        end\n\
    \    end\n    return counts\nend", "    @assert typeof(test) == String\n    count\
    \ = Dict{String, Int64}()\n    for l in split(test)\n        if haskey(count,\
    \ l)\n            count[l] += 1\n        else\n            count[l] = 1\n    \
    \    end\n    end\n    return count\nend", "    # YOUR CODE HERE\nend\n ", " \
    \   max_count = 0\n    counts = Dict{String, Int64}()\n    for ch in test\n  \
    \      if haskey(counts, ch)\n            counts[ch] += 1\n        else\n    \
    \        counts[ch] = 1\n        end\n        if counts[ch] > max_count\n    \
    \        max_count = counts[ch]\n        end\n    end\n    return filter(kv ->\
    \ kv[2] == max_count, counts)\nend", "    dict = Dict{String, Int64}()\n    for\
    \ c in test\n        if haskey(dict, c)\n            dict[c] += 1\n        else\n\
    \            dict[c] = 1\n        end\n    end\n    dict\nend", "  return Dict(test)\n\
    end", "    d = Dict{String, Int64}()\n    for i in 1:length(test)\n        if\
    \ haskey(d, test[i])\n            d[test[i]] += 1\n        else\n            d[test[i]]\
    \ = 1\n        end\n    end\n    return d\nend", "    #<type definition of dictionary>\n\
    \    res = Dict{String, Int64}() #<string-key value pairs are to be stored>\n\
    \    testlist = split(test) #<splits into a list>\n    for i in testlist\n   \
    \     res[i] == get(res, i, 0) + 1 #<stores into dictionary>\n    end\n    return\
    \ res\nend", "    return Dict(tuple(i => count(x -> x == i, split(test)))...)\n\
    end", "    # first we get the count of all letters using the count() function\n\
    \    counts = Dict{String, Int64}()\n    for letter in split(test)\n        counts[letter]\
    \ = get(counts, letter, 0) + 1\n    end\n    # so we have a dictionary like this\n\
    \    # counts = Dict('a' => 2, 'b' => 2, 'c' => 1)\n    # we get the values of\
    \ the count like this\n    values = [v for (k, v) in counts]\n    # we use set\
    \ to remove duplicates, so we only have the distinct values\n    uniques = set(values)\n\
    \    # we reverse the order so we know the biggest value first\n    uniques =\
    \ reverse(sort(uniques))\n    # we create a new dictionary to contain the letters\
    \ with the highest count\n    result = Dict{String, Int64}()\n    for unique in\
    \ uniques\n        # here we add only the letters with the highest count to the\
    \ result\n        for (k, v) in counts\n            if v == unique\n         \
    \       result[k] = v\n            end\n        end\n        # and we check if\
    \ the result has any elements\n        if length(result) > 0\n            # if\
    \ so, we return the result, as we are guaranteed to have the highest count\n \
    \           return result\n        end\n    end\nend", "    if test == \"\"\n\
    \        return Dict{String, Int64}()\n    end\n    hist = Dict{String, Int64}()\n\
    \    for item in split(test)\n        if haskey(hist, item)\n            hist[item]\
    \ += 1\n        else\n            hist[item] = 1\n        end\n    end\n    maximum\
    \ = maximum(values(hist))\n    temp = Dict{String, Int64}()\n    for key in keys(hist)\n\
    \        if hist[key] == maximum\n            temp[key] = maximum\n        end\n\
    \    end\n    return temp\nend", "    #Dict{Char, Int64}>\n    hist = Dict{String,\
    \ Int64}() #Dict{Char, Int64}()\n    for c in test\n        hist[c] = get(hist,\
    \ c, 0) + 1\n    end\n    return hist\nend", "    letter_array = unique(split(test,\
    \ \" \"))\n    letter_count = Dict{String, Int64}()\n    for letter in letter_array\n\
    \        letter_count[letter] = count(test, letter)\n    end\n    max_count =\
    \ maximum(values(letter_count))\n    max_letters = filter(x -> letter_count[x]\
    \ == max_count, keys(letter_count))\n    max_dictionary = Dict{String, Int64}()\n\
    \    for letter in max_letters\n        max_dictionary[letter] = max_count\n \
    \   end\n    return max_dictionary\nend", "    histogram = [0 for _ in test]\n\
    \    for letter in test\n        histogram[letter] += 1\n    end\n    return histogram\n\
    end", "    # your code here\n    return Dict()\nend\n    ", "    test = split(test)\n\
    \    hist = Dict{String, Int64}()\n    for word in test\n        if haskey(hist,\
    \ word)\n            hist[word] += 1\n        else\n            hist[word] = 1\n\
    \        end\n    end\n    return hist\nend", "    \n    # Initialize a dictionary\
    \ to store the letter-count pairs\n    hist = Dict()\n    \n    # Iterate through\
    \ the characters in the string and store the letter-count pairs\n    for i in\
    \ test\n        if (hist[i] != 0)\n            hist[i] += 1\n        else\n  \
    \          hist[i] = 1\n        end\n    end\n    \n    # Return the dictionary\
    \ hist\n    return hist\nend", "    \n    split_string = split(test)\n    histogram\
    \ = Dict{String, Int64}()\n    \n    for i in split_string\n        \n       \
    \ if !haskey(histogram, i)\n            histogram[i] = 1\n        else\n     \
    \       histogram[i] += 1\n        end\n    end\n    \n    max_occurence = maximum(values(histogram))\n\
    \    max_occurence_characters = Dict{String, Int64}()\n    \n    for key in keys(histogram)\n\
    \        if histogram[key] == max_occurence\n            max_occurence_characters[key]\
    \ = max_occurence\n        end\n    end\n    \n    return max_occurence_characters\n\
    end", "    # Dictionary for lowercase letter to appear\n    hist_dict = Dict{String,\
    \ Int64}()", "    h = {}\n    for i in split(test, \" \")\n        if i in keys(h)\n\
    \            h[i] += 1\n        else\n            h[i] = 1\n        end\n    end\n\
    \    h\nend", "    # First, split the string in a list of strings\n    # Then,\
    \ convert the string to lowercase (lower) and sort the list \n    words = split(lowercase(test))\
    \ \n    sort!(words)\n    # We create a dictionary for the words\n    d = Dict{String,\
    \ Int64}()\n    # We check if the list is empty\n    if isempty(words)\n     \
    \   return d\n    else\n        # If not, we set a counter for the occurences\n\
    \        counter = 1\n        i = 2\n        # For each word in the list, we check\
    \ if the same word is after it\n        while i <= length(words)\n           \
    \ if words[i] == words[i-1]\n                counter += 1\n            end\n \
    \           # If not, we add the word and its occurence to the dictionary\n  \
    \          if words[i] != words[i-1] || i == length(words)\n                d[words[i-1]]\
    \ = counter\n                counter = 1\n            end\n            i += 1\n\
    \        end\n    end\n    # And then we return the dictionary\n    return d\n\
    end", "    # your code goes here\n    dic = Dict{String, Int64}()\n    j = 1\n\
    \    n = length(test)\n    i = 1\n    while i <= n\n        c = 1\n        while\
    \ j <= n\n            if test[i] == test[j]\n                c = c + 1\n     \
    \       end\n            j = j + 1\n        end\n        dic[test[i]] = c\n  \
    \      i = i + 1\n        j = i\n    end\n    return dic\nend", "    hist = Dict{String,\
    \ Int64}()\n    for i in test\n        hist[i] = get(hist, i, 0) + 1\n    end\n\
    \    return hist\nend", "    #Each character of the string represents one letter,\
    \ and thus is separated by a space. \n    #Let's split the string by spaces to\
    \ create a list of characters.\n    test = split(test)\n    #create a dictionary\
    \ with a character as a key and its count as a value\n    #the length of the dictionary\
    \ should be equal to the number of unique characters\n    result = Dict{String,\
    \ Int64}()\n    for i in test\n        if i in keys(result)\n            result[i]\
    \ += 1\n        else\n            result[i] = 1\n        end\n    end\n    #find\
    \ the maximum count in the dictionary\n    max_value = maximum(values(result))\n\
    \    #create a dictionary with the maximum count as a key and a list of the corresponding\
    \ letters as a value\n    #(in case of several letters having the same count)\n\
    \    new_result = Dict{Int64, Array{String, 1}}()\n    for i in keys(result)\n\
    \        if result[i] in keys(new_result)\n            push!(new_result[result[i]],\
    \ i)\n        else\n            new_result[result[i]] = [i]\n        end\n   \
    \ end\n    #create the final result - a dictionary with the maximum count as a\
    \ key and the corresponding letters in a string as a value\n    new_result = string(new_result[max_value])\n\
    \    final_result = Dict{String, Int64}()\n    final_result[new_result] = max_value\n\
    \    #return the final result\n    return final_result\nend", "    letters = Dict()\n\
    \    for letter in test\n        if letter != ' '\n            letters[letter]\
    \ = get(letters, letter, 0) + 1\n        end\n    end\n    return letters\nend",
  "    str=split(test) #split the string in to a array\n    d=Dict{String, Int64}()\
    \ # set up a dictionary\n    for item in str # go through the array and count\
    \ the number of the same letters\n        if haskey(d, item)\n            d[item]+=1\n\
    \        else\n            d[item]=1\n        end\n    end\n    max=0 # find the\
    \ max value of the dictionary\n    for item in values(d)\n        if item>max\n\
    \            max=item\n        end\n    end\n    new=Dict{String, Int64}() #set\
    \ up a new dictionary\n    for item in keys(d) # insert the letter with the most\
    \ repetition to the new dictionary\n        if d[item]==max\n            new[item]=max\n\
    \        end\n    end\n    return new # return new dictionary\nend\n ", "    hist\
    \ = Dict{String, Int64}()\n    for letter in split(test)\n        hist[letter]\
    \ = get(hist, letter, 0) + 1\n    end\n    return hist\nend", "    d = Dict{String,\
    \ Int64}()\n    for token in split(test)\n        if haskey(d, token)\n      \
    \      d[token] += 1\n        else\n            d[token] = 1\n        end\n  \
    \  end\n    return d\nend", "    jstr= split(test)\n    hist = Dict()\n    for\
    \ i in jstr\n        if haskey(hist, i)\n            hist[i] += 1\n        else\n\
    \            hist[i] = 1\n        end\n    end\n    return hist\nend", "   \n\
    \    dict = Dict{String, Int64}();", "    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    return\nend", "    result = Dict{String,\
    \ Int64}()\n    for letter in split(test)\n        if !(letter in keys(result))\n\
    \            result[letter] = 1\n        else\n            result[letter] += 1\n\
    \        end\n    end\n    return result\nend", "    hist = Dict()\n    for c\
    \ in test\n        if haskey(hist, c)\n            hist[c] += 1\n        else\n\
    \            hist[c] = 1\n        end\n    end\n    return hist\nend", "  h =\
    \ Dict{String, Int64}()\n  for c in test\n    if !haskey(h, c)\n      h[c] = 1\n\
    \    else\n      h[c] += 1\n    end\n  end\n  return h\nend", "    dict = Dict()\n\
    \    for letter in split(test)\n        if !haskey(dict, letter)\n           \
    \ dict[letter] = 1\n        else\n            dict[letter] += 1\n        end\n\
    \    end\n    dict\nend", "  \n    counts = Dict{String, Int64}()\n    \n    for\
    \ c in test\n        key = string(c)\n        counts[key] = get(counts, key, 0)\
    \ + 1\n    end\n    \n    vals = sort(collect(values(counts)), rev=true)\n   \
    \ max_val = vals[1]\n    \n    max_counts = Dict{String, Int64}()\n    for key\
    \ in keys(counts)\n        if counts[key] == max_val\n            max_counts[key]\
    \ = max_val\n        end\n    end\n    \n    return max_counts\nend", "    test\
    \ = #sort function\n    histo = # a dictionary\n    max_val = 0\n    max_keys\
    \ = []\n    for elem in test\n        histo[elem] = #add corresponding value\n\
    \        if histo[elem] > max_val\n            max_val = histo[elem]\n       \
    \     max_keys = []\n            max_keys.append(elem)\n        elseif histo[elem]\
    \ == max_val\n            max_keys.append(elem)\n        end\n    end\n    max_histo\
    \ = #new dictionary\n    for key in max_keys\n        max_histo[key] = max_val\n\
    \    end\n    return max_histo\nend\n```", "    counts = Dict()\n    for letter\
    \ in test\n        if letter in keys(counts)\n            counts[letter] += 1\n\
    \        else\n            counts[letter] = 1\n        end\n    end\n    return\
    \ counts\nend\ntest_string = \"hello my name is bob\"\nhistogram(test_string)\n\
    \"\"\"Given a dictionary of the letter with the most repetition and containing\
    \ the corresponding count,\n    return a string representing the letters with\
    \ the most repetition and the number of occurrences.\n    If several letters have\
    \ the same occurrence, return all of them.\n    \n    Example:\n    histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a')\
    \ == {'b': 4}\n    histogram('') == {}", "    hist = Dict{String, Int64}()\n \
    \   for c in test\n        hist[c] = get(hist, c, 0) + 1\n    end\n    return\
    \ hist\nend", "    d = Dict()\n    for s in split(test)\n        d[s] = get(d,\
    \ s, 0) + 1\n    end\n    d\nend", "    mydictionary = Dict{String, Int64}()\n\
    \    items = split(test, \" \")\n    for item in items\n        if mydictionary[item]\
    \ == nothing\n            mydictionary[item] = 1\n        else\n            mydictionary[item]\
    \ += 1\n        end\n    end\n    return mydictionary\nend", "    return Dict(string(c)\
    \ => count(test, string(c)) for c in test)\nend", "    count_letters = Dict{String,\
    \ Int64}()\n    for (letter, _) in test\n        if letter != ' '\n          \
    \  count_letters[letter] = get(count_letters, letter, 0) + 1\n        end\n  \
    \  end\n    return count_letters\nend", "    # Create a dictionary of the letters\
    \ and the counts\n    # Create a dictionary of the letters and the counts\n  \
    \  counter = Dict{String, Int64}()\n    for letter in test\n        if haskey(counter,\
    \ letter)\n            counter[letter] += 1\n        else\n            counter[letter]\
    \ = 1\n        end\n    end\n    return counter\nend", "    letter_counts = Dict()\n\
    \    for letter in test\n        if haskey(letter_counts, letter) == false\n \
    \           letter_counts[letter] = 1\n        else\n            letter_counts[letter]\
    \ += 1\n        end\n    end\n    return letter_counts\nend", "    dicto = Dict{String,\
    \ Int64}()\n    for i in test\n        if haskey(dicto, i)\n            dicto[i]\
    \ += 1\n        else\n            dicto[i] = 1\n        end\n    end\n    dicto\n\
    end", "    histogram = Dict()\n    for element in split(test)\n        if haskey(histogram,\
    \ element)\n            histogram[element] += 1\n        else\n            histogram[element]\
    \ = 1\n        end\n    end\n    histogram\nend", "    dict = Dict{String, Int64}()\n\
    \    for word in split(test)\n        if haskey(dict, word) == false\n       \
    \     dict[word] = 1\n        else\n            dict[word] += 1\n        end\n\
    \    end\n    dict\nend", "    # Your code goes here\n    end\nend", "    \"\"\
    \"Returns a dictionary with the most repeated keys and their corresponding counts.\n\
    \    \n    Input:\n    :param test: A string\n    \n    Output:\n    :return:\
    \ dictionary\n    \"\"\"\n    dict1=Dict()\n    test1=split(test)\n    for i in\
    \ test1\n        if haskey(dict1,i)\n            dict1[i]=dict1[i]+1\n       \
    \ else\n            dict1[i]=1\n        end\n    end\n    dict2=Dict()\n    for\
    \ key in keys(dict1)\n        if haskey(dict2,dict1[key])\n            dict2[dict1[key]]=dict2[dict1[key]]*string(key)\n\
    \        else\n            dict2[dict1[key]]=string(key)\n        end\n    end\n\
    \    dict3=Dict()\n    for i in keys(dict2)\n        for j in split(dict2[i])\n\
    \            dict3[j]=i\n        end\n    end\n    return dict3\nend", "    #\
    \ YOUR CODE HERE\nend", "    hist = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        hist[letter] = get(hist, letter, 0) + 1\n    end\n    vals = values(hist)\n\
    \    maximum = maximum(vals)\n    output = Dict{String, Int64}()\n    for (k,\
    \ v) in hist\n        if v == maximum\n            output[k] = v\n        end\n\
    \    end\n    return output\nend", "    letters = Dict{String, Int64}()\n    for\
    \ c in test\n        letters[c] = get(letters, c, 0) + 1\n    end\n    letters\n\
    end", "    histogram = Dict{String, Int64}()\n    for ch in test\n        if haskey(histogram,\
    \ ch)\n            histogram[ch] += 1\n        else\n            histogram[ch]\
    \ = 1\n        end\n    end\n    return histogram\nend", "    letters = Dict{String,\
    \ Int64}()\n    for l in split(test)\n        if haskey(letters, l) \n       \
    \     letters[l] += 1\n        else\n            letters[l] = 1\n        end\n\
    \    end\n    return letters\nend", "    h = Dict{String, Int64}()\n    for c\
    \ in split(test)\n        if haskey(h, c)\n            h[c] += 1\n        else\n\
    \            h[c] = 1\n        end\n    end\n    maxval = maximum(values(h))\n\
    \    maxkeys = [k for (k, v) in h if v == maxval]\n    return Dict(zip(maxkeys,\
    \ repeat(maxval)))\nend", "    histogram = Dict()\n    max_repetition = 0\n  \
    \  for letter in split(test)\n        if letter in keys(histogram)\n         \
    \   histogram[letter] += 1\n        else\n            histogram[letter] = 1\n\
    \        end\n        if histogram[letter] >= max_repetition\n            max_repetition\
    \ = histogram[letter]\n        end\n    end\n    for (key, value) in histogram\n\
    \        if value != max_repetition\n            delete!(histogram, key)\n   \
    \     end\n    end\n    return histogram\nend\nend\nhistogram(\"a b c\")\nhistogram(\"\
    a b b a\")\nhistogram(\"a b c a b\")\nhistogram(\"b b b b a\")\nhistogram(\"\"\
    )", "    if length(test) < 1\n        return Dict{String, Int64}()\n    end\n\
    \    # split string by spaces\n    splitted = split(test, \" \")\n    hist = Dict{String,\
    \ Int64}()\n    # get count of each letter\n    for letter in splitted\n     \
    \   if !haskey(hist, letter)\n            hist[letter] = 1\n        else\n   \
    \         hist[letter] += 1\n        end\n    end\n    return hist\nend", "  \
    \  histo = Dict{String, Int64}()\n    for char in test\n        if !haskey(histo,\
    \ char)\n            histo[char] = 1\n        else\n            histo[char] +=\
    \ 1\n        end\n    end\n    max = maximum(values(histo))\n    for key in keys(histo)\n\
    \        if histo[key] != max\n            delete!(histo, key)\n        end\n\
    \    end\n    return histo\nend", "   lst = split(test)\n   chars = Dict{String,\
    \ Int64}()\n   for c in lst\n       if c in keys(chars)\n           chars[c] +=\
    \ 1\n       else\n           chars[c] = 1\n       end\n   end\n   return chars\n\
    end", "    # Test for empty string\n    if test == \"\" \n        return Dict()\n\
    \    end\n    \n    # Split string into array of chars\n    out = Dict()\n   \
    \ for c in split(test)\n        # Initialize if not already there\n        out[c]\
    \ = get(out, c, 0) + 1\n    end\n    \n    # Find the maximum count\n    max =\
    \ 0\n    for (k, v) in out\n        if v > max\n            max = v\n        end\n\
    \    end\n    \n    # Build dict from values that equal max\n    out = Dict()\n\
    \    for (k, v) in out\n        if v == max\n            out[k] = v\n        end\n\
    \    end\n    \n    return out\nend", "    histogram(test::String)::Dict{String,\
    \ Int64}\n    word_dict = Dict()\n    for letter in test\n        if letter !=\
    \ \" \"\n            word_dict[letter] = get(word_dict, letter, 0) + 1\n     \
    \   end\n    end\n    max_value = get(word_dict, \"a\", 0)\n    for key in keys(word_dict)\n\
    \        max_value = max(word_dict[key], max_value)\n    end\n    max_dict = Dict{String,\
    \ Int64}()\n    for key in keys(word_dict)\n        if word_dict[key] == max_value\n\
    \            max_dict[key] = max_value\n        end\n    end\n    return max_dict\n\
    end", "    \"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}", "    if test == \"\"\n        return Dict{String, Int64}()\n    end\n\
    \    res = Dict{String, Int64}()\n    for s in split(test)\n        res[s] = 0\n\
    \    end\n    for s in split(test)\n        res[s] += 1\n    end\n    return res\n\
    end", "    hist = Dict()\n    for letter in split(test)\n        if letter in\
    \ keys(hist)\n            hist[letter] += 1\n        else\n            hist[letter]\
    \ = 1\n        end\n    end\n    return hist\nend", "   \n    hist_dict = Dict()\n\
    \    test_list = split(test)\n    for item in test_list\n        if haskey(hist_dict,\
    \ item)\n            hist_dict[item] += 1\n        else\n            hist_dict[item]\
    \ = 1\n        end\n    end\n    return hist_dict\nend", "    dic = Dict{String,\
    \ Int64}()\n    for i in test\n        if !haskey(dic, i)\n            dic[i]\
    \ = 1\n        else\n            dic[i] += 1\n        end\n    end\n    dic\n\
    end", "   hist = Dict{String, Int64}()\n   for c in test\n       hist[c] = get(hist,\
    \ c, 0) + 1\n   end\n   return hist\nend", "    hist = Dict{String, Int64}()\n\
    \    for i in split(test)\n        if i in keys(hist)\n            hist[i] +=\
    \ 1\n        else\n            hist[i] = 1\n        end\n    end\n    return hist\n\
    end", "    d = Dict{String, Int64}()\n    for c in test\n        d[c] = get(d,\
    \ c, 0) + 1\n    end\n    return d\nend", "    d::Dict{String, Int64} = Dict()\n\
    \    for letter in split(test)\n        d[letter] = get(d, letter, 0) + 1\n  \
    \  end\n    return d\nend\nhistogram(\"a b c\")\nhistogram(\"a b b a\")\nhistogram(\"\
    a b c a b\")\nhistogram(\"b b b b a\")\nhistogram(\"\")", "    histogram_dict\
    \ = Dict()\n    for letter in test\n        if letter != \" \"\n            if\
    \ !haskey(histogram_dict, letter)\n                histogram_dict[letter] = 1\n\
    \            else\n                histogram_dict[letter] += 1\n            end\n\
    \        end\n    end\n    return histogram_dict\nend", "    test = split(test)\n\
    \    n_elements = length(test)\n    dict_test = Dict{String, Int64}()\n    for\
    \ i in test\n        dict_test[i] = get(dict_test, i, 0) + 1\n    end\n    dict_test\
    \ = filter(x -> x[2] == maximum(values(dict_test)), dict_test)\n    return dict_test\n\
    end\nhistogram('a b c')\nhistogram('a b b a')\nhistogram('a b c a b')\nhistogram('b\
    \ b b b a')\nhistogram('')", "    if test == \"\"\n        return Dict{String,\
    \ Int64}()\n    end\n    histogram = Dict{String, Int64}()\n    for letter in\
    \ test\n        if letter == ' '\n            continue\n        end\n        if\
    \ haskey(histogram, letter)\n            histogram[letter] += 1\n        else\n\
    \            histogram[letter] = 1\n        end\n    end\n    histogram\nend",
  "    let\n        words = countmap(lowercase(split(test, r\"\\s+\")))\n        histogram(words)\
    \ = sort(collect(words), by=x->x[2], rev=true)\n    end\n    histogram(words)\n\
    end", "    #break up the string into a Vector of String\n    strArr = split(test)\n\
    \    #initialize a dictionary with the keys being letters and values being zeros\n\
    \    char_counts = Dict(string(i) => 0 for i in 'a':'z')\n    #Update values in\
    \ the dictionary by looping through the string of lowercase letters\n    for c\
    \ in strArr\n        char_counts[c] += 1\n    end\n    return char_counts\nend",
  "    dict = Dict()\n    for char in split(test)\n        if char in keys(dict)\n\
    \            dict[char] += 1\n        else\n            dict[char] = 1\n     \
    \   end\n    end\n    max = 0\n    for (k, v) in dict\n        if max < v\n  \
    \          max = v\n        end\n    end\n    out = Dict()\n    for (k, v) in\
    \ dict\n        if v == max\n            out[k] = v\n        end\n    end\n  \
    \  return out\nend", "    \"\"\"\n        Code here.\n    \"\"\"\n    return\n\
    end", "    # We need a hash table to do this\n    h = OrderedDict{String, Int64}()\n\
    \    # Splitting the string on the space character\n    words = split(test, \"\
    \ \")\n    # Function to insert into the hash table\n    # if the value exists,\
    \ we increment it, otherwise, we add it with a value of 1\n    function insert(s::String)\n\
    \        if haskey(h, s)\n            h[s] += 1\n        else\n            h[s]\
    \ = 1\n        end\n    end\n    # Then we loop through the dictionary\n    for\
    \ word in words\n        insert(word)\n    end\n    # We now need to find the\
    \ highest value\n    max = 0\n    for (key, value) in h\n        if max < value\n\
    \            max = value\n        end\n    end\n    # We can now construct our\
    \ result\n    result = OrderedDict{String, Int64}()\n    for (key, value) in h\n\
    \        if value == max\n            result[key] = value\n        end\n    end\n\
    \    return result\nend\nprintln(histogram(\"a b c\"))\nprintln(histogram(\"a\
    \ b b a\"))\nprintln(histogram(\"a b c a b\"))\nprintln(histogram(\"b b b b a\"\
    ))\nprintln(histogram(\"\"))", "    # use the lower case letters for keys for\
    \ the histogram\n    letter_count = Dict{String, Int64}()\n    for letter in test\n\
    \        get!(letter_count, letter, 0) # if key is found, return its value\n \
    \       letter_count[letter] += 1\n    end\n    return letter_count\nend", " \
    \   mydict = {}\n    for c in split(test, ' ')\n        if c in keys(mydict)\n\
    \            mydict[c] += 1\n        else\n            mydict[c] = 1\n       \
    \ end\n    end\n    return mydict\nend", "    hist = Dict()\n    for char in test\n\
    \        if haskey(hist, char)\n            hist[char] += 1\n        else\n  \
    \          hist[char] = 1\n        end\n    end\n    return hist\nend", "    \
    \    \n    v = test;\n    c = countmap(split(v));\n    b = values(c);\n    d =\
    \ max(b);\n    e = [];\n    for (i,j) in c\n        if j == d\n            push!(e,i)\n\
    \        end\n    end\n        \n    g = (e => d);\n    println(g)\n    return\
    \ g\n    \n    \nend", "    # your code here\n    pass\nend", "    counts = Dict{String,\
    \ Int64}()\n    for i in split(test)\n        if !haskey(counts, i)\n        \
    \    counts[i] = 1\n        else\n            counts[i] += 1\n        end\n  \
    \  end\n    return counts\nend", "        \n        #initialize a dictionary with\
    \ no entries\n        hist = Dict{String, Int64}()\n        \n        #split the\
    \ string into an array of characters\n        split_test = test[1:end]\n     \
    \   split_test = split(split_test, \" \")\n        \n        #for each element\
    \ in the array, increment the value in the dictionary\n        for i = 1:length(split_test)\n\
    \            element = split_test[i]\n            get(hist, element, 0)\n    \
    \        hist[element] += 1\n        end\n        \n        return hist\n    end\n\
    end", "\n# Solution", "    emptyDict = Dict{String, Int64}()\n    for char in\
    \ test\n        emptyDict[char] = get(emptyDict, char, 0) + 1\n    end\n    maxVal\
    \ = maximum(values(emptyDict))\n    return filter(x -> x[2] == maxVal, emptyDict)\n\
    end", "    # Code\nend\n@testset \"Empty string test\" begin\n    @test histogram(\"\
    \") == Dict{String, Int64}()\nend\n@testset \"Basic test\" begin\n    @test histogram(\"\
    a b c\") == Dict{String, Int64}('a' => 1, 'b' => 1, 'c' => 1)\n    @test histogram(\"\
    a b b a\") == Dict{String, Int64}('a' => 2, 'b' => 2)\n    @test histogram(\"\
    a b c a b\") == Dict{String, Int64}('a' => 2, 'b' => 2)\n    @test histogram(\"\
    b b b b a\") == Dict{String, Int64}('b' => 4)\nend", "    for i in 1:length(test)\n\
    \        if length(test) == 0\n            return Dict{String, Int64}()\n    \
    \    else\n            split(test, \" \")", "    max = 0\n    dict = Dict{String,\
    \ Int64}()\n    for i = 1:length(test)\n        count = (length(filter(isequal(test[i]),\
    \ test)))\n        if count >= max\n            dict[test[i]] = count\n      \
    \      max = count\n        end\n    end\n    dict\nend\nhistogram('a b c')\n\
    histogram('a b b a')\nhistogram('a b c a b')\nhistogram('b b b b a')\nhistogram('')",
  "    # Extract letters from input\n    letters = split(test)\n    # Initialize dictionary\n\
    \    histo = Dict{String, Int64}()\n    # Iterate over letters, count repetitions,\
    \ and add to dictionary\n    for letter in letters\n        if !(haskey(histo,\
    \ letter))\n            histo[letter] = 1\n        else\n            histo[letter]\
    \ += 1\n        end\n    end\n    # Figure out which letters had the most repetitions\n\
    \    most = maximum(values(histo))\n    # Create output dictionary by including\
    \ letters with most repetitions\n    output = Dict{String, Int64}()\n    for (key,\
    \ value) in histo\n        if value == most\n            output[key] = value\n\
    \        end\n    end\n    return output\nend", "    # Split string into individual\
    \ letters and count.\n    test = split(test)\n    hist = countmap(test)\n    \n\
    \    # Get letter with the maximum count.\n    max_value = maximum(values(hist))\n\
    \    \n    # Create dictionary to return, containing all letters with the same\
    \ maximum.\n    return_dict = Dict{String, Int64}(k => v for (k, v) in hist if\
    \ v == max_value)\n    \n    return return_dict\nend", "    t = (ch for ch in\
    \ test)\n    m = Dict{String, Int64}()\n    for i in t \n        if haskey(m,\
    \ i)\n            m[i] += 1\n        else\n            m[i] = 1\n        end\n\
    \    end\n    m\nend", "    #pre allocate\n    freq = Dict{String, Int64}()\n\
    \    #iterate through the test string\n    for i in test\n        #set the dictionary\
    \ key to the string and the value to 0\n        freq[i] = 0\n    end\n    #iterate\
    \ through the test string\n    for i in test\n        #add one to the current\
    \ key if it is there\n        freq[i] += 1\n    end\n    #return dictionary\n\
    \    return freq\nend", "    count = Dict()\n    for c in test\n        if c ==\
    \ ' '\n            continue\n        end\n        if c in keys(count)\n      \
    \      count[c] += 1\n        else\n            count[c] = 1\n        end\n  \
    \  end\n    return count\nend", "    histo = Dict()\n    for i in test\n     \
    \   if i in keys(histo)\n            histo[i] += 1\n        else\n           \
    \ histo[i] = 1\n        end\n    end\n    max_elm = sort(collect(values(histo)),\
    \ rev=true)[1]\n    final_histo = Dict()\n    for i in keys(histo)\n        if\
    \ histo[i] == max_elm\n            final_histo[i] = max_elm\n        end\n   \
    \ end\n    return final_histo\nend", "    d = Dict{String, Int64}()\n    for word\
    \ in split(test)\n        if haskey(d, word)\n            d[word] += 1\n     \
    \   else\n            d[word] = 1\n        end\n    end\n    return d\nend", " \
    \   hist = Dict{String, Int64}()\n    for char in split(test)\n        hist[char]\
    \ = get(hist, char, 0) + 1\n    end\n    hist\nend", "    letters = split(test,\
    \ \" \")\n    dict = Dict{String, Int64}()\n    for letter in letters\n      \
    \  dict[letter] = get(dict, letter, 0) + 1\n    end\n    return dict\nend", " \
    \   return Dict{String, Int64}(map(x -> (x, count(test, x)), unique(test))...)\n\
    end", "       \n    #CREATE EMPTY DICTIONARY\n    histo = Dict()\n    #LOOP THROUGH\
    \ STRING AND COUNTER\n    for i = eachindex(test)\n        #IF CHARACTER ALREADY\
    \ IN DICTIONARY\n        if haskey(histo,test[i])\n            #ADD ONE TO COUNTER\n\
    \            histo[test[i]] = histo[test[i]] + 1\n        #IF CHARACTER NOT IN\
    \ DICTIONARY    \n        else\n            #INSERT CHARACTER WITH VALUE 1\n \
    \           histo[test[i]] = 1\n        end\n    end\n    #FIND LARGEST VALUE\
    \ IN DICTIONARY\n    largenum = maximum(values(histo))\n    #CREATE EMPTY DICTIONARY\n\
    \    largedict = Dict()\n    #LOOP THROUGH DICTIONARY\n    for key in keys(histo)\n\
    \        #IF CHARACTER HAS LARGEST VALUE\n        if histo[key] == largenum\n\
    \            #INSERT INTO DICTIONARY WITH ORIGINAL VALUE\n            largedict[key]\
    \ = largenum\n        end\n    end\n    #RETURN LARGEST DICTIONARY\n    return\
    \ largedict\nend", "    h = countmap(split(test))\n    maxVal = 0\n    maxKey\
    \ = \"\"\n    out = Dict()\n    for k in keys(h)\n        if h[k] > maxVal\n \
    \           maxVal = h[k]\n            maxKey = k\n        end\n    end\n    for\
    \ k in keys(h)\n        if h[k] == maxVal\n            out[k] = maxVal\n     \
    \   end\n    end\n    return out\nend", "    output::Dict{String, Int64} = Dict{String,\
    \ Int64}()\n    for l in test\n        if output.haskey(l)\n            output[l]\
    \ += 1\n        else\n            output[l] = 1\n        end\n    end\n    return\
    \ output\nend", "    letterCount = Dict()\n    for char in test\n        if char\
    \ in keys(letterCount)\n            letterCount[char] += 1\n        else\n   \
    \         letterCount[char] = 1\n        end\n    end\n    return letterCount\n\
    end", "    # Split the string by space\n    string_vector = split(test, \" \"\
    )\n    # Initialize the dictionary with nothing\n    dict = Dict()\n    # Loop\
    \ through each word to count\n    for word in string_vector\n        # If the\
    \ word is in the dictionary, increase the count by 1\n        if word in keys(dict)\n\
    \            dict[word] += 1\n        # If the word is not in the dictionary,\
    \ set the count as 1\n        else\n            dict[word] = 1\n        end\n\
    \    end\n    return dict\nend\n# Test the function\nhistogram(\"a b c\")", " \
    \   words = split(test)\n    dic = Dict{String, Int64}()\n    for word in words\n\
    \        if !haskey(dic, word)\n            dic[word] = 1\n        else\n    \
    \        dic[word] += 1\n        end\n    end\n    dic\nend", "    \n    \n  \
    \  # Example:\n    assert(histogram('a b c') == {'a': 1, 'b': 1, 'c': 1})\n  \
    \  assert(histogram('a b b a') == {'a': 2, 'b': 2})\n    assert(histogram('a b\
    \ c a b') == {'a': 2, 'b': 2})\n    assert(histogram('b b b b a') == {'b': 4})\n\
    \    assert(histogram('') == {})\nend", "    hist_dict=Dict{String, Int64}()\n\
    \    for i in split(test)\n        if i in keys(hist_dict)\n            hist_dict[i]\
    \ += 1\n        else\n            hist_dict[i] = 1\n        end\n    end\n   \
    \ return hist_dict\nend\nhistogram(\"\")", "    histogram = Dict{String, Int64}()\n\
    \    test_a = split(test)\n    max_count = 0\n    for i in test_a\n        histogram[i]\
    \ = get(histogram, i, 0) + 1\n        if histogram[i] > max_count\n          \
    \  max_count = histogram[i]\n        end\n    end\n    for (key, value) in histogram\n\
    \        if value != max_count\n            delete!(histogram, key)\n        end\n\
    \    end\n    return histogram\nend", "    hist = Dict{String, Int64}()\n    for\
    \ s in split(test)\n        if haskey(hist, s)\n            hist[s] += 1\n   \
    \     else\n            hist[s] = 1\n        end\n    end\n    return hist\nend",
  "    \"\"\"Return the histogram of the input string.\"\"\"\n    if test == \"\"\n\
    \        return Dict{String, Int64}()\n    end\n    dict = Dict{String, Int64}()\n\
    \    letternum = 1\n    for c in test\n        if haskey(dict, c)\n          \
    \  dict[c] += 1\n        else\n            dict[c] = 1\n        end\n    end\n\
    \    dict = filter(x -> x[2] >= maximum(values(dict)), dict)\n    return dict\n\
    end", "    l = length(test)\n    test_split = split(test, \" \")\n    test_dict\
    \ = Dict{String, Int64}()\n    for i in 1:l\n        if test_split[i] in keys(test_dict)\n\
    \            test_dict[test_split[i]] += 1\n        else\n            test_dict[test_split[i]]\
    \ = 1\n        end\n    end\n    return test_dict\nend", "    s = Dict()\n   \
    \ for c in test\n        s[c] = get(s, c, 0) + 1\n    end\n    return s\nend",
  "    d = Dict{String, Int64}()\n    d[\"a\"] = 1\n    d[\"b\"] = 1\n    d[\"c\"\
    ] = 1\n    return d\nend", "\nend\n    ", "    \n    # declare an empty dictionary\n\
    \    d = Dict()\n    \n    # split the string by whitespace and iterate through\
    \ the letters\n    for i in split(test)\n        \n        # assign the value\
    \ of the dictionary as the number of occurrences of i in the string\n        d[i]\
    \ = count(test, i)\n    end\n    \n    # sort the entries in the dictionary by\
    \ key (letter)\n    sort!(d)\n    \n    # return the sorted dictionary\n    return\
    \ d\nend", "    \"\"\"Return the dictionary of the letter with the most repetition\
    \ and its corresponding\n        count\n        \n        \"\"\"\n    count =\
    \ Dict()\n    testlist = split(test)\n    for i in testlist\n        if haskey(count,\
    \ i)\n            count[i] += 1\n        else\n            count[i] = 1\n    \
    \    end\n    end\n    return count\nend\n        \n    \n    ", "    letters\
    \ = Dict{String, Int64}()\n    for letter in test\n        if haskey(letters,\
    \ letter)\n            letters[letter] += 1\n        else\n            letters[letter]\
    \ = 1\n        end\n    end\n    return letters\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
