name: HumanEval_152_compare
language: jl
prompt: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
  \    event is finally known. The feelings and thoughts you have at that moment are\n\
  \    definitely worth noting down and comparing.\n    Your task is to determine\
  \ if a person correctly guessed the results of a number of matches.\n    You are\
  \ given two arrays of scores and guesses of equal length, where each index shows\
  \ a match. \n    Return an array of the same length denoting how far off each guess\
  \ was. If they have guessed correctly,\n    the value is 0, and if not, the value\
  \ is the absolute difference between the guess and the score.\n    \n    \n    example:\n\
  \n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
  \ -> [4,4,1,0,0,6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1,\
  \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
  \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
  \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
  \ 4]) == [2, 0, 0, 1])\nend\n"
completions: ["    return max.(abs.(game - guess), 0)\nend\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\n\
    compare([0,5,0,0,0,4],[4,1,1,0,0,-2])", "    return [ abs(game[i] - guess[i])\
    \ for i in 1:length(game) ]\nend", "    guess - game\nend", "    \n    n = length(game)\n\
    \    result = zeros(Int64, n)\n    \n    for i in 1:n\n        result[i] = abs(game[i]\
    \ - guess[i])\n    end\n    \n    return result\n    \nend", "    if length(game)\
    \ != length(guess)\n        error(\"Lengths of both the vectors must be equal\"\
    )\n    end\n    if any(abs.(guess) .> abs.(game))\n        error(\"Guess must\
    \ be between -N...N\")\n    end\n    abs.(guess .- game)\nend", "    \n    res\
    \ = zeros(length(game))\n    \n    for i = 1:length(game)\n        if guess[i]\
    \ == game[i]\n            res[i] = 0\n        else\n            res[i] = abs(guess[i]\
    \ - game[i])\n        end\n    end\n    \n    return res\nend", "    diff = Array{Int64}(length(game))\n\
    \    for i in eachindex(game)\n        if game[i] == guess[i]\n            diff[i]\
    \ = 0\n        else\n            diff[i] = abs(game[i] - guess[i])\n        end\n\
    \    end\n    return diff\nend", "    return abs.(game .- guess)\nend", "    return\
    \ abs.(game - guess)\nend", "    @assert length(game) == length(guess) \"Arrays\
    \ must be equal in length\"\n    return abs.(guess-game)\nend", "    return abs.(guess\
    \ - game)\nend", "    return abs.(game - guess)\nend", "    return abs.(game .-\
    \ guess)\nend", "    dif = map(a -> abs(a[1] - a[2]), zip(game, guess))\n    #dif\
    \ = abs.(game - guess)\n    return dif\nend", "    diff = [abs(g-s) for (g,s)\
    \ in zip(game,guess)]\n    return diff\nend", "    diff = abs.(game .- guess)\n\
    \    for i in 1:length(diff)\n        if game[i] == guess[i]\n            diff[i]\
    \ = 0\n        end\n    end\n    return diff\nend\n#some tests\nprintln(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\n\
    println(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]))\nprintln(compare([12,13,0,11,45,33],[0,23,12,12,8,0]))\n\
    println(compare([0,13,12,11,45,12],[11,23,0,0,8,0]))", "    return map(x -> abs(x),\
    \ game .- guess)\nend", "    return abs.(game - guess)\nend", "    score = zeros(Int64,\
    \ length(game))\n    for i = 1:length(game)\n        if game[i] > guess[i]\n \
    \           score[i] = game[i] - guess[i]\n        elseif game[i] < guess[i]\n\
    \            score[i] = guess[i] - game[i]\n        else\n            score[i]\
    \ = 0\n        end\n    end\n    return score\nend", "    out = zeros(Int64, length(game))\n\
    \    for i in 1:length(game)\n        if guess[i] - game[i] < 0\n            out[i]\
    \ = abs(guess[i] - game[i])\n        elseif guess[i] - game[i] > 0\n         \
    \   out[i] = guess[i] - game[i]\n        else\n            out[i] = 0\n      \
    \  end\n    end\n    return out\nend", "    \"\"\"\n    Args:\n        game (Vector{Int64}):\
    \ game result vector\n        guess (Vector{Int64}): player guess vector", " \
    \   difference = zeros(Int64, length(game))\n    for i in 1:length(game)\n   \
    \     difference[i] = abs(game[i] - guess[i])\n    end\n    return difference\n\
    end", "    x = game .- guess\n    for i in 1:length(x)\n        if x[i] < 0\n\
    \            x[i] = -x[i]\n        end\n    end\n    return x\nend", "    score\
    \ = abs.(game .- guess)\n    return score\nend", "    max_ind = min(length(game),\
    \ length(guess))\n    res = zeros(max_ind)\n    for ind in 1:max_ind\n       \
    \ if guess[ind] != game[ind]\n            res[ind] = abs(guess[ind] - game[ind])\n\
    \        end\n    end\n    return res\nend", "    \n    out = []", "    return\
    \ abs.(game .- guess)\nend", "    score = game .- guess\n    score[score .== 0]\
    \ = 0\n    abs.(score)\nend", "    n = length(game)\n    res = zeros(Int64, n)\n\
    \    for i in 1:n\n        res[i] = abs(game[i] - guess[i])\n    end\n    return\
    \ res\nend", "    return abs.(game .- guess)\nend", "    diffs = Vector{Int64}(undef,\
    \ length(game))\n    for i in 1:length(game)\n        diffs[i] = abs(game[i] -\
    \ guess[i])\n    end\n    return diffs\nend", "    return abs.(game - guess)\n\
    end", "    return abs.(game .- guess)\nend", "    #Code Here!\n    return [abs(game[i]\
    \ - guess[i]) for i in 1:length(game)]\nend", "    diffs = zero(Int64, game)\n\
    \    for (idx, (g, c)) in enumerate(zip(game, guess))\n        diffs[idx] = abs(g\
    \ - c)\n    end\n    return diffs\nend", "    diff = abs.(game .- guess)\n   \
    \ return diff\nend", "    N = length(game)\n    result = Vector{Int64}(undef,\
    \ N)\n    for i in 1:N\n        result[i] = abs(game[i] - guess[i])\n    end\n\
    \    return result\nend\n@testset \"Compare Tests\" begin\n    @test compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ == [0,0,0,0,3,3]\n    @test compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) == [4,4,1,0,0,6]\n\
    end;\n ", "    return map(abs, game - guess)\nend", "    return abs.(game-guess)\n\
    end", "    s = length(game)\n    res = Vector{Int64}(s)\n    for i in 1:s\n  \
    \      res[i] = abs(game[i] - guess[i])\n    end\n    return res\nend", "    #\
    \ return the absolute difference for each entry in the vectors\n    return abs.(game-guess)\n\
    end", "    dif = game .- guess\n    for i in 1:length(dif)\n        if dif[i]\
    \ != 0\n            dif[i] = abs(dif[i])\n        end\n    end\n    return dif\n\
    end", "    return abs.(game - guess)\nend", "    diff = game - guess\n    for\
    \ i in 1:length(diff)\n        if diff[i] < 0\n            diff[i] = -diff[i]\n\
    \        end\n    end\n    return diff\nend\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])",
  "    x = zeros(Int64,length(game))\n    for i in eachindex(game)\n        x[i] =\
    \ abs(game[i] - guess[i])\n    end\n    return x\nend", "    diff = abs.(game\
    \ .- guess)\n    return diff\nend", "    [abs(g-v) for (g,v) in zip(game,guess)]\n\
    end", "    res = Vector{Int64}(undef,length(game))\n    for i in 1:length(game)\n\
    \        if game[i] == guess[i]\n            res[i] = 0\n        else\n      \
    \      res[i] = abs(game[i] - guess[i])\n        end\n    end\n    return res\n\
    end\n\"\"\"\n    Determine if a number is prime.", "    n = length(game)\n   \
    \ result = Vector{Int64}(undef, n)\n    for i in 1:n\n        if game[i] - guess[i]\
    \ > 0\n            result[i] = game[i] - guess[i]\n        elseif game[i] - guess[i]\
    \ < 0\n            result[i] = -(game[i] - guess[i])\n        else\n         \
    \   result[i] = 0\n        end\n    end\n    return result\nend", "    map(abs,\
    \ game-guess)\nend", "    \n    score::Vector{Int64} = zeros(Int64, length(game))\n\
    \    \n    for i in eachindex(game)\n        score[i] = abs(game[i] - guess[i])\n\
    \    end\n    \n    return score\nend", "    return  map(x -> abs(x[1] - x[2]),\
    \ zip(game, guess))\nend", "    return abs.(game .- guess)\nend", "    # ...\n\
    \    return Vector{Int64}() # replace with your code\nend", "    diffs = zero(Int64,\
    \ length(game))\n    for i in 1:length(game)\n        diffs[i] = abs(game[i] -\
    \ guess[i])\n    end\n    return diffs\nend", "    # TODO: add code here\n   \
    \ # Hint: you can use the abs() function\n    out = Int64[]\n    for i in eachindex(game)\n\
    \        if abs(game[i] - guess[i]) == 0\n            push!(out, 0)\n        else\n\
    \            push!(out, abs(game[i] - guess[i]))\n        end\n    end\n    return\
    \ out\nend", "    return [abs(x-y) for (x,y) in zip(game,guess)]\nend", "    diff\
    \ = abs.(game .- guess)\n    for i in eachindex(diff)\n        if game[i] == guess[i]\n\
    \            diff[i] = 0\n        end\n    end\n    return diff\nend", "    difference\
    \ = Vector{Int64}(undef, length(game))\n    for i in 1:length(game)\n        difference[i]\
    \ = abs(game[i] - guess[i])\n    end\n    return difference\nend", "    return\
    \ abs.(guess .- game)\nend", "    results = Vector{Int64}(undef, length(game))\n\
    \    for i in 1:length(game)\n        results[i] = abs(game[i] - guess[i])\n \
    \   end\n    return results\nend", "    res = [0 for i in 1:length(game)]\n  \
    \  for i in 1:length(game)\n        if game[i] == guess[i]\n            res[i]\
    \ = 0\n        else\n            res[i] = abs(game[i] - guess[i])\n        end\n\
    \    end\n    return res\nend", "  res = zeros(size(game));\n  for i in eachindex(game)\n\
    \    if game[i] != guess[i]\n      res[i] = abs(game[i] - guess[i])\n    end\n\
    \  end\n  return res\nend", "    return [ abs(x-y) for (x,y) in zip(game,guess)\
    \ ]\nend", "    return map(abs, game .- guess)\nend\n\"\"\"Write a function that\
    \ takes in two sentences and determines if they are anagrams of each other. \n\
    \    An anagram is a string that is composed of the exact same letters of another\
    \ string.\n    example:", "    n = length(game)\n    result = Vector{Int64}(undef,\
    \ n)\n    for i in 1:n\n        if game[i] != guess[i]\n            result[i]\
    \ = abs(game[i] - guess[i])\n        else\n            result[i] = 0\n       \
    \ end\n    end\n    return result\nend", "    return [abs(a-b) for (a,b) in zip(game,guess)]\n\
    end", "    # check arrays length\n    assert(length(game) == length(guess))\n\
    \    # create empty array\n    sum_array = zeros(length(game))\n    # compare\
    \ arrays and add absolute difference into another array\n    for i in 1:length(game)\n\
    \        sum_array[i] = abs(game[i] - guess[i])\n    end\n    return sum_array\n\
    end", "    return abs.(game .- guess) .* (game .!= guess) .+ 0 .* (game .== guess)\n\
    end", "    return abs.(game - guess)\nend", "    q = zeros(Int64, length(game))\n\
    \    for i in 1:length(game)\n        if guess[i] == game[i]\n            q[i]\
    \ = 0\n        else\n            q[i] = abs(guess[i] - game[i])\n        end\n\
    \    end\n    return q\nend", "    diffs = [abs(game[i] - guess[i]) for i in 1:length(game)]\n\
    \    return diffs\nend", "    return abs.(game .- guess)\nend\n    \n    \n  \
    \  ", "    diffs = guess .- game\n    # Since we're using floor_div, we need to\
    \ handle negative values\n    pos_diffs = map(abs, diffs)\n    return pos_diffs\n\
    end", "    diff = game - guess\n    for i in 1:length(diff)\n        if diff[i]\
    \ == 0\n            diff[i] = 0\n        else\n            diff[i] = abs(diff[i])\n\
    \        end\n    end\n    return diff\nend", "    return abs.(game - guess)\n\
    end", "    return [abs(a-b) for (a,b) in zip(game,guess)]\nend", "    if length(game)\
    \ != length(guess) \n        error(\"array length mismatch\")\n    end \n    res\
    \ = zeros(Int64, length(game))\n    for i in 1:length(game)\n        res[i] =\
    \ abs(game[i] - guess[i])\n    end\n    return res\nend", "    final = Int64[]\n\
    \    for i in 1:length(game)\n        push!(final, abs(game[i] - guess[i]))\n\
    \    end\n    return final\nend\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])", "   \
    \ # your code\nend\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])", "  m = max(length(game),\
    \ length(guess))\n  diff = zeros(m)\n  for i = 1:m\n    diff[i] = abs(game[i]\
    \ - guess[i])\n  end\n  return diff\nend", "    return [abs(game[i] - guess[i])\
    \ for i in 1:length(game)]\nend", "  diff = game .- guess\n  for i = 1:length(diff)\n\
    \    if diff[i] == 0\n      diff[i] = 0\n    else\n      diff[i] = abs(diff[i])\n\
    \    end\n  end\n  return diff\nend", "    return abs.(game - guess)\nend", " \
    \   if length(game) != length(guess)\n        println(\"The arrays have to be\
    \ of the same length.\")\n        return\n    end\n    return abs.(game .- guess)\n\
    end", "    d = Vector{Int64}(length(game))\n    for i in 1:length(game)\n    \
    \    d[i] = abs(game[i] - guess[i])\n    end\n    return d\nend", "    return\
    \ abs.(game - guess)\nend", "    return map(x -> abs(x[1] - x[2]), zip(game, guess))\n\
    end", "    dif=zeros(Int64,length(game))\n    for i in 1:length(game)\n      \
    \  dif[i]=abs(game[i]-guess[i])\n    end\n    return dif\nend", "    n = length(game)\n\
    \    ind = Vector{Int64}(undef, n)\n    for i in 1:n\n        if game[i] == guess[i]\n\
    \            ind[i] = 0\n        else\n            ind[i] = abs(game[i] - guess[i])\n\
    \        end\n    end\n    return ind\nend", "    return [abs(game[i] - guess[i])\
    \ for i in 1:length(game)]\nend", "    return abs.(game .- guess)\nend", "   \
    \ \n    if length(game) != length(guess)\n        println(\"The arrays must be\
    \ of equal length\")\n        return \n    end\n    \n    compare = []\n    for\
    \ i = 1:length(game)\n        if game[i] == guess[i]\n            push!(compare,\
    \ 0)\n        else\n            push!(compare, abs(game[i] - guess[i]))\n    \
    \    end\n    end\n    return compare\nend", "    diff = game .- guess\n    for\
    \ i in 1:length(diff)\n        if diff[i] == 0\n            diff[i] = 0\n    \
    \    else\n            diff[i] = abs(diff[i])\n        end\n    end\n    return\
    \ diff\nend", "    \n    for i in 1:length(game)\n        if game[i] == guess[i]\n\
    \            guess[i] = 0\n        else\n            guess[i] = abs(game[i] -\
    \ guess[i])\n        end\n    end\n    return guess\nend", "    # Returns a vector\
    \ of abs(game[i] - guess[i]) for all i\n    # It is an error to have arrays of\
    \ different length\n    [abs(game[i] - guess[i]) for i in 1:length(game)]\nend\n\
    \ ", "    cmp = zeros(length(game))\n    for i in 1:length(game)\n        if game[i]\
    \ == guess[i]\n            cmp[i] = 0\n        else\n            cmp[i] = abs(game[i]\
    \ - guess[i])\n        end\n    end\n    return cmp\nend", "    return abs.(game\
    \ - guess)\nend", "    \n    temp::Vector{Int64} = abs.(game .- guess)\n    return\
    \ temp\nend", "    n = length(game)\n    result = zeros(Int64, n)\n    for i in\
    \ 1:n\n        if guess[i] != game[i]\n            result[i] = abs(guess[i] -\
    \ game[i])\n        end\n    end\n    return result\nend", "    res = zeros(length(game))\n\
    \    for i in 1:length(game)\n        g = abs(game[i] - guess[i])\n        if\
    \ g > 0\n            res[i] = g\n        end\n    end\n    return res\nend\nprintln(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\n\
    println(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]))", "    diff=zeros(Int64, length(game))\n\
    \    for i in 1:length(game)\n        diff[i]=abs(game[i]-guess[i])\n    end\n\
    \    return diff\nend", "    return abs.(game .- guess)\nend", "    distance =\
    \ Vector{Int64}(undef, length(game))\n    for i in 1:length(game)\n        if\
    \ game[i] > guess[i]\n            distance[i] = game[i] - guess[i]\n        elseif\
    \ game[i] < guess[i]\n            distance[i] = guess[i] - game[i]\n        else\n\
    \            distance[i] = 0\n        end\n    end\n    return distance\nend",
  "    dif = [abs(x-y) for (x,y) in zip(game,guess)]\n    return dif\nend", "    error\
    \ = abs.(game .- guess)\n    return error\nend", "    return [abs(game[i] - guess[i])\
    \ for i = 1:length(game)]\nend", "    return abs.(game .- guess) .* (game .!=\
    \ guess) .+ 0 .* (game .== guess)\nend", "    return abs.(game - guess)\nend",
  "    if length(game) != length(guess)\n        error(\"Length of the arrays must\
    \ be equal!\")\n    end\n    l = length(game)\n    array_diff = zeros(Int64, l)\n\
    \    for i = 1:l\n        array_diff[i] = abs(game[i] - guess[i])\n    end\n \
    \   return array_diff\nend", "    res = []\n    for i in 1:length(game)\n    \
    \    diff = abs(game[i] - guess[i])\n        push!(res, diff)\n    end\n    return\
    \ res\nend", "    res = zeros(length(game))\n    for i in 1:length(game)\n   \
    \     if game[i] == guess[i]\n            res[i] = 0\n        else\n         \
    \   res[i] = abs(game[i] - guess[i])\n        end\n    end\n    return res\nend",
  "    return abs.(game .- guess)\nend", "    points = map(x -> abs(x[1] - x[2]),\
    \ zip(game, guess))\n    return points\nend", "    difference = zeros(length(game))\n\
    \    for i in 1:length(game)\n        difference[i] = abs(game[i] - guess[i])\n\
    \    end\n    return difference\nend", "    x = map(abs, (game .- guess))\n  \
    \  return x\nend", "    \n    result = zeros(Int64,length(game))\n    \n    for\
    \ i in 1:length(game)\n        if guess[i] == game[i]\n            result[i] =\
    \ 0\n        else\n            result[i] = abs(guess[i] - game[i])\n        end\n\
    \    end\n    \n    return result\nend", "    \n    re = zeros(size(game))\n \
    \   for i = 1:length(game)\n        if game[i] > guess[i]\n            re[i] =\
    \ game[i] - guess[i]\n        elseif game[i] < guess[i]\n            re[i] = guess[i]\
    \ - game[i]\n        else\n            re[i] = 0\n        end\n    end\n    return\
    \ re\nend", "    error = abs.(game-guess)\n    return error\nend", "    \n   \
    \ n = length(game)\n    diff = Int64[]\n    \n    for i in 1:n\n        push!(diff,abs(game[i]-guess[i]))\n\
    \    end\n    \n    return diff\n    \nend", "    \n    pkg = Pkg.installed()[\"\
    StatsBase\"]\n    if (pkg.version < v\"0.31.0\")\n        println(\"StatsBase.jl\
    \ is at version $(pkg.version). Please update to at least v0.31.0 for the MathsCup\"\
    )\n    end\n    \n    diffs = abs.(game .- guess)\n    map(x -> x==0 ? 0 : x,\
    \ diffs)\nend", "    v = Vector{Int64}()\n    for i in 1:length(game)\n      \
    \  push!(v, abs(game[i] - guess[i]))\n    end\n    return v\nend", "    diffs\
    \ = zeros(length(game))\n    for i in 1:length(game)\n        if guess[i] == game[i]\n\
    \            diffs[i] = 0\n        else\n            diffs[i] = abs(guess[i] -\
    \ game[i])\n        end\n    end\n    return diffs\nend", "    # TODO:\n    return\
    \ [0, 0, 0, 0, 0, 0]\nend", "    n = length(game)\n    res = zeros(Int64, n)\n\
    \    for i in 1:n\n        if guess[i] > game[i]\n            res[i] = guess[i]\
    \ - game[i]\n        elseif guess[i] < game[i]\n            res[i] = game[i] -\
    \ guess[i]\n        end\n    end\n    return res\nend", "    diff = abs.(game\
    \ - guess)\n    diff[diff .== 0] .= 1\n    return diff\nend", "    \"Use the Array\
    \ comprehension technique to figure out the value at each index\"\n    return\
    \ [abs(game[i] - guess[i]) for i in 1:length(game)]\nend", "    distance = [0]\n\
    \    for i in 1:length(game)\n        push!(distance,abs(game[i]-guess[i]))\n\
    \    end\n    return distance\nend", "    return [abs(g-s) for (g,s) in zip(game,guess)]\n\
    end", "    return abs.(game .- guess)\nend", "    comp = [abs(guess[i] - game[i])\
    \ for i = 1:length(game)]\n    return comp\nend", "    \n    #if !(length(game)\
    \ == length(guess))\n    #    throw(ArgumentError(\"game and guess must be of\
    \ the same length\"))\n    #end\n    \n    diffs = []\n    for i in 1:length(game)\n\
    \        diff = abs(game[i] - guess[i])\n        push!(diffs, diff)\n    end\n\
    \    return diffs\nend", "    d = Float64[]\n    for i in 1:length(game)\n   \
    \     m = abs(game[i] - guess[i])\n        push!(d, m)\n    end\n    return d\n\
    end", "    L= length(game)\n    res = zeros(L)\n    for i in 1:L\n        res[i]\
    \ = abs(game[i]-guess[i])\n    end\n    return res\nend", "    return abs.(game-guess)\n\
    end", "    return abs.(game-guess)\nend", "    diff = Array{Int64}(length(game))\n\
    \    for i in 1:length(game)\n        diff[i] = abs(game[i] - guess[i])\n    end\n\
    \    return diff\nend", "    n = length(game)\n    dif = zeros(Int64, n)\n   \
    \ for i in 1:n\n        if game[i] == guess[i]\n            dif[i] = 0\n     \
    \   else\n            dif[i] = abs(game[i] - guess[i])\n        end\n    end\n\
    \    return dif\nend", "    @assert length(game) == length(guess)\n    return\
    \ abs.(game - guess)\nend", "    return abs.((game - guess))\nend", "    if length(game)\
    \ != length(guess)\n        error(\"The length of game and guess must be equal\"\
    )\n    end\n    return abs.(game - guess)\nend", "    return [abs(guess[i] - game[i])\
    \ for i in 1:length(game)]\nend", "    return map(abs, map(-, game, guess))\n\
    end", "    return abs.(game - guess)\nend", "    return abs.(game-guess)\nend",
  "    return [abs(game[i] - guess[i]) for i = 1:length(game)]\nend", "    b = [abs(game[i]\
    \ - guess[i]) for i = 1:length(game)]\n    return b\nend", "    \n    # assume\
    \ the input vectors are the same length\n    result = Array{Int64}(undef, length(game))\n\
    \    \n    for i in 1:length(game)\n        if game[i] == guess[i]\n         \
    \   result[i] = 0\n        else\n            result[i] = abs(game[i] - guess[i])\n\
    \        end\n    end\n    \n    return result\nend", "    l = length(game)\n\
    \    diff = Vector{Int64}(l)\n    for i in 1:l\n        if game[i] != guess[i]\n\
    \            diff[i] = abs(game[i] - guess[i])\n        else\n            diff[i]\
    \ = 0\n        end\n    end\n    return diff\nend", "    answer = []\n    for\
    \ i = 1:length(game)\n        if game[i] == guess[i]\n            push!(answer,\
    \ 0)\n        else\n            push!(answer, abs(game[i] - guess[i]))\n     \
    \   end\n    end\n    return answer\nend", "    result = Array{Int64}(length(game))\n\
    \    for i in 1:length(game)\n        if game[i] > guess[i]\n            result[i]\
    \ = game[i] - guess[i]\n        elseif game[i] < guess[i]\n            result[i]\
    \ = guess[i] - game[i]\n        else\n            result[i] = 0\n        end\n\
    \    end\n    return result\nend", "    return abs.(game-guess)\nend", "    return\
    \ [abs(game[i] - guess[i]) for i in 1:length(game)]\nend", "    missing = length(game)\
    \ - length(guess)\n    if missing > 0\n        println(\"Your guess is $missing\
    \ short.\")\n    end\n    missing = length(guess) - length(game)\n    if missing\
    \ > 0\n        println(\"Your guess is $missing long.\")\n    end\n    missing\
    \ = ifelse(length(game) == length(guess), 0, missing)\n    return [abs(game[i]\
    \ - guess[i]) for i in 1:length(game)]\nend", "   \n    diff_vec = []\n    for\
    \ i in 1:length(game)\n        diff = abs(game[i] - guess[i])\n        push!(diff_vec,\
    \ diff)\n    end\n    \n    return diff_vec\nend", "    return [ abs(game[i] -\
    \ guess[i]) for i in 1:length(game) ]\nend", "    return map(abs,game-guess)\n\
    end", "    return abs.((game - guess))\nend", "    return [abs(game[i] - guess[i])\
    \ for i = 1:length(game)]\nend", "    N = length(game)\n    result = []\n    for\
    \ i = 1:N\n        if game[i] == guess[i]\n            push!(result, 0)\n    \
    \    else\n            push!(result, abs(game[i] - guess[i]))\n        end\n \
    \   end\n    return result\nend", "    return map(x -> abs(x[1] - x[2]), zip(game,\
    \ guess))\nend", "    diferencias = Int64[]\n    @inbounds for i \u2208 1:length(game)\n\
    \        push!(diferencias,abs(game[i]-guess[i]))\n    end\n    return diferencias\n\
    end", "    return abs.(game - guess)\nend", "    d = []\n    for i = 1:length(game)\n\
    \        if game[i] > guess[i]\n            push!(d, game[i] - guess[i])\n   \
    \     elseif game[i] < guess[i]\n            push!(d, guess[i] - game[i])\n  \
    \      elseif game[i] == guess[i]\n            push!(d, 0)\n        end\n    end\n\
    \    return d\nend", "    # compare(game, guess) = (game .!= guess) .* abs.(game\
    \ - guess)\n    return (game .!= guess) .* abs.(game - guess)\nend", "    return\
    \ abs.(game .- guess)\nend", "    return abs.(game-guess)\nend", "    game_score\
    \ = game\n    guess_score = guess\n    goal_difference = []\n    for i = 1:length(game_score)\n\
    \        if game_score[i] == guess_score[i]\n            push!(goal_difference,\
    \ 0)\n        else\n            push!(goal_difference, abs(game_score[i] - guess_score[i]))\n\
    \        end\n    end\n    return goal_difference\nend", "    len = length(game)\n\
    \    result = zeros(Int64, len)\n    for i in 1:len\n        if game[i] - guess[i]\
    \ == 0\n            result[i] = 0\n        else\n            result[i] = abs(game[i]\
    \ - guess[i])\n        end\n    end\n    return result\nend", "    return abs.(game\
    \ .- guess)\nend", "    distance = zeros(length(game))\n    for index in 1:length(game)\n\
    \        if game[index] == guess[index]\n            distance[index] = 0\n   \
    \     else\n            distance[index] = abs(game[index] - guess[index])\n  \
    \      end\n    end\n    return distance\nend", "    output = zeros(Int64, game)\n\
    \    for i in 1:length(game)\n        output[i] = abs(game[i] - guess[i])\n  \
    \  end\n    return output\nend", "    return [abs(game[i] - guess[i]) for i in\
    \ 1:length(game)]\nend", "    res = [abs(game[i] - guess[i]) for i in eachindex(game)]\n\
    \    return res\nend", "    result = zeros(Int64, length(game))\n    for i in\
    \ 1:length(game)\n        result[i] = abs(game[i] - guess[i])\n    end\n    return\
    \ result\nend", "    if length(game) != length(guess)\n        return error(\"\
    length of game and guess must be equal\")\n    end\n    return map(x-> x == 0\
    \ ? 0 : abs(x), game .- guess)\nend", "    return abs.(game-guess)\nend", "  \
    \  score = [abs(a-b) for (a,b) in zip(game,guess)]\n    return score\nend", " \
    \   return [abs(i-j) for (i,j) in zip(game,guess)]\nend", "    n = length(game)\n\
    \    diff = zeros(Int64, n)\n    for i in 1:n\n        diff[i] = abs(game[i] -\
    \ guess[i])\n    end\n    return diff\nend", "    return map(abs, game .- guess)\n\
    end", "  if length(game) != length(guess)\n      error(\"The inputs should be\
    \ of the same length\")\n  end\n  diff = Vector{Int64}(undef, length(game))\n\
    \  for i = 1:length(game)\n      if game[i] == guess[i]\n          diff[i] = 0\n\
    \      else\n          diff[i] = abs(game[i] - guess[i])\n      end\n  end\n \
    \ return diff\nend", "    n = length(game)\n    abs.((game - guess).%n)\nend",
  "    @assert length(game) == length(guess) \"game and guess arrays must be the same\
    \ length\"\n    comparison = [0 for i = 1:length(game)]\n    for i = 1:length(game)\n\
    \        comparison[i] = abs(game[i] - guess[i])\n    end\n    return comparison\n\
    end", "    diff = abs.(game-guess)\n    iszero(diff) ? zeros(length(diff)) : diff\n\
    end\n \n \n```julia\n@testset \"Test Cases\" begin\n    @test compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ == [0,0,0,0,3,3]\n    @test compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) == [4,4,1,0,0,6]\n\
    \    @test compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]\n    @test compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ == [4,4,1,0,0,6]\n    @test compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]\n\
    \    @test compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) == [4,4,1,0,0,6]\n    @test compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ == [0,0,0,0,3,3]\n    @test compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) == [4,4,1,0,0,6]\n\
    \    @test compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]\n    @test compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ == [4,4,1,0,0,6]\n    @test compare([1,2,3,4,5,1],[1,2,3,", "    return abs.(guess-game)\n\
    end\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])", "    return [abs(game[i] - guess[i])\
    \ for i in 1:length(game)]\nend", "    return (abs.(game - guess) .== 0) .* (abs.(game\
    \ - guess))\nend", "    \n    difference = abs.(game-guess)\n    for i in difference\n\
    \        if i == 0\n            continue\n        else\n            println(i)\n\
    \        end\n    end\nend", "    return [abs(guess[i] - game[i]) for i in 1:length(game)]\n\
    end", "    \n    len = length(game)\n    dist = zeros(len)\n    \n    for i in\
    \ 1:len\n        if game[i] == guess[i]\n            dist[i] = 0\n        else\n\
    \            dist[i] = abs(game[i] - guess[i])\n        end\n    end\n    \n \
    \   return dist\n    \nend", "    n = length(game)\n    c = Array{Int64}(n)\n\
    \    for i in 1:n\n        c[i] = abs(game[i] - guess[i])\n    end\n    return\
    \ c\nend", "    return abs.(game .- guess)\nend", "    out = zeros(size(game)[1])\n\
    \    for i in 1:size(game)[1]\n        if (game[i] != guess[i])\n            out[i]\
    \ = abs(game[i] - guess[i])\n        end\n    end\n    return out\nend", "   \
    \ return [if i == j; 0; else; abs(i-j); end for (i,j) in zip(game,guess)]\nend",
  "    return abs.(game - guess)\nend", "    guess .- game .+ (guess .== game) .*\
    \ abs.(guess .- game)\nend", "    return abs.(game - guess)\nend", "    compare(a,b)\
    \ = abs.(b-a) .* a .!= 0 .+ a .* a .== 0\n    return compare(game, guess)\nend",
  "    if length(game) != length(guess)\n        throw(DimensionMismatch(\"game and\
    \ guess must be the same length\"))\n    end\n    return [abs(game[i] - guess[i])\
    \ for i in 1:length(game)]\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
