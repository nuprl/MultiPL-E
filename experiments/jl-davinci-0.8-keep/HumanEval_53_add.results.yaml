name: HumanEval_53_add
language: jl
results:
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n  x + y\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0, 1)\
    \ == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n  return x\
    \ + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nadd(2, 3)\nadd(5, 7)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\n```\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiy63hj_p.jl:10\nin expression starting at\
    \ /tmp/tmpiy63hj_p.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\n \n@test add(3, 4) == 7\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @test not defined\nin expression starting\
    \ at /tmp/tmpwoqlddky.jl:11\nin expression starting at /tmp/tmpwoqlddky.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    \"\"\"\
    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n\
    \    \"\"\"\n    return x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    x + y\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0, 1)\
    \ == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\n\"\"\"Multiply two numbers x and y\n    >>> mul(2, 3)\n    6\n \
    \   >>> mul(5, 7)\n    35\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpv2ze7w0c.jl:10\nin expression starting at /tmp/tmpv2ze7w0c.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    x + y\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0, 1)\
    \ == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n  x + y\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0, 1)\
    \ == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\n\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>>\
    \ add(5, 7)\n    12\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpqaiudc1c.jl:10\nin expression starting at /tmp/tmpqaiudc1c.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n   return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nadd(2, 3)\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t\
    @test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    z = x\
    \ + y\n    return z\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t\
    @test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\n```\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdbq94tcx.jl:10\nin expression starting at\
    \ /tmp/tmpdbq94tcx.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    x + y\n\
    end\n```\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3ftdn2id.jl:10\nin expression starting at\
    \ /tmp/tmp3ftdn2id.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    z = x\
    \ + y\n    return z\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t\
    @test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    x + y\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0, 1)\
    \ == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\n```\n### A Simple Example for Python\n```python\ndef add(x, y):\n\
    \    return x + y\n```\n### Use `*` to accept variable number of arguments\n```python\n\
    def foo(*args):\n    return args\n```\n### Use `**` to accept variable number\
    \ of keyword arguments\n```python\ndef foo(**kwargs):\n    return kwargs\n```\n\
    ### Function with default value\n```python\ndef foo(name, age, height=173):\n\
    \    return name, age, height\n```\n### A Simple Example for Julia\n```julia\n\
    \"\"\"\n    add(x, y)\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: parsing command `### A Simple Example for Python\n`:\
    \ special characters \"#{}()[]<>|&*?~;\" must be quoted in commands\nStacktrace:\n\
    \ [1] error(s::String)\n   @ Base ./error.jl:33\n [2] shell_parse(str::String,\
    \ interpolate::Bool; special::String, filename::String)\n   @ Base ./shell.jl:114\n\
    \ [3] var\"@cmd\"(__source__::LineNumberNode, __module__::Module, str::Any)\n\
    \   @ Base ./cmd.jl:442\nin expression starting at /tmp/tmpzka17nz3.jl:10\nin\
    \ expression starting at /tmp/tmpzka17nz3.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    x + y\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0, 1)\
    \ == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    x + y\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0, 1)\
    \ == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    x + y\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0, 1)\
    \ == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    x + y\n\
    end\n```\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4o356vzw.jl:10\nin expression starting at\
    \ /tmp/tmp4o356vzw.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    x + y\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0, 1)\
    \ == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\n\"\"\"\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp1zlnevdt.jl:10\nin expression starting at /tmp/tmp1zlnevdt.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    x + y\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0, 1)\
    \ == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\n \nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    x + y\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0, 1)\
    \ == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\n```\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_s8m_cvs.jl:10\nin expression starting at\
    \ /tmp/tmp_s8m_cvs.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\n@code_native add(1, 2)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @code_native not defined\nin expression\
    \ starting at /tmp/tmpg9cwsdjx.jl:10\nin expression starting at /tmp/tmpg9cwsdjx.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n   return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\n \nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    z = x\
    \ + y\n    return z\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t\
    @test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    x + y\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0, 1)\
    \ == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nadd(2, 3)\nadd(5, 7)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n   x + y\n\
    end\n```\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfbaa1ecd.jl:10\nin expression starting at\
    \ /tmp/tmpfbaa1ecd.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\n@test add(2, 3) == 5\n@test add(5, 7) == 12\n \nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1,\
    \ 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t\
    @test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @test not defined\nin expression starting\
    \ at /tmp/tmp0q0p4fjd.jl:10\nin expression starting at /tmp/tmp0q0p4fjd.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nadd(2, 3)\nadd(5, 7)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nadd(2, 3)\n@doc(add)\n# uncomment the line below to see more in\
    \ depth documentation\n#?add\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n   x + y\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0, 1)\
    \ == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\n```\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8adu7r4h.jl:10\nin expression starting at\
    \ /tmp/tmp8adu7r4h.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n   return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\n \n@test add(1, 1) == 2\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @test not defined\nin expression starting\
    \ at /tmp/tmpapv4axh8.jl:11\nin expression starting at /tmp/tmpapv4axh8.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    x + y\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0, 1)\
    \ == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    x + y\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0, 1)\
    \ == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    x + y\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0, 1)\
    \ == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\n```\nWe can call this function from the REPL as usual, but also\
    \ from Julia by using `julia` as the ``>`` prompt.\nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) ==\
    \ 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7,\
    \ 5) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw03fxf38.jl:10\nin expression starting at\
    \ /tmp/tmpw03fxf38.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n   return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\n```\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc_9inmcq.jl:10\nin expression starting at\
    \ /tmp/tmpc_9inmcq.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nadd(2, 3)\nadd(5, 7)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    # This\
    \ function adds two numbers x and y\n    return x + y\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1,\
    \ 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t\
    @test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    z = x\
    \ + y\n    return z\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t\
    @test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    x + y\n\
    end\nprintln(add(2, 3))\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t\
    @test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "5\nTest Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    x + y\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0, 1)\
    \ == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\n#=\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: unterminated multi-line comment #=\
    \ ... =#\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoojbpllc.jl:22\nin expression\
    \ starting at /tmp/tmpoojbpllc.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    x + y\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0, 1)\
    \ == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    x + y\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0, 1)\
    \ == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n  return x\
    \ + y\nend\n\"\"\"Test add\"\"\"\n@test add(2,3) == 5\n@test add(5,7) == 12\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0, 1) == 1)\n\
    \t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @test not defined\nStacktrace:\n [1] top-level\
    \ scope\n   @ :0\n [2] #macroexpand#51\n   @ ./expr.jl:115 [inlined]\n [3] macroexpand\n\
    \   @ ./expr.jl:114 [inlined]\n [4] docm(source::LineNumberNode, mod::Module,\
    \ meta::Any, ex::Any, define::Bool) (repeats 2 times)\n   @ Base.Docs ./docs/Docs.jl:537\n\
    \ [5] var\"@doc\"(::LineNumberNode, ::Module, ::String, ::Vararg{Any})\n   @ Core\
    \ ./boot.jl:517\nin expression starting at /tmp/tmpesmzrsgk.jl:10\nin expression\
    \ starting at /tmp/tmpesmzrsgk.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nx = add(2, 3)\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nadd(2, 3)\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t\
    @test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\n \n \n \n \nusing Test\n\n@testset begin\n\ncandidate = add;\n\t\
    @test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n   return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    x + y\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0, 1)\
    \ == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\n \nn = add(4, 5)\nm = add(100, 200)\nprintln(n)\nprintln(m)\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0, 1) == 1)\n\t\
    @test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "9\n300\nTest Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\n```\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdjidirsq.jl:10\nin expression starting at\
    \ /tmp/tmpdjidirsq.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    x + y\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0, 1)\
    \ == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nadd(2, 3)\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t\
    @test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nadd(2, 3)\nadd(5, 7)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n   x + y\n\
    end\n```\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuk9bbbmk.jl:10\nin expression starting at\
    \ /tmp/tmpuk9bbbmk.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    x + y\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0, 1)\
    \ == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    z = x\
    \ + y\n    z\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    x + y\n\
    end\n```\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnm3bb649.jl:10\nin expression starting at\
    \ /tmp/tmpnm3bb649.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nadd(2, 3)\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t\
    @test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    x + y\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0, 1)\
    \ == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
