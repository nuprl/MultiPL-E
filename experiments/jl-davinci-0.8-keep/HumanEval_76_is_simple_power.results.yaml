name: HumanEval_76_is_simple_power
language: jl
results:
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    n**int(log(x)/log(n))\
    \ == x ? true : false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"x^y\" instead of \"x**y\" for exponentiation,\
    \ and \"x...\" instead of \"**x\" for splatting.\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpnq05nur4.jl:13\nin expression starting at /tmp/tmpnq05nur4.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    while x>n\n\
    \        x = x/n\n    end\n    return x==n\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpoksvnocx.jl:32\n  Expression: candidate(1,\
    \ 12) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoksvnocx.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoksvnocx.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     1     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoksvnocx.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x ==\
    \ 1\n        return true\n    end\n    i = 1\n    num = n\n    while num <= x\n\
    \        if num == x\n            return true\n        end\n        num *= n\n\
    \    end\n    return false\nend\nis_simple_power(1, 4)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t\
    @test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9,\
    \ 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) ==\
    \ false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\
    \t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return (n^round(log(x)/log(n))\
    \ == x)\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t\
    @test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4,\
    \ 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    # return\
    \ true if x is a simple power of n\n    for i in 1:x\n       if n^i == x\n   \
    \        return true\n       end\n    end\n    return false\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) ==\
    \ true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\
    \t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24,\
    \ 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6)\
    \ == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpbvgo0qca.jl:35\n  Expression: candidate(1,\
    \ 12) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbvgo0qca.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbvgo0qca.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     1     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbvgo0qca.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    k = log(x)/log(n)\n\
    \    if k == trunc(k)\n        return true\n    else\n        return false\n \
    \   end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t\
    @test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4,\
    \ 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsgixstw0.jl:33\n  Expression: candidate(1,\
    \ 1) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsgixstw0.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsgixstw0.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     1     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsgixstw0.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n   \n    #log(x,n)\
    \ -> function that calculates the logarithm to the base \"n\" of \"x\"\n    #isinteger(log(x,n))\
    \ -> function that returns true if a number is integer and false if it is not.\n\
    \    if(isinteger(log(x,n)))\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t\
    @test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4,\
    \ 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm_8t9p13.jl:27\n  Expression: candidate(16,\
    \ 2) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm_8t9p13.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm_8t9p13.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpm_8t9p13.jl:29\n  Expression: candidate(4, 2) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm_8t9p13.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm_8t9p13.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpm_8t9p13.jl:30\n  Expression: candidate(9, 3) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm_8t9p13.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm_8t9p13.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpm_8t9p13.jl:31\n  Expression: candidate(16, 4) == true\n \
    \  Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm_8t9p13.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm_8t9p13.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpm_8t9p13.jl:35\n  Expression: candidate(1, 1) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm_8t9p13.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n^trunc(log(x)/log(n))\
    \ == x\n        return true\n    else\n        return false\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return n\
    \ ^ round(log(x) / log(n)) == x\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return n^(Int64(log(x)/log(n)))\
    \ == x\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t\
    @test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4,\
    \ 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmppyuthob3.jl:21\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmppyuthob3.jl:13\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmppyuthob3.jl:21 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmppyuthob3.jl:19\ntest set:\
    \ Error During Test at /tmp/tmppyuthob3.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmppyuthob3.jl:13\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmppyuthob3.jl:25 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmppyuthob3.jl:19\ntest set:\
    \ Error During Test at /tmp/tmppyuthob3.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmppyuthob3.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmppyuthob3.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmppyuthob3.jl:19\ntest set:\
    \ Error During Test at /tmp/tmppyuthob3.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppyuthob3.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    for i in\
    \ 1:10000\n        if n^i == x\n            return true\n        end\n    end\n\
    \    return false\nend\nprintln(is_simple_power(1, 4))\nprintln(is_simple_power(2,\
    \ 2))\nprintln(is_simple_power(8, 2))\nprintln(is_simple_power(3, 2))\nprintln(is_simple_power(3,\
    \ 1))\nprintln(is_simple_power(5, 3))\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "false\ntrue\ntrue\nfalse\nfalse\nfalse\ntest set: Test Failed at /tmp/tmpor6i5u7a.jl:40\n\
    \  Expression: candidate(1, 12) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpor6i5u7a.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpor6i5u7a.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     1     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpor6i5u7a.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x < 1\n\
    \        return false\n    end\n    for i in 1:x-1\n        if n^i == x\n    \
    \        return true\n        end\n    end\n    return false\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) ==\
    \ true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\
    \t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24,\
    \ 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6)\
    \ == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp6e6wgcvi.jl:36\n  Expression: candidate(1,\
    \ 1) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6e6wgcvi.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6e6wgcvi.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp6e6wgcvi.jl:37\n  Expression: candidate(1, 12) == true\n \
    \  Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6e6wgcvi.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6e6wgcvi.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6e6wgcvi.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return n^trunc(Int64,log(x)/log(n))\
    \ == x && x>=n\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1xxl34ap.jl:28\n  Test threw exception\n\
    \  Expression: candidate(1, 1) == true\n  InexactError: trunc(Int64, NaN)\n  Stacktrace:\n\
    \   [1] trunc\n     @ ./float.jl:805 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmp1xxl34ap.jl:13\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmp1xxl34ap.jl:28 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp1xxl34ap.jl:19\ntest set:\
    \ Test Failed at /tmp/tmp1xxl34ap.jl:29\n  Expression: candidate(1, 12) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1xxl34ap.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1xxl34ap.jl:19\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    8     1      1     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1xxl34ap.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return false\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1953x_w_.jl:20\n  Expression: candidate(16,\
    \ 2) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1953x_w_.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1953x_w_.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp1953x_w_.jl:22\n  Expression: candidate(4, 2) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1953x_w_.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1953x_w_.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp1953x_w_.jl:23\n  Expression: candidate(9, 3) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1953x_w_.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1953x_w_.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp1953x_w_.jl:24\n  Expression: candidate(16, 4) == true\n \
    \  Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1953x_w_.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1953x_w_.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp1953x_w_.jl:28\n  Expression: candidate(1, 1) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1953x_w_.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^Int(log(x)/log(n))\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmproo5yb6i.jl:21\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmproo5yb6i.jl:13\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmproo5yb6i.jl:21 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmproo5yb6i.jl:19\ntest set:\
    \ Error During Test at /tmp/tmproo5yb6i.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmproo5yb6i.jl:13\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmproo5yb6i.jl:25 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmproo5yb6i.jl:19\ntest set:\
    \ Error During Test at /tmp/tmproo5yb6i.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmproo5yb6i.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmproo5yb6i.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmproo5yb6i.jl:19\ntest set:\
    \ Error During Test at /tmp/tmproo5yb6i.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmproo5yb6i.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return (n^int(log(x)/log(n)))\
    \ == x\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t\
    @test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4,\
    \ 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpuw1eltb_.jl:20\n  Test threw exception\n\
    \  Expression: candidate(16, 2) == true\n  UndefVarError: int not defined\n  Stacktrace:\n\
    \   [1] is_simple_power(x::Int64, n::Int64)\n     @ Main /tmp/tmpuw1eltb_.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuw1eltb_.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuw1eltb_.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpuw1eltb_.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(143214, 16) == false\n  UndefVarError: int not defined\n  Stacktrace:\n\
    \   [1] is_simple_power(x::Int64, n::Int64)\n     @ Main /tmp/tmpuw1eltb_.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuw1eltb_.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuw1eltb_.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpuw1eltb_.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(4, 2) == true\n  UndefVarError: int not defined\n  Stacktrace:\n \
    \  [1] is_simple_power(x::Int64, n::Int64)\n     @ Main /tmp/tmpuw1eltb_.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuw1eltb_.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuw1eltb_.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpuw1eltb_.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(9, 3) == true\n  UndefVarError: int not defined\n  Stacktrace:\n \
    \  [1] is_simple_power(x::Int64, n::Int64)\n     @ Main /tmp/tmpuw1eltb_.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuw1eltb_.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if log2(x)/log2(n)\
    \ == Int(log2(x)/log2(n)) && x != 0\n        return true\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpw8xidvca.jl:25\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpw8xidvca.jl:13\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpw8xidvca.jl:25 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpw8xidvca.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpw8xidvca.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721156)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpw8xidvca.jl:13\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpw8xidvca.jl:29 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpw8xidvca.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpw8xidvca.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmpw8xidvca.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpw8xidvca.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpw8xidvca.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpw8xidvca.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw8xidvca.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    x == n ^\
    \ floor(log(x)/log(n))\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    \"\"\"Test\
    \ if x is a simple power of n\n    is_simple_power(4, 2) => true\n    is_simple_power(7,\
    \ 2) => false\n    \"\"\"\n    if x == 1\n        return true\n    end\n    p\
    \ = log(x)/log(n)\n    return isinteger(p)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return log(x)/log(n)\
    \ == trunc(log(x)/log(n))\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp934q8kzr.jl:28\n  Expression: candidate(1,\
    \ 1) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp934q8kzr.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp934q8kzr.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     1     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp934q8kzr.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^round(log(x, n)) \nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpiw850t4c.jl:20\n  Expression: candidate(16,\
    \ 2) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiw850t4c.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiw850t4c.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpiw850t4c.jl:22\n  Expression: candidate(4, 2) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiw850t4c.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiw850t4c.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpiw850t4c.jl:23\n  Expression: candidate(9, 3) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiw850t4c.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiw850t4c.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpiw850t4c.jl:24\n  Expression: candidate(16, 4) == true\n \
    \  Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiw850t4c.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiw850t4c.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpiw850t4c.jl:29\n  Expression: candidate(1, 12) == true\n \
    \  Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiw850t4c.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return (x\
    \ == n^Int(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmplwhvvcr0.jl:21\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmplwhvvcr0.jl:13\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmplwhvvcr0.jl:21 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmplwhvvcr0.jl:19\ntest set:\
    \ Error During Test at /tmp/tmplwhvvcr0.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmplwhvvcr0.jl:13\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmplwhvvcr0.jl:25 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmplwhvvcr0.jl:19\ntest set:\
    \ Error During Test at /tmp/tmplwhvvcr0.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmplwhvvcr0.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmplwhvvcr0.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmplwhvvcr0.jl:19\ntest set:\
    \ Error During Test at /tmp/tmplwhvvcr0.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplwhvvcr0.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    x == n^trunc(log(x)/log(n))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    r = floor(log(x)/log(n))\n\
    \    x == n^r ? true : false\nend\n \nfor (n, x) in [(1, 4), (2, 2), (8, 2), (3,\
    \ 2), (3, 1), (5, 3)]\n    println(is_simple_power(x, n))\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\
    \t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t\
    @test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24,\
    \ 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6)\
    \ == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\n\
    end\n"
  stdout: ''
  stderr: "false\ntrue\nfalse\nfalse\ntrue\nfalse\nTest Summary: | Pass  Total\ntest\
    \ set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    p = convert(Float64,\
    \ log(x)/log(n))\n    r = convert(Int64, p)\n    if p == r\n        return true\n\
    \    else\n        return false\n    end\nend\n \n \n \n\"\"\"Task\n    Your task\
    \ is to write a function that takes two arguments(words) and returns\n    an integer\
    \ score based on these rules:\n    words are anagrams if the letters of one word\
    \ can be rearranged to produce\n    the other word.\n    for example, \"abcd\"\
    \ and \"dabc\" are anagrams\n    score = 1 if the words are anagrams and 0 otherwise\n\
    \    for example, \"abcd\" and \"dacb\" are anagrams,\n    therefore score = 1\n\
    \    \"abcd\" and \"badc\" are not anagrams, therefore score = 0\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpulqf8htw.jl:24\nin expression starting at /tmp/tmpulqf8htw.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(log(x)/log(n)) | round(x) == n^(log(x)/log(n))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t\
    @test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9,\
    \ 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) ==\
    \ false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\
    \t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqjius6eu.jl:20\n  Test threw exception\n\
    \  Expression: candidate(16, 2) == true\n  MethodError: no method matching |(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    |(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n    |(!Matched::T,\
    \ ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32,\
    \ UInt64, UInt8} at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:361\n\
    \    |(!Matched::Missing, ::Integer) at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:174\n\
    \    ...\n  Stacktrace:\n   [1] is_simple_power(x::Int64, n::Int64)\n     @ Main\
    \ /tmp/tmpqjius6eu.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqjius6eu.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqjius6eu.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpqjius6eu.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(143214, 16) == false\n  MethodError: no method matching |(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    |(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n    |(!Matched::T,\
    \ ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32,\
    \ UInt64, UInt8} at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:361\n\
    \    |(!Matched::Missing, ::Integer) at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:174\n\
    \    ...\n  Stacktrace:\n   [1] is_simple_power(x::Int64, n::Int64)\n     @ Main\
    \ /tmp/tmpqjius6eu.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqjius6eu.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tm"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqjius6eu.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n  if x == 1\
    \ \n    return true\n  elseif x == n \n    return true\n  elseif x%n == 0 \n \
    \   return is_simple_power(x/n, n)\n  else\n    return false\n  end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgg8faimv.jl:28\n  Test threw exception\n\
    \  Expression: candidate(16, 2) == true\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    is_simple_power(!Matched::Int64, ::Int64)\
    \ at /tmp/tmpgg8faimv.jl:12\n  Stacktrace:\n   [1] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmpgg8faimv.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgg8faimv.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgg8faimv.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpgg8faimv.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4, 2) == true\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    is_simple_power(!Matched::Int64, ::Int64)\
    \ at /tmp/tmpgg8faimv.jl:12\n  Stacktrace:\n   [1] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmpgg8faimv.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgg8faimv.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgg8faimv.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpgg8faimv.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(9, 3) == true\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    is_simple_power(!Matched::Int64, ::Int64)\
    \ at /tmp/tmpgg8faimv.jl:12\n  Stacktrace:\n   [1] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmpgg8faimv.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgg8faimv.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/sh"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgg8faimv.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x==n^0\n\
    \        return true\n    elseif x<n\n        return false\n    else\n       \
    \ x=x/n\n        if x==n\n            return true\n        else\n            return\
    \ is_simple_power(x,n)\n        end\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9_f2fmny.jl:31\n  Test threw exception\n\
    \  Expression: candidate(16, 2) == true\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    is_simple_power(!Matched::Int64, ::Int64)\
    \ at /tmp/tmp9_f2fmny.jl:12\n  Stacktrace:\n   [1] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmp9_f2fmny.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9_f2fmny.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9_f2fmny.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp9_f2fmny.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(143214, 16) == false\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    is_simple_power(!Matched::Int64, ::Int64)\
    \ at /tmp/tmp9_f2fmny.jl:12\n  Stacktrace:\n   [1] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmp9_f2fmny.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9_f2fmny.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9_f2fmny.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp9_f2fmny.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    is_simple_power(!Matched::Int64, ::Int64)\
    \ at /tmp/tmp9_f2fmny.jl:12\n  Stacktrace:\n   [1] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmp9_f2fmny.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9_f2fmny.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9_f2fmny.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    x == n^(Int64(log(x)/log(n)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpu8kfpv3i.jl:21\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpu8kfpv3i.jl:13\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpu8kfpv3i.jl:21 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpu8kfpv3i.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpu8kfpv3i.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpu8kfpv3i.jl:13\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpu8kfpv3i.jl:25 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpu8kfpv3i.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpu8kfpv3i.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmpu8kfpv3i.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpu8kfpv3i.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpu8kfpv3i.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpu8kfpv3i.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu8kfpv3i.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    n==1 &&\
    \ x==1 ? return true : return n^(Int64(log(x)/log(n))) == x\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) ==\
    \ true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\
    \t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24,\
    \ 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6)\
    \ == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: colon expected in \"?\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa9xhxmha.jl:14\nin expression starting at\
    \ /tmp/tmpa9xhxmha.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    m = log(x)/log(n)\n\
    \    return m == trunc(m)\nend\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp76jtq0cc.jl:16\nin expression starting at\
    \ /tmp/tmp76jtq0cc.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n   int = floor(log(x)/log(n))\n\
    \   y = n^int\n   x == y \nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    y=log(x)/log(n)\n\
    \    y%1==0 ? true : false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps8ekx6vb.jl:29\n  Expression: candidate(1,\
    \ 1) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps8ekx6vb.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps8ekx6vb.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     1     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps8ekx6vb.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 0 return false end\n    if x == 0 return true end\n    if n == 1 return false\
    \ end\n    if x < 0 || n < 0\n        return false\n    end\n    while n <= x\n\
    \        if n == x\n            return true\n        end\n        n = n*n\n  \
    \  end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp95r8bscx.jl:40\n  Expression: candidate(1,\
    \ 1) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp95r8bscx.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp95r8bscx.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp95r8bscx.jl:41\n  Expression: candidate(1, 12) == true\n \
    \  Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp95r8bscx.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp95r8bscx.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp95r8bscx.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x ==\
    \ 1\n        true\n    else\n        if x % n == 0\n            is_simple_power(x\
    \ / n, n)\n        else\n            false\n        end\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) ==\
    \ true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\
    \t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24,\
    \ 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6)\
    \ == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp64zhj1k0.jl:28\n  Test threw exception\n\
    \  Expression: candidate(16, 2) == true\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    is_simple_power(!Matched::Int64, ::Int64)\
    \ at /tmp/tmp64zhj1k0.jl:12\n  Stacktrace:\n   [1] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmp64zhj1k0.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp64zhj1k0.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp64zhj1k0.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp64zhj1k0.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4, 2) == true\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    is_simple_power(!Matched::Int64, ::Int64)\
    \ at /tmp/tmp64zhj1k0.jl:12\n  Stacktrace:\n   [1] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmp64zhj1k0.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp64zhj1k0.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp64zhj1k0.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp64zhj1k0.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(9, 3) == true\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    is_simple_power(!Matched::Int64, ::Int64)\
    \ at /tmp/tmp64zhj1k0.jl:12\n  Stacktrace:\n   [1] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmp64zhj1k0.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp64zhj1k0.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/sh"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp64zhj1k0.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return (x\
    \ % (n ^ (Int64(log(x, n)))) == 0 && x / (n ^ (Int64(log(x, n)))) == 1) ? true\
    \ : false\nend\n \n \n\"\"\"Find the sum of the first 1000 prime numbers.\n  \
    \  \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpfcg3a7no.jl:17\nin expression starting at /tmp/tmpfcg3a7no.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return sqrt(x)\
    \ % 1 == 0 && sqrt(x) == x/n\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpk52cwmt2.jl:20\n  Expression: candidate(16,\
    \ 2) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk52cwmt2.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk52cwmt2.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpk52cwmt2.jl:29\n  Expression: candidate(1, 12) == true\n \
    \  Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk52cwmt2.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk52cwmt2.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk52cwmt2.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return (x\
    \ == n^Int(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmnp35yv0.jl:21\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpmnp35yv0.jl:13\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpmnp35yv0.jl:21 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpmnp35yv0.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpmnp35yv0.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpmnp35yv0.jl:13\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpmnp35yv0.jl:25 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpmnp35yv0.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpmnp35yv0.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmpmnp35yv0.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpmnp35yv0.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpmnp35yv0.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpmnp35yv0.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmnp35yv0.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return (n^(Int64(log(x)/log(n)))==x)\
    \ ? true : false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpisuya42_.jl:21\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpisuya42_.jl:13\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpisuya42_.jl:21 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpisuya42_.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpisuya42_.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpisuya42_.jl:13\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpisuya42_.jl:25 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpisuya42_.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpisuya42_.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmpisuya42_.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpisuya42_.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpisuya42_.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpisuya42_.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpisuya42_.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    a=x/n\n\
    \    while a>=n\n        if a%n==0\n            a=a/n\n        else\n        \
    \    return false\n        end\n    end\n    return a==1\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\
    \t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t\
    @test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24,\
    \ 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6)\
    \ == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\n\
    end\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 1\n        return true\n    end\n    i = 1\n    while n^i < x\n        i +=\
    \ 1\n    end\n    return n^i == x\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1x_ivswm.jl:36\n  Expression: candidate(1,\
    \ 12) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1x_ivswm.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1x_ivswm.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     1     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1x_ivswm.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if (n <\
    \ 1) || (x < 1)\n        return false\n    end\n    if n == 1\n        return\
    \ true\n    end\n    l = round(log(x) / log(n))\n    return n ^ l == x\nend\n\
    \ \n@assert is_simple_power(1, 4) == true\n@assert is_simple_power(2, 2) == true\n\
    @assert is_simple_power(8, 2) == true\n@assert is_simple_power(3, 2) == false\n\
    @assert is_simple_power(3, 1) == false\n@assert is_simple_power(5, 3) == false\n\
    using Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: AssertionError: is_simple_power(3, 1) == false\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzf6q_2eq.jl:27\nin expression starting at\
    \ /tmp/tmpzf6q_2eq.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    x_float\
    \ = float(x)\n    n_float = float(n)\n    return x_float == (n_float)^round(log(x_float)/log(n_float))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return log(x)/log(n)\
    \ % 1 == 0\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpv49l574x.jl:28\n  Expression: candidate(1,\
    \ 1) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv49l574x.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv49l574x.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     1     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv49l574x.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return is_integer(log(x)/log(n))\n\
    end\nis_simple_power(x::Int64, n::Int64) = is_integer(log(x)/log(n))\nusing Test\n\
    \n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) ==\
    \ true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\
    \t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24,\
    \ 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6)\
    \ == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpad_m6vev.jl:21\n  Test threw exception\n\
    \  Expression: candidate(16, 2) == true\n  UndefVarError: is_integer not defined\n\
    \  Stacktrace:\n   [1] is_simple_power(x::Int64, n::Int64)\n     @ Main /tmp/tmpad_m6vev.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpad_m6vev.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpad_m6vev.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpad_m6vev.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(143214, 16) == false\n  UndefVarError: is_integer not defined\n  Stacktrace:\n\
    \   [1] is_simple_power(x::Int64, n::Int64)\n     @ Main /tmp/tmpad_m6vev.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpad_m6vev.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpad_m6vev.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpad_m6vev.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(4, 2) == true\n  UndefVarError: is_integer not defined\n  Stacktrace:\n\
    \   [1] is_simple_power(x::Int64, n::Int64)\n     @ Main /tmp/tmpad_m6vev.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpad_m6vev.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpad_m6vev.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpad_m6vev.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(9, 3) == true\n  UndefVarError: is_integer not defined\n  Stacktrace:\n\
    \   [1] is_simple_power(x::Int64, n::Int64)\n     @ Main /tmp/tmpad_m6vev.jl:15\n\
    \   [2] macro expansion\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpad_m6vev.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    t = log(x)\
    \ / log(n)\n    t == trunc(t)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw31jjtqp.jl:29\n  Expression: candidate(1,\
    \ 1) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw31jjtqp.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw31jjtqp.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     1     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw31jjtqp.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    sqrtx =\
    \ Int64(sqrt(x))\n    sqrtx * sqrtx == x && sqrtx % n == 0\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\
    \t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t\
    @test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24,\
    \ 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6)\
    \ == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpllb_cd67.jl:22\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(378.4362561911847)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpllb_cd67.jl:13\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpllb_cd67.jl:22 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpllb_cd67.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpllb_cd67.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.898979485566356)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpllb_cd67.jl:13\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpllb_cd67.jl:26 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpllb_cd67.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpllb_cd67.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(11.313708498984761)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpllb_cd67.jl:13\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpllb_cd67.jl:27 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpllb_cd67.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpllb_cd67.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactE"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpllb_cd67.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x ==\
    \ 1\n        if n == 1\n            return true\n        else\n            return\
    \ false\n        end\n    else\n        i = 0\n        while n^i < x\n       \
    \     i += 1\n        end\n        if x == n^i\n            return true\n    \
    \    else\n            return false\n        end\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\
    \t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t\
    @test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24,\
    \ 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6)\
    \ == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmprant0e6d.jl:45\n  Expression: candidate(1,\
    \ 12) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprant0e6d.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprant0e6d.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     1     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprant0e6d.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x ==\
    \ 1 && n == 1\n        return true\n    elseif x == 1 && n != 1\n        return\
    \ false\n    elseif x != 1 && n == 1\n        return false\n    else\n       \
    \ for i = 0:100\n            if n^i == x\n                return true\n      \
    \      end\n        end\n        return false\n    end\nend\n \nusing Test\n\n\
    @testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\
    \t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t\
    @test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24,\
    \ 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6)\
    \ == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpcx8rjoy6.jl:43\n  Expression: candidate(1,\
    \ 12) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcx8rjoy6.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcx8rjoy6.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     1     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcx8rjoy6.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    @assert(n\
    \ > 0)\n    @assert(x > 0)\n    return (log(x)/log(n))%1 == 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) ==\
    \ true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\
    \t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24,\
    \ 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6)\
    \ == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp2zi43cds.jl:30\n  Expression: candidate(1,\
    \ 1) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2zi43cds.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2zi43cds.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     1     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2zi43cds.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return n\
    \ ^ Int(log(x)/log(n)) == x\nend\n \nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7vrwn5mg.jl:22\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmp7vrwn5mg.jl:13\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmp7vrwn5mg.jl:22 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7vrwn5mg.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp7vrwn5mg.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmp7vrwn5mg.jl:13\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmp7vrwn5mg.jl:26 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7vrwn5mg.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp7vrwn5mg.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmp7vrwn5mg.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7vrwn5mg.jl:27 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7vrwn5mg.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp7vrwn5mg.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7vrwn5mg.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x%n !=\
    \ 0\n        return false\n    end\n    i = 2\n    while (x/n)%n == 0\n      \
    \  x = x/n\n        i += 1\n    end\n    return (x == n^i) ? true : false\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpdgydkx43.jl:28\\n  Expression: candidate(16,\
    \ 2) == true\\n   Evaluated: false == true\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpdgydkx43.jl:28 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpdgydkx43.jl:27\\ntest set: Test\
    \ Failed at /tmp/tmpdgydkx43.jl:30\\n  Expression: candidate(4, 2) == true\\n\
    \   Evaluated: false == true\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpdgydkx43.jl:30 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpdgydkx43.jl:27\\ntest set: Test\
    \ Failed at /tmp/tmpdgydkx43.jl:31\\n  Expression: candidate(9, 3) == true\\n\
    \   Evaluated: false == true\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpdgydkx43.jl:31 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpdgydkx43.jl:27\\ntest set: Test\
    \ Failed at /tmp/tmpdgydkx43.jl:32\\n  Expression: candidate(16, 4) == true\\\
    n   Evaluated: false == true\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpdgydkx43.jl:32 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpdgydkx43.jl:27\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    log2x =\
    \ log2(x)\n    log2n = log2(n)\n    return log2x/log2n == int(log2x/log2n)\nend\
    \ \nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpe_nxym_3.jl:22\n  Test threw exception\n\
    \  Expression: candidate(16, 2) == true\n  UndefVarError: int not defined\n  Stacktrace:\n\
    \   [1] is_simple_power(x::Int64, n::Int64)\n     @ Main /tmp/tmpe_nxym_3.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpe_nxym_3.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe_nxym_3.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpe_nxym_3.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(143214, 16) == false\n  UndefVarError: int not defined\n  Stacktrace:\n\
    \   [1] is_simple_power(x::Int64, n::Int64)\n     @ Main /tmp/tmpe_nxym_3.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpe_nxym_3.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe_nxym_3.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpe_nxym_3.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(4, 2) == true\n  UndefVarError: int not defined\n  Stacktrace:\n \
    \  [1] is_simple_power(x::Int64, n::Int64)\n     @ Main /tmp/tmpe_nxym_3.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpe_nxym_3.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe_nxym_3.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpe_nxym_3.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(9, 3) == true\n  UndefVarError: int not defined\n  Stacktrace:\n \
    \  [1] is_simple_power(x::Int64, n::Int64)\n     @ Main /tmp/tmpe_nxym_3.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe_nxym_3.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    for i in\
    \ 1:x \n        if i^n == x \n            return true \n        end \n    end\
    \ \n    return false \nend\nprintln(is_simple_power(1, 4))\nprintln(is_simple_power(2,\
    \ 2))\nprintln(is_simple_power(8, 2))\nprintln(is_simple_power(3, 2))\nprintln(is_simple_power(3,\
    \ 1))\nprintln(is_simple_power(5, 3))\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "true\nfalse\nfalse\nfalse\ntrue\nfalse\ntest set: Test Failed at /tmp/tmpszubwp6f.jl:34\n\
    \  Expression: candidate(9, 3) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpszubwp6f.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpszubwp6f.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     1     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpszubwp6f.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return isqrt(x)\
    \ == n\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t\
    @test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4,\
    \ 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_yqcke5p.jl:20\n  Expression: candidate(16,\
    \ 2) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_yqcke5p.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_yqcke5p.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp_yqcke5p.jl:29\n  Expression: candidate(1, 12) == true\n \
    \  Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_yqcke5p.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_yqcke5p.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_yqcke5p.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return log(x)/log(n)\
    \ == Int(log(x)/log(n))\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpeigg6y6j.jl:21\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpeigg6y6j.jl:13\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpeigg6y6j.jl:21 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpeigg6y6j.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpeigg6y6j.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpeigg6y6j.jl:13\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpeigg6y6j.jl:25 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpeigg6y6j.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpeigg6y6j.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmpeigg6y6j.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpeigg6y6j.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpeigg6y6j.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpeigg6y6j.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeigg6y6j.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n   return (x%n==0)\
    \ && (x/n%n==0)\nend\nfor test in [[1, 4], [2, 2], [8, 2], [3, 2], [3, 1], [5,\
    \ 3]]\n    println(is_simple_power(test[1], test[2]))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t\
    @test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9,\
    \ 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) ==\
    \ false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\
    \t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "false\nfalse\ntrue\nfalse\ntrue\nfalse\ntest set: Test Failed at /tmp/tmpbu15ofmb.jl:28\n\
    \  Expression: candidate(24, 2) == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbu15ofmb.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbu15ofmb.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpbu15ofmb.jl:29\n  Expression: candidate(128, 4) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbu15ofmb.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbu15ofmb.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpbu15ofmb.jl:32\n  Expression: candidate(1, 12) == true\n \
    \  Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbu15ofmb.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbu15ofmb.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     3     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbu15ofmb.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    n_pow_int\
    \ = Int64(log(x) / log(n))\n    n^n_pow_int == x\nend\n\"\"\"\n# Task 7. \nGiven\
    \ a non-negative integer `x`, you are allowed to add at most one digit to it.\
    \ \nFind the smallest non-negative integer that you can get by adding at most\
    \ one digit to `x`.\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpsja9dlu1.jl:16\nin expression starting at /tmp/tmpsja9dlu1.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return n**int(log(x)/log(n))\
    \ == x\nend\n\"\"\"\nYour task is to make a function that can take any non-negative\
    \ integer as a \nargument and return it with its digits in descending order. Essentially,\
    \ rearrange\nthe digits to create the highest possible number.\nExamples:\nInput:\
    \ 21445 Output: 54421\nInput: 145263 Output: 654321\nInput: 1254859723 Output:\
    \ 9875543221\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"x^y\" instead of \"x**y\" for exponentiation,\
    \ and \"x...\" instead of \"**x\" for splatting.\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpx6gvuyqt.jl:13\nin expression starting at /tmp/tmpx6gvuyqt.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return isequal(x^(1/n),\
    \ round(x^(1/n)))\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp478o6ui0.jl:23\n  Expression: candidate(9,\
    \ 3) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp478o6ui0.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp478o6ui0.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     1     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp478o6ui0.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x ==\
    \ n ^ Int(log(x)/log(n))\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t\
    @test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4,\
    \ 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1py1gvm0.jl:25\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmp1py1gvm0.jl:13\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmp1py1gvm0.jl:25 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp1py1gvm0.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp1py1gvm0.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmp1py1gvm0.jl:13\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmp1py1gvm0.jl:29 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp1py1gvm0.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp1py1gvm0.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmp1py1gvm0.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp1py1gvm0.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp1py1gvm0.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp1py1gvm0.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1py1gvm0.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    @assert\
    \ x > 0 && n > 0\n    return x == n^(Int64(log(x)/log(n)))\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\
    \t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t\
    @test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24,\
    \ 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6)\
    \ == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpqc37oe_7.jl:22\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpqc37oe_7.jl:14\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpqc37oe_7.jl:22 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpqc37oe_7.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpqc37oe_7.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpqc37oe_7.jl:14\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpqc37oe_7.jl:26 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpqc37oe_7.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpqc37oe_7.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmpqc37oe_7.jl:14\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpqc37oe_7.jl:27 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpqc37oe_7.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpqc37oe_7.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqc37oe_7.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n  int = Int64(log(x)/log(n))\n\
    \  x == n^int ? true : false\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpa702ykhi.jl:22\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpa702ykhi.jl:13\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpa702ykhi.jl:22 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpa702ykhi.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpa702ykhi.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpa702ykhi.jl:13\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpa702ykhi.jl:26 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpa702ykhi.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpa702ykhi.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmpa702ykhi.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpa702ykhi.jl:27 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpa702ykhi.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpa702ykhi.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa702ykhi.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    # Tests\
    \ if x is a simple power of n\n    if x == 1\n        return true\n    elseif\
    \ n == 1\n        return false\n    elseif x == n\n        return true\n    elseif\
    \ n > x\n        return false\n    else\n        return is_simple_power(x, n-1)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t\
    @test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4,\
    \ 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa1xaekjv.jl:31\n  Expression: candidate(16,\
    \ 2) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa1xaekjv.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa1xaekjv.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpa1xaekjv.jl:33\n  Expression: candidate(4, 2) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa1xaekjv.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa1xaekjv.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpa1xaekjv.jl:34\n  Expression: candidate(9, 3) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa1xaekjv.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa1xaekjv.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpa1xaekjv.jl:35\n  Expression: candidate(16, 4) == true\n \
    \  Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa1xaekjv.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa1xaekjv.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     4     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa1xaekjv.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    math = x\
    \ ** (1 / n)\n    if x == n ** math\n        return true\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"x^y\" instead of \"x**y\" for exponentiation,\
    \ and \"x...\" instead of \"**x\" for splatting.\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp70njdxe3.jl:13\nin expression starting at /tmp/tmp70njdxe3.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n>0 &&\
    \ n != 1\n        return x%n == 0 && is_simple_power(x/n, n)\n    elseif n ==\
    \ 1\n        return x == 1\n    else\n        return false\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp74sehu_n.jl:26\n  Test threw exception\n\
    \  Expression: candidate(16, 2) == true\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    is_simple_power(!Matched::Int64, ::Int64)\
    \ at /tmp/tmp74sehu_n.jl:12\n  Stacktrace:\n   [1] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmp74sehu_n.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp74sehu_n.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp74sehu_n.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp74sehu_n.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(4, 2) == true\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    is_simple_power(!Matched::Int64, ::Int64)\
    \ at /tmp/tmp74sehu_n.jl:12\n  Stacktrace:\n   [1] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmp74sehu_n.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp74sehu_n.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp74sehu_n.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp74sehu_n.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(9, 3) == true\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    is_simple_power(!Matched::Int64, ::Int64)\
    \ at /tmp/tmp74sehu_n.jl:12\n  Stacktrace:\n   [1] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmp74sehu_n.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp74sehu_n.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/sh"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp74sehu_n.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x ==\
    \ 1 && n == 1 \n        return true\n    elseif x == 1 && n != 1\n        return\
    \ false\n    else\n        return (n^(Int(log(x)/log(n)))) == x\n    end\nend\n\
    is_simple_power(4,2)\n \nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_fguyowo.jl:29\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmp_fguyowo.jl:18\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmp_fguyowo.jl:29 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_fguyowo.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp_fguyowo.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmp_fguyowo.jl:18\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmp_fguyowo.jl:33 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_fguyowo.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp_fguyowo.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmp_fguyowo.jl:18\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_fguyowo.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_fguyowo.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp_fguyowo.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_fguyowo.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return (x\
    \ % n == 0) && (n ^ (log(x) / log(n)) == x)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpf00cepyf.jl:26\n  Expression: candidate(128,\
    \ 4) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf00cepyf.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf00cepyf.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpf00cepyf.jl:27\n  Expression: candidate(12, 6) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf00cepyf.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf00cepyf.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpf00cepyf.jl:29\n  Expression: candidate(1, 12) == true\n \
    \  Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf00cepyf.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf00cepyf.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     3     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf00cepyf.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return n**int(log(x)/log(n))\
    \ == x ? true : false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"x^y\" instead of \"x**y\" for exponentiation,\
    \ and \"x...\" instead of \"**x\" for splatting.\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7lhximot.jl:13\nin expression starting at /tmp/tmp7lhximot.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    \"\"\"returns\
    \ true if x is a simple power of n\n    x: first argument\n    n: second argument\n\
    \    returns: boolean True or False\n    \"\"\"\n    if x==1\n        return true\n\
    \    elseif x>n\n        return is_simple_power(x%n, n)\n    elseif x<n\n    \
    \    return false\n    else\n        return false\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\
    \t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t\
    @test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24,\
    \ 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6)\
    \ == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp32ucd0e3.jl:33\n  Expression: candidate(16,\
    \ 2) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp32ucd0e3.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp32ucd0e3.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp32ucd0e3.jl:35\n  Expression: candidate(4, 2) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp32ucd0e3.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp32ucd0e3.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp32ucd0e3.jl:36\n  Expression: candidate(9, 3) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp32ucd0e3.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp32ucd0e3.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp32ucd0e3.jl:37\n  Expression: candidate(16, 4) == true\n \
    \  Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp32ucd0e3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp32ucd0e3.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     4     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp32ucd0e3.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n  return x ==\
    \ n^(round(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    (n::Int64)\
    \ == x^(Int64(log(x)/log(n))) ? true : false\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbcpdsk9t.jl:20\n  Expression: candidate(16,\
    \ 2) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbcpdsk9t.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbcpdsk9t.jl:19\ntest set: Error\
    \ During Test at /tmp/tmpbcpdsk9t.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n \
    \ Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpbcpdsk9t.jl:13\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpbcpdsk9t.jl:21 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpbcpdsk9t.jl:19\ntest set:\
    \ Test Failed at /tmp/tmpbcpdsk9t.jl:22\n  Expression: candidate(4, 2) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbcpdsk9t.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbcpdsk9t.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpbcpdsk9t.jl:23\n  Expression: candidate(9, 3) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbcpdsk9t.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbcpdsk9t.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpbcpdsk9t.jl:"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbcpdsk9t.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    #Edge cases\n\
    \    if x==0 && n==0\n        return false\n    end\n    if n==0 \n        return\
    \ false\n    end\n    if x==0\n        return true\n    end\n    if n==1\n   \
    \     return true\n    end\n    if n==2 && x<2\n        return false\n    end\n\
    \    #General cases\n    y = n\n    while y < x\n        y *= n\n    end\n   \
    \ return x==y\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp06gdf_1.jl:50\n  Expression: candidate(1,\
    \ 12) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp06gdf_1.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp06gdf_1.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     1     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp06gdf_1.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return try\n\
    \           (log(x)/log(n)) % 1 == 0\n        catch e\n            return false\n\
    \        end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2ko0a3ft.jl:32\n  Expression: candidate(1,\
    \ 1) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2ko0a3ft.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2ko0a3ft.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     1     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2ko0a3ft.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    try\n  \
    \      x = log(x)/log(n)\n        x == parse(Int64, x)\n    catch\n        false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t\
    @test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4,\
    \ 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppszwwmbj.jl:25\n  Expression: candidate(16,\
    \ 2) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppszwwmbj.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppszwwmbj.jl:24\ntest set: Test\
    \ Failed at /tmp/tmppszwwmbj.jl:27\n  Expression: candidate(4, 2) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppszwwmbj.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppszwwmbj.jl:24\ntest set: Test\
    \ Failed at /tmp/tmppszwwmbj.jl:28\n  Expression: candidate(9, 3) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppszwwmbj.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppszwwmbj.jl:24\ntest set: Test\
    \ Failed at /tmp/tmppszwwmbj.jl:29\n  Expression: candidate(16, 4) == true\n \
    \  Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppszwwmbj.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppszwwmbj.jl:24\ntest set: Test\
    \ Failed at /tmp/tmppszwwmbj.jl:33\n  Expression: candidate(1, 1) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppszwwmbj.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    for i =\
    \ 1:Int64(x)\n        if n^i == x\n            return true\n        end\n    end\n\
    \    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj4kgiobz.jl:34\n  Expression: candidate(1,\
    \ 12) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj4kgiobz.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj4kgiobz.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     1     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj4kgiobz.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    x % n !=\
    \ 0 || \n    x == n &&\n    x != 0 &&\n    n != 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t\
    @test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9,\
    \ 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) ==\
    \ false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\
    \t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8s48l8wu.jl:23\n  Expression: candidate(16,\
    \ 2) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8s48l8wu.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8s48l8wu.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp8s48l8wu.jl:24\n  Expression: candidate(143214, 16) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8s48l8wu.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8s48l8wu.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp8s48l8wu.jl:25\n  Expression: candidate(4, 2) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8s48l8wu.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8s48l8wu.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp8s48l8wu.jl:26\n  Expression: candidate(9, 3) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8s48l8wu.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8s48l8wu.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp8s48l8wu.jl:27\n  Expression: candidate(16, 4) == true\n \
    \  Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [i"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8s48l8wu.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    log(x, n)\
    \ |> ceil == floor\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpghmv7un5.jl:20\n  Expression: candidate(16,\
    \ 2) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpghmv7un5.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpghmv7un5.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpghmv7un5.jl:22\n  Expression: candidate(4, 2) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpghmv7un5.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpghmv7un5.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpghmv7un5.jl:23\n  Expression: candidate(9, 3) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpghmv7un5.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpghmv7un5.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpghmv7un5.jl:24\n  Expression: candidate(16, 4) == true\n \
    \  Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpghmv7un5.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpghmv7un5.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpghmv7un5.jl:28\n  Expression: candidate(1, 1) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpghmv7un5.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    x % n ==\
    \ 0 && x % 1 == 0 || x == 1\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3r9_n39d.jl:25\n  Expression: candidate(24,\
    \ 2) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3r9_n39d.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3r9_n39d.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp3r9_n39d.jl:26\n  Expression: candidate(128, 4) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3r9_n39d.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3r9_n39d.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp3r9_n39d.jl:27\n  Expression: candidate(12, 6) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3r9_n39d.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3r9_n39d.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     3     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3r9_n39d.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return n^round(log(x)/log(n))\
    \ == x\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t\
    @test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4,\
    \ 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return (x\
    \ % n == 0) && is_simple_power(x \xF7 n, n)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpm_riwoq5.jl:20\\n  Expression: candidate(16,\
    \ 2) == true\\n   Evaluated: false == true\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpm_riwoq5.jl:20 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpm_riwoq5.jl:19\\ntest set: Test\
    \ Failed at /tmp/tmpm_riwoq5.jl:22\\n  Expression: candidate(4, 2) == true\\n\
    \   Evaluated: false == true\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpm_riwoq5.jl:22 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpm_riwoq5.jl:19\\ntest set: Test\
    \ Failed at /tmp/tmpm_riwoq5.jl:23\\n  Expression: candidate(9, 3) == true\\n\
    \   Evaluated: false == true\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpm_riwoq5.jl:23 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpm_riwoq5.jl:19\\ntest set: Test\
    \ Failed at /tmp/tmpm_riwoq5.jl:24\\n  Expression: candidate(16, 4) == true\\\
    n   Evaluated: false == true\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpm_riwoq5.jl:24 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpm_riwoq5.jl:19\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    \"\"\"\n\
    \    Determines if x is a simple power of n.\n    \"\"\"\n    return x == n^(log(x)/log(n))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9l6ctuwp.jl:29\n  Expression: candidate(128,\
    \ 4) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9l6ctuwp.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9l6ctuwp.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp9l6ctuwp.jl:30\n  Expression: candidate(12, 6) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9l6ctuwp.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9l6ctuwp.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9l6ctuwp.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    check =\
    \ false\n    for i = 1:100\n        if n^i == x\n            check = true\n  \
    \      end\n    end\n    return check\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8klfk64t.jl:35\n  Expression: candidate(1,\
    \ 12) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8klfk64t.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8klfk64t.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     1     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8klfk64t.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ % n == 0 && !(has_integer_sqrt(x/n))\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3g_g1nrw.jl:20\n  Test threw exception\n\
    \  Expression: candidate(16, 2) == true\n  UndefVarError: has_integer_sqrt not\
    \ defined\n  Stacktrace:\n   [1] is_simple_power(x::Int64, n::Int64)\n     @ Main\
    \ /tmp/tmp3g_g1nrw.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3g_g1nrw.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3g_g1nrw.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp3g_g1nrw.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(4, 2) == true\n  UndefVarError: has_integer_sqrt not defined\n  Stacktrace:\n\
    \   [1] is_simple_power(x::Int64, n::Int64)\n     @ Main /tmp/tmp3g_g1nrw.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3g_g1nrw.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3g_g1nrw.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp3g_g1nrw.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(9, 3) == true\n  UndefVarError: has_integer_sqrt not defined\n  Stacktrace:\n\
    \   [1] is_simple_power(x::Int64, n::Int64)\n     @ Main /tmp/tmp3g_g1nrw.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3g_g1nrw.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3g_g1nrw.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp3g_g1nrw.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(16, 4) == true\n  UndefVarError: has_integer_sqrt not defined\n  Stacktrace:\n\
    \   [1] is_simple_power(x::Int64, n::Int64)\n     @ Main /tmp/tmp3g_g1nrw.jl:13\n\
    \   [2"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3g_g1nrw.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x==1\n\
    \        return true\n    elseif x%n != 0 \n        return false\n    else\n \
    \       return is_simple_power(x/n, n)\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpy79sw6wk.jl:26\n  Test threw exception\n\
    \  Expression: candidate(16, 2) == true\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    is_simple_power(!Matched::Int64, ::Int64)\
    \ at /tmp/tmpy79sw6wk.jl:12\n  Stacktrace:\n   [1] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmpy79sw6wk.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy79sw6wk.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy79sw6wk.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpy79sw6wk.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(4, 2) == true\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    is_simple_power(!Matched::Int64, ::Int64)\
    \ at /tmp/tmpy79sw6wk.jl:12\n  Stacktrace:\n   [1] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmpy79sw6wk.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy79sw6wk.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy79sw6wk.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpy79sw6wk.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(9, 3) == true\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    is_simple_power(!Matched::Int64, ::Int64)\
    \ at /tmp/tmpy79sw6wk.jl:12\n  Stacktrace:\n   [1] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmpy79sw6wk.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy79sw6wk.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/sh"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy79sw6wk.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ in Set(x^y for y in 1:100) # consider only y in [1, 100]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\
    \t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t\
    @test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24,\
    \ 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6)\
    \ == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpct0xrp9u.jl:21\n  Expression: candidate(143214,\
    \ 16) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpct0xrp9u.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpct0xrp9u.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpct0xrp9u.jl:25\n  Expression: candidate(24, 2) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpct0xrp9u.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpct0xrp9u.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpct0xrp9u.jl:26\n  Expression: candidate(128, 4) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpct0xrp9u.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpct0xrp9u.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpct0xrp9u.jl:27\n  Expression: candidate(12, 6) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpct0xrp9u.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpct0xrp9u.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     4     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpct0xrp9u.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    for k in\
    \ 1:1000\n        if n^k == x\n            return true\n        end\n    end\n\
    \    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw7fvfhlv.jl:34\n  Expression: candidate(1,\
    \ 12) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw7fvfhlv.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw7fvfhlv.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     1     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw7fvfhlv.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return n^round(log(x)/log(n))\
    \ == x\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t\
    @test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4,\
    \ 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(round(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x % n\
    \ == 0 \n        return true\n    else\n        return false\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe5n8su1m.jl:29\n  Expression: candidate(24,\
    \ 2) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe5n8su1m.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe5n8su1m.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpe5n8su1m.jl:30\n  Expression: candidate(128, 4) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe5n8su1m.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe5n8su1m.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpe5n8su1m.jl:31\n  Expression: candidate(12, 6) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe5n8su1m.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe5n8su1m.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpe5n8su1m.jl:33\n  Expression: candidate(1, 12) == true\n \
    \  Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe5n8su1m.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe5n8su1m.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     4     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe5n8su1m.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x ==\
    \ n^isinteger(log(x)/log(n))\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t\
    @test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4,\
    \ 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpoysenrap.jl:24\n  Expression: candidate(16,\
    \ 2) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoysenrap.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoysenrap.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpoysenrap.jl:26\n  Expression: candidate(4, 2) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoysenrap.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoysenrap.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpoysenrap.jl:27\n  Expression: candidate(9, 3) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoysenrap.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoysenrap.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpoysenrap.jl:28\n  Expression: candidate(16, 4) == true\n \
    \  Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoysenrap.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoysenrap.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpoysenrap.jl:33\n  Expression: candidate(1, 12) == true\n \
    \  Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoysenrap.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return log(n,\
    \ x) % 1 == 0\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9hu9tdod.jl:28\n  Expression: candidate(1,\
    \ 1) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9hu9tdod.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9hu9tdod.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     1     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9hu9tdod.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    n^round(log(x,\
    \ n)) == x\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp86xsqliu.jl:20\n  Expression: candidate(16,\
    \ 2) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp86xsqliu.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp86xsqliu.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp86xsqliu.jl:22\n  Expression: candidate(4, 2) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp86xsqliu.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp86xsqliu.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp86xsqliu.jl:23\n  Expression: candidate(9, 3) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp86xsqliu.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp86xsqliu.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp86xsqliu.jl:24\n  Expression: candidate(16, 4) == true\n \
    \  Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp86xsqliu.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp86xsqliu.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp86xsqliu.jl:29\n  Expression: candidate(1, 12) == true\n \
    \  Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp86xsqliu.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return n^(log(x,n))\
    \ == x\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t\
    @test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4,\
    \ 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpg7auk6p7.jl:20\n  Expression: candidate(16,\
    \ 2) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg7auk6p7.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg7auk6p7.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpg7auk6p7.jl:22\n  Expression: candidate(4, 2) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg7auk6p7.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg7auk6p7.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpg7auk6p7.jl:23\n  Expression: candidate(9, 3) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg7auk6p7.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg7auk6p7.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpg7auk6p7.jl:24\n  Expression: candidate(16, 4) == true\n \
    \  Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg7auk6p7.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg7auk6p7.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpg7auk6p7.jl:29\n  Expression: candidate(1, 12) == true\n \
    \  Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg7auk6p7.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    n == 0 &&\
    \ return false # avoid division by zero\n    v = log(x) / log(n)\n    v > 1 &&\
    \ return trunc(v) == v\n    false\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphruua5w3.jl:31\n  Expression: candidate(1,\
    \ 1) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphruua5w3.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphruua5w3.jl:22\ntest set: Test\
    \ Failed at /tmp/tmphruua5w3.jl:32\n  Expression: candidate(1, 12) == true\n \
    \  Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphruua5w3.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphruua5w3.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphruua5w3.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    # TODO:\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_f6rgi4w.jl:20\n  Test threw exception\n\
    \  Expression: candidate(16, 2) == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] is_simple_power(x::Int64, n::Int64)\n     @ Main\
    \ /tmp/tmp_f6rgi4w.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_f6rgi4w.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_f6rgi4w.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp_f6rgi4w.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(143214, 16) == false\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] is_simple_power(x::Int64, n::Int64)\n     @ Main\
    \ /tmp/tmp_f6rgi4w.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_f6rgi4w.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level sc"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_f6rgi4w.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if isinteger(log(x,\
    \ n)) \n        return true\n    else\n        return false\n    end\nend\n  \
    \  \nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp99qspei0.jl:25\n  Expression: candidate(16,\
    \ 2) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp99qspei0.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp99qspei0.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp99qspei0.jl:27\n  Expression: candidate(4, 2) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp99qspei0.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp99qspei0.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp99qspei0.jl:28\n  Expression: candidate(9, 3) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp99qspei0.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp99qspei0.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp99qspei0.jl:29\n  Expression: candidate(16, 4) == true\n \
    \  Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp99qspei0.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp99qspei0.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp99qspei0.jl:33\n  Expression: candidate(1, 1) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp99qspei0.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ % n == 0 ? (x / n)% n == 0 : false\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpguvbecvq.jl:25\n  Expression: candidate(24,\
    \ 2) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpguvbecvq.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpguvbecvq.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpguvbecvq.jl:26\n  Expression: candidate(128, 4) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpguvbecvq.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpguvbecvq.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpguvbecvq.jl:29\n  Expression: candidate(1, 12) == true\n \
    \  Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpguvbecvq.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpguvbecvq.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     3     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpguvbecvq.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return log2(x)/log2(n)\
    \ == int(log2(x)/log2(n))\nend\n#test\nfor n in [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\
    \    if n == 1 || n == 2\n        assert(is_simple_power(2^n, 2) == true)\n  \
    \  else\n        assert(is_simple_power(2^n, 2) == false)\n    end\nend\n \nfor\
    \ n in [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    if n == 1 || n == 3\n        assert(is_simple_power(3^n,\
    \ 3) == true)\n    else\n        assert(is_simple_power(3^n, 3) == false)\n  \
    \  end\nend\n \nfor n in [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    if n == 1 || n == 4\n\
    \        assert(is_simple_power(4^n, 4) == true)\n    else\n        assert(is_simple_power(4^n,\
    \ 4) == false)\n    end\nend\n \nfor n in [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    if\
    \ n == 1 || n == 5\n        assert(is_simple_power(5^n, 5) == true)\n    else\n\
    \        assert(is_simple_power(5^n, 5) == false)\n    end\nend\n \nfor n in [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]\n    if n == 1 || n == 6\n        assert(is_simple_power(6^n,\
    \ 6) == true)\n    else\n        assert(is_simple_power(6^n, 6) == false)\n  \
    \  end\nend\n \nfor n in [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    if n == 1 || n == 7\n\
    \        assert(is_simple_power(7^n, 7) == true)\n    else\n        assert(is_simple_power(7^n,\
    \ 7) == false)\n   \nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: int not defined\nStacktrace:\n [1] is_simple_power(x::Int64,\
    \ n::Int64)\n   @ Main /tmp/tmpt9y8o7tn.jl:13\n [2] top-level scope\n   @ /tmp/tmpt9y8o7tn.jl:18\n\
    in expression starting at /tmp/tmpt9y8o7tn.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    #your code\
    \ goes here\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpa7516hyf.jl:20\n  Test threw exception\n\
    \  Expression: candidate(16, 2) == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] is_simple_power(x::Int64, n::Int64)\n     @ Main\
    \ /tmp/tmpa7516hyf.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa7516hyf.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa7516hyf.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpa7516hyf.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(143214, 16) == false\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] is_simple_power(x::Int64, n::Int64)\n     @ Main\
    \ /tmp/tmpa7516hyf.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa7516hyf.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level sc"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa7516hyf.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ % n == 0 ? is_simple_power(x/n, n) : (x == 1)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpb10jbrls.jl:20\n  Test threw exception\n\
    \  Expression: candidate(16, 2) == true\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    is_simple_power(!Matched::Int64, ::Int64)\
    \ at /tmp/tmpb10jbrls.jl:12\n  Stacktrace:\n   [1] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmpb10jbrls.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb10jbrls.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb10jbrls.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpb10jbrls.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(4, 2) == true\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    is_simple_power(!Matched::Int64, ::Int64)\
    \ at /tmp/tmpb10jbrls.jl:12\n  Stacktrace:\n   [1] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmpb10jbrls.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb10jbrls.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb10jbrls.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpb10jbrls.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(9, 3) == true\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    is_simple_power(!Matched::Int64, ::Int64)\
    \ at /tmp/tmpb10jbrls.jl:12\n  Stacktrace:\n   [1] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmpb10jbrls.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb10jbrls.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/sh"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb10jbrls.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ > 0 && x % n == 0 && x % (n^2) != 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqou3pdbi.jl:20\n  Expression: candidate(16,\
    \ 2) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqou3pdbi.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqou3pdbi.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpqou3pdbi.jl:22\n  Expression: candidate(4, 2) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqou3pdbi.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqou3pdbi.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpqou3pdbi.jl:23\n  Expression: candidate(9, 3) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqou3pdbi.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqou3pdbi.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpqou3pdbi.jl:24\n  Expression: candidate(16, 4) == true\n \
    \  Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqou3pdbi.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqou3pdbi.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpqou3pdbi.jl:27\n  Expression: candidate(12, 6) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inline"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqou3pdbi.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(Int64(log(x)/log(n))) \nend\n \nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmap_h25r.jl:22\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpmap_h25r.jl:13\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpmap_h25r.jl:22 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpmap_h25r.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpmap_h25r.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpmap_h25r.jl:13\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpmap_h25r.jl:26 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpmap_h25r.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpmap_h25r.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmpmap_h25r.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpmap_h25r.jl:27 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpmap_h25r.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpmap_h25r.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmap_h25r.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return log2(x)/log2(n)\
    \ == Int(log2(x)/log2(n))\nend\n \nusing Test\n\n@testset begin\n\ncandidate =\
    \ is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4emzhaod.jl:22\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmp4emzhaod.jl:13\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmp4emzhaod.jl:22 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp4emzhaod.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp4emzhaod.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721156)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmp4emzhaod.jl:13\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmp4emzhaod.jl:26 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp4emzhaod.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp4emzhaod.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmp4emzhaod.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp4emzhaod.jl:27 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp4emzhaod.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp4emzhaod.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4emzhaod.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    \n    #log\
    \ x to the base n\n    log_x_n = log(x)/log(n)\n    \n    #check if log_x_n is\
    \ an integer\n    if isinteger(log_x_n) == true\n        return true\n    else\n\
    \        return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxypzz6lb.jl:37\n  Expression: candidate(1,\
    \ 1) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxypzz6lb.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxypzz6lb.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     1     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxypzz6lb.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x==n\
    \ && x==1\n        return true\n    elseif x%n == 0 && x/n%n == 0\n        return\
    \ true\n    else\n        return false\n    end\nend\n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t\
    @test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9,\
    \ 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) ==\
    \ false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\
    \t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdc7gmirv.jl:32\n  Expression: candidate(24,\
    \ 2) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdc7gmirv.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdc7gmirv.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpdc7gmirv.jl:33\n  Expression: candidate(128, 4) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdc7gmirv.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdc7gmirv.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpdc7gmirv.jl:36\n  Expression: candidate(1, 12) == true\n \
    \  Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdc7gmirv.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdc7gmirv.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     3     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdc7gmirv.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 0\n        return 0\n    end\n    if n == 1 \n        return 1\n    end\n  \
    \  if x == 1\n        return true\n    end\n    if x == 0\n        return false\n\
    \    end\n    for i in 0:x\n        if n^i == x\n            return true\n   \
    \     end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    a = [n^i\
    \ for i in 1:log(Int64,x)]\n    return x in a\nend\nprintln(is_simple_power(27,3))\n\
    using Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: MethodError: no method matching log(::Type{Int64}, ::Int64)\n\
    Closest candidates are:\n  log(!Matched::Irrational{:\u212F}, ::Number) at /shared/centos7/julia/1.7.3/share/julia/base/mathconstants.jl:124\n\
    \  log(!Matched::T, ::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/math.jl:315\n\
    \  log(!Matched::Number, ::Number) at /shared/centos7/julia/1.7.3/share/julia/base/math.jl:358\n\
    Stacktrace:\n [1] is_simple_power(x::Int64, n::Int64)\n   @ Main /tmp/tmpzgplukdx.jl:13\n\
    \ [2] top-level scope\n   @ /tmp/tmpzgplukdx.jl:16\nin expression starting at\
    \ /tmp/tmpzgplukdx.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x ==\
    \ 1\n        return true\n    end\n    if x == n\n        return true\n    end\n\
    \    if x != n\n        return false\n    end\n    if x % n != 0\n        return\
    \ false\n    end\n    if x % n == 0\n        while x != n\n            x /= n\n\
    \        end\n        return true\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpalp87nwn.jl:37\n  Expression: candidate(16,\
    \ 2) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpalp87nwn.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpalp87nwn.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpalp87nwn.jl:39\n  Expression: candidate(4, 2) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpalp87nwn.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpalp87nwn.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpalp87nwn.jl:40\n  Expression: candidate(9, 3) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpalp87nwn.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpalp87nwn.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpalp87nwn.jl:41\n  Expression: candidate(16, 4) == true\n \
    \  Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpalp87nwn.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpalp87nwn.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     4     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpalp87nwn.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x ==\
    \ n^2 return true end\n    if x % n == 0 \n        return is_simple_power(x /\
    \ n, n)\n    else\n        return false\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t\
    @test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9,\
    \ 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) ==\
    \ false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\
    \t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1159zwj5.jl:25\n  Test threw exception\n\
    \  Expression: candidate(16, 2) == true\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    is_simple_power(!Matched::Int64, ::Int64)\
    \ at /tmp/tmp1159zwj5.jl:12\n  Stacktrace:\n   [1] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmp1159zwj5.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1159zwj5.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1159zwj5.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp1159zwj5.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    is_simple_power(!Matched::Int64, ::Int64)\
    \ at /tmp/tmp1159zwj5.jl:12\n  Stacktrace:\n   [1] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmp1159zwj5.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1159zwj5.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1159zwj5.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp1159zwj5.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    is_simple_power(!Matched::Int64, ::Int64)\
    \ at /tmp/tmp1159zwj5.jl:12\n  Stacktrace:\n   [1] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmp1159zwj5.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1159zwj5.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1159zwj5.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    for i in\
    \ 0:10\n        if n^i == x\n            return true\n        end\n    end\n \
    \   return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    k = log(x)\
    \ / log(n)\n    Int64(k) == k ? true : false\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpdjf1q1ba.jl:22\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpdjf1q1ba.jl:14\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpdjf1q1ba.jl:22 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdjf1q1ba.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpdjf1q1ba.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpdjf1q1ba.jl:14\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpdjf1q1ba.jl:26 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdjf1q1ba.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpdjf1q1ba.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmpdjf1q1ba.jl:14\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdjf1q1ba.jl:27 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdjf1q1ba.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpdjf1q1ba.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdjf1q1ba.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return (x\
    \ % n == 0) && is_simple_power(x/n, n)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpqt22ucc_.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(16, 2) == true\\n  MethodError: no method\
    \ matching is_simple_power(::Float64, ::Int64)\\n  Closest candidates are:\\n\
    \    is_simple_power(!Matched::Int64, ::Int64) at /tmp/tmpqt22ucc_.jl:12\\n  Stacktrace:\\\
    n   [1] is_simple_power(x::Int64, n::Int64)\\n     @ Main /tmp/tmpqt22ucc_.jl:13\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpqt22ucc_.jl:20 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpqt22ucc_.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpqt22ucc_.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4, 2) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpqt22ucc_.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpqt22ucc_.jl:13\\n   [2] macro expansion\\n \
    \    @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpqt22ucc_.jl:22 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpqt22ucc_.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpqt22ucc_.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(9, 3) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpqt22ucc_.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpqt22ucc_.jl:13\\n   [2] macro expansion\\n \
    \    @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpqt22ucc_.jl:23 [inlined]\\\
    n   [4] macr"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x%n ==\
    \ 0\n        return true\n    else\n        return false\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpovk0btlc.jl:29\n  Expression: candidate(24,\
    \ 2) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpovk0btlc.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpovk0btlc.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpovk0btlc.jl:30\n  Expression: candidate(128, 4) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpovk0btlc.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpovk0btlc.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpovk0btlc.jl:31\n  Expression: candidate(12, 6) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpovk0btlc.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpovk0btlc.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpovk0btlc.jl:33\n  Expression: candidate(1, 12) == true\n \
    \  Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpovk0btlc.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpovk0btlc.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     4     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpovk0btlc.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 1\n        return true\n    end\n    if x % n != 0\n        return false\n \
    \   end\n    x /= n\n    return is_simple_power(x, n)\nend\nis_simple_power(7,\
    \ 1)\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9qe3xhx9.jl:28\n  Test threw exception\n\
    \  Expression: candidate(16, 2) == true\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    is_simple_power(!Matched::Int64, ::Int64)\
    \ at /tmp/tmp9qe3xhx9.jl:12\n  Stacktrace:\n   [1] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmp9qe3xhx9.jl:20\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9qe3xhx9.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9qe3xhx9.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp9qe3xhx9.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4, 2) == true\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    is_simple_power(!Matched::Int64, ::Int64)\
    \ at /tmp/tmp9qe3xhx9.jl:12\n  Stacktrace:\n   [1] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmp9qe3xhx9.jl:20\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9qe3xhx9.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9qe3xhx9.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp9qe3xhx9.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(9, 3) == true\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    is_simple_power(!Matched::Int64, ::Int64)\
    \ at /tmp/tmp9qe3xhx9.jl:12\n  Stacktrace:\n   [1] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmp9qe3xhx9.jl:20\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9qe3xhx9.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/sh"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9qe3xhx9.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    res = x\n\
    \    while res % n == 0 \n        res = res / n\n    end\n    return res == 1\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    (x % n ==\
    \ 0) && (is_simple_power(x/n, n)) || (x == n)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpjxob0qeo.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(16, 2) == true\\n  MethodError: no method\
    \ matching is_simple_power(::Float64, ::Int64)\\n  Closest candidates are:\\n\
    \    is_simple_power(!Matched::Int64, ::Int64) at /tmp/tmpjxob0qeo.jl:12\\n  Stacktrace:\\\
    n   [1] is_simple_power(x::Int64, n::Int64)\\n     @ Main /tmp/tmpjxob0qeo.jl:13\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpjxob0qeo.jl:20 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpjxob0qeo.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpjxob0qeo.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4, 2) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpjxob0qeo.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpjxob0qeo.jl:13\\n   [2] macro expansion\\n \
    \    @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpjxob0qeo.jl:22 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpjxob0qeo.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpjxob0qeo.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(9, 3) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpjxob0qeo.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpjxob0qeo.jl:13\\n   [2] macro expansion\\n \
    \    @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpjxob0qeo.jl:23 [inlined]\\\
    n   [4] macr"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x % n\
    \ == 0 \n        x /= n\n        if x == 1\n            return true\n        else\n\
    \            is_simple_power(x, n)\n        end\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t\
    @test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4,\
    \ 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp3lebvu27.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(16, 2) == true\\n  MethodError: no method\
    \ matching is_simple_power(::Float64, ::Int64)\\n  Closest candidates are:\\n\
    \    is_simple_power(!Matched::Int64, ::Int64) at /tmp/tmp3lebvu27.jl:12\\n  Stacktrace:\\\
    n   [1] is_simple_power(x::Int64, n::Int64)\\n     @ Main /tmp/tmp3lebvu27.jl:18\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp3lebvu27.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp3lebvu27.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmp3lebvu27.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(4, 2) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmp3lebvu27.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmp3lebvu27.jl:18\\n   [2] macro expansion\\n \
    \    @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp3lebvu27.jl:31 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp3lebvu27.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmp3lebvu27.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(9, 3) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmp3lebvu27.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmp3lebvu27.jl:18\\n   [2] macro expansion\\n \
    \    @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp3lebvu27.jl:32 [inlined]\\\
    n   [4] macr"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return (Int64(log(x)\
    \ / log(n)) == log(x) / log(n))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpykvszu6g.jl:21\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpykvszu6g.jl:13\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpykvszu6g.jl:21 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpykvszu6g.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpykvszu6g.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpykvszu6g.jl:13\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpykvszu6g.jl:25 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpykvszu6g.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpykvszu6g.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmpykvszu6g.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpykvszu6g.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpykvszu6g.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpykvszu6g.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpykvszu6g.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    #we can\
    \ do this with recursion\n    #base case \n    if x==1\n        return true\n\
    \    else\n        if x%n==0 \n            return is_simple_power(x/n, n)\n  \
    \      else\n            return false\n        end\n    end\n    \nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2nwvzjed.jl:31\n  Test threw exception\n\
    \  Expression: candidate(16, 2) == true\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    is_simple_power(!Matched::Int64, ::Int64)\
    \ at /tmp/tmp2nwvzjed.jl:12\n  Stacktrace:\n   [1] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmp2nwvzjed.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2nwvzjed.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2nwvzjed.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp2nwvzjed.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(4, 2) == true\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    is_simple_power(!Matched::Int64, ::Int64)\
    \ at /tmp/tmp2nwvzjed.jl:12\n  Stacktrace:\n   [1] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmp2nwvzjed.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2nwvzjed.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2nwvzjed.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp2nwvzjed.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(9, 3) == true\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    is_simple_power(!Matched::Int64, ::Int64)\
    \ at /tmp/tmp2nwvzjed.jl:12\n  Stacktrace:\n   [1] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmp2nwvzjed.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2nwvzjed.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/sh"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2nwvzjed.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == (n ^ round(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    for y in\
    \ 1:x\n        if y == x\n            return true\n        elseif n^y == x\n \
    \           return true\n        end\n    end\n    return false\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) ==\
    \ true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\
    \t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24,\
    \ 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6)\
    \ == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp4kbjrv6r.jl:28\n  Expression: candidate(143214,\
    \ 16) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4kbjrv6r.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4kbjrv6r.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp4kbjrv6r.jl:32\n  Expression: candidate(24, 2) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4kbjrv6r.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4kbjrv6r.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp4kbjrv6r.jl:33\n  Expression: candidate(128, 4) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4kbjrv6r.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4kbjrv6r.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp4kbjrv6r.jl:34\n  Expression: candidate(12, 6) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4kbjrv6r.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4kbjrv6r.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     4     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4kbjrv6r.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^1 || x == n^2 || x == n^3 || x == n^4 || x == n^5 || x == n^6 || x == n^7\
    \ || x == n^8 || x == n^9 || x == n^10 || x == n^11 || x == n^12 || x == n^13\
    \ || x == n^14 || x == n^15 || x == n^16 || x == n^17 || x == n^18 || x == n^19\
    \ || x == n^20 || x == n^21 || x == n^22 || x == n^23 || x == n^24 || x == n^25\
    \ || x == n^26 || x == n^27 || x == n^28 || x == n^29 || x == n^30 || x == n^31\
    \ || x == n^32 || x == n^33 || x == n^34 || x == n^35 || x == n^36 || x == n^37\
    \ || x == n^38 || x == n^39 || x == n^40 || x == n^41 || x == n^42 || x == n^43\
    \ || x == n^44 || x == n^45 || x == n^46 || x == n^47 || x == n^48 || x == n^49\
    \ || x == n^50 || x == n^51 || x == n^52 || x == n^53 || x == n^54 || x == n^55\
    \ || x == n^56 || x == n^57 || x == n^58 || x == n^59 || x == n^60 || x == n^61\
    \ || x == n^62 || x == n^63 || x == n^64 || x == n^65 || x == n^66 || x == n^67\
    \ || x == n^68 || x == n^69 || x == n^70 || x == n^71 || x == n^72 || x == n^73\
    \ || x == n^74 || x == n^75 || x == n^76 || x == n^77 || x == n^78 || x == n^79\
    \ || x == n^80 || x == n^81 || x == n^82 || x == n^83 || x == n^84 || x == n^85\n\
    using Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpj19_ip3n.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpj19_ip3n.jl:1\n\
    in expression starting at /tmp/tmpj19_ip3n.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    while x\
    \ != 1\n        if x % n != 0\n            return false\n        end\n       \
    \ x = x / n\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return is_simple_power_recursive(x,\
    \ n, 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t\
    @test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4,\
    \ 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpg8i6s99n.jl:20\n  Test threw exception\n\
    \  Expression: candidate(16, 2) == true\n  UndefVarError: is_simple_power_recursive\
    \ not defined\n  Stacktrace:\n   [1] is_simple_power(x::Int64, n::Int64)\n   \
    \  @ Main /tmp/tmpg8i6s99n.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg8i6s99n.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg8i6s99n.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpg8i6s99n.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(143214, 16) == false\n  UndefVarError: is_simple_power_recursive not\
    \ defined\n  Stacktrace:\n   [1] is_simple_power(x::Int64, n::Int64)\n     @ Main\
    \ /tmp/tmpg8i6s99n.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg8i6s99n.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg8i6s99n.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpg8i6s99n.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(4, 2) == true\n  UndefVarError: is_simple_power_recursive not defined\n\
    \  Stacktrace:\n   [1] is_simple_power(x::Int64, n::Int64)\n     @ Main /tmp/tmpg8i6s99n.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg8i6s99n.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg8i6s99n.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpg8i6s99n.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(9, 3) == true\n  UndefVarError: is_simple_power_recursive not defined\n\
    \  Stacktrace:\n   [1] is_simple_power(x::Int64, n::Int64"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg8i6s99n.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n  return (x-1)\
    \ % (n-1) == 0\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcs_uwrqv.jl:25\n  Expression: candidate(24,\
    \ 2) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcs_uwrqv.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcs_uwrqv.jl:19\ntest set: Error\
    \ During Test at /tmp/tmpcs_uwrqv.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(1, 1) == true\n  DivideError: integer division error\n  Stacktrace:\n\
    \   [1] rem\n     @ ./int.jl:285 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmpcs_uwrqv.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpcs_uwrqv.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpcs_uwrqv.jl:19\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    8     1      1     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcs_uwrqv.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return (Int64(log(x)/log(n))\
    \ == log(x)/log(n))\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpql6ierpc.jl:21\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpql6ierpc.jl:13\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpql6ierpc.jl:21 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpql6ierpc.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpql6ierpc.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpql6ierpc.jl:13\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpql6ierpc.jl:25 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpql6ierpc.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpql6ierpc.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmpql6ierpc.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpql6ierpc.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpql6ierpc.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpql6ierpc.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpql6ierpc.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^Int(log(x)/log(n))\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmplaem8owy.jl:21\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmplaem8owy.jl:13\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmplaem8owy.jl:21 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmplaem8owy.jl:19\ntest set:\
    \ Error During Test at /tmp/tmplaem8owy.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmplaem8owy.jl:13\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmplaem8owy.jl:25 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmplaem8owy.jl:19\ntest set:\
    \ Error During Test at /tmp/tmplaem8owy.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmplaem8owy.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmplaem8owy.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmplaem8owy.jl:19\ntest set:\
    \ Error During Test at /tmp/tmplaem8owy.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplaem8owy.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^Int(log(x)/log(n))\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzmflu5rm.jl:21\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpzmflu5rm.jl:13\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpzmflu5rm.jl:21 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpzmflu5rm.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpzmflu5rm.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpzmflu5rm.jl:13\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpzmflu5rm.jl:25 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpzmflu5rm.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpzmflu5rm.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmpzmflu5rm.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpzmflu5rm.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpzmflu5rm.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpzmflu5rm.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzmflu5rm.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x ==\
    \ 1 && n == 1 return true end\n    if x == 0 return false end\n    return x %\
    \ n == 0 && is_simple_power(x/n, n)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpfjezrry1.jl:22\n  Test threw exception\n\
    \  Expression: candidate(16, 2) == true\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    is_simple_power(!Matched::Int64, ::Int64)\
    \ at /tmp/tmpfjezrry1.jl:12\n  Stacktrace:\n   [1] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmpfjezrry1.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfjezrry1.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfjezrry1.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpfjezrry1.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(4, 2) == true\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    is_simple_power(!Matched::Int64, ::Int64)\
    \ at /tmp/tmpfjezrry1.jl:12\n  Stacktrace:\n   [1] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmpfjezrry1.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfjezrry1.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfjezrry1.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpfjezrry1.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(9, 3) == true\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    is_simple_power(!Matched::Int64, ::Int64)\
    \ at /tmp/tmpfjezrry1.jl:12\n  Stacktrace:\n   [1] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmpfjezrry1.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfjezrry1.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/sh"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfjezrry1.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n^x ==\
    \ x\n        return true\n    else\n        return false\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpuik4ywzt.jl:24\n  Expression: candidate(16,\
    \ 2) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuik4ywzt.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuik4ywzt.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpuik4ywzt.jl:26\n  Expression: candidate(4, 2) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuik4ywzt.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuik4ywzt.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpuik4ywzt.jl:27\n  Expression: candidate(9, 3) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuik4ywzt.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuik4ywzt.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpuik4ywzt.jl:28\n  Expression: candidate(16, 4) == true\n \
    \  Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuik4ywzt.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuik4ywzt.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpuik4ywzt.jl:33\n  Expression: candidate(1, 12) == true\n \
    \  Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuik4ywzt.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n   if x % n\
    \ != 0\n       return false\n   elseif x/n == n\n       return true\n   elseif\
    \ x/n == 1\n       return true\n   else\n       return is_simple_power(x/n, n)\n\
    \   end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t\
    @test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4,\
    \ 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1uh_5dwt.jl:28\n  Test threw exception\n\
    \  Expression: candidate(16, 2) == true\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    is_simple_power(!Matched::Int64, ::Int64)\
    \ at /tmp/tmp1uh_5dwt.jl:12\n  Stacktrace:\n   [1] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmp1uh_5dwt.jl:20\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1uh_5dwt.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1uh_5dwt.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp1uh_5dwt.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    is_simple_power(!Matched::Int64, ::Int64)\
    \ at /tmp/tmp1uh_5dwt.jl:12\n  Stacktrace:\n   [1] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmp1uh_5dwt.jl:20\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1uh_5dwt.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1uh_5dwt.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp1uh_5dwt.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    is_simple_power(!Matched::Int64, ::Int64)\
    \ at /tmp/tmp1uh_5dwt.jl:12\n  Stacktrace:\n   [1] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmp1uh_5dwt.jl:20\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1uh_5dwt.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1uh_5dwt.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    m::Int64\
    \ = floor(log(x)/log(n))\n    return x == round(n^m)\nend\n@show is_simple_power(1,\
    \ 4)\n@show is_simple_power(2, 2)\n@show is_simple_power(8, 2)\n@show is_simple_power(3,\
    \ 2)\n@show is_simple_power(3, 1)\n@show is_simple_power(5, 3)\nusing Test\n\n\
    @testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\
    \t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t\
    @test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24,\
    \ 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6)\
    \ == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\n\
    end\n"
  stdout: "is_simple_power(1, 4) = true\nis_simple_power(2, 2) = true\nis_simple_power(8,\
    \ 2) = true\nis_simple_power(3, 2) = false\n"
  stderr: "ERROR: LoadError: InexactError: Int64(Inf)\nStacktrace:\n [1] Int64\n \
    \  @ ./float.jl:812 [inlined]\n [2] convert\n   @ ./number.jl:7 [inlined]\n [3]\
    \ is_simple_power(x::Int64, n::Int64)\n   @ Main /tmp/tmplm1e2sab.jl:13\n [4]\
    \ top-level scope\n   @ show.jl:1047\nin expression starting at /tmp/tmplm1e2sab.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    res = 0\n\
    \    power = 0\n    while x > 1 && res < x\n        res = n ^ power\n        power\
    \ += 1\n    end\n    res == x\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpv_lhn1hv.jl:34\n  Expression: candidate(1,\
    \ 1) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv_lhn1hv.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv_lhn1hv.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpv_lhn1hv.jl:35\n  Expression: candidate(1, 12) == true\n \
    \  Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv_lhn1hv.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv_lhn1hv.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv_lhn1hv.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x ==\
    \ n^1 \n        return true\n    elseif x%n == 0 \n        if x/n == n \n    \
    \        return true\n        else \n            return is_simple_power(x/n, n)\n\
    \        end\n    else\n        return false\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t\
    @test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9,\
    \ 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) ==\
    \ false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\
    \t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpav0yj9x1.jl:30\n  Test threw exception\n\
    \  Expression: candidate(16, 2) == true\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    is_simple_power(!Matched::Int64, ::Int64)\
    \ at /tmp/tmpav0yj9x1.jl:12\n  Stacktrace:\n   [1] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmpav0yj9x1.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpav0yj9x1.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpav0yj9x1.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpav0yj9x1.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    is_simple_power(!Matched::Int64, ::Int64)\
    \ at /tmp/tmpav0yj9x1.jl:12\n  Stacktrace:\n   [1] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmpav0yj9x1.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpav0yj9x1.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpav0yj9x1.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpav0yj9x1.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    is_simple_power(!Matched::Int64, ::Int64)\
    \ at /tmp/tmpav0yj9x1.jl:12\n  Stacktrace:\n   [1] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmpav0yj9x1.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpav0yj9x1.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpav0yj9x1.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ > 0 && (x \xF7 (n^(floor(log(x)/log(n)))) == 1)\nend\n\"\"\"\nis_simple_power(1,\
    \ 4) => true\nis_simple_power(2, 2) => true\nis_simple_power(8, 2) => true\nis_simple_power(3,\
    \ 2) => false\nis_simple_power(3, 1) => false\nis_simple_power(5, 3) => false\n\
    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpozwtxq65.jl:15\nin expression starting at /tmp/tmpozwtxq65.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    log2x =\
    \ log2(x)\n    is_log2_int = isinteger(log2x)\n    log2n = log2(n)\n    is_log2n_int\
    \ = isinteger(log2n)\n    if is_log2_int && is_log2n_int\n        if log2n % log2x\
    \ == 0\n            return true\n        else\n            return false\n    \
    \    end\n    else\n        return false\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t\
    @test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9,\
    \ 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) ==\
    \ false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\
    \t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpuuhea1yf.jl:32\n  Expression: candidate(16,\
    \ 2) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuuhea1yf.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuuhea1yf.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpuuhea1yf.jl:34\n  Expression: candidate(4, 2) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuuhea1yf.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuuhea1yf.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpuuhea1yf.jl:35\n  Expression: candidate(9, 3) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuuhea1yf.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuuhea1yf.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpuuhea1yf.jl:36\n  Expression: candidate(16, 4) == true\n \
    \  Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuuhea1yf.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuuhea1yf.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpuuhea1yf.jl:40\n  Expression: candidate(1, 1) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuuhea1yf.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ % n == 0 ? is_simple_power(x \xF7 n, n) : x == 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t\
    @test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9,\
    \ 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) ==\
    \ false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\
    \t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    # prepare\
    \ some constants\n    # if more are needed, please add them\n    const two = Int64(2)\n\
    \    const four = Int64(4)\n    const five = Int64(5)\n    const six = Int64(6)\n\
    \    const eight = Int64(8)\n    const nine = Int64(9)\n    const ten = Int64(10)\n\
    \    const sixteen = Int64(16)\n    const one_twenty_seven = Int64(127)\n    const\
    \ one_twenty_eight = Int64(128)\n    const five_twelve = Int64(512)\n    const\
    \ five_thirteen = Int64(513)\n    const ten_twenty_four = Int64(1024)\n    const\
    \ ten_twenty_five = Int64(1025)\n    const twenty_forty_eight = Int64(2048)\n\
    \    const twenty_forty_nine = Int64(2049)\n    const two_forty_nine = Int64(2\
    \ ** seven - 1)\n    const two_sixty_three = Int64(2 ** nine - 1)\n    const two_sixty_four\
    \ = Int64(2 ** nine)\n    const four_sixty_nine = Int64(2 ** nine + 1)\n    const\
    \ four_seventy_one = Int64(2 ** nine + 3)\n    const four_seventy_two = Int64(2\
    \ ** nine + 4)\n    const four_seventy_three = Int64(2 ** nine + 5)\n    const\
    \ four_seventy_four = Int64(2 ** nine + 6)\n    const four_seventy_five = Int64(2\
    \ ** nine + 7)\n    const four_seventy_six = Int64(2 ** nine + 8)\n    const four_seventy_seven\
    \ = Int64(2 ** nine + 9)\n    const four_seventy_eight = Int64(2 ** nine + 10)\n\
    \    const four_seventy_nine = Int64(2 ** nine + 11)\n    const four_eighty =\
    \ Int64(2 ** nine + 12)\n    const four_eighty_one = Int64(2 ** nine + 13)\n \
    \   const four_e\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"x^y\" instead of \"x**y\" for exponentiation,\
    \ and \"x...\" instead of \"**x\" for splatting.\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpth3_ul91.jl:31\nin expression starting at /tmp/tmpth3_ul91.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(round(log(x) / log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    #your code\
    \ here\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm_0zopql.jl:21\n  Expression: candidate(16,\
    \ 2) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm_0zopql.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm_0zopql.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpm_0zopql.jl:23\n  Expression: candidate(4, 2) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm_0zopql.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm_0zopql.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpm_0zopql.jl:24\n  Expression: candidate(9, 3) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm_0zopql.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm_0zopql.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpm_0zopql.jl:25\n  Expression: candidate(16, 4) == true\n \
    \  Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm_0zopql.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm_0zopql.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpm_0zopql.jl:29\n  Expression: candidate(1, 1) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm_0zopql.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    x == n ||\
    \ x == n*n || x == n*n*n || x == n*n*n*n\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfyrphsd1.jl:29\n  Expression: candidate(1,\
    \ 12) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfyrphsd1.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfyrphsd1.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     1     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfyrphsd1.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x==n^(log(x)/log(n))\n\
    end\nprintln(is_simple_power(1, 4))\nprintln(is_simple_power(2, 2))\nprintln(is_simple_power(8,\
    \ 2))\nprintln(is_simple_power(3, 2))\nprintln(is_simple_power(3, 1))\nprintln(is_simple_power(5,\
    \ 3))\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: "true\ntrue\ntrue\ntrue\nfalse\nfalse\ntest set: Test Failed at /tmp/tmprha7923y.jl:32\n\
    \  Expression: candidate(128, 4) == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprha7923y.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprha7923y.jl:25\ntest set: Test\
    \ Failed at /tmp/tmprha7923y.jl:33\n  Expression: candidate(12, 6) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprha7923y.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprha7923y.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprha7923y.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    # x=n^x\n\
    \    x=log(x)/log(n)\n    if x==round(x)\n        return true\n    else\n    \
    \    return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm8g1m9vt.jl:34\n  Expression: candidate(1,\
    \ 1) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm8g1m9vt.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm8g1m9vt.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     1     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm8g1m9vt.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    #We look\
    \ for the integer parts of the logarithm of the number x in the base n\n    i::Int64\
    \ = Int(log(x, n)) \n    #If the result of the logarithm multiplied by the base\
    \ is equal to the number x, we return true\n    if n^i == x\n        return true\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpc0yzqc1i.jl:27\n  Test threw exception\n\
    \  Expression: candidate(16, 2) == true\n  InexactError: Int64(0.25)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpc0yzqc1i.jl:14\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpc0yzqc1i.jl:27 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpc0yzqc1i.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpc0yzqc1i.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(143214, 16) == false\n  InexactError: Int64(0.23353828061161797)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpc0yzqc1i.jl:14\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpc0yzqc1i.jl:28 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpc0yzqc1i.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpc0yzqc1i.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(4, 2) == true\n  InexactError: Int64(0.5)\n  Stacktrace:\n   [1] Int64\n\
    \     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmpc0yzqc1i.jl:14\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpc0yzqc1i.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpc0yzqc1i.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpc0yzqc1i.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(9, 3) == true\n  InexactError: Int64(0.5)\n  Stacktrace:\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc0yzqc1i.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    p=log(x)/log(n)\n\
    \    if isa(p, Int64)\n        return true\n    else\n        return false\n \
    \   end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t\
    @test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4,\
    \ 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb8bwml4u.jl:25\n  Expression: candidate(16,\
    \ 2) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb8bwml4u.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb8bwml4u.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpb8bwml4u.jl:27\n  Expression: candidate(4, 2) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb8bwml4u.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb8bwml4u.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpb8bwml4u.jl:28\n  Expression: candidate(9, 3) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb8bwml4u.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb8bwml4u.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpb8bwml4u.jl:29\n  Expression: candidate(16, 4) == true\n \
    \  Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb8bwml4u.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb8bwml4u.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpb8bwml4u.jl:33\n  Expression: candidate(1, 1) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb8bwml4u.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return log(x)/log(n)\
    \ % 1 == 0\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzpz3m2wy.jl:28\n  Expression: candidate(1,\
    \ 1) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzpz3m2wy.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzpz3m2wy.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     1     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzpz3m2wy.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == (n^(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphnz_k2ij.jl:26\n  Expression: candidate(128,\
    \ 4) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphnz_k2ij.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphnz_k2ij.jl:19\ntest set: Test\
    \ Failed at /tmp/tmphnz_k2ij.jl:27\n  Expression: candidate(12, 6) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphnz_k2ij.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphnz_k2ij.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphnz_k2ij.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(floor(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_integer(log(x,\
    \ n)) == true\n        return true\n    else\n        return false\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpw30ncafd.jl:24\n  Test threw exception\n\
    \  Expression: candidate(16, 2) == true\n  UndefVarError: is_integer not defined\n\
    \  Stacktrace:\n   [1] is_simple_power(x::Int64, n::Int64)\n     @ Main /tmp/tmpw30ncafd.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw30ncafd.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw30ncafd.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpw30ncafd.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(143214, 16) == false\n  UndefVarError: is_integer not defined\n  Stacktrace:\n\
    \   [1] is_simple_power(x::Int64, n::Int64)\n     @ Main /tmp/tmpw30ncafd.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw30ncafd.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw30ncafd.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpw30ncafd.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(4, 2) == true\n  UndefVarError: is_integer not defined\n  Stacktrace:\n\
    \   [1] is_simple_power(x::Int64, n::Int64)\n     @ Main /tmp/tmpw30ncafd.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw30ncafd.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw30ncafd.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpw30ncafd.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(9, 3) == true\n  UndefVarError: is_integer not defined\n  Stacktrace:\n\
    \   [1] is_simple_power(x::Int64, n::Int64)\n     @ Main /tmp/tmpw30ncafd.jl:13\n\
    \   [2] macro expansion\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw30ncafd.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x < n\
    \ | n < 1 \n        return false\n    end\n    a = log(x) / log(n)\n    if a ==\
    \ trunc(a)\n        return true\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppr_77d4a.jl:36\n  Expression: candidate(1,\
    \ 1) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppr_77d4a.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppr_77d4a.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     1     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppr_77d4a.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x==n^(round(log(x)/log(n)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    int = log(x)/log(n)\n\
    \    return int == round(int)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvdhwy8v0.jl:29\n  Expression: candidate(1,\
    \ 1) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvdhwy8v0.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvdhwy8v0.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     1     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvdhwy8v0.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x%n==0\
    \ ? is_simple_power(x/n, n) : (x==1) \nend\n \ns = Set()\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t\
    @test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9,\
    \ 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) ==\
    \ false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\
    \t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmprz9dmc38.jl:22\n  Test threw exception\n\
    \  Expression: candidate(16, 2) == true\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    is_simple_power(!Matched::Int64, ::Int64)\
    \ at /tmp/tmprz9dmc38.jl:12\n  Stacktrace:\n   [1] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmprz9dmc38.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprz9dmc38.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprz9dmc38.jl:21\ntest set:\
    \ Error During Test at /tmp/tmprz9dmc38.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(4, 2) == true\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    is_simple_power(!Matched::Int64, ::Int64)\
    \ at /tmp/tmprz9dmc38.jl:12\n  Stacktrace:\n   [1] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmprz9dmc38.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprz9dmc38.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprz9dmc38.jl:21\ntest set:\
    \ Error During Test at /tmp/tmprz9dmc38.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(9, 3) == true\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    is_simple_power(!Matched::Int64, ::Int64)\
    \ at /tmp/tmprz9dmc38.jl:12\n  Stacktrace:\n   [1] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmprz9dmc38.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprz9dmc38.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/sh"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprz9dmc38.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n  return x %\
    \ (n^(log(x)/log(n))) == 0\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4o7tm_8n.jl:26\n  Expression: candidate(128,\
    \ 4) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4o7tm_8n.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4o7tm_8n.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp4o7tm_8n.jl:27\n  Expression: candidate(12, 6) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4o7tm_8n.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4o7tm_8n.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4o7tm_8n.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 1\n        return true\n    end\n    for i in 1:10\n        if (x == n^i)\n\
    \            return true\n        end\n    end\n    return false\nend\n@assert\
    \ is_simple_power(1, 4) == true\n@assert is_simple_power(2, 2) == true\n@assert\
    \ is_simple_power(8, 2) == true\n@assert is_simple_power(3, 2) == false\n@assert\
    \ is_simple_power(3, 1) == false\n@assert is_simple_power(5, 3) == false\n \n\
    using Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: AssertionError: is_simple_power(1, 4) == true\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx2pmjbrz.jl:23\nin expression starting at\
    \ /tmp/tmpx2pmjbrz.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return log(x)/log(n)\
    \ == convert(Int64, log(x)/log(n))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptd318qo6.jl:21\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmptd318qo6.jl:13\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmptd318qo6.jl:21 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmptd318qo6.jl:19\ntest set:\
    \ Error During Test at /tmp/tmptd318qo6.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7\
    \ [inlined]\n   [3] is_simple_power(x::Int64, n::Int64)\n     @ Main /tmp/tmptd318qo6.jl:13\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmptd318qo6.jl:25 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmptd318qo6.jl:19\ntest set:\
    \ Error During Test at /tmp/tmptd318qo6.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7\
    \ [inlined]\n   [3] is_simple_power(x::Int64, n::Int64)\n     @ Main /tmp/tmptd318qo6.jl:13\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmptd318qo6.jl:26 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmptd318qo6.jl:19\ntest"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptd318qo6.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    # TODO:\
    \ write your code in here\n    # Hint: Think about the type of x ** n\n    #Hint:\
    \ Think about what happens if you take the log2 of x ** n\n    return \nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpdlyrdu_u.jl:23\n  Test threw exception\n\
    \  Expression: candidate(16, 2) == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] is_simple_power(x::Int64, n::Int64)\n     @ Main\
    \ /tmp/tmpdlyrdu_u.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdlyrdu_u.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdlyrdu_u.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpdlyrdu_u.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(143214, 16) == false\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] is_simple_power(x::Int64, n::Int64)\n     @ Main\
    \ /tmp/tmpdlyrdu_u.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdlyrdu_u.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level sc"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdlyrdu_u.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    \"\"\"Your\
    \ task is to write a function that returns true if a number x is a simple\n  \
    \  power of n and false in other cases.\n    x is a simple power of n if n**int=x\n\
    \    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2)\
    \ => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n\
    \    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\
    \"\"\n    while x % n == 0\n        x /= n\n    end\n    x == 1\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) ==\
    \ true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\
    \t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24,\
    \ 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6)\
    \ == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\n\
    end\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ % n == 0 ? true : false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvjn1_tok.jl:25\n  Expression: candidate(24,\
    \ 2) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvjn1_tok.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvjn1_tok.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpvjn1_tok.jl:26\n  Expression: candidate(128, 4) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvjn1_tok.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvjn1_tok.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpvjn1_tok.jl:27\n  Expression: candidate(12, 6) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvjn1_tok.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvjn1_tok.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpvjn1_tok.jl:29\n  Expression: candidate(1, 12) == true\n \
    \  Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvjn1_tok.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvjn1_tok.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     4     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvjn1_tok.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x^.5\
    \ in 0.0:(n^2)::Int64\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x%n\
    \ == 0 && log(x)/log(n) == round(log(x)/log(n))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9vh5wy09.jl:28\n  Expression: candidate(1,\
    \ 1) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9vh5wy09.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9vh5wy09.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp9vh5wy09.jl:29\n  Expression: candidate(1, 12) == true\n \
    \  Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9vh5wy09.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9vh5wy09.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9vh5wy09.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(trunc(log(x)/log(n)))\nend \nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    x == 1 &&\
    \ n == 1 && return true\n    return x == n ^ floor(log(x) / log(n))\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x==1\
    \ \n        if n==1\n            return true\n        else \n            return\
    \ false\n        end\n    else\n        if (n<1) | (x<1)\n            return false\n\
    \        else\n            max = ceil(Int64, log(x)/log(n))\n            for i\
    \ in 0:max\n                if x == n^i\n                    return true\n   \
    \             end\n            end\n            return false\n        end\n  \
    \  end\nend\nis_simple_power(1, 4)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4xav2cwf.jl:48\n  Expression: candidate(1,\
    \ 12) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4xav2cwf.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4xav2cwf.jl:38\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     1     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4xav2cwf.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return n^round(log(x)/log(n))\
    \ == x ? true : false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    a = sqrt(x)\n\
    \    b = sqrt(n)\n    if isinteger(a) && isinteger(b) && a == b\n        return\
    \ true\n    else \n        return false\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t\
    @test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9,\
    \ 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) ==\
    \ false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\
    \t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpessv9pzs.jl:26\n  Expression: candidate(16,\
    \ 2) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpessv9pzs.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpessv9pzs.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpessv9pzs.jl:28\n  Expression: candidate(4, 2) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpessv9pzs.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpessv9pzs.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpessv9pzs.jl:29\n  Expression: candidate(9, 3) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpessv9pzs.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpessv9pzs.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpessv9pzs.jl:30\n  Expression: candidate(16, 4) == true\n \
    \  Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpessv9pzs.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpessv9pzs.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpessv9pzs.jl:35\n  Expression: candidate(1, 12) == true\n \
    \  Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpessv9pzs.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return !(Int64(n)^Int64(x)\
    \ < 0) && (Int64(n)^Int64(x) % Int64(x) == 0)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpoebcnee3.jl:21\n  Expression: candidate(143214,\
    \ 16) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoebcnee3.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoebcnee3.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpoebcnee3.jl:26\n  Expression: candidate(128, 4) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoebcnee3.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoebcnee3.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpoebcnee3.jl:27\n  Expression: candidate(12, 6) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoebcnee3.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoebcnee3.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     3     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoebcnee3.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    global function\
    \ ispowerof(x::Int64, n::Int64)\n        while x % n == 0\n            x /= n\n\
    \        end\n        return x == 1\n    end\n    return ispowerof(x, n)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: Global method definition around /tmp/tmp5253fqj0.jl:13\
    \ needs to be placed at the top level, or use \"eval\".\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5253fqj0.jl:1\nin expression starting at /tmp/tmp5253fqj0.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    int = 0\n\
    \    for i in 0:1:20\n        if n^i == x\n            int = i\n            break\n\
    \        end\n    end\n    if int > 0\n        return true\n    else\n       \
    \ return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2hiy98kq.jl:39\n  Expression: candidate(1,\
    \ 1) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2hiy98kq.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2hiy98kq.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp2hiy98kq.jl:40\n  Expression: candidate(1, 12) == true\n \
    \  Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2hiy98kq.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2hiy98kq.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2hiy98kq.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n  #TODO: finish\n\
    \  \nend\n# test\nusing Base.Test\n@testset \"test\" begin\n    @test is_simple_power(1,\
    \ 4) == true\n    @test is_simple_power(2, 2) == true\n    @test is_simple_power(8,\
    \ 2) == true\n    @test is_simple_power(3, 2) == false\n    @test is_simple_power(3,\
    \ 1) == false\n    @test is_simple_power(5, 3) == false\n    @test is_simple_power(4,\
    \ 2) == true\n    @test is_simple_power(6, 2) == false\n    @test is_simple_power(6,\
    \ 2) == false\n    @test is_simple_power(2, -2) == false\n    @test is_simple_power(9,\
    \ -3) == false\n    @test is_simple_power(27, -3) == true\nend\n \nusing Test\n\
    \n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) ==\
    \ true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\
    \t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24,\
    \ 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6)\
    \ == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: Test not defined\nin expression starting\
    \ at /tmp/tmpzv655q_i.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    x == n^Int(log(x)\
    \ / log(n))\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpa67m80e9.jl:21\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpa67m80e9.jl:13\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpa67m80e9.jl:21 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpa67m80e9.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpa67m80e9.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpa67m80e9.jl:13\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpa67m80e9.jl:25 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpa67m80e9.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpa67m80e9.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmpa67m80e9.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpa67m80e9.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpa67m80e9.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpa67m80e9.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa67m80e9.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    x == (n^floor(log(x)/log(n)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    temp = n^round(Int64,\
    \ log(x)/log(n)) \n    if temp == x\n        return true\n    else\n        return\
    \ false\n    end\nend\n@assert is_simple_power(1, 4) == true\n@assert is_simple_power(2,\
    \ 2) == true\n@assert is_simple_power(8, 2) == true\n@assert is_simple_power(3,\
    \ 2) == false\n@assert is_simple_power(3, 1) == false\n@assert is_simple_power(5,\
    \ 3) == false\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t\
    @test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4,\
    \ 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: InexactError: trunc(Int64, Inf)\nStacktrace:\n [1] trunc\n\
    \   @ ./float.jl:805 [inlined]\n [2] round\n   @ ./float.jl:369 [inlined]\n [3]\
    \ is_simple_power(x::Int64, n::Int64)\n   @ Main /tmp/tmppo8p3ti6.jl:13\n [4]\
    \ top-level scope\n   @ /tmp/tmppo8p3ti6.jl:24\nin expression starting at /tmp/tmppo8p3ti6.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    is_simple_power(x,n)\
    \ = x == n^(round(log(x)/log(n)))\nend\n \nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2zehbovl.jl:21\n  Test threw exception\n\
    \  Expression: candidate(16, 2) == true\n  MethodError: Cannot `convert` an object\
    \ of type var\"#is_simple_power#1\" to an object of type Bool\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] is_simple_power(x::Int64, n::Int64)\n     @ Main\
    \ /tmp/tmp2zehbovl.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2zehbovl.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2zehbovl.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp2zehbovl.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(143214, 16) == false\n  MethodError: Cannot `convert` an object of\
    \ type var\"#is_simple_power#1\" to an object of type Bool\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] is_simple_power(x::Int64, n::Int64)\n     @ Main\
    \ /tmp/tmp2zehbovl.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2zehbovl.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:12"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2zehbovl.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    k = 0\n\
    \    flag = false\n    while !flag\n        k += 1\n        if n^k == x\n    \
    \        flag = true\n        end\n    end\n    return flag\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) ==\
    \ true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\
    \t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24,\
    \ 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6)\
    \ == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\n\
    end\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    while n\
    \ > 0\n        if (x == n)\n            return true\n        end\n        n =\
    \ n/x\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpyw9wvqed.jl:26\\n  Expression: candidate(16,\
    \ 2) == true\\n   Evaluated: false == true\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpyw9wvqed.jl:26 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpyw9wvqed.jl:25\\ntest set: Test\
    \ Failed at /tmp/tmpyw9wvqed.jl:28\\n  Expression: candidate(4, 2) == true\\n\
    \   Evaluated: false == true\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpyw9wvqed.jl:28 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpyw9wvqed.jl:25\\ntest set: Test\
    \ Failed at /tmp/tmpyw9wvqed.jl:29\\n  Expression: candidate(9, 3) == true\\n\
    \   Evaluated: false == true\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpyw9wvqed.jl:29 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpyw9wvqed.jl:25\\ntest set: Test\
    \ Failed at /tmp/tmpyw9wvqed.jl:30\\n  Expression: candidate(16, 4) == true\\\
    n   Evaluated: false == true\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpyw9wvqed.jl:30 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpyw9wvqed.jl:25\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x ==\
    \ n^0\n        return true\n    elseif n == 0\n        return false\n    elseif\
    \ x%n == 0\n        return is_simple_power(x/n, n)\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t\
    @test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4,\
    \ 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgb2fmyqz.jl:28\n  Test threw exception\n\
    \  Expression: candidate(16, 2) == true\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    is_simple_power(!Matched::Int64, ::Int64)\
    \ at /tmp/tmpgb2fmyqz.jl:12\n  Stacktrace:\n   [1] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmpgb2fmyqz.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgb2fmyqz.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgb2fmyqz.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpgb2fmyqz.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4, 2) == true\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    is_simple_power(!Matched::Int64, ::Int64)\
    \ at /tmp/tmpgb2fmyqz.jl:12\n  Stacktrace:\n   [1] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmpgb2fmyqz.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgb2fmyqz.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgb2fmyqz.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpgb2fmyqz.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(9, 3) == true\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    is_simple_power(!Matched::Int64, ::Int64)\
    \ at /tmp/tmpgb2fmyqz.jl:12\n  Stacktrace:\n   [1] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmpgb2fmyqz.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgb2fmyqz.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/sh"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgb2fmyqz.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    isinteger(log(x)/log(n))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw0pefwfs.jl:28\n  Expression: candidate(1,\
    \ 1) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw0pefwfs.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw0pefwfs.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     1     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw0pefwfs.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return isequal(x,n^floor(log(x)/log(n)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    int_log2\
    \ = floor(Int64, log2(x))\n    n ^ int_log2 == x ? true : false\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) ==\
    \ true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\
    \t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24,\
    \ 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6)\
    \ == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp3pv3fbrp.jl:24\n  Expression: candidate(9,\
    \ 3) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3pv3fbrp.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3pv3fbrp.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp3pv3fbrp.jl:25\n  Expression: candidate(16, 4) == true\n \
    \  Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3pv3fbrp.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3pv3fbrp.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3pv3fbrp.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x % n\
    \ == 0\n        int = 1\n        while x / n**int >= 1\n            int += 1\n\
    \        end\n        x == n**(int-1) ? return true : return false\n    else\n\
    \        return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"x^y\" instead of \"x**y\" for exponentiation,\
    \ and \"x...\" instead of \"**x\" for splatting.\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjj7xvet1.jl:15\nin expression starting at /tmp/tmpjj7xvet1.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x !=\
    \ 0\n        p = x\n        while p % n == 0\n            p = p/n\n        end\n\
    \        return p == 1\n    else\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) ==\
    \ true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\
    \t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24,\
    \ 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6)\
    \ == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\n\
    end\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ % n == 0 ? is_simple_power(x/n, n) : x == 1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp315f_8g1.jl:20\n  Test threw exception\n\
    \  Expression: candidate(16, 2) == true\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    is_simple_power(!Matched::Int64, ::Int64)\
    \ at /tmp/tmp315f_8g1.jl:12\n  Stacktrace:\n   [1] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmp315f_8g1.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp315f_8g1.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp315f_8g1.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp315f_8g1.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(4, 2) == true\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    is_simple_power(!Matched::Int64, ::Int64)\
    \ at /tmp/tmp315f_8g1.jl:12\n  Stacktrace:\n   [1] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmp315f_8g1.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp315f_8g1.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp315f_8g1.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp315f_8g1.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(9, 3) == true\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    is_simple_power(!Matched::Int64, ::Int64)\
    \ at /tmp/tmp315f_8g1.jl:12\n  Stacktrace:\n   [1] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmp315f_8g1.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp315f_8g1.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/sh"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp315f_8g1.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return Int64(log(x)/log(n))\
    \ == log(x)/log(n) \nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp017zqdia.jl:21\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmp017zqdia.jl:13\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmp017zqdia.jl:21 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp017zqdia.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp017zqdia.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmp017zqdia.jl:13\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmp017zqdia.jl:25 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp017zqdia.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp017zqdia.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmp017zqdia.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp017zqdia.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp017zqdia.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp017zqdia.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp017zqdia.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return isequal(x,\
    \ n ^ round(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if (n ==\
    \ 1)\n        return true\n    end\n    if (n == 2)\n        if (x % 2 == 0)\n\
    \            return true\n        else\n            return false\n        end\n\
    \    end\n    if (n == 3)\n        if (x % 3 == 0)\n            return true\n\
    \        else\n            return false\n        end\n    end\n    if (n == 4)\n\
    \        if (x % 4 == 0)\n            return true\n        else\n            return\
    \ false\n        end\n    end\n    if (n == 5)\n        if (x % 5 == 0)\n    \
    \        return true\n        else\n            return false\n        end\n  \
    \  end\n    if (n == 6)\n        if (x % 6 == 0)\n            return true\n  \
    \      else\n            return false\n        end\n    end\n    if (n == 7)\n\
    \        if (x % 7 == 0)\n            return true\n        else\n            return\
    \ false\n        end\n    end\n    if (n == 8)\n        if (x % 8 == 0)\n    \
    \        return true\n        else\n            return false\n        end\n  \
    \  end\n    if (n == 9)\n        if (x % 9 == 0)\n            return true\n  \
    \      else\n            return false\n        end\n    end\n    if (n == 10)\n\
    \        if (x % 10 == 0)\n            return true\n        else\n           \
    \ return false\n        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpru8equkx.jl:86\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Bool\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] is_simple_power(x::Int64, n::Int64)\n     @ Main\
    \ /tmp/tmpru8equkx.jl:76\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpru8equkx.jl:86 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpru8equkx.jl:84\ntest set:\
    \ Test Failed at /tmp/tmpru8equkx.jl:90\n  Expression: candidate(24, 2) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpru8equkx.jl:90 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpru8equkx.jl:84\ntest set: Test\
    \ Failed at /tmp/tmpru8equkx.jl:91\n  Expression: candidate(128, 4) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpru8equkx.jl:91 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpru8equkx.jl:84\ntest set: Test\
    \ Failed at /tmp/tmpru8equkx.jl:92\n  Expression: candidate(12, 6) == false\n\
    \   Ev"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpru8equkx.jl:82\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return n**(1.0\
    \ + log(x) / log(n)) == x\nend\nis_simple_power(8, 2)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t\
    @test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9,\
    \ 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) ==\
    \ false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\
    \t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"x^y\" instead of \"x**y\" for exponentiation,\
    \ and \"x...\" instead of \"**x\" for splatting.\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpau5gm_4_.jl:13\nin expression starting at /tmp/tmpau5gm_4_.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x ==\
    \ n\n        return true\n    elseif x%n != 0\n        return false\n    else\n\
    \        return is_simple_power(x/n, n)\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t\
    @test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9,\
    \ 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) ==\
    \ false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\
    \t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphzifpn8k.jl:26\n  Test threw exception\n\
    \  Expression: candidate(16, 2) == true\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    is_simple_power(!Matched::Int64, ::Int64)\
    \ at /tmp/tmphzifpn8k.jl:12\n  Stacktrace:\n   [1] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmphzifpn8k.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphzifpn8k.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphzifpn8k.jl:25\ntest set:\
    \ Error During Test at /tmp/tmphzifpn8k.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(4, 2) == true\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    is_simple_power(!Matched::Int64, ::Int64)\
    \ at /tmp/tmphzifpn8k.jl:12\n  Stacktrace:\n   [1] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmphzifpn8k.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphzifpn8k.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphzifpn8k.jl:25\ntest set:\
    \ Error During Test at /tmp/tmphzifpn8k.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(9, 3) == true\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    is_simple_power(!Matched::Int64, ::Int64)\
    \ at /tmp/tmphzifpn8k.jl:12\n  Stacktrace:\n   [1] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmphzifpn8k.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphzifpn8k.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/sh"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphzifpn8k.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n  if x < 1\n\
    \    return false\n  end\n  if n == 1\n    return true\n  end\n  if x == 1\n \
    \   return true\n  end\n  if (x % n) != 0\n    return false\n  end\n  if x ==\
    \ n\n    return true\n  end\n  if n != 1\n    return is_simple_power(x / n, n)\n\
    \  end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t\
    @test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4,\
    \ 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpa67gajwm.jl:37\n  Test threw exception\n\
    \  Expression: candidate(16, 2) == true\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    is_simple_power(!Matched::Int64, ::Int64)\
    \ at /tmp/tmpa67gajwm.jl:12\n  Stacktrace:\n   [1] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmpa67gajwm.jl:29\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa67gajwm.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa67gajwm.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpa67gajwm.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(4, 2) == true\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    is_simple_power(!Matched::Int64, ::Int64)\
    \ at /tmp/tmpa67gajwm.jl:12\n  Stacktrace:\n   [1] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmpa67gajwm.jl:29\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa67gajwm.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa67gajwm.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpa67gajwm.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(9, 3) == true\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    is_simple_power(!Matched::Int64, ::Int64)\
    \ at /tmp/tmpa67gajwm.jl:12\n  Stacktrace:\n   [1] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmpa67gajwm.jl:29\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa67gajwm.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/sh"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa67gajwm.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return n^Int(log(x)/log(n))\
    \ == x\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t\
    @test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4,\
    \ 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpi53yihih.jl:21\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpi53yihih.jl:13\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpi53yihih.jl:21 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpi53yihih.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpi53yihih.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpi53yihih.jl:13\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpi53yihih.jl:25 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpi53yihih.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpi53yihih.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:812 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmpi53yihih.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpi53yihih.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpi53yihih.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpi53yihih.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi53yihih.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    y = x\n\
    \    while y % n == 0\n        y = y / n\n    end\n    if y == 1\n        return\
    \ true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 1\n        return true\n    end\n    i = 2\n    result = n^i\n    while result\
    \ <= x\n        if result == x\n            return true\n        end\n       \
    \ i += 1\n        result = n^i\n    end\n    return false\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\
    \t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t\
    @test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24,\
    \ 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6)\
    \ == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp82k_1tfl.jl:41\n  Expression: candidate(1,\
    \ 12) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp82k_1tfl.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp82k_1tfl.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     1     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp82k_1tfl.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n  return n^(round(log(x)/log(n)))\
    \ == x\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t\
    @test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4,\
    \ 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    val = false\n\
    \    p = 0\n    while p <= x\n        if p == x\n            val = true\n    \
    \        break\n        end\n        p = n*p\n    end\n    return val\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x ==\
    \ n^round(log(x)/log(n))\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t\
    @test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4,\
    \ 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    p = log(x)/log(n)\n\
    \    return isinteger(p)\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_7dwtzlb.jl:29\n  Expression: candidate(1,\
    \ 1) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_7dwtzlb.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_7dwtzlb.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     1     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_7dwtzlb.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x ==\
    \ n^1\n        return true\n    else\n        return false\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwfdux23_.jl:24\n  Expression: candidate(16,\
    \ 2) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwfdux23_.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwfdux23_.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpwfdux23_.jl:26\n  Expression: candidate(4, 2) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwfdux23_.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwfdux23_.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpwfdux23_.jl:27\n  Expression: candidate(9, 3) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwfdux23_.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwfdux23_.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpwfdux23_.jl:28\n  Expression: candidate(16, 4) == true\n \
    \  Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwfdux23_.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwfdux23_.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpwfdux23_.jl:33\n  Expression: candidate(1, 12) == true\n \
    \  Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwfdux23_.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n  if x < 0 ||\
    \ n <= 0 || x == 1\n    return false\n  end\n  pow(n, floor(log(x) / log(n)))\
    \ == x ? true : false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpihbbivkv.jl:23\n  Test threw exception\n\
    \  Expression: candidate(16, 2) == true\n  UndefVarError: pow not defined\n  Stacktrace:\n\
    \   [1] is_simple_power(x::Int64, n::Int64)\n     @ Main /tmp/tmpihbbivkv.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpihbbivkv.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpihbbivkv.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpihbbivkv.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(143214, 16) == false\n  UndefVarError: pow not defined\n  Stacktrace:\n\
    \   [1] is_simple_power(x::Int64, n::Int64)\n     @ Main /tmp/tmpihbbivkv.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpihbbivkv.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpihbbivkv.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpihbbivkv.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(4, 2) == true\n  UndefVarError: pow not defined\n  Stacktrace:\n \
    \  [1] is_simple_power(x::Int64, n::Int64)\n     @ Main /tmp/tmpihbbivkv.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpihbbivkv.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpihbbivkv.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpihbbivkv.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(9, 3) == true\n  UndefVarError: pow not defined\n  Stacktrace:\n \
    \  [1] is_simple_power(x::Int64, n::Int64)\n     @ Main /tmp/tmpihbbivkv.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpihbbivkv.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x^(1/n)\
    \ == round(x^(1/n))\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6mirl2kl.jl:23\n  Expression: candidate(9,\
    \ 3) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6mirl2kl.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6mirl2kl.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     1     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6mirl2kl.jl:17\n"
  exit_code: 1
  status: SyntaxError
