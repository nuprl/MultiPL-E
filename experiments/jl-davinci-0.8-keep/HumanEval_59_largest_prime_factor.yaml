name: HumanEval_59_largest_prime_factor
language: jl
prompt: "\"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  \    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n\
  \    2\n    \"\"\"\nfunction largest_prime_factor(n::Int64)::Int64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = largest_prime_factor;\n\t@test(candidate(15)\
  \ == 5)\n\t@test(candidate(27) == 3)\n\t@test(candidate(63) == 7)\n\t@test(candidate(330)\
  \ == 11)\n\t@test(candidate(13195) == 29)\nend\n"
completions: ["    x = n\n    y = div(n, 2)\n    while x > y\n        if n % x ==\
    \ 0\n            if is_prime(x)\n                return x\n            end\n \
    \       end\n        x -= 1\n    end\n    return -1\nend", "    prime_factors\
    \ = [2]\n    for i = 3:n\n        if n % i == 0\n            if is_prime(i)\n\
    \                push!(prime_factors, i)\n            end\n        end\n    end\n\
    \    return maximum(prime_factors)\nend", "    for d in linspace(2, n, n-1) \n\
    \        if n % d == 0 && isprime(d)\n            return d\n        end\n    end\n\
    end\n@time largest_prime_factor(600851475143)", "    i = 2\n    while i*i <= n\n\
    \        while n % i == 0\n            n = n / i\n        end\n        i = i +\
    \ 1\n    end\n    return n\nend\nlargest_prime_factor(600851475143)", "    for\
    \ i in 1:n\n        if n % i == 0\n            println(i)\n        end\n    end\n\
    \    return \"a\"\nend", "    s = collect(2:n-1)\n    for j in 2:n-1\n       \
    \ if isprime(j)\n            while n % j == 0\n                n = div(n, j)\n\
    \            end\n        end\n    end\n    return n\nend", "    # test if n is\
    \ a prime\n    if isprime(n) \n        return n\n    end\n    # for every number\
    \ from 2 to sqrt(n)\n    for i in 2:floor(Int64, sqrt(n))\n        # if i divides\
    \ n and i is a prime, i is a factor\n        if mod(n, i) == 0 && isprime(i)\n\
    \            return i\n        end\n    end\nend", "    primes = collect(primes(n))\n\
    \    primes = filter(x -> n % x == 0, primes)\n    max(primes)\nend", "    prime_factors\
    \ = []\n    for i = 2:n-1\n        if is_prime(i) && n % i == 0\n            prime_factors.append(i)\n\
    \        end\n    end\n    return prime_factors[end]\nend", "    for d = n-1:-1:2\n\
    \        if is_prime(d) && n % d == 0\n            return d\n        end\n   \
    \ end\nend\n@time largest_prime_factor(600851475143)", "    factor = 2\n    while\
    \ n > 1:\n        while n % factor == 0:\n            n /= factor\n        factor\
    \ += 1\n    end\n    return factor - 1\nend", "    if n == 1\n        return 1\n\
    \    end\n    for i in reverse(2:floor(Int64, sqrt(n)))\n        if n % i == 0\n\
    \            if is_prime(i)\n                return i\n            end\n     \
    \   end\n    end\nend", "    for i in primes(Int64)\n        if n % i == 0\n \
    \           return largest_prime_factor(n \xF7 i)\n        end\n    end\n    return\
    \ n\nend\n    \n    \nend", "    for i in (1:n-1)\n        if isprime(i) && n\
    \ % i == 0\n            return i\n        end\n    end\nend", "    factor = 2\n\
    \    while n > 1:\n        if n % factor == 0:\n            n /= factor\n    \
    \    else:\n            factor += 1\n    end\n    return factor\nend", "    #\
    \ TODO: fill in\nend", "    m = 2 \n    while n > 1 \n        while rem(n, m)\
    \ == 0 \n            n = n / m \n        end \n        m = m + 1 \n    end \n\
    \    return m - 1 \nend ", "    \n    i = 2\n    while i <= sqrt(n)\n        if\
    \ mod(n, i) == 0\n            while mod(n, i) == 0\n                n = div(n,\
    \ i)\n            end\n        end\n        i += 1\n    end\n    n\nend", "  \
    \  i = n\n    while n % 2 == 0 \n        n = n/2\n    end\n    i = i/2\n    while\
    \ i > sqrt(n)\n        if n % i == 0 && isprime(i)\n            return i\n   \
    \     end\n        i = i - 1\n    end\n    return n\nend", "    divisor = 2\n\
    \    while divisor <= floor(sqrt(n))\n        if n % divisor == 0\n          \
    \  n = n / divisor\n        else\n            divisor += 1\n        end\n    end\n\
    \    return n\nend\nlargest_prime_factor(600851475143)", "    factor = 2\n   \
    \ while n != 1\n        while n % factor == 0\n            n /= factor\n     \
    \   end\n        factor += 1\n    end\n    return factor\nend\nlargest_prime_factor(13195)\n\
    \ \n \n ", "    if n == 1 \n        return 1\n    end\n    #if !isprime(n)\n \
    \   if n % 2 == 0 \n        return largest_prime_factor(n / 2)\n    end\n    k\
    \ = Int64(3)\n    while k <= Int64(sqrt(n))\n        if n % k == 0 \n        \
    \    return largest_prime_factor(n / k)\n        end\n        k += 2\n    end\n\
    \    return n\nend", "    if n < 2 return 0 end\n    # Decompose n into prime\
    \ factors\n    factors = []\n    while n % 2 == 0\n        push!(factors, 2)\n\
    \        n /= 2\n    end\n    factor = 3\n    while n > 1\n        while n % factor\
    \ == 0\n            push!(factors, factor)\n            n /= factor\n        end\n\
    \        factor += 2\n    end\n    return factors[end]\nend\n \n@time largest_prime_factor(600851475143)",
  "    if n == 2\n        return 2\n    end\n    max = Int64(floor(sqrt(n)))\n   \
    \ primes = sieve(max)\n    for i in primes\n        if n % i == 0\n          \
    \  return i\n        end\n    end\nend", "    \n    # Check to see if n is prime\
    \ and return n if it is\n    if is_prime(n)\n        return n\n    end\n    #\
    \ Iterate over possible primes <= sqrt(n) and check if they are factors of n\n\
    \    # If they are, update the largest prime factor to be the current prime and\
    \ \n    # divide n by the factor. Continue until n is prime.\n    max_factor =\
    \ Int64(ceil(sqrt(n)))\n    factor = 1\n    while factor < max_factor\n      \
    \  factor = next_prime(factor)\n        if n % factor == 0\n            largest_prime_factor\
    \ = factor\n            n = n / factor\n        end\n    end\n    return n\nend",
  "    max_prime = 0\n    i = 2\n    while i*i <= n\n        while n % i == 0\n  \
    \          max_prime = i\n            n = n / i\n        end\n        i += 1\n\
    \    end\n    if n > 1\n        max_prime = n\n    end\n    return max_prime\n\
    end", "    newprime = 2\n    while newprime <= Int64(floor(sqrt(n)))\n       \
    \ if (n % newprime == 0)\n            n = n / newprime\n        else\n       \
    \     newprime += 1\n        end\n    end\n    return n\nend\n\"\"\"\n>>> largest_prime_factor(600851475143)\n\
    6857\n\"\"\"", "    factors = collect(primes(Int64(sqrt(n))))\n    for i in factors\n\
    \        if n % i == 0\n            return i\n        end\n    end\nend", "  \
    \  # First check if n is a prime, in which case we are done.\n    # If not, then\
    \ find the prime factors of n.\n    # This will be of the form n = p * q * r *\
    \ ... where the pis are distinct primes.\n    p, q = unique_prime_factors(n)\n\
    \    return maximum(p)\nend\nlargest_prime_factor(13195)", "    factor = 2 \n\
    \    while n > 1 \n        while n % factor == 0 \n            n /= factor \n\
    \        end \n        factor += 1 \n    end \n    return factor - 1 \nend \n\
    @show largest_prime_factor(600851475143)", "    max_prime = 0\n    # First check\
    \ to see if n is even\n    while n % 2 == 0 \n        max_prime = 2\n        n\
    \ = n/2\n    end\n    # Now factor the odd components\n    # Check with all odd\
    \ numbers that divide evenly into n\n    for i in 3:2:floor(Int64,sqrt(n))\n \
    \       while n % i == 0\n            max_prime = i\n            n = n/i\n   \
    \     end\n    end\n    # If the remaining part of n is a prime\n    if n > 2\n\
    \        max_prime = n\n    end\n    return max_prime\nend", "    prime_factors\
    \ = [x for x in 2:n if isprime(x) && n % x == 0]\n    return maximum(prime_factors)\n\
    end", "    x = 2\n    while x * x <= n \n        while n % x == 0 \n         \
    \   n = n / x\n        end\n        x = x + 1\n    end\n    return n\nend", " \
    \   n_sqrt = Int64(floor(sqrt(n)))\n    i = n_sqrt\n    while i > 1\n        if\
    \ n % i == 0\n            break\n        end\n        i -= 1\n    end\n    if\
    \ isprime(i)\n        return i\n    else\n        return largest_prime_factor(i)\n\
    \    end\nend", "    if n%2 == 0\n        n = n/2\n    end\n    num = 3\n    while\
    \ n != 1\n        if n%num == 0\n            n = n/num\n        else\n       \
    \     num = num + 2\n        end\n    end\n    return num\nend", "    p = 2\n\
    \    while p <= sqrt(n)\n        if mod(n, p) == 0\n            while mod(n, p)\
    \ == 0\n                n = div(n, p)\n            end\n        end\n        p\
    \ += 1\n    end\n    return n\nend", "    factor = 2\n    while factor <= n\n\
    \        if n % factor == 0\n            n /= factor\n        else\n         \
    \   factor += 1\n        end\n    end\n    return factor\nend", "    factor =\
    \ 2\n    while n % factor != 0\n        factor += 1\n    end\n    n / factor ==\
    \ 1 ? factor : largest_prime_factor(n / factor)\nend", "    if n <= 2\n      \
    \  return n\n    end\n    for i in primes()\n        if isdiv(n, i)\n        \
    \    return largest_prime_factor(n \xF7 i)\n        end\n    end\nend", "    for\
    \ i = 2:floor(Int64, sqrt(n))\n        if is_prime(i) && n % i == 0\n        \
    \    return largest_prime_factor(n/i)\n        end\n    end\n    return n\nend",
  "    for i in primes(n)\n        if (n % i == 0) \n            return n\n      \
    \  end\n    end\nend", "    factor = 2\n    while n > 1\n        while n % factor\
    \ == 0\n            n /= factor\n        end\n        factor += 1\n    end\n \
    \   return factor - 1\nend;\nlargest_prime_factor(13195)", "    if n == 2 return\
    \ 2 end\n    if n % 2 == 0\n        while n % 2 == 0\n            n = n \xF7 2\n\
    \        end\n    end\n    num = 3\n    while n != 1\n        if n % num == 0\n\
    \            while n % num == 0\n                n = n \xF7 num\n            end\n\
    \        end\n        num += 2\n    end\n    return num - 2\nend\n@assert largest_prime_factor(13195)\
    \ == 29\n@assert largest_prime_factor(2048) == 2\n@assert largest_prime_factor(600851475143)\
    \ == 6857\n \nend", "    for i in primes(n)\n        if n % i == 0\n         \
    \   n = n / i\n        end\n    end\n    return n\nend", "    for d = 2:floor(sqrt(n))\
    \ \n        if n % d == 0 \n            return max(d, largest_prime_factor(n \xF7\
    \ d))\n        end\n    end\n    return n\nend", "    prime_factors = []\n   \
    \ factors = primes_lt(n)\n    for factor in factors\n        if n % factor ==\
    \ 0\n            push!(prime_factors, factor)\n        end\n    end\n    return\
    \ maximum(prime_factors)\nend", "    for i = 2:n\n        if n % i == 0 && is_prime(i)\n\
    \            return i\n        end\n    end\nend", "    divisor = 0\n    largest_divisor\
    \ = 0\n    while n > 1\n        if n % divisor == 0\n            largest_divisor\
    \ = divisor\n            n = n / divisor\n        end\n        divisor += 1\n\
    \    end\n    return largest_divisor\nend\nlargest_prime_factor(600851475143)",
  "    factor = 2\n    while n % factor != 0\n        factor += 1\n    end\n    if\
    \ n / factor == 1\n        return factor\n    else\n        return largest_prime_factor(n\
    \ / factor)\n    end\nend", "    i = 2\n    while i <= sqrt(n)\n        while\
    \ n % i == 0\n            n = n/i\n        end\n        i += 1\n    end\n    return\
    \ n\nend;\nlargest_prime_factor(10)", "    p, n = 2, n\n    while n > 1 && p^2\
    \ <= n\n        while n % p == 0\n            n /= p\n        end\n        p +=\
    \ 1\n    end\n    return n\nend", "    curr_factor = 2\n    while n > 1\n    \
    \    if n % curr_factor == 0\n            n = n/curr_factor\n        else\n  \
    \          curr_factor += 1\n        end\n    end\n    return curr_factor\nend",
  "    factors = factorize(n)\n    l = last(factors)\n    return l[1]\nend", "   \
    \ largest = 0\n    for i in 2:n\n        if n % i == 0 && is_prime(i)\n      \
    \      largest = i\n        end\n    end\n    return largest\nend", "    for f\
    \ in primes(n)\n        if n % f == 0\n            return f\n        end\n   \
    \ end\nend", "    if n == 0\n        return 0\n    end\n    if n == 1\n      \
    \  return 1\n    end\n    if n == 2\n        return 2\n    end\n    factor = 3\n\
    \    largest_factor = 1\n    while factor <= floor(Int64, sqrt(n))\n        if\
    \ (n % factor == 0) && is_prime(factor)\n            largest_factor = factor\n\
    \        end\n        factor += 2\n    end\n    if largest_factor == 1\n     \
    \   return n\n    end\n    return largest_factor\nend", "    # Use the lowest\
    \ prime factor as the first approximation to the largest\n    # prime factor\n\
    \    if n % 2 == 0\n        prime_factors = factorize(2, n)\n    else\n      \
    \  prime_factors = factorize(3, n)\n    end\n    # We will use the fact that the\
    \ largest prime factor of n must be a prime\n    # number\n    return maximum(prime_factors)\n\
    end", "    for i in 2:n \n        if(n % i == 0) \n            return largest_prime_factor(n/i)\n\
    \        end\n    end\n    return n\nend", "    #Get all factors\n    factors\
    \ = factorize(n)\n    #Get largest\n    largest = max(factors)\n    #Return\n\
    \    return largest\nend", "    factor = 2\n    while n > 1\n        while n %\
    \ factor == 0\n            n /= factor\n        end\n        factor += 1\n   \
    \ end\n    return factor - 1\nend", "    if n < 2\n        error(\"Invalid input,\
    \ input must be a positive integer greater than 1.\")\n    end\n    prime_factors\
    \ = []\n    for i in 2:n\n        if is_prime(i) && n % i == 0\n            push!(prime_factors,\
    \ i)\n        end\n    end\n    return prime_factors[end]\nend", "    for i in\
    \ 2:n\n        if n % i == 0\n            return largest_prime_factor(n / i)\n\
    \        end\n    end\n    return n\nend", "    for i = Int64(floor(sqrt(n)))\n\
    \        # determine if is a factor of n\n        if n % i == 0\n            #\
    \ determine if is a prime\n            is_prime = true\n            for j = Int64(floor(sqrt(i)))\n\
    \                if i % j == 0\n                    is_prime = false\n       \
    \             break\n                end\n            end\n            if is_prime\n\
    \                return i\n            end\n        end\n    end\nend\n    ",
  "    i = 2\n    while i <= n \n        if n % i == 0 \n            n /= i\n    \
    \    else \n            i += 1\n        end\n    end\n    return i\nend", "  \
    \  p::Int64 = 3\n    while n % 2 == 0\n        n /= 2\n    end\n    while p <=\
    \ floor(sqrt(n))\n        while n % p == 0\n            n /= p\n        end\n\
    \        p += 2\n    end\n    return n\nend", "    lpf = 1\n    while n % 2 ==\
    \ 0 \n        lpf = 2\n        n /= 2\n    end\n    # now n is odd\n    i = 3\n\
    \    while i <= (n^(1/2))\n        while n % i == 0\n            lpf = i\n   \
    \         n /= i\n        end\n        i += 2\n    end\n    # n is a prime number\
    \ greater than 2\n    if n > 2 \n        lpf = n\n    end\n    return lpf\nend",
  "    candidate = 2\n    while n % candidate != 0\n        candidate += 1\n    end\n\
    \    if n == candidate\n        return n\n    else\n        return largest_prime_factor(n\
    \ / candidate)\n    end\nend\n@code_native largest_prime_factor(13195)", "   \
    \ if n % 2 == 0\n        if n > 2\n            return largest_prime_factor(n \xF7\
    \ 2)\n        else\n            return 2\n        end\n    end\n    if isprime(n)\n\
    \        return n\n    end\n    for i in 3:2:floor(Int64, sqrt(n))\n        if\
    \ n % i == 0\n            return largest_prime_factor(n \xF7 i)\n        end\n\
    \    end\nend", "    for i in primes_sieve(n):\n        if n % i == 0\n      \
    \      return i\n        end\n    end\nend", "  f = 2 \n  while n % f == 0\n \
    \   n /= f\n  end\n  f = 3\n  while n != 1\n    while n % f == 0\n      n /= f\n\
    \    end\n    f += 2\n  end\n  return f\nend", "    i = 2\n    while i <= sqrt(n)\n\
    \        while n % i == 0\n            n = n/i\n        end\n        i = i + 1\n\
    \    end\n    return n\nend", "    for i = n - 1:0\n        if isprime(i) && n\
    \ % i == 0\n            return i\n        end\n    end\nend", "    largest_prime_factor\
    \ = 1\n    factor = 2\n    while n > 1:\n        while rem(n, factor) == 0:\n\
    \            largest_prime_factor = factor\n            n = n \xF7 factor\n  \
    \      factor = factor + 1\n    end\n    return largest_prime_factor\nend\nend\
    \ # module Euler", "    \n    # Initialize the largest prime factor as prime factor\
    \ of 2\n    i = 2\n    largest_prime_factor = 2\n    \n    # Check for prime factor\
    \ i as long as i is less than n\n    while i <= n\n        \n        # If i is\
    \ a prime factor of n\n        if isdiv(n, i)\n            \n            # Update\
    \ the largest prime factor\n            largest_prime_factor = i\n           \
    \ \n            # Divide n by i\n            n = div(n, i)\n        else\n   \
    \         # Increment i\n            i += 1\n        end\n    end\n    \n    #\
    \ Return the largest prime factor\n    return largest_prime_factor\nend\n@time\
    \ @show largest_prime_factor(n)", "    if n <= 2 return n \n    for i in 2:round(Int64,\
    \ sqrt(n)) if n % i == 0 return largest_prime_factor(n \xF7 i) end\n    return\
    \ n\nend", "    nmax = Int64(floor(sqrt(n)))\n    ## Find the smallest i such\
    \ that n is not divisible by i.\n    i = Int64(2)\n    while i < nmax\n      \
    \  if n % i == 0\n            ## n is divisible by i. Try to find a smaller factor\
    \ by calling\n            ## largest_prime_factor on n/i.\n            return\
    \ largest_prime_factor(n/i)\n        end\n        i += 1\n    end\n    ## If we\
    \ reach this point, then n is prime.\n    return n\nend", "    largest_prime =\
    \ 2\n    for prime in primes(n)\n        if n % prime == 0\n            largest_prime\
    \ = prime\n        end\n    end\n    return largest_prime\nend", "    \n    \"\
    \"\"Initialize the largest prime factor with 1\"\"\"\n    l_prime_factor = 1\n\
    \    \n    \"\"\"Initialize the prime divisor with 2\"\"\"\n    divisor = 2\n\
    \    \n    \"\"\"While n is greater than 1, keep on dividing by the prime divisor\
    \ and \n        reassign the result to n. Also, divide the prime divisor by 2\
    \ and \n        reassign the result to the prime divisor. Finally, if the prime\
    \ divisor \n        is greater than the largest prime factor, then assign the\
    \ prime divisor \n        to the largest prime factor\"\"\"\n    while n > 1\n\
    \        while rem(n, divisor) == 0\n            n = div(n, divisor)\n       \
    \     divisor = div(divisor, 2)\n        end\n        if divisor > l_prime_factor\n\
    \            l_prime_factor = divisor\n        end\n    end\n    \n    \"\"\"\
    Return the largest prime factor\"\"\"\n    return l_prime_factor\nend", "    if\
    \ isprime(n)\n        return n\n    end\n    d = 2\n    p = n/d\n    while !isprime(p)\n\
    \        d += 1\n        p = n/d\n    end\n    return p\nend", "    return largest_prime_factor_iter(n,\
    \ 2)\nend", "    \"\"\"Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n\
    \    2\n    \"\"\"\n    divisor = 2\n    while divisor <= n\n        while n %\
    \ divisor == 0\n            n = n / divisor\n        end\n        divisor += 1\n\
    \    end\n    return divisor - 1\nend", "    # Initialize prime factor list\n\
    \    prime_factor_list = []\n    # To search from 2 to n-1, given that 1 is not\
    \ a prime number\n    for i in 2:n-1\n        # Check if i is prime or not\n \
    \       if is_prime(i) == true\n            # If i is prime, check if it is a\
    \ factor of n\n            if n % i == 0\n                # If i is a factor of\
    \ n, then append i to prime factor list\n                push!(prime_factor_list,\
    \ i)\n            end\n        end\n    end\n    # Return the maximum element\
    \ of prime factor list\n    return maximum(prime_factor_list)\nend", "    # prime\
    \ numbers smaller than sqrt(n)\n    is_prime(x) = all(rem(x, i) != 0 for i in\
    \ 2:floor(sqrt(x)))\n    # for each divisor\n    for d in 2:floor(sqrt(n))\n \
    \       # if d is a divisor of n and is a prime\n        if rem(n, d) == 0 &&\
    \ is_prime(d)\n            # return d\n            return d\n        end\n   \
    \ end\nend", "    if n == 1\n        return 0\n    end\n    for i in 2:n\n   \
    \     if (n % i == 0)\n            if is_prime(i)\n                return i\n\
    \            end\n        end\n    end\nend", "    if n == 2\n        return 2\n\
    \    end\n    i = 2\n    while i <= floor(Int64, sqrt(n))\n        if n % i ==\
    \ 0\n            return largest_prime_factor(n \xF7 i)\n        end\n        i\
    \ += 1\n    end\n    return n\nend", "    p = 2\n    while p < n\n        if n\
    \ % p == 0\n            while n % p == 0\n                n = n / p\n        \
    \    end\n        end\n        p = p + 1\n    end\n    return n\nend", "    return\
    \ 0\nend\n\"\"\"Return the largest palindrome made from the product of two 3-digit\
    \ numbers.\n    >>> largest_palindrome()\n    906609\n    \"\"\"", "    # A variable\
    \ to keep track of the largest prime factor of n\n    largest_prime_factor = 1\
    \ \n    # A variable to keep track of the smallest prime factor of n\n    smallest_prime_factor\
    \ = 2 \n    # A variable to keep track of the smallest composite number that n\
    \ can be divided by\n    smallest_composite_factor = 3\n    while smallest_composite_factor\
    \ <= n\n        while n % smallest_composite_factor == 0\n            largest_prime_factor\
    \ = smallest_composite_factor\n            n = n \xF7 smallest_composite_factor\n\
    \        end\n        smallest_composite_factor += 2\n    end\n    return largest_prime_factor\n\
    end\nlargest_prime_factor(600851475143)", "    start = 2\n    end = floor(Int64,\
    \ n/2)\n    for i in start:end\n        if is_prime(i) && n % i == 0\n       \
    \     return i\n        end\n    end\nend", "    primes = [2]\n    i = primes[end]\n\
    \    while i <= n \xF7 2\n        if isprime(i)\n            push!(primes, i)\n\
    \        end\n        i += 1\n    end\n    for p in primes\n        if n % p ==\
    \ 0\n            return p\n        end\n    end\nend", "    for i in primes(2:floor(Int64,\
    \ sqrt(n)))\n        if n % i == 0\n            return i\n        end\n    end\n\
    end", "    #find the largest factor f of n:\n    f = n\n    i = 2\n    while i*i\
    \ <= f\n        if f % i == 0\n            f = f \xF7 i\n        else\n      \
    \      i = i + 1\n        end\n    end\n    return f\nend", "    divisor = 3\n\
    \    while n > 1\n        while n % divisor == 0\n            n /= divisor\n \
    \       end\n        divisor += 2\n    end\n    return divisor - 2\nend\n \n@test\
    \ largest_prime_factor(13195) == 29\n@test largest_prime_factor(2048) == 2\n \n\
    println(largest_prime_factor(600851475143))", "    f = 2\n    while f <= n\n \
    \       while n % f == 0\n            n /= f\n        end\n        f += 1\n  \
    \  end\n    return f - 1\nend", "    k, factor, _ = rabin_miller(n)\n    for i\
    \ = (k + 1):factor\n        if rabin_miller(i) == (k, factor, true)\n        \
    \    return i\n        end\n    end\nend", "    \n    factors = factor(n)\n  \
    \  max = 0\n    for factor in factors\n        if factor > max\n            max\
    \ = factor\n        end\n    end\n    return max\nend", "    prime_factors = factor(n)\n\
    \    return last(prime_factors)\nend", "    primes = sieve(n)\n    for i in reverse(primes)\n\
    \        if n % i == 0\n            return i\n        end\n    end\nend\nlargest_prime_factor(600851475143)",
  "    divisor = 2\n    factor = n\n    while true\n        if factor % divisor ==\
    \ 0\n            factor = factor/divisor\n        else\n            divisor +=\
    \ 1\n        end\n        if factor == 1\n            return divisor\n       \
    \ end\n    end\nend", "    # Copy the number and remove the 2s\n    while n %\
    \ 2 == 0\n        n = n / 2\n    end\n    p = 3  # starting point\n    while n\
    \ > 1\n        while n % p == 0\n            n = n / p\n        end\n        p\
    \ += 2\n    end\n    return p - 2\nend", "    num=2\n    while num<n\n       \
    \ if(n%num==0)\n            n=n/num\n        else\n            num=num+1\n   \
    \     end\n    end\n    return n\nend", "    # YOUR CODE HERE\nend", "    i =\
    \ 2\n    while i * i <= n\n        while n % i == 0\n            n = n / i\n \
    \       end\n        i = i + 1\n    end\n    return n\nend", "    if !isprime(n)\
    \ && n > 1\n        for k = floor(Int64, sqrt(n)) :- 1 : 2\n            if isprime(k)\
    \ && (n % k == 0)\n                return k\n            end\n        end\n  \
    \  end\nend", "    if n == 2 || n == 3\n        return n\n    end\n    if n %\
    \ 2 == 0\n        n = n / 2\n    end\n    if n % 3 == 0\n        n = n / 3\n \
    \   end\n    i = 5\n    while i <= n\n        if n % i == 0\n            n = n\
    \ / i\n        else\n            i = i + 2\n        end\n    end\n    return i\n\
    end", "    num = n\n    factor = 2\n    while factor <= num\n        if num %\
    \ factor == 0\n            num /= factor\n        else\n            factor +=\
    \ 1\n        end\n    end\n    factor\nend", "    factor = 2\n    while n > 1\n\
    \        if n % factor == 0\n            # update the largest prime factor\n \
    \           divisor = factor\n            # divide n by the factor, then search\
    \ for the next factor\n            while n % factor == 0\n                n /=\
    \ factor\n            end\n        end\n        factor += 1\n    end\n    return\
    \ divisor\nend", "    # initial largest prime factor to the number itself\n  \
    \  prime_factor = n\n    # divisor is the first number we check to divide n\n\
    \    divisor = 2\n    # while n is larger than 1, we can keep dividing n\n   \
    \ while n > 1\n        # if n is not evenly divisible by the divisor, move to\
    \ the next divisor\n        if n % divisor != 0\n            divisor += 1\n  \
    \      # if n is evenly divisible by the divisor, we can divide n by the divisor\n\
    \        else\n            # this is our new largest prime factor\n          \
    \  prime_factor = n\n            # divide n by divisor to get a new n\n      \
    \      n = n/divisor\n        end\n    end\n    # return largest prime factor\n\
    \    return prime_factor\nend\nlargest_prime_factor(13195)", "    factor = prime_factorization(n)\n\
    \    return maximum(factor)\nend", "    cur_largest_prime = 1\n    primes = primes_upto(sqrt(n))\n\
    \    for p in primes\n        if n % p == 0\n            cur_largest_prime = p\n\
    \        end\n    end\n    return cur_largest_prime\nend", "    \"Return the largest\
    \ prime factor of n.\" \n    n == 2 && return 2\n    n % 2 == 0 && (n /= 2; while\
    \ n % 2 == 0; n /= 2; end)\n    return next(p for p in primes(trunc(Int, sqrt(n)))\
    \ if n % p == 0 ? p : nothing)\nend", "    divisor = 1\n    while n > 1\n    \
    \    divisor += 1\n        while n % divisor == 0\n            n /= divisor\n\
    \        end\n    end\n    return divisor\nend", "    if n % 2 == 0\n        n\
    \ = n/2\n    end\n    factor = 3\n    while n != 1\n        if n % factor == 0\n\
    \            n = n/factor\n        else\n            factor += 2\n        end\n\
    \    end\n    return factor\nend\n ", "    upper_bound = floor(Int64, sqrt(n))\n\
    \    primes = [x for x in 2:upper_bound if isprime(x)]\n    factors = [x for x\
    \ in primes if n % x == 0]\n    return factors[end]\nend", "    i = 2\n    while\
    \ i < n\n        while n % i == 0\n            n = n / i\n        end\n      \
    \  i += 1\n    end\n    return n\nend", "    # A number n > 1 is a prime number\
    \ if it has no factors other than itself and 1\n    for i in 2:floor(Int64, sqrt(n))\n\
    \        if n % i == 0\n            return largest_prime_factor(n/i)\n       \
    \ end\n    end\n    n\nend\nlargest_prime_factor(600851475143)", "  factor = 2\n\
    \  while factor < n\n    if is_prime(factor)\n      if n % factor == 0\n     \
    \   n = n / factor\n      end\n    end\n    factor += 1\n  end\n  return n\nend",
  "    for i in 2:n\n        if n % i == 0\n            a = n\n            while a\
    \ % i == 0\n                a = a \xF7 i\n            end\n            if isprime(a)\n\
    \                return a\n            else\n                return largest_prime_factor(a)\n\
    \            end\n        end\n    end\nend", "    if n < 2\n        error(\"\
    n must be at least 2\")\n    end\n    if isprime(n)\n        error(\"n must not\
    \ be a prime\")\n    end\n    i = 2\n    while n % i != 0\n        i += 1\n  \
    \  end\n    if isprime(n / i)\n        return n / i\n    else\n        return\
    \ largest_prime_factor(n / i)\n    end\nend", "    factor = prime_factor(n)\n\
    \    return maximum(factor)\nend", "    factors = find_factors(n)\n    largest_prime\
    \ = 0\n    for factor in factors\n        #factor is a list of tuples\n      \
    \  if is_prime(factor[1])\n            if factor[1] > largest_prime\n        \
    \        largest_prime = factor[1]\n            end\n        end\n    end\n  \
    \  return largest_prime\nend", "    for i in 2:n \n        if is_prime(i)\n  \
    \          if n % i == 0\n                return i\n            end\n        end\n\
    \    end\nend", "    factors = []\n    for i in 2:n-1\n        if n % i == 0\n\
    \            push!(factors,i)\n        end\n    end\n    for i in 1:length(factors)\n\
    \        for j in 2:factors[i]-1\n            if factors[i] % j == 0\n       \
    \         factors[i] = 0\n            end\n        end\n    end\n    return maximum(factors)\n\
    end", "    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n\
    \    2\n    \"\"\"\n    for i in primes(n-1)\n        if n % i == 0\n        \
    \    return i\n        end\n    end\nend", "    i = div(n, 2)\n    while i > 1\n\
    \        if is_prime(i) && n % i == 0\n            return i\n        end\n   \
    \     i -= 1\n    end\nend\nlargest_prime_factor(13195)", "    n_sqrt = convert(Int64,\
    \ sqrt(n))\n    largest_factor = 0\n    for i = 2:n_sqrt\n        if n % i ==\
    \ 0\n            largest_factor = max(largest_factor, i)\n        end\n    end\n\
    \    return largest_factor\nend", "    # TODO: replace with your code\n    return\
    \ 2\nend", "    f = 2\n    while (n % f == 0)\n        n = n / f\n    end\n  \
    \  f = 3\n    while (n > 1)\n        while (n % f == 0)\n            n = n / f\n\
    \        end\n        f = f + 2\n    end\n    return f - 2\nend", "    largest_prime\
    \ = 0\n    # check all the numbers up to n\n    for i in 2:n\n        # check\
    \ if i is a factor of n\n        if (rem(n, i) == 0)\n            # check if i\
    \ is a prime\n            is_prime = true\n            for j in 2:i\n        \
    \        if (rem(i, j) == 0) & (j != i)\n                    is_prime = false\n\
    \                    break\n                end\n            end\n           \
    \ # if i is a prime, store it\n            if is_prime\n                largest_prime\
    \ = i\n            end\n        end\n    end\n    return largest_prime\nend\n\
    \    ", "    \"\"\"Takes an integer as input and returns its largest prime factor\"\
    \"\"\n    if isprime(n)\n        return n\n    else\n        return largest_prime_factor(n/smallest_prime_factor(n))\n\
    \    end\nend\nprintln(largest_prime_factor(600851475143))", "    \"\"\"Return\
    \ the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if !isprime(n)\n\
    \        k = 2\n        while k < n\n            if rem(n, k) == 0\n         \
    \       if isprime(k)\n                    return k\n                end\n   \
    \         end\n            k += 1\n        end\n    end\nend", "    # if n is\
    \ prime, return n\n    if isprime(n)\n        return n\n    else\n        # otherwise,\
    \ return the largest prime factor of n\n        # find all factors of n and check\
    \ which ones are prime\n        factors = factor(n)\n        prime_factors = filter(isprime,\
    \ factors)\n        return maximum(prime_factors)\n    end\nend", "    while n\
    \ % 2 == 0\n        n = n / 2\n    end\n    prime = 3\n    while n > 1\n     \
    \   while n % prime == 0\n            n = n / prime\n        end\n        prime\
    \ = prime + 2\n    end\n    return prime - 2\nend", "    i = Int64(2)\n    while\
    \ i <= n\n        while n % i == 0\n            n = n / i\n        end\n     \
    \   i = i + 1\n    end\n    return i-1\nend", "    while n % 2 == 0 \n       \
    \ n = n / 2\n    end\n    max = 3\n    while n != 1\n        while n % max ==\
    \ 0\n            n = n / max\n        end\n        max = max + 2\n    end\n  \
    \  return max - 2\nend", "    # Handle special cases\n    if n < 4\n        return\
    \ n\n    end\n    # Take care of 2's\n    while n%2 == 0\n        n = n/2\n  \
    \  end\n    # If n is still > 2, check for larger prime factors\n    if n > 2\n\
    \        p = 3\n        while p <= sqrt(n)\n            if n%p == 0\n        \
    \        n = n/p\n            else\n                p += 2\n            end\n\
    \        end\n    end\n    return n\nend", "    # We only need to check the prime\
    \ factors up to the square root of n\n    upper_bound = floor(Int64, sqrt(n))\n\
    \    current_factor = upper_bound\n    # The first factor we find will be the\
    \ largest\n    while current_factor > 1\n        if n % current_factor == 0\n\
    \            return current_factor\n        end\n        current_factor -= 1\n\
    \    end\nend", "    if isprime(n)\n        return n\n    end\n    i = 2\n   \
    \ while i*i <= n\n        if n % i == 0\n            while n % i == 0\n      \
    \          n = n/i\n            end\n            if isprime(n)\n             \
    \   return n\n            end\n        end\n        i += 1\n    end\n    return\
    \ n\nend", "    # We don't have to test any factor greater than n/2\n    for i\
    \ in 2:n/2\n        if n % i == 0 && is_prime(i)\n            return i\n     \
    \   end\n    end\nend", "    # Find smallest prime factor\n    i::Int64 = 2\n\
    \    while n % i != 0\n        i += 1\n    end\n    f::Int64 = i\n    # Repeatedly\
    \ divide out that factor\n    while n % f == 0\n        n /= f\n    end\n    return\
    \ largest_prime_factor(n)\nend", "  a = 1\n  for i in 2:floor(Int64, sqrt(n))\n\
    \      if n % i == 0\n        n = n / i\n        a = i\n      end\n    end\n \
    \ a\nend", "    \"\"\"Return the largest prime factor of n. Assume n > 1 and is\
    \ not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n\
    \    2\n    \"\"\"", "    factors = prime_factors(n)\n    return factors[end]\n\
    end", "    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n\
    \    2\n    \"\"\"\n    for i in reverse(primes_of_n(n))\n        if n % i ==\
    \ 0\n            return i\n        end\n    end\nend", "    \n    # TODO: Change\
    \ the data type of ans here to be Int64.\n    # If n is a prime, then n is the\
    \ largest prime factor.\n    # Otherwise, n must be a multiple of at least one\
    \ prime number.\n    # We can find the largest prime factor by iterating down\n\
    \    # from n/2 to 2 and divide out the primes.\n    # Hint: Use the is_prime\
    \ function defined earlier.\n    ans = 0\n    #######\n    if is_prime(n)\n  \
    \      ans = n\n    else\n        for i = n/2:-1:2\n            if is_prime(i)\
    \ && n%i == 0\n                ans = i\n                break\n            end\n\
    \        end\n    end\n    #######\n    return ans\nend", "    if isprime(n)\n\
    \        return n\n    end\n    last_prime = 0\n    possible_factor = 2\n    while\
    \ n != 1\n        if n % possible_factor == 0\n            last_prime = possible_factor\n\
    \            n = n // possible_factor\n        else\n            possible_factor\
    \ += 1\n        end\n    end\n    return last_prime\nend", "    factor = 2\n \
    \   while n > 1\n        while n % factor == 0\n            n /= factor\n    \
    \    end\n        factor += 1\n    end\n    return factor - 1\nend\nprintln(largest_prime_factor(13195))\n\
    println(largest_prime_factor(2048))\nprintln(largest_prime_factor(600851475143))",
  "    if !is_prime(n)\n        for x in 2:n\n            while n % x == 0\n     \
    \           n = n / x\n            end\n        end\n    end\n    return n\nend",
  "    for i = 2:n-1\n        if n % i == 0\n            return largest_prime_factor(n/i)\n\
    \        end\n    end\n    return n\nend\n    ", "    p = int(floor(sqrt(n)))\n\
    \    while p >= 2\n        if n % p == 0\n            if is_prime(p)\n       \
    \         return p\n            end\n        end\n        p -= 1\n    end\nend",
  "    \"\"\"\n    Since the largest prime factor is less than the square root of\
    \ n, start \n    at the square root of n and work up \n    \"\"\"\n    sqrt =\
    \ floor(sqrt(n))\n    i = sqrt\n    while i > 1\n        if mod(n, i) == 0\n \
    \           return largest_prime_factor(i)\n        end\n        i = i - 1\n \
    \   end\n    return n\nend", "    for i = 2:n-1\n        # if i is a factor of\
    \ n and is a prime\n        if n % i == 0 && is_prime(i)\n            return i\n\
    \        end\n    end\nend", "    factors = all_factors(n)\n    prime_factors\
    \ = factors[isprime.(factors)]\n    return prime_factors[end]\nend\n    \n    ",
  "    factors = factor(n)\n    return maximum(factors)\nend", "    for i in range(2,\
    \ Int(ceil(sqrt(n))))\n        if n % i == 0\n            return largest_prime_factor(Int64(n/i))\n\
    \        end\n    end\n    return n\nend", "    i = 2\n    while i*i <= n\n  \
    \      while n % i == 0\n            n = n/i\n        end\n        i = i + 1\n\
    \    end\n    return n\nend", "    largest_factor::Int64 = 1\n    factor::Int64\
    \ = 2\n    while factor*factor <= n\n        while n % factor == 0\n         \
    \   largest_factor = factor\n            n /= factor\n        end\n        factor\
    \ += 1\n    end\n    if n > 1\n        largest_factor = n\n    end\n    return\
    \ largest_factor\nend", "    k = 2\n    while n % k != 0 && k*k <= n\n       \
    \ k += 1\n    end\n    if n % k == 0\n        largest_prime_factor(n / k)\n  \
    \  else\n        n\n    end\nend\n        \n    \n    \nend", "    #TODO: Implement\
    \ this method.\n    return n\nend;\nlargest_prime_factor(2048)", "    factor =\
    \ 2\n    while n > 1\n        if n % factor == 0\n            n /= factor\n  \
    \      else\n            factor += 1\n        end\n    end\n    return factor\n\
    end", "    # TODO \n    return\nend", "    for i in primes(n)\n        if n %\
    \ i == 0\n            return i\n        end\n    end\nend", "    for i in n:2:1\n\
    \        if n % i == 0\n            break\n        end\n    end\n    return i\n\
    end", "    \"\"\"\n    1. Find a prime number (smallest divisor) that divides\
    \ n.\n    2. Divide n by that prime number to get the quotient and remainder.\n\
    \    3. If the remainder is 0, then n is a multiple of the prime number.\n   \
    \ 4. If the remainder is not 0, then find the next prime number until the remainder\
    \ is 0.\n    5. Largest prime factor is the last prime number found that divide\
    \ the number.\n    \"\"\"\n    divisor = 2\n    while divisor <= isqrt(n)\n  \
    \      if n % divisor == 0\n            n = n \xF7 divisor\n        else\n   \
    \         divisor += 1\n        end\n    end\n    n\nend", "    \n    if isprime(n)\n\
    \        return n\n    end\n    \n    if n % 2 == 0\n        return largest_prime_factor(n\
    \ \xF7 2)\n    end\n    \n    for i in 3:2:floor(sqrt(n))\n        if n % i ==\
    \ 0\n            return largest_prime_factor(n \xF7 i)\n        end\n    end\n\
    end", "    prime = factors(n)[1]\n    for p in factors(n)\n        if isprime(p)\
    \ && p > prime\n            prime = p\n        end\n    end\n    return prime\n\
    end", "    # Your code here\nend\n \nif __name__ == \"__main__\":\n    print(\"\
    largest_prime_factor(13195) = \", largest_prime_factor(13195))\n    print(\"largest_prime_factor(2048)\
    \ = \", largest_prime_factor(2048))\nend", "    i = 2\n    while i <= n\n    \
    \    if n % i == 0\n            n /= i\n        else\n            i += 1\n   \
    \     end\n    end\n    i\nend", "  for i in (3:step:n) \n    if n % i == 0 &&\
    \ is_prime(i)\n      return i\n    end\n  end\nend", "    max = 0\n    for x in\
    \ 1:n\n        if isprime(x)\n            if n % x == 0\n                max =\
    \ x\n            end\n        end\n    end\n    return max\nend", "    #n = n::Int64\n\
    \    i = 2::Int64\n    while i <= floor(sqrt(n))\n        while n % i == 0\n \
    \           n = n / i\n        end\n        i = i + 1\n    end\n    return n\n\
    end", "    factors = []\n    # Do not include 1 in the factors list\n    factors\
    \ = [i for i in 1:n if (n % i == 0) & (i != 1)]\n    return factors[end]\nend",
  "    prime_factors = []\n    num = n\n    i = 2\n    while num > 1\n        while\
    \ rem(num, i) == 0 \n            push!(prime_factors, i)\n            num = num/i\n\
    \        end\n        i += 1\n    end\n    return maximum(prime_factors)\nend\n\
    largest_prime_factor(600851475143)", "    factor = 0\n    while n % 2 == 0\n \
    \       factor = 2\n        n = n/2\n    end\n    factor = prime_factor(n, 3)\n\
    \    return factor\nend", "    factor = smallest_prime_factor(n)\n    while factor\
    \ < n/factor\n        n /= factor\n        factor = smallest_prime_factor(n)\n\
    \    end\n    return n\nend", "    # TODO: Finish this function!\nend\n ", " \
    \   x = 2\n    while x <= sqrt(n)\n        if mod(n, x) == 0\n            n =\
    \ n/x\n        else\n            x += 1\n        end\n    end\n    return n\n\
    end", "    p = 2\n    while p*p <= n\n        while n % p == 0\n            n\
    \ = n/p\n        end\n        p = p + 1\n    end\n    return n\nend", "    \"\"\
    \"\n    find smallest divisor by checking if it's divisible by a smaller number\n\
    \    \"\"\"\n    for i in 2:floor(Int64,sqrt(n))\n        if n % i == 0\n    \
    \        return largest_prime_factor(n/i)\n        end\n    end\n    return n\n\
    end", "    p = Int64(2)\n    while n > 1\n        while n % p == 0\n         \
    \   n = n / p\n        end\n        p = p + 1\n    end\n    return p - 1\nend\n\
    \ \n@test largest_prime_factor(13195) == 29\n@test largest_prime_factor(2048)\
    \ == 2\n;\n \nlargest_prime_factor(600851475143)", "    if n == 1 return 0 end\n\
    \    if n == 2 return 2 end\n    for i in divisors(n)\n        if isprime(i)\n\
    \            return i\n        end\n    end\nend", "    i = 1\n    while (i <\
    \ n)\n        if(is_prime(i) && (n % i == 0))\n            n = n / i\n       \
    \ end\n        i = i + 1\n    end\n    n\nend", "    num = n\n    p = 2\n    while\
    \ p*p <= num \n        while num % p == 0\n            num = num / p\n       \
    \ end\n        p = p + 1\n    end\n    num\nend", "    # working solution, but\
    \ too many loops \n    # primes = primes(2^15)\n    # for p in primes\n    # \
    \    while n % p == 0\n    #         n = n/p\n    #     end\n    # end\n    #\
    \ return n\n    \n    # another working solution that's more efficient\n    n\
    \ = n\n    p = 2\n    while p <= n\n        while n % p == 0\n            n =\
    \ n/p\n        end\n        p += 1\n    end\n    return n\nend\n    \n# function\
    \ largest_prime_factor_loop(n::Int64)::Int64\n#     for i in n:-1:1\n#       \
    \  if isprime(i) && n % i == 0\n#             return i\n#         end\n#     end\n\
    # end", "    largest_factor = 0 \n    factor = 2 \n    while n > 1 \n        while\
    \ rem(n, factor) == 0 \n            largest_factor = factor \n            n =\
    \ n \xF7 factor \n        end \n        factor = factor + 1 \n    end \n    return\
    \ largest_factor \nend ", "    \n    # Special case if n is a power of 2 \n  \
    \  @match n begin\n        \n        # In this case we have the special case that\
    \ n is a power of 2. Note that we need a \n        # minimum value of 4 to be\
    \ a power of 2 since 1=2^0 and 2=2^1.\n        @when(n == 4) return 2\n      \
    \  @when(n > 4) begin\n            num_2s = 0\n            while iseven(n) ==\
    \ true\n                n = n>>1\n                num_2s += 1\n            end\n\
    \            return 2^(num_2s-1)\n        end\n        \n        # For values\
    \ of n less than 4, we know the largest prime factor must be equal to n\n    \
    \    @otherwise return n\n    end\n    \n    # Find the lowest prime factor of\
    \ n. The lowest prime factor of n is the square root of n. \n    # Since sqrt\
    \ returns a floating point number, we convert this to an Int64 by rounding.\n\
    \    # Note that we need at least n >= 4 to have a prime factor less than n\n\
    \    @match n begin\n        @when(n >= 4) begin\n            low_prime_factor\
    \ = Int64(round(sqrt(n)))\n            while isprime(low_prime_factor) == false\n\
    \                low_prime_factor -= 1\n            end\n            return low_prime_factor\n\
    \        end\n        @otherwise return n\n    end\nend", "    for i in 2:n\n\
    \        if is_prime(i) && n % i == 0\n            return i\n        end\n   \
    \ end\nend\n \nlargest_prime_factor(13195)\n \n \n \n ", "    # start at the square\
    \ root and work down\n    factor = div(sqrt(n),1)\n    while factor > 1\n    \
    \    if n % factor == 0 \n            if is_prime(factor)\n                return\
    \ factor\n            end\n        end\n        factor -= 1\n    end\nend", " \
    \   factor, largest_prime_factor = 2, 2\n    while n > 1\n        if n % factor\
    \ == 0\n            n /= factor\n            largest_prime_factor = factor\n \
    \       else\n            factor += 1\n        end\n    end\n    return largest_prime_factor\n\
    end", "    if n == 2\n        return 2\n    end\n    while n % 2 == 0\n      \
    \  n = n / 2\n    end\n    i = 3\n    while i <= sqrt(n)\n        while n % i\
    \ == 0\n            n = n / i\n        end\n        i = i + 2\n    end\n    return\
    \ n\nend", "    max_prime = 1\n    divisor = 2\n    while divisor * divisor <=\
    \ n:\n        if n % divisor == 0:\n            max_prime = divisor\n        \
    \    n /= divisor\n        else\n            divisor += 1\n        end\n    end\n\
    \    return max(max_prime, n)\nend", "    i = 2\n    while i <= isqrt(n) \n  \
    \      if n % i == 0 \n            n = n / i\n        else \n            i +=\
    \ 1\n        end\n    end\n    return n\nend", "    # Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n    prime = primes(n)[end]\n\
    \    return prime\nend", "    is_prime = true\n    while n > 1\n        is_prime\
    \ = true\n        for i in 2:n-1\n            if n % i == 0\n                is_prime\
    \ = false\n                break\n            end\n        end\n        if is_prime\n\
    \            return n\n        end\n        n = n - 1\n    end\nend", "    prime_factors\
    \ = primes(n)\n    return maximum(prime_factors)\nend", "    max_factor = 1\n\
    \    factor = 2\n    while factor <= n\n        if n % factor == 0\n         \
    \   n /= factor\n            max_factor = factor\n        else\n            factor\
    \ += 1\n        end\n    end\n    return max_factor\nend", "    prime_factors\
    \ = isprime(1:n)\n    i = n\n    while !prime_factors[i]\n        i = i - 1\n\
    \    end\n    return i\nend", "    p = primes(n)[end]\n    while n % p != 0\n\
    \        p = primes(p-1)[end]\n    end\n    return p\nend", "    last_factor =\
    \ n\n    if n % 2 == 0\n        last_factor = 2\n        n = n/2\n        while\
    \ n % 2 == 0\n            n = n/2\n        end\n    end\n    factor = 3\n    max_factor\
    \ = sqrt(n)\n    while n > 1 && factor <= max_factor\n        if n % factor ==\
    \ 0\n            n = n/factor\n            last_factor = factor\n            while\
    \ n % factor == 0\n                n = n/factor\n            end\n           \
    \ max_factor = sqrt(n)\n        end\n        factor = factor + 2\n    end\n  \
    \  if n == 1\n        return last_factor\n    else\n        return n\n    end\n\
    end\n@time largest_prime_factor(600851475143)", "    \n    # Your code here\n\
    \    if isprime(n)\n        return n\n    end\n    for i = 2:n-1\n        if isprime(i)\n\
    \            if n%i == 0\n                return largest_prime_factor(n/i)\n \
    \           end\n        end\n    end\nend\nlargest_prime_factor(2048)"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
