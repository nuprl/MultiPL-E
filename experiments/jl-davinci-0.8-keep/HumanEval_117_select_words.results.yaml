name: HumanEval_117_select_words
language: jl
results:
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   words = split(s)\n    result = []\n    for word in words\n        word_count\
    \ = 0\n        for letter in word\n            if letter in \"bBcCdDfFgGhHjJkKlLmMnNpPqQrRsStTvVwWxXyYzZ\"\
    \n                word_count += 1\n            end\n        end\n        if word_count\
    \ == n\n            push!(result, word)\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   words = split(s, \" \")\n    ans = []\n    for word in words\n        if count_consonants(word)\
    \ == n\n            push!(ans, word)\n        end\n    end\n    return ans\nend\n\
    using Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpvu161sjx.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpvu161sjx.jl:17\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpvu161sjx.jl:28 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvu161sjx.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpvu161sjx.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpvu161sjx.jl:17\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpvu161sjx.jl:29 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvu161sjx.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpvu161sjx.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpvu161sjx.jl:17\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpvu161sjx.jl:30 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvu161sjx.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpvu161sjx.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: count_consonants\
    \ not"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvu161sjx.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   # YOUR CODE HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp0mn9jclx.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{String}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n     @ Main\
    \ /tmp/tmp0mn9jclx.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0mn9jclx.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0mn9jclx.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp0mn9jclx.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{String}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n     @ Main\
    \ /tmp/tmp0mn9jclx.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/jul"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0mn9jclx.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   words = split(s)\n    selected = []\n    for word in words\n        if length(consonants(word))\
    \ == n\n            push!(selected, word)\n        end\n    end\n    return selected\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmppuu9riu_.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmppuu9riu_.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppuu9riu_.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppuu9riu_.jl:27\ntest set:\
    \ Error During Test at /tmp/tmppuu9riu_.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmppuu9riu_.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppuu9riu_.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppuu9riu_.jl:27\ntest set:\
    \ Error During Test at /tmp/tmppuu9riu_.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmppuu9riu_.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppuu9riu_.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppuu9riu_.jl:27\ntest set:\
    \ Error During Test at /tmp/tmppuu9riu_.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: consonants not\
    \ defined\n  Stacktrace:\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppuu9riu_.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   isvowel(x) = x in [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"]\n    s = lowercase(s)\n\
    \    words = split(s, \" \")\n    words = map(x -> length(filter(y -> !isvowel(y),\
    \ x)), words)\n    selected_words = filter(x -> x[2] == n, enumerate(words))\n\
    \    selected_words = map(x -> x[1], selected_words)\n    selected_words = map(x\
    \ -> words[x], selected_words)\n    return selected_words\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little\
    \ lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3)\
    \ == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2a1krq32.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  MethodError:\
    \ no method matching filter(::var\"#3#9\"{Int64}, ::Base.Iterators.Enumerate{Vector{Int64}})\n\
    \  Closest candidates are:\n    filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n     @ Main\
    \ /tmp/tmp2a1krq32.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2a1krq32.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2a1krq32.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp2a1krq32.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  MethodError:\
    \ no method matching filter(::var\"#3#9\"{Int64}, ::Base.Iterators.Enumerate{Vector{Int64}})\n\
    \  Closest candidates are:\n    filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n     @ Main\
    \ /tmp/tmp2a1krq32.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2a1krq32.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scop"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2a1krq32.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   \n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    words = split(s)\n\
    \    words_with_n_consonants = []\n    \n    for word in words\n        consonants\
    \ = 0\n        for letter in word\n            if !(letter in vowels)\n      \
    \          consonants += 1\n            end\n        end\n        if consonants\
    \ == n\n            push!(words_with_n_consonants, word)\n        end\n    end\n\
    \    \n    return words_with_n_consonants\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4)\
    \ == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\"\
    , \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpiyk1ib_6.jl:38\n  Expression: candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"]\n   Evaluated: [\"Mary\", \"lamb\"\
    ] == [\"little\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiyk1ib_6.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiyk1ib_6.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpiyk1ib_6.jl:39\n  Expression: candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: [\"had\"] == [\"Mary\", \"\
    lamb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiyk1ib_6.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiyk1ib_6.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpiyk1ib_6.jl:41\n  Expression: candidate(\"Hello world\", 4)\
    \ == [\"world\"]\n   Evaluated: String[] == [\"world\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiyk1ib_6.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiyk1ib_6.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpiyk1ib_6.jl:42\n  Expression: candidate(\"Uncle sam\", 3)\
    \ == [\"Uncle\"]\n   Evaluated: [\"sam\"] == [\"Uncle\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiyk1ib_6.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiyk1ib_6.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpiyk1ib_6.jl:44\n  Expression: candidate(\"a b c d e f\", 1)\
    \ == ["
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiyk1ib_6.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   s = split(s)\n    vec = []\n    for j = 1:length(s)\n        t = s[j]\n  \
    \      count = 0\n        for i = 1:length(t)\n            if t[i] \u2209 [\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"]\n        \
    \        count += 1\n            end\n        end\n        if count == n\n   \
    \         push!(vec, t)\n        end\n    end\n    return vec\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\"\
    , 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) ==\
    \ Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\
    \t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4)\
    \ == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"\
    c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpn5obnqcd.jl:35\n  Expression: candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"]\n   Evaluated: [\"Mary\", \"lamb\"\
    ] == [\"little\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn5obnqcd.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn5obnqcd.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpn5obnqcd.jl:36\n  Expression: candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: [\"had\"] == [\"Mary\", \"\
    lamb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn5obnqcd.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn5obnqcd.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpn5obnqcd.jl:38\n  Expression: candidate(\"Hello world\", 4)\
    \ == [\"world\"]\n   Evaluated: String[] == [\"world\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn5obnqcd.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn5obnqcd.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpn5obnqcd.jl:39\n  Expression: candidate(\"Uncle sam\", 3)\
    \ == [\"Uncle\"]\n   Evaluated: [\"sam\"] == [\"Uncle\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn5obnqcd.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn5obnqcd.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpn5obnqcd.jl:41\n  Expression: candidate(\"a b c d e f\", 1)\
    \ == ["
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn5obnqcd.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   # write your code here\nend\n \n# your code here\n \nend\n \n \n \n \n@testset\
    \ \"Simple string\" begin\n    @test select_words(\"Mary had a little lamb\",\
    \ 4) == [\"little\"]\n    @test select_words(\"Mary had a little lamb\", 3) ==\
    \ [\"Mary\", \"lamb\"]\n    @test select_words(\"simple white space\", 2) == []\n\
    \    @test select_words(\"Hello world\", 4) == [\"world\"]\n    @test select_words(\"\
    Uncle sam\", 3) == [\"Uncle\"]\n    @test select_words(\"\", 1) == []\n    @test\
    \ select_words(\" \", 1) == []\n    @test select_words(\"a\", 1) == []\n    @test\
    \ select_words(\"a \", 1) == []\n    @test select_words(\" a\", 1) == []\n   \
    \ @test select_words(\" a \", 1) == []\n    @test select_words(\"a a\", 1) ==\
    \ []\n    @test select_words(\"bb\", 1) == []\n    @test select_words(\"bb\",\
    \ 2) == [\"bb\"]\n    @test select_words(\"bb \", 2) == [\"bb\"]\n    @test select_words(\"\
    \ bb\", 2) == [\"bb\"]\n    @test select_words(\" bb \", 2) == [\"bb\"]\n    @test\
    \ select_words(\"bb bb\", 2) == [\"bb\", \"bb\"]\n    @test select_words(\"b b\"\
    , 1) == []\n    @test select_words(\"b b\", 2) == [\"b b\"]\n    @test select_words(\"\
    b b \", 2) == [\"b b\"]\n    @test select_words(\" b b\", 2) == [\"b b\"]\n  \
    \  @test select_words(\" b b \", 2) == [\"b b\"]\n    @test select_words(\"b b\
    \ b b\", 2) == [\"b b\", \"b b\"]\n    @test select_words(\"b b b b\", 4) == []\n\
    \    @test select_words(\"b b b b\", 0) == []\n    @test select_words(\"b b b\
    \ b \", 4) == []\n    @test select_words(\" b b b b\", 4) == []\n   \nusing Test\n\
    \n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\"\
    , 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) ==\
    \ Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\
    \t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4)\
    \ == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"\
    c\", \"d\", \"f\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp13cawg9t.jl:19\nin expression starting at /tmp/tmp13cawg9t.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   vowels = Set(['a', 'e', 'i', 'o', 'u'])\n    filtered_string = split(s)\n\
    \    filter(x -> x == n, countmap(map(x -> length(filter(y -> !y in vowels, x)),\
    \ map(x -> lowercase(x), split(s)))))\n    end\nusing Test\n\n@testset begin\n\
    \ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4)\
    \ == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\"\
    , \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7f36x2fz.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  MethodError:\
    \ no method matching !(::Char)\n  Closest candidates are:\n    !(!Matched::Function)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:1117\n    !(!Matched::Bool)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/bool.jl:35\n    !(!Matched::Missing)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:101\n  Stacktrace:\n\
    \    [1] (::var\"#3#7\"{Set{Char}})(y::Char)\n      @ Main /tmp/tmp7f36x2fz.jl:16\n\
    \    [2] filter(f::var\"#3#7\"{Set{Char}}, s::String)\n      @ Base ./strings/substring.jl:246\n\
    \    [3] #2\n      @ /tmp/tmp7f36x2fz.jl:16 [inlined]\n    [4] iterate\n     \
    \ @ ./generator.jl:47 [inlined]\n    [5] _collect(c::Vector{String}, itr::Base.Generator{Vector{String},\
    \ var\"#2#6\"{Set{Char}}}, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})\n\
    \      @ Base ./array.jl:744\n    [6] collect_similar\n      @ ./array.jl:653\
    \ [inlined]\n    [7] map\n      @ ./abstractarray.jl:2867 [inlined]\n    [8] select_words(s::String,\
    \ n::Int64)\n      @ Main /tmp/tmp7f36x2fz.jl:16\n    [9] macro expansion\n  \
    \    @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp7f36x2fz.jl:23 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp7f36x2fz.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp7f36x2fz.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  MethodError:\
    \ no method matching !(::Char)\n  Closest candidates are:\n    !(!Matched::Function)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:1117\n    !(!Matched::Bool)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/bool.jl:35\n    !(!Matched::Missing)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:101\n  Stacktrace:\n\
    \    [1] (::var\"#3#7\"{Set{Char}})(y::Char)\n      @ Main /tmp/tmp7f36x2fz.jl:"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7f36x2fz.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   x = split(s)\n    y = []\n    for i in x\n        if count_consonants(i) ==\
    \ n\n            push!(y, i)\n        end\n    end\n    return y\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\"\
    , 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) ==\
    \ Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\
    \t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4)\
    \ == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"\
    c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpd5af9bv_.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpd5af9bv_.jl:17\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpd5af9bv_.jl:28 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd5af9bv_.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpd5af9bv_.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpd5af9bv_.jl:17\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpd5af9bv_.jl:29 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd5af9bv_.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpd5af9bv_.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpd5af9bv_.jl:17\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpd5af9bv_.jl:30 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd5af9bv_.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpd5af9bv_.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: count_consonants\
    \ not"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd5af9bv_.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   if s == \"\" \n        s = split(s, r\"\\s+\")\n        return []\n    end\n\
    \    s = split(s, r\"\\s+\")\n    selected_words = []\n    for word in s\n   \
    \     if sum(is_consonant(c) for c in word) == n\n            push!(selected_words,\
    \ word)\n        end\n    end\n    return selected_words\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little\
    \ lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3)\
    \ == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp36gdbu7a.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ is_consonant not defined\n  Stacktrace:\n    [1] (::var\"#1#2\")(c::Char)\n\
    \      @ Main ./none:0\n    [2] MappingRF\n      @ ./reduce.jl:95 [inlined]\n\
    \    [3] _foldl_impl(op::Base.MappingRF{var\"#1#2\", Base.BottomRF{typeof(Base.add_sum)}},\
    \ init::Base._InitialValue, itr::SubString{String})\n      @ Base ./reduce.jl:58\n\
    \    [4] foldl_impl\n      @ ./reduce.jl:48 [inlined]\n    [5] mapfoldl_impl\n\
    \      @ ./reduce.jl:44 [inlined]\n    [6] #mapfoldl#244\n      @ ./reduce.jl:162\
    \ [inlined]\n    [7] mapfoldl\n      @ ./reduce.jl:162 [inlined]\n    [8] #mapreduce#248\n\
    \      @ ./reduce.jl:289 [inlined]\n    [9] mapreduce\n      @ ./reduce.jl:289\
    \ [inlined]\n   [10] #sum#251\n      @ ./reduce.jl:503 [inlined]\n   [11] sum\n\
    \      @ ./reduce.jl:503 [inlined]\n   [12] #sum#252\n      @ ./reduce.jl:532\
    \ [inlined]\n   [13] sum\n      @ ./reduce.jl:532 [inlined]\n   [14] select_words(s::String,\
    \ n::Int64)\n      @ Main /tmp/tmp36gdbu7a.jl:21\n   [15] macro expansion\n  \
    \    @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [16] macro expansion\n      @ /tmp/tmp36gdbu7a.jl:32 [inlined]\n\
    \   [17] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [18] top-level scope\n      @ /tmp/tmp36gdbu7a.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp36gdbu7a.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ is_consonant not defined\n  Stacktrace:\n    [1] (::var\"#1#2\")(c::Char)\n\
    \      @ Main ./none:0\n    [2] MappingRF\n      @ ./reduce.jl:95 [inlined]\n\
    \    [3] _foldl_impl(op::Base.MappingRF{var\"#1#2\", Base.BottomRF{typeof(Base.add_sum)}},\
    \ init::Base._InitialValue, itr::SubString{String})\n      @ Base ./reduce.jl:58\n\
    \    [4] foldl_impl\n      @ ./reduce.jl:48 [inlined]\n    [5] mapfoldl_impl\n\
    \      @ ./reduce.jl:44 [inlined]\n    [6] #mapfoldl#244\n      @ ./reduce.jl:162\
    \ [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp36gdbu7a.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   s = replace(s, \" \" => \"\")\n    words = split(s, ' ')\n    result = []\n\
    \    for word in words\n        if count_consonants(word) == n\n            push!(result,\
    \ word)\n        end\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\"\
    , 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"\
    Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpvbmlchac.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpvbmlchac.jl:18\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpvbmlchac.jl:29 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvbmlchac.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpvbmlchac.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpvbmlchac.jl:18\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpvbmlchac.jl:30 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvbmlchac.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpvbmlchac.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpvbmlchac.jl:18\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpvbmlchac.jl:31 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvbmlchac.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpvbmlchac.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: count_consonants\
    \ not"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvbmlchac.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   # separate string s by whitespace\n    words = split(s)\n    # create list\
    \ to hold selected words\n    selected_words = []\n    # loop through each word\
    \ in words\n    for word in words\n        # keep track of number of consonants\
    \ in each word\n        consonants = 0\n        # loop through each character\
    \ in word\n        for c in word\n            # increment consonants if character\
    \ is not a vowel\n            if !(c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u')\n                consonants += 1\n            end\n        end\n\
    \        # append to selected_words if number of consonants == n\n        if consonants\
    \ == n\n            push!(selected_words, word)\n        end\n    end\n    # return\
    \ selected_words\n    return selected_words\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4)\
    \ == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\"\
    , \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy1y7q9et.jl:46\n  Expression: candidate(\"\
    Uncle sam\", 3) == [\"Uncle\"]\n   Evaluated: String[] == [\"Uncle\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy1y7q9et.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy1y7q9et.jl:41\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy1y7q9et.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   vowels = \"aeiouAEIOU\"\n    words = split(s, \" \")\n    for i in 1:length(words)\n\
    \        if length(words[i]) == n\n            count = 0\n            for j in\
    \ 1:length(words[i])\n                if !in(words[i][j], vowels)\n          \
    \          count += 1\n                end\n            end\n            if count\
    \ == n\n                push!(result, words[i])\n            end\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"\
    ])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\
    \t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"\
    Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"\
    Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"\
    a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpx_inyzzx.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ result not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpx_inyzzx.jl:29\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx_inyzzx.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx_inyzzx.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpx_inyzzx.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ result not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpx_inyzzx.jl:29\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx_inyzzx.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx_inyzzx.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpx_inyzzx.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ result not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpx_inyzzx.jl:29\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx_inyzzx.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx_inyzzx.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpx_inyzzx.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: result not defined\n\
    \  Stacktrace:\n   [1] select_wor"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx_inyzzx.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   if n == 0\n        return s\n    end\n    letters = s.lowercase\n    letter\
    \ = letters[1]\n    if letter \u2208 \"aeiou\"\n        return select_words(s[2:end],\
    \ n)\n    else\n        return [letters[1]] + select_words(s[2:end], n-1)\n  \
    \  end\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpf4mfcn4z.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  type\
    \ String has no field lowercase\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42\
    \ [inlined]\n   [2] select_words(s::String, n::Int64)\n     @ Main /tmp/tmpf4mfcn4z.jl:17\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpf4mfcn4z.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpf4mfcn4z.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpf4mfcn4z.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  type String\
    \ has no field lowercase\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42\
    \ [inlined]\n   [2] select_words(s::String, n::Int64)\n     @ Main /tmp/tmpf4mfcn4z.jl:17\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpf4mfcn4z.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpf4mfcn4z.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpf4mfcn4z.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  type String has\
    \ no field lowercase\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] select_words(s::String, n::Int64)\n     @ Main /tmp/tmpf4mfcn4z.jl:17\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpf4mfcn4z.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpf4mfcn4z.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpf4mfcn4z.j"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf4mfcn4z.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   \"\"\"\n    >>> select_words(\"Mary had a little lamb\", 4)\n    1-element\
    \ Array{String,1}:\n     \"little\"\n    >>> select_words(\"Mary had a little\
    \ lamb\", 3)\n    2-element Array{String,1}:\n     \"Mary\"\n     \"lamb\"\n \
    \   >>> select_words(\"simple white space\", 2)\n    0-element Array{String,1}\n\
    \    >>> select_words(\"Hello world\", 4)\n    1-element Array{String,1}:\n  \
    \   \"world\"\n    >>> select_words(\"Uncle sam\", 3)\n    1-element Array{String,1}:\n\
    \     \"Uncle\"\n    \"\"\"\n    # collect all words in a string s\n    words\
    \ = split(s, ' ')\n    cons = 0\n    result = String[]\n    # for each word, check\
    \ if it has exactly n consonants,\n    # and if yes, add to the result\n    for\
    \ word in words\n        for c in word\n            if !(c in ['a', 'e', 'i',\
    \ 'o', 'u', 'y'])\n                cons += 1\n            end\n        end\n \
    \       if cons == n\n            push!(result, word)\n        end\n        cons\
    \ = 0\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"\
    ])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\
    \t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"\
    Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"\
    Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"\
    a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbc9ycbsh.jl:56\n  Expression: candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: [\"lamb\"\
    ] == [\"Mary\", \"lamb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbc9ycbsh.jl:56 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbc9ycbsh.jl:54\ntest set: Test\
    \ Failed at /tmp/tmpbc9ycbsh.jl:59\n  Expression: candidate(\"Uncle sam\", 3)\
    \ == [\"Uncle\"]\n   Evaluated: String[] == [\"Uncle\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbc9ycbsh.jl:59 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbc9ycbsh.jl:54\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbc9ycbsh.jl:52\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   A = split(s, \" \")\n    t = typeof(A)\n    B = t[]\n    C = t[]\n    for\
    \ i in A\n        cons = 0\n        for j in i\n            if any(j == x for\
    \ x in \"qwrtypsdfghjklzxcvbnm\")\n                cons += 1\n            end\n\
    \        end\n        if cons == n\n            push!(B, i)\n        end\n   \
    \ end\n    return B\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmuhz57k_.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  MethodError:\
    \ Cannot `convert` an object of type SubString{String} to an object of type Vector{SubString{String}}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] push!(a::Vector{Vector{SubString{String}}}, item::SubString{String})\n\
    \     @ Base ./array.jl:994\n   [2] select_words(s::String, n::Int64)\n     @\
    \ Main /tmp/tmpmuhz57k_.jl:26\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpmuhz57k_.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpmuhz57k_.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpmuhz57k_.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  MethodError:\
    \ Cannot `convert` an object of type SubString{String} to an object of type Vector{SubString{String}}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] push!(a::Vector{Vector{SubString{String}}"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmuhz57k_.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   words = split(s, r\"\\s+\")\n    rtn = []\n    for word in words\n       \
    \ if count_consonants(word) == n\n            push!(rtn, word)\n        end\n\
    \    end\n    return rtn\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgcb9f6cc.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpgcb9f6cc.jl:17\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpgcb9f6cc.jl:28 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgcb9f6cc.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpgcb9f6cc.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpgcb9f6cc.jl:17\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpgcb9f6cc.jl:29 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgcb9f6cc.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpgcb9f6cc.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpgcb9f6cc.jl:17\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpgcb9f6cc.jl:30 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgcb9f6cc.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpgcb9f6cc.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: count_consonants\
    \ not"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgcb9f6cc.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p',\
    \ 'q', 'r', 's', 't', 'v', 'w', 'x', 'z']\n    words = split(s, \" \")\n    new_words\
    \ = []\n    for word in words\n        counter = 0\n        for letter in word\n\
    \            if letter in consonants\n                counter += 1\n         \
    \   end\n        end\n        if counter == n\n            push!(new_words, word)\n\
    \        end\n    end\n    return new_words\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4)\
    \ == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\"\
    , \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_wqirubn.jl:36\n  Expression: candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: [\"lamb\"\
    ] == [\"Mary\", \"lamb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_wqirubn.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_wqirubn.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_wqirubn.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   words = split(s)\n    vs = Vector{String}()\n    vowels = [\"a\", \"e\", \"\
    i\", \"o\", \"u\"]\n    for word in words\n        count = 0\n        for letter\
    \ in word\n            if !(letter in vowels)\n                count += 1\n  \
    \          end\n        end\n        if count == n\n            push!(vs, word)\n\
    \        end\n    end\n    return vs\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"\
    ])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\
    \t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"\
    Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"\
    Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"\
    a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnbsmutyb.jl:35\n  Expression: candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"]\n   Evaluated: [\"Mary\", \"lamb\"\
    ] == [\"little\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnbsmutyb.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnbsmutyb.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpnbsmutyb.jl:36\n  Expression: candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: [\"had\"] == [\"Mary\", \"\
    lamb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnbsmutyb.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnbsmutyb.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpnbsmutyb.jl:38\n  Expression: candidate(\"Hello world\", 4)\
    \ == [\"world\"]\n   Evaluated: String[] == [\"world\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnbsmutyb.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnbsmutyb.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpnbsmutyb.jl:39\n  Expression: candidate(\"Uncle sam\", 3)\
    \ == [\"Uncle\"]\n   Evaluated: [\"sam\"] == [\"Uncle\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnbsmutyb.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnbsmutyb.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpnbsmutyb.jl:41\n  Expression: candidate(\"a b c d e f\", 1)\
    \ == ["
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnbsmutyb.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   res = []\n    arr = split(s)\n    for i in arr\n        if count_consonants(i)\
    \ == n\n            push!(res, i)\n        end\n    end\n    return res\nend\n\
    using Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4cmcy_qd.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp4cmcy_qd.jl:17\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp4cmcy_qd.jl:28 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4cmcy_qd.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp4cmcy_qd.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp4cmcy_qd.jl:17\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp4cmcy_qd.jl:29 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4cmcy_qd.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp4cmcy_qd.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp4cmcy_qd.jl:17\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp4cmcy_qd.jl:30 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4cmcy_qd.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp4cmcy_qd.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: count_consonants\
    \ not"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4cmcy_qd.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   return map(x -> x[1],filter(x -> x[2] == n, map(x -> [x,length(filter(c ->\
    \ isconsonant(c), x))],split(s, \" \"))))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4)\
    \ == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\"\
    , \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6qz96pou.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ isconsonant not defined\n  Stacktrace:\n    [1] (::var\"#4#8\")(c::Char)\n \
    \     @ Main /tmp/tmp6qz96pou.jl:14\n    [2] filter(f::var\"#4#8\", s::SubString{String})\n\
    \      @ Base ./strings/substring.jl:246\n    [3] #3\n      @ /tmp/tmp6qz96pou.jl:14\
    \ [inlined]\n    [4] iterate\n      @ ./generator.jl:47 [inlined]\n    [5] _collect(c::Vector{SubString{String}},\
    \ itr::Base.Generator{Vector{SubString{String}}, var\"#3#7\"}, #unused#::Base.EltypeUnknown,\
    \ isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n    [6] collect_similar\n\
    \      @ ./array.jl:653 [inlined]\n    [7] map\n      @ ./abstractarray.jl:2867\
    \ [inlined]\n    [8] select_words(s::String, n::Int64)\n      @ Main /tmp/tmp6qz96pou.jl:14\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp6qz96pou.jl:21 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp6qz96pou.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp6qz96pou.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ isconsonant not defined\n  Stacktrace:\n    [1] (::var\"#4#8\")(c::Char)\n \
    \     @ Main /tmp/tmp6qz96pou.jl:14\n    [2] filter(f::var\"#4#8\", s::SubString{String})\n\
    \      @ Base ./strings/substring.jl:246\n    [3] #3\n      @ /tmp/tmp6qz96pou.jl:14\
    \ [inlined]\n    [4] iterate\n      @ ./generator.jl:47 [inlined]\n    [5] _collect(c::Vector{SubString{String}},\
    \ itr::Base.Generator{Vector{SubString{String}}, var\"#3#7\"}, #unused#::Base.EltypeUnknown,\
    \ isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n    [6] collect_similar\n\
    \      @ ./array.jl:653 [inlined]\n    [7] map\n      @ ./abstractarray.jl:2867\
    \ [inlined]\n    [8] select_words(s::String, n::Int64)\n      @ Main /tmp/tmp6qz96pou.jl:14\n\
    \    [9] macro exp"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6qz96pou.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   words = split(s)\n    selected = []\n    consonants = set([\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\"])\n    for word in words\n     \
    \   if (length(setintersect(Set(split(word)), consonants)) == n)\n           \
    \ push!(selected, word)\n        end\n    end\n    return selected\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary\
    \ had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\"\
    , 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"\
    ])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\"\
    , 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\",\
    \ \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp83hrpdr2.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ set not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n \
    \    @ Main /tmp/tmp83hrpdr2.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp83hrpdr2.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp83hrpdr2.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp83hrpdr2.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ set not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n \
    \    @ Main /tmp/tmp83hrpdr2.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp83hrpdr2.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp83hrpdr2.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp83hrpdr2.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ set not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n \
    \    @ Main /tmp/tmp83hrpdr2.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp83hrpdr2.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp83hrpdr2.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp83hrpdr2.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: set not defined\n\
    \  Stacktrace:\n   [1] select_words(s::String"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp83hrpdr2.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   filter(x -> length(x) == n, split(s))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4)\
    \ == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\"\
    , \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1n6mg306.jl:21\n  Expression: candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"]\n   Evaluated: [\"Mary\", \"lamb\"\
    ] == [\"little\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1n6mg306.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1n6mg306.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp1n6mg306.jl:22\n  Expression: candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: [\"had\"] == [\"Mary\", \"\
    lamb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1n6mg306.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1n6mg306.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp1n6mg306.jl:24\n  Expression: candidate(\"Hello world\", 4)\
    \ == [\"world\"]\n   Evaluated: String[] == [\"world\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1n6mg306.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1n6mg306.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp1n6mg306.jl:25\n  Expression: candidate(\"Uncle sam\", 3)\
    \ == [\"Uncle\"]\n   Evaluated: [\"sam\"] == [\"Uncle\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1n6mg306.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1n6mg306.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp1n6mg306.jl:27\n  Expression: candidate(\"a b c d e f\", 1)\
    \ == ["
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1n6mg306.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   # your code goes here\n    list_of_words = split(s)\n    output = []\n   \
    \ for word in list_of_words\n        if length(split(regexp(\"[aeiou]\", word)))\
    \ == n\n            push!(output, word)\n        end\n    end\n    return output\n\
    end\n \n \n\"\"\"Given a string s, you have been tasked to implement a function\
    \ that replaces \n    all occurrences of the word \"good\" with the word \"best\"\
    \ and returns the modified string.\n    Note: you may assume the input string\
    \ contains only letters and spaces.\n    Examples:\n    replace_good(\"He is good\"\
    ) ==> \"He is best\"\n    replace_good(\"You are good\") ==> \"You are best\"\n\
    \    replace_good(\"Take good care of my goods\") ==> \"Take best care of my bests\"\
    \n    replace_good(\"\") ==> \"\"\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) ==\
    \ [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\"\
    , \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpi801t7_x.jl:26\nin expression starting at /tmp/tmpi801t7_x.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   words = split(s)\n    for i in 1:length(words)\n        if length(consonants(words[i]))\
    \ != n\n            words[i] = \"\"\n        end\n    end\n    return filter(x\
    \ -> x != \"\", words)\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2zjnh9e1.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp2zjnh9e1.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2zjnh9e1.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2zjnh9e1.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp2zjnh9e1.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp2zjnh9e1.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2zjnh9e1.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2zjnh9e1.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp2zjnh9e1.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp2zjnh9e1.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2zjnh9e1.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2zjnh9e1.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp2zjnh9e1.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: consonants not\
    \ defined\n  Stacktrace:\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2zjnh9e1.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\"\
    ]\n    words = split(s, \" \")\n    selected_words = []\n    for word in words\n\
    \        count = 0\n        for c in word\n            if c in consonants\n  \
    \              count += 1\n            end\n        end\n        if count == n\n\
    \            push!(selected_words, word)\n        end\n    end\n    return selected_words\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7b5n30_1.jl:35\n  Expression: candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"]\n   Evaluated: String[] == [\"little\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7b5n30_1.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7b5n30_1.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp7b5n30_1.jl:36\n  Expression: candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: String[] == [\"Mary\", \"\
    lamb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7b5n30_1.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7b5n30_1.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp7b5n30_1.jl:38\n  Expression: candidate(\"Hello world\", 4)\
    \ == [\"world\"]\n   Evaluated: String[] == [\"world\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7b5n30_1.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7b5n30_1.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp7b5n30_1.jl:39\n  Expression: candidate(\"Uncle sam\", 3)\
    \ == [\"Uncle\"]\n   Evaluated: String[] == [\"Uncle\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7b5n30_1.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7b5n30_1.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp7b5n30_1.jl:41\n  Expression: candidate(\"a b c d e f\", 1)\
    \ == [\"b\", \""
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7b5n30_1.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   const vowels = \"aeiouAEIOU\"\n    words = split(s)\n    count = 0\n    output\
    \ = []\n    for i in 1:length(words)\n        count = 0\n        for j in 1:length(words[i])\n\
    \            if !contains(vowels, words[i][j])\n                count += 1\n \
    \           end\n        end\n        if count == n\n            push!(output,\
    \ words[i])\n        end\n    end\n    return output\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\"\
    , 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"\
    Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unsupported `const` declaration on local variable\
    \ around /tmp/tmp34vw5371.jl:14\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp34vw5371.jl:1\n\
    in expression starting at /tmp/tmp34vw5371.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   words = split(s)\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    vowels =\
    \ \"aeiou\"\n    words_with_n_consonants = []\n    for word in words\n       \
    \ if length(word) > 1\n            if count(consonants, word) == n\n         \
    \       push!(words_with_n_consonants, word)\n            end\n        end\n \
    \   end\n    return words_with_n_consonants\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4)\
    \ == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\"\
    , \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpd3ghrnmg.jl:32\n  Expression: candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"]\n   Evaluated: String[] == [\"little\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd3ghrnmg.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd3ghrnmg.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpd3ghrnmg.jl:33\n  Expression: candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: String[] == [\"Mary\", \"\
    lamb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd3ghrnmg.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd3ghrnmg.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpd3ghrnmg.jl:35\n  Expression: candidate(\"Hello world\", 4)\
    \ == [\"world\"]\n   Evaluated: String[] == [\"world\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd3ghrnmg.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd3ghrnmg.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpd3ghrnmg.jl:36\n  Expression: candidate(\"Uncle sam\", 3)\
    \ == [\"Uncle\"]\n   Evaluated: String[] == [\"Uncle\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd3ghrnmg.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd3ghrnmg.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpd3ghrnmg.jl:38\n  Expression: candidate(\"a b c d e f\", 1)\
    \ == [\"b\", \""
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd3ghrnmg.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   #Your code here\nend\n \nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkx7q3k6_.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{String}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n     @ Main\
    \ /tmp/tmpkx7q3k6_.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkx7q3k6_.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkx7q3k6_.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpkx7q3k6_.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{String}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n     @ Main\
    \ /tmp/tmpkx7q3k6_.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/jul"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkx7q3k6_.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   words = split(s)\n    filtered_words = []\n    for word in words\n       \
    \ consonants = 0\n        for char in word\n            if !is_vowel(char)\n \
    \               consonants += 1\n            end\n        end\n        if consonants\
    \ == n\n            push!(filtered_words, word)\n        end\n    end\n    return\
    \ filtered_words\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5gy1jyt3.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ is_vowel not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp5gy1jyt3.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5gy1jyt3.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5gy1jyt3.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp5gy1jyt3.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ is_vowel not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp5gy1jyt3.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5gy1jyt3.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5gy1jyt3.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp5gy1jyt3.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ is_vowel not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp5gy1jyt3.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5gy1jyt3.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5gy1jyt3.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp5gy1jyt3.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: is_vowel not\
    \ defined\n  Stacktrace:\n   [1] se"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5gy1jyt3.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   \n    return filter(x -> length(regexp(\"[b-df-hj-np-tv-z]\", x, \"match\"\
    )) == n,\n                  split(s, r\"\\s+\"))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\"\
    , 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"\
    Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpos5cxs5a.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ regexp not defined\n  Stacktrace:\n   [1] (::var\"#1#2\"{Int64})(x::SubString{String})\n\
    \     @ Main /tmp/tmpos5cxs5a.jl:15\n   [2] filter(f::var\"#1#2\"{Int64}, a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] select_words(s::String, n::Int64)\n     @\
    \ Main /tmp/tmpos5cxs5a.jl:15\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpos5cxs5a.jl:23 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpos5cxs5a.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpos5cxs5a.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ regexp not defined\n  Stacktrace:\n   [1] (::var\"#1#2\"{Int64})(x::SubString{String})\n\
    \     @ Main /tmp/tmpos5cxs5a.jl:15\n   [2] filter(f::var\"#1#2\"{Int64}, a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] select_words(s::String, n::Int64)\n     @\
    \ Main /tmp/tmpos5cxs5a.jl:15\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpos5cxs5a.jl:24 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpos5cxs5a.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpos5cxs5a.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ regexp not defined\n  Stacktrace:\n   [1] (::var\"#1#2\"{Int64})(x::SubString{String})\n\
    \     @ Main /tmp/tmpos5cxs5a.jl:15\n   [2] filter(f::var\"#1#2\"{Int64}, a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] select_words(s::String, n::Int64)\n     @\
    \ Main /tmp/tmpos5cxs5a.jl:15\n   [4] m"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpos5cxs5a.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   \n    # TODO: Implement Me!\n    if isempty(s) return [] end\n    x=split(s)\n\
    \    output=[]\n    for i in x\n        if count_consonants(i)==n\n          \
    \  push!(output,i)\n        end\n    end\n    return output\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\"\
    , 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) ==\
    \ Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\
    \t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4)\
    \ == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"\
    c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2sesjih5.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp2sesjih5.jl:20\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp2sesjih5.jl:31 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2sesjih5.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp2sesjih5.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp2sesjih5.jl:20\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp2sesjih5.jl:32 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2sesjih5.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp2sesjih5.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp2sesjih5.jl:20\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp2sesjih5.jl:33 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2sesjih5.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp2sesjih5.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: count_consonants\
    \ not"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2sesjih5.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   v = split(s)\n    out = []\n    for elem in v\n        consonants = 0\n  \
    \      for letter in elem\n            if letter in \"bcdfghjklmnpqrstvwxyz\"\n\
    \                consonants += 1\n            end\n        end\n        if consonants\
    \ == n\n            push!(out, elem)\n        end\n    end\n    return out\nend\n\
    using Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj98teh3f.jl:35\n  Expression: candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: [\"lamb\"\
    ] == [\"Mary\", \"lamb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj98teh3f.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj98teh3f.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj98teh3f.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   vowel = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    res = String[]\n    for w\
    \ in split(s)\n        count = 0\n        for c in w\n            if !(c in vowel)\n\
    \                count += 1\n            end\n        end\n        if count ==\
    \ n\n            push!(res, w)\n        end\n    end\n    return res\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary\
    \ had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\"\
    , 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"\
    ])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\"\
    , 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\",\
    \ \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp_wltqp1.jl:34\n  Expression: candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"]\n   Evaluated: [\"Mary\", \"lamb\"\
    ] == [\"little\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp_wltqp1.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp_wltqp1.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpp_wltqp1.jl:35\n  Expression: candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: [\"had\"] == [\"Mary\", \"\
    lamb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp_wltqp1.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp_wltqp1.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpp_wltqp1.jl:37\n  Expression: candidate(\"Hello world\", 4)\
    \ == [\"world\"]\n   Evaluated: String[] == [\"world\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp_wltqp1.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp_wltqp1.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpp_wltqp1.jl:38\n  Expression: candidate(\"Uncle sam\", 3)\
    \ == [\"Uncle\"]\n   Evaluated: [\"sam\"] == [\"Uncle\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp_wltqp1.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp_wltqp1.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpp_wltqp1.jl:40\n  Expression: candidate(\"a b c d e f\", 1)\
    \ == ["
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp_wltqp1.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   vowels = \"aeiouAEIOU\"\n    words = split(s, \" \")\n    vcons = []\n   \
    \ for w in words\n        cons = 0\n        for c in w\n            if c in vowels\n\
    \                continue\n            else\n                cons += 1\n     \
    \       end\n        end\n        if cons == n\n            push!(vcons, w)\n\
    \        end\n    end\n    return vcons\nend\nusing Test\n\n@testset begin\n\n\
    candidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) ==\
    \ [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\"\
    , \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   vowels = \"aeiouAEIOU\"\n    consonants = setdiff(findall(r\"[a-zA-Z]\", s),\
    \ findall(r\"[\"*vowels*\"]\", s))\n    n_consonants = length(consonants)\n  \
    \  words = split(s)\n    ans = []\n    for i in 1:length(words)\n        v = setdiff(findall(r\"\
    [a-zA-Z]\", words[i]), findall(r\"[\"*vowels*\"]\", words[i]))\n        if length(v)\
    \ == n\n            push!(ans, words[i])\n        end\n    end\n    return ans\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: PCRE compilation error: missing terminating ] for character\
    \ class at offset 1\nStacktrace:\n  [1] error(s::String)\n    @ Base ./error.jl:33\n\
    \  [2] compile(pattern::String, options::UInt32)\n    @ Base.PCRE ./pcre.jl:155\n\
    \  [3] compile(regex::Regex)\n    @ Base ./regex.jl:82\n  [4] Regex(pattern::String,\
    \ compile_options::UInt32, match_options::UInt32)\n    @ Base ./regex.jl:47\n\
    \  [5] Regex(pattern::String)\n    @ Base ./regex.jl:70\n  [6] var\"@r_str\"(__source__::LineNumberNode,\
    \ __module__::Module, pattern::Any, flags::Vararg{Any})\n    @ Base ./regex.jl:119\n\
    \  [7] #macroexpand#51\n    @ ./expr.jl:115 [inlined]\n  [8] macroexpand\n   \
    \ @ ./expr.jl:114 [inlined]\n  [9] docm(source::LineNumberNode, mod::Module, meta::Any,\
    \ ex::Any, define::Bool) (repeats 2 times)\n    @ Base.Docs ./docs/Docs.jl:537\n\
    \ [10] var\"@doc\"(::LineNumberNode, ::Module, ::String, ::Vararg{Any})\n    @\
    \ Core ./boot.jl:517\nin expression starting at /tmp/tmp6h7x7e2_.jl:1\nin expression\
    \ starting at /tmp/tmp6h7x7e2_.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   words = split(s)\n    filter(w -> length(regexp(r\"[^aeiou\\s]\", w)) == n,\
    \ words)\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbevwpkul.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ regexp not defined\n  Stacktrace:\n   [1] (::var\"#1#2\"{Int64})(w::SubString{String})\n\
    \     @ Main /tmp/tmpbevwpkul.jl:15\n   [2] filter(f::var\"#1#2\"{Int64}, a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] select_words(s::String, n::Int64)\n     @\
    \ Main /tmp/tmpbevwpkul.jl:15\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpbevwpkul.jl:22 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpbevwpkul.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpbevwpkul.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ regexp not defined\n  Stacktrace:\n   [1] (::var\"#1#2\"{Int64})(w::SubString{String})\n\
    \     @ Main /tmp/tmpbevwpkul.jl:15\n   [2] filter(f::var\"#1#2\"{Int64}, a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] select_words(s::String, n::Int64)\n     @\
    \ Main /tmp/tmpbevwpkul.jl:15\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpbevwpkul.jl:23 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpbevwpkul.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpbevwpkul.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ regexp not defined\n  Stacktrace:\n   [1] (::var\"#1#2\"{Int64})(w::SubString{String})\n\
    \     @ Main /tmp/tmpbevwpkul.jl:15\n   [2] filter(f::var\"#1#2\"{Int64}, a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] select_words(s::String, n::Int64)\n     @\
    \ Main /tmp/tmpbevwpkul.jl:15\n   [4] m"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbevwpkul.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   x = s\n    x=split(x)\n    y=x\n    vowels=[\"a\",\"e\",\"i\",\"o\",\"u\"\
    ,\"A\",\"E\",\"I\",\"O\",\"U\"]\n    a=[]\n    b=[]\n    c=0\n    for i in x\n\
    \        if i in vowels\n            a=push!(a,i)\n        else\n            c=c+1\n\
    \        end\n    end\n    for j in 1:length(x)\n        if c[j]==n\n        \
    \    b=push!(b,x[j])\n        end\n    end\nend\n \n \nusing Test\n\n@testset\
    \ begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\"\
    , 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"\
    Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzcyiueyi.jl:41\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  BoundsError\n\
    \  Stacktrace:\n   [1] getindex\n     @ ./number.jl:98 [inlined]\n   [2] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpzcyiueyi.jl:29\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpzcyiueyi.jl:41 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpzcyiueyi.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpzcyiueyi.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  BoundsError\n\
    \  Stacktrace:\n   [1] getindex\n     @ ./number.jl:98 [inlined]\n   [2] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpzcyiueyi.jl:29\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpzcyiueyi.jl:42 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpzcyiueyi.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpzcyiueyi.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  BoundsError\n\
    \  Stacktrace:\n   [1] getindex\n     @ ./number.jl:98 [inlined]\n   [2] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpzcyiueyi.jl:29\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpzcyiueyi.jl:43 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpzcyiueyi.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpzcyiueyi.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) =="
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzcyiueyi.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   return split(lowercase(s))\n        |> filter(x -> count(n -> n in \"aeiou\"\
    , x) == n)\n    end\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"|>\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpet0jr3xw.jl:15\nin expression starting at\
    \ /tmp/tmpet0jr3xw.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   words = split(s)\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    filter(word\
    \ -> count(c -> c in consonants, word) == n, words)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\"\
    , 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"\
    Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpej1z8nci.jl:24\n  Expression: candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: [\"lamb\"\
    ] == [\"Mary\", \"lamb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpej1z8nci.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpej1z8nci.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpej1z8nci.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   words = split(s)\n    ncons = [(count_consonants(w), w) for w in words]\n\
    \    selected = [tpl[2] for tpl in ncons if tpl[1] == n]\n    return selected\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpluu9egwr.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] (::var\"#1#4\")(w::SubString{String})\n\
    \     @ Main ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n  \
    \ [3] collect(itr::Base.Generator{Vector{SubString{String}}, var\"#1#4\"})\n \
    \    @ Base ./array.jl:724\n   [4] select_words(s::String, n::Int64)\n     @ Main\
    \ /tmp/tmpluu9egwr.jl:15\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpluu9egwr.jl:24 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpluu9egwr.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpluu9egwr.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] (::var\"#1#4\")(w::SubString{String})\n\
    \     @ Main ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n  \
    \ [3] collect(itr::Base.Generator{Vector{SubString{String}}, var\"#1#4\"})\n \
    \    @ Base ./array.jl:724\n   [4] select_words(s::String, n::Int64)\n     @ Main\
    \ /tmp/tmpluu9egwr.jl:15\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpluu9egwr.jl:25 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpluu9egwr.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpluu9egwr.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] (::var\"#1#4\")(w::SubString{String})\n\
    \     @ Main ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n  \
    \ [3] collect(itr::Base.Generator{Vector{Su"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpluu9egwr.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   words = split(s)\n    filtered = filter(x -> count_consonants(x) == n, words)\n\
    \    return filtered\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp336ra8pw.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] (::var\"#1#2\"{Int64})(x::SubString{String})\n\
    \     @ Main /tmp/tmp336ra8pw.jl:15\n   [2] filter(f::var\"#1#2\"{Int64}, a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] select_words(s::String, n::Int64)\n     @\
    \ Main /tmp/tmp336ra8pw.jl:15\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp336ra8pw.jl:23 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp336ra8pw.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp336ra8pw.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] (::var\"#1#2\"{Int64})(x::SubString{String})\n\
    \     @ Main /tmp/tmp336ra8pw.jl:15\n   [2] filter(f::var\"#1#2\"{Int64}, a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] select_words(s::String, n::Int64)\n     @\
    \ Main /tmp/tmp336ra8pw.jl:15\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp336ra8pw.jl:24 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp336ra8pw.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp336ra8pw.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] (::var\"#1#2\"{Int64})(x::SubString{String})\n\
    \     @ Main /tmp/tmp336ra8pw.jl:15\n   [2] filter(f::var\"#1#2\"{Int64}, a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] select_words(s::String, n::Int64)\n     @\
    \ Main /"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp336ra8pw.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   answer = []\n    for word in split(s)\n        consonants = 0\n        for\
    \ c in word\n            if c \u2209 ['a', 'e', 'i', 'o', 'u']\n             \
    \   consonants += 1\n            end\n        end\n        if consonants == n\n\
    \            push!(answer, word)\n        end\n    end\n    return answer\nend\n\
    using Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprjuqd12a.jl:37\n  Expression: candidate(\"\
    Uncle sam\", 3) == [\"Uncle\"]\n   Evaluated: String[] == [\"Uncle\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprjuqd12a.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprjuqd12a.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprjuqd12a.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   res = split(s)\n    words = Vector{String}()\n    for i = 1:length(res)\n\
    \        if count_consonants(res[i]) == n\n            push!(words, res[i])\n\
    \        end\n    end\n    return words\nend\nusing Test\n\n@testset begin\n\n\
    candidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) ==\
    \ [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\"\
    , \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6_ufz9ks.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp6_ufz9ks.jl:17\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp6_ufz9ks.jl:28 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6_ufz9ks.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp6_ufz9ks.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp6_ufz9ks.jl:17\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp6_ufz9ks.jl:29 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6_ufz9ks.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp6_ufz9ks.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp6_ufz9ks.jl:17\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp6_ufz9ks.jl:30 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6_ufz9ks.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp6_ufz9ks.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: count_consonants\
    \ not"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6_ufz9ks.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   \n    words = split(s, r\"\\s+\")\n    new_words = []\n    for word in words\n\
    \        n_consonants = length(word) - length(replace(word, r\"[aeiou]\", \"\"\
    ))\n        if n_consonants == n\n            push!(new_words, word)\n       \
    \ end\n    end\n    return new_words\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"\
    ])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\
    \t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"\
    Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"\
    Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"\
    a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpe7msk7r8.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  MethodError:\
    \ no method matching replace(::SubString{String}, ::Regex, ::String)\n  Closest\
    \ candidates are:\n    replace(!Matched::Union{Function, Type}, ::Any; count)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n    replace(::AbstractString,\
    \ !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    replace(::Any, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:569\n\
    \  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n     @ Main /tmp/tmpe7msk7r8.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpe7msk7r8.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe7msk7r8.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpe7msk7r8.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  MethodError:\
    \ no method matching replace(::SubString{String}, ::Regex, ::String)\n  Closest\
    \ candidates are:\n    replace(!Matched::Union{Function, Type}, ::Any; count)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n    replace(::AbstractString,\
    \ !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    replace(::Any, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:569\n\
    \  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n     @ Main /tmp/tmpe7msk7r8.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpe7msk7r8.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tm"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe7msk7r8.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   #############\n    # your code #\n    #############\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\"\
    , 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"\
    Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpyvg9syjb.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{String}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n     @ Main\
    \ /tmp/tmpyvg9syjb.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyvg9syjb.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyvg9syjb.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpyvg9syjb.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{String}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n     @ Main\
    \ /tmp/tmpyvg9syjb.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/jul"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyvg9syjb.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   words = split(s, r\"\\s+\")\n    number_of_consonants(word) = length(filter(isconsonant,\
    \ word))\n    return filter(x -> number_of_consonants(x) == n, words)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary\
    \ had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\"\
    , 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"\
    ])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\"\
    , 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\",\
    \ \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpdnvdm03l.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ isconsonant not defined\n  Stacktrace:\n   [1] (::var\"#number_of_consonants#2\"\
    )(word::SubString{String})\n     @ Main /tmp/tmpdnvdm03l.jl:15\n   [2] #1\n  \
    \   @ /tmp/tmpdnvdm03l.jl:16 [inlined]\n   [3] filter(f::var\"#1#3\"{Int64, var\"\
    #number_of_consonants#2\"}, a::Vector{SubString{String}})\n     @ Base ./array.jl:2484\n\
    \   [4] select_words(s::String, n::Int64)\n     @ Main /tmp/tmpdnvdm03l.jl:16\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpdnvdm03l.jl:23 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpdnvdm03l.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpdnvdm03l.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ isconsonant not defined\n  Stacktrace:\n   [1] (::var\"#number_of_consonants#2\"\
    )(word::SubString{String})\n     @ Main /tmp/tmpdnvdm03l.jl:15\n   [2] #1\n  \
    \   @ /tmp/tmpdnvdm03l.jl:16 [inlined]\n   [3] filter(f::var\"#1#3\"{Int64, var\"\
    #number_of_consonants#2\"}, a::Vector{SubString{String}})\n     @ Base ./array.jl:2484\n\
    \   [4] select_words(s::String, n::Int64)\n     @ Main /tmp/tmpdnvdm03l.jl:16\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpdnvdm03l.jl:24 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpdnvdm03l.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpdnvdm03l.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ isconsonant not defined\n  Stacktrace:\n   [1] (::var\"#number_of_consonants#2\"\
    )(word::SubString{S"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdnvdm03l.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   s ==> split(s)\n    v = String[]\n    for i in 1:length(s)\n        if s[i]\
    \ != \" \"\n            gsub(s[i],\"[aeiou]\",\"\") ==> s[i]\n            if length(s[i])\
    \ == n\n                push!(v,s[i])\n            end\n        end\n    end\n\
    \    return v\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \">\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplbs8k0pw.jl:14\nin expression starting at\
    \ /tmp/tmplbs8k0pw.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   p = eachmatch(r\"[A-Za-z]+\", s)\n    v = []\n    for m in p\n        if sum(ismatch.(r\"\
    [^aeiou]\", m.match)) == n\n            push!(v, m.match)\n        end\n    end\n\
    \    return v\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzda79zej.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ ismatch not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpzda79zej.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzda79zej.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzda79zej.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpzda79zej.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ ismatch not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpzda79zej.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzda79zej.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzda79zej.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpzda79zej.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ ismatch not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpzda79zej.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzda79zej.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzda79zej.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpzda79zej.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: ismatch not defined\n\
    \  Stacktrace:\n   [1] select"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzda79zej.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   return split(s) .|> collect .|> filter(a -> length(a) .== n) .|> collect\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpe_xgy61c.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  MethodError:\
    \ no method matching filter(::var\"#1#2\"{Int64})\n  Closest candidates are:\n\
    \    filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n     @ Main\
    \ /tmp/tmpe_xgy61c.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpe_xgy61c.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe_xgy61c.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpe_xgy61c.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  MethodError:\
    \ no method matching filter(::var\"#1#2\"{Int64})\n  Closest candidates are:\n\
    \    filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n     @ Main\
    \ /tmp/tmpe_xgy61c.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpe_xgy61c.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe_xgy61c.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpe_xgy61c.jl:23\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe_xgy61c.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   words = split(s)\n    selected_words = []\n    for word in words\n       \
    \ if count_consonants(word) == n\n            push!(selected_words, word)\n  \
    \      end\n    end\n    return selected_words\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4)\
    \ == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\"\
    , \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqzuraii1.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpqzuraii1.jl:17\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpqzuraii1.jl:28 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqzuraii1.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpqzuraii1.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpqzuraii1.jl:17\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpqzuraii1.jl:29 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqzuraii1.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpqzuraii1.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpqzuraii1.jl:17\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpqzuraii1.jl:30 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqzuraii1.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpqzuraii1.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: count_consonants\
    \ not"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqzuraii1.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \ n_con = collect(Dict(i => count_consonants(i), split(s)))\n  word_list = collect(keys(n_con))\n\
    \  selected_words = []\n  for i in 1:length(word_list)\n    if n_con[word_list[i]]\
    \ == n\n      push!(selected_words, word_list[i])\n    end\n  end\n  return selected_words\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpaazylr7z.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpaazylr7z.jl:14\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpaazylr7z.jl:29 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaazylr7z.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpaazylr7z.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpaazylr7z.jl:14\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpaazylr7z.jl:30 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaazylr7z.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpaazylr7z.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpaazylr7z.jl:14\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpaazylr7z.jl:31 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaazylr7z.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpaazylr7z.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: count_consonants\
    \ not"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaazylr7z.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    words = split(s, \" \")\n\
    \    num_consonants(word) = length(word) - sum(word .== vowels)\n    return [word\
    \ for word in words if num_consonants(word) == n]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\"\
    , 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"\
    Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1aveyx47.jl:24\n  Expression: candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"]\n   Evaluated: [\"Mary\", \"lamb\"\
    ] == [\"little\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1aveyx47.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1aveyx47.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1aveyx47.jl:25\n  Expression: candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: [\"had\"] == [\"Mary\", \"\
    lamb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1aveyx47.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1aveyx47.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1aveyx47.jl:27\n  Expression: candidate(\"Hello world\", 4)\
    \ == [\"world\"]\n   Evaluated: String[] == [\"world\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1aveyx47.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1aveyx47.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1aveyx47.jl:28\n  Expression: candidate(\"Uncle sam\", 3)\
    \ == [\"Uncle\"]\n   Evaluated: [\"sam\"] == [\"Uncle\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1aveyx47.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1aveyx47.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1aveyx47.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   s = split(s)\n    res = []\n    for elem in s\n        count = 0\n       \
    \ for i in elem\n            if (i in \"bcdfghjklmnpqrstvwxyz\") count += 1 end\n\
    \        end\n        if (count == n) push!(res, elem) end\n    end\n    return\
    \ res\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppu6leqm8.jl:31\n  Expression: candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: [\"lamb\"\
    ] == [\"Mary\", \"lamb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppu6leqm8.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppu6leqm8.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppu6leqm8.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   constant cons = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"\
    z\"]\n    words = split(s)\n    results = []\n    for i in words\n        count\
    \ = 0\n        for j in letters(i)\n            if j in cons\n               \
    \ count += 1\n            end\n        end\n        if count == n\n          \
    \  push!(results, i)\n        end\n    end\n    return results\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\"\
    , 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) ==\
    \ Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\
    \t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4)\
    \ == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"\
    c\", \"d\", \"f\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpl5pbd_w1.jl:13 expected\
    \ \"end\", got \"cons\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpl5pbd_w1.jl:14\n\
    in expression starting at /tmp/tmpl5pbd_w1.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   m = matchall(r\"[A-Za-z]+\", s)\n    cnt = [length(matchall(r\"[b-df-hj-np-tv-z]+\"\
    , x)) for x in m]\n    return m[findall(x -> x == n, cnt)]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little\
    \ lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3)\
    \ == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpamzvd93a.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ matchall not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpamzvd93a.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpamzvd93a.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpamzvd93a.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpamzvd93a.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ matchall not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpamzvd93a.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpamzvd93a.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpamzvd93a.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpamzvd93a.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ matchall not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpamzvd93a.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpamzvd93a.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpamzvd93a.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpamzvd93a.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: matchall not\
    \ defined\n  Stacktrace:\n   [1] se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpamzvd93a.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   cons = \"bcdfghjklmnpqrstvwxyz\"\n    ys = s |> split\n    return [x for x\
    \ in ys if count(cons, x) == n]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"\
    ])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\
    \t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"\
    Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"\
    Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"\
    a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptkmyyrby.jl:23\n  Expression: candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"]\n   Evaluated: String[] == [\"little\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptkmyyrby.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptkmyyrby.jl:22\ntest set: Test\
    \ Failed at /tmp/tmptkmyyrby.jl:24\n  Expression: candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: String[] == [\"Mary\", \"\
    lamb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptkmyyrby.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptkmyyrby.jl:22\ntest set: Test\
    \ Failed at /tmp/tmptkmyyrby.jl:26\n  Expression: candidate(\"Hello world\", 4)\
    \ == [\"world\"]\n   Evaluated: String[] == [\"world\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptkmyyrby.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptkmyyrby.jl:22\ntest set: Test\
    \ Failed at /tmp/tmptkmyyrby.jl:27\n  Expression: candidate(\"Uncle sam\", 3)\
    \ == [\"Uncle\"]\n   Evaluated: String[] == [\"Uncle\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptkmyyrby.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptkmyyrby.jl:22\ntest set: Test\
    \ Failed at /tmp/tmptkmyyrby.jl:29\n  Expression: candidate(\"a b c d e f\", 1)\
    \ == [\"b\", \""
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptkmyyrby.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   strs = split(s, \" \")\n    result = []\n    for string in strs\n        if\
    \ length(count_consonants(string)) == n\n            push!(result, string)\n \
    \       end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) ==\
    \ [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\"\
    , \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkuliw748.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpkuliw748.jl:17\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpkuliw748.jl:28 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkuliw748.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpkuliw748.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpkuliw748.jl:17\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpkuliw748.jl:29 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkuliw748.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpkuliw748.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpkuliw748.jl:17\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpkuliw748.jl:30 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkuliw748.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpkuliw748.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: count_consonants\
    \ not"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkuliw748.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   words = split(s)\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    result =\
    \ []\n    for word in words\n        num_consonants = 0\n        for letter in\
    \ word\n            if letter in consonants\n                num_consonants +=\
    \ 1\n            end\n        end\n        if num_consonants == n\n          \
    \  push!(result, word)\n        end\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\"\
    , 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) ==\
    \ Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\
    \t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4)\
    \ == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"\
    c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj7x2v_at.jl:36\n  Expression: candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: [\"lamb\"\
    ] == [\"Mary\", \"lamb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj7x2v_at.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj7x2v_at.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj7x2v_at.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   s=split(s)\n    isa(s[1],String)\n    return [x for x in s if consonants(x)==n]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1qp2rj9g.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ consonants not defined\n  Stacktrace:\n    [1] (::var\"#1#2\"{Int64})(x::SubString{String})\n\
    \      @ Main ./none:0\n    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [3] iterate\n      @ ./generator.jl:44 [inlined]\n    [4] grow_to!(dest::Vector{SubString{String}},\
    \ itr::Base.Generator{Base.Iterators.Filter{var\"#1#2\"{Int64}, Vector{SubString{String}}},\
    \ typeof(identity)})\n      @ Base ./array.jl:797\n    [5] collect\n      @ ./array.jl:721\
    \ [inlined]\n    [6] select_words(s::String, n::Int64)\n      @ Main /tmp/tmp1qp2rj9g.jl:16\n\
    \    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp1qp2rj9g.jl:23 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp1qp2rj9g.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp1qp2rj9g.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ consonants not defined\n  Stacktrace:\n    [1] (::var\"#1#2\"{Int64})(x::SubString{String})\n\
    \      @ Main ./none:0\n    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [3] iterate\n      @ ./generator.jl:44 [inlined]\n    [4] grow_to!(dest::Vector{SubString{String}},\
    \ itr::Base.Generator{Base.Iterators.Filter{var\"#1#2\"{Int64}, Vector{SubString{String}}},\
    \ typeof(identity)})\n      @ Base ./array.jl:797\n    [5] collect\n      @ ./array.jl:721\
    \ [inlined]\n    [6] select_words(s::String, n::Int64)\n      @ Main /tmp/tmp1qp2rj9g.jl:16\n\
    \    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp1qp2rj9g.jl:24 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level s"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1qp2rj9g.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   v = []\n    if length(s) == 0 return v end\n    words = split(s, \" \")\n\
    \    for w in words\n        c = 0\n        for c in w\n            if c in ['a',\
    \ 'e', 'i', 'o', 'u'] continue end\n            c += 1\n        end\n        if\
    \ c == n push!(v, w) end\n    end\n    return v\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4)\
    \ == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\"\
    , \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdnyleq2p.jl:32\n  Expression: candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"]\n   Evaluated: String[] == [\"little\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdnyleq2p.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdnyleq2p.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpdnyleq2p.jl:33\n  Expression: candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: String[] == [\"Mary\", \"\
    lamb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdnyleq2p.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdnyleq2p.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpdnyleq2p.jl:35\n  Expression: candidate(\"Hello world\", 4)\
    \ == [\"world\"]\n   Evaluated: String[] == [\"world\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdnyleq2p.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdnyleq2p.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpdnyleq2p.jl:36\n  Expression: candidate(\"Uncle sam\", 3)\
    \ == [\"Uncle\"]\n   Evaluated: String[] == [\"Uncle\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdnyleq2p.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdnyleq2p.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpdnyleq2p.jl:38\n  Expression: candidate(\"a b c d e f\", 1)\
    \ == [\"b\", \""
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdnyleq2p.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   words = split(s)\n    result = String[]\n    for w in words\n        w = replace(w,\
    \ r\"[aeiouAEIOU]\", \"\")\n        if length(w) == n\n            push!(result,\
    \ w)\n        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4)\
    \ == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\"\
    , \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpdvwuwwbq.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  MethodError:\
    \ no method matching replace(::SubString{String}, ::Regex, ::String)\n  Closest\
    \ candidates are:\n    replace(!Matched::Union{Function, Type}, ::Any; count)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n    replace(::AbstractString,\
    \ !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    replace(::Any, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:569\n\
    \  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n     @ Main /tmp/tmpdvwuwwbq.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdvwuwwbq.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdvwuwwbq.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpdvwuwwbq.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  MethodError:\
    \ no method matching replace(::SubString{String}, ::Regex, ::String)\n  Closest\
    \ candidates are:\n    replace(!Matched::Union{Function, Type}, ::Any; count)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n    replace(::AbstractString,\
    \ !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    replace(::Any, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:569\n\
    \  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n     @ Main /tmp/tmpdvwuwwbq.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdvwuwwbq.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tm"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdvwuwwbq.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   words = split(s)\n    result = []\n    for word in words\n        n_vowels\
    \ = n_consonants = 0\n        for c in word\n            if is_vowel(c)\n    \
    \            n_vowels += 1\n            else\n                n_consonants +=\
    \ 1\n            end\n        end\n        if n_consonants == n\n            push!(result,\
    \ word)\n        end\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\"\
    , 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"\
    Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmppq6c0g2l.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ is_vowel not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmppq6c0g2l.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppq6c0g2l.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppq6c0g2l.jl:35\ntest set:\
    \ Error During Test at /tmp/tmppq6c0g2l.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ is_vowel not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmppq6c0g2l.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppq6c0g2l.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppq6c0g2l.jl:35\ntest set:\
    \ Error During Test at /tmp/tmppq6c0g2l.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ is_vowel not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmppq6c0g2l.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppq6c0g2l.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppq6c0g2l.jl:35\ntest set:\
    \ Error During Test at /tmp/tmppq6c0g2l.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: is_vowel not\
    \ defined\n  Stacktrace:\n   [1] se"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppq6c0g2l.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   for i in n:length(s)\n        if length(regexp(r\"\\b[a-zA-Z]+\",s[i])) ==\
    \ n\n            push!(s,s[i])\n        end\n    end\n    return s\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary\
    \ had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\"\
    , 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"\
    ])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\"\
    , 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\",\
    \ \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqs2ymkkf.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ regexp not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpqs2ymkkf.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqs2ymkkf.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqs2ymkkf.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpqs2ymkkf.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ regexp not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpqs2ymkkf.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqs2ymkkf.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqs2ymkkf.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpqs2ymkkf.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ regexp not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpqs2ymkkf.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqs2ymkkf.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqs2ymkkf.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpqs2ymkkf.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: regexp not defined\n\
    \  Stacktrace:\n   [1] select_wor"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqs2ymkkf.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   lst_words = split(s)\n    res = []\n    for word in lst_words\n        lst_char\
    \ = collect(word)\n        n_consonants = 0\n        for char in lst_char\n  \
    \          if char == 'a' || char == 'e' || char == 'i' || char == 'o' || char\
    \ == 'u' || char == 'y'\n                continue\n            else\n        \
    \        n_consonants += 1\n            end\n        end\n        if n_consonants\
    \ == n\n            push!(res, word)\n        end\n    end\n    return res\nend\n\
    using Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp90__zvqk.jl:38\n  Expression: candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: [\"lamb\"\
    ] == [\"Mary\", \"lamb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp90__zvqk.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp90__zvqk.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp90__zvqk.jl:41\n  Expression: candidate(\"Uncle sam\", 3)\
    \ == [\"Uncle\"]\n   Evaluated: String[] == [\"Uncle\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp90__zvqk.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp90__zvqk.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp90__zvqk.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   words = split(s, \" \")\n    consonants = [\"b\", \"c\", \"d\", \"f\", \"\
    g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"v\", \"w\", \"x\", \"z\"]\n    consonants_counts = zeros(length(words))\n\
    \    for (index, word) in enumerate(words)\n        for letter in word\n     \
    \       if letter in consonants\n                consonants_counts[index] += 1\n\
    \            end\n        end\n    end\n    return filter(x -> x == n, consonants_counts)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_46xk7ug.jl:31\n  Expression: candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"]\n   Evaluated: String[] == [\"little\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_46xk7ug.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_46xk7ug.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp_46xk7ug.jl:32\n  Expression: candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: String[] == [\"Mary\", \"\
    lamb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_46xk7ug.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_46xk7ug.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp_46xk7ug.jl:34\n  Expression: candidate(\"Hello world\", 4)\
    \ == [\"world\"]\n   Evaluated: String[] == [\"world\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_46xk7ug.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_46xk7ug.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp_46xk7ug.jl:35\n  Expression: candidate(\"Uncle sam\", 3)\
    \ == [\"Uncle\"]\n   Evaluated: String[] == [\"Uncle\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_46xk7ug.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_46xk7ug.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp_46xk7ug.jl:37\n  Expression: candidate(\"a b c d e f\", 1)\
    \ == [\"b\", \""
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_46xk7ug.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   s = split(lowercase(s))\n    consonants = [\"b\", \"c\", \"d\", \"f\", \"\
    g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"v\", \"w\", \"x\", \"z\"]\n    vector = String[]\n    for i in s\n    \
    \    cons = 0\n        for j in i\n            if j in consonants\n          \
    \      cons += 1\n            end\n        end\n        if cons == n\n       \
    \     append!(vector, i)\n        end\n    end\n    return vector\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary\
    \ had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\"\
    , 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"\
    ])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\"\
    , 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\",\
    \ \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpd982epvv.jl:35\n  Expression: candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"]\n   Evaluated: String[] == [\"little\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd982epvv.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd982epvv.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpd982epvv.jl:36\n  Expression: candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: String[] == [\"Mary\", \"\
    lamb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd982epvv.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd982epvv.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpd982epvv.jl:38\n  Expression: candidate(\"Hello world\", 4)\
    \ == [\"world\"]\n   Evaluated: String[] == [\"world\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd982epvv.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd982epvv.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpd982epvv.jl:39\n  Expression: candidate(\"Uncle sam\", 3)\
    \ == [\"Uncle\"]\n   Evaluated: String[] == [\"Uncle\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd982epvv.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd982epvv.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpd982epvv.jl:41\n  Expression: candidate(\"a b c d e f\", 1)\
    \ == [\"b\", \""
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd982epvv.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   words = split(s, r\"\\s+\")\n    words = [w for w in words if length(w) ==\
    \ n && has_n_con(w, n)]\n    return words\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4)\
    \ == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\"\
    , \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpg59f0y5s.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ has_n_con not defined\n  Stacktrace:\n    [1] (::var\"#1#2\"{Int64})(w::SubString{String})\n\
    \      @ Main ./none:0\n    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [3] iterate\n      @ ./generator.jl:44 [inlined]\n    [4] grow_to!(dest::Vector{SubString{String}},\
    \ itr::Base.Generator{Base.Iterators.Filter{var\"#1#2\"{Int64}, Vector{SubString{String}}},\
    \ typeof(identity)})\n      @ Base ./array.jl:797\n    [5] collect\n      @ ./array.jl:721\
    \ [inlined]\n    [6] select_words(s::String, n::Int64)\n      @ Main /tmp/tmpg59f0y5s.jl:15\n\
    \    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpg59f0y5s.jl:23 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpg59f0y5s.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpg59f0y5s.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ has_n_con not defined\n  Stacktrace:\n    [1] (::var\"#1#2\"{Int64})(w::SubString{String})\n\
    \      @ Main ./none:0\n    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [3] iterate\n      @ ./generator.jl:44 [inlined]\n    [4] grow_to!(dest::Vector{SubString{String}},\
    \ itr::Base.Generator{Base.Iterators.Filter{var\"#1#2\"{Int64}, Vector{SubString{String}}},\
    \ typeof(identity)})\n      @ Base ./array.jl:797\n    [5] collect\n      @ ./array.jl:721\
    \ [inlined]\n    [6] select_words(s::String, n::Int64)\n      @ Main /tmp/tmpg59f0y5s.jl:15\n\
    \    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpg59f0y5s.jl:24 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level sco"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg59f0y5s.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   words = split(s)\n    n_consonants = []\n    for word in words\n        counter\
    \ = 0\n        for c in word\n            if !(c in \"aeiouyAEIOUY\")\n      \
    \          counter += 1\n            end\n        end\n        push!(n_consonants,\
    \ counter)\n    end\n    return [words[i] for (i, n) in enumerate(n_consonants)\
    \ if n == n]\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj78lqbgg.jl:32\n  Expression: candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"]\n   Evaluated: [\"Mary\", \"had\"\
    , \"a\", \"little\", \"lamb\"] == [\"little\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj78lqbgg.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj78lqbgg.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpj78lqbgg.jl:33\n  Expression: candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: [\"Mary\", \"had\", \"a\"\
    , \"little\", \"lamb\"] == [\"Mary\", \"lamb\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj78lqbgg.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj78lqbgg.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpj78lqbgg.jl:34\n  Expression: candidate(\"simple white space\"\
    , 2) == Vector{String}([])\n   Evaluated: [\"simple\", \"white\", \"space\"] ==\
    \ String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj78lqbgg.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj78lqbgg.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpj78lqbgg.jl:35\n  Expression: candidate(\"Hello world\", 4)\
    \ == [\"world\"]\n   Evaluated: [\"Hello\", \"world\"] == [\"world\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj78lqbgg.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj78lqbgg"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj78lqbgg.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   return map(x -> x[1], filter(x -> length(x[2]) == n, \n        map(x -> [x,\
    \ x[1] for x in x if !x in \"aeiouAEIOU\"], split(s, \" \"))))\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\"\
    , 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) ==\
    \ Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\
    \t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4)\
    \ == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"\
    c\", \"d\", \"f\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfj94jzr9.jl:15\nin expression starting at\
    \ /tmp/tmpfj94jzr9.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   words = []\n    for word in split(s)\n        v = count_consonants(word)\n\
    \        if v == n\n            push!(words, word)\n        end\n    end\n   \
    \ return words\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpsj9cpk55.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpsj9cpk55.jl:16\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpsj9cpk55.jl:28 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsj9cpk55.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpsj9cpk55.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpsj9cpk55.jl:16\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpsj9cpk55.jl:29 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsj9cpk55.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpsj9cpk55.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpsj9cpk55.jl:16\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpsj9cpk55.jl:30 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsj9cpk55.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpsj9cpk55.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: count_consonants\
    \ not"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsj9cpk55.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   words = split(s)\n    consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"\
    h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"\
    v\", \"w\", \"x\", \"z\"]\n    consonants_count = [sum(word .== i for i in consonants)\
    \ for word in words]\n    [words[i] for i in 1:length(words) if consonants_count[i]\
    \ == n]\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9gn64pqr.jl:24\n  Expression: candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"]\n   Evaluated: String[] == [\"little\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9gn64pqr.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9gn64pqr.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp9gn64pqr.jl:25\n  Expression: candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: String[] == [\"Mary\", \"\
    lamb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9gn64pqr.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9gn64pqr.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp9gn64pqr.jl:27\n  Expression: candidate(\"Hello world\", 4)\
    \ == [\"world\"]\n   Evaluated: String[] == [\"world\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9gn64pqr.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9gn64pqr.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp9gn64pqr.jl:28\n  Expression: candidate(\"Uncle sam\", 3)\
    \ == [\"Uncle\"]\n   Evaluated: String[] == [\"Uncle\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9gn64pqr.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9gn64pqr.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9gn64pqr.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   # type-assert \"s\" as String, n as Int\n    return [word for word in split(s)\
    \ if count_consonants(word) == n]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"\
    ])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\
    \t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"\
    Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"\
    Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"\
    a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphwbd3q9b.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n    [1] (::var\"#1#2\"{Int64})(word::SubString{String})\n\
    \      @ Main ./none:0\n    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [3] iterate\n      @ ./generator.jl:44 [inlined]\n    [4] grow_to!(dest::Vector{SubString{String}},\
    \ itr::Base.Generator{Base.Iterators.Filter{var\"#1#2\"{Int64}, Vector{SubString{String}}},\
    \ typeof(identity)})\n      @ Base ./array.jl:797\n    [5] collect\n      @ ./array.jl:721\
    \ [inlined]\n    [6] select_words(s::String, n::Int64)\n      @ Main /tmp/tmphwbd3q9b.jl:15\n\
    \    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmphwbd3q9b.jl:22 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmphwbd3q9b.jl:21\ntest set:\
    \ Error During Test at /tmp/tmphwbd3q9b.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n    [1] (::var\"#1#2\"{Int64})(word::SubString{String})\n\
    \      @ Main ./none:0\n    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [3] iterate\n      @ ./generator.jl:44 [inlined]\n    [4] grow_to!(dest::Vector{SubString{String}},\
    \ itr::Base.Generator{Base.Iterators.Filter{var\"#1#2\"{Int64}, Vector{SubString{String}}},\
    \ typeof(identity)})\n      @ Base ./array.jl:797\n    [5] collect\n      @ ./array.jl:721\
    \ [inlined]\n    [6] select_words(s::String, n::Int64)\n      @ Main /tmp/tmphwbd3q9b.jl:15\n\
    \    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmphwbd3q9b.jl:23 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphwbd3q9b.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   words = split(s)\n    ans = Vector{String}()\n    for i in words\n       \
    \ if nconsts(i) == n\n            push!(ans, i)\n        end\n    end\n    return\
    \ ans\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpimgbdd5d.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ nconsts not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpimgbdd5d.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpimgbdd5d.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpimgbdd5d.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpimgbdd5d.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ nconsts not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpimgbdd5d.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpimgbdd5d.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpimgbdd5d.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpimgbdd5d.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ nconsts not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpimgbdd5d.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpimgbdd5d.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpimgbdd5d.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpimgbdd5d.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: nconsts not defined\n\
    \  Stacktrace:\n   [1] select"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpimgbdd5d.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   v::Vector{String} = split(s)\n    x::Vector{String} = []\n    for i in v\n\
    \        y::Int64 = 0\n        for j in i\n            if j \u2209 ['a', 'e',\
    \ 'i', 'o', 'u']\n                y += 1\n            end\n        end\n     \
    \   if y == n\n            push!(x, i)\n        end\n    end\n    return x\nend\n\
    using Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_clwcg5j.jl:38\n  Expression: candidate(\"\
    Uncle sam\", 3) == [\"Uncle\"]\n   Evaluated: String[] == [\"Uncle\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_clwcg5j.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_clwcg5j.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_clwcg5j.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   # Your code here\n    words = split(s, \" \")\n    result = []\n    for w\
    \ in words\n        if count_consonants(w) == n\n            append!(result, w)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) ==\
    \ [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\"\
    , \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp50vufbpd.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp50vufbpd.jl:18\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp50vufbpd.jl:29 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp50vufbpd.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp50vufbpd.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp50vufbpd.jl:18\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp50vufbpd.jl:30 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp50vufbpd.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp50vufbpd.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp50vufbpd.jl:18\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp50vufbpd.jl:31 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp50vufbpd.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp50vufbpd.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: count_consonants\
    \ not"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp50vufbpd.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   s = replace(s, \" \" => \"\")\n    return split(s, \"\")\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\"\
    , 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) ==\
    \ Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\
    \t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4)\
    \ == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"\
    c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_tgvsq3b.jl:22\n  Expression: candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"]\n   Evaluated: [\"M\", \"a\", \"\
    r\", \"y\", \"h\", \"a\", \"d\", \"a\", \"l\", \"i\", \"t\", \"t\", \"l\", \"\
    e\", \"l\", \"a\", \"m\", \"b\"] == [\"little\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_tgvsq3b.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_tgvsq3b.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_tgvsq3b.jl:23\n  Expression: candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: [\"M\", \"a\", \"r\", \"y\"\
    , \"h\", \"a\", \"d\", \"a\", \"l\", \"i\", \"t\", \"t\", \"l\", \"e\", \"l\"\
    , \"a\", \"m\", \"b\"] == [\"Mary\", \"lamb\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_tgvsq3b.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_tgvsq3b.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_tgvsq3b.jl:24\n  Expression: candidate(\"simple white space\"\
    , 2) == Vector{String}([])\n   Evaluated: [\"s\", \"i\", \"m\", \"p\", \"l\",\
    \ \"e\", \"w\", \"h\", \"i\", \"t\", \"e\", \"s\", \"p\", \"a\", \"c\", \"e\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_tgvsq3b.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_tgvsq3b.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_tgvsq3b.jl:25\n  Expression: candidate(\"Hello world\", 4)\
    \ == [\"world\"]\n   Evaluated: [\"H\", \"e\", \"l\", \"l\", \"o\", \"w\", \"\
    o\", \"r\", \"l\", \"d\"] == [\"world\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_tgvsq3b.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = split(s)\n    findall(x\
    \ -> count_consonants(x) == n, words)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"\
    ])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\
    \t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"\
    Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"\
    Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"\
    a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbidcsrwe.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n    [1] (::var\"#1#2\"{Int64})(x::SubString{String})\n\
    \      @ Main /tmp/tmpbidcsrwe.jl:16\n    [2] _broadcast_getindex_evalf\n    \
    \  @ ./broadcast.jl:670 [inlined]\n    [3] _broadcast_getindex\n      @ ./broadcast.jl:643\
    \ [inlined]\n    [4] getindex\n      @ ./broadcast.jl:597 [inlined]\n    [5] copy\n\
    \      @ ./broadcast.jl:899 [inlined]\n    [6] materialize(bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},\
    \ Nothing, var\"#1#2\"{Int64}, Tuple{Vector{SubString{String}}}})\n      @ Base.Broadcast\
    \ ./broadcast.jl:860\n    [7] findall(testf::Function, A::Vector{SubString{String}})\n\
    \      @ Base ./array.jl:2257\n    [8] select_words(s::String, n::Int64)\n   \
    \   @ Main /tmp/tmpbidcsrwe.jl:16\n    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpbidcsrwe.jl:23 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpbidcsrwe.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpbidcsrwe.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n    [1] (::var\"#1#2\"{Int64})(x::SubString{String})\n\
    \      @ Main /tmp/tmpbidcsrwe.jl:16\n    [2] _broadcast_getindex_evalf\n    \
    \  @ ./broadcast.jl:670 [inlined]\n    [3] _broadcast_getindex\n      @ ./broadcast.jl:643\
    \ [inlined]\n    [4] getindex\n      @ ./broadcast.jl:597 [inlined]\n    [5] copy\n\
    \      @ ./broadcast.jl:899 [inlined]\n    [6] materialize(bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},\
    \ Nothing, var\"#1#2\"{Int64}, Tuple{Vector{SubString{String}}}})\n      @ Base.Broadcast\
    \ ./broadcast.jl:860\n    [7] findall(testf::Function, A::Vector{SubString{String}})\n\
    \      @ Base"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbidcsrwe.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   \n    if isempty(s)\n        return []\n    end\n    \n    vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n    words = split(s)\n    result = []\n    \n \
    \   for i = 1:length(words)\n        num_consonants = 0\n        word = words[i]\n\
    \        for j = 1:length(word)\n            if !in(lowercase(word[j]), vowels)\n\
    \                num_consonants += 1\n            end\n        end\n        if\
    \ num_consonants == n\n            push!(result, word)\n        end\n    end\n\
    \    \n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpt733933r.jl:43\n  Expression: candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"]\n   Evaluated: [\"Mary\", \"lamb\"\
    ] == [\"little\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt733933r.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt733933r.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpt733933r.jl:44\n  Expression: candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: [\"had\"] == [\"Mary\", \"\
    lamb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt733933r.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt733933r.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpt733933r.jl:46\n  Expression: candidate(\"Hello world\", 4)\
    \ == [\"world\"]\n   Evaluated: String[] == [\"world\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt733933r.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt733933r.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpt733933r.jl:47\n  Expression: candidate(\"Uncle sam\", 3)\
    \ == [\"Uncle\"]\n   Evaluated: [\"sam\"] == [\"Uncle\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt733933r.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt733933r.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpt733933r.jl:49\n  Expression: candidate(\"a b c d e f\", 1)\
    \ == ["
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt733933r.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   s=split(s)\n    #Array(String,0)\n    nconsonant(x::String)=length(eachmatch(r\"\
    [^aeiouAEIOU ]\",x))==n\n    k=filter(nconsonant,s)\n    return k\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary\
    \ had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\"\
    , 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"\
    ])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\"\
    , 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\",\
    \ \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpfxwdr6yv.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  MethodError:\
    \ no method matching (::var\"#nconsonant#1\"{Int64})(::SubString{String})\n  Closest\
    \ candidates are:\n    (::var\"#nconsonant#1\")(!Matched::String) at /tmp/tmpfxwdr6yv.jl:16\n\
    \  Stacktrace:\n   [1] filter(f::var\"#nconsonant#1\"{Int64}, a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [2] select_words(s::String, n::Int64)\n     @\
    \ Main /tmp/tmpfxwdr6yv.jl:17\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfxwdr6yv.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfxwdr6yv.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpfxwdr6yv.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  MethodError:\
    \ no method matching (::var\"#nconsonant#1\"{Int64})(::SubString{String})\n  Closest\
    \ candidates are:\n    (::var\"#nconsonant#1\")(!Matched::String) at /tmp/tmpfxwdr6yv.jl:16\n\
    \  Stacktrace:\n   [1] filter(f::var\"#nconsonant#1\"{Int64}, a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [2] select_words(s::String, n::Int64)\n     @\
    \ Main /tmp/tmpfxwdr6yv.jl:17\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfxwdr6yv.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfxwdr6yv.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpfxwdr6yv.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  MethodError: no\
    \ method matching (::var\"#nconsonant#1\"{Int64})(::SubString{String})\n  Closest\
    \ candidates are:\n    (::var\"#nconsonant#1\")(!Matched::String) at /tmp/tmpfxwdr"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfxwdr6yv.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   words = split(s, r\"\\s+\")\n    selected = []\n    for word in words\n  \
    \      if length(filter(is_consonant, word)) == n\n            push!(selected,\
    \ word)\n        end\n    end\n    return selected\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\"\
    , 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"\
    Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpfxyvijyt.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ is_consonant not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpfxyvijyt.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfxyvijyt.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfxyvijyt.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpfxyvijyt.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ is_consonant not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpfxyvijyt.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfxyvijyt.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfxyvijyt.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpfxyvijyt.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ is_consonant not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpfxyvijyt.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfxyvijyt.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfxyvijyt.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpfxyvijyt.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: is_consonant\
    \ not defined\n  Stack"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfxyvijyt.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   ...\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid identifier name \"...\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb7gvjjs5.jl:14\nin expression starting at\
    \ /tmp/tmpb7gvjjs5.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   v = split(s)\n    empty!(v)\n    for w in split(s)\n        if ncons(w) ==\
    \ n\n            push!(v, w)\n        end\n    end\n    return v\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\"\
    , 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) ==\
    \ Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\
    \t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4)\
    \ == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"\
    c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqa7zegd0.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ ncons not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpqa7zegd0.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqa7zegd0.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqa7zegd0.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpqa7zegd0.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ ncons not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpqa7zegd0.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqa7zegd0.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqa7zegd0.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpqa7zegd0.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ ncons not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpqa7zegd0.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqa7zegd0.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqa7zegd0.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpqa7zegd0.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: ncons not defined\n\
    \  Stacktrace:\n   [1] select_words(s"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqa7zegd0.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   words = split(s, \" \")\n    len_words = length(words)\n    for word in words\n\
    \        len_word = length(word)\n        count = 0\n        for char in word\n\
    \            if contains(vowels, char)\n                len_word -= 1\n      \
    \      end\n        end\n        if len_word != n\n            len_words -= 1\n\
    \        end\n    end\n    new_array = zeros(String, len_words)\n    index = 1\n\
    \    for word in words\n        len_word = length(word)\n        count = 0\n \
    \       for char in word\n            if contains(vowels, char)\n            \
    \    len_word -= 1\n            end\n        end\n        if len_word == n\n \
    \           new_array[index] = word\n            index += 1\n        end\n   \
    \ end\n    return new_array\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"\
    ])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\
    \t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"\
    Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"\
    Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"\
    a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp31i8u8xs.jl:50\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ vowels not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp31i8u8xs.jl:20\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp31i8u8xs.jl:50 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp31i8u8xs.jl:49\ntest set:\
    \ Error During Test at /tmp/tmp31i8u8xs.jl:51\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ vowels not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp31i8u8xs.jl:20\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp31i8u8xs.jl:51 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp31i8u8xs.jl:49\ntest set:\
    \ Error During Test at /tmp/tmp31i8u8xs.jl:52\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ vowels not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp31i8u8xs.jl:20\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp31i8u8xs.jl:52 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp31i8u8xs.jl:49\ntest set:\
    \ Error During Test at /tmp/tmp31i8u8xs.jl:53\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: vowels not defined\n\
    \  Stacktrace:\n   [1] select_wor"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp31i8u8xs.jl:47\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   a = split(s, \" \")\n    r = []\n    for i in a\n        count = 0\n     \
    \   for j in i\n            if j != 'a' && j != 'e' && j != 'i' && j != 'o' &&\
    \ j != 'u' && j != 'y'\n                count += 1\n            end\n        end\n\
    \        if count == n\n            push!(r, i)\n        end\n    end\n    return\
    \ r\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3st_uroa.jl:35\n  Expression: candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: [\"lamb\"\
    ] == [\"Mary\", \"lamb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3st_uroa.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3st_uroa.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp3st_uroa.jl:38\n  Expression: candidate(\"Uncle sam\", 3)\
    \ == [\"Uncle\"]\n   Evaluated: String[] == [\"Uncle\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3st_uroa.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3st_uroa.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3st_uroa.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   cons_vec = Vector{String}()\n    count_cons = Dict{Char, Int64}()\n    for\
    \ ch in s\n        if ch in 'bcdfghjklmnpqrstvwxyz'\n            if haskey(count_cons,\
    \ ch)\n                count_cons[ch] += 1\n            else\n               \
    \ count_cons[ch] = 1\n            end\n        end\n    end\n    for key in keys(count_cons)\n\
    \        if count_cons[key] == n\n            push!(cons_vec, key)\n        end\n\
    \    end\n    cons_vec\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmps1e9gkd1.jl:17\nin expression\
    \ starting at /tmp/tmps1e9gkd1.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   vowels = [false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false,\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_81c7d1s.jl:17\nin expression starting at\
    \ /tmp/tmp_81c7d1s.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   matches = matchall(r\"(\\b[^aeiou ]{$n}\\b)\", s)\n    return matches.captures\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzirsr64_.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ matchall not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpzirsr64_.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzirsr64_.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzirsr64_.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpzirsr64_.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ matchall not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpzirsr64_.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzirsr64_.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzirsr64_.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpzirsr64_.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ matchall not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpzirsr64_.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzirsr64_.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzirsr64_.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpzirsr64_.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: matchall not\
    \ defined\n  Stacktrace:\n   [1] se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzirsr64_.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   words = split(s, r\"\\s+\")\n    num_consonants(w::String) = length(filter(a->\
    \ !haskey(Dict('a','e','i','o','u'), a), w))\n    consonant_count = [num_consonants(w)\
    \ for w in words]\n    return words[findall(consonant_count.==n)]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary\
    \ had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\"\
    , 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"\
    ])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\"\
    , 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\",\
    \ \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpb_98ysgj.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  MethodError:\
    \ no method matching (::var\"#num_consonants#3\")(::SubString{String})\n  Closest\
    \ candidates are:\n    (::var\"#num_consonants#3\")(!Matched::String) at /tmp/tmpb_98ysgj.jl:15\n\
    \  Stacktrace:\n   [1] (::var\"#2#5\"{var\"#num_consonants#3\"})(w::SubString{String})\n\
    \     @ Main ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n  \
    \ [3] collect\n     @ ./array.jl:724 [inlined]\n   [4] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpb_98ysgj.jl:16\n   [5] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [6] macro expansion\n     @ /tmp/tmpb_98ysgj.jl:24 [inlined]\n   [7] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpb_98ysgj.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpb_98ysgj.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  MethodError:\
    \ no method matching (::var\"#num_consonants#3\")(::SubString{String})\n  Closest\
    \ candidates are:\n    (::var\"#num_consonants#3\")(!Matched::String) at /tmp/tmpb_98ysgj.jl:15\n\
    \  Stacktrace:\n   [1] (::var\"#2#5\"{var\"#num_consonants#3\"})(w::SubString{String})\n\
    \     @ Main ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n  \
    \ [3] collect\n     @ ./array.jl:724 [inlined]\n   [4] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpb_98ysgj.jl:16\n   [5] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [6] macro expansion\n     @ /tmp/tmpb_98ysgj.jl:25 [inlined]\n   [7] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpb_98ysgj.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpb_98ysgj.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  Me"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb_98ysgj.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   # define a vowels list\n    vowels = ['a', 'e', 'i', 'o', 'u'] \n    # check\
    \ if the input string is empty\n    if isempty(s)\n        return []\n    end\n\
    \    # split the string into a list of string\n    s_list = split(s)\n    # define\
    \ a result vector\n    result = []\n    # define a counter function\n    function\
    \ consonant_counter(s::String)::Int64\n        counter = 0\n        for letter\
    \ in s\n            if !(letter in vowels)\n                counter += 1\n   \
    \         end\n        end\n        return counter\n    end\n    # check if the\
    \ number of consonants is equal to n\n    for word in s_list\n        if consonant_counter(word)\
    \ == n\n            push!(result, word)\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpsuvzwczb.jl:47\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  MethodError:\
    \ no method matching (::var\"#consonant_counter#1\"{Vector{Char}})(::SubString{String})\n\
    \  Closest candidates are:\n    (::var\"#consonant_counter#1\")(!Matched::String)\
    \ at /tmp/tmpsuvzwczb.jl:25\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpsuvzwczb.jl:36\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsuvzwczb.jl:47 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsuvzwczb.jl:46\ntest set:\
    \ Error During Test at /tmp/tmpsuvzwczb.jl:48\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  MethodError:\
    \ no method matching (::var\"#consonant_counter#1\"{Vector{Char}})(::SubString{String})\n\
    \  Closest candidates are:\n    (::var\"#consonant_counter#1\")(!Matched::String)\
    \ at /tmp/tmpsuvzwczb.jl:25\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpsuvzwczb.jl:36\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsuvzwczb.jl:48 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsuvzwczb.jl:46\ntest set:\
    \ Error During Test at /tmp/tmpsuvzwczb.jl:49\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  MethodError: no\
    \ method matching (::var\"#consonant_counter#1\"{Vector{Char}})(::SubString{String})\n\
    \  Closest candidates are:\n    (::var\"#consonant_counter#1\")(!Matched::String)\
    \ at /tmp/tmpsuvzwczb.jl:25\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpsuvzwczb.jl:36\n   [2] macro expansion\n     @ /shared/cen"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsuvzwczb.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   cons, words = 1, []\n    while cons <= n\n        for word in split(s)\n \
    \           if length(filter(isalpha, word)) == n\n                push!(words,\
    \ word)\n            end\n        end\n        cons += 1\n    end\n    return\
    \ words\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp73ac4vw7.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ isalpha not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp73ac4vw7.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp73ac4vw7.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp73ac4vw7.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp73ac4vw7.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ isalpha not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp73ac4vw7.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp73ac4vw7.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp73ac4vw7.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp73ac4vw7.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ isalpha not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp73ac4vw7.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp73ac4vw7.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp73ac4vw7.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp73ac4vw7.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: isalpha not defined\n\
    \  Stacktrace:\n   [1] select"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp73ac4vw7.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   v = split(s, \" \") # split the string on spaces into a vector of words\n\
    \    for i in 1:length(v)\n        if count_consonants(v[i]) == n\n          \
    \  push!(v, v[i])\n        end\n    end\n    return v\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\"\
    , 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"\
    Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7tna126c.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp7tna126c.jl:16\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp7tna126c.jl:27 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7tna126c.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp7tna126c.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp7tna126c.jl:16\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp7tna126c.jl:28 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7tna126c.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp7tna126c.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp7tna126c.jl:16\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp7tna126c.jl:29 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7tna126c.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp7tna126c.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: count_consonants\
    \ not"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7tna126c.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   count = 0\n    words = []\n    for word in split(s)\n        for char in word\n\
    \            if char in \"bcdfghjklmnpqrstvwxyz\"\n                count += 1\n\
    \            end\n        end\n        if count == n\n            push!(words,\
    \ word)\n        end\n        count = 0\n    end\n    return words\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary\
    \ had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\"\
    , 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"\
    ])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\"\
    , 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\",\
    \ \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptfcq97gk.jl:35\n  Expression: candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: [\"lamb\"\
    ] == [\"Mary\", \"lamb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptfcq97gk.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptfcq97gk.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptfcq97gk.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   consonants = \"bcdfghjklmnpqrstvwxyz\"\n    return [word for word in split(s)\
    \ if count(consonants, word) == n]\nend\n    \nusing Test\n\n@testset begin\n\n\
    candidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) ==\
    \ [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\"\
    , \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkjip16pj.jl:23\n  Expression: candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"]\n   Evaluated: String[] == [\"little\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkjip16pj.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkjip16pj.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpkjip16pj.jl:24\n  Expression: candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: String[] == [\"Mary\", \"\
    lamb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkjip16pj.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkjip16pj.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpkjip16pj.jl:26\n  Expression: candidate(\"Hello world\", 4)\
    \ == [\"world\"]\n   Evaluated: String[] == [\"world\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkjip16pj.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkjip16pj.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpkjip16pj.jl:27\n  Expression: candidate(\"Uncle sam\", 3)\
    \ == [\"Uncle\"]\n   Evaluated: String[] == [\"Uncle\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkjip16pj.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkjip16pj.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpkjip16pj.jl:29\n  Expression: candidate(\"a b c d e f\", 1)\
    \ == [\"b\", \""
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkjip16pj.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   words = split(s)\n    inds = findall(countcons(w) == n for w in words)\n \
    \   return [words[i] for i in inds]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"\
    ])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\
    \t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"\
    Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"\
    Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"\
    a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphlhp_qn9.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ countcons not defined\n  Stacktrace:\n    [1] (::var\"#1#3\"{Int64})(w::SubString{String})\n\
    \      @ Main ./none:0\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n\
    \    [3] _zip_iterate_some\n      @ ./iterators.jl:358 [inlined]\n    [4] _zip_iterate_some\n\
    \      @ ./iterators.jl:360 [inlined]\n    [5] _zip_iterate_all\n      @ ./iterators.jl:350\
    \ [inlined]\n    [6] iterate\n      @ ./iterators.jl:340 [inlined]\n    [7] iterate\n\
    \      @ ./generator.jl:44 [inlined]\n    [8] iterate(::Base.Iterators.Filter{Base.var\"\
    #108#110\", Base.Generator{Base.Iterators.Zip{Tuple{LinearIndices{1, Tuple{Base.OneTo{Int64}}},\
    \ Base.Generator{Vector{SubString{String}}, var\"#1#3\"{Int64}}}}, Base.var\"\
    #6#7\"{Pair}}})\n      @ Base.Iterators ./iterators.jl:445\n    [9] iterate\n\
    \      @ ./generator.jl:44 [inlined]\n   [10] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n   [11] collect(itr::Base.Generator{Base.Iterators.Filter{Base.var\"\
    #108#110\", Base.Generator{Base.Iterators.Zip{Tuple{LinearIndices{1, Tuple{Base.OneTo{Int64}}},\
    \ Base.Generator{Vector{SubString{String}}, var\"#1#3\"{Int64}}}}, Base.var\"\
    #6#7\"{Pair}}}, Base.var\"#107#109\"})\n      @ Base ./array.jl:721\n   [12] findall\n\
    \      @ ./array.jl:2300 [inlined]\n   [13] select_words(s::String, n::Int64)\n\
    \      @ Main /tmp/tmphlhp_qn9.jl:15\n   [14] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [15] macro expansion\n      @ /tmp/tmphlhp_qn9.jl:23 [inlined]\n\
    \   [16] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [17] top-level scope\n      @ /tmp/tmphlhp_qn9.jl:22\ntest set:\
    \ Error During Test at /tmp/tmphlhp_qn9.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ countcons not defined\n  Stacktrace:\n    [1] (::var\"#1#3\"{Int64})(w::SubString{String})\n\
    \      @ Main ./none:0\n    ["
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphlhp_qn9.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   s = split(s)\n    y = Vector{String}()\n    for i in s\n        count = 0\n\
    \        vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n        for j in i\n  \
    \          if j in vowels\n                count += 1\n            end\n     \
    \   end\n        if length(i) - count == n\n            push!(y, i)\n        end\n\
    \    end\n    return y\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsy1wjanc.jl:35\n  Expression: candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"]\n   Evaluated: [\"Mary\", \"lamb\"\
    ] == [\"little\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsy1wjanc.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsy1wjanc.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpsy1wjanc.jl:36\n  Expression: candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: [\"had\"] == [\"Mary\", \"\
    lamb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsy1wjanc.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsy1wjanc.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpsy1wjanc.jl:38\n  Expression: candidate(\"Hello world\", 4)\
    \ == [\"world\"]\n   Evaluated: String[] == [\"world\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsy1wjanc.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsy1wjanc.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpsy1wjanc.jl:39\n  Expression: candidate(\"Uncle sam\", 3)\
    \ == [\"Uncle\"]\n   Evaluated: [\"sam\"] == [\"Uncle\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsy1wjanc.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsy1wjanc.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpsy1wjanc.jl:41\n  Expression: candidate(\"a b c d e f\", 1)\
    \ == ["
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsy1wjanc.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   words = split(s, \" \")\n    # filter((w) -> count_consonants(w) == n, words)\n\
    \    # map((w) -> count_consonants(w), words)\n    # select((w) -> count_consonants(w)\
    \ == n, words)\n    return [w for w in words if count_consonants(w) == n]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpunh_c6c4.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n    [1] (::var\"#1#2\"{Int64})(w::SubString{String})\n\
    \      @ Main ./none:0\n    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [3] iterate\n      @ ./generator.jl:44 [inlined]\n    [4] grow_to!(dest::Vector{SubString{String}},\
    \ itr::Base.Generator{Base.Iterators.Filter{var\"#1#2\"{Int64}, Vector{SubString{String}}},\
    \ typeof(identity)})\n      @ Base ./array.jl:797\n    [5] collect\n      @ ./array.jl:721\
    \ [inlined]\n    [6] select_words(s::String, n::Int64)\n      @ Main /tmp/tmpunh_c6c4.jl:18\n\
    \    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpunh_c6c4.jl:25 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpunh_c6c4.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpunh_c6c4.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n    [1] (::var\"#1#2\"{Int64})(w::SubString{String})\n\
    \      @ Main ./none:0\n    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [3] iterate\n      @ ./generator.jl:44 [inlined]\n    [4] grow_to!(dest::Vector{SubString{String}},\
    \ itr::Base.Generator{Base.Iterators.Filter{var\"#1#2\"{Int64}, Vector{SubString{String}}},\
    \ typeof(identity)})\n      @ Base ./array.jl:797\n    [5] collect\n      @ ./array.jl:721\
    \ [inlined]\n    [6] select_words(s::String, n::Int64)\n      @ Main /tmp/tmpunh_c6c4.jl:18\n\
    \    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpunh_c6c4.jl:26 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10]"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpunh_c6c4.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \ counter = 0\n  words = split(s, \" \")\n  for word in words\n    for letter\
    \ in word\n      if is_consonant(letter)\n        counter += 1\n      end\n  \
    \  end\n    if counter == n\n      return word\n    end\n    counter = 0\n  end\n\
    \  return []\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7gt5wkwp.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ is_consonant not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp7gt5wkwp.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7gt5wkwp.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7gt5wkwp.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp7gt5wkwp.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ is_consonant not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp7gt5wkwp.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7gt5wkwp.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7gt5wkwp.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp7gt5wkwp.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ is_consonant not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp7gt5wkwp.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7gt5wkwp.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7gt5wkwp.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp7gt5wkwp.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: is_consonant\
    \ not defined\n  Stack"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7gt5wkwp.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   words = split(s)\n    selected_words = []\n    for i in 1:length(words)\n\
    \        if n == nconsonants(words[i])\n            push!(selected_words, words[i])\n\
    \        end\n    end\n    return selected_words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\"\
    , 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"\
    Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpg4qmsu7j.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ nconsonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpg4qmsu7j.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg4qmsu7j.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg4qmsu7j.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpg4qmsu7j.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ nconsonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpg4qmsu7j.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg4qmsu7j.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg4qmsu7j.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpg4qmsu7j.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ nconsonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpg4qmsu7j.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg4qmsu7j.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg4qmsu7j.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpg4qmsu7j.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: nconsonants not\
    \ defined\n  Stacktrac"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg4qmsu7j.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   return [w for w in split(s) if count(x -> (x \u2208 'aeiou'), w) == n]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpfic9lg40.jl:14\nin expression\
    \ starting at /tmp/tmpfic9lg40.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   # Your code here!\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpvtxca3jc.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{String}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n     @ Main\
    \ /tmp/tmpvtxca3jc.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvtxca3jc.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvtxca3jc.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpvtxca3jc.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{String}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n     @ Main\
    \ /tmp/tmpvtxca3jc.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/jul"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvtxca3jc.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   words = split(s)\n    result = []\n    for i in 1:length(words)\n        if\
    \ length(split(words[i])) - 1 == n\n            push!(result, words[i])\n    \
    \    end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"\
    ])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\
    \t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"\
    Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"\
    Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"\
    a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4or0gsqi.jl:28\n  Expression: candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"]\n   Evaluated: String[] == [\"little\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4or0gsqi.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4or0gsqi.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp4or0gsqi.jl:29\n  Expression: candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: String[] == [\"Mary\", \"\
    lamb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4or0gsqi.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4or0gsqi.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp4or0gsqi.jl:31\n  Expression: candidate(\"Hello world\", 4)\
    \ == [\"world\"]\n   Evaluated: String[] == [\"world\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4or0gsqi.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4or0gsqi.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp4or0gsqi.jl:32\n  Expression: candidate(\"Uncle sam\", 3)\
    \ == [\"Uncle\"]\n   Evaluated: String[] == [\"Uncle\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4or0gsqi.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4or0gsqi.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp4or0gsqi.jl:34\n  Expression: candidate(\"a b c d e f\", 1)\
    \ == [\"b\", \""
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4or0gsqi.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   words = split(s)\n    x = []\n    for word in words\n        if length(regexp(\"\
    [^AEIOUaeiou]\", word)) == n\n            push!(x, word)\n        end\n    end\n\
    \    return x\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpf4994esf.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ regexp not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpf4994esf.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf4994esf.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf4994esf.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpf4994esf.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ regexp not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpf4994esf.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf4994esf.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf4994esf.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpf4994esf.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ regexp not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpf4994esf.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf4994esf.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf4994esf.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpf4994esf.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: regexp not defined\n\
    \  Stacktrace:\n   [1] select_wor"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf4994esf.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   arr=split(s)\n    arr_con=Array{Int64}(length(arr))\n    for i in 1:length(arr)\n\
    \        arr_con[i]=length(filter(isalpha,arr[i]))-length(findall(x->x in \"aeiou\"\
    ,arr[i]))\n    end\n    return(arr[findall(x->x==n,arr_con)])\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\"\
    , 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) ==\
    \ Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\
    \t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4)\
    \ == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"\
    c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpktvt9ocd.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  MethodError:\
    \ no method matching (Array{Int64})(::Int64)\n  Closest candidates are:\n    (Array{T})(!Matched::LinearAlgebra.AbstractQ)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/qr.jl:563\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Tuple{Int64,\
    \ Int64}) where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n\
    \    ...\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n     @ Main\
    \ /tmp/tmpktvt9ocd.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpktvt9ocd.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpktvt9ocd.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpktvt9ocd.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  MethodError:\
    \ no method matching (Array{Int64})(::Int64)\n  Closest candidates are:\n    (Array{T})(!Matched::LinearAlgebra.AbstractQ)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/qr.jl:563\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Tuple{Int64,\
    \ Int64}) where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n\
    \    ...\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n     @ Main\
    \ /tmp/tmpktvt9ocd.j"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpktvt9ocd.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   n_cons_words = split(s, \" \") |> filter(x -> count_consonants(x) == n)\n\
    \    return n_cons_words\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8z1umiky.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  MethodError:\
    \ no method matching filter(::var\"#1#2\"{Int64})\n  Closest candidates are:\n\
    \    filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n     @ Main\
    \ /tmp/tmp8z1umiky.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8z1umiky.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8z1umiky.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp8z1umiky.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  MethodError:\
    \ no method matching filter(::var\"#1#2\"{Int64})\n  Closest candidates are:\n\
    \    filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n     @ Main\
    \ /tmp/tmp8z1umiky.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8z1umiky.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8z1umiky.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp8z1umiky.jl:24\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8z1umiky.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   # Split by whitespace\n    words = split(s)\n    # Initialize count array\n\
    \    counts = []\n    for word in words\n        count = 0\n        for char in\
    \ word\n            if !(char in [\"a\", \"e\", \"i\", \"o\", \"u\"])\n      \
    \          count += 1\n            end\n        end\n        append!(counts, count)\n\
    \    end\n    # Initialize solution vector\n    sol = []\n    for (i, count) in\
    \ enumerate(counts)\n        if count == n\n            append!(sol, words[i])\n\
    \        end\n    end\n    return sol\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"\
    ])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\
    \t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"\
    Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"\
    Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"\
    a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpjpuu0q5z.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"\
    ]\\n  MethodError: Cannot `convert` an object of type Char to an object of type\
    \ String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n    [1] setindex!(A::Vector{String}, x::Char, i1::Int64)\\\
    n      @ Base ./array.jl:903\\n    [2] _unsafe_copyto!(dest::Vector{String}, doffs::Int64,\
    \ src::Vector{Any}, soffs::Int64, n::Int64)\\n      @ Base ./array.jl:253\\n \
    \   [3] unsafe_copyto!\\n      @ ./array.jl:307 [inlined]\\n    [4] _copyto_impl!\\\
    n      @ ./array.jl:331 [inlined]\\n    [5] copyto!\\n      @ ./array.jl:317 [inlined]\\\
    n    [6] copyto!\\n      @ ./array.jl:343 [inlined]\\n    [7] copyto_axcheck!\\\
    n      @ ./abstractarray.jl:1104 [inlined]\\n    [8] Vector{String}(x::Vector{Any})\\\
    n      @ Base ./array.jl:563\\n    [9] convert\\n      @ ./array.jl:554 [inlined]\\\
    n   [10] select_words(s::String, n::Int64)\\n      @ Main /tmp/tmpjpuu0q5z.jl:34\\\
    n   [11] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [12] macro expansion\\n      @ /tmp/tmpjpuu0q5z.jl:41 [inlined]\\\
    n   [13] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [14] top-level scope\\n      @ /tmp/tmpjpuu0q5z.jl:40\\ntest\
    \ set: Error During Test at /tmp/tmpjpuu0q5z.jl:42\\n  Test threw exception\\\
    n  Expression: candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"\
    ]\\n  MethodError: Cannot `convert` an object of type Char to an object of type\
    \ String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at /s"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   v = []\n    i = 0\n    while i < length(s)\n        if !isalpha(s[i])\n  \
    \          i += 1\n            continue\n        end\n        word = String[]\n\
    \        while i < length(s) && isalpha(s[i])\n            push!(word, s[i])\n\
    \            i += 1\n        end\n        if length(word) == n\n            push!(v,\
    \ join(word))\n        end\n    end\n    return v\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\"\
    , 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"\
    Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpah_5k51f.jl:37\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  BoundsError:\
    \ attempt to access 22-codeunit String at index [0]\n  Stacktrace:\n   [1] checkbounds\n\
    \     @ ./strings/basic.jl:216 [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102\
    \ [inlined]\n   [3] getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4]\
    \ select_words(s::String, n::Int64)\n     @ Main /tmp/tmpah_5k51f.jl:17\n   [5]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpah_5k51f.jl:37 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpah_5k51f.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpah_5k51f.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  BoundsError:\
    \ attempt to access 22-codeunit String at index [0]\n  Stacktrace:\n   [1] checkbounds\n\
    \     @ ./strings/basic.jl:216 [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102\
    \ [inlined]\n   [3] getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4]\
    \ select_words(s::String, n::Int64)\n     @ Main /tmp/tmpah_5k51f.jl:17\n   [5]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpah_5k51f.jl:38 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpah_5k51f.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpah_5k51f.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  BoundsError: attempt\
    \ to access 18-codeunit String at index [0]\n  Stacktrace:\n   [1] checkbounds\n\
    \     @ ./strings/basic.jl:216 [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102\
    \ [inlined]\n   [3] getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4]\
    \ selec"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpah_5k51f.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \ return [word for word in split(s) if sum(ismatch.(r\"[b-df-hj-np-tv-z]\",word))\
    \ == n]\nend\n@test select_words(\"Mary had a little lamb\", 4) == [\"little\"\
    ]\n@test select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n\
    @test select_words(\"simple white space\", 2) == []\n@test select_words(\"Hello\
    \ world\", 4) == [\"world\"]\n@test select_words(\"Uncle sam\", 3) == [\"Uncle\"\
    ]\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @test not defined\nin expression starting\
    \ at /tmp/tmpzeo_kbqf.jl:16\nin expression starting at /tmp/tmpzeo_kbqf.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   words = split(s, r\"\\s+\")\n    v = Vector{String}()\n    for i = 1:length(words)\n\
    \        push!(v, words[i]) if sum(ismatch.(r\"\\p{Letter}\", split(words[i],\
    \ \"\"))) == n\n    end\n    return v\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"\
    ])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\
    \t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"\
    Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"\
    Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"\
    a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp0tk5nf4s.jl:16 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0tk5nf4s.jl:17\n\
    in expression starting at /tmp/tmp0tk5nf4s.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   return split(s) |> filter(w -> count_consonants(w) == n) |> Vector\nend\n\
    using Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpeqsknnw0.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  MethodError:\
    \ no method matching filter(::var\"#1#2\"{Int64})\n  Closest candidates are:\n\
    \    filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n     @ Main\
    \ /tmp/tmpeqsknnw0.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpeqsknnw0.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpeqsknnw0.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpeqsknnw0.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  MethodError:\
    \ no method matching filter(::var\"#1#2\"{Int64})\n  Closest candidates are:\n\
    \    filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n     @ Main\
    \ /tmp/tmpeqsknnw0.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpeqsknnw0.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpeqsknnw0.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpeqsknnw0.jl:23\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeqsknnw0.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   s = split(s) #split the string into words\n    i = 1 #initialize counter\n\
    \    v = Vector{String}() #initialize output vector\n    for word in s #for each\
    \ word in split string\n        if length(consonants(word)) == n #if the word\
    \ has exactly n consonants\n            v = push!(v, word) #push the word to output\
    \ vector\n        end\n    end\n    return v #return output vector\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary\
    \ had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\"\
    , 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"\
    ])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\"\
    , 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\",\
    \ \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkh0ne1o3.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpkh0ne1o3.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkh0ne1o3.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkh0ne1o3.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpkh0ne1o3.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpkh0ne1o3.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkh0ne1o3.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkh0ne1o3.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpkh0ne1o3.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpkh0ne1o3.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkh0ne1o3.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkh0ne1o3.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpkh0ne1o3.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: consonants not\
    \ defined\n  Stacktrace:\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkh0ne1o3.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\"\
    ]\n    # Splits string by word and iterates over each word\n    split(s,r\"\\\
    s+\")[reduce(x->contains(consonants, x),split(s,r\"\\s+\")[1],0)==n]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary\
    \ had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\"\
    , 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"\
    ])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\"\
    , 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\",\
    \ \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8q4kbol1.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  MethodError:\
    \ no method matching reduce(::var\"#1#2\"{Vector{String}}, ::SubString{String},\
    \ ::Int64)\n  Closest candidates are:\n    reduce(::Any, ::Any; kw...) at /shared/centos7/julia/1.7.3/share/julia/base/reduce.jl:458\n\
    \    reduce(::Any, !Matched::Number) at /shared/centos7/julia/1.7.3/share/julia/base/reduce.jl:460\n\
    \    reduce(::Any, !Matched::SharedArrays.SharedArray) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SharedArrays/src/SharedArrays.jl:569\n\
    \    ...\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n     @ Main\
    \ /tmp/tmp8q4kbol1.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8q4kbol1.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8q4kbol1.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp8q4kbol1.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  MethodError:\
    \ no method matching reduce(::var\"#1#2\"{Vector{String}}, ::SubString{String},\
    \ ::Int64)\n  Closest candidates are:\n    reduce(::Any, ::Any; kw...) at /shared/centos7/julia/1.7.3/share/julia/base/reduce.jl:458\n\
    \    reduce(::Any, !Matched::Number) at /shared/centos7/julia/1.7.3/share/julia/base/reduce.jl:460\n\
    \    reduce(::Any, !Matched::SharedArrays.SharedArray) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SharedArrays/src/SharedArrays.jl:569\n\
    \    ...\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n     @ Main\
    \ /tmp/tmp8q4kbol1.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8q4kbol1.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inline"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8q4kbol1.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   #treat s as one word\n    return [x for x in split(s) if consonants(x) ==\
    \ n]\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpc57_6_qe.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ consonants not defined\n  Stacktrace:\n    [1] (::var\"#1#2\"{Int64})(x::SubString{String})\n\
    \      @ Main ./none:0\n    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [3] iterate\n      @ ./generator.jl:44 [inlined]\n    [4] grow_to!(dest::Vector{SubString{String}},\
    \ itr::Base.Generator{Base.Iterators.Filter{var\"#1#2\"{Int64}, Vector{SubString{String}}},\
    \ typeof(identity)})\n      @ Base ./array.jl:797\n    [5] collect\n      @ ./array.jl:721\
    \ [inlined]\n    [6] select_words(s::String, n::Int64)\n      @ Main /tmp/tmpc57_6_qe.jl:15\n\
    \    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpc57_6_qe.jl:22 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpc57_6_qe.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpc57_6_qe.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ consonants not defined\n  Stacktrace:\n    [1] (::var\"#1#2\"{Int64})(x::SubString{String})\n\
    \      @ Main ./none:0\n    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [3] iterate\n      @ ./generator.jl:44 [inlined]\n    [4] grow_to!(dest::Vector{SubString{String}},\
    \ itr::Base.Generator{Base.Iterators.Filter{var\"#1#2\"{Int64}, Vector{SubString{String}}},\
    \ typeof(identity)})\n      @ Base ./array.jl:797\n    [5] collect\n      @ ./array.jl:721\
    \ [inlined]\n    [6] select_words(s::String, n::Int64)\n      @ Main /tmp/tmpc57_6_qe.jl:15\n\
    \    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpc57_6_qe.jl:23 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level s"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc57_6_qe.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   function isConsonant(c::Char)::Bool\n        if c in \"aeiouAEIOU\"\n    \
    \        return false\n        else\n            return true\n        end\n  \
    \  end\n    function numConsonants(w::String)::Int64\n        nc = 0\n       \
    \ for c in w\n            if isConsonant(c)\n                nc += 1\n       \
    \     end\n        end\n        return nc\n    end\n    for i in split(s)\n  \
    \      if numConsonants(i) == n\n            println(i)\n        end\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp89q86uos.jl:41\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  MethodError:\
    \ no method matching (::var\"#numConsonants#2\"{var\"#isConsonant#1\"})(::SubString{String})\n\
    \  Closest candidates are:\n    (::var\"#numConsonants#2\")(!Matched::String)\
    \ at /tmp/tmp89q86uos.jl:21\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp89q86uos.jl:31\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp89q86uos.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp89q86uos.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp89q86uos.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  MethodError:\
    \ no method matching (::var\"#numConsonants#2\"{var\"#isConsonant#1\"})(::SubString{String})\n\
    \  Closest candidates are:\n    (::var\"#numConsonants#2\")(!Matched::String)\
    \ at /tmp/tmp89q86uos.jl:21\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp89q86uos.jl:31\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp89q86uos.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp89q86uos.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp89q86uos.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  MethodError: no\
    \ method matching (::var\"#numConsonants#2\"{var\"#isConsonant#1\"})(::SubString{String})\n\
    \  Closest candidates are:\n    (::var\"#numConsonants#2\")(!Matched::String)\
    \ at /tmp/tmp89q86uos.jl:21\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp89q86uos.jl:31\n   [2] macro expansion\n     @ /shared/centos"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp89q86uos.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   \"\"\"Return a vector of words with n consonants, in order they appear in\
    \ s\"\"\"\n    words = split(s)\n    num_consonants(word) = length(regexp(r\"\
    [bcdfghjklmnpqrstvwxz]\", word, ignorecase=true))\n    consonant_words = [word\
    \ for word in words if num_consonants(word) == n]\n    return consonant_words\n\
    end\n# Test cases:\nprintln(\"\\nNum consonants, then words:\")\nprint(select_words(\"\
    Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\",\
    \ 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello\
    \ world\", 4))\nprint(select_words(\"Uncle sam\", 3))\nusing Test\n\n@testset\
    \ begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\"\
    , 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"\
    Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "\nNum consonants, then words:\n"
  stderr: "ERROR: LoadError: UndefVarError: regexp not defined\nStacktrace:\n [1]\
    \ (::var\"#num_consonants#2\")(word::SubString{String})\n   @ Main /tmp/tmp4oa0age7.jl:16\n\
    \ [2] (::var\"#1#3\"{Int64, var\"#num_consonants#2\"})(word::SubString{String})\n\
    \   @ Main ./none:0\n [3] iterate\n   @ ./iterators.jl:447 [inlined]\n [4] iterate\n\
    \   @ ./generator.jl:44 [inlined]\n [5] grow_to!(dest::Vector{SubString{String}},\
    \ itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\"{Int64, var\"#num_consonants#2\"\
    }, Vector{SubString{String}}}, typeof(identity)})\n   @ Base ./array.jl:797\n\
    \ [6] collect\n   @ ./array.jl:721 [inlined]\n [7] select_words(s::String, n::Int64)\n\
    \   @ Main /tmp/tmp4oa0age7.jl:17\n [8] top-level scope\n   @ /tmp/tmp4oa0age7.jl:22\n\
    in expression starting at /tmp/tmp4oa0age7.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   # your code\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpboh2dm3o.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{String}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n     @ Main\
    \ /tmp/tmpboh2dm3o.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpboh2dm3o.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpboh2dm3o.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpboh2dm3o.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{String}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n     @ Main\
    \ /tmp/tmpboh2dm3o.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/jul"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpboh2dm3o.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   nvowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"]\n    if n == 0 \n   \
    \     return split(s)\n    end\n    w = Vector{String}()\n    for j in split(s)\n\
    \        if !(j in nvowels)\n            push!(w, j)\n        end\n    end\n \
    \   return w\nend\ns = \"Mary had a little lamb\"\nselect_words(s, 4)\nselect_words(s,\
    \ 3)\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc6z1_taz.jl:34\n  Expression: candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"]\n   Evaluated: [\"Mary\", \"had\"\
    , \"little\", \"lamb\"] == [\"little\"]\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc6z1_taz.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc6z1_taz.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpc6z1_taz.jl:35\n  Expression: candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: [\"Mary\", \"had\", \"little\"\
    , \"lamb\"] == [\"Mary\", \"lamb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc6z1_taz.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc6z1_taz.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpc6z1_taz.jl:36\n  Expression: candidate(\"simple white space\"\
    , 2) == Vector{String}([])\n   Evaluated: [\"simple\", \"white\", \"space\"] ==\
    \ String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc6z1_taz.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc6z1_taz.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpc6z1_taz.jl:37\n  Expression: candidate(\"Hello world\", 4)\
    \ == [\"world\"]\n   Evaluated: [\"Hello\", \"world\"] == [\"world\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc6z1_taz.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc6z1_taz.jl:33\ntes"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc6z1_taz.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   L = split(s)\n    L = [w for w in L if length(findall(r\"[bcdfghjklmnpqrstvwxz]\"\
    , w)) == n]\n    return L\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpeokc21cb.jl:24\n  Expression: candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: [\"lamb\"\
    ] == [\"Mary\", \"lamb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeokc21cb.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeokc21cb.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeokc21cb.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   cons = \"bBcCdDfFgGhHjJkKlLmMnNpPqQrRsStTvVwWxXyYzZ\"\n    words = split(s)\n\
    \    if s == \"\"\n        return []\n    end\n    result = Vector{String}()\n\
    \    for i in 1:length(words)\n        count = 0\n        for j in 1:length(words[i])\n\
    \            if occursin(words[i][j], cons)\n                count += 1\n    \
    \        end\n        end\n        if count == n\n            push!(result, words[i])\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) ==\
    \ [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\"\
    , \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   words = split(s)\n    matches = []\n    for word in words\n        count =\
    \ 0\n        for c in word\n            if c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u'\n                count += 1\n            end\n        end\n\
    \        if count == n\n            push!(matches, word)\n        end\n    end\n\
    \    return matches\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpji7ge2ro.jl:34\n  Expression: candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"]\n   Evaluated: String[] == [\"little\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpji7ge2ro.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpji7ge2ro.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpji7ge2ro.jl:35\n  Expression: candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: String[] == [\"Mary\", \"\
    lamb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpji7ge2ro.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpji7ge2ro.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpji7ge2ro.jl:36\n  Expression: candidate(\"simple white space\"\
    , 2) == Vector{String}([])\n   Evaluated: [\"simple\", \"white\", \"space\"] ==\
    \ String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpji7ge2ro.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpji7ge2ro.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpji7ge2ro.jl:37\n  Expression: candidate(\"Hello world\", 4)\
    \ == [\"world\"]\n   Evaluated: String[] == [\"world\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpji7ge2ro.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpji7ge2ro.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpji7ge2ro.jl:38\n  Expression: c"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpji7ge2ro.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   if s == \"\"\n        return []\n    end\n    ans = []\n    s = split(s)\n\
    \    for i = 1:length(s)\n        count = 0\n        for j = 1:length(s[i])\n\
    \            ch = s[i][j]\n            if ch != 'a' && ch != 'e' && ch != 'i'\
    \ && ch != 'o' && ch != 'u' && ch != 'A' && ch != 'E' && ch != 'I' && ch != 'O'\
    \ && ch != 'U'\n                count += 1\n            end\n        end\n   \
    \     if count == n\n            push!(ans, s[i])\n        end\n    end\n    return\
    \ ans\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   # Your code here\n    return 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"\
    ])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\
    \t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"\
    Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"\
    Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"\
    a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpczlnb30x.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  MethodError:\
    \ Cannot `convert` an object of type Int64 to an object of type Vector{String}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n     @ Main\
    \ /tmp/tmpczlnb30x.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpczlnb30x.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpczlnb30x.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpczlnb30x.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  MethodError:\
    \ Cannot `convert` an object of type Int64 to an object of type Vector{String}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n     @ Main\
    \ /tmp/tmpczlnb30x.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/s"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpczlnb30x.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   words = split(s, \" \")\n    output = []\n    for word in words\n        n_consonants\
    \ = length(consonants(word))\n        if n_consonants == n\n            push!(output,\
    \ word)\n        end\n    end\n    return output\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\"\
    , 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"\
    Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpchwierm5.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpchwierm5.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpchwierm5.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpchwierm5.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpchwierm5.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpchwierm5.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpchwierm5.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpchwierm5.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpchwierm5.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpchwierm5.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpchwierm5.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpchwierm5.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpchwierm5.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: consonants not\
    \ defined\n  Stacktrace:\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpchwierm5.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   is_consonant(x) = x != 'a' && x != 'e' && x != 'i' && x != 'o' && x != 'u'\n\
    \    count(word) = length(filter(is_consonant, word))\n    arr = map(x -> count(x),\
    \ split(s))\n    return filter(x -> x == n, arr)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\"\
    , 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"\
    Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp1ktk7wb3.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"\
    ]\\n  MethodError: Cannot `convert` an object of type Int64 to an object of type\
    \ String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n    [1] setindex!(A::Vector{String}, x::Int64, i1::Int64)\\\
    n      @ Base ./array.jl:903\\n    [2] _unsafe_copyto!(dest::Vector{String}, doffs::Int64,\
    \ src::Vector{Int64}, soffs::Int64, n::Int64)\\n      @ Base ./array.jl:253\\\
    n    [3] unsafe_copyto!\\n      @ ./array.jl:307 [inlined]\\n    [4] _copyto_impl!\\\
    n      @ ./array.jl:331 [inlined]\\n    [5] copyto!\\n      @ ./array.jl:317 [inlined]\\\
    n    [6] copyto!\\n      @ ./array.jl:343 [inlined]\\n    [7] copyto_axcheck!\\\
    n      @ ./abstractarray.jl:1104 [inlined]\\n    [8] Vector{String}(x::Vector{Int64})\\\
    n      @ Base ./array.jl:563\\n    [9] convert\\n      @ ./array.jl:554 [inlined]\\\
    n   [10] select_words(s::String, n::Int64)\\n      @ Main /tmp/tmp1ktk7wb3.jl:17\\\
    n   [11] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [12] macro expansion\\n      @ /tmp/tmp1ktk7wb3.jl:24 [inlined]\\\
    n   [13] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [14] top-level scope\\n      @ /tmp/tmp1ktk7wb3.jl:23\\ntest\
    \ set: Error During Test at /tmp/tmp1ktk7wb3.jl:25\\n  Test threw exception\\\
    n  Expression: candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"\
    ]\\n  MethodError: Cannot `convert` an object of type Int64 to an object of type\
    \ String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   letters = split(s)\n    words = []\n    for i in 1:length(letters)\n     \
    \   c = 0\n        for j in 1:length(letters[i])\n            if (letters[i][j]\
    \ == 'a' || letters[i][j] == 'e' || letters[i][j] == 'i' || letters[i][j] == 'o'\
    \ || letters[i][j] == 'u')\n                c = c + 1\n            end\n     \
    \   end\n        if (length(letters[i]) - c == n)\n            push!(words, letters[i])\n\
    \        end\n    end\n    return words\nend\n@testset \"Test Cases\" begin\n\
    \    @test select_words(\"Mary had a little lamb\", 4) == [\"little\"]\n    @test\
    \ select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n    @test\
    \ select_words(\"simple white space\", 2) == []\n    @test select_words(\"Hello\
    \ world\", 4) == [\"world\"]\n    @test select_words(\"Uncle sam\", 3) == [\"\
    Uncle\"]\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @testset not defined\nin expression starting\
    \ at /tmp/tmpkrbx00c2.jl:29\nin expression starting at /tmp/tmpkrbx00c2.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   const vowels = \"aeiouAEIOU\"\n    words = split(s)\n    result = []\n   \
    \ for word in words\n        word_result = []\n        for char in word\n    \
    \        if !(char in vowels)\n                push!(word_result, char)\n    \
    \        end\n        end\n        if length(word_result) == n\n            push!(result,\
    \ word)\n        end\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\"\
    , 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"\
    Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unsupported `const` declaration on local variable\
    \ around /tmp/tmplf9hzi73.jl:14\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplf9hzi73.jl:1\n\
    in expression starting at /tmp/tmplf9hzi73.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   words = split(s)\n    to_keep = []\n    for word in words\n        if count_consonants(word)\
    \ == n\n            push!(to_keep, word)\n        end\n    end\n    return to_keep\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpubw9x869.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpubw9x869.jl:17\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpubw9x869.jl:28 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpubw9x869.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpubw9x869.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpubw9x869.jl:17\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpubw9x869.jl:29 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpubw9x869.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpubw9x869.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpubw9x869.jl:17\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpubw9x869.jl:30 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpubw9x869.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpubw9x869.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: count_consonants\
    \ not"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpubw9x869.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   if !isempty(s)\n        if length(s) <= 1\n            s = filter(isalpha,\
    \ s)\n            if length(s) == 0\n                return []\n            else\n\
    \                v = isvowel(s[1])\n                if v && n == 0\n         \
    \           return [s]\n                elseif !v && n == 1\n                \
    \    return [s]\n                else\n                    return []\n       \
    \         end\n            end\n        else\n            words = split(s, \"\
    \ \")\n            return filter(word -> length(word) == n + length(filter(isvowel,\
    \ word)), words)\n        end\n    else\n        return []\n    end\nend\n \n\
    \ \n \nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6qzdnsrr.jl:45\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ isvowel not defined\n  Stacktrace:\n   [1] (::var\"#1#2\"{Int64})(word::SubString{String})\n\
    \     @ Main /tmp/tmp6qzdnsrr.jl:31\n   [2] filter(f::var\"#1#2\"{Int64}, a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] select_words(s::String, n::Int64)\n     @\
    \ Main /tmp/tmp6qzdnsrr.jl:31\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp6qzdnsrr.jl:45 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp6qzdnsrr.jl:44\ntest set:\
    \ Error During Test at /tmp/tmp6qzdnsrr.jl:46\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ isvowel not defined\n  Stacktrace:\n   [1] (::var\"#1#2\"{Int64})(word::SubString{String})\n\
    \     @ Main /tmp/tmp6qzdnsrr.jl:31\n   [2] filter(f::var\"#1#2\"{Int64}, a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] select_words(s::String, n::Int64)\n     @\
    \ Main /tmp/tmp6qzdnsrr.jl:31\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp6qzdnsrr.jl:46 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp6qzdnsrr.jl:44\ntest set:\
    \ Error During Test at /tmp/tmp6qzdnsrr.jl:47\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ isvowel not defined\n  Stacktrace:\n   [1] (::var\"#1#2\"{Int64})(word::SubString{String})\n\
    \     @ Main /tmp/tmp6qzdnsrr.jl:31\n   [2] filter(f::var\"#1#2\"{Int64}, a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] select_words(s::String, n::Int64)\n     @\
    \ Main /tmp/tmp6qzdnsrr.jl"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6qzdnsrr.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   # Initialize an empty vector \n    words = []\n    # Splitting string s into\
    \ individual words\n    s_array = split(s)\n    for i in s_array\n        # Get\
    \ the length of the current word i and number of consonants\n        length_i\
    \ = length(i)\n        i_consonants = get_consonants(i)\n        # If the length\
    \ of the current word i and number of consonants \n        # are equal to the\
    \ given natural number n, then append i to vector words\n        if length_i ==\
    \ n && i_consonants == n\n            push!(words, i)\n        end\n    end\n\
    \    return words\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpj6b_kac5.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ get_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpj6b_kac5.jl:21\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpj6b_kac5.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpj6b_kac5.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpj6b_kac5.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ get_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpj6b_kac5.jl:21\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpj6b_kac5.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpj6b_kac5.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpj6b_kac5.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ get_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpj6b_kac5.jl:21\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpj6b_kac5.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpj6b_kac5.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpj6b_kac5.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: get_consonants\
    \ not defined"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj6b_kac5.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   # your code here\n    # for example: you can use the following function to\
    \ determine if a character is a consonant: isconsonant(c::Char) = c in \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \nend\n@test select_words(\"Mary had a little lamb\", 4) == [\"little\"]\n@test\
    \ select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n@test select_words(\"\
    simple white space\", 2) == []\n@test select_words(\"Hello world\", 4) == [\"\
    world\"]\n@test select_words(\"Uncle sam\", 3) == [\"Uncle\"]\n@test select_words(\"\
    \", 4) == []\n@test select_words(\" \", 4) == []\n@test select_words(\" abc\"\
    , 4) == []\n \n@test select_words(\"A b c d E f g h I j k l M n o p Q r s t V\
    \ w x y Z\", 1) == [\"b\", \"d\", \"f\", \"h\", \"j\", \"l\", \"n\", \"p\", \"\
    r\", \"t\", \"v\", \"x\", \"z\"]\n@test select_words(\"A b c d E f g h I j k l\
    \ M n o p Q r s t V w x y Z\", 2) == [\"ab\", \"cd\", \"ef\", \"gh\", \"ij\",\
    \ \"kl\", \"mn\", \"op\", \"qr\", \"st\", \"vw\", \"xy\"]\n@test select_words(\"\
    A b c d E f g h I j k l M n o p Q r s t V w x y Z\", 26) == [\"AbCdEfGhIjKlMnOpQrStVwXyZ\"\
    ]\n@test select_words(\"A b c d E f g h I j k l M n o p Q r s t V w x y Z\", 27)\
    \ == []\n \n@test select_words(\"a a b c d e\", 1) == [\"b\", \"d\"]\n@test select_words(\"\
    a a b c d e\", 2) == [\"ab\", \"cd\"]\n@test select_words(\"a a b c d e\", 3)\
    \ ==\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @test not defined\nin expression starting\
    \ at /tmp/tmpcsg1u54_.jl:17\nin expression starting at /tmp/tmpcsg1u54_.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   #Your implementation goes here\n    count = 0\n    result = String[]\n   \
    \ for i in s\n        if isconsonant(i)\n            count += 1\n        else\n\
    \            if count == n\n                push!(result, s[i])\n            end\n\
    \            count = 0\n        end\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\"\
    , 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) ==\
    \ Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\
    \t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4)\
    \ == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"\
    c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3k25blbg.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ isconsonant not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp3k25blbg.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3k25blbg.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3k25blbg.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp3k25blbg.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ isconsonant not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp3k25blbg.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3k25blbg.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3k25blbg.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp3k25blbg.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ isconsonant not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp3k25blbg.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3k25blbg.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3k25blbg.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp3k25blbg.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: isconsonant not\
    \ defined\n  Stacktrac"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3k25blbg.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   words = split(s, \" \")\n    words_with_n_consonants = []\n    consonants\
    \ = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"\
    n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\"]\n    for word\
    \ in words\n        word_consonants = []\n        for letter in word\n       \
    \     if letter in consonants\n                push!(word_consonants, letter)\n\
    \            end\n        end\n        if length(word_consonants) == n\n     \
    \       push!(words_with_n_consonants, word)\n        end\n    end\n    return\
    \ words_with_n_consonants\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8o1u3e4h.jl:35\n  Expression: candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"]\n   Evaluated: String[] == [\"little\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8o1u3e4h.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8o1u3e4h.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp8o1u3e4h.jl:36\n  Expression: candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: String[] == [\"Mary\", \"\
    lamb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8o1u3e4h.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8o1u3e4h.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp8o1u3e4h.jl:38\n  Expression: candidate(\"Hello world\", 4)\
    \ == [\"world\"]\n   Evaluated: String[] == [\"world\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8o1u3e4h.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8o1u3e4h.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp8o1u3e4h.jl:39\n  Expression: candidate(\"Uncle sam\", 3)\
    \ == [\"Uncle\"]\n   Evaluated: String[] == [\"Uncle\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8o1u3e4h.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8o1u3e4h.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp8o1u3e4h.jl:41\n  Expression: candidate(\"a b c d e f\", 1)\
    \ == [\"b\", \""
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8o1u3e4h.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   t = split(s)\n    v = []\n    for i in t\n        if consonants(i) == n\n\
    \            push!(v, i)\n        end\n    end\n    return v\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\"\
    , 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) ==\
    \ Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\
    \t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4)\
    \ == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"\
    c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7eorwl6t.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp7eorwl6t.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7eorwl6t.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7eorwl6t.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp7eorwl6t.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp7eorwl6t.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7eorwl6t.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7eorwl6t.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp7eorwl6t.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp7eorwl6t.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7eorwl6t.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7eorwl6t.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp7eorwl6t.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: consonants not\
    \ defined\n  Stacktrace:\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7eorwl6t.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   string_to_vector(s)\n    number_of_consonants(s)\n    b = []\n    for i in\
    \ 1:length(s)\n        if contains(s[i], ' ')\n            a = number_of_consonants(s[i])\n\
    \            if a == n\n                push!(b,s[i])\n            end\n     \
    \   end\n    end\n    return b\nend\n            \n    \n    \n    \nusing Test\n\
    \n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\"\
    , 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) ==\
    \ Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\
    \t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4)\
    \ == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"\
    c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpk_luqw9p.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ string_to_vector not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpk_luqw9p.jl:14\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpk_luqw9p.jl:36 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk_luqw9p.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpk_luqw9p.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ string_to_vector not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpk_luqw9p.jl:14\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpk_luqw9p.jl:37 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk_luqw9p.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpk_luqw9p.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ string_to_vector not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpk_luqw9p.jl:14\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpk_luqw9p.jl:38 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk_luqw9p.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpk_luqw9p.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: string_to_vector\
    \ not"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk_luqw9p.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   # vec = split(s, \" \")\n    # vec_re = []\n    # for word in vec\n    # \
    \    count = 0\n    #     for c in word\n    #         if c in \"aeiou\"\n   \
    \ #             count += 1\n    #         end\n    #     end\n    #     if count\
    \ == n\n    #         push!(vec_re, word)\n    #     end\n    # end\n    # return\
    \ vec_re\n    filter(x -> count(x, y -> y in \"aeiou\") == n, split(s, \" \"))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphnm1t5be.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  MethodError:\
    \ no method matching iterate(::var\"#2#4\")\n  Closest candidates are:\n    iterate(!Matched::Union{LinRange,\
    \ StepRangeLen}) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:826\n\
    \    iterate(!Matched::Union{LinRange, StepRangeLen}, !Matched::Integer) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:826\n\
    \    iterate(!Matched::T) where T<:Union{Base.KeySet{<:Any, <:Dict}, Base.ValueIterator{<:Dict}}\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/dict.jl:695\n    ...\n  Stacktrace:\n\
    \    [1] _simple_count(pred::SubString{String}, itr::Function, init::Int64)\n\
    \      @ Base ./reduce.jl:1205\n    [2] count(f::SubString{String}, itr::Function;\
    \ init::Int64)\n      @ Base ./reduce.jl:1201\n    [3] count(f::SubString{String},\
    \ itr::Function)\n      @ Base ./reduce.jl:1201\n    [4] (::var\"#1#3\"{Int64})(x::SubString{String})\n\
    \      @ Main /tmp/tmphnm1t5be.jl:28\n    [5] filter(f::var\"#1#3\"{Int64}, a::Vector{SubString{String}})\n\
    \      @ Base ./array.jl:2484\n    [6] select_words(s::String, n::Int64)\n   \
    \   @ Main /tmp/tmphnm1t5be.jl:28\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmphnm1t5be.jl:35 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmphnm1t5be.jl:34\ntest set:\
    \ Error During Test at /tmp/tmphnm1t5be.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  MethodError:\
    \ no method matching iterate(::var\"#2#4\")\n  Closest candidates are:\n    iterate(!Matched::Union{LinRange,\
    \ StepRangeLen}) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:826\n\
    \    iterate(!Matched::Union{LinRange, StepRangeLen}, !Matched::Integer) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:826\n\
    \    iterate(!Matched::T) wher"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphnm1t5be.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   x = split(s)\n    output = []\n    for i in 1:length(x)\n        if count_consonants(x[i])\
    \ == n\n            push!(output, x[i])\n        end\n    end\n    return output\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp0sqawt2w.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp0sqawt2w.jl:17\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp0sqawt2w.jl:28 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0sqawt2w.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp0sqawt2w.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp0sqawt2w.jl:17\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp0sqawt2w.jl:29 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0sqawt2w.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp0sqawt2w.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp0sqawt2w.jl:17\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp0sqawt2w.jl:30 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0sqawt2w.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp0sqawt2w.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: count_consonants\
    \ not"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0sqawt2w.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   # Base cases\n    if isempty(s)\n        return []\n    end\n    # Count the\
    \ number of non-vowels in the string\n    consonants = [str for str in split(s)\
    \ if length(str) == n && count_consonants(str) == n]\n    return consonants\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwsypkbwm.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n    [1] (::var\"#1#2\"{Int64})(str::SubString{String})\n\
    \      @ Main ./none:0\n    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [3] iterate\n      @ ./generator.jl:44 [inlined]\n    [4] grow_to!(dest::Vector{SubString{String}},\
    \ itr::Base.Generator{Base.Iterators.Filter{var\"#1#2\"{Int64}, Vector{SubString{String}}},\
    \ typeof(identity)})\n      @ Base ./array.jl:797\n    [5] collect\n      @ ./array.jl:721\
    \ [inlined]\n    [6] select_words(s::String, n::Int64)\n      @ Main /tmp/tmpwsypkbwm.jl:19\n\
    \    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpwsypkbwm.jl:27 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpwsypkbwm.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpwsypkbwm.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n    [1] (::var\"#1#2\"{Int64})(str::SubString{String})\n\
    \      @ Main ./none:0\n    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [3] iterate\n      @ ./generator.jl:44 [inlined]\n    [4] grow_to!(dest::Vector{SubString{String}},\
    \ itr::Base.Generator{Base.Iterators.Filter{var\"#1#2\"{Int64}, Vector{SubString{String}}},\
    \ typeof(identity)})\n      @ Base ./array.jl:797\n    [5] collect\n      @ ./array.jl:721\
    \ [inlined]\n    [6] select_words(s::String, n::Int64)\n      @ Main /tmp/tmpwsypkbwm.jl:19\n\
    \    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpwsypkbwm.jl:28 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   "
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwsypkbwm.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   words = split(s)\n    words_count = []\n    for word in words\n        c =\
    \ 0\n        for letter in word\n            if letter in \"bcdfghjklmnpqrstvwxyz\"\
    \n                c += 1\n            end\n        end\n        if c == n\n  \
    \          push!(words_count, word)\n        end\n    end\n    return words_count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9x1du5rp.jl:35\n  Expression: candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: [\"lamb\"\
    ] == [\"Mary\", \"lamb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9x1du5rp.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9x1du5rp.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9x1du5rp.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   s = split(s)\n    num = []\n    for i in s\n        push!(num, num_consonants(i))\n\
    \    end\n    s[num .== n]\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbfn7qstc.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ num_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpbfn7qstc.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbfn7qstc.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbfn7qstc.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpbfn7qstc.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ num_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpbfn7qstc.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbfn7qstc.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbfn7qstc.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpbfn7qstc.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ num_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpbfn7qstc.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbfn7qstc.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbfn7qstc.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpbfn7qstc.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: num_consonants\
    \ not defined"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbfn7qstc.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   v_s = split(s)\n    v_res = String[]\n    for word in v_s\n        count =\
    \ 0\n        for l in word\n            if isconsonant(l)\n                count\
    \ += 1\n            end\n        end\n        if count == n\n            push!(v_res,\
    \ word)\n        end\n    end\n    return v_res\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4)\
    \ == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\"\
    , \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxsy5bf_b.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ isconsonant not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpxsy5bf_b.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxsy5bf_b.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxsy5bf_b.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpxsy5bf_b.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ isconsonant not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpxsy5bf_b.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxsy5bf_b.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxsy5bf_b.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpxsy5bf_b.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ isconsonant not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpxsy5bf_b.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxsy5bf_b.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxsy5bf_b.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpxsy5bf_b.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: isconsonant not\
    \ defined\n  Stacktrac"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxsy5bf_b.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   word_list = split(s, \" \")\n    consonant_list = []\n    num_list = []\n\
    \    final_list = []\n    for i = 1:length(word_list)\n        consonant_list\
    \ = []\n        word = word_list[i]\n        for i = 1:length(word)\n        \
    \    if lowercase(word[i]) in ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z']\n                push!(consonant_list,\
    \ 1)\n            end\n        end\n        push!(num_list, length(consonant_list))\n\
    \    end\n    for i = 1:length(num_list)\n        if num_list[i] == n\n      \
    \      push!(final_list, word_list[i])\n        end\n    end\n    return final_list\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp2ppgtc8.jl:41\n  Expression: candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: [\"lamb\"\
    ] == [\"Mary\", \"lamb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp2ppgtc8.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp2ppgtc8.jl:39\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp2ppgtc8.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   if s == \"\"\n        return []\n    end\n    # Split the string\n    words\
    \ = split(s)\n    consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z']\n    word_with_n_consonants\
    \ = []\n    for word in words\n        num_consonants = 0\n        for letter\
    \ in word\n            if letter in consonants\n                num_consonants\
    \ += 1\n            end\n        end\n        if num_consonants == n\n       \
    \     push!(word_with_n_consonants, word)\n        end\n    end\n    return word_with_n_consonants\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpoem54i_i.jl:40\n  Expression: candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: [\"lamb\"\
    ] == [\"Mary\", \"lamb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoem54i_i.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoem54i_i.jl:38\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoem54i_i.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   if n==0\n        return []\n    end\n    words = split(s)\n    indices = findall(x->sum(ismatch.(r\"\
    [bcdfghjklmnpqrstvwxyz]\", collect(x)))==n, words)\n    return words[indices]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpsl46i241.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ ismatch not defined\n  Stacktrace:\n    [1] (::var\"#1#2\"{Int64})(x::SubString{String})\n\
    \      @ Main /tmp/tmpsl46i241.jl:18\n    [2] _broadcast_getindex_evalf\n    \
    \  @ ./broadcast.jl:670 [inlined]\n    [3] _broadcast_getindex\n      @ ./broadcast.jl:643\
    \ [inlined]\n    [4] getindex\n      @ ./broadcast.jl:597 [inlined]\n    [5] copy\n\
    \      @ ./broadcast.jl:899 [inlined]\n    [6] materialize(bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},\
    \ Nothing, var\"#1#2\"{Int64}, Tuple{Vector{SubString{String}}}})\n      @ Base.Broadcast\
    \ ./broadcast.jl:860\n    [7] findall(testf::Function, A::Vector{SubString{String}})\n\
    \      @ Base ./array.jl:2257\n    [8] select_words(s::String, n::Int64)\n   \
    \   @ Main /tmp/tmpsl46i241.jl:18\n    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpsl46i241.jl:26 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpsl46i241.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpsl46i241.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ ismatch not defined\n  Stacktrace:\n    [1] (::var\"#1#2\"{Int64})(x::SubString{String})\n\
    \      @ Main /tmp/tmpsl46i241.jl:18\n    [2] _broadcast_getindex_evalf\n    \
    \  @ ./broadcast.jl:670 [inlined]\n    [3] _broadcast_getindex\n      @ ./broadcast.jl:643\
    \ [inlined]\n    [4] getindex\n      @ ./broadcast.jl:597 [inlined]\n    [5] copy\n\
    \      @ ./broadcast.jl:899 [inlined]\n    [6] materialize(bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},\
    \ Nothing, var\"#1#2\"{Int64}, Tuple{Vector{SubString{String}}}})\n      @ Base.Broadcast\
    \ ./broadcast.jl:860\n    [7] findall(testf::Function, A::Vector{SubString{String}})\n\
    \      @ Base ./array.jl:2257\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsl46i241.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   l = split(s, \" \")\n    r = []\n    v = Vector{String}(0)\n    for i in l\n\
    \        vowels = 0\n        consonants = 0\n        for j in i\n            if\
    \ j == 'a' || j == 'e' || j == 'i' || j == 'o' || j == 'u' || j == 'A' || j ==\
    \ 'E' || j == 'I' || j == 'O' || j == 'U'\n                vowels += 1\n     \
    \       else\n                consonants += 1\n            end\n        end\n\
    \        if consonants == n\n            push!(r, i)\n        end\n    end\n \
    \   return r\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpr0upop1z.jl:38\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  MethodError:\
    \ no method matching Vector{String}(::Int64)\n  Closest candidates are:\n    Vector{T}()\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/base/boot.jl:476\n    Array{T,\
    \ N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n\
    \    Array{T, N}(!Matched::BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n\
    \    ...\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n     @ Main\
    \ /tmp/tmpr0upop1z.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr0upop1z.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr0upop1z.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpr0upop1z.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  MethodError:\
    \ no method matching Vector{String}(::Int64)\n  Closest candidates are:\n    Vector{T}()\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/base/boot.jl:476\n    Array{T,\
    \ N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n\
    \    Array{T, N}(!Matched::BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n\
    \    ...\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n     @ Main\
    \ /tmp/tmpr0upop1z.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr0upop1z.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr0upop1z.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpr0upo"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr0upop1z.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   a = split(s)\n    b = collect(Set(a))\n    c = []\n    for i in b\n      \
    \  consonants = n_consonants(i)\n        if consonants == n\n            push!(c,\
    \ i)\n        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\n\
    candidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) ==\
    \ [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\"\
    , \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpdykpourj.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ n_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpdykpourj.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdykpourj.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdykpourj.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpdykpourj.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ n_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpdykpourj.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdykpourj.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdykpourj.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpdykpourj.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ n_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpdykpourj.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdykpourj.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdykpourj.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpdykpourj.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: n_consonants\
    \ not defined\n  Stack"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdykpourj.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   # your code here\n    words = split(s)\n    res = []\n    nconsonants(word)\
    \ = length(filter(ch->!(ch in \"aeiouAEIOU\"), word))\n    for word in words\n\
    \        if(nconsonants(word) == n)\n            push!(res, word)\n        end\n\
    \    end\n    return res\nend\n \nusing Test\n\n@testset begin\n\ncandidate =\
    \ select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"\
    ])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\
    \t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"\
    Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"\
    Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"\
    a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   words = split(s, r\"\\s+\")\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n\
    \    words_with_n_consonants = []\n    for word in words\n        consonant_count\
    \ = 0\n        for char in word\n            if char in consonants\n         \
    \       consonant_count += 1\n            end\n        end\n        if consonant_count\
    \ == n\n            push!(words_with_n_consonants, word)\n        end\n    end\n\
    \    return words_with_n_consonants\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"\
    ])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\
    \t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"\
    Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"\
    Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"\
    a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5lwyylk6.jl:36\n  Expression: candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: [\"lamb\"\
    ] == [\"Mary\", \"lamb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5lwyylk6.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5lwyylk6.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5lwyylk6.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   split_words = split(s, \" \")\n    output = String[]\n    for item in split_words\n\
    \        consonants = 0\n        if length(item) == 1\n            continue\n\
    \        end\n        for letter in item\n            if letter != \"a\" && letter\
    \ != \"e\" && letter != \"i\" && letter != \"o\" && letter != \"u\"\n        \
    \        consonants += 1\n            end\n        end\n        if consonants\
    \ == n\n            push!(output, item)\n        end\n    end\n    return output\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvdyr2z2z.jl:37\n  Expression: candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"]\n   Evaluated: [\"Mary\", \"lamb\"\
    ] == [\"little\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvdyr2z2z.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvdyr2z2z.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpvdyr2z2z.jl:38\n  Expression: candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: [\"had\"] == [\"Mary\", \"\
    lamb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvdyr2z2z.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvdyr2z2z.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpvdyr2z2z.jl:40\n  Expression: candidate(\"Hello world\", 4)\
    \ == [\"world\"]\n   Evaluated: String[] == [\"world\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvdyr2z2z.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvdyr2z2z.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpvdyr2z2z.jl:41\n  Expression: candidate(\"Uncle sam\", 3)\
    \ == [\"Uncle\"]\n   Evaluated: [\"sam\"] == [\"Uncle\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvdyr2z2z.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvdyr2z2z.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpvdyr2z2z.jl:43\n  Expression: candidate(\"a b c d e f\", 1)\
    \ == ["
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvdyr2z2z.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   \n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"] \n    space = \" \"\n \
    \   res = split(s, space)\n    #println(res)\n    f = findall(r\"$n\", s)\n  \
    \  println(f)\n    #n = length(f)\n    words = []\n    for i in s\n        if\
    \ i in vowels\n            n -= 1\n        end\n        n = n\n    end\n    println(n)\n\
    \    #for i in s\n     #   if i in vowels\n      #      c += 1\n       # end\n\
    \    #end\n    return words\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"\
    ])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\
    \t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"\
    Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"\
    Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"\
    a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "UnitRange{Int64}[]\n4\ntest set: Test Failed at /tmp/tmpd9xju_so.jl:42\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n   Evaluated:\
    \ String[] == [\"little\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd9xju_so.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd9xju_so.jl:41\nUnitRange{Int64}[]\n\
    3\ntest set: Test Failed at /tmp/tmpd9xju_so.jl:43\n  Expression: candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: String[] ==\
    \ [\"Mary\", \"lamb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd9xju_so.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd9xju_so.jl:41\nUnitRange{Int64}[]\n\
    2\nUnitRange{Int64}[]\n4\ntest set: Test Failed at /tmp/tmpd9xju_so.jl:45\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n   Evaluated: String[] == [\"\
    world\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd9xju_so.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd9xju_so.jl:41\nUnitRange{Int64}[]\n\
    3\ntest set: Test Failed at /tmp/tmpd9xju_so.jl:46\n  Expression: candidate(\"\
    Uncle sam\", 3) == [\"Uncle\"]\n   Evaluated: String[] == [\"Uncle\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd9xju_so.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd9xju_so.j"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd9xju_so.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   s_vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"]\n    s_split = split(s)\n\
    \    s_words = []\n    for word in s_split\n        if length(word) == 1 && word\
    \ in s_vowels\n            next\n        end\n        vowels = 0\n        for\
    \ letter in word\n            if letter in s_vowels\n                vowels +=\
    \ 1\n            end\n        end\n        if length(word) - vowels == n\n   \
    \         push!(s_words, word)\n        end\n    end\n    return s_words\nend\n\
    using Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpyb22a7fh.jl:38\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ next not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpyb22a7fh.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyb22a7fh.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyb22a7fh.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpyb22a7fh.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ next not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpyb22a7fh.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyb22a7fh.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyb22a7fh.jl:37\ntest set:\
    \ Test Failed at /tmp/tmpyb22a7fh.jl:41\n  Expression: candidate(\"Hello world\"\
    , 4) == [\"world\"]\n   Evaluated: String[] == [\"world\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyb22a7fh.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyb22a7fh.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpyb22a7fh.jl:42\n  Expression: candidate(\"Uncle sam\", 3)\
    \ == [\"Uncle\"]\n   Evaluated: [\"sam\"] == [\"Uncle\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyb22a7fh.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 2 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyb22a7fh.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    words = split(s, \" \")\n\
    \    num_consonants = [count_notin(w, vowels) for w in words]\n    return words[findall(num_consonants\
    \ .== n)]\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t\
    @test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzrruaxkg.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_notin not defined\n  Stacktrace:\n   [1] (::var\"#1#2\"{Vector{String}})(w::SubString{String})\n\
    \     @ Main ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n  \
    \ [3] collect(itr::Base.Generator{Vector{SubString{String}}, var\"#1#2\"{Vector{String}}})\n\
    \     @ Base ./array.jl:724\n   [4] select_words(s::String, n::Int64)\n     @\
    \ Main /tmp/tmpzrruaxkg.jl:16\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpzrruaxkg.jl:24 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpzrruaxkg.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpzrruaxkg.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_notin not defined\n  Stacktrace:\n   [1] (::var\"#1#2\"{Vector{String}})(w::SubString{String})\n\
    \     @ Main ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n  \
    \ [3] collect(itr::Base.Generator{Vector{SubString{String}}, var\"#1#2\"{Vector{String}}})\n\
    \     @ Base ./array.jl:724\n   [4] select_words(s::String, n::Int64)\n     @\
    \ Main /tmp/tmpzrruaxkg.jl:16\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpzrruaxkg.jl:25 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpzrruaxkg.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpzrruaxkg.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_notin not defined\n  Stacktrace:\n   [1] (::var\"#1#2\"{Vector{String}})(w::SubString{String})\n\
    \     @ Main ./none:0\n   [2] iterate\n     @ ./gener"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzrruaxkg.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   length(filter(x -> length(match(r\"[^aeiouAEIOU\\s]\", x)) == n, split(s)))\
    \ == 0 ?\n        [] : filter(x -> length(match(r\"[^aeiouAEIOU\\s]\", x)) ==\
    \ n, split(s))\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmplfxvdomp.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  MethodError:\
    \ no method matching length(::Nothing)\n  Closest candidates are:\n    length(!Matched::Union{Base.KeySet,\
    \ Base.ValueIterator}) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:58\n\
    \    length(!Matched::Union{LinearAlgebra.Adjoint{T, S}, LinearAlgebra.Transpose{T,\
    \ S}} where {T, S}) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/adjtrans.jl:171\n\
    \    length(!Matched::Base.InvasiveLinkedListSynchronized) at /shared/centos7/julia/1.7.3/share/julia/base/task.jl:604\n\
    \    ...\n  Stacktrace:\n   [1] (::var\"#1#3\"{Int64})(x::SubString{String})\n\
    \     @ Main /tmp/tmplfxvdomp.jl:14\n   [2] filter(f::var\"#1#3\"{Int64}, a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] select_words(s::String, n::Int64)\n     @\
    \ Main /tmp/tmplfxvdomp.jl:14\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmplfxvdomp.jl:22 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmplfxvdomp.jl:21\ntest set:\
    \ Error During Test at /tmp/tmplfxvdomp.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  MethodError:\
    \ no method matching length(::Nothing)\n  Closest candidates are:\n    length(!Matched::Union{Base.KeySet,\
    \ Base.ValueIterator}) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:58\n\
    \    length(!Matched::Union{LinearAlgebra.Adjoint{T, S}, LinearAlgebra.Transpose{T,\
    \ S}} where {T, S}) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/adjtrans.jl:171\n\
    \    length(!Matched::Base.InvasiveLinkedListSynchronized) at /shared/centos7/julia/1.7.3/share/julia/base/task.jl:604\n\
    \    ...\n  Stacktrace:\n   [1] (::var\"#1#3\"{Int64})(x::SubString{String})\n\
    \     @ Main /tmp/tmplfxvdomp.jl:14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 2 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplfxvdomp.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   words = split(s)\n    ret = String[]\n    for word in words\n        if count_consonants(word)\
    \ == n\n            push!(ret, word)\n        end\n    end\n    return ret\nend\n\
    using Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4n4ydxc3.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp4n4ydxc3.jl:17\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp4n4ydxc3.jl:28 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4n4ydxc3.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp4n4ydxc3.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp4n4ydxc3.jl:17\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp4n4ydxc3.jl:29 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4n4ydxc3.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp4n4ydxc3.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp4n4ydxc3.jl:17\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp4n4ydxc3.jl:30 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4n4ydxc3.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp4n4ydxc3.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: count_consonants\
    \ not"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4n4ydxc3.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   vowels = \"aeiou\"\n    words = split(s)\n    results = []\n    for word in\
    \ words\n        n_consonants = sum(!(vowels.contains(char) for char in word))\n\
    \        if n_consonants == n\n            push!(results, word)\n        end\n\
    \    end\n    return results\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"\
    ])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\
    \t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"\
    Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"\
    Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"\
    a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpw_prddgg.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  MethodError:\
    \ no method matching !(::Base.Generator{SubString{String}, var\"#1#2\"{String}})\n\
    \  Closest candidates are:\n    !(!Matched::Function) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:1117\n\
    \    !(!Matched::Bool) at /shared/centos7/julia/1.7.3/share/julia/base/bool.jl:35\n\
    \    !(!Matched::Missing) at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:101\n\
    \  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n     @ Main /tmp/tmpw_prddgg.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw_prddgg.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw_prddgg.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpw_prddgg.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  MethodError:\
    \ no method matching !(::Base.Generator{SubString{String}, var\"#1#2\"{String}})\n\
    \  Closest candidates are:\n    !(!Matched::Function) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:1117\n\
    \    !(!Matched::Bool) at /shared/centos7/julia/1.7.3/share/julia/base/bool.jl:35\n\
    \    !(!Matched::Missing) at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:101\n\
    \  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n     @ Main /tmp/tmpw_prddgg.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw_prddgg.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw_prddgg.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpw_prddgg.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == V"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw_prddgg.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   if n==0 return split(s) end\n    s=split(s)\n    c=[]\n    for i in 1:length(s)\n\
    \        con=0\n        for j in 1:length(s[i])\n            for k in 1:length(vowel)\n\
    \                if s[i][j] in vowel[k] \n                    con+=1\n       \
    \             break\n                end\n            end\n        end\n     \
    \   if con == n\n            push!(c,s[i])\n        end\n    end\n    return c\n\
    end\nselect_words(\"Mary had a little lamb\", 4)\nusing Test\n\n@testset begin\n\
    \ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4)\
    \ == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\"\
    , \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: vowel not defined\nStacktrace:\n [1] select_words(s::String,\
    \ n::Int64)\n   @ Main /tmp/tmpwis2ggj6.jl:20\n [2] top-level scope\n   @ /tmp/tmpwis2ggj6.jl:33\n\
    in expression starting at /tmp/tmpwis2ggj6.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   words = []\n    for word in split(s)\n        if count_consonants(word) ==\
    \ n\n            push!(words, word)\n        end\n    end\n    return words\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphzvvjx6k.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmphzvvjx6k.jl:16\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmphzvvjx6k.jl:27 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphzvvjx6k.jl:26\ntest set:\
    \ Error During Test at /tmp/tmphzvvjx6k.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmphzvvjx6k.jl:16\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmphzvvjx6k.jl:28 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphzvvjx6k.jl:26\ntest set:\
    \ Error During Test at /tmp/tmphzvvjx6k.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmphzvvjx6k.jl:16\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmphzvvjx6k.jl:29 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphzvvjx6k.jl:26\ntest set:\
    \ Error During Test at /tmp/tmphzvvjx6k.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: count_consonants\
    \ not"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphzvvjx6k.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   string_count = 0\n    consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"\
    h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"\
    v\", \"w\", \"x\", \"z\"]\n    words = split(s, \" \")\n    result = []\n    for\
    \ i in 1:length(words)\n        string_count = 0\n        for j in 1:length(words[i])\n\
    \            for k in 1:length(consonants)\n                if words[i][j] ==\
    \ consonants[k]\n                    string_count += 1\n                end\n\
    \            end\n        end\n        if string_count == n\n            push!(result,\
    \ words[i])\n        end\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\"\
    , 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"\
    Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp471r70b2.jl:38\n  Expression: candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"]\n   Evaluated: String[] == [\"little\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp471r70b2.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp471r70b2.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp471r70b2.jl:39\n  Expression: candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: String[] == [\"Mary\", \"\
    lamb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp471r70b2.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp471r70b2.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp471r70b2.jl:41\n  Expression: candidate(\"Hello world\", 4)\
    \ == [\"world\"]\n   Evaluated: String[] == [\"world\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp471r70b2.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp471r70b2.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp471r70b2.jl:42\n  Expression: candidate(\"Uncle sam\", 3)\
    \ == [\"Uncle\"]\n   Evaluated: String[] == [\"Uncle\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp471r70b2.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp471r70b2.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp471r70b2.jl:44\n  Expression: candidate(\"a b c d e f\", 1)\
    \ == [\"b\", \""
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp471r70b2.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   word_array = split(s, r\"\\s+\") # Convert string to an array\n    word_array_1\
    \ = findall(r\"[A-Za-z]+\", s) # Drop empty strings\n    consonant_array = findall(r\"\
    [^AEIOUaeiou]\", word_array_1) # Filter words using consonants regular expression\n\
    \    return consonant_array # Returns the array\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4)\
    \ == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\"\
    , \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpclad4p6a.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  MethodError:\
    \ no method matching findall(::Regex, ::Vector{UnitRange{Int64}})\n  Closest candidates\
    \ are:\n    findall(::Union{AbstractPattern, AbstractString}, !Matched::AbstractString;\
    \ overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n    findall(!Matched::Base.Fix2{typeof(in)},\
    \ ::AbstractArray) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2426\n\
    \    findall(!Matched::Function, ::AbstractArray) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2257\n\
    \    ...\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n     @ Main\
    \ /tmp/tmpclad4p6a.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpclad4p6a.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpclad4p6a.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpclad4p6a.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  MethodError:\
    \ no method matching findall(::Regex, ::Vector{UnitRange{Int64}})\n  Closest candidates\
    \ are:\n    findall(::Union{AbstractPattern, AbstractString}, !Matched::AbstractString;\
    \ overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n    findall(!Matched::Base.Fix2{typeof(in)},\
    \ ::AbstractArray) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2426\n\
    \    findall(!Matched::Function, ::AbstractArray) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2257\n\
    \    ...\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n     @ Main\
    \ /tmp/tmpclad4p6a.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpclad4p6a.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/s"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpclad4p6a.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   # Your code here\n    words = split(s)\n    selected_words = []\n    for i\
    \ in 1:length(words)\n        if count_consonants(words[i]) == n\n           \
    \ push!(selected_words, words[i])\n        end\n    end\n    return selected_words\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmplu6h2ygu.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmplu6h2ygu.jl:18\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmplu6h2ygu.jl:29 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplu6h2ygu.jl:28\ntest set:\
    \ Error During Test at /tmp/tmplu6h2ygu.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmplu6h2ygu.jl:18\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmplu6h2ygu.jl:30 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplu6h2ygu.jl:28\ntest set:\
    \ Error During Test at /tmp/tmplu6h2ygu.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmplu6h2ygu.jl:18\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmplu6h2ygu.jl:31 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplu6h2ygu.jl:28\ntest set:\
    \ Error During Test at /tmp/tmplu6h2ygu.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: count_consonants\
    \ not"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplu6h2ygu.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   words = split(s)\n    total = []\n    for word in words\n        consonants\
    \ = sum(vowels .!= word)\n        if consonants == n\n            push!(total,\
    \ word)\n        end\n    end\n    return total\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4)\
    \ == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\"\
    , \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpt4fz36nf.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ vowels not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpt4fz36nf.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt4fz36nf.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt4fz36nf.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpt4fz36nf.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ vowels not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpt4fz36nf.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt4fz36nf.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt4fz36nf.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpt4fz36nf.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ vowels not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpt4fz36nf.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt4fz36nf.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt4fz36nf.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpt4fz36nf.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: vowels not defined\n\
    \  Stacktrace:\n   [1] select_wor"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt4fz36nf.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   s = lowercase(s)\n    words = split(s, \" \")\n    result = []\n    for word\
    \ in words\n        count = 0\n        for x in word\n            if x \u2209\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\"]\n                count += 1\n          \
    \  end\n        end\n        if count == n\n            push!(result, word)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) ==\
    \ [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\"\
    , \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi1kkyyz_.jl:35\n  Expression: candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"]\n   Evaluated: [\"mary\", \"lamb\"\
    ] == [\"little\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi1kkyyz_.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi1kkyyz_.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpi1kkyyz_.jl:36\n  Expression: candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: [\"had\"] == [\"Mary\", \"\
    lamb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi1kkyyz_.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi1kkyyz_.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpi1kkyyz_.jl:38\n  Expression: candidate(\"Hello world\", 4)\
    \ == [\"world\"]\n   Evaluated: String[] == [\"world\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi1kkyyz_.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi1kkyyz_.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpi1kkyyz_.jl:39\n  Expression: candidate(\"Uncle sam\", 3)\
    \ == [\"Uncle\"]\n   Evaluated: [\"sam\"] == [\"Uncle\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi1kkyyz_.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi1kkyyz_.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpi1kkyyz_.jl:41\n  Expression: candidate(\"a b c d e f\", 1)\
    \ == ["
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi1kkyyz_.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   #Select words from string s that contain exactly n consonants\n    #Create\
    \ empty vector for storing words\n    words = []\n    #For every word in string\
    \ s\n    for i = 1:length(s)\n        #If the word contains exactly n consonants\n\
    \        if count_consonants(s[i]) == n\n            #Add the word to the vector\n\
    \            push!(words, s[i])\n        end\n    end\n    #Return the vector\n\
    \    return words\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpi__3voz5.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpi__3voz5.jl:20\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpi__3voz5.jl:33 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi__3voz5.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpi__3voz5.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpi__3voz5.jl:20\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpi__3voz5.jl:34 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi__3voz5.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpi__3voz5.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpi__3voz5.jl:20\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpi__3voz5.jl:35 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi__3voz5.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpi__3voz5.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: count_consonants\
    \ not"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi__3voz5.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   vowels = ['a', 'e', 'i', 'o', 'u']\n    words = split(s, \" \")\n    indices\
    \ = findall(x -> count(vowels, x) == n, words)\n    return words[indices]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpl7alx5qn.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  MethodError:\
    \ objects of type Vector{Char} are not callable\n  Use square brackets [] for\
    \ indexing an Array.\n  Stacktrace:\n    [1] _simple_count(pred::Vector{Char},\
    \ itr::SubString{String}, init::Int64)\n      @ Base ./reduce.jl:1206\n    [2]\
    \ #count#271\n      @ ./reduce.jl:1201 [inlined]\n    [3] count\n      @ ./reduce.jl:1201\
    \ [inlined]\n    [4] #1\n      @ /tmp/tmpl7alx5qn.jl:16 [inlined]\n    [5] _broadcast_getindex_evalf\n\
    \      @ ./broadcast.jl:670 [inlined]\n    [6] _broadcast_getindex\n      @ ./broadcast.jl:643\
    \ [inlined]\n    [7] getindex\n      @ ./broadcast.jl:597 [inlined]\n    [8] macro\
    \ expansion\n      @ ./broadcast.jl:961 [inlined]\n    [9] macro expansion\n \
    \     @ ./simdloop.jl:77 [inlined]\n   [10] copyto!\n      @ ./broadcast.jl:960\
    \ [inlined]\n   [11] copyto!\n      @ ./broadcast.jl:971 [inlined]\n   [12] copyto!\n\
    \      @ ./broadcast.jl:913 [inlined]\n   [13] copy\n      @ ./broadcast.jl:885\
    \ [inlined]\n   [14] materialize(bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},\
    \ Nothing, var\"#1#2\"{Int64, Vector{Char}}, Tuple{Vector{SubString{String}}}})\n\
    \      @ Base.Broadcast ./broadcast.jl:860\n   [15] findall(testf::Function, A::Vector{SubString{String}})\n\
    \      @ Base ./array.jl:2257\n   [16] select_words(s::String, n::Int64)\n   \
    \   @ Main /tmp/tmpl7alx5qn.jl:16\n   [17] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [18] macro expansion\n      @ /tmp/tmpl7alx5qn.jl:24 [inlined]\n\
    \   [19] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [20] top-level scope\n      @ /tmp/tmpl7alx5qn.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpl7alx5qn.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  MethodError:\
    \ objects of type Vector{Char} are not callable\n  Use square brackets [] for\
    \ indexing an Array.\n  Stacktrace"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl7alx5qn.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   words = split(s)\n    result = []\n    for word in words\n        if length(filter(c\
    \ -> isconsonant(c), split(word))) == n\n            push!(result, word)\n   \
    \     end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"\
    ])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\
    \t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"\
    Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"\
    Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"\
    a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjb8skwp7.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ isconsonant not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(c::SubString{String})\n\
    \     @ Main /tmp/tmpjb8skwp7.jl:17\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] select_words(s::String, n::Int64)\n     @\
    \ Main /tmp/tmpjb8skwp7.jl:17\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpjb8skwp7.jl:28 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpjb8skwp7.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpjb8skwp7.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ isconsonant not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(c::SubString{String})\n\
    \     @ Main /tmp/tmpjb8skwp7.jl:17\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] select_words(s::String, n::Int64)\n     @\
    \ Main /tmp/tmpjb8skwp7.jl:17\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpjb8skwp7.jl:29 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpjb8skwp7.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpjb8skwp7.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ isconsonant not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(c::SubString{String})\n\
    \     @ Main /tmp/tmpjb8skwp7.jl:17\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] select_words(s::String, n::Int64)\n     @\
    \ Main /tmp/tmpjb8skwp7.jl:17\n   [4] macro expansion\n     @ /shar"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjb8skwp7.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   words = split(s, \" \")\n    words_with_n_consonants = filter(x -> length(filter(a\
    \ -> !in(\"aeiou\", a),\n                                                    \
    \ collect(x))) == n,\n                                     words)\n    return\
    \ words_with_n_consonants\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyi318jp8.jl:25\n  Expression: candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"]\n   Evaluated: [\"Mary\", \"lamb\"\
    ] == [\"little\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyi318jp8.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyi318jp8.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpyi318jp8.jl:26\n  Expression: candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: [\"had\"] == [\"Mary\", \"\
    lamb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyi318jp8.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyi318jp8.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpyi318jp8.jl:28\n  Expression: candidate(\"Hello world\", 4)\
    \ == [\"world\"]\n   Evaluated: String[] == [\"world\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyi318jp8.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyi318jp8.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpyi318jp8.jl:29\n  Expression: candidate(\"Uncle sam\", 3)\
    \ == [\"Uncle\"]\n   Evaluated: [\"sam\"] == [\"Uncle\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyi318jp8.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyi318jp8.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpyi318jp8.jl:31\n  Expression: candidate(\"a b c d e f\", 1)\
    \ == ["
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyi318jp8.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   words = split(s)\n    words = filter(w -> length(regexp(r\"\\w\", w))==n,\
    \ words)\n    return words\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpn7u1s9wb.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ regexp not defined\n  Stacktrace:\n   [1] (::var\"#1#2\"{Int64})(w::SubString{String})\n\
    \     @ Main /tmp/tmpn7u1s9wb.jl:15\n   [2] filter(f::var\"#1#2\"{Int64}, a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] select_words(s::String, n::Int64)\n     @\
    \ Main /tmp/tmpn7u1s9wb.jl:15\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpn7u1s9wb.jl:23 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpn7u1s9wb.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpn7u1s9wb.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ regexp not defined\n  Stacktrace:\n   [1] (::var\"#1#2\"{Int64})(w::SubString{String})\n\
    \     @ Main /tmp/tmpn7u1s9wb.jl:15\n   [2] filter(f::var\"#1#2\"{Int64}, a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] select_words(s::String, n::Int64)\n     @\
    \ Main /tmp/tmpn7u1s9wb.jl:15\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpn7u1s9wb.jl:24 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpn7u1s9wb.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpn7u1s9wb.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ regexp not defined\n  Stacktrace:\n   [1] (::var\"#1#2\"{Int64})(w::SubString{String})\n\
    \     @ Main /tmp/tmpn7u1s9wb.jl:15\n   [2] filter(f::var\"#1#2\"{Int64}, a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] select_words(s::String, n::Int64)\n     @\
    \ Main /tmp/tmpn7u1s9wb.jl:15\n   [4] m"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn7u1s9wb.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   # your code goes here\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjli_2z57.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{String}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n     @ Main\
    \ /tmp/tmpjli_2z57.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjli_2z57.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjli_2z57.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpjli_2z57.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{String}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n     @ Main\
    \ /tmp/tmpjli_2z57.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/jul"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjli_2z57.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   ret = String[]\n    nc = 0\n    con = [\"b\", \"c\", \"d\", \"f\", \"g\",\
    \ \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"v\", \"w\", \"x\", \"z\"]\n    for word in split(s)\n        nc = 0\n    \
    \    for l in word\n            if l in con\n                nc += 1\n       \
    \     end\n        end\n        if nc == n\n            append!(ret, word)\n \
    \       end\n    end\n    return ret\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"\
    ])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\
    \t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"\
    Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"\
    Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"\
    a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz_4hnk31.jl:35\n  Expression: candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"]\n   Evaluated: String[] == [\"little\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz_4hnk31.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz_4hnk31.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpz_4hnk31.jl:36\n  Expression: candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: String[] == [\"Mary\", \"\
    lamb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz_4hnk31.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz_4hnk31.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpz_4hnk31.jl:38\n  Expression: candidate(\"Hello world\", 4)\
    \ == [\"world\"]\n   Evaluated: String[] == [\"world\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz_4hnk31.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz_4hnk31.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpz_4hnk31.jl:39\n  Expression: candidate(\"Uncle sam\", 3)\
    \ == [\"Uncle\"]\n   Evaluated: String[] == [\"Uncle\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz_4hnk31.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz_4hnk31.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpz_4hnk31.jl:41\n  Expression: candidate(\"a b c d e f\", 1)\
    \ == [\"b\", \""
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz_4hnk31.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   words = split(s)\n    vowels = \"aeiou\"\n    result = []\n    for word in\
    \ words\n        word_split = collect(word)\n        cons = 0\n        for letter\
    \ in word_split\n            if !(letter in vowels)\n                cons = cons\
    \ + 1\n            end\n        end\n        if cons == n\n            push!(result,\
    \ word)\n        end\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\"\
    , 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"\
    Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7oi0g4bi.jl:40\n  Expression: candidate(\"\
    Uncle sam\", 3) == [\"Uncle\"]\n   Evaluated: String[] == [\"Uncle\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7oi0g4bi.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7oi0g4bi.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7oi0g4bi.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   #your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp16p0p0cg.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{String}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n     @ Main\
    \ /tmp/tmp16p0p0cg.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp16p0p0cg.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp16p0p0cg.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp16p0p0cg.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{String}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n     @ Main\
    \ /tmp/tmp16p0p0cg.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/jul"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp16p0p0cg.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   words = split(s)\n    result = []\n    consonants = [\"b\", \"c\", \"d\",\
    \ \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"v\", \"w\", \"x\", \"z\"]\n    for word in words\n        num\
    \ = 0\n        for letter in word\n            if letter in consonants\n     \
    \           num += 1\n            end\n        end\n        if num == n\n    \
    \        push!(result, word)\n        end\n    end\n    return result\nend\nselect_words(\"\
    Mary had a little lamb\", 4)\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpciqdrr9p.jl:36\n  Expression: candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"]\n   Evaluated: String[] == [\"little\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpciqdrr9p.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpciqdrr9p.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpciqdrr9p.jl:37\n  Expression: candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: String[] == [\"Mary\", \"\
    lamb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpciqdrr9p.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpciqdrr9p.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpciqdrr9p.jl:39\n  Expression: candidate(\"Hello world\", 4)\
    \ == [\"world\"]\n   Evaluated: String[] == [\"world\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpciqdrr9p.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpciqdrr9p.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpciqdrr9p.jl:40\n  Expression: candidate(\"Uncle sam\", 3)\
    \ == [\"Uncle\"]\n   Evaluated: String[] == [\"Uncle\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpciqdrr9p.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpciqdrr9p.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpciqdrr9p.jl:42\n  Expression: candidate(\"a b c d e f\", 1)\
    \ == [\"b\", \""
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpciqdrr9p.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   words = split(s)\n    num_consonants(w::String) = length(findall(x -> x in\
    \ \"bcdfghjklmnpqrstvwxyz\", w))\n    consonant_words = filter(x -> num_consonants(x)\
    \ == n, words)\n    return consonant_words\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4)\
    \ == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\"\
    , \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmxk5cl_u.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  MethodError:\
    \ no method matching (::var\"#num_consonants#3\")(::SubString{String})\n  Closest\
    \ candidates are:\n    (::var\"#num_consonants#3\")(!Matched::String) at /tmp/tmpmxk5cl_u.jl:15\n\
    \  Stacktrace:\n   [1] (::var\"#2#5\"{Int64, var\"#num_consonants#3\"})(x::SubString{String})\n\
    \     @ Main /tmp/tmpmxk5cl_u.jl:16\n   [2] filter(f::var\"#2#5\"{Int64, var\"\
    #num_consonants#3\"}, a::Vector{SubString{String}})\n     @ Base ./array.jl:2484\n\
    \   [3] select_words(s::String, n::Int64)\n     @ Main /tmp/tmpmxk5cl_u.jl:16\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpmxk5cl_u.jl:24 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpmxk5cl_u.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpmxk5cl_u.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  MethodError:\
    \ no method matching (::var\"#num_consonants#3\")(::SubString{String})\n  Closest\
    \ candidates are:\n    (::var\"#num_consonants#3\")(!Matched::String) at /tmp/tmpmxk5cl_u.jl:15\n\
    \  Stacktrace:\n   [1] (::var\"#2#5\"{Int64, var\"#num_consonants#3\"})(x::SubString{String})\n\
    \     @ Main /tmp/tmpmxk5cl_u.jl:16\n   [2] filter(f::var\"#2#5\"{Int64, var\"\
    #num_consonants#3\"}, a::Vector{SubString{String}})\n     @ Base ./array.jl:2484\n\
    \   [3] select_words(s::String, n::Int64)\n     @ Main /tmp/tmpmxk5cl_u.jl:16\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpmxk5cl_u.jl:25 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpmxk5cl_u.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpmxk5cl_u.jl:26\n  Test threw exc"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmxk5cl_u.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   is_not_vowel(c::Char) = !(c in ['a', 'e', 'i', 'o', 'u'])\n    words = split(s)\n\
    \    word_length = length.(words)\n    word_num_consonants = count(is_not_vowel,\
    \ words)\n    is_word_with_exactly_n_consonants = (word_length .== word_num_consonants)\
    \ .& (word_num_consonants .== n)\n    return words[is_word_with_exactly_n_consonants]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp59n2nquw.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  MethodError:\
    \ no method matching (::var\"#is_not_vowel#1\")(::SubString{String})\n  Closest\
    \ candidates are:\n    (::var\"#is_not_vowel#1\")(!Matched::Char) at /tmp/tmp59n2nquw.jl:14\n\
    \  Stacktrace:\n   [1] _simple_count\n     @ ./reduce.jl:1206 [inlined]\n   [2]\
    \ _count\n     @ ./reducedim.jl:407 [inlined]\n   [3] #count#735\n     @ ./reducedim.jl:405\
    \ [inlined]\n   [4] count\n     @ ./reducedim.jl:405 [inlined]\n   [5] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp59n2nquw.jl:17\n   [6] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [7] macro expansion\n     @ /tmp/tmp59n2nquw.jl:26 [inlined]\n   [8] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp59n2nquw.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp59n2nquw.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  MethodError:\
    \ no method matching (::var\"#is_not_vowel#1\")(::SubString{String})\n  Closest\
    \ candidates are:\n    (::var\"#is_not_vowel#1\")(!Matched::Char) at /tmp/tmp59n2nquw.jl:14\n\
    \  Stacktrace:\n   [1] _simple_count\n     @ ./reduce.jl:1206 [inlined]\n   [2]\
    \ _count\n     @ ./reducedim.jl:407 [inlined]\n   [3] #count#735\n     @ ./reducedim.jl:405\
    \ [inlined]\n   [4] count\n     @ ./reducedim.jl:405 [inlined]\n   [5] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp59n2nquw.jl:17\n   [6] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [7] macro expansion\n     @ /tmp/tmp59n2nquw.jl:27 [inlined]\n   [8] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp59n2nquw.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp59n2nquw.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white spa"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp59n2nquw.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   words = split(s, \" \")\n    counts = [count(w) for w in words]\n    return\
    \ words[counts .== n]\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpr9rg_j5b.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  TypeError:\
    \ non-boolean (Char) used in boolean context\n  Stacktrace:\n    [1] _simple_count(pred::typeof(identity),\
    \ itr::SubString{String}, init::Int64)\n      @ Base ./reduce.jl:1206\n    [2]\
    \ #count#271\n      @ ./reduce.jl:1201 [inlined]\n    [3] #count#270\n      @\
    \ ./reduce.jl:1199 [inlined]\n    [4] count\n      @ ./reduce.jl:1199 [inlined]\n\
    \    [5] #1\n      @ ./none:0 [inlined]\n    [6] iterate\n      @ ./generator.jl:47\
    \ [inlined]\n    [7] collect(itr::Base.Generator{Vector{SubString{String}}, var\"\
    #1#2\"})\n      @ Base ./array.jl:724\n    [8] select_words(s::String, n::Int64)\n\
    \      @ Main /tmp/tmpr9rg_j5b.jl:15\n    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpr9rg_j5b.jl:23 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpr9rg_j5b.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpr9rg_j5b.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  TypeError:\
    \ non-boolean (Char) used in boolean context\n  Stacktrace:\n    [1] _simple_count(pred::typeof(identity),\
    \ itr::SubString{String}, init::Int64)\n      @ Base ./reduce.jl:1206\n    [2]\
    \ #count#271\n      @ ./reduce.jl:1201 [inlined]\n    [3] #count#270\n      @\
    \ ./reduce.jl:1199 [inlined]\n    [4] count\n      @ ./reduce.jl:1199 [inlined]\n\
    \    [5] #1\n      @ ./none:0 [inlined]\n    [6] iterate\n      @ ./generator.jl:47\
    \ [inlined]\n    [7] collect(itr::Base.Generator{Vector{SubString{String}}, var\"\
    #1#2\"})\n      @ Base ./array.jl:724\n    [8] select_words(s::String, n::Int64)\n\
    \      @ Main /tmp/tmpr9rg_j5b.jl:15\n    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpr9rg_j5b.jl:24 [inlined]\n\
    \ "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr9rg_j5b.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   words = split(s)\n    words_n_consonants = []\n    for word in words\n   \
    \     if count_consonants(word) == n\n            push!(words_n_consonants, word)\n\
    \        end\n    end\n    return words_n_consonants\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\"\
    , 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"\
    Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpyi0t7dyv.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpyi0t7dyv.jl:17\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpyi0t7dyv.jl:28 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyi0t7dyv.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpyi0t7dyv.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpyi0t7dyv.jl:17\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpyi0t7dyv.jl:29 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyi0t7dyv.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpyi0t7dyv.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpyi0t7dyv.jl:17\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpyi0t7dyv.jl:30 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyi0t7dyv.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpyi0t7dyv.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: count_consonants\
    \ not"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyi0t7dyv.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   s = split(s)\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    c = 0\n    words\
    \ = []\n    for j in 1:length(s)\n        for i in s[j]\n            if i in consonants\n\
    \                c += 1\n            end\n        end\n        if c == n\n   \
    \         push!(words, s[j])\n        end\n        c = 0\n    end\n    return\
    \ words\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp437k_4xr.jl:15\nin expression\
    \ starting at /tmp/tmp437k_4xr.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   words = split(s)\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    res = String[]\n\
    \    for word in words\n        num_consonants = length(consonants)\n        for\
    \ letter in word\n            if letter in consonants\n                num_consonants\
    \ -= 1\n            end\n        end\n        if num_consonants == n\n       \
    \     push!(res, word)\n        end\n    end\n    return res\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\"\
    , 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) ==\
    \ Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\
    \t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4)\
    \ == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"\
    c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgj6u370r.jl:35\n  Expression: candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"]\n   Evaluated: String[] == [\"little\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgj6u370r.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgj6u370r.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpgj6u370r.jl:36\n  Expression: candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: String[] == [\"Mary\", \"\
    lamb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgj6u370r.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgj6u370r.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpgj6u370r.jl:38\n  Expression: candidate(\"Hello world\", 4)\
    \ == [\"world\"]\n   Evaluated: String[] == [\"world\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgj6u370r.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgj6u370r.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpgj6u370r.jl:39\n  Expression: candidate(\"Uncle sam\", 3)\
    \ == [\"Uncle\"]\n   Evaluated: String[] == [\"Uncle\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgj6u370r.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgj6u370r.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpgj6u370r.jl:41\n  Expression: candidate(\"a b c d e f\", 1)\
    \ == [\"b\", \""
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgj6u370r.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   # TODO\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpyn_e5son.jl:16\nin expression starting at /tmp/tmpyn_e5son.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   s = split(s)\n    j = 0\n    for i in 1:length(s)\n        if length(filter(x->x\
    \ in [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"], split(s[i])))\
    \ == length(split(s[i])) - n\n            s[j+1] = s[i]\n            j += 1\n\
    \        end\n    end\n    return s[1:j]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) ==\
    \ [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\"\
    , \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4gi80tz2.jl:29\n  Expression: candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"]\n   Evaluated: String[] == [\"little\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4gi80tz2.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4gi80tz2.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp4gi80tz2.jl:30\n  Expression: candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: String[] == [\"Mary\", \"\
    lamb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4gi80tz2.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4gi80tz2.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp4gi80tz2.jl:32\n  Expression: candidate(\"Hello world\", 4)\
    \ == [\"world\"]\n   Evaluated: String[] == [\"world\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4gi80tz2.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4gi80tz2.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp4gi80tz2.jl:33\n  Expression: candidate(\"Uncle sam\", 3)\
    \ == [\"Uncle\"]\n   Evaluated: String[] == [\"Uncle\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4gi80tz2.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4gi80tz2.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4gi80tz2.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   function count_consonants(word::String)::Int64\n        vowels = \"aeiouAEIOU\"\
    \n        consonants = Set(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\")\n \
    \       remove = Set(\" \")\n        consonants = copy(consonants)\n        remove\
    \ = copy(remove)\n        for c in word\n            if c in consonants\n    \
    \            consonants = delete!(consonants, c)\n            elseif c in remove\n\
    \                remove = delete!(remove, c)\n            end\n        end\n \
    \       return length(consonants)\n    end\n    words = split(s, r\"\\s+\")\n\
    \    filtered_words = words[(count_consonants.(words)) .== n]\n    return filtered_words\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp68fwl1vq.jl:38\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  MethodError:\
    \ no method matching (::var\"#count_consonants#1\")(::SubString{String})\n  Closest\
    \ candidates are:\n    (::var\"#count_consonants#1\")(!Matched::String) at /tmp/tmp68fwl1vq.jl:14\n\
    \  Stacktrace:\n    [1] _broadcast_getindex_evalf\n      @ ./broadcast.jl:670\
    \ [inlined]\n    [2] _broadcast_getindex\n      @ ./broadcast.jl:643 [inlined]\n\
    \    [3] _getindex\n      @ ./broadcast.jl:666 [inlined]\n    [4] _broadcast_getindex\n\
    \      @ ./broadcast.jl:642 [inlined]\n    [5] getindex\n      @ ./broadcast.jl:597\
    \ [inlined]\n    [6] copy\n      @ ./broadcast.jl:899 [inlined]\n    [7] materialize\n\
    \      @ ./broadcast.jl:860 [inlined]\n    [8] select_words(s::String, n::Int64)\n\
    \      @ Main /tmp/tmp68fwl1vq.jl:30\n    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp68fwl1vq.jl:38 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp68fwl1vq.jl:37\ntest set:\
    \ Error During Test at /tmp/tmp68fwl1vq.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  MethodError:\
    \ no method matching (::var\"#count_consonants#1\")(::SubString{String})\n  Closest\
    \ candidates are:\n    (::var\"#count_consonants#1\")(!Matched::String) at /tmp/tmp68fwl1vq.jl:14\n\
    \  Stacktrace:\n    [1] _broadcast_getindex_evalf\n      @ ./broadcast.jl:670\
    \ [inlined]\n    [2] _broadcast_getindex\n      @ ./broadcast.jl:643 [inlined]\n\
    \    [3] _getindex\n      @ ./broadcast.jl:666 [inlined]\n    [4] _broadcast_getindex\n\
    \      @ ./broadcast.jl:642 [inlined]\n    [5] getindex\n      @ ./broadcast.jl:597\
    \ [inlined]\n    [6] copy\n      @ ./broadcast.jl:899 [inlined]\n    [7] materialize\n\
    \      @ ./broadcast.jl:860 [inlined]\n    [8] select_words(s::String, n::Int64)\n\
    \      @ Main /tmp/tmp68fwl1vq.jl:30\n    [9] mac"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp68fwl1vq.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   a = split(s, \" \")\n    output = []\n    for word in a\n        if num_consonants(word)\
    \ == n\n            push!(output, word)\n        end\n    end\n    return output\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpo_ybn05l.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ num_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpo_ybn05l.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo_ybn05l.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo_ybn05l.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpo_ybn05l.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ num_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpo_ybn05l.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo_ybn05l.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo_ybn05l.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpo_ybn05l.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ num_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpo_ybn05l.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo_ybn05l.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo_ybn05l.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpo_ybn05l.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: num_consonants\
    \ not defined"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo_ybn05l.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   A = split(s)\n    B = []\n    C = []\n    for j = 1:length(A)\n        B =\
    \ []\n        for i = 1:length(A[j])\n            if !(A[j][i] in ['a','e','i','o','u','A','E','I','O','U','\
    \ '])\n                push!(B,A[j][i])\n            end\n        end\n      \
    \  if length(B) == n\n            push!(C,A[j])\n        end\n    end\n    return\
    \ C\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   # your code goes here\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_prczlg0.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{String}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n     @ Main\
    \ /tmp/tmp_prczlg0.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_prczlg0.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_prczlg0.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp_prczlg0.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{String}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n     @ Main\
    \ /tmp/tmp_prczlg0.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/jul"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_prczlg0.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   output = []\n    for word in split(s)\n        consonants = 0\n        for\
    \ letter in word\n            if letter in [\"b\", \"c\", \"d\", \"f\", \"g\"\
    , \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"v\", \"w\", \"x\", \"z\"]\n                consonants += 1\n            end\n\
    \        end\n        if consonants == n\n            push!(output, word)\n  \
    \      end\n    end\n    return output\nend\nusing Test\n\n@testset begin\n\n\
    candidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) ==\
    \ [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\"\
    , \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7_bxh59x.jl:33\n  Expression: candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"]\n   Evaluated: String[] == [\"little\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7_bxh59x.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7_bxh59x.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp7_bxh59x.jl:34\n  Expression: candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: String[] == [\"Mary\", \"\
    lamb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7_bxh59x.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7_bxh59x.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp7_bxh59x.jl:36\n  Expression: candidate(\"Hello world\", 4)\
    \ == [\"world\"]\n   Evaluated: String[] == [\"world\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7_bxh59x.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7_bxh59x.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp7_bxh59x.jl:37\n  Expression: candidate(\"Uncle sam\", 3)\
    \ == [\"Uncle\"]\n   Evaluated: String[] == [\"Uncle\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7_bxh59x.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7_bxh59x.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp7_bxh59x.jl:39\n  Expression: candidate(\"a b c d e f\", 1)\
    \ == [\"b\", \""
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7_bxh59x.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   \n    const consonants = \"bcdfghjklmnpqrstvwxyz\"\n    # initialize an empty\
    \ array\n    words = []\n    # replace space with dot\n    replaced = replace(s,\
    \ \" \" => \".\")\n    # split the string into array\n    splitted = split(replaced,\
    \ \".\")\n    # iterate over the splitted array\n    for i in splitted\n     \
    \   if(count(consonants, i) == n)\n            # if the number of consonants is\
    \ equal to the number n\n            # push the word into the array\n        \
    \    push!(words, i)\n        end\n    end\n    return words\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\"\
    , 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) ==\
    \ Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\
    \t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4)\
    \ == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"\
    c\", \"d\", \"f\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unsupported `const` declaration on local variable\
    \ around /tmp/tmphups8f9s.jl:15\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphups8f9s.jl:1\n\
    in expression starting at /tmp/tmphups8f9s.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   n_cons = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"\
    m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\"]\n \
    \   words = split(s)\n    result = []\n    for word in words\n        if length(filter(x\
    \ -> x in n_cons, word)) == n\n            push!(result, word)\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"\
    ])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\
    \t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"\
    Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"\
    Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"\
    a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpczjy2zod.jl:29\n  Expression: candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"]\n   Evaluated: String[] == [\"little\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpczjy2zod.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpczjy2zod.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpczjy2zod.jl:30\n  Expression: candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: String[] == [\"Mary\", \"\
    lamb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpczjy2zod.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpczjy2zod.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpczjy2zod.jl:32\n  Expression: candidate(\"Hello world\", 4)\
    \ == [\"world\"]\n   Evaluated: String[] == [\"world\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpczjy2zod.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpczjy2zod.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpczjy2zod.jl:33\n  Expression: candidate(\"Uncle sam\", 3)\
    \ == [\"Uncle\"]\n   Evaluated: String[] == [\"Uncle\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpczjy2zod.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpczjy2zod.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpczjy2zod.jl:35\n  Expression: candidate(\"a b c d e f\", 1)\
    \ == [\"b\", \""
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpczjy2zod.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   splitted_s = split(s)\n    selected_words = []\n    for word in splitted_s\n\
    \        if contains_exactly_n_consonants(word, n)\n            push!(selected_words,\
    \ word)\n        end\n    end\n    return selected_words\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little\
    \ lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3)\
    \ == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9_si9ll7.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ contains_exactly_n_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp9_si9ll7.jl:17\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp9_si9ll7.jl:28 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9_si9ll7.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp9_si9ll7.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ contains_exactly_n_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp9_si9ll7.jl:17\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp9_si9ll7.jl:29 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9_si9ll7.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp9_si9ll7.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ contains_exactly_n_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp9_si9ll7.jl:17\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp9_si9ll7.jl:30 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9_si9ll7.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp9_si9ll7.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\""
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9_si9ll7.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   words = split(s)\n    selected_words = []\n    for i in 1:length(words)\n\
    \        nconsonants = get_nconsonants(words[i])\n        if nconsonants == n\n\
    \            push!(selected_words, words[i])\n        end\n    end\n    return\
    \ selected_words\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9cvvc5il.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ get_nconsonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp9cvvc5il.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9cvvc5il.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9cvvc5il.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp9cvvc5il.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ get_nconsonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp9cvvc5il.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9cvvc5il.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9cvvc5il.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp9cvvc5il.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ get_nconsonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp9cvvc5il.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9cvvc5il.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9cvvc5il.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp9cvvc5il.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: get_nconsonants\
    \ not def"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9cvvc5il.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    s_split = split(s)\n   \
    \ out = Vector{String}()\n    for i in 1:length(s_split)\n        count = 0\n\
    \        for j in 1:length(s_split[i])\n            if !(s_split[i][j] in vowels)\n\
    \                count += 1\n            end\n        end\n        if count ==\
    \ n\n            push!(out, s_split[i])\n        end\n    end\n    return out\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2g1xdsaa.jl:35\n  Expression: candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"]\n   Evaluated: [\"Mary\", \"lamb\"\
    ] == [\"little\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2g1xdsaa.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2g1xdsaa.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp2g1xdsaa.jl:36\n  Expression: candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: [\"had\"] == [\"Mary\", \"\
    lamb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2g1xdsaa.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2g1xdsaa.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp2g1xdsaa.jl:38\n  Expression: candidate(\"Hello world\", 4)\
    \ == [\"world\"]\n   Evaluated: String[] == [\"world\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2g1xdsaa.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2g1xdsaa.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp2g1xdsaa.jl:39\n  Expression: candidate(\"Uncle sam\", 3)\
    \ == [\"Uncle\"]\n   Evaluated: [\"sam\"] == [\"Uncle\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2g1xdsaa.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2g1xdsaa.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp2g1xdsaa.jl:41\n  Expression: candidate(\"a b c d e f\", 1)\
    \ == ["
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2g1xdsaa.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   words = split(s)\n    consonants = [c for c in \"bcdfghjklmnpqrstvwxyz\" if\
    \ c != \"a\" && c != \"e\" && c != \"i\" && c != \"o\" && c != \"u\"]\n    if\
    \ n == 1\n        consonants = consonants[1]\n    end\n    matched_words = []\n\
    \    for word in words\n        if count(consonants, word) == n\n            push!(matched_words,\
    \ word)\n        end\n    end\n    return matched_words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\"\
    , 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"\
    Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgm1srj4i.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  MethodError:\
    \ objects of type Vector{Char} are not callable\n  Use square brackets [] for\
    \ indexing an Array.\n  Stacktrace:\n   [1] _simple_count(pred::Vector{Char},\
    \ itr::SubString{String}, init::Int64)\n     @ Base ./reduce.jl:1206\n   [2] #count#271\n\
    \     @ ./reduce.jl:1201 [inlined]\n   [3] count\n     @ ./reduce.jl:1201 [inlined]\n\
    \   [4] select_words(s::String, n::Int64)\n     @ Main /tmp/tmpgm1srj4i.jl:21\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpgm1srj4i.jl:32 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpgm1srj4i.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpgm1srj4i.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  MethodError:\
    \ objects of type Vector{Char} are not callable\n  Use square brackets [] for\
    \ indexing an Array.\n  Stacktrace:\n   [1] _simple_count(pred::Vector{Char},\
    \ itr::SubString{String}, init::Int64)\n     @ Base ./reduce.jl:1206\n   [2] #count#271\n\
    \     @ ./reduce.jl:1201 [inlined]\n   [3] count\n     @ ./reduce.jl:1201 [inlined]\n\
    \   [4] select_words(s::String, n::Int64)\n     @ Main /tmp/tmpgm1srj4i.jl:21\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpgm1srj4i.jl:33 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpgm1srj4i.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpgm1srj4i.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  MethodError: objects\
    \ of type Vector{Char} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgm1srj4i.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   words = split(s)\n    words_filtered = String[]\n    for word in words\n \
    \       consonants = 0\n        for letter in word\n            if !(letter in\
    \ ['a', 'e', 'i', 'o', 'u', 'y'])\n                consonants += 1\n         \
    \   end\n        end\n        if consonants == n\n            push!(words_filtered,\
    \ word)\n        end\n    end\n    return words_filtered\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little\
    \ lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3)\
    \ == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkmljj1wh.jl:35\n  Expression: candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: [\"lamb\"\
    ] == [\"Mary\", \"lamb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkmljj1wh.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkmljj1wh.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpkmljj1wh.jl:38\n  Expression: candidate(\"Uncle sam\", 3)\
    \ == [\"Uncle\"]\n   Evaluated: String[] == [\"Uncle\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkmljj1wh.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkmljj1wh.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkmljj1wh.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   str = split(s)\n    dict = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"z\"]\n    vec = []\n    i = 0\n    while i < length(str)\n        word\
    \ = str[i]\n        counter = 0\n        j = 0\n        while j < length(word)\n\
    \            if word[j] in dict\n                counter += 1\n            end\n\
    \            j += 1\n        end\n        if counter == n\n            push!(vec,\
    \ word)\n        end\n        i += 1\n    end\n    return vec\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\"\
    , 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) ==\
    \ Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\
    \t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4)\
    \ == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"\
    c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpv6hhsj7a.jl:40\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  BoundsError:\
    \ attempt to access 5-element Vector{SubString{String}} at index [0]\n  Stacktrace:\n\
    \   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpv6hhsj7a.jl:19\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpv6hhsj7a.jl:40 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpv6hhsj7a.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpv6hhsj7a.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  BoundsError:\
    \ attempt to access 5-element Vector{SubString{String}} at index [0]\n  Stacktrace:\n\
    \   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpv6hhsj7a.jl:19\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpv6hhsj7a.jl:41 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpv6hhsj7a.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpv6hhsj7a.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  BoundsError: attempt\
    \ to access 3-element Vector{SubString{String}} at index [0]\n  Stacktrace:\n\
    \   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpv6hhsj7a.jl:19\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpv6hhsj7a.jl:42 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Te"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv6hhsj7a.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   # First get all words\n    words = split(s)\n    # Then define a function\
    \ that gets all consonents from a word\n    function get_consonents(w::String)::Vector{Char}\n\
    \        letters = split(w)\n        consonents = []\n        for letter in letters\n\
    \            if letter in [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"\
    x\", \"z\"]\n                push!(consonents, letter)\n            end\n    \
    \    end\n        return consonents\n    end\n    # Then apply the above function\
    \ to each word\n    words_with_consonents = [get_consonents(w) for w in words]\n\
    \    # Then find the words that have exactly n consonents\n    words_with_n_consonents\
    \ = [w for w in words_with_consonents if length(w) == n]\n    # Then get the indizes\
    \ of the words that contain exactly n consonents\n    indizes_of_words_with_n_consonents\
    \ = [findall(words_with_consonents .== word_with_n_consonents)[1] for word_with_n_consonents\
    \ in words_with_n_consonents]\n    # Then select the words from the string s at\
    \ the indices\n    return [words[i] for i in indizes_of_words_with_n_consonents]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp992fv_vm.jl:41\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  MethodError:\
    \ no method matching (::var\"#get_consonents#5\")(::SubString{String})\n  Closest\
    \ candidates are:\n    (::var\"#get_consonents#5\")(!Matched::String) at /tmp/tmp992fv_vm.jl:17\n\
    \  Stacktrace:\n   [1] (::var\"#1#6\"{var\"#get_consonents#5\"})(w::SubString{String})\n\
    \     @ Main ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n  \
    \ [3] collect\n     @ ./array.jl:724 [inlined]\n   [4] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp992fv_vm.jl:28\n   [5] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [6] macro expansion\n     @ /tmp/tmp992fv_vm.jl:41 [inlined]\n   [7] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp992fv_vm.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp992fv_vm.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  MethodError:\
    \ no method matching (::var\"#get_consonents#5\")(::SubString{String})\n  Closest\
    \ candidates are:\n    (::var\"#get_consonents#5\")(!Matched::String) at /tmp/tmp992fv_vm.jl:17\n\
    \  Stacktrace:\n   [1] (::var\"#1#6\"{var\"#get_consonents#5\"})(w::SubString{String})\n\
    \     @ Main ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n  \
    \ [3] collect\n     @ ./array.jl:724 [inlined]\n   [4] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp992fv_vm.jl:28\n   [5] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [6] macro expansion\n     @ /tmp/tmp992fv_vm.jl:42 [inlined]\n   [7] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp992fv_vm.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp992fv_vm.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  Me"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp992fv_vm.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   \n    \"\"\" find the number of consonants in a string\"\"\"\n    consonants(w::String)\
    \ = sum( isconsonant(c) for c in w)\n    \n    \"\"\" true if c is a consonant\
    \ \"\"\"\n    isconsonant(c::Char) = ( c \u2208 'bcdfghjklmnpqrstvwxyz' )\n  \
    \  \n    \"\"\" split s by whitespace and count the consonants in each word \n\
    \        then return a list of words with n consonants \"\"\"\n    return [ c[1]\
    \ for c in countmap(consonants,split(s)) if c[2] == n ]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\"\
    , 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"\
    Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp4xxxcvwd.jl:19\nin expression\
    \ starting at /tmp/tmp4xxxcvwd.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   # your code here\n    return []\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"\
    ])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\
    \t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"\
    Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"\
    Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"\
    a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm2l5n536.jl:22\n  Expression: candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"]\n   Evaluated: String[] == [\"little\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm2l5n536.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm2l5n536.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpm2l5n536.jl:23\n  Expression: candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: String[] == [\"Mary\", \"\
    lamb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm2l5n536.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm2l5n536.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpm2l5n536.jl:25\n  Expression: candidate(\"Hello world\", 4)\
    \ == [\"world\"]\n   Evaluated: String[] == [\"world\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm2l5n536.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm2l5n536.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpm2l5n536.jl:26\n  Expression: candidate(\"Uncle sam\", 3)\
    \ == [\"Uncle\"]\n   Evaluated: String[] == [\"Uncle\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm2l5n536.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm2l5n536.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpm2l5n536.jl:28\n  Expression: candidate(\"a b c d e f\", 1)\
    \ == [\"b\", \""
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm2l5n536.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   words = split(s)\n    words = filter(w -> sum(w .== \"a\"::String) + sum(w\
    \ .== \"e\"::String) + \n        sum(w .== \"i\"::String) + sum(w .== \"o\"::String)\
    \ + sum(w .== \"u\"::String) == n, words)\n    return words\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\"\
    , 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) ==\
    \ Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\
    \t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4)\
    \ == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"\
    c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxd4g719o.jl:24\n  Expression: candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"]\n   Evaluated: String[] == [\"little\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxd4g719o.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxd4g719o.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpxd4g719o.jl:25\n  Expression: candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: String[] == [\"Mary\", \"\
    lamb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxd4g719o.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxd4g719o.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpxd4g719o.jl:27\n  Expression: candidate(\"Hello world\", 4)\
    \ == [\"world\"]\n   Evaluated: String[] == [\"world\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxd4g719o.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxd4g719o.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpxd4g719o.jl:28\n  Expression: candidate(\"Uncle sam\", 3)\
    \ == [\"Uncle\"]\n   Evaluated: String[] == [\"Uncle\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxd4g719o.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxd4g719o.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpxd4g719o.jl:30\n  Expression: candidate(\"a b c d e f\", 1)\
    \ == [\"b\", \""
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxd4g719o.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   # Your code here\n    # return [\"\"] \nend\n \n \nusing Test\n\n@testset\
    \ begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\"\
    , 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"\
    Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmppqjkvtfk.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{String}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n     @ Main\
    \ /tmp/tmppqjkvtfk.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppqjkvtfk.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppqjkvtfk.jl:23\ntest set:\
    \ Error During Test at /tmp/tmppqjkvtfk.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{String}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n     @ Main\
    \ /tmp/tmppqjkvtfk.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/jul"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppqjkvtfk.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   words = split(s)\n    consonants = count_consonants.(words)\n    idx = findall(c\
    \ -> c == n, consonants)\n    return words[idx]\nend\nselect_words(\"Mary had\
    \ a little lamb\", 4)\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: count_consonants not defined\nStacktrace:\n\
    \ [1] select_words(s::String, n::Int64)\n   @ Main /tmp/tmpqjeoqvm1.jl:15\n [2]\
    \ top-level scope\n   @ /tmp/tmpqjeoqvm1.jl:19\nin expression starting at /tmp/tmpqjeoqvm1.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a list of all words from string s that\
    \ contain exactly \n    n consonants, in order these words appear in the string\
    \ s.\n    If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    \    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n \
    \   # Your code here\n    L = split(s, r\"\\s+\")\n    arr = filter(x -> length(x)\
    \ == n, map(x -> x[regexp(r\"[^aeiou]\", x)], L))\n    return arr\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary\
    \ had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\"\
    , 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"\
    ])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\"\
    , 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\",\
    \ \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpl0mbcozi.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ regexp not defined\n  Stacktrace:\n    [1] (::var\"#2#4\")(x::SubString{String})\n\
    \      @ Main /tmp/tmpl0mbcozi.jl:16\n    [2] iterate\n      @ ./generator.jl:47\
    \ [inlined]\n    [3] _collect(c::Vector{SubString{String}}, itr::Base.Generator{Vector{SubString{String}},\
    \ var\"#2#4\"}, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})\n      @\
    \ Base ./array.jl:744\n    [4] collect_similar\n      @ ./array.jl:653 [inlined]\n\
    \    [5] map\n      @ ./abstractarray.jl:2867 [inlined]\n    [6] select_words(s::String,\
    \ n::Int64)\n      @ Main /tmp/tmpl0mbcozi.jl:16\n    [7] macro expansion\n  \
    \    @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpl0mbcozi.jl:24 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpl0mbcozi.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpl0mbcozi.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ regexp not defined\n  Stacktrace:\n    [1] (::var\"#2#4\")(x::SubString{String})\n\
    \      @ Main /tmp/tmpl0mbcozi.jl:16\n    [2] iterate\n      @ ./generator.jl:47\
    \ [inlined]\n    [3] _collect(c::Vector{SubString{String}}, itr::Base.Generator{Vector{SubString{String}},\
    \ var\"#2#4\"}, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})\n      @\
    \ Base ./array.jl:744\n    [4] collect_similar\n      @ ./array.jl:653 [inlined]\n\
    \    [5] map\n      @ ./abstractarray.jl:2867 [inlined]\n    [6] select_words(s::String,\
    \ n::Int64)\n      @ Main /tmp/tmpl0mbcozi.jl:16\n    [7] macro expansion\n  \
    \    @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpl0mbcozi.jl:25 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ ["
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl0mbcozi.jl:21\n"
  exit_code: 1
  status: SyntaxError
