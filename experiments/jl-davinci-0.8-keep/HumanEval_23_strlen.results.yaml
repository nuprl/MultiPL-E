name: HumanEval_23_strlen
language: jl
results:
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    l = 0\n    for i in 1:length(string)\n        l += 1\n    end\n    return\
    \ l\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    return length(string)\nend\n#strlen(\"hello\")\nstrlen(\"hello world\")\n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    len = 0\n    for i in string\n        len += 1\n    end\n    return len\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    n = 0\n    for c in string\n        n += 1\n    end\n    return n\nend\n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    return length(string)\nend\n \n \n \n \nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    return length(string)\nend\n```\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph1faxzbs.jl:10\nin expression starting at\
    \ /tmp/tmph1faxzbs.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    length = 0\n    for i in eachindex(string)\n        length += 1\n    end\n\
    \    return length\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    l = 0\n    for c = string\n        l += 1\n    end\n    return l\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\
    \t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\"\n        return 0\n    else\n        return 1 + strlen(string[2:end])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    string |> length\nend\n```\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1d3q5th4.jl:10\nin expression starting at\
    \ /tmp/tmp1d3q5th4.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    i = 0\n    for c = string\n        i += 1\n    end\n    return i\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\
    \t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    return nchar(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpto4t50_x.jl:15\\n  Test threw\
    \ exception\\n  Expression: candidate(\"\") == 0\\n  UndefVarError: nchar not\
    \ defined\\n  Stacktrace:\\n   [1] strlen(string::String)\\n     @ Main /tmp/tmpto4t50_x.jl:8\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpto4t50_x.jl:15 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpto4t50_x.jl:14\\ntest set:\
    \ Error During Test at /tmp/tmpto4t50_x.jl:16\\n  Test threw exception\\n  Expression:\
    \ candidate(\"x\") == 1\\n  UndefVarError: nchar not defined\\n  Stacktrace:\\\
    n   [1] strlen(string::String)\\n     @ Main /tmp/tmpto4t50_x.jl:8\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpto4t50_x.jl:16 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpto4t50_x.jl:14\\ntest set:\
    \ Error During Test at /tmp/tmpto4t50_x.jl:17\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdasnakj\") == 9\\n  UndefVarError: nchar not defined\\n  Stacktrace:\\\
    n   [1] strlen(string::String)\\n     @ Main /tmp/tmpto4t50_x.jl:8\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpto4t50_x.jl:17 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpto4t50_x.jl:14\\nTest Summary:\
    \ | Error  Total\\ntest set      |     3      3\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    l = 0\n    for i in eachindex(string)\n        l = l + 1\n    end\n    return\
    \ l\nend\nprintln(strlen(\"abc\"))\nprintln(strlen(\"\"))\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "3\n0\nTest Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    counter = 0\n    for char in string\n        counter += 1\n    end\n    return\
    \ counter\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    strlen = length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    n = 0\n    for c in string\n        n += 1\n    end\n    return n\nend\n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    n = 0\n    for c in string\n        n += 1\n    end\n    return n\nend\n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    strlen(i::Int64) = i == length(string) ? i : strlen(i+1)\n    strlen(1)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    count = 0\n    for i in string\n        count += 1\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    # we could also return length(string)\n    #\n    n = 0\n    for c in string\n\
    \        n += 1\n    end\n    return n\nend\nstrlen(\"\")\nstrlen(\"abc\")\nusing\
    \ Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\
    \t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    L = 0\n    for letter in string\n        L += 1\n    end\n    return L\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    len = 0\n    for c in string\n        len += 1\n    end\n    return len\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    str = 0\n    for i in string\n        str += 1\n    end\n    return str\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    s = 0\n    for i = 1:length(string)\n        s = s + 1\n    end\n    return\
    \ s\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \     return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    string = reinterpret(Ptr{Void}, string)\n    len = 0\n    while string[len]\
    \ != 0\n        len += 1\n    end\n    return len\nend\n```\nThis function works\
    \ for all strings but is not very efficient for large strings.\nusing Test\n\n\
    @testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmax1pe85.jl:15\nin expression starting at\
    \ /tmp/tmpmax1pe85.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    for i in eachindex(string)\n        i = i\n    end\n    return i + 1\nend\n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  stdout: "b'test set: Error During Test at /tmp/tmpstyozpz3.jl:18\\n  Test threw\
    \ exception\\n  Expression: candidate(\"\") == 0\\n  UndefVarError: i not defined\\\
    n  Stacktrace:\\n   [1] strlen(string::String)\\n     @ Main /tmp/tmpstyozpz3.jl:11\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpstyozpz3.jl:18 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpstyozpz3.jl:17\\ntest set:\
    \ Error During Test at /tmp/tmpstyozpz3.jl:19\\n  Test threw exception\\n  Expression:\
    \ candidate(\"x\") == 1\\n  UndefVarError: i not defined\\n  Stacktrace:\\n  \
    \ [1] strlen(string::String)\\n     @ Main /tmp/tmpstyozpz3.jl:11\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpstyozpz3.jl:19 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpstyozpz3.jl:17\\ntest set:\
    \ Error During Test at /tmp/tmpstyozpz3.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdasnakj\") == 9\\n  UndefVarError: i not defined\\n  Stacktrace:\\\
    n   [1] strlen(string::String)\\n     @ Main /tmp/tmpstyozpz3.jl:11\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpstyozpz3.jl:20 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpstyozpz3.jl:17\\nTest Summary:\
    \ | Error  Total\\ntest set      |     3      3\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\"\n        return 0\n    else\n        return 1 + strlen(string[2:end])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \     s = 0\n     for c in string\n        s += 1\n     end\n     return s\nend\n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    N = size(string,1)\n    return N\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpjsjgziwd.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate(\"\") == 0\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    i::Int64 = 0\n    for c in string\n        i += 1\n    end\n    return i\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    string_length = 0\n    for i in string\n        string_length += 1\n    end\n\
    \    return string_length\nend\n\"\"\" Return a copy of the string, with leading\
    \ and trailing\n    whitespace removed.\n    It doesn't modify the original string.\n\
    \    >>> strtrim('   spacious   ')\n    'spacious'\n    >>> strtrim('hello  ')\n\
    \    'hello'\n    >>> strtrim('  hello')\n    'hello'\n    >>> strtrim('  hello\
    \   ')\n    'hello'\n    >>> strtrim('  hello world  ')\n    'hello world'\n \
    \   >>> strtrim('')\n    ''\n    >>> strtrim('    ')\n    ''\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\
    \t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp2b1dgg0w.jl:14\nin expression starting at /tmp/tmp2b1dgg0w.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    l = 0\n    for x in string\n        l += 1\n    end\n    return l\nend\n\
    \    \n    \n\"\"\" Return a reversed string \n    >>> reverse(\"abc\")\n    \"\
    cba\"\n    >>> reverse(\"\")\n    \"\"\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\"\
    ) == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp25ld89uq.jl:16\nin expression starting at /tmp/tmp25ld89uq.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    n = 0\n    for c in string\n        n += 1\n    end\n    return n\nend\n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    # length of string\n    n = length(string)\n    n\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    strlen = length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    n = 0\n    for c in string\n        n += 1\n    end\n    return n\nend\n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    size = 0\n    for i in eachindex(string)\n        size += 1\n    end\n  \
    \  return size\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    return size(string, 1)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp559hrn2o.jl:15\\n  Test threw\
    \ exception\\n  Expression: candidate(\"\") == 0\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    return size(string, 1)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    #get length of given string\n    strlen = length(string)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    return size(string, 1)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: "b'test set: Error During Test at '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    l = 0\n    for i = 1:length(string)\n        l += 1\n    end\n    return\
    \ l\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    s = 0\n    for c in string\n        s += 1\n    end\n    return s\nend\n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    l = 0\n    for i = 1:length(string)\n        l += 1\n    end\n    return\
    \ l\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    return lastindex(string)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    i = 0\n    for c in string\n        i += 1\n    end\n    return i\nend\n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if !isdefined(string, :strlen)\n        for i in 1:length(string)\n     \
    \       @inbounds string.strlen[i] = strlen(string[i])\n        end\n    end\n\
    \    return string.strlen[1]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpt48qcci1.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(\"\") == 0\\n  type String has no field\
    \ strlen\\n  Stacktrace:\\n   [1] getproperty\\n     @ ./Base.jl:42 [inlined]\\\
    n   [2] strlen(string::String)\\n     @ Main /tmp/tmpt48qcci1.jl:13\\n   [3] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpt48qcci1.jl:20 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpt48qcci1.jl:19\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    res = 0\n    for c in string\n        res += 1\n    end\n    return res\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if length(string) == 0 \n        return 0\n    else\n        return 1 + strlen(string[2:end])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    return length(string)\nend\n@elapsed strlen(\"abcdefghijklmnopqrstuvwxyz\"\
    )\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\"\
    ) == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    return length(string)\nend\n```\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdsdlak2j.jl:10\nin expression starting at\
    \ /tmp/tmpdsdlak2j.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    return length(string)\nend\n```\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprpmhw39h.jl:10\nin expression starting at\
    \ /tmp/tmprpmhw39h.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    length(string)\nend\n@test strlen(\"test\") == 4\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @test not defined\nin expression starting\
    \ at /tmp/tmpmmzvg13e.jl:10\nin expression starting at /tmp/tmpmmzvg13e.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    str = first(string)\n    if str == nothing\n        return 0\n    else\n\
    \        return 1 + strlen(nextstring(string))\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmppaudtdkk.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(\"\") == 0\\n  ArgumentError: collection\
    \ must be non-empty\\n  Stacktrace:\\n   [1] first(itr::String)\\n     @ Base\
    \ ./abstractarray.jl:419\\n   [2] strlen(string::String)\\n     @ Main /tmp/tmppaudtdkk.jl:8\\\
    n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmppaudtdkk.jl:20 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmppaudtdkk.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmppaudtdkk.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(\"x\") == 1\\n  UndefVarError: nextstring not defined\\n  Stacktrace:\\\
    n   [1] strlen(string::String)\\n     @ Main /tmp/tmppaudtdkk.jl:12\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmppaudtdkk.jl:21 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmppaudtdkk.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmppaudtdkk.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdasnakj\") == 9\\n  UndefVarError: nextstring not defined\\n \
    \ Stacktrace:\\n   [1] strlen(string::String)\\n     @ Main /tmp/tmppaudtdkk.jl:12\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmppaudtdkk.jl:22 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmppaudtdkk.jl:19\\nTest Summary:\
    \ | Error  Total\\ntest set      |     3      3\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    i = 0\n    for ch in string\n        i += 1\n    end\n    return i\nend\n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    result = 0\n    for i = 1:length(string)\n        result += 1\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    len::Int64 = 0\n    for letter in string\n        len += 1\n    end\n   \
    \ return len\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    a=0\n    for i in string\n        a+=1\n    end\n    return a\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\
    \t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    str = first(string)\n    len = 0\n    while str != last(string)\n       \
    \ len += 1\n        str = next(str)\n    end\n    return len\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp2l05ljbr.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"\") == 0\\n  ArgumentError: collection\
    \ must be non-empty\\n  Stacktrace:\\n   [1] first(itr::String)\\n     @ Base\
    \ ./abstractarray.jl:419\\n   [2] strlen(string::String)\\n     @ Main /tmp/tmp2l05ljbr.jl:8\\\
    n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp2l05ljbr.jl:21 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp2l05ljbr.jl:20\\ntest set:\
    \ Test Failed at /tmp/tmp2l05ljbr.jl:22\\n  Expression: candidate(\"x\") == 1\\\
    n   Evaluated: 0 == 1'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    len = 0\n    for char in string\n        len += 1\n    end\n    return len\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    L = 0\n    for i in 1:length(string)\n        L += 1\n    end\n    return\
    \ L\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    len = 0\n    for i in eachindex(string)\n        len += 1\n    end\n    return\
    \ len\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    return length(string)\nend\n \n \n\"\"\" Return length of given string\n\
    \    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpzlqma67u.jl:12\nin expression starting at /tmp/tmpzlqma67u.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    len = 0\n    for char in string\n        len += 1\n    end\n    return len\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \n    len = 0 \n    if string == \"\" \n        return len \n    else \n\
    \        while string[len] != '\\0' \n            len += 1 \n        end \n  \
    \      return len \n    end \nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpitcaij15.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"x\") == 1\\n  BoundsError: attempt to\
    \ access 1-codeunit String at index [0]\\n  Stacktrace:\\n   [1] checkbounds\\\
    n     @ ./strings/basic.jl:216 [inlined]\\n   [2] codeunit\\n     @ ./strings/string.jl:102\
    \ [inlined]\\n   [3] getindex\\n     @ ./strings/string.jl:223 [inlined]\\n  \
    \ [4] strlen(string::String)\\n     @ Main /tmp/tmpitcaij15.jl:13\\n   [5] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmpitcaij15.jl:25 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmpitcaij15.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpitcaij15.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdasnakj\") == 9\\n  BoundsError: attempt to access 9-codeunit\
    \ String at index [0]\\n  Stacktrace:\\n   [1] checkbounds\\n     @ ./strings/basic.jl:216\
    \ [inlined]\\n   [2] codeunit\\n     @ ./strings/string.jl:102 [inlined]\\n  \
    \ [3] getindex\\n     @ ./strings/string.jl:223 [inlined]\\n   [4] strlen(string::String)\\\
    n     @ Main /tmp/tmpitcaij15.jl:13\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmpitcaij15.jl:26 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmpitcaij15.jl:23\\nTest Summary:\
    \ | Pass  Error  Total\\ntest set      |    1      2      3\\n'"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    n = size(string, 1)\n    return n\nend\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: "b'test set: '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    l = 0\n    for c in string\n        l += 1\n    end\n    return l\nend\n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    i = 0\n    for s in string\n        i += 1\n    end\n    return i\nend\n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    len = 0\n    for i in string\n        len += 1\n    end\n    return len\n\
    end\n    \nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    len = 0\n    for c in string\n        len += 1\n    end\n    return len\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\"\n        return 0\n    else\n        return 1 + strlen(string[2:end])\n\
    \    end\nend\n```\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0b6m2p7c.jl:14\nin expression starting at\
    \ /tmp/tmp0b6m2p7c.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    string |> strlen_regex |> match(r\"\\$(?<len>\\d+)\") |> parse(Int64, \"\\\
    $len\")\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpqztiq5rh.jl:15\\n  Test threw\
    \ exception\\n  Expression: candidate(\"\") == 0\\n  UndefVarError: strlen_regex\
    \ not defined\\n  Stacktrace:\\n   [1] strlen(string::String)\\n     @ Main /tmp/tmpqztiq5rh.jl:8\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpqztiq5rh.jl:15 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpqztiq5rh.jl:14\\ntest set:\
    \ Error During Test at /tmp/tmpqztiq5rh.jl:16\\n  Test threw exception\\n  Expression:\
    \ candidate(\"x\") == 1\\n  UndefVarError: strlen_regex not defined\\n  Stacktrace:\\\
    n   [1] strlen(string::String)\\n     @ Main /tmp/tmpqztiq5rh.jl:8\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpqztiq5rh.jl:16 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpqztiq5rh.jl:14\\ntest set:\
    \ Error During Test at /tmp/tmpqztiq5rh.jl:17\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdasnakj\") == 9\\n  UndefVarError: strlen_regex not defined\\\
    n  Stacktrace:\\n   [1] strlen(string::String)\\n     @ Main /tmp/tmpqztiq5rh.jl:8\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpqztiq5rh.jl:17 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpqztiq5rh.jl:14\\nTest Summary:\
    \ | Error  Total\\ntest set      |     3      3\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    n = 0\n    for c in string\n        n += 1\n    end\n    return n\nend\n\
    \ \n \n\"\"\" Return the reverse of the given string\n    >>> strrev(\"\")\n \
    \   \"\"\n    >>> strrev(\"a\")\n    \"a\"\n    >>> strrev(\"ab\")\n    \"ba\"\
    \n    >>> strrev(\"aba\")\n    \"aba\"\n    >>> strrev(\"abab\")\n    \"baba\"\
    \n    >>> strrev(\"ababa\")\n    \"ababa\"\n    >>> strrev(\"ababab\")\n    \"\
    bababa\"\n    >>> strrev(\"abababa\")\n    \"abababa\"\n    >>> strrev(\"abababab\"\
    )\n    \"babababa\"\n    >>> strrev(\"ababababa\")\n    \"ababababa\"\n    >>>\
    \ strrev(\"ababababab\")\n    \"bababababa\"\n    >>> strrev(\"abababababa\")\n\
    \    \"abababababa\"\n    >>> strrev(\"abababababab\")\n    \"babababababa\"\n\
    \    >>> strrev(\"ababababababa\")\n    \"ababababababa\"\n    >>> strrev(\"ababababababab\"\
    )\n    \"bababababababa\"\n    >>> strrev(\"abababababababa\")\n    \"abababababababa\"\
    \n    >>> strrev(\"abababababababab\")\n    \"babababababababa\"\n    >>> strrev(\"\
    ababababababababa\")\n    \"ababababababababa\"\n    >>> strrev(\"ababababababababab\"\
    )\n    \"bababababababababa\"\n    >>> strrev(\"abababababababababa\")\n    \"\
    abababababababababa\"\n    >>> strrev(\"abababababababababab\")\n    \"babababababababababa\"\
    \n    >>> strrev(\"ababababababababababa\")\n    \"ababababababababababa\"\n \
    \   >>> strrev(\"ababababab\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo9hi4r0m.jl:16\nin expression starting at\
    \ /tmp/tmpo9hi4r0m.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    n = 0\n    for i = 1:length(string)\n        n += 1\n    end\n    return\
    \ n\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    # don't count end of line characters!\n    len = 0\n    for i in 1:length(string)\n\
    \        len += 1\n    end\n    return len\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\"\
    ) == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    n = 0\n    for c in string\n        n += 1\n    end\n    return n\nend\n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    string |> strindex\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp11q2_uce.jl:15\\n  Test threw\
    \ exception\\n  Expression: candidate(\"\") == 0\\n  UndefVarError: strindex not\
    \ defined\\n  Stacktrace:\\n   [1] strlen(string::String)\\n     @ Main /tmp/tmp11q2_uce.jl:8\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp11q2_uce.jl:15 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp11q2_uce.jl:14\\ntest set:\
    \ Error During Test at /tmp/tmp11q2_uce.jl:16\\n  Test threw exception\\n  Expression:\
    \ candidate(\"x\") == 1\\n  UndefVarError: strindex not defined\\n  Stacktrace:\\\
    n   [1] strlen(string::String)\\n     @ Main /tmp/tmp11q2_uce.jl:8\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp11q2_uce.jl:16 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp11q2_uce.jl:14\\ntest set:\
    \ Error During Test at /tmp/tmp11q2_uce.jl:17\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdasnakj\") == 9\\n  UndefVarError: strindex not defined\\n  Stacktrace:\\\
    n   [1] strlen(string::String)\\n     @ Main /tmp/tmp11q2_uce.jl:8\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp11q2_uce.jl:17 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp11q2_uce.jl:14\\nTest Summary:\
    \ | Error  Total\\ntest set      |     3      3\\n'"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \n    length::Int64 = 0\n    for i=1:length(string)\n        length += 1\n\
    \    end\n    return length\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpzg1stdg3.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(\"\") == 0\\n  MethodError: objects of type\
    \ Int64 are not callable\\n  Maybe you forgot to use an operator such as *, ^,\
    \ %, / etc. ?\\n  Stacktrace:\\n   [1] strlen(string::String)\\n     @ Main /tmp/tmpzg1stdg3.jl:10\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpzg1stdg3.jl:20 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpzg1stdg3.jl:19\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    len = 0\n    for _ in string\n        len += 1\n    end\n    return len\n\
    end\n\"\"\" Return the index of the first occurrence of the character c in string\
    \ str\n    >>> strindex('', 'a')\n    -1\n    >>> strindex('abc', 'a')\n    1\n\
    \    >>> strindex('abc', 'b')\n    2\n    >>> strindex('abc', 'c')\n    3\n  \
    \  >>> strindex('abc', 'd')\n    -1\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\"\
    ) == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmppx9sqmge.jl:14\nin expression starting at /tmp/tmppx9sqmge.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    for s in string\n        length += 1\n    end\n    return length\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\
    \t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    length(string)\nend\nstrlen(\"\")\nstrlen(\"abc\")\n \n@profile strlen(\"\
    abc\")\nstrlen(\"abcdefghijklmnopqrstuvwxyz\")\n@profile strlen(\"abcdefghijklmnopqrstuvwxyz\"\
    )\nstrlen(\"abcdefghijklmnopqrstuvwxyz\"*\"abcdefghijklmnopqrstuvwxyz\")\n@profile\
    \ strlen(\"abcdefghijklmnopqrstuvwxyz\"*\"abcdefghijklmnopqrstuvwxyz\")\n \n \n\
    \"\"\"\n    Define function to return hypotenuse of a right-angled triangle\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @profile not defined\nin expression starting\
    \ at /tmp/tmpqrmf22qt.jl:13\nin expression starting at /tmp/tmpqrmf22qt.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    l = 0\n    for c in string\n        l += 1\n    end\n    return l\nend\n\
    strlen(\"abc\")\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    s = zero(Int64)\n    for c in string\n        s += 1\n    end\n    return\
    \ s\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    n::Int64 = 0\n    for c::Char in string\n        n += 1\n    end\n    return\
    \ n\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    len = 0\n    for char in string\n        len += 1\n    end\n    return len\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    string |> length\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    len = 0\n    for c in string\n        len += 1\n    end\n    return len\n\
    end\nstrlen(\"abc\")\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    s = Cstring(string)\n    i = 0\n    while !(s[i] == 0)\n        i += 1\n\
    \    end\n    return i\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: "b'test set: '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    len = 0\n    for i = 1:length(string)\n        len += 1\n    end\n    return\
    \ len\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    n = 0\n    for c in string\n        n += 1\n    end\n    return n\nend\n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    string |> lastindex |> inc\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpcvtmtrjw.jl:15\\n  Test threw\
    \ exception\\n  Expression: candidate(\"\") == 0\\n  UndefVarError: inc not defined\\\
    n  Stacktrace:\\n   [1] strlen(string::String)\\n     @ Main /tmp/tmpcvtmtrjw.jl:8\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpcvtmtrjw.jl:15 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpcvtmtrjw.jl:14\\ntest set:\
    \ Error During Test at /tmp/tmpcvtmtrjw.jl:16\\n  Test threw exception\\n  Expression:\
    \ candidate(\"x\") == 1\\n  UndefVarError: inc not defined\\n  Stacktrace:\\n\
    \   [1] strlen(string::String)\\n     @ Main /tmp/tmpcvtmtrjw.jl:8\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpcvtmtrjw.jl:16 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpcvtmtrjw.jl:14\\ntest set:\
    \ Error During Test at /tmp/tmpcvtmtrjw.jl:17\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdasnakj\") == 9\\n  UndefVarError: inc not defined\\n  Stacktrace:\\\
    n   [1] strlen(string::String)\\n     @ Main /tmp/tmpcvtmtrjw.jl:8\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpcvtmtrjw.jl:17 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpcvtmtrjw.jl:14\\nTest Summary:\
    \ | Error  Total\\ntest set      |     3      3\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    strlen = length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    len = 0\n    for i in 1:length(string)\n        len += 1\n    end\n    return\
    \ len\nend\n\"\"\" This is how you write a docstring.\n    >>> add(1,2)\n    3\n\
    \    >>> add(1,3)\n    4\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp_j9bcb6v.jl:14\nin expression starting at /tmp/tmp_j9bcb6v.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    count = 0\n    for i in string\n        count += 1\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    s = 0\n    for char in string\n        s += 1\n    end\n    return s\nend\n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    count = 0\n    for c in string\n        count += 1\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    return length(string)\nend\n \nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    ...\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid identifier name \"...\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgra4hsi1.jl:8\nin expression starting at /tmp/tmpgra4hsi1.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    len = 0\n    for i = 1:length(string)\n        len += 1\n    end\n    return\
    \ len\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    return length(string)\nend\n```\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8jttreb9.jl:10\nin expression starting at\
    \ /tmp/tmp8jttreb9.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if !(string == \"\")\n        len = 0\n        for i=1:length(string)\n \
    \           len += 1\n        end\n        return len\n    else\n        return\
    \ 0\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    len = 0\n    for i = 1:length(string)\n        len += 1\n    end\n    return\
    \ len\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    i = 0\n    for c in string\n        i += 1\n    end\n    return i\nend\n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    len = 0\n    for i = 1:length(string)\n        len += 1\n    end\n    return\
    \ len\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    count = 0\n    for ch in string\n        count += 1\n    end\n    return\
    \ count\nend\n \nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    stringlength = 0\n    for i in eachindex(string)\n        stringlength +=\
    \ 1\n    end\n    return stringlength\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    counter = 0\n    for i in string\n        counter += 1\n    end\n    return\
    \ counter\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    return length(string)\nend\n```\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsrrznbh0.jl:10\nin expression starting at\
    \ /tmp/tmpsrrznbh0.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    len = 0\n    for ch in string\n        len += 1\n    end\n    return len\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    return length(string)\nend\n```\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1ivz6ldu.jl:10\nin expression starting at\
    \ /tmp/tmp1ivz6ldu.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    function len_sub(length::Int64, string::String)::Int64\n        if length\
    \ == 0\n            return 0\n        elseif length == 1\n            return 1\n\
    \        else\n            #println(string[1])\n            #println(string[2:end])\n\
    \            return len_sub(length-1, string[2:end])\n        end\n    end\n \
    \   return len_sub(length(string), string)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\"\
    ) == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplc2c1xlm.jl:28\n  Expression: candidate(\"\
    asdasnakj\") == 9\n   Evaluated: 1 == 9\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplc2c1xlm.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplc2c1xlm.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplc2c1xlm.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    len = 0\n    for c = string\n        len += 1\n    end\n    return len\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    len = 0\n    for character in string\n        len += 1\n    end\n    return\
    \ len\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    leng::Int64 = 0\n    for c in string\n        leng += 1\n    end\n    return\
    \ leng\nend\nstrlen(\"123\")\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    len = length(string)\n    return len\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\"\
    ) == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    length = 0\n    for c = string\n        length += 1\n    end\n    return\
    \ length\nend\n\"\"\" Return the reverse of the given string\n    >>> reverse('')\n\
    \    ''\n    >>> reverse('abc')\n    'cba'\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpgknoevlg.jl:14\nin expression starting at /tmp/tmpgknoevlg.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    len = 0\n    for c in string\n        len += 1\n    end\n    return len\n\
    end\n@test strlen(\"\") == 0\n@test strlen(\"abc\") == 3\n \nusing Test\n\n@testset\
    \ begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @test not defined\nin expression starting\
    \ at /tmp/tmpkhonoqh7.jl:14\nin expression starting at /tmp/tmpkhonoqh7.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    s = 0\n    for i = 1:length(string)\n        s += 1\n    end\n    return\
    \ s\nend\nstrlen(\"abc\")\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    count = 0\n    for c in string\n        count += 1\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    strlen = length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    return length(string)\nend\n \nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    l = length(string)\n    return l\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    string_length = 0\n    for i in eachindex(string)\n        string_length\
    \ += 1\n    end\n    return string_length\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\"\
    ) == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\"\n        return 0\n    else\n        return 1 + strlen(string[2:end])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    lens = 0\n    for c in string\n        lens += 1\n    end\n    return lens\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    n = length(string)\n    return n\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    len = 0\n    for i in string\n        len += 1\n    end\n    return len\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \n    result = 0\n    for i in 1:length(string)\n        result += 1\n  \
    \  end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
