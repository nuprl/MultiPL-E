name: HumanEval_155_even_odd_count
language: jl
prompt: "\"\"\"Given an integer. return a tuple that has the number of even and odd\
  \ digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n\
  \        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
  \ Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
  \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
  \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\
  \t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0)\
  \ == (1, 0))\nend\n"
completions: ["    even = 0\n    odd = 0\n    if num < 0\n        num = -num\n   \
    \ end\n    while num != 0\n        digit = num % 10\n        if digit % 2 == 0\n\
    \            even += 1\n        else\n            odd += 1\n        end\n    \
    \    num = num / 10\n    end\n    return even, odd\nend", "    even::Int64 = 0\n\
    \    odd::Int64 = 0\n    while num > 0\n        if (num % 10) % 2 == 0\n     \
    \       even += 1\n        else\n            odd += 1\n        end\n        num\
    \ = div(num, 10)\n    end\n    return (even, odd)\nend", "    evens = 0\n    odds\
    \ = 0\n    for i in digits(num)\n        if i % 2 == 0\n            evens += 1\n\
    \        else\n            odds += 1\n        end\n    end\n    return evens,\
    \ odds\nend", "    if num == 0\n        return (1, 0)\n    end\n    even = 0\n\
    \    odd = 0\n    for i in abs(num)\n        if i % 2 == 0\n            even +=\
    \ 1\n        else\n            odd += 1\n        end\n    end\n    return (even,\
    \ odd)\nend\neven_odd_count(-12) ==> (1, 1)\neven_odd_count(123) ==> (1, 2)",
  "    even_count = 0\n    odd_count = 0\n    is_even(n) = n % 2 == 0\n    is_odd(n)\
    \ = n % 2 != 0\n    if num == 0\n        return (1, 0)\n    end\n    while num\
    \ != 0\n        if is_even(num % 10)\n            even_count += 1\n        elseif\
    \ is_odd(num % 10)\n            odd_count += 1\n        end\n        num = div(num,\
    \ 10)\n    end\n    return (even_count, odd_count)\nend", "    even_count = 0\n\
    \    odd_count = 0\n    for digit in digits(num)\n        if digit % 2 == 0\n\
    \            even_count += 1\n        else\n            odd_count += 1\n     \
    \   end\n    end\n    return even_count, odd_count\nend", "    # Initialize the\
    \ counters\n    oddCount = 0\n    evenCount = 0\n    \n    # Assign number to\
    \ positive number to get positive numbers\n    if num < 0\n        num = -1 *\
    \ num\n    end\n    \n    # Create a string of the numbers\n    numString = string(num)\n\
    \    \n    # If a character is odd, add one to oddCount\n    # If a character\
    \ is even, add one to evenCount\n    for char in numString\n        if isodd(parse(Int64,\
    \ char))\n            oddCount += 1\n        else\n            evenCount += 1\n\
    \        end\n    end\n    \n    # Return a tuple of oddCount and evenCount\n\
    \    return (oddCount, evenCount)\nend", "    \"\"\"Even Odd Counter\n    \n \
    \   :param num: int\n    :return: Tuple{Int64, Int64}\n    \"\"\"\n    @assert\
    \ typeof(num) == Int64 \"Parameter num must be an integer.\"\n    even::Int64\
    \ = 0\n    odd::Int64 = 0\n    for d in string(num)\n        if parse(Int64, d)\
    \ % 2 == 0\n            even += 1\n        else\n            odd += 1\n      \
    \  end\n    end\n    return even, odd\nend", "    even_count = 0\n    odd_count\
    \ = 0\n    for i = 0:length(num) - 1\n        if num[i] % 2 == 0\n           \
    \ even_count += 1\n        else\n            odd_count += 1\n        end\n   \
    \ end\n    (even_count, odd_count)\nend", "    even, odd = 0, 0\n    for i in\
    \ digits(num)\n        if i%2 == 0\n            even += 1\n        else\n    \
    \        odd += 1\n        end\n    end\n    return even, odd\nend", "    evens\
    \ = 0\n    odds = 0\n    for i in digits(num)\n        if i % 2 == 0\n       \
    \     evens += 1\n        else\n            odds += 1\n        end\n    end\n\
    \    return evens, odds\nend", "    evens = []\n    odds = []\n    if num < 0\n\
    \        num = abs(num)\n    end\n    for i in digits(num)\n        if i % 2 ==\
    \ 0\n            push!(evens, i)\n        else\n            push!(odds, i)\n \
    \       end\n    end\n    return (length(evens), length(odds))\nend", "    even_count,\
    \ odd_count = 0, 0\n    while num > 0\n        num % 2 == 0 ? even_count += 1\
    \ : odd_count += 1\n        num \xF7= 10\n    end\n    return even_count, odd_count\n\
    end", "    even::Int64 = 0\n    odd::Int64 = 0\n    for i in num\n        if isodd(i)\n\
    \            odd += 1\n        elseif iseven(i)\n            even += 1\n     \
    \   end\n    end\n    return even, odd\nend\neven_odd_count(-12)\neven_odd_count(123)",
  "    even = 0\n    odd = 0\n    for i in num:\n        if i in [0, 2, 4, 6, 8]\n\
    \            even = even + 1\n        else\n            odd = odd + 1\n      \
    \  end\n    end\n    return even, odd\nend", "    even = 0\n    odd = 0\n    for\
    \ i in string(num)\n        if i == \"-\"\n            continue\n        end\n\
    \        if parse(Int64, i) % 2 == 0\n            even += 1\n        else\n  \
    \          odd += 1\n        end\n    end\n    return even, odd\nend", "    #\
    \ Your code here\n    even = 0\n    odd = 0\n    for d in digits(num)\n      \
    \  if d % 2 == 0\n            even += 1\n        else\n            odd += 1\n\
    \        end\n    end\n    return (even, odd)\nend", "    even::Int64 = 0\n  \
    \  odd::Int64 = 0\n    num = abs(num)\n    while num != 0\n        if num % 2\
    \ == 0\n            even += 1\n        else\n            odd += 1\n        end\n\
    \        num = num \xF7 10\n    end\n    return (even, odd)\nend", "    # your\
    \ code here\nend\n ", "    evens = 0\n    odds = 0\n    while num > 0\n      \
    \  if mod(num, 10) % 2 == 0\n            evens += 1\n        else\n          \
    \  odds += 1\n        end\n        num = div(num, 10)\n    end\n    return evens,\
    \ odds\nend", "    even_count = 0\n    odd_count = 0\n    for digit in digits(num)\n\
    \        if digit % 2 == 0\n            even_count += 1\n        else\n      \
    \      odd_count += 1\n        end\n    end\n    return even_count, odd_count\n\
    end", "    \n    if num == 0\n        return (1, 0)\n    end\n    \n    even =\
    \ 0\n    odd = 0\n    \n    for i in digits(num)\n        if iseven(i)\n     \
    \       even += 1\n        else\n            odd += 1\n        end\n    end\n\
    \    \n    return (even, odd)\nend", "    even_count = 0\n    odd_count = 0\n\
    \    negative = false\n    if num < 0\n        negative = true\n        num =\
    \ -num\n    end\n    while num > 0\n        digit = num % 10\n        if digit\
    \ % 2 == 0\n            even_count += 1\n        else\n            odd_count +=\
    \ 1\n        end\n        num = num // 10\n    end\n    if negative\n        even_count\
    \ += 1\n    end\n    return even_count, odd_count\nend", "    even = 0\n    odd\
    \ = 0\n    while num > 0\n        if mod(num, 10) % 2 == 0\n            even +=\
    \ 1\n        else\n            odd += 1\n        end\n        num = div(num, 10)\n\
    \    end\n    return (even, odd)\nend", "    even, odd = 0, 0\n    while num !=\
    \ 0\n        if num % 2 == 0\n            even += 1\n        else\n          \
    \  odd += 1\n        end\n        num = div(num, 10)\n    end\n    return even,\
    \ odd\nend", "    odd_count = 0\n    even_count = 0\n    for i in num\n      \
    \  if (i%2 == 0)\n            even_count += 1\n        else \n            odd_count\
    \ += 1\n        end\n    end\n    return (even_count, odd_count)\nend", "    even,\
    \ odd = 0, 0\n    for i in string(num)\n        if parse(Int64, i) % 2 == 0\n\
    \            even += 1\n        else\n            odd += 1\n        end\n    end\n\
    \    (even, odd)\nend", "    even_count = 0\n    odd_count = 0\n    abs_num =\
    \ abs(num)\n    while abs_num != 0\n        if abs_num % 2 == 0\n            even_count\
    \ += 1\n        else\n            odd_count += 1\n        end\n        abs_num\
    \ = floor(abs_num / 10)\n    end\n    return (even_count, odd_count)\nend", " \
    \   even_count = 0\n    odd_count = 0\n    while num != 0\n        if num % 2\
    \ == 0\n            even_count += 1\n        else\n            odd_count += 1\n\
    \        end\n        num = num/10\n    end\n    return (even_count, odd_count)\n\
    end", "    even_count = 0\n    odd_count = 0\n    for digit in string(num)\n \
    \       if iseven(parse(Int64, digit))\n            even_count += 1\n        else\n\
    \            odd_count += 1\n        end\n    end\n    return even_count, odd_count\n\
    end", "    evens = 0\n    odds = 0\n    for i in num:\n        if i % 2 == 0:\n\
    \            evens += 1\n        else:\n            odds += 1\n    end\n    return\
    \ evens, odds\nend", "    \"\"\"\n    number of even and odd digits of a given\
    \ number\n    \"\"\"\n    even, odd = 0, 0\n    n = abs(num)\n    while n > 0\n\
    \        if rem(n,10) % 2 == 0\n            even += 1\n        else\n        \
    \    odd += 1\n        end\n        n = div(n,10)\n    end\n    return (even,\
    \ odd)\nend\n ", "    even_count, odd_count = 0, 0\n    for digit in string(num)\n\
    \        digit = parse(Int64, digit)\n        if mod(digit, 2) == 0\n        \
    \    even_count += 1\n        else\n            odd_count += 1\n        end\n\
    \    end\n    return even_count, odd_count\nend", "    even_count = 0\n    odd_count\
    \ = 0\n    if num < 0\n        num = -num\n    end\n    while num != 0\n     \
    \   digit = num % 10\n        if digit % 2 == 0\n            even_count += 1\n\
    \        else\n            odd_count += 1\n        end\n        num = num // 10\n\
    \    end\n    return (even_count, odd_count)\nend", "    evens = 0;\n    odds\
    \ = 0;\n    for i in digits(num)\n        if i%2 == 0\n            evens += 1\n\
    \        else\n            odds += 1\n        end\n    end\n    return (evens,\
    \ odds)\nend", "    (even_count, odd_count) = (0, 0)\n    if num == 0\n      \
    \  return (1, 0)\n    end\n    if num < 0\n        num = abs(num)\n    end\n \
    \   while num != 0\n        if num % 2 == 0\n            even_count += 1\n   \
    \     else\n            odd_count += 1\n        end\n        num = num \xF7 10\n\
    \    end\n    return (even_count, odd_count)\nend", "    even = 0\n    odd = 0\n\
    \    for c in num |> abs |> Int64 |> digits\n        if c % 2 == 0\n         \
    \   even += 1\n        else\n            odd += 1\n        end\n    end\n    return\
    \ (even, odd)\nend", "    if num < 0 \n        num = -num\n    end\n    even_count\
    \ = 0\n    odd_count = 0\n    for digit in int2digits(num)\n        if digit %\
    \ 2 == 0\n            even_count += 1\n        else\n            odd_count +=\
    \ 1\n        end\n    end\n    return even_count, odd_count\nend", "     if num\
    \ == 0\n        return (1, 0)\n    end\n    even_count = 0\n    odd_count = 0\n\
    \    if num < 0\n        num = -num\n    end\n    while num > 0\n        digit\
    \ = num % 10\n        if digit % 2 == 0\n            even_count += 1\n       \
    \ else\n            odd_count += 1\n        end\n        num = num // 10\n   \
    \ end\n    return (even_count, odd_count)\nend", "    ecount::Int64 = 0;\n   \
    \ ocount::Int64 = 0;\n    for i in 1:length(string(num))\n        if parse(Int64,string(num)[i])\
    \ % 2 == 0\n            ecount += 1\n        else\n            ocount += 1\n \
    \       end\n    end\n    return (ecount, ocount)\nend", "    even, odd = 0, 0\n\
    \    for digit in digits(num)\n        if digit % 2 == 0\n            even +=\
    \ 1\n        else\n            odd += 1\n        end\n    end\n    return even,\
    \ odd\nend", "    count_even, count_odd = 0, 0\n    for i in num.digits(base=10)\n\
    \        if i % 2 == 0\n            count_even += 1\n        else\n          \
    \  count_odd += 1\n        end\n    end\n    return count_even, count_odd\nend",
  "    even = 0\n    odd = 0\n    for i in string(num)\n        if parse(Int64, i)\
    \ % 2 == 0\n            even += 1\n        else\n            odd += 1\n      \
    \  end\n    end\n    return even, odd\nend", "    return (num2digits(abs(num)).count(x\
    \ -> x % 2 == 0), num2digits(abs(num)).count(x -> x % 2 != 0))\nend", "    evens\
    \ = 0\n    odds = 0\n    if num > 0\n        for i in num\n            if mod(i,\
    \ 2) == 0\n                evens += 1\n            else\n                odds\
    \ += 1\n            end\n        end\n    elseif num < 0\n        for i in num*-1\n\
    \            if mod(i, 2) == 0\n                evens += 1\n            else\n\
    \                odds += 1\n            end\n        end\n    end\n    return\
    \ (evens, odds)\nend", "    even_count = 0\n    odd_count = 0\n    for i in num\n\
    \        if (i % 2 == 0)\n            even_count += 1\n        else\n        \
    \    odd_count += 1\n        end\n    end\n    return even_count, odd_count\n\
    end", "    x = 0\n    y = 0\n    for i = 1:length(string(num))\n        x += iseven(parse(Int64,\
    \ string(num)[i]))\n        y += isodd(parse(Int64, string(num)[i]))\n    end\n\
    \    return (x, y)\nend", "    if num == 0\n        return (1, 0)\n    end\n \
    \   evens = 0\n    odds = 0\n    while num != 0\n        rem = num % 10\n    \
    \    if rem % 2 == 0\n            evens += 1\n        else\n            odds +=\
    \ 1\n        end\n        num = num / 10\n    end\n    return (evens, odds)\n\
    end\nprintln(even_odd_count(-12))\nprintln(even_odd_count(123))", "    even_count\
    \ = 0\n    odd_count = 0\n    for number in numbers(num)\n        if number %\
    \ 2 == 0\n            even_count += 1\n        else\n            odd_count +=\
    \ 1\n        end\n    end\n    return even_count, odd_count\nend", "    odds,\
    \ evens = 0, 0\n    for n in collect(1:abs(num))\n        if mod(n, 2) == 0\n\
    \            evens += 1\n        else\n            odds += 1\n        end\n  \
    \  end\n    return evens, odds\nend", "    if num == 0\n        return (1, 0)\n\
    \    end\n    even_count = 0\n    odd_count = 0\n    while num != 0\n        if\
    \ num % 2 == 0\n            even_count += 1\n        else\n            odd_count\
    \ += 1\n        end\n        num = div(num, 10)\n    end\n    return (even_count,\
    \ odd_count)\nend", "    evens, odds = 0, 0\n    for digit in digits(num)\n  \
    \      if mod(digit, 2) == 0\n            evens += 1\n        else\n         \
    \   odds += 1\n        end\n    end\n    return evens, odds\nend", "    even_count\
    \ = 0\n    odd_count = 0\n    for digit in digits(num)\n        if mod(digit,\
    \ 2) == 0\n            even_count += 1\n        else\n            odd_count +=\
    \ 1\n        end\n    end\n    return (even_count, odd_count)\nend", "    function\
    \ __even_odd_count(num::Int64, even::Int64, odd::Int64)::Tuple{Int64, Int64}\n\
    \        if num == 0\n            return (even, odd)\n        else\n         \
    \   digit = num % 10\n            if digit % 2 == 0\n                return __even_odd_count(num//10,\
    \ even+1, odd)\n            else\n                return __even_odd_count(num//10,\
    \ even, odd+1)\n            end\n        end\n    end\n    return __even_odd_count(num,\
    \ 0, 0)\nend", "    evencount = 0\n    oddcount = 0\n    while num > 0\n     \
    \   if num % 2 == 0\n            evencount += 1\n        else\n            oddcount\
    \ += 1\n        end\n        num = div(num, 10)\n    end\n    return (evencount,\
    \ oddcount)\nend", "    # calculate the number of even and odd digits\n    # return\
    \ a tuple with number of even and odd digits respectively\n    even::Int64 = 0\n\
    \    odd::Int64 = 0\n    while num > 0\n        if num % 2 == 0\n            even\
    \ += 1\n        else\n            odd += 1\n        end\n        num /= 10\n \
    \   end\n    return (even, odd)\nend", "    num_str = string(num)\n    even_count\
    \ = 0\n    odd_count = 0\n    for x in num_str\n        if parse(Int64, x) % 2\
    \ == 0\n            even_count += 1\n        else\n            odd_count += 1\n\
    \        end\n    end\n    return (even_count, odd_count)\nend", "    odds = 0\n\
    \    evens = 0\n    while num != 0\n        #get the remainder of dividing num\
    \ by 10 and add the absolute value to either evens or odds\n        #update num\
    \ by dividing it by 10\n        odds += abs(rem(num, 10)) % 2\n        evens +=\
    \ abs(rem(num, 10)) % 2 == 0\n        num = floor(Int64, num / 10)\n    end\n\
    \    return evens, odds\nend\neven_odd_count(-12)\neven_odd_count(123)", "   \
    \ evens = 0\n    odds = 0\n    for digit in digits(num)\n        if digit % 2\
    \ == 0\n            evens += 1\n        else\n            odds += 1\n        end\n\
    \    end\n    return evens, odds\nend", "   \n    return (sum([1 for i in digits(num)\
    \ if rem(i, 2) == 0]), \n        sum([1 for i in digits(num) if rem(i, 2) == 1]))\n\
    \    \nend", "    return (length(filter(x -> x % 2 == 0, digits(num))), \n   \
    \         length(filter(x -> x % 2 != 0, digits(num))))\nend", "    if num < 0\n\
    \        num = abs(num)\n    end\n    e, o = 0, 0\n    while num > 0\n       \
    \ if num % 2 == 0\n            e += 1\n        else\n            o += 1\n    \
    \    end\n        num = div(num, 10)\n    end\n    return (e, o)\nend", "    even,\
    \ odd = 0, 0\n    for digit in num:\n        if digit % 2 == 0:\n            even\
    \ += 1\n        else:\n            odd += 1\n    end\n    return even, odd\nend",
  "    evens = odds = 0\n    for i in string(num)\n        if i in ['0', '2', '4',\
    \ '6', '8']\n            evens += 1\n        else\n            odds += 1\n   \
    \     end\n    end\n    return evens, odds\nend", "    even, odd = 0, 0 \n   \
    \ for i in digits(num)\n        if i % 2 == 0\n            even += 1\n       \
    \ else\n            odd += 1\n        end\n    end\n    return even, odd\nend",
  "    odds = 0\n    evens = 0\n    while num > 0\n        digit = num % 10\n    \
    \    if digit % 2 == 0\n            evens += 1\n        else\n            odds\
    \ += 1\n        end\n        num = num / 10\n    end\n    return evens, odds\n\
    end", "    \n    even_list = []\n    odd_list = []\n    \n    for i in collect(digits(num))\n\
    \        if i % 2 == 0\n            push!(even_list, i)\n        else\n      \
    \      push!(odd_list, i)\n        end\n    end\n    \n    return (length(even_list),\
    \ length(odd_list))\nend", "    even_num = 0\n    odd_num = 0\n    while num >\
    \ 0\n        remainder = num % 10\n        if remainder % 2 == 0\n           \
    \ even_num += 1\n        else\n            odd_num += 1\n        end\n       \
    \ num = num / 10\n    end\n    return (even_num, odd_num)\nend", "    odd = 0\n\
    \    even = 0\n    for nums in abs(num)\n        if nums%2 == 0\n            even\
    \ += 1\n        else\n            odd += 1\n        end\n    end\n    return (even,\
    \ odd)\nend", "    even_count, odd_count = 0, 0\n    if num == 0\n        return\
    \ 0, 0\n    end\n    while num != 0\n        curr_digit = num % 10\n        if\
    \ curr_digit % 2 == 0\n            even_count += 1\n        else\n           \
    \ odd_count += 1\n        end\n        num = num \xF7 10\n    end\n    return\
    \ even_count, odd_count\nend", "    even = 0\n    odd = 0\n    for digit in digits(num)\n\
    \        if digit % 2 == 0\n            even += 1\n        else\n            odd\
    \ += 1\n        end\n    end\n    return (even, odd)\nend", "    return length(filter(x\
    \ -> x % 2 == 0, digits(num))), length(filter(x -> x % 2 != 0, digits(num)))\n\
    end", "    even_count = 0\n    odd_count = 0\n    for c in string(num)\n     \
    \   c = parse(Int64, c)\n        if c % 2 == 0\n            even_count += 1\n\
    \        else\n            odd_count += 1\n        end\n    end\n    return (even_count,\
    \ odd_count)\nend", "    x, y = 0, 0\n    for i in num\n        if i % 2 == 0\n\
    \            x += 1\n        else\n            y += 1\n        end\n    end\n\
    \    return x, y\nend", "    evens = odds = 0\n    for i in string(num)\n    \
    \    if i in \"02468\"\n            evens += 1\n        else\n            odds\
    \ += 1\n        end\n    end\n    return evens, odds\nend", "    even_count =\
    \ 0\n    odd_count = 0\n    num = abs(num)\n    while num > 0\n        dig = num\
    \ % 10\n        if dig % 2 == 0\n            even_count += 1\n        else\n \
    \           odd_count += 1\n        end\n        num = div(num, 10)\n    end\n\
    \    return (even_count, odd_count)\nend", "    if num == 0\n        return (1,\
    \ 0)\n    end\n    num = abs(num)\n    even = 0\n    odd = 0\n    while num >\
    \ 0\n        even += 1*isodd(num%10)\n        odd += 1*iseven(num%10)\n      \
    \  num = num \xF7 10\n    end\n    return (even, odd)\nend\neven_odd_count(-12)\n\
    even_odd_count(123)", "    even_count = 0\n    odd_count = 0\n    for i in digits(num)\n\
    \        if i % 2 == 0\n            even_count += 1\n        else\n          \
    \  odd_count += 1\n        end\n    end\n    return (even_count, odd_count)\n\
    end", "    num = abs(num)\n    odd = 0\n    even = 0\n    while num >= 1\n   \
    \     digit = num % 10\n        if digit % 2 == 0\n            even += 1\n   \
    \     else\n            odd += 1\n        end\n        num = num \xF7 10\n   \
    \ end\n    return even, odd\nend", "    evens = 0\n    odds = 0\n    for i in\
    \ digits(num)\n        if i % 2 == 0\n            evens += 1\n        else\n \
    \           odds += 1\n        end\n    end\n    return evens, odds\nend", " \
    \   @assert num \u2264 99999999 & num \u2265 -99999999  \"num must be within the\
    \ specified range\"\n    even, odd = 0, 0\n    abs_num = abs(num)\n    while abs_num\
    \ > 0\n        if abs_num % 2 == 0\n            even += 1\n        else\n    \
    \        odd += 1\n        end\n        abs_num = abs_num \xF7 10\n    end\n \
    \   return even, odd\nend", "    evens = 0\n    odds = 0\n    for i in digits(num)\n\
    \        if i % 2 == 0\n            evens += 1\n        else\n            odds\
    \ += 1\n        end\n    end\n    return (evens, odds)\nend", "    odd_digits\
    \ = 0\n    even_digits = 0\n    num::Int64 = abs(num)\n    while num > 0\n   \
    \     digit = num % 10\n        if digit % 2 == 0\n            even_digits +=\
    \ 1\n        else\n            odd_digits += 1\n        end\n        num = num\
    \ \xF7 10\n    end\n    return (even_digits, odd_digits)\nend", "    even_count,\
    \ odd_count = 0, 0\n    while num != 0\n        remainder = num % 10\n       \
    \ if remainder % 2 == 0\n            even_count += 1\n        else\n         \
    \   odd_count += 1\n        end\n        num = num \xF7 10\n    end\n    return\
    \ even_count, odd_count\nend", "    if num == 0\n        return (1, 0)\n    end\n\
    \    n_even = 0\n    n_odd = 0\n    if num > 0\n        while num > 0\n      \
    \      if rem(num, 10) % 2 == 0\n                n_even += 1\n            else\n\
    \                n_odd += 1\n            end\n            num = div(num, 10)\n\
    \        end\n    else\n        return even_odd_count(-num)\n    end\n    return\
    \ (n_even, n_odd)\nend", "    evens = 0\n    odds = 0\n    while num > 0\n   \
    \     digit = num % 10\n        if digit % 2 == 0\n            evens += 1\n  \
    \      else\n            odds += 1\n        end\n        num = num / 10\n    end\n\
    \    return evens, odds\nend", "    even_counter = 0\n    odd_counter = 0\n  \
    \  for c in str(num)\n        if c == '-'\n            continue\n        end\n\
    \        if parse(Int64, c) % 2 == 0\n            even_counter += 1\n        else\n\
    \            odd_counter += 1\n        end\n    end\n    return (even_counter,\
    \ odd_counter)\nend", "    even_count = 0\n    odd_count = 0\n    for i in string(num)\n\
    \        if i == '-'\n            continue\n        end\n        if parse(Int64,\
    \ i) % 2 == 0\n            even_count += 1\n        else\n            odd_count\
    \ += 1\n        end\n    end\n    return (even_count, odd_count)\nend", "    even_count\
    \ = 0;\n    odd_count = 0;\n    while num != 0\n        rem = num % 10\n     \
    \   if rem % 2 == 0\n            even_count += 1\n        else\n            odd_count\
    \ += 1\n        end\n        num = floor(num / 10)\n    end\n    return (even_count,\
    \ odd_count)\nend", "    even = 0\n    odd = 0\n    for i in 1:length(num)\n \
    \       if num[i] % 2 == 0\n            even += 1\n        else\n            odd\
    \ += 1\n        end\n    end\n    return even, odd\nend", "    evens = 0\n   \
    \ odds = 0\n    if num == 0\n        return (0, 0)\n    end\n    for digit in\
    \ digits(num)\n        if digit % 2 == 0\n            evens += 1\n        else\n\
    \            odds += 1\n        end\n    end\n    return (evens, odds)\nend",
  "    e=0\n    o=0\n    x=0\n    while num!=0\n        x=num%10\n        if x%2==0\n\
    \            e+=1\n        else\n            o+=1\n        end\n        num=div(num,10)\n\
    \    end\n    return (e,o)\nend", "    \"\"\"\n    Purpose: Number of even and\
    \ odd digits respectively.\n    \"\"\"\n    even = 0\n    odd = 0\n    if num\
    \ < 0\n        num = -num\n    end\n    while num > 0\n        if num % 2 == 0\n\
    \            even += 1\n        else\n            odd += 1\n        end\n    \
    \    num = div(num, 10)\n    end\n    return (even, odd)\nend", "    even = 0\n\
    \    odd = 0\n    while num != 0\n        if num % 2 == 0\n            even +=\
    \ 1\n        else\n            odd += 1\n        end\n        num = num // 10\n\
    \    end\n    return (even, odd)\nend", "    num, even_count, odd_count = abs(num),\
    \ 0, 0\n    while num > 0\n        r = rem(num, 10)\n        if r % 2 == 0\n \
    \           even_count += 1\n        else\n            odd_count += 1\n      \
    \  end\n        num = div(num, 10)\n    end\n    return even_count, odd_count\n\
    end", "    even_count = 0\n    odd_count = 0\n    if num == 0\n        return\
    \ (1, 0)\n    end\n    for n in string(abs(num))\n        if n == '0' || n ==\
    \ '2' || n == '4' || n == '6' || n == '8'\n            even_count += 1\n     \
    \   elseif n == '1' || n == '3' || n == '5' || n == '7' || n == '9'\n        \
    \    odd_count += 1\n        end\n    end\n    return (even_count, odd_count)\n\
    end", "    even = 0\n    odd = 0\n    for i in digits(num)\n        if i % 2 ==\
    \ 0\n            even += 1\n        else\n            odd += 1\n        end\n\
    \    end\n    return even, odd\nend", "    even::Int64 = 0\n    odd::Int64 = 0\n\
    \    for dig in digits(num)\n        dig % 2 == 0 ? even += 1 : odd += 1\n   \
    \ end\n    (even, odd)\nend", "    ndigits = floor(log10(abs(num))) + 1\n    even_count,\
    \ odd_count = 0, 0\n    for i = 0:ndigits-1\n        digit = abs(num) % 10\n \
    \       if digit % 2 == 0\n            even_count += 1\n        else\n       \
    \     odd_count += 1\n        end\n        num = div(num, 10)\n    end\n    return\
    \ even_count, odd_count\nend", "    num_even, num_odd = 0, 0\n    while num !=\
    \ 0\n        r = num % 10\n        if r % 2 == 0\n            num_even += 1\n\
    \        else\n            num_odd += 1\n        end\n        num = div(num, 10)\n\
    \    end\n    return (num_even, num_odd)\nend", "    even = 0\n    odd = 0\n \
    \   while num >= 1\n        if num % 2 == 0\n            even += 1\n        else\n\
    \            odd += 1\n        end\n        num = div(num, 10)\n    end\n    return\
    \ (even, odd)\nend", "    e, o = 0, 0\n    while num != 0\n        if num % 2\
    \ == 0\n            e += 1\n        else\n            o += 1\n        end\n  \
    \      num = floor(num / 10)\n    end\n    return (e, o)\nend", "    even_num\
    \ = 0\n    odd_num = 0\n    for digit in digits(num)\n        if digit % 2 ==\
    \ 0\n            even_num += 1\n        else\n            odd_num += 1\n     \
    \   end\n    end\n    return (even_num, odd_num)\nend", "    oddCount = 0\n  \
    \  evenCount = 0\n    for i = 1:length(num)\n        if(num[i] % 2 == 0)\n   \
    \         evenCount = evenCount + 1\n        else\n            oddCount = oddCount\
    \ + 1\n        end\n    end\n    return (evenCount, oddCount)\nend", "  even,\
    \ odd = 0, 0\n  while num != 0\n    digit = num % 10\n    if digit % 2 == 0\n\
    \      even += 1\n    else\n      odd += 1\n    end\n    num = div(num, 10)\n\
    \  end\n  return even, odd\nend", "    even = 0\n    odd = 0\n    for elem in\
    \ string(num)\n        if parse(Int64, elem) % 2 == 0\n            even += 1\n\
    \        else\n            odd += 1\n        end\n    end\n    return (even, odd)\n\
    end", "    even_digit_counter = 0\n    odd_digit_counter = 0\n    tmp = abs(num)\n\
    \    while tmp > 0\n        if (mod(tmp, 10) % 2) == 0\n            even_digit_counter\
    \ += 1\n        else\n            odd_digit_counter += 1\n        end\n      \
    \  tmp = div(tmp, 10)\n    end\n    return (even_digit_counter, odd_digit_counter)\n\
    end", "    \n    even_count = 0\n    odd_count = 0\n    \n    if num < 0\n   \
    \     num = -num\n    end\n    while num > 0\n        digit = num % 10\n     \
    \   if digit % 2 == 0\n            even_count += 1\n        else\n           \
    \ odd_count += 1\n        end\n        num = floor(Int64, num / 10)\n    end\n\
    \    return (even_count, odd_count)\nend", "    even_count = 0\n    odd_count\
    \ = 0\n    for i in 1:1:string(num).length\n        if num % 2 == 0\n        \
    \    even_count = even_count + 1\n        else\n            odd_count = odd_count\
    \ + 1\n        end\n    end\n    return even_count, odd_count\nend", "    evens\
    \ = 0\n    odds = 0\n    for i in num ==> abs(num)\n        if i % 2 == 0\n  \
    \          evens += 1\n        else\n            odds += 1\n        end\n    end\n\
    \    return (evens, odds)\nend\n    \n    \n    ", "    even_digits = 0\n    odd_digits\
    \ = 0\n    for digit in string(num)\n        if(digit != \"-\" && parse(Int64,\
    \ digit) % 2 == 0)\n            even_digits += 1\n        elseif(digit != \"-\"\
    )\n            odd_digits += 1\n        end\n    end\n    return (even_digits,\
    \ odd_digits)\nend", "    if num < 0 \n        num = -num\n    end\n    e_num\
    \ = 0\n    o_num = 0\n    for i in num:to_s()\n        if i == '2' || i == '4'\
    \ || i == '6' || i == '8' || i == '0'\n            e_num += 1\n        else\n\
    \            o_num += 1\n        end\n    end\n    return (e_num, o_num)\nend",
  "    \n    even, odd = 0, 0\n    \n    for i in range(0, num, 10)\n        if i%2\
    \ == 0\n            even += 1\n        else\n            odd += 1\n        end\n\
    \    end\n    \n    return (even, odd)\nend", "    num_odd = 0\n    num_even =\
    \ 0\n    for i = 1:length(string(num))\n        if (parse(Int64, string(num)[i])\
    \ % 2 == 0)\n            num_even += 1\n        else\n            num_odd += 1\n\
    \        end\n    end\n    return (num_even, num_odd)\nend", "    evens = 0\n\
    \    odds = 0\n    for i in digits(num)\n        if i%2 == 0\n            evens\
    \ += 1\n        else\n            odds += 1\n        end\n    end\n    return\
    \ (evens, odds)\nend", "    (sum(map(x -> (mod(x, 2) == 0) ? 1 : 0, digits(num))),\n\
    \    sum(map(x -> (mod(x, 2) == 0) ? 0 : 1, digits(num))))\nend", "    \n    even_count\
    \ = 0\n    odd_count = 0\n    \n    for i = 1:length(num)\n        \n        digit\
    \ = num[i]\n        \n        if mod(digit, 2) == 0\n            even_count +=\
    \ 1\n        else\n            odd_count += 1\n        end\n    end\n    \n  \
    \  return even_count, odd_count\nend", "    even = odd = 0\n    for i in string(num)\n\
    \        if i in (\"0\", \"2\", \"4\", \"6\", \"8\")\n            even += 1\n\
    \        elseif i in (\"1\", \"3\", \"5\", \"7\", \"9\")\n            odd += 1\n\
    \        end\n    end\n    return even, odd\nend\neven_odd_count(-12)\neven_odd_count(123)",
  "    even, odd = 0, 0\n    for digit in string(num)\n        if digit == '-'\n \
    \           next\n        end\n        if digit % 2 == 0\n            even +=\
    \ 1\n        else\n            odd += 1\n        end\n    end\n    return even,\
    \ odd\nend", "    \n    evens = 0\n    odds = 0\n    \n    for i in num \n   \
    \     rem = i % 2\n        if rem == 0\n            evens += 1\n        else\n\
    \            odds += 1\n        end\n    end\n    \n    return evens, odds\nend",
  "    evencount = 0\n    oddcount = 0\n    digits = digits(num)\n    for digit in\
    \ digits\n        digit % 2 == 0 ? evencount += 1 : oddcount += 1\n    end\n \
    \   (evencount, oddcount)\nend", "    evens = 0\n    odds = 0\n    for i in num\n\
    \        if i % 2 == 0\n            evens += 1\n        else\n            odds\
    \ += 1\n        end\n    end\n    return (evens, odds)\nend", "    # TODO: Fill\
    \ in the details of your implementation here\n    if num < 0\n        num = -num\n\
    \    end\n    even, odd = 0, 0\n    while num > 0\n        if num % 2 == 0\n \
    \           even += 1\n        else\n            odd += 1\n        end\n     \
    \   num = num // 10\n    end\n    return even, odd\nend", "    odd_count = 0\n\
    \    even_count = 0\n    while num != 0\n        if abs(num) % 2 == 0\n      \
    \      even_count += 1\n        else\n            odd_count += 1\n        end\n\
    \        num = div(num, 10)\n    end\n    return even_count, odd_count\nend",
  "    (even, odd) = (0, 0)\n    while num != 0\n        digit = num % 10\n      \
    \  num = div(num, 10)\n        if digit % 2 == 0\n            even += 1\n    \
    \    else\n            odd += 1\n        end\n    end\n    return (even, odd)\n\
    end", "    even_count = 0\n    odd_count = 0\n    num = abs(num)\n    while num\
    \ > 0\n        if (num % 10) % 2 == 0\n            even_count += 1\n        else\n\
    \            odd_count += 1\n        end\n        num = div(num, 10)\n    end\n\
    \    return (even_count, odd_count)\nend", "    evens = 0\n    odds = 0\n    for\
    \ i in 1:log10(abs(num))+1\n        n = (num % 10^i) // 10^(i-1)\n        if n\
    \ % 2 == 0\n            evens += 1\n        else\n            odds += 1\n    \
    \    end\n    end\n    return (evens, odds)\nend", "    odd = 0\n    even = 0\n\
    \    while num > 0\n        if num % 2 == 0\n            even += 1\n        else\n\
    \            odd += 1\n        end\n        num = trunc(Int64, num / 10)\n   \
    \ end\n    return (even, odd)\nend", "    \n    if num == 0\n        return (1,\
    \ 0)\n    end\n    evens = 0\n    odds = 0\n    is_neg = false\n    if num < 0\n\
    \        is_neg = true\n        num = abs(num)\n    end\n    while num > 0\n \
    \       if num % 2 == 0\n            evens += 1\n        else\n            odds\
    \ += 1\n        end\n        num = div(num, 10)\n    end\n    return (evens, odds)\n\
    end", "  odd_count = even_count = 0\n  for s in string(num)\n    if isodd(parse(Int64,\
    \ s))\n      odd_count += 1\n    else\n      even_count += 1\n    end\n  end\n\
    \  (even_count, odd_count)\nend", "    even, odd = 0, 0\n    if num < 0\n    \
    \    num = -num\n    end\n    while num > 0\n        if num % 2 == 0\n       \
    \     even += 1\n        else\n            odd += 1\n        end\n        num\
    \ = div(num, 10)\n    end\n    return even, odd\nend", "    evens = 0\n    odds\
    \ = 0\n    for i in 1:length(string(num))\n        if parse(Int64,string(num)[i])\
    \ % 2 == 0\n            evens += 1\n        else\n            odds += 1\n    \
    \    end\n    end\n    return (evens, odds)\nend", "    \n    num_even, num_odd\
    \ = 0, 0\n    \n    while num != 0\n        if num % 2 == 0\n            num_even\
    \ += 1\n        else\n            num_odd += 1\n        end\n        num = num\
    \ \xF7 10\n    end\n    return (num_even, num_odd)\nend", "    even_count, odd_count\
    \ = 0, 0\n    while num != 0\n        if num % 2 == 0\n            even_count\
    \ += 1\n        else\n            odd_count += 1\n        end\n        num = div(num,\
    \ 10)\n    end\n    return even_count, odd_count\nend", "    odd_count = 0\n \
    \   even_count = 0\n    abs_num = abs(num)\n    while abs_num != 0\n        if\
    \ mod(abs_num, 10) % 2 == 0\n            even_count += 1\n        else\n     \
    \       odd_count += 1\n        end\n        abs_num = div(abs_num, 10)\n    end\n\
    \    return (even_count, odd_count)\nend", "    evens, odds = 0, 0\n    for i\
    \ in digits(num)\n        if i%2 == 0\n            evens += 1\n        else\n\
    \            odds += 1\n        end\n    end\n    (evens, odds)\nend", "    #\
    \ Base case: \n    if num == 0\n        return (0, 0)\n    end\n    \n    # Recursive\
    \ case:\n    last_digit = mod(num, 10)\n    even_odd_count_so_far = even_odd_count(div(num,\
    \ 10))\n    if last_digit % 2 == 0\n        new_even_count = even_odd_count_so_far[1]\
    \ + 1\n        new_odd_count = even_odd_count_so_far[2]\n    else\n        new_even_count\
    \ = even_odd_count_so_far[1]\n        new_odd_count = even_odd_count_so_far[2]\
    \ + 1\n    end\n    return (new_even_count, new_odd_count)\nend", "    even_count\
    \ = 0\n    odd_count = 0\n    while num > 0\n        n = mod(num, 10)\n      \
    \  if mod(n, 2) == 0\n            even_count += 1\n        else\n            odd_count\
    \ += 1\n        end\n        num = div(num, 10)\n    end\n    return (even_count,\
    \ odd_count)\nend", "    even::Int64, odd::Int64 = 0, 0\n    if num < 0\n    \
    \    num = -num\n    end\n    while num != 0\n        num % 2 == 0 ? even += 1\
    \ : odd += 1\n        num = div(num, 10)\n    end\n    return even, odd\nend",
  "    if num == 0\n        return (1, 0)\n    end\n    even_digit = 0\n    odd_digit\
    \ = 0\n    while num != 0\n        remain = mod(num, 10)\n        if mod(remain,\
    \ 2) == 0\n            even_digit += 1\n        else\n            odd_digit +=\
    \ 1\n        end\n        num = div(num, 10)\n    end\n    return (even_digit,\
    \ odd_digit)\nend", "    evens = 0\n    odds = 0\n    for i in digits(num)\n \
    \       if i % 2 == 0\n            evens += 1\n        else\n            odds\
    \ += 1\n        end\n    end\n    (evens, odds)\nend", "    even_count = 0\n \
    \   odd_count = 0\n    @scan num (n) begin\n        if n % 2 == 0\n          \
    \  even_count += 1\n        else\n            odd_count += 1\n        end\n  \
    \  end\n    return (even_count, odd_count)\nend", "    evens = 0\n    odds = 0\n\
    \    for digit in num |> digits |> reverse \n        if digit % 2 == 0\n     \
    \       evens += 1\n        else\n            odds += 1\n        end\n    end\n\
    \    return evens, odds\nend", "    even::Int64, odd::Int64 = 0, 0\n    for d\
    \ in digits(num)\n        if mod(d, 2) == 0 \n            even += 1\n        else\n\
    \            odd += 1\n        end\n    end\n    return even, odd\nend", "   \
    \ return (sum([int(i) % 2 == 0 for i in string(num)]), sum([int(i) % 2 == 1 for\
    \ i in string(num)]))\nend", "    evencount = 0\n    oddcount = 0\n    if num\
    \ < 0\n        num = -num\n    end\n    while num > 0\n        digit = num % 10\n\
    \        if digit % 2 == 0\n            evencount += 1\n        else\n       \
    \     oddcount += 1\n        end\n        num = num // 10\n    end\n    return\
    \ (evencount, oddcount)\nend", "    even = 0\n    odd = 0\n    if num < 0\n  \
    \      num = -num\n    end\n    while num > 0\n        if mod(num, 10) % 2 ==\
    \ 0\n            even += 1\n        else\n            odd += 1\n        end\n\
    \        num = div(num, 10)\n    end\n    return (even, odd)\nend", "    # counter\
    \ for odd and even\n    even = 0\n    odd = 0\n    # if the number is negative,\
    \ multiply by -1\n    num = abs(num)\n    # until the number is not zero\n   \
    \ while num != 0\n        # get the last digit\n        last_digit = num % 10\n\
    \        # if the last digit is even\n        if last_digit % 2 == 0\n       \
    \     # increment the even counter\n            even += 1\n        else\n    \
    \        # otherwise increment the odd counter\n            odd += 1\n       \
    \ end\n        # now divide by 10 to remove the last digit\n        num = num\
    \ \xF7 10\n    end\n    # return the counters in a tuple\n    return (even, odd)\n\
    end", "    nums = string(num)\n    nums = split(nums, \"\")\n    nums = parse.(Int64,\
    \ nums)\n    even = 0\n    odd = 0\n    for i in nums\n        if rem(i, 2) ==\
    \ 0\n            even += 1\n        else\n            odd += 1\n        end\n\
    \    end\n    return even, odd\nend", "    even_counter = 0\n    odd_counter =\
    \ 0\n    for i in 1:length(string(num))\n        if  iseven(parse(Int64, string(num)[i]))\n\
    \            even_counter += 1\n        else\n            odd_counter += 1\n \
    \       end\n    end\n    return (even_counter, odd_counter)\nend", "    even_count\
    \ = 0\n    odd_count = 0\n    if num < 0\n        num = -num\n    end\n    while\
    \ num > 0\n        digit = num % 10\n        if digit % 2 == 0\n            even_count\
    \ += 1\n        else\n            odd_count += 1\n        end\n        num = num\
    \ // 10\n    end\n    return (even_count, odd_count)\nend", "    evens = 0\n \
    \   odds = 0\n    for digit in string(num)\n        if digit == '.'\n        \
    \    continue\n        end\n        digit = parse(Int64, digit)\n        if digit\
    \ % 2 == 0\n            evens += 1\n        else\n            odds += 1\n    \
    \    end\n    end\n    return evens, odds\nend", "    even_count = 0\n    odd_count\
    \ = 0\n    is_negative = num < 0\n    num = abs(num)\n    while num != 0\n   \
    \     last_digit = num % 10\n        num = num // 10\n        if last_digit %\
    \ 2 == 0\n            even_count += 1\n        else\n            odd_count +=\
    \ 1\n        end\n    end\n    return (even_count, odd_count)\nend\n@test even_odd_count(-12)\
    \ == (1, 1)\n@test even_odd_count(123) == (1, 2)", "    if num < 0\n        num\
    \ = abs(num)\n    end\n    evens = 0\n    odds = 0\n    while num != 0\n     \
    \   remain = num % 10\n        if remain % 2 == 0\n            evens += 1\n  \
    \      else\n            odds += 1\n        end\n        num = num / 10\n    end\n\
    \    return evens, odds\nend", "    even = 0\n    odd = 0\n    for i in num\n\
    \        if i % 2 == 0\n            even += 1\n        else\n            odd +=\
    \ 1\n        end\n    end\n    return even, odd\nend", "    neg_bit = 0\n    if\
    \ num < 0\n        neg_bit = 1\n        num = abs(num)\n    end\n    even_count\
    \ = 0\n    odd_count = 0\n    while num > 0\n        if mod(num, 2) == 0\n   \
    \         even_count += 1\n        else\n            odd_count += 1\n        end\n\
    \        num = num / 10\n    end\n    return (even_count, odd_count + neg_bit)\n\
    end", "    even = 0\n    odd = 0\n    while num > 0\n        if rem(num, 2) ==\
    \ 0\n            even += 1\n        else\n            odd += 1\n        end\n\
    \        num = num \xF7 10\n    end\n    return (even, odd)\nend", "    even_count\
    \ = 0\n    odd_count = 0\n    for d in digits(num)\n        if d % 2 == 0\n  \
    \          even_count += 1\n        else\n            odd_count += 1\n       \
    \ end\n    end\n    return (even_count, odd_count)\nend", "    even_count = 0\n\
    \    odd_count = 0\n    n = abs(num)\n    while n != 0\n        r = n % 10\n \
    \       if r % 2 == 0\n            even_count += 1\n        else\n           \
    \ odd_count += 1\n        end\n        n = div(n, 10)\n    end\n    return (even_count,\
    \ odd_count)\nend", "    even = 0\n    odd = 0\n    for i in digits(num)\n   \
    \     if i % 2 == 0\n            even += 1\n        else\n            odd += 1\n\
    \        end\n    end\n    return even, odd\nend", "    even = 0\n    odd = 0\n\
    \    while num != 0\n        r = mod(num, 10)\n        if r % 2 == 0\n       \
    \     even += 1\n        else\n            odd += 1\n        end\n        num\
    \ = div(num, 10)\n    end\n    return (even, odd)\nend", "    # even_count = 0\n\
    \    # odd_count = 0\n    # for i in digits(num)\n    #     if i % 2 == 0\n  \
    \  #         even_count += 1\n    #     else\n    #         odd_count += 1\n \
    \   #     end\n    # end\n    # return (even_count, odd_count)\n    # return (length(filter(x\
    \ -> x % 2 == 0, digits(num))), length(filter(x -> x % 2 != 0, digits(num))))\n\
    \    return (length(filter(x -> x % 2 == 0, [abs(i) for i in digits(num)])), length(filter(x\
    \ -> x % 2 != 0, [abs(i) for i in digits(num)])))\nend", "    countEven = 0\n\
    \    countOdd = 0\n    for digit in digits(num)\n        if digit % 2 == 0\n \
    \           countEven += 1\n        else\n            countOdd += 1\n        end\n\
    \    end\n    return (countEven, countOdd)\nend\n    \n    ", "    even = 0\n\
    \    odd = 0\n    for i in string(num)\n        if i=='0' || i=='2' || i=='4'\
    \ || i=='6' || i=='8'\n            even += 1\n        else\n            odd +=\
    \ 1\n        end\n    end\n    return (even, odd)\nend", "    e_count = 0\n  \
    \  o_count = 0\n    for i in 1:length(num)\n        if (num[i] % 2 == 0)\n   \
    \         e_count += 1\n        else\n            o_count += 1\n        end\n\
    \    end\n    return e_count, o_count\nend", "    even_num, odd_num = 0, 0\n \
    \   num = abs(num)\n    while num != 0\n        digit = num % 10\n        if digit\
    \ % 2 == 0\n            even_num += 1\n        else\n            odd_num += 1\n\
    \        end\n        num = div(num, 10)\n    end\n    return even_num, odd_num\n\
    end", "    even = 0\n    odd = 0\n    while num != 0\n        if num % 2 == 0\n\
    \            even += 1\n        else\n            odd += 1\n        end\n    \
    \    num = num \xF7 10\n    end\n    return (even, odd)\nend", "    @assert num\
    \ >= -10^18 && num <= 10^18\n    even = 0\n    odd = 0\n    num = abs(num)\n \
    \   while num > 0\n        if num % 2 == 0\n            even += 1\n        else\n\
    \            odd += 1\n        end\n        num = div(num, 10)\n    end\n    return\
    \ (even, odd)\nend", "    if num < 0\n        num = -num\n    end\n    even =\
    \ 0\n    odd = 0\n    while num > 0\n        if num % 2 == 0\n            even\
    \ += 1\n        else\n            odd += 1\n        end\n        num = div(num,\
    \ 10)\n    end\n    return (even, odd)\nend", "    even::Int64 = 0\n    odd::Int64\
    \ = 0\n    while num != 0\n        if num % 2 == 0\n            even += 1\n  \
    \      else\n            odd += 1\n        end\n        num /= 10\n    end\n \
    \   return (even, odd)\nend", "    evens = 0\n    odds = 0\n    while num > 0\n\
    \        d = num % 10\n        if d % 2 == 0\n            evens += 1\n       \
    \ else\n            odds += 1\n        end\n        num = div(num, 10)\n    end\n\
    \    return (evens, odds)\nend", "    num = abs(num)\n    n_even = 0\n    n_odd\
    \ = 0\n    while num != 0\n        m = num % 10\n        if m == 0 || m % 2 ==\
    \ 0\n            n_even += 1\n        else\n            n_odd += 1\n        end\n\
    \        num = (num - m) / 10\n    end\n    return (n_even, n_odd)\nend", "  \
    \  even_count = 0\n    odd_count = 0\n    for i in split(digits(num))\n      \
    \  if i % 2 == 0\n            even_count += 1\n        else\n            odd_count\
    \ += 1\n        end\n    end\n    (even_count, odd_count)\nend", "    _even =\
    \ 0\n    _odd = 0\n    if num == 0\n        return (1, 0)\n    end\n    if num\
    \ < 0\n        num = -num\n    end\n    while num > 0\n        if num % 2 == 0\n\
    \            _even += 1\n        else\n            _odd += 1\n        end\n  \
    \      num = trunc(Int64, num / 10)\n    end\n    return (_even, _odd)\nend",
  "  even_count, odd_count = 0, 0\n  for d in digits(num)\n    if d % 2 == 0\n   \
    \   even_count += 1\n    else\n      odd_count += 1\n    end\n  end\n  return\
    \ even_count, odd_count\nend", "    if num < 0\n        num = -num\n    end\n\
    \    even_count, odd_count = 0, 0\n    while num > 0\n        if mod(num, 2) ==\
    \ 0\n            even_count += 1\n        else\n            odd_count += 1\n \
    \       end\n        num = div(num, 10)\n    end\n    return even_count, odd_count\n\
    end", "    even_count, odd_count = 0, 0\n    for i in 1:length(string(num))\n\
    \        if num < 0\n            num = -num\n        end\n        if parse(Int64,\
    \ string(num)[i]) % 2 == 0\n            even_count += 1\n        else\n      \
    \      odd_count += 1\n        end\n    end\n    return even_count, odd_count\n\
    end", "    arr = split(string(num), \"\")\n    even, odd = 0, 0\n    for i in\
    \ arr\n        if parse(Int64, i) % 2 == 0\n            even += 1\n        else\n\
    \            odd += 1\n        end\n    end\n    return even, odd\nend", "   \
    \ even_cnt, odd_cnt = 0, 0\n    for i in 1:abs(num) \n        if num % 2 == 0\n\
    \            even_cnt += 1\n        else\n            odd_cnt += 1\n        end\n\
    \    end\n    return even_cnt, odd_cnt\nend", "    even, odd = 0, 0\n    while\
    \ num != 0\n        if num % 2 == 0\n            even += 1\n        else\n   \
    \         odd += 1\n        end\n        num = div(num, 10)\n    end\n    return\
    \ even, odd\nend", "    even::Int64 = 0\n    odd::Int64 = 0\n    num::Int64 =\
    \ abs(num)\n    while num != 0\n        if num % 2 == 0\n            even += 1\n\
    \        else\n            odd += 1\n        end\n        num = div(num, 10)\n\
    \    end\n    return (even, odd)\nend", "    even_count = 0\n    odd_count = 0\n\
    \    while(num != 0)\n        if(mod(num, 10) % 2 == 0)\n            even_count\
    \ += 1\n        else\n            odd_count += 1\n        end\n        num = div(num,\
    \ 10)\n    end\n    return (even_count, odd_count)\nend", "    even_count = 0\n\
    \    odd_count = 0\n    for x in digits(num)\n        if x % 2 == 0\n        \
    \    even_count += 1\n        else\n            odd_count += 1\n        end\n\
    \    end\n    return (even_count, odd_count)\nend", "    even = 0\n    odd = 0\n\
    \    while num > 0\n        if num % 2 == 0\n            even += 1\n        else\n\
    \            odd += 1\n        end\n        num = num \xF7 10\n    end\n    return\
    \ (even, odd)\nend", "    even_count = 0\n    odd_count = 0\n    for n in digits(num)\n\
    \        if n%2 == 0\n            even_count += 1\n        else\n            odd_count\
    \ += 1\n        end\n    end\n    return (even_count, odd_count)\nend", "    \n\
    \    (even_digits, odd_digits) = (0, 0)\n    \n    for i in abs(num)\n       \
    \ if i%2 == 0\n            even_digits += 1\n        else\n            odd_digits\
    \ += 1\n        end\n    end\n    \n    return (even_digits, odd_digits)\nend\n\
    \ ", "    evens = 0\n    odds = 0\n    for i in string(num)\n        if parse(Int64,\
    \ i) % 2 == 0\n            evens += 1\n        else\n            odds += 1\n \
    \       end\n    end\n    return (evens, odds)\nend", "    (odds, evens) = (0,\
    \ 0)\n    for i in digits(num)\n        (odds, evens) = (odds + (i % 2 != 0),\
    \ evens + (i % 2 == 0))\n    end\n    return (evens, odds)\nend", "    even =\
    \ 0\n    odd = 0\n    while num != 0\n        if num % 2 == 0\n            even\
    \ += 1\n        else\n            odd += 1\n        end\n        num = num//10\n\
    \    end\n    return (even, odd)\nend", "    even_count = 0\n    odd_count = 0\n\
    \    for i in num\n        if i % 2 == 0\n            even_count += 1\n      \
    \  else\n            odd_count += 1\n        end\n    end\n    (even_count, odd_count)\n\
    end", "    evens = 0\n    odds = 0\n    for numchar in string(num)\n        if\
    \ numchar in \"13579\"\n            odds += 1\n        else\n            evens\
    \ += 1\n        end\n    end\n    return evens, odds\nend", "    e, o = 0, 0\n\
    \    if num < 0 \n        num = -num\n    end\n    for i in 0:num\n        if\
    \ i % 2 == 0\n            e += 1\n        else \n            o += 1\n        end\n\
    \    end\n    return e, o\nend", "    # Create an array that stores the even and\
    \ odd count digits\n    even_count = odd_count = 0\n    # Get the absolute value\
    \ of the integer\n    num = abs(num)\n    # Iterate over the input number\n  \
    \  while num != 0\n        # Get the current digit\n        digit = num % 10\n\
    \        # Check if the digit is even or odd\n        if digit % 2 == 0\n    \
    \        even_count += 1\n        else\n            odd_count += 1\n        end\n\
    \        # Shift the number to the right\n        num = num / 10\n    end\n  \
    \  # Return the even and odd count\n    return even_count, odd_count\nend", " \
    \   \n    even_count = 0\n    odd_count = 0\n    \n    for i in num:\n       \
    \ if iseven(abs(i)) == true:\n            even_count += 1\n        else\n    \
    \        odd_count += 1\n        end\n    end\n    return (even_count, odd_count)\n\
    \    \nend", "  even = 0\n  odd = 0\n  for c in string(num)\n    c = int(c)\n\
    \    if c % 2 == 0\n      even += 1\n    else\n      odd += 1\n    end\n  end\n\
    \  return even, odd\nend", "    evens = 0\n    odds = 0\n    for digit in digits(num)\n\
    \        if digit % 2 == 0\n            evens += 1\n        else\n           \
    \ odds += 1\n        end\n    end\n    return evens, odds\nend", "    even, odd\
    \ = 0, 0 \n    while num > 0 \n        if num % 2 == 0 \n            even += 1\
    \ \n        else \n            odd += 1 \n        end \n        num = div(num,\
    \ 10) \n    end \n    return even, odd \nend ", "    num = abs(num)\n    even\
    \ = 0\n    odd = 0\n    for i in digits(num)\n        if i % 2 == 0\n        \
    \    even += 1\n        else\n            odd += 1\n        end\n    end\n   \
    \ (even, odd)\nend", "    # Your code here\n    even_count = 0\n    odd_count\
    \ = 0\n    for c in num\n        if c % 2 == 0\n            even_count += 1\n\
    \        else\n            odd_count += 1\n        end\n    end\n    return (even_count,\
    \ odd_count)\nend", "    odd_count, even_count = 0, 0\n    for i in string(num)\n\
    \        if i in \"13579\"\n            odd_count += 1\n        else\n       \
    \     even_count += 1\n        end\n    end\n    return even_count, odd_count\n\
    end"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
