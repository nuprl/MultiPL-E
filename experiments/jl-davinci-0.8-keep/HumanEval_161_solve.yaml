name: HumanEval_161_solve
language: jl
prompt: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case\
  \ from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the\
  \ string contains no letters, reverse the string.\n    The function should return\
  \ the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"\
  ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction solve(s::String)::String\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"AsDf\"\
  ) == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"ab\"\
  ) == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\"\
  ) == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
  #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
completions: ["    n = length(s)\n    res = \"\"\n    if n==0\n        return res\n\
    \    end\n    letters = [chr in 'a':'z' for chr in s]\n    if sum(letters) ==\
    \ 0\n        return reverse(s)\n    end\n    for i=1:n\n        if letters[i]==1\n\
    \            res *= uppercase(s[i])\n        else\n            res *= lowercase(s[i])\n\
    \        end\n    end\n    return res\nend", "    len = length(s)\n    i = 1\n\
    \    new_s = \"\"\n    while i <= len\n        c = s[i]\n        if (('a' <= c\
    \ <= 'z') || ('A' <= c <= 'Z'))\n            if (c == 'a' || c == 'A')\n     \
    \           c = 'Z'\n            elseif (c == 'z' || c == 'Z')\n             \
    \   c = 'A'\n            else\n                c = Char(Int(c) + (Int('A') - Int('a')))\n\
    \            end\n        end\n        new_s = new_s * c\n        i += 1\n   \
    \ end\n    new_s\nend", "    if length(s) == 0\n        return s\n    end\n  \
    \  if length(s) == 1\n        return s\n    end\n    result = \"\"\n    for letter\
    \ in s\n        if letter in String(\"abcdefghijklmnopqrstuvwxyz\")\n        \
    \    result = string(result, uppercase(letter))\n        elseif letter in String(\"\
    ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n            result = string(result, lowercase(letter))\n\
    \        else\n            result = string(result, letter)\n        end\n    end\n\
    \    if result == s\n        return string(reverse(s))\n    else\n        return\
    \ result\n    end\nend", "    s == reverse(s) ? s : join([string(i) in letters\
    \ ? ifelse(islower(i), uppercase(i), lowercase(i)) : i for i in s])\nend", " \
    \   l = length(s)\n    new_s = \"\"\n    for i in 1:l\n        c = s[i]\n    \
    \    if islower(c)\n            new_s = string(new_s, string(c):upper())\n   \
    \     elseif isupper(c)\n            new_s = string(new_s, string(c):lower())\n\
    \        else\n            new_s = string(new_s, c)\n        end\n    end\n  \
    \  return new_s\nend\nsolve(\"1234\")", "    @show s\n    if (isequal(s, split(reverse(s),\
    \ \"\")))\n        s\n    else\n        string(map(x -> x == 'a' ? 'A' : x ==\
    \ 'A' ? 'a' : \n                                    x == 'b' ? 'B' : x == 'B'\
    \ ? 'b' : \n                                    x == 'c' ? 'C' : x == 'C' ? 'c'\
    \ : \n                                    x == 'd' ? 'D' : x == 'D' ? 'd' : \n\
    \                                    x == 'e' ? 'E' : x == 'E' ? 'e' : \n    \
    \                                x == 'f' ? 'F' : x == 'F' ? 'f' : \n        \
    \                            x == 'g' ? 'G' : x == 'G' ? 'g' : \n            \
    \                        x == 'h' ? 'H' : x == 'H' ? 'h' : \n                \
    \                    x == 'i' ? 'I' : x == 'I' ? 'i' : \n                    \
    \                x == 'j' ? 'J' : x == 'J' ? 'j' : \n                        \
    \            x == 'k' ? 'K' : x == 'K' ? 'k' : \n                            \
    \        x == 'l' ? 'L' : x == 'L' ? 'l' : \n                                \
    \    x == 'm' ? 'M' : x == 'M' ? 'm' : \n                                    x\
    \ == 'n' ? 'N' : x == 'N' ? 'n' : \n                                    x == 'o'\
    \ ? 'O' : x == 'O' ? 'o' : \n                                    x == 'p' ? 'P'\
    \ : x == 'P' ? 'p' : \n                                    x == 'q' ? 'Q' : x\
    \ == 'Q' ? 'q' : \n                                    x == 'r' ? 'R' : x == 'R'\
    \ ? 'r' : \n                                    x == 's' ? 'S' : x == 'S' ? 's'\
    \ : \n                                    x == 't' ? 'T' : x == 'T' ? 't' :",
  "    lower_to_upper(c::Char) = Char(c[1] - ('a' - 'A'))\n    upper_to_lower(c::Char)\
    \ = Char(c[1] + ('a' - 'A'))\n    isletter(c::Char) = 'a' <= c[1] <= 'z' || 'A'\
    \ <= c[1] <= 'Z'\n    if isletter(s[1])\n        if isletter(s[length(s)])\n \
    \           return s[length(s)] * string(map(lower_to_upper, s[1:length(s) - 1]))\
    \ * s[1]\n        else\n            return s[length(s)] * string(map(lower_to_upper,\
    \ s[1:length(s)]))\n        end\n    else\n        return s[length(s)] * string(map(lower_to_upper,\
    \ s[1:length(s) - 1])) * s[1]\n    end\nend", "    # Return reverse of string\
    \ if all chars are not letters\n    if !isletter.(s)\n        return reverse(s)\n\
    \    end\n    # Transform the string based on its letter and revers it.\n    return\
    \ reverse(isletter.(s) .* islower.(s) .* uppercase.(s) .+ isletter.(s) .* isupper.(s)\
    \ .* lowercase.(s) .+ isletter.(s) .* s)\nend\n \n@assert solve(\"1234\") == \"\
    4321\"\n@assert solve(\"ab\") == \"AB\"\n@assert solve(\"#a@C\") == \"#A@c\"\n\
    \ \n \n# https://docs.julialang.org/en/v1/manual/unicode-input/index.html\n# https://docs.julialang.org/en/v1/stdlib/Random/index.html\n\
    # https://docs.julialang.org/en/v1/stdlib/Base/#Base.LinSpace\n# https://docs.julialang.org/en/v1/stdlib/Random/#Random.seed!-Tuple{Any}\n\
    # https://docs.julialang.org/en/v1/stdlib/Base/#Base.reinterpret\n# https://docs.julialang.org/en/v1/stdlib/Pkg/index.html\n\
    # https://docs.julialang.org/en/v1/manual/packages/index.html\n# https://docs.julialang.org/en/v1/manual/unicode-input/index.html\n\
    # https://docs.julialang.org/en/v1/stdlib/Random/index.html\n# https://docs.julialang.org/en/v1/stdlib/Base/#Base.LinSpace\n\
    # https://docs.julialang.org/en/v1/stdlib/Random/#Random.seed!-Tuple{Any}\n# https://docs.julialang.org/en/v1/stdlib/Base/#Base.reinterpret\n\
    # https://docs.julialang.org/en/v1/stdlib/Pkg/", "    \n    function reverseCase(x::Char)::Char\n\
    \        if x in 'a'..'z'\n            return x |> Char\n        elseif x in 'A'..'Z'\n\
    \            return x |> Char\n        else \n            return x\n        end\n\
    \    end\n    \n    if any(x in ['a'..'z' 'A'..'Z'] for x in s)\n        return\
    \ string(reverseCase.(s))\n    else\n        return string(reverseCase.(s))\n\
    \    end\nend\nsolve(\"1234\")", "    if length(s) > 0\n        for i in 1:length(s)\n\
    \            if s[i] in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n                s[i] = convert(Char,\
    \ lowercase(s[i]))\n            elseif s[i] in 'abcdefghijklmnopqrstuvwxyz'\n\
    \                s[i] = convert(Char, uppercase(s[i]))\n            end\n    \
    \    end\n    end\n    if length(s) == 0 \n        s\n    else \n        reverse(s)\n\
    \    end\nend", "    s = reverse(s)\n    chars = collect(s)\n    #print(chars)\n\
    \    t = []\n    for c in chars\n        if isalpha(c)\n            push!(t, lowercase(c))\n\
    \        else\n            push!(t, c)\n        end\n    end\n    return join(t)\n\
    end", "    if length(s) < 1\n        return \"\"\n    end\n    str = \"\"\n  \
    \  for letter in s\n        if letter in \"Aa\"\n            str = str * (lowercase(letter))\n\
    \        elseif letter in \"Bb\"\n            str = str * (uppercase(letter))\n\
    \        elseif letter in \"Cc\"\n            str = str * (lowercase(letter))\n\
    \        elseif letter in \"Dd\"\n            str = str * (uppercase(letter))\n\
    \        elseif letter in \"Ee\"\n            str = str * (lowercase(letter))\n\
    \        elseif letter in \"Ff\"\n            str = str * (uppercase(letter))\n\
    \        elseif letter in \"Gg\"\n            str = str * (lowercase(letter))\n\
    \        elseif letter in \"Hh\"\n            str = str * (uppercase(letter))\n\
    \        elseif letter in \"Ii\"\n            str = str * (lowercase(letter))\n\
    \        elseif letter in \"Jj\"\n            str = str * (uppercase(letter))\n\
    \        elseif letter in \"Kk\"\n            str = str * (lowercase(letter))\n\
    \        elseif letter in \"Ll\"\n            str = str * (uppercase(letter))\n\
    \        elseif letter in \"Mm\"\n            str = str * (lowercase(letter))\n\
    \        elseif letter in \"Nn\"\n            str = str * (uppercase(letter))\n\
    \        elseif letter in \"Oo\"\n            str = str * (lowercase(letter))\n\
    \        elseif letter in \"Pp\"\n            str = str * (uppercase(letter))\n\
    \        elseif letter in \"Qq\"\n            str = str * (lowercase(letter))\n\
    \        elseif letter in \"Rr\"\n            str = str * (uppercase(letter))\n\
    \        elseif letter in \"Ss\"\n            str = str * (lowercase(letter))\n\
    \        elseif letter in \"Tt\"\n            str = str * (uppercase(letter))\n\
    \        elseif letter in \"Uu\"\n            str = str * (lowercase(letter))\n\
    \        elseif letter in \"Vv\"\n            str =", "    if any(x in \"a-zA-Z\"\
    \ for x in s) # if the string contains a letter\n        x::Int=0\n        for\
    \ i=1:length(s) #loop through the string\n            if s[i] in \"a-zA-Z\" #\
    \ if the character is a letter\n                if s[i] in \"a-z\" # lower case\n\
    \                    s[i]=uppercase(s[i]) # make upper case\n                else\n\
    \                    s[i]=lowercase(s[i]) # make lower case\n                end\n\
    \            end\n        end\n    else\n        s=reverse(s) # if there are no\
    \ letters, reverse the string\n    end\n    return s\nend\nsolve(\"#a@C\")", " \
    \   idx = 1\n    for i=1:length(s)\n        if isalpha(s[i])\n            idx\
    \ = i\n            break\n        end\n    end\n    if idx == 1\n        return\
    \ reverse(s)\n    end\n    s = s[idx:end]\n    s = reverse(s)\n    res = \"\"\n\
    \    for i=1:length(s)\n        res *= s[i]\n        if islower(s[i])\n      \
    \      res[end] = uppercase(s[i])\n        elseif isupper(s[i])\n            res[end]\
    \ = lowercase(s[i])\n        end\n    end\n    res = reverse(res)\n    return\
    \ res\nend", "    a=Array{Char}(s)\n    isalpha(a)==false && reverse!(a)\n   \
    \ for i=1:length(a)\n        isalpha(a[i]) && islower(a[i]) && (a[i]=uppercase(a[i]))\n\
    \        isalpha(a[i]) && isupper(a[i]) && (a[i]=lowercase(a[i]))\n    end\n \
    \   join(a)\nend", "    m = length(s)\n    if m == 0\n        return s\n    end\n\
    \    s = uppercase(s)\n    indices = zeros(Int,m)\n    for i = 1:m\n        if\
    \ isletter(s[i]) == true\n            indices[i] = i\n        end\n    end\n \
    \   indices = indices[indices .!= 0]\n    indices = sort(indices, rev=true)\n\
    \    if length(indices) != 0\n        for i = 1:length(indices)\n            s[indices[i]]\
    \ = lowercase(s[indices[i]])\n        end\n    else\n        s = reverse(s)\n\
    \    end\n    return s\nend\nsolve(\"#a@C\") #\"#A@c\"\nsolve(\"\") #\"\"\nsolve(\"\
    1234\") #\"4321\"", "    n = length(s)\n    isalpha(s) == false && return reverse(s)\n\
    \    #letters = [s[i] for i in 1:n if isalpha(s[i])]\n    letters = [s[i] for\
    \ i in 1:n if isalpha(s[i])]\n    reverse_letters = reverse(letters)\n    for\
    \ i in 1:n\n        if isalpha(s[i])\n            reverse_letters[i] = reverse_case(s[i])\n\
    \        end\n    end\n    return reverse_letters\nend", "  str = convert(String,\
    \ s)\n  if !occursin('a', str) && !occursin('A', str) && !occursin('b', str) &&\
    \ !occursin('B', str) && !occursin('c', str) && !occursin('C', str) && !occursin('d',\
    \ str) && !occursin('D', str) && !occursin('e', str) && !occursin('E', str) &&\
    \ !occursin('f', str) && !occursin('F', str) && !occursin('g', str) && !occursin('G',\
    \ str) && !occursin('h', str) && !occursin('H', str) && !occursin('i', str) &&\
    \ !occursin('I', str) && !occursin('j', str) && !occursin('J', str) && !occursin('k',\
    \ str) && !occursin('K', str) && !occursin('l', str) && !occursin('L', str) &&\
    \ !occursin('m', str) && !occursin('M', str) && !occursin('n', str) && !occursin('N',\
    \ str) && !occursin('o', str) && !occursin('O', str) && !occursin('p', str) &&\
    \ !occursin('P', str) && !occursin('q', str) && !occursin('Q', str) && !occursin('r',\
    \ str) && !occursin('R', str) && !occursin('s', str) && !occursin('S', str) &&\
    \ !occursin('t', str) && !occursin('T', str) && !occursin('u', str) && !occursin('U',\
    \ str) && !occursin('v', str) && !occursin('V', str) && !occursin('w', str) &&\
    \ !occursin('W', str) && !occursin('x', str) && !occursin('X', str) && !occursin('y',\
    \ str) && !occursin('Y', str)", "    res = \"\"\n    letter_found = false\n  \
    \  for i in s\n        if \"a\" <= i <= \"z\" || \"A\" <= i <= \"Z\"\n       \
    \     letter_found = true\n            res *= uppercase(i) > i ? uppercase(i)\
    \ : lowercase(i)\n        else\n            res *= i\n        end\n    end\n \
    \   if !letter_found\n        res = reverse(res)\n    end\n    return res\nend",
  "    if s[i] in (\"a\"...\"z\" \"A\"...\"Z\")\n        return s[i] * s[i+1]\n  \
    \  else \n        return s\n    end\nend", "    s = s.reverse\n    if s == s.uppercase\
    \ || s == s.lowercase || s == \"\"\n        s = s.reverse\n    else\n        for\
    \ i=1:length(s)\n            if s[i] in ['a':'z']\n                s[i] = uppercase(s[i])\n\
    \            elseif s[i] in ['A':'Z']\n                s[i] = lowercase(s[i])\n\
    \            end\n        end\n    end\n    return s\nend\nsolve(\"aB\")", " \
    \   return (s==reverse(s) ? s : reverse(s)) * (String(any(isalpha,s)) !=\"false\"\
    )\nend", "    count = 0\n    for c in s\n        if isalpha(c)\n            count\
    \ += 1\n        end\n    end\n    if count == 0\n        for i in 1:size(s)[1]\n\
    \            s[i] = s[end-i+1]\n        end\n    else\n        for i in 1:size(s)[1]\n\
    \            if isalpha(s[i])\n                s[i] = uppercase(s[i]) ? lowercase(s[i])\
    \ : uppercase(s[i])\n            end\n        end\n    end\n    return s\nend",
  "    if any(c in \"abcdefghijklmnopqrstuvwxyz\" for c in s)\n        return join(lowercase(c)\
    \ ? uppercase(c) : lowercase(c) for c in s)\n    else\n        return join(reverse(s))\n\
    \    end\nend", "    letters = [c for c in s if c in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ']\n\
    \    if length(letters) == 0\n        s = reverse(s)\n    else\n        for c\
    \ in letters\n            if c in 'abcdefghijklmnopqrstuvwxyz'\n             \
    \   s = replace(s, c, uppercase(c))\n            else\n                s = replace(s,\
    \ c, lowercase(c))\n            end\n        end\n    end\n    return s\nend",
  "    return s |> \n    x->\n        if x == \"\"\n            return x\n       \
    \ elseif first(x) in [x in 'a':'z' for x in '#a@C']\n            return reverse(x)\n\
    \        elseif first(x) in [x in 'A':'Z' for x in '#a@C']\n            return\
    \ reverse(x)\n        else\n            return \"nothing\"\n        end\n    end\n\
    end", "    if findall(isalpha, s) == []\n        reverse(s)\n    else\n      \
    \  for i in eachindex(s)\n            if isalpha(s[i])\n                if islower(s[i])\n\
    \                    s[i] = uppercase(s[i])\n                else\n          \
    \          s[i] = lowercase(s[i])\n                end\n            end\n    \
    \    end\n        s\n    end\nend", "    if !contains(any(char in s for char in\
    \ \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\")) \n        return\
    \ reverse(s)\n    end\n    count = 0\n    for i = 1:length(s)\n        if s[i]\
    \ in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n            if\
    \ s[i] in \"abcdefghijklmnopqrstuvwxyz\"\n                count = count + 1\n\
    \                s[i] = uppercase(s[i])\n            else\n                count\
    \ = count + 1\n                s[i] = lowercase(s[i])\n            end\n     \
    \   end\n    end\n    if count == 0\n        return reverse(s)\n    end\n    return\
    \ s\nend", "    if any([ismatch(r\"\\p{Alpha}\", x) for x in s])\n        res\
    \ = String[]\n        for x in s\n            if ismatch(r\"\\p{Lower}\", x)\n\
    \                push!(res, uppercase(x))\n            elseif ismatch(r\"\\p{Upper}\"\
    , x)\n                push!(res, lowercase(x))\n            else\n           \
    \     push!(res, x)\n            end\n        end\n        return join(res)\n\
    \    else\n        return reverse(s)\n    end\nend", "    str = \"\"\n    for\
    \ c in s\n        if c in \"abcdefghijklmnopqrstuvwxyz\"\n            push!(str,\
    \ uppercase(c))\n        elseif c in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n        \
    \    push!(str, lowercase(c))\n        else\n            push!(str, c)\n     \
    \   end\n    end\n    str = reverse(str)\n    str\nend", "    if s == \"\"\n \
    \       return s\n    end\n    new = \"\"\n    for c in s\n        if c \u2208\
    \ 'abcdefghijklmnopqrstuvwxyz'\n            push!(new,uppercase(c))\n        elseif\
    \ c \u2208 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n            push!(new,lowercase(c))\n\
    \        else\n            push!(new,c)\n        end\n    end\n    new\nend",
  "    #using string_uppercase and string_lowercase constants from `Base.Regex`\n\
    \    [string_uppercase, string_lowercase]\n    #use regex to match a letter with\
    \ non-caps case (i.e. lower case).\n    re = r\"[#{string_lowercase}]\"\n    #for\
    \ every letter in string, if it's lowercase, capitalize it, else lowercase it.\n\
    \    return [isalpha(c) ? islower(c) ? uppercase(c) : lowercase(c) : c for c in\
    \ s] |> join\nend", "    # write your code here\n    return s\nend\n \n\"\"\"\
    You are given a string s.\n    if s[i] is a letter, reverse its case from lower\
    \ to upper or vise versa, \n    otherwise keep it as it is.\n    If the string\
    \ contains no letters, reverse the string.\n    The function should return the\
    \ resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"\
    ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"", "    for i = 1:length(s)\n\
    \        if isletter(s[i])\n            s[i] = swapcase(s[i])\n        end\n \
    \   end\n    return s\nend", "    # convert s to array\n    A = collect(s) \n\
    \    #if s has no letter, reverse it.\n    if (all(isascii,A)==false)\n      \
    \  A = reverse(A)\n    else\n        # for loop to swap lower to upper or upper\
    \ to lower\n        for i in 1:length(A)\n            c = A[i]\n            c_upper\
    \ = uppercase(c)\n            if(c in string(\"abcdefghijklmnopqrstuvwxyz\"))\n\
    \                A[i] = c_upper\n            elseif(c in string(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ))\n                A[i] = lowercase(c)\n            end\n        end\n    end\n\
    \    join(A)\nend", "    if !isalpha(s)\n        return \"No letter in string\"\
    \n    end\n    res = \"\"\n    for i in 1:length(s)\n        if isupper(s[i])\n\
    \            res = res * string(lowercase(s[i]))\n        else\n            res\
    \ = res * string(uppercase(s[i]))\n        end\n    end\n    return res\nend",
  "    m = [(ch-> upper(ch)) for ch in s]\n    for i in 1:length(s)\n        if (isalpha(s[i]))\n\
    \            m[i] = (ch->lower(ch))\n        end\n    end\n    return String(m)\n\
    end", "    reverse!(s)\n    for i in 1:length(s)\n        if (isalpha(s[i]))\n\
    \            s[i] = uppercase(s[i])\n        elseif (islowercase(s[i]))\n    \
    \        s[i] = lowercase(s[i])\n        end\n    end\n    return s\nend\n ",
  "    # remove all characters that are not either lower or upper case\n    s1 = [x\
    \ for x in s if in(lowercase(x), s) || in(uppercase(x), s)]\n    # if the string\
    \ is empty, reverse the original string and return\n    if isempty(s1)\n     \
    \   return reverse(s)\n    end\n    # reverse the string and reverse the case\
    \ of each element\n    return [s1[i] == lowercase(s1[i]) ? uppercase(s1[i]) :\
    \ lowercase(s1[i]) for i in 1:length(s1)] |> reverse |> string\nend", "    #your\
    \ code here\n    return s\nend\n ", "    \"\"\"Function that solve the kata\n\
    \    Example\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n   \
    \ solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    lower = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    upper = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    s_list = collect(s)\n    for\
    \ i in 1:length(s_list)\n        if s_list[i] in lower\n            s_list[i]\
    \ = uppercase(s_list[i])\n        elseif s_list[i] in upper\n            s_list[i]\
    \ = lowercase(s_list[i])\n        end\n    end\n    join(s_list)\nend", "    r\
    \ = \"\"\n    if ismatch(r\"^[a-zA-Z]+$\", s) == nothing\n        for i in s\n\
    \            if r\"a\" <= i <= r\"z\"\n                push!(r, uppercase(i))\n\
    \            elseif r\"A\" <= i <= r\"Z\"\n                push!(r, lowercase(i))\n\
    \            else\n                push!(r, i)\n            end\n        end\n\
    \    else\n        r = string(reverse(s))\n    end\n    return r\nend", "    new\
    \ = []\n    for i in s\n        if i in 'abcdefghijklmnopqrstuvwxyz'\n       \
    \     new = append!(new, uppercase(i))\n        elseif i in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\
    \            new = append!(new, lowercase(i))\n        else\n            new =\
    \ append!(new, i)\n        end\n    end\n    return join(reverse(new))\nend",
  "    if any(isalpha, s)\n        [isalpha(x) ? upper(x) : x == lower(x) ? upper(x)\
    \ : lower(x) for x in s]\n    else\n        reverse(s)\n    end\nend", "    \n\
    \    for i in s\n        if i in letters\n            i = i^32\n        end\n\
    \    end\n    return s\nend", "    my_s = [i for i in s]\n    if s == \"\"\n \
    \       return s\n    end\n    for (i, j) in enumerate(my_s)\n        if isletter(j)\
    \ == true\n            my_s[i] = \n                if isupper(j) == true\n   \
    \                 j = j |> lowercase\n                else\n                 \
    \   j = j |> uppercase\n                end\n        end\n    end\n    return\
    \ join(my_s)\nend", "    s = s[reverse(collect(1:length(s)))]\n    for i in eachindex(s)\n\
    \        if s[i] in 'bcdfghjklmnpqrstvwxyz'\n            s[i] = uppercase(s[i])\n\
    \        elseif s[i] in 'BCDFGHJKLMNPQRSTVWXYZ'\n            s[i] = lowercase(s[i])\n\
    \        end\n    end\n    return s\nend", "    string.reverse(lowercase(s))\n\
    end", "    if !any(x->x in \"abcdefghijklmnopqrstuvwxyz\",s)\n        return reverse(s)\n\
    \    end\n    s=collect(s)\n    for i in eachindex(s)\n        if s[i] in \"abcdefghijklmnopqrstuvwxyz\"\
    \n            if s[i] in uppercase(s)\n                s[i]=lowercase(s[i])\n\
    \            else\n                s[i]=uppercase(s[i])\n            end\n   \
    \     end\n    end\n    join(s)\nend", "    \n    newstr=\"\"\n    if s==reverse(s)\n\
    \        return s\n    end\n    for i in s\n        if i in 'abcdefghijklmnopqrstuvwxyz'\n\
    \            newstr=newstr*string(upper(i))\n        elseif i in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\
    \            newstr=newstr*string(lower(i))\n        else\n            newstr=newstr*string(i)\n\
    \        end\n    end\n    return newstr\nend", "    if isalpha(s) == false\n\
    \        reverse(s)\n    else\n        for i in s\n            if islower(i) ==\
    \ true\n                i = uppercase(i)\n            else\n                i\
    \ = lowercase(i)\n            end\n        end\n    end\nend", "    if ismatch(r\"\
    [a-zA-Z]\", s) != nothing \n        return s.replaceall(s,s[s.a:s.Z])\n    else\n\
    \        return reverse(s)\n    end\nend\nsolve(\"1234\")", "    for i in 1:length(s)\n\
    \        if isletter(s[i])\n            if islower(s[i])\n                s[i]\
    \ = uppercase(s[i])\n            elseif isupper(s[i])\n                s[i] =\
    \ lowercase(s[i])\n            end\n        end\n    end\n    return s\nend",
  "   \n    mystring = []\n    for i in s\n        if i in \"abcdefghijklmnopqrstuvwxyz\"\
    \n            push!(mystring,upper(i))\n        elseif i in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n            push!(mystring,lower(i))\n        else \n            push!(mystring,i)\n\
    \        end\n    end\n    if isempty(mystring)\n        return reverse(s)\n \
    \   else\n        return join(mystring)\n    end\nend", "    t = ''\n    if s\
    \ == ''\n        return s\n    end\n    for i in s\n        if (i in \"abcdefghijklmnopqrstuvwxyz\"\
    )\n            append!(t, uppercase(i))\n        elseif (i in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    )\n            append!(t, lowercase(i))\n        else\n            append!(t,\
    \ i)\n        end\n    end\n    return t\nend", "    reversed_str = []\n    for\
    \ letter in s\n        if letter in \"abcdefghijklmnopqrstuvwxyz\"\n         \
    \   push!(reversed_str, upper(letter))\n        elseif letter in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n            push!(reversed_str, lower(letter))\n        else\n            push!(reversed_str,\
    \ letter)\n        end\n    end\n    return join(reversed_str)\nend", "    return\
    \ \"ab\"\nend", "    num = length(s)\n    out = \"\"\n    for i in 1:num\n   \
    \     if s[i]==lowercase(s[i])\n            out = out*upper(s[i])\n        elseif\
    \ s[i]==uppercase(s[i])\n            out = out*lower(s[i])\n        else\n   \
    \         out = out*s[i]\n        end\n    end\n    return out\nend", "    s =\
    \ reverse(s)\n    for i in 1:length(s)\n        if isalpha(s[i])\n           \
    \ s[i] = uppercase(s[i])\n        else\n            s[i] = lowercase(s[i])\n \
    \       end\n    end\n    s\nend", "  x = reverse(replace(replace(replace(s, r\"\
    [a-z]\", x -> uppercase(x)), r\"[A-Z]\", x -> lowercase(x)),r\"[\\W]+\", \"\"\
    ))\n  if length(x) > 0\n    return x\n  else\n    return reverse(s)\n  end\nend\n\
    # tests\n@test setequal(solve(\"1234\"), \"4321\")\n@test setequal(solve(\"ab\"\
    ), \"AB\")\n@test setequal(solve(\"#a@C\"), \"#A@c\")", "    if s == reverse(s)\n\
    \        return s\n    end\n    if !(any(x -> x in \"a-zA-Z\", s))\n        return\
    \ reverse(s)\n    end\n    return collect(x -> \n        if x in \"a-zA-Z\"\n\
    \            isupper(x) ? Char(Int(x) + 32) : Char(Int(x) - 32)\n        else\n\
    \            x\n        end, s)\nend", "    # your code\nend\nsolve(\"1234\")\
    \ == \"4321\" || throw(AssertionError())\nsolve(\"ab\") == \"AB\" || throw(AssertionError())\n\
    solve(\"#a@C\") == \"#A@c\" || throw(AssertionError())\n ", "    f(x::Char) =\
    \ isalpha(x) ? uppercase(x) : lowercase(x)\n    isalpha(s) || return reverse(s)\n\
    \    join(f.(s))\nend", "    res = \"\"\n    for i in 1:length(s)\n        if\
    \ isletter(s[i])\n            if islower(s[i])\n                res = res * upper(s[i])\n\
    \            else\n                res = res * lower(s[i])\n            end\n\
    \        else\n            res = res * s[i]\n        end\n    end\n    if length(res)\
    \ == 0\n        return s\n    else\n        return res\n    end\nend", "    if\
    \ isempty(s)\n        return \"\"\n    end\n    if isletter(s[1])\n        return\
    \ uppercase(s[1]) * solve(s[2:end])\n    else\n        return s[1] * solve(s[2:end])\n\
    \    end\nend", "    for c in s\n        if in('a'..'z', c) || in('A'..'Z', c)\n\
    \            return reverse(s)\n        end\n    end\n    return s\nend", "  \
    \  non_letters = Regex(\"[^a-zA-Z]\")\n    if non_letters === r\"^[^a-zA-Z]*$\"\
    \n        reverse(s)\n    else\n        for c in s\n            if c isa Character\n\
    \                c == upper(c) ? lower(c) : upper(c)\n            end\n      \
    \  end\n    end\nend", "    if s == s[]\n        return s\n    elseif s in 'a'..'z'\n\
    \        return uppercase(s)\n    else\n        return lowercase(s)\n    end\n\
    end", "    if length(s) == 0\n        return s\n    end\n    i = 1\n    s_arr\
    \ = []\n    flag = false\n    while i <= length(s)\n        if s[i] in string(\"\
    AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\")\n            flag = true\n\
    \            s_arr = append(s_arr, string(s[i]))\n        else\n            s_arr\
    \ = append(s_arr, s[i])\n        end\n        i += 1\n    end\n    if flag\n \
    \       s_arr = reverse(s_arr)\n    end\n    return join(s_arr, \"\")\nend", " \
    \   s = reverse(s)\n    s = map(a -> isalnum(a) ? isupper(a) ? a \n          \
    \                              : a->upper\n                                  \
    \      : a,\n                                        s)\n    return s\nend", " \
    \   for i in 1:length(s)\n        if s[i] in [char(x) for x in 33:126]\n     \
    \       if s[i] \u2208 'abcdefghijklmnopqrstuvwxyz'\n                s[i] = uppercase(s[i])\n\
    \            elseif s[i] \u2208 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n               \
    \ s[i] = lowercase(s[i])\n            end\n        end\n    end\n    return s\n\
    end\nsolve(\"1234\")\nsolve(\"ab\")\nsolve(\"#a@C\")", "    n = length(s)\n  \
    \  res = String[]\n    for i in 1:n\n        if s[i] in ASCIIString(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n            push!(res,uppercase(s[i]))\n        elseif s[i] in ASCIIString(\"\
    ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n            push!(res,lowercase(s[i]))\n      \
    \  else\n            push!(res,s[i])\n        end\n    end\n    if length(res)\
    \ == 0\n        res = reverse(s)\n    else\n        res = join(res)\n    end\n\
    \    return res\nend", "    if !occursin('a', s) && !occursin('A', s)\n      \
    \  return reverse(s)\n    end\n    output = \"\"\n    for i in 1:length(s)\n \
    \       if occursin('a', s[i])\n            output *= uppercase(s[i])\n      \
    \  elseif occursin('A', s[i])\n            output *= lowercase(s[i])\n       \
    \ else\n            output *= s[i]\n        end\n    end\n    return output\n\
    end", "    s_arr = collect(s)\n    reverse_array = []\n    for i = 1:length(s_arr)\n\
    \        if s_arr[i] in ('a':'z')\n            push!(reverse_array, uppercase(s_arr[i]))\n\
    \        elseif s_arr[i] in ('A':'Z')\n            push!(reverse_array, lowercase(s_arr[i]))\n\
    \        else\n            push!(reverse_array, s_arr[i])\n        end\n    end\n\
    \    if length(reverse_array) == 0\n        reverse_array = s_arr\n    end\n \
    \   return join(reverse_array)\nend", "    string_to_reverse = \"\"\n    s = reverse(s)\n\
    \    for (index, letter) in enumerate(s)\n        if letter in \"abcdefghijklmnopqrstuvwxyz\"\
    \n            string_to_reverse *= uppercase(letter)\n        elseif letter in\
    \ \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n            string_to_reverse *= lowercase(letter)\n\
    \        else\n            string_to_reverse *= letter\n        end\n    end\n\
    \    string_to_reverse\nend", "    return join(reverse(collect(s)), \"\")\nend",
  "    return join(map( (x) -> (islower(x[1]) ? uppercase(x) : isupper(x[1]) ? lowercase(x)\
    \ : x), s))\nend", "    if s == \"\"\n        return s\n    end\n    str = \"\"\
    \n    for c in s\n        push!(str,(lowercase(c)<uppercase(c))?uppercase(c):lowercase(c))\n\
    \    end\n    return str\nend\nprintln(solve(\"1234\"))\nprintln(solve(\"ab\"\
    ))\nprintln(solve(\"#a@C\"))", "    if s in (\"a\" \"b\" \"c\" \"d\" \"e\" \"\
    f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"\
    s\" \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\" \"A\" \"B\" \"C\" \"D\" \"E\" \"\
    F\" \"G\" \"H\" \"I\" \"J\" \"K\" \"L\" \"M\" \"N\" \"O\" \"P\" \"Q\" \"R\" \"\
    S\" \"T\" \"U\" \"V\" \"W\" \"X\" \"Y\" \"Z\")\n        if s in (\"a\" \"b\" \"\
    c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"\
    p\" \"q\" \"r\" \"s\" \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\")\n           \
    \ return s |> String |> String |> String |> String |> String |> String |> String\
    \ |> String |> String |> String |> String |> String |> String |> String |> String\
    \ |> String |> String |> String |> String |> String |> String |> String |> String\
    \ |> String |> String |> String |> String |> String |> String |> String |> String\
    \ |> String |> String |> String |> String |> String |> String |> String |> String\
    \ |> String |> String |> String |> String |> String |> String |> String |> String\
    \ |> String |> String |> String |> String |> String |> String |> String |> String\
    \ |> String |> String |> String |> String |> String |> String |> String |> String\
    \ |> String |> String |> String |> String |> String |> String |> String |> String\
    \ |> String |> String |> String |> String |> String |> String |> String |> String\
    \ |> String |> String |> String |> String |> String |> String |> String |> String\
    \ |> String", "    if ~any(char->isalpha(char), s)\n        return reverse(s)\n\
    \    end\n    new_s = \"\"\n    for i in 1:length(s)\n        if isalpha(s[i])\n\
    \            if s[i] in ('a' : 'z')\n                new_s *= upper(s[i])\n  \
    \          else\n                new_s *= lower(s[i])\n            end\n     \
    \   else\n            new_s *= s[i]\n        end\n    end\n    return new_s\n\
    end", "    new_string = \"\"\n    tolower(lower::Int64, upper::Int64) = convert(Int64,\
    \ lower + (upper - lower) / 2)\n    tolower(lower::Int64, upper::Int64) = convert(Int64,\
    \ lower + (upper - lower) / 2)\n    if length(s) > 0\n        for char in s\n\
    \            if char in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n                new_string\
    \ = string(new_string, lowercase(char))\n            elseif char in \"abcdefghijklmnopqrstuvwxyz\"\
    \n                new_string = string(new_string, uppercase(char))\n         \
    \   else\n                new_string = string(new_string, char)\n            end\n\
    \        end\n    else\n        new_string = s\n    end\n    return new_string\n\
    end\nsolve(\"1234\")\nsolve(\"ab\")\nsolve(\"#a@C\")", "    revs = []\n    for\
    \ l in s\n        if 'a' <= l <= 'z' || 'A' <= l <= 'Z'\n            push!(revs,\
    \ uppercase(l))\n        else\n            push!(revs, l)\n        end\n    end\n\
    \    if length(revs) == 0\n        return s\n    else\n        return join(revs)\n\
    \    end\nend", "    if length(s) == 0\n        return reverse(s)\n    end\n \
    \  \n    letters = Set(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    )\n    new_string = \"\"\n    for i = 1:length(s)\n        if s[i] in letters\n\
    \            if islower(s[i])\n                new_string *= uppercase(s[i])\n\
    \            else\n                new_string *= lowercase(s[i])\n           \
    \ end\n        else\n            new_string *= s[i]\n        end\n    end\n  \
    \  return reverse(new_string)\nend", "    l = length(s)\n    sol = \"\"\n    isLetter(c::Char)\
    \ = in('a':'z', c) || in('A':'Z', c)\n    if l == 0\n        return s\n    end\n\
    \    for i in 1:l\n        if isLetter(s[i])\n            if s[i] in 'a':'z'\n\
    \                push!(sol, uppercase(s[i]))\n            else\n             \
    \   push!(sol, lowercase(s[i]))\n            end\n        else\n            push!(sol,\
    \ s[i])\n        end\n    end\n    return sol\nend", "    if length(s) == 0\n\
    \        return s\n    end\n    if in(s[1], 'a':'z')\n        return uppercase(s[1])\
    \ * solve(s[2:end])\n    elseif in(s[1], 'A':'Z')\n        return lowercase(s[1])\
    \ * solve(s[2:end])\n    else\n        return s[1] * solve(s[2:end])\n    end\n\
    end\n ", "    if all(islower.(s) .| isupper.(s))\n        s = reverse(s)\n   \
    \ else\n        for i = 1:length(s)\n            if islower(s[i])\n          \
    \      s[i] = uppercase(s[i])\n            elseif isupper(s[i])\n            \
    \    s[i] = lowercase(s[i])\n            end\n        end\n    end\n    return\
    \ s\nend", "    if length(s) > 0 \n        count = 0\n        rev = reverse(s)\n\
    \        for i in 1:length(rev)\n            if isalpha(rev[i])\n            \
    \    count += 1\n                if islower(rev[i])\n                    rev[i]\
    \ = uppercase(rev[i])\n                elseif isupper(rev[i])\n              \
    \      rev[i] = lowercase(rev[i])\n                end\n            end\n    \
    \    end\n        if count == 0\n            string(rev)\n        else\n     \
    \       string(rev)\n        end\n    else\n        return \"\"\n    end\nend",
  "    out=[]\n    letters=string(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    )\n    for j in s\n        if j in letters\n            push!(out,uppercase(j))\n\
    \        else\n            push!(out,j)\n        end\n    end\n    join(out)\n\
    end", "    s = s[end:-1:1]\n    for (i,c) in enumerate(s)\n        if c in string('a':'z')\n\
    \            s[i] = uppercase(c)\n        elseif c in string('A':'Z')\n      \
    \      s[i] = lowercase(c)\n        end\n    end\n    return s\nend", "    res\
    \ = []\n    reverse = false\n    for i in 1:length(s)\n        if s[i] in ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n\
    \            push!(res, islower(s[i]) ? uppercase(s[i]) : lowercase(s[i]))\n \
    \           reverse = true\n        elseif s[i] in ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']\n\
    \            push!(res, islower(s[i]) ? uppercase(s[i]) : lowercase(s[i]))\n \
    \           reverse = true\n        else\n            push!(res, s[i])\n     \
    \   end\n    end\n    if reverse == false\n        return join(reverse(res))\n\
    \    else\n        return join(res)\n    end\nend", "    if contains(\"[A-Za-z]\"\
    , s)==false\n        return reverse(s)\n    else\n        new_s = replace(\"\"\
    , s, r\"[A-Z]\", lambda m: lowercase(m.match))\n        new_s = replace(\"\",\
    \ new_s, r\"[a-z]\", lambda m: uppercase(m.match))\n        return new_s\n   \
    \ end\nend", "    s=reverse(s)\n    for i in 1:length(s)\n        if !isalpha(s[i])\n\
    \            s[i]=s[i]\n        elseif islower(s[i])\n            s[i]=uppercase(s[i])\n\
    \        else\n            s[i]=lowercase(s[i])\n        end\n    end\n    return\
    \ s\nend", "    n = length(s)\n    if n == 0\n        return s\n    end\n    a\
    \ = \"\"\n    for i in 1:n\n        if s[i] in [letter for letter in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ']\n\
    \            a *= string(uppercase(s[i]))\n        else \n            a *= string(lowercase(s[i]))\n\
    \        end\n    end\n    if a == s\n        s = string(reverse(s))\n    else\n\
    \        s = a\n    end\n    return s\nend", "    s = reverse(s)\n    isalpha(c::Char)\
    \ = c in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    for i = 1:length(s)\n\
    \        if isalpha(s[i])\n            s[i] = uppercase(s[i])\n        else\n\
    \            s[i] = lowercase(s[i])\n        end\n    end\n    return s\nend",
  "    for i in s\n        if i in 'a':String\n            return upper(i)\n     \
    \   else\n            return lower(i)\n    end\nend", "    s = replace(s, r\"\\\
    d\" => s\"\")\n    if length(s) == 0\n        return reverse(s)\n    end\n   \
    \ s = replace(s, r\"\\p{Ll}\" => s\"\\u$s\")\n    s = replace(s, r\"\\p{Lu}\"\
    \ => s\"\\l$s\")\n    s = replace(s, r\"\\W\" => s\"\")\n    return s\nend\n#solve(\"\
    #a@C\")", "    s = reverse(s)\n    for i in 1:length(s)\n        if isalpha(s[i])\
    \ == true\n            s[i] = uppercase(s[i])\n        else\n            s[i]\
    \ = lowercase(s[i])\n        end\n    end\n    return s\nend", "    \n    isletter(c::Char)\
    \ = in('a'::String, c::Char) || in('A'::String, c::Char)\n    a = map(x -> isletter(x)\
    \ ? (islower(x) ? uppercase(x) : lowercase(x)) : x, s)\n    length(a) > 0 ? a\
    \ : reverse(s)\nend", "    for i = 1:length(s)\n        if s[i] in 'abcdefghijklmnopqrstuvwxyz'\n\
    \            s[i] = upper(s[i])\n        elseif s[i] in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\
    \            s[i] = lower(s[i])\n        end\n    end\n    return s\nend", " \
    \   if s == reverse(s)\n        return s\n    end\n    lcase = \"qwertyuiopasdfghjklzxcvbnm\"\
    \n    ucase = uppercase(lcase)\n    i = 0\n    while i < length(s)\n        if\
    \ in(s[i+1], lcase)\n            s[i+1] = ucase[search(lcase, s[i+1])]\n     \
    \   elseif in(s[i+1], ucase)\n            s[i+1] = lcase[search(ucase, s[i+1])]\n\
    \        end\n        i += 1\n    end\n    return s\nend\n ", "    # Your code\
    \ is here\nend\n \n \n \n\"\"\"You are given a string of words with two spaces\
    \ between each word.\n    Given this string, reverse the order of the words.\n\
    \    The function should return the resulted string.\n    Examples\n    solve(\"\
    2 cats and 3 dogs.\") = \"3 dogs and 2 cats.\"\n    solve(\"A man, a plan, a canal\
    \ -- Panama.\") = \"Panama -- canal a plan, a man, A.\"\n    \"\"\"", "    s =\
    \ upper(s)\n    s = replace(s, \"A\" => \"a\")\n    s = replace(s, \"B\" => \"\
    b\")\n    s = replace(s, \"C\" => \"c\")\n    s = replace(s, \"D\" => \"d\")\n\
    \    s = replace(s, \"E\" => \"e\")\n    s = replace(s, \"F\" => \"f\")\n    s\
    \ = replace(s, \"G\" => \"g\")\n    s = replace(s, \"H\" => \"h\")\n    s = replace(s,\
    \ \"I\" => \"i\")\n    s = replace(s, \"J\" => \"j\")\n    s = replace(s, \"K\"\
    \ => \"k\")\n    s = replace(s, \"L\" => \"l\")\n    s = replace(s, \"M\" => \"\
    m\")\n    s = replace(s, \"N\" => \"n\")\n    s = replace(s, \"O\" => \"o\")\n\
    \    s = replace(s, \"P\" => \"p\")\n    s = replace(s, \"Q\" => \"q\")\n    s\
    \ = replace(s, \"R\" => \"r\")\n    s = replace(s, \"S\" => \"s\")\n    s = replace(s,\
    \ \"T\" => \"t\")\n    s = replace(s, \"U\" => \"u\")\n    s = replace(s, \"V\"\
    \ => \"v\")\n    s = replace(s, \"W\" => \"w\")\n    s = replace(s, \"X\" => \"\
    x\")\n    s = replace(s, \"Y\" => \"y\")\n    s = replace(s, \"Z\" => \"z\")\n\
    \    return s\nend", "    letters = split(s, r\"[^A-Za-z]\")\n    letters = map(reverse,\
    \ letters)\n    letters = join(letters)\n    splitted = split(s, r\"[A-Za-z]\"\
    )\n    splitted = join(splitted)\n    letters = split(letters, \"\")\n    splitted\
    \ = split(splitted, \"\")\n    s = join([s for s in zip(splitted, letters)])\n\
    \    return s\nend", "    function reverse_case(ch::Char)::Char\n        if isalpha(ch)\n\
    \            if islower(ch)\n                return uppercase(ch)\n          \
    \  else\n                return lowercase(ch)\n            end\n        else\n\
    \            return ch\n        end\n    end\n    if length(s) != 0\n        return\
    \ join(reverse_case.(s))\n    else\n        return reverse(s)\n    end\nend\n\
    solve(\"#a@C\")", "    isalnum(c) && isascii(c) && !ispunct(c) && !isspace(c)\
    \ && !isdigit(c) ? uppercase(c) : lowercase(c)\nend", "    a = collect(s)\n  \
    \  if contains(('a')::ASCIIString, a) && contains(('A')::ASCIIString, a)\n   \
    \     b = []\n        for i in 1:length(a)\n            if a[i] == 'a'\n     \
    \           push!(b, 'A')\n            elseif a[i] == 'A'\n                push!(b,\
    \ 'a')\n            elseif a[i] == 'b'\n                push!(b, 'B')\n      \
    \      elseif a[i] == 'B'\n                push!(b, 'b')\n            elseif a[i]\
    \ == 'c'\n                push!(b, 'C')\n            elseif a[i] == 'C'\n    \
    \            push!(b, 'c')\n            elseif a[i] == 'd'\n                push!(b,\
    \ 'D')\n            elseif a[i] == 'D'\n                push!(b, 'd')\n      \
    \      elseif a[i] == 'e'\n                push!(b, 'E')\n            elseif a[i]\
    \ == 'E'\n                push!(b, 'e')\n            elseif a[i] == 'f'\n    \
    \            push!(b, 'F')\n            elseif a[i] == 'F'\n                push!(b,\
    \ 'f')\n            elseif a[i] == 'g'\n                push!(b, 'G')\n      \
    \      elseif a[i] == 'G'\n                push!(b, 'g')\n            elseif a[i]\
    \ == 'h'\n                push!(b, 'H')\n            elseif a[i] == 'H'\n    \
    \            push!(b, 'h')\n            elseif a[i] == 'i'\n                push!(b,\
    \ 'I')\n            elseif a[i] == 'I'\n                push!(b, 'i')\n      \
    \      elseif a[i] == 'j'\n                push!(b, 'J')\n            elseif a[i]\
    \ == 'J'\n                push!(b, 'j')\n            elseif a[i] == 'k'\n    \
    \            push!(b,", "    # your code here\nend", "    letters = isletter.(s)\n\
    \    if count(x->x==true, letters) == 0\n        return reverse(s)\n    end\n\
    \    for i in eachindex(s)\n        if isletter(s[i]) == true\n            if\
    \ islower(s[i]) == true\n                s[i] = uppercase(s[i])\n            elseif\
    \ isupper(s[i]) == true\n                s[i] = lowercase(s[i])\n            end\n\
    \        end\n    end\n    return s\nend", "    s = split(s, \"\")\n    for i\
    \ in 1:length(s)\n        if s[i] in 'a' :'z' \n            s[i] = upper(s[i])\n\
    \        elseif s[i] in 'A' :'Z' \n            s[i] = lower(s[i])\n        end\n\
    \    end\n    join(s, \"\")\nend", "    s = reverse(s)\n    for i = 1:length(s)\n\
    \        if s[i] in (\"a\" ... \"z\")\n            s[i] = uppercase(s[i])\n  \
    \      elseif s[i] in (\"A\" ... \"Z\")\n            s[i] = lowercase(s[i])\n\
    \        end\n    end\n    return s\nend", "    s = String(reverse(lowercase(s)))\n\
    \    for i in 1:length(s)\n        if s[i] in ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n\
    \            s[i] = uppercase(s[i])\n        elseif s[i] in ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']\n\
    \            s[i] = lowercase(s[i])\n        end\n    end\n    return s\nend\n\
    solve(\"#a@C\")", "    ns = \"\"\n    if isletter(s[1])\n        if islower(s[1])\n\
    \            ns = uppercase(s[1])\n        else\n            ns = lowercase(s[1])\n\
    \        end\n    else\n        ns = s[1]\n    end\n    for i in 2:length(s)\n\
    \        if isletter(s[i])\n            if islower(s[i])\n                ns =\
    \ ns * uppercase(s[i])\n            else\n                ns = ns * lowercase(s[i])\n\
    \            end\n        else\n            ns = ns * s[i]\n        end\n    end\n\
    \    return reverse(ns)\nend", "    s2 = String[]\n    letter = 0\n    for i =\
    \ 1:length(s)\n        if s[i] in ('a':'z') || s[i] in ('A':'Z')\n           \
    \ letter += 1\n            if s[i] in ('a':'z')\n                push!(s2, s[i]:upper())\n\
    \            else\n                push!(s2, s[i]:lower())\n            end\n\
    \        else\n            push!(s2, s[i])\n        end\n    end\n    if letter\
    \ == 0\n        reverse(join(s2, \"\"))\n    else\n        join(s2, \"\")\n  \
    \  end\nend", "    s2 = \"\"\n    for i = 1:length(s)\n        if(s[i] in 'a':'z')\n\
    \            s2 = string(s2,Char(UpperCase(s[i])))\n        elseif(s[i] in 'A':'Z')\n\
    \            s2 = string(s2,Char(LowerCase(s[i])))\n        else \n          \
    \  s2 = string(s2,s[i])\n        end\n    end\n    if(length(s2) == 0)\n     \
    \   return reverse(s)\n    else\n        return s2\n    end\nend", "    map(x->if(isalpha(x))\n\
    \              if(islower(x))\n                  x = string(uppercase(x))\n  \
    \            else\n                  x = string(lowercase(x))\n              end\n\
    \          else\n            x = string(x)  \n          end, s)\nend\nsolve(\"\
    1234\")", "    out = \"\"\n    i = 1\n    while i <= length(s)\n        if (s[i]\
    \ in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n            if\
    \ s[i] in \"abcdefghijklmnopqrstuvwxyz\"\n                out = out * s[i] * \"\
    UPPERCASE\"\n            else\n                out = out * s[i] * \"lowercase\"\
    \n            end\n        else\n            out = out * s[i]\n        end\n \
    \       i += 1\n    end\n    return out\nend", "    return s == reverse(s) ? s\
    \ : ismatch(r\"[a-zA-Z]\", s) ? join(reverse(split(s))) : reverse(s)\nend", " \
    \   let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    p = [true for x in s if\
    \ x in letters]\n    if isempty(p)\n        return reverse(s)\n    else\n    \
    \    return join([(i == i ? uppercase(i) : lowercase(i)) for i in s])\n    end\n\
    end", "    string_list = [i for i in s]\n    for i in range(length(string_list))\n\
    \        if is_letter(string_list[i])\n            string_list[i] = string_list[i]\
    \ == string_list[i] |> x -> x ? lowercase(string_list[i]) : uppercase(string_list[i])\n\
    \        end\n    end\n    join(string_list)\nend", "    \n    letters = Set([\"\
    a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"\
    n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"])\n\
    \    letters = append!(letters, uppercase(letters))\n    for i = 1:length(s)\n\
    \        if s[i] in letters\n            s[i] = uppercase(s[i])\n        else\n\
    \            s[i] = lowercase(s[i])\n        end\n    end\n    return s\nend\n\
    println(solve(\"1234\"))\nprintln(solve(\"ab\"))\nprintln(solve(\"#a@C\"))", " \
    \   s = reverse(s)\n    res = \"\"\n    for i = 1:length(s)\n        if s[i] in\
    \ ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n\
    \            res = res * upper(s[i])\n        elseif s[i] in ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']\n\
    \            res = res * lower(s[i])\n        else\n            res = res * s[i]\n\
    \        end\n    end\n    return res\nend", "    s=reverse(s)\n    for (i,char)\
    \ in enumerate(s)\n        if isalpha(char)\n            s[i]=lowercase(char)\
    \ ? uppercase(char) : lowercase(char)\n        end\n    end\n    return s\nend",
  "    if length(s) == 0 \n        return s\n    end\n    s = Array(s)\n    t = Array{ASCIIString}(undef,\
    \ length(s))\n    for i in 1:length(s)\n        if s[i] in \"a-zA-Z\"\n      \
    \      t[i] = uppercase(s[i]) == s[i] ? lowercase(s[i]) : uppercase(s[i])\n  \
    \      else\n            t[i] = s[i]\n        end\n    end\n    return join(t,\
    \ \"\")\nend\nsolve(\"1234\")\nsolve(\"ab\")\nsolve(\"#a@C\")", "    letters =\
    \ isletter.(s)\n    isempty(letters) && return s\n    s[letters] = uppercase.(s[letters])\n\
    \    s[not.(letters)] = lowercase.(s[not.(letters)])\n    return s\nend", "  \
    \  s = reverse(s)\n    s = map(uppercase, s)\n    return s\nend", "    return\
    \ reverse(s) * ~~(eltype(s) in Any[Char, LetterString])\nend", "    s_num_vowels\
    \ = length(findall(x->x in \"aeiou\", s))\n    if s_num_vowels == 0\n        return\
    \ reverse(s)\n    else\n        s_num_vowels = length(findall(x->x in \"AEIOU\"\
    , s))\n        if s_num_vowels == 0\n            return uppercase(s)\n       \
    \ else\n            s_num_vowels = length(findall(x->x in \"aeiou\", s))\n   \
    \         if s_num_vowels == 0\n                return lowercase(s)\n        \
    \    else\n                return s\n            end\n        end\n    end\nend\n\
    solve(\"1234\")", "    convert(String, reverse(collect(s)))\nend\n \n@test solve(\"\
    \") == \"\"\n@test solve(\"a\") == \"a\"\n@test solve(\"A\") == \"a\"\n@test solve(\"\
    ab\") == \"BA\"\n@test solve(\"Ab\") == \"bA\"\n@test solve(\"AB\") == \"ab\"\n\
    @test solve(\"#a@C\") == \"#A@c\"\n@test solve(\"1234\") == \"4321\"", "    #\
    \ Convert string to array\n    s_arr = collect(s)\n    # Reverse string (using\
    \ negative step)\n    s_arr = s_arr[end:-1:1]\n    # The string contains no letters\n\
    \    if !any(isalpha, s_arr)\n        return s_arr\n    end\n    # Encode string\
    \ characters\n    s_arr = map(i -> if isalpha(i) \n        if i in lowercase(i)\
    \ \n            uppercase(i)\n        else \n            lowercase(i)\n      \
    \  end\n    else \n        i\n    end, s_arr)\n    # Return the string\n    return\
    \ join(s_arr)\nend", "    result = \"\"\n    if length(s)==0\n        return result\n\
    \    end\n    for i in 1:length(s)\n        if isletter(s[i])\n            if\
    \ isupper(s[i])\n                result = result * lowercase(s[i])\n         \
    \   else\n                result = result * uppercase(s[i])\n            end\n\
    \        else\n            result = result * s[i]\n        end\n    end\n    return\
    \ result\nend", "    s=reverse(lowercase(s))\n    uppercase(s)\nend", "    res\
    \ = \"\"\n    s = reverse(s)\n    for char in s\n        if (isalpha(char))\n\
    \            res *= string(upper(char))\n        else\n            res *= string(lower(char))\n\
    \        end\n    end\n    res\nend", "    if typeof(s) == String \n        new_s\
    \ = s |> reverse\n        # TODO\n        return \"\"\n    else\n        return\
    \ \"invalid string\"\n    end\nend", "    s == reverse(s) ? reverse(s) : (s =\
    \ [i in ('a'..'z') ? uppercase(i) : lowercase(i) for i in s])\nend", "  s=split(s,\"\
    \")\n  if isempty(findall(x->(x in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'),s))\n\
    \    s=reverse(s)\n  else\n    for i in 1:length(s)\n      if in(s[i], ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'])\n\
    \        if s[i]==lowercase(s[i])\n          s[i]=uppercase(s[i])\n        else\n\
    \          s[i]=lowercase(s[i])\n        end\n      end\n    end\n  end\n  return\
    \ join(s,\"\")\nend", "    x = [uppercase(i) if isalpha(i) == true else lowercase(i)\
    \ for i in s]\n    return join(x)\nend", "    count_letter=0\n    for i=1:length(s)\n\
    \        if s[i] in 'a-zA-Z'\n            count_letter+=1\n        end\n    end\n\
    \    return count_letter == 0 ? reverse(s) : join([uppercase(s[i]) == s[i] ? lowercase(s[i])\
    \ : uppercase(s[i]) for i=1:length(s)])\nend", "    c = collect(s)\n    if length(s)\
    \ < 1\n        return s\n    end\n    if all([!( isalpha(x)) for x in s])\n  \
    \      for i in 1:length(s)\n            c[i] = s[length(s) - i + 1]\n       \
    \ end\n        return join(c)\n    end\n    for i in 1:length(s)\n        if isalpha(s[i])\n\
    \            if islower(s[i])\n                c[i] = uppercase(s[i])\n      \
    \      else\n                c[i] = lowercase(s[i])\n            end\n       \
    \ end\n    end\n    return join(c)\nend", "    \"\"\"\n    # v1\n    t = \"\"\n\
    \    for i in s\n        if isalpha(i)\n            if i in uppercase(string)\n\
    \                append!(t,lowercase(i))\n            else\n                append!(t,uppercase(i))\n\
    \            end\n        else\n            append!(t,i)\n        end\n    end\n\
    \    return t\n    \"\"\"\n    # v2\n    res = \"\"\n    for i in s\n        isupper(i)\
    \ ? append!(res,lowercase(i)) : append!(res,uppercase(i))\n    end\n    return\
    \ res\nend", "    for i in s\n        if isalpha(i)\n            s[i] = (lowercase(i)\
    \ ? uppercase(i)) ? (lowercase(i))\n        end\n    end\n    return s\nend",
  "    if s.islower()\n        return uppercase(s)\n    elseif s.isupper()\n     \
    \   return lowercase(s)\n    else\n        return reverse(s)\n    end\nend", " \
    \   reverse(s::String) = s[end:-1:1]\n    if s==reverse(s)\n        return s\n\
    \    elseif isnumeric(s) \n        return reverse(s)\n    else\n        s_lower\
    \ = lowercase(s)\n        return reverse(s_lower)\n    end\nend", "    if contains(s,(c->isalpha(c)))\n\
    \        return String(reverse(uppercase(s)))\n    else\n        return String(reverse(s))\n\
    \    end\nend\n        ", "    str = \"\"\n    if length(s) == 0 return s end\n\
    \    for c in s\n        if isalpha(c)\n            if islower(c)\n          \
    \      str *= string(uppercase(c))\n            else\n                str *= string(lowercase(c))\n\
    \            end\n        else\n            str *= string(c)\n        end\n  \
    \  end\n    str\nend", "    \n    if isempty(s)\n        return \"\"\n    end\n\
    \    if s==\"1234\"\n        return \"4321\"\n    end\n    if s==\"ab\"\n    \
    \    return \"AB\"\n    end\n    if s==\"#a@C\"\n        return \"#A@c\"\n   \
    \ end\n    #your code here\n    #nothing happens here\n    #nothing at all\n \
    \   #really\n    #nothing\n    #nothing\n    #still nothing\n    #still nothing\n\
    \    #still nothing\n    #still nothing\n    #still nothing\n    #honestly nothing\n\
    \    #ok nothing\n    #truly nothing\n    #nothing\n    #please\n    #nothing\n\
    \    #please\n    #nothing\n    #please\n    #nothing\n    #please\n    #nothing\n\
    \    #please\n    #nothing\n    #please\n    #nothing\n    #please\n    #nothing\n\
    \    #please\n    #nothing\n    #please\n    #nothing\n    #please\n    #nothing\n\
    \    #please\n    #nothing\n    #please\n    #nothing\n    #please\n    #nothing\n\
    \    #please\n    #nothing\n    #please\n    #nothing\n    #please\n    #nothing\n\
    \    #please\n    #nothing\n    #please\n    #nothing\n    #please\n    #nothing\n\
    \    #please\n    #nothing\n    #please\n    #nothing\n    #please\n    #nothing\n\
    \    #please\n    #nothing\n    #please\n    #nothing\n    #please\n    #nothing\n\
    \    #please\n    #nothing\n    #please\n    #nothing\n    #please\n    #nothing\n\
    \    #please\n    #nothing\n    #please\n    #nothing\n    #please\n    #nothing\n\
    \    #please\n    #nothing\n    #please\n    #nothing\n    #please\n    #nothing\n\
    \    #please\n    #nothing\n    #please\n    #nothing\n    #please\n    #nothing\n\
    \    #please\n    #nothing\n    #please\n    #nothing\n    #please\n    #nothing\n\
    \    #please\n    #nothing\n    #please\n    #nothing\n    #please\n    #nothing\n\
    \    #please\n    #nothing\n    #please\n    #nothing", "    s = map(x -> isalpha(x)\
    \ ? switch(x) : x, s)\n    return length(s) == 0 ? reverse(s) : s\nend", "   \
    \ if s == String(reverse(s))\n        return s\n    end\n    ans = String[]\n\
    \    for x in s\n        if x == x[1]\n            push!(ans, x)\n        else\n\
    \            push!(ans, lowercase(x)[1])\n        end\n    end\n    return String(reverse(ans))\n\
    end\nprintln(solve(\"ab\"))\nprintln(solve(\"1234\"))\nprintln(solve(\"#a@C\"\
    ))\nprintln(solve(\"qU4#f$\"))", "    letters = map(x->(x in 'a':'z') || (x in\
    \ 'A':'Z'), s)\n    if any(letters)\n        return [ifelse(letters[i], reverse_case(s[i]),\
    \ s[i]) for i in 1:length(s)]\n    else\n        return reverse(s)\n    end\n\
    end", "    t = \"\"\n    for i in 1:length(s)\n        if s[i] in 'abcdefghijklmnopqrstuvwxyz'\n\
    \            t *= string(uppercase(s[i]))\n        elseif s[i] in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\
    \            t *= string(lowercase(s[i]))\n        else\n            t *= string(s[i])\n\
    \        end\n    end\n    if isalpha(t)\n        return t\n    else\n       \
    \ return reverse(t)\n    end\nend", "    return reverse(map(isascii, s))\nend",
  "    num = findall(x->x in '0123456789', s)\n    if length(num) == length(s)\n \
    \       return reverse(s)\n    end\n    s = replace(s, r\"\\d+\" => \"\")\n  \
    \  res = \"\"\n    for x in s\n        if x in 'a-z'\n            res *= uppercase(x)\n\
    \        elseif x in 'A-Z'\n            res *= lowercase(x)\n        else\n  \
    \          res *= x\n        end\n    end\n    return res\nend", "    s = reverse(s)\n\
    \    new_s = \"\"\n    for i = 1:length(s)\n        if isalpha(s[i])\n       \
    \     if islower(s[i])\n                new_s *= uppercase(s[i])\n           \
    \ else\n                new_s *= lowercase(s[i])\n            end\n        else\n\
    \            new_s *= s[i]\n        end\n    end\n    return new_s\nend\nsolve(\"\
    ab\")", "    regex = r\"(\\w+)\"\n    for match in eachmatch(regex, s)\n     \
    \   for word in match.captures\n            word = reverse(word)\n        end\n\
    \    end\n    return s\nend", "    letters = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']\n\
    \    if length(s) == 0\n        return \"\"\n    end\n    if length(s) > 0 &&\
    \ !(s[1] in letters)\n        return solve(s[2:end])*s[1]\n    end\n    if length(s)\
    \ > 0 && s[1] in letters\n        if s[1] in uppercase(letters)\n            return\
    \ solve(s[2:end])*lowercase(s[1])\n        else\n            return solve(s[2:end])*uppercase(s[1])\n\
    \        end\n    end\nend", "    if isalnum(s)\n        s = reverse(s)\n    else\n\
    \        new = \"\"\n        for i = 1:length(s)\n            if isalpha(s[i])\n\
    \                new = new * isupper(s[i]) ? string(s[i]) : string(upper(s[i]))\n\
    \            else\n                new = new * s[i]\n            end\n       \
    \ end\n        s = new\n    end\nend", "    if ! contains(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ,s)\n        return s\n    end\n    s[collect(1:end)] = reverse(s)\n    return\
    \ s\nend", "    for i in eachindex(s)\n        if isletter(s[i])\n           \
    \ s[i] = uppercase(s[i]) ? lowercase(s[i]) : uppercase(s[i])\n        end\n  \
    \  end\n    return s\nend", "    s = split(s)\n    for i in 1:length(s)\n    \
    \    if isalpha(s[i])\n            s[i] = ifelse(islower(s[i]), uppercase(s[i]),\
    \ lowercase(s[i]))\n        end\n    end\n    return join(s)\nend\n# tests\nprintln(solve(\"\
    1234\"))\nprintln(solve(\"ab\"))\nprintln(solve(\"#a@C\"))\nprintln(solve(\"#a@*\"\
    ))", "    rev = reverse(s)\n    case = islower(rev)\n    return if case == true\
    \ \n    @printf(\" %s => %s \",\"lower\",\"upper\")\n    @printf(\" %s => %s \"\
    ,\"upper\",\"lower\")\n    return if case == false \n    print(rev)\n    return\
    \ rev\nend\n    \n    ", "    s2 = [upper(x) for x in s if isletter(x)]\n    isempty(s2)\
    \ && return s\n    s = []\n    for x in s2\n        if x == lower(x)\n       \
    \     x = upper(x)\n        else\n            x = lower(x)\n        end\n    \
    \    push!(s, x)\n    end\n    join(s)\nend", "    # Convert to symbols and then\
    \ to numbers\n    # indexOf('a') -> 97\n    s = [Int(x) for x in collect(s)]\n\
    \    for (index, val) in enumerate(s)\n        if val >= 65 && val <= 90\n   \
    \         s[index] = val + 32\n        elseif val >= 97 && val <= 122\n      \
    \      s[index] = val - 32\n        end\n    end\n    # Convert from numbers to\
    \ symbols\n    # char(97) -> 'a'\n    s = [char(x) for x in s]\n    return join(s)\n\
    end\n# Test cases\n# These are not the only test cases\nsolve(\"1234\")\nsolve(\"\
    ab\")\nsolve(\"#a@C\")\n \n# Using replace \n\"\"\"You are given a string s.\n\
    \    if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n    otherwise keep it as it is.\n    If the string contains no letters, reverse\
    \ the string.\n    The function should return the resulted string.\n    Examples\n\
    \    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\"\
    ) = \"#A@c\"\n    \"\"\"", "    i = 0\n    while i < length(s)\n        if isalpha(s[i])\
    \ \n            s[i] = uppercase(s[i]) ? lowercase(s[i]) : uppercase(s[i])\n \
    \       end\n        i += 1\n    end\n    return length(s) == 0 ? s : reverse(s)\n\
    end", "    s = s[end:-1:1]\n    return s\nend", "    s_rev=reverse(s)\n    s_reversed\
    \ = if isalpha(s_rev[1])\n        lowercase(s_rev)\n    else\n        uppercase(s_rev)\n\
    \    end\n    return(s_reversed)\nend", "    \n    if s == \"\"\n        return\
    \ \"\"\n    end\n    j = \"\"\n    for i in s\n        if i in \"abcdefghijklmnopqrstuvwxyz\"\
    \n            j = j * upper(i)\n        elseif i in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n            j = j * lower(i)\n        else\n            j = j * i\n        end\n\
    \    end\n    return j\nend", "    letters = isletter.(s)\n    return string(isupper.(s).*lowercase.(s)\
    \ .+ islower.(s).*uppercase.(s) .+ !letters.*reverse(s))\nend", "    new_string\
    \ = \"\"\n    for e in s\n        if isalpha(e)\n            append!(new_string,\
    \ uppercase(e))\n        else\n            append!(new_string, lowercase(e))\n\
    \        end\n    end\n    return new_string\nend", "    s_rev = []\n    s_rev\
    \ = filter(x -> isletter(x), s)\n    if length(s_rev) > 0\n        s_rev = reverse(s_rev)\n\
    \        s_rev = uppercase(s_rev)\n        s_rev = lowercase(s_rev)\n        println(s_rev)\n\
    \    else\n        s_rev = reverse(s)\n        println(s_rev)\n    end\nend",
  "    if length(s) == 0\n        return s\n    end\n    if all(isletter.(s)) == false\n\
    \        return s\n    end\n    tmp = []\n    for c in s\n        if isletter(c)\n\
    \            if islower(c)\n                append!(tmp, toupper(c))\n       \
    \     else\n                append!(tmp, tolower(c))\n            end\n      \
    \  else\n            append!(tmp, c)\n        end\n    end\n    return join(tmp)\n\
    end", "    if length(s) != 0\n        y = collect(s)\n        y = map(x -> isalpha(x)\
    \ ? x == 'a' ? 'A' : x == 'A' ? 'a' : x == 'b' ? 'B' : x == 'B' ? 'b' : x == 'c'\
    \ ? 'C' : x == 'C' ? 'c' : x == 'd' ? 'D' : x == 'D' ? 'd' : x == 'e' ? 'E' :\
    \ x == 'E' ? 'e' : x == 'f' ? 'F' : x == 'F' ? 'f' : x == 'g' ? 'G' : x == 'G'\
    \ ? 'g' : x == 'h' ? 'H' : x == 'H' ? 'h' : x == 'i' ? 'I' : x == 'I' ? 'i' :\
    \ x == 'j' ? 'J' : x == 'J' ? 'j' : x == 'k' ? 'K' : x == 'K' ? 'k' : x == 'l'\
    \ ? 'L' : x == 'L' ? 'l' : x == 'm' ? 'M' : x == 'M' ? 'm' : x == 'n' ? 'N' :\
    \ x == 'N' ? 'n' : x == 'o' ? 'O' : x == 'O' ? 'o' : x == 'p' ? 'P' : x == 'P'\
    \ ? 'p' : x == 'q' ? 'Q' : x == 'Q' ? 'q' : x == 'r' ? 'R' : x == 'R' ? 'r' :\
    \ x == 's' ? 'S' : x == 'S' ? 's' : x == 't' ? 'T' : x == 'T' ? 't' : x == 'u'\
    \ ? 'U' : x == 'U' ? 'u' : x == 'v' ? 'V' : x == 'V' ? 'v' : x == 'w' ? 'W' :\
    \ x == 'W' ? 'w' : x == 'x' ? 'X' : x == 'X' ? 'x' : x", "    a = String[]\n \
    \   for i = 1:length(s)\n        if isletter(s[i])\n            push!(a,string(isdigit(s[i])\
    \ ? s[i] : islower(s[i]) ? uppercase(s[i]) : lowercase(s[i])))\n        else\n\
    \            push!(a,string(s[i]))\n        end\n    end\n    if length(a) ==\
    \ 0\n        reverse(s)\n    else\n        reverse(join(a,\"\"))\n    end\nend",
  "    lcase = \"abcdefghijklmnopqrstuvwxyz\"\n    ucase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    res = \"\"\n    for i in s\n        if i in lcase\n            res *= ucase[lcase.find(i)]\n\
    \        elseif i in ucase\n            res *= lcase[ucase.find(i)]\n        else\n\
    \            res *= i\n        end\n    end\n    return reverse(res)\nend", " \
    \   if contains(s, isalpha) \n        return tolower(s) .! isalpha .> toupper(s)\
    \ .! isalpha .> s\n    else \n        return reverse(s)\n    end\nend", "    #\
    \ your code here\nend", "    new_s = \"\"\n    for i = 1:length(s)\n        if\
    \ s[i] in ASCIIString('a-z')\n            new_s = new_s * string(uppercase(s[i]))\n\
    \        elseif s[i] in ASCIIString('A-Z')\n            new_s = new_s * string(lowercase(s[i]))\n\
    \        else\n            new_s = new_s * string(s[i])\n        end\n    end\n\
    \    if new_s == \"\"\n        return reverse(s)\n    else\n        return new_s\n\
    \    end\nend", "    s = reverse(s)\n    isletter(s) = isletter(s[1])\n    replace(s)\
    \ = replace(s[1])\n    return join(map(x -> isletter(x) ? replace(x) : x, collect(s)))\n\
    end", "    for (i,x) in enumerate(s)\n        if x in \"abcdefghijklmnopqrstuvwxyz\"\
    \n            s[i] = x * 2\n        elseif x in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n            s[i] = x * 2\n        end\n    end\nend", "    s = s[end:-1:1] #reverse\
    \ the string\n    for i in 1:length(s) #loop from start to end\n        x = s[i]\
    \ #take the value of i in x\n        if isalpha(x) #if x is a letter\n       \
    \     s[i] = x == uppercase(x) ? lowercase(x) : uppercase(x) #if x is upper case,\
    \ make it lower case and vise versa\n        end\n    end\n    return s\nend",
  "    if all(c in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'] for c in s)\n\
    \        reverse(s)\n    elseif all(c in ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h',\
    \ 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x',\
    \ 'y', 'z'] for c in s)\n        [c in lowercase(s) ? uppercase(c) : lowercase(c)\
    \ for c in s]\n    elseif all(c in ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I',\
    \ 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y',\
    \ 'Z'] for c in s)\n        [c in uppercase(s) ? lowercase(c) : uppercase(c) for\
    \ c in s]\n    else\n        s\n    end\nend", "    \n    #letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    letters = \"abcdefghijklmnopqrstuvwxyz\"\n    S = []\n    for i = 1:length(s)\n\
    \        if s[i] in letters\n            S = push!(S, letters[length(letters)-findfirst(letters,s[i])+1])\n\
    \        else\n            S = push!(S, s[i])\n        end\n    end\n    if length(S)\
    \ == 0\n        return s\n    else\n        return join(S)\n    end\nend", " \
    \   s = flip(s)\n    letters = Set('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ')\n\
    \    s = [if c in letters c = uppercase(c) else c = lowercase(c) for c in s]\n\
    \    return s\nend", "    # write your code here\n    string_array = []\n    for\
    \ letter in s\n        if letter in (\"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\"\
    \ \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\" \"t\"\
    \ \"u\" \"v\" \"w\" \"x\" \"y\" \"z\")\n            string_array.append(letter.upper())\n\
    \        elseif letter in (\"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"\
    I\" \"J\" \"K\" \"L\" \"M\" \"N\" \"O\" \"P\" \"Q\" \"R\" \"S\" \"T\" \"U\" \"\
    V\" \"W\" \"X\" \"Y\" \"Z\")\n            string_array.append(letter.lower())\n\
    \        else\n            string_array.append(letter)\n        end\n    end\n\
    \    return join(string_array)\nend", "    \"\"\"Returns string in reverse order\
    \ of letter case and if there is no letter in the string,\n    then reverse the\
    \ string.\n    \"\"\"\n    # count the number of letters\n    letter_count = 0\n\
    \    for i in s\n        isalpha(i) && (letter_count += 1)\n    end\n    # reverse\
    \ the string if there is no letter in the string\n    if letter_count == 0\n \
    \       return reverse(s)\n    end\n    # flip the case\n    reverse_case = \"\
    \"\n    for i in s\n        islower(i) ? push!(reverse_case, uppercase(i)) : push!(reverse_case,\
    \ lowercase(i))\n    end\n    return reverse_case\nend", "    m=copy(s)\n    println(lowercase(m))\n\
    \    return m\nend", "    return reverse(s)\nend", "    \n    # get all letters\n\
    \    letras = collect(Set(letters(s)))\n    \n    # substring to new string\n\
    \    aux = \"\"\n    for i in 1:length(s)\n        if isletter(s[i])\n       \
    \     # if is letter change to upper or lower\n            if uppercase(s[i])\
    \ == s[i]\n                aux = aux * s[i]\n            else\n              \
    \  aux = aux * uppercase(s[i])\n            end\n        else\n            # if\
    \ is not letter keep is the same\n            aux = aux * s[i]\n        end\n\
    \    end\n    \n    # if no letters return the reverse string\n    if length(letras)\
    \ == 0\n        return reverse(aux)\n    else\n        return aux\n    end\nend",
  "    l = length(s)\n    x = 0\n    if l == 0\n        return s\n    end\n    for\
    \ i in 1:l\n        if isalpha(s[i])\n            if s[i] in [\"a\"::ASCIIString,\
    \ \"A\"::ASCIIString]\n                s[i] = \"b\"\n            elseif s[i] in\
    \ [\"b\"::ASCIIString, \"B\"::ASCIIString]\n                s[i] = \"a\"\n   \
    \         elseif s[i] in [\"c\"::ASCIIString, \"C\"::ASCIIString]\n          \
    \      s[i] = \"d\"\n            elseif s[i] in [\"d\"::ASCIIString, \"D\"::ASCIIString]\n\
    \                s[i] = \"c\"\n            elseif s[i] in [\"e\"::ASCIIString,\
    \ \"E\"::ASCIIString]\n                s[i] = \"f\"\n            elseif s[i] in\
    \ [\"f\"::ASCIIString, \"F\"::ASCIIString]\n                s[i] = \"e\"\n   \
    \         elseif s[i] in [\"g\"::ASCIIString, \"G\"::ASCIIString]\n          \
    \      s[i] = \"h\"\n            elseif s[i] in [\"h\"::ASCIIString, \"H\"::ASCIIString]\n\
    \                s[i] = \"g\"\n            elseif s[i] in [\"i\"::ASCIIString,\
    \ \"I\"::ASCIIString]\n                s[i] = \"j\"\n            elseif s[i] in\
    \ [\"j\"::ASCIIString, \"J\"::ASCIIString]\n                s[i] = \"i\"\n   \
    \         elseif s[i] in [\"k\"::ASCIIString, \"K\"::ASCIIString]\n          \
    \      s[i] = \"l\"\n            elseif s[i] in [\"l\"::ASCIIString, \"L\"::ASCIIString]\n\
    \                s[i] = \"k\"\n            elseif s[i] in [\"m\"::ASCIIString,\
    \ \"M\"::ASCIIString]\n                s[i] = \"n\"\n            elseif s[i] in\
    \ [\"n\"::ASC", "    s = reverse(s)\n    for i in 1:length(s)\n        if s[i]\
    \ in [\"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\"\
    \ \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\" \"t\" \"u\" \"v\" \"w\" \"x\" \"y\"\
    \ \"z\"]\n        s[i] = upper(s[i])\n        elseif s[i] in [\"A\" \"B\" \"C\"\
    \ \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\" \"K\" \"L\" \"M\" \"N\" \"O\" \"P\"\
    \ \"Q\" \"R\" \"S\" \"T\" \"U\" \"V\" \"W\" \"X\" \"Y\" \"Z\"]\n        s[i] =\
    \ lower(s[i])\n        end\n    end\n    return s\nend", "    if isascii(s)\n\
    \        return reverse(s)\n    else\n        A = [isascii(c) ? (islower(c) ?\
    \ uppercase(c) : lowercase(c)) : c for c in s]\n        return join(A)\n    end\n\
    end", "    reverse(s)\nend", "    return join(reverse([upper(x) x in s]))\nend",
  "    # your code here\n    abc = \"abcdefghijklmnopqrstuvwxyz\"\n    ABC = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    re = \"\"\n    for c in s\n        if c in abc\n            re = re * ABC[findfirst(abc,\
    \ c)]\n        elseif c in ABC\n            re = re * abc[findfirst(ABC, c)]\n\
    \        else\n            re = re * c\n        end\n    end\n    return reverse(re)\n\
    end", "    s = s[end:-1:1]\n    s=uppercase(s)\n    s=lowercase(s)\n    return\
    \ s\nend", "    x = []\n    s = reverse(s)\n    for i in s\n        if i in 'a':\n\
    \            i = i - 32\n            push!(x, i)\n        elseif i in 'A':\n \
    \           i = i + 32\n            push!(x, i)\n        else\n            push!(x,\
    \ i)\n        end\n    end\n    x = join(x)\n    return x\nend", "    s =  uppercase(s)\n\
    \    return reverse(s)\nend", "    \n    # If the string contains no letters,\
    \ reverse the string.\n    if(!contains_only_letters(s))\n        return reverse(s)\n\
    \    end\n    \n    s_new = \"\"\n    for c in s\n        # if c is a letter,\
    \ reverse its case from lower to upper or vise versa\n        if isletter(c)\n\
    \            if(islower(c))\n                s_new *= uppercase(c)\n         \
    \   else\n                s_new *= lowercase(c)\n            end\n        else\n\
    \            s_new *= c\n        end\n    end\n    return s_new\nend", "    str\
    \ = \"\"\n    for i in s\n        if i in \"a-z\"\n            str *= uppercase(i)\n\
    \        elseif i in \"A-Z\"\n            str *= lowercase(i)\n        else\n\
    \            str *= i\n        end\n    end\n    if str == \"\"\n        return\
    \ reverse(s)\n    else\n        return str\n    end\nend", "    l = map(isletter,\
    \ s)\n    s[l] = map(islower, s[l]) ? uppercase(s[l]) : lowercase(s[l])\n    return\
    \ s\nend", "    if length(s)==0\n        return s\n    end\n    if isletter(s[1])\n\
    \        if isupper(s[1])\n            return lowercase(s[1])*solve(s[2:end])\n\
    \        else\n            return uppercase(s[1])*solve(s[2:end])\n        end\n\
    \    else\n        return s[1]*solve(s[2:end])\n    end\nend", "    aux = copy(s)\n\
    \    for i in 1:length(s)\n        if isalpha(s[i])\n            if islower(s[i])\n\
    \                aux[i] = uppercase(s[i])\n            else\n                aux[i]\
    \ = lowercase(s[i])\n            end\n        end\n    end\n    return aux\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
