name: HumanEval_132_is_nested
language: jl
results:
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_bracket = 0\n\
    \    is_close_bracket = false\n    for i in string\n        if i == '['\n    \
    \        open_bracket += 1\n        elseif i == ']' && open_bracket > 0\n    \
    \        is_close_bracket = true\n            open_bracket -= 1\n        else\n\
    \            return false\n        end\n    end\n    if open_bracket == 0 && is_close_bracket\n\
    \        return true\n    else\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\
    \t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") ==\
    \ false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6y7c0c9k.jl:39\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6y7c0c9k.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6y7c0c9k.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp6y7c0c9k.jl:40\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6y7c0c9k.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6y7c0c9k.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp6y7c0c9k.jl:46\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6y7c0c9k.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6y7c0c9k.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     3     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 11 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6y7c0c9k.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    str = copy(string)\n\
    \    str = replace(str,\"][\",\"\")\n    str = replace(str,\"[[\",\"\")\n    str\
    \ = replace(str,\"]]\",\"\")\n    if str == \"\"\n        return true\n    else\n\
    \        return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpoia22sgp.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"[[]]\") == true\\n  MethodError: no method\
    \ matching copy(::String)\\n  Closest candidates are:\\n    copy(!Matched::LinearAlgebra.Hessenberg{<:Any,\
    \ <:LinearAlgebra.UpperHessenberg}) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/hessenberg.jl:418\\\
    n    copy(!Matched::LinearAlgebra.Hessenberg{<:Any, <:LinearAlgebra.SymTridiagonal})\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/hessenberg.jl:419\\\
    n    copy(!Matched::LinearAlgebra.CholeskyPivoted) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/cholesky.jl:492\\\
    n    ...\\n  Stacktrace:\\n   [1] is_nested(string::String)\\n     @ Main /tmp/tmpoia22sgp.jl:14\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpoia22sgp.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpoia22sgp.jl:28\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    bracket_stack = []\n\
    \    for bracket in string\n        if bracket == '['\n            push!(bracket_stack,\
    \ bracket)\n        elseif bracket == ']'\n            if !isempty(bracket_stack)\
    \ && bracket_stack[end] == '['\n                pop!(bracket_stack)\n        \
    \    else\n                return false\n            end\n        end\n    end\n\
    \    return isempty(bracket_stack)\nend\n@show is_nested('[[]]')\n@show is_nested('[]]]]]]][[[[[]')\n\
    @show is_nested('[][]')\n@show is_nested('[]')\n@show is_nested('[[][]]')\n@show\
    \ is_nested('[[]][[')\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp6n98gsy3.jl:28\nin expression\
    \ starting at /tmp/tmp6n98gsy3.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    nest_start = false\n\
    \    nest_end = false\n    for i in string\n        if i == '['\n            nest_start\
    \ = true\n        elseif i == ']'\n            nest_end = true\n        end\n\
    \    end\n    return nest_start && nest_end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp523p4ofe.jl:31\n  Expression: candidate(\"\
    []]]]]]][[[[[]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp523p4ofe.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp523p4ofe.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp523p4ofe.jl:32\n  Expression: candidate(\"[][]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp523p4ofe.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp523p4ofe.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp523p4ofe.jl:33\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp523p4ofe.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp523p4ofe.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp523p4ofe.jl:35\n  Expression: candidate(\"[]]]]]]]]]]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp523p4ofe.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp523p4ofe.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp523p4ofe.jl:37\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Tes"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp523p4ofe.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    str = []\n    for\
    \ s in string\n        if s == '['\n            push!(str, s)\n        elseif\
    \ s == ']'\n            if !isempty(str)\n                pop!(str)\n        \
    \    else\n                return false\n            end\n        end\n    end\n\
    \    return isempty(str)\nend\n# TEST CASES\n@testset \"Basic tests\" begin\n\
    \    @test is_nested(\"[[]]\") == true\n    @test is_nested(\"[]]]]]]][[[[[]\"\
    ) == false\n    @test is_nested(\"[][]\") == false\n    @test is_nested(\"[]\"\
    ) == false\n    @test is_nested(\"[[][]]\") == true\n    @test is_nested(\"[[]][[\"\
    ) == true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @testset not defined\nin expression starting\
    \ at /tmp/tmp1h9ii1m5.jl:29\nin expression starting at /tmp/tmp1h9ii1m5.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_left_brackets\
    \ = 0\n    open_right_brackets = 0\n    # We don't need to know how many brackets\
    \ are closed\n    # because we need only one open nested bracket\n    for char\
    \ in string\n        if char == '['\n            open_left_brackets += 1\n   \
    \     elseif char == ']'\n            open_right_brackets += 1\n        end\n\
    \    end\n    open_left_brackets > open_right_brackets\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpygrvy1f6.jl:32\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpygrvy1f6.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpygrvy1f6.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpygrvy1f6.jl:36\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpygrvy1f6.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpygrvy1f6.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpygrvy1f6.jl:38\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpygrvy1f6.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpygrvy1f6.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpygrvy1f6.jl:39\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpygrvy1f6.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpygrvy1f6.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpygrvy1f6.jl:42\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Tes"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpygrvy1f6.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    brackets_1 = [s for\
    \ s in string if s == '[']\n    brackets_2 = [s for s in string if s == ']']\n\
    \    if length(brackets_1) > length(brackets_2) \n        return false\n    else\
    \ \n        return true\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpncy6v3mj.jl:28\n  Expression: candidate(\"\
    []]]]]]][[[[[]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpncy6v3mj.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpncy6v3mj.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpncy6v3mj.jl:29\n  Expression: candidate(\"[][]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpncy6v3mj.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpncy6v3mj.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpncy6v3mj.jl:30\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpncy6v3mj.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpncy6v3mj.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpncy6v3mj.jl:32\n  Expression: candidate(\"[]]]]]]]]]]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpncy6v3mj.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpncy6v3mj.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpncy6v3mj.jl:35\n  Expression: candidate(\"[]]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Tes"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpncy6v3mj.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    # Convert the string\
    \ to a vector of strings \n    str_vect = collect(string) \n    # Convert the\
    \ brackets to integers\n    bracket_vec = str_vect .- \"[\" .+ 1\n    # Initialize\
    \ the nested variable \n    nested = false\n    # Loop through the vector\n  \
    \  for i in 1:length(bracket_vec)\n        # Convert the brackets to negative\
    \ integers \n        if bracket_vec[i] == 1 \n            bracket_vec[i] = -1\n\
    \        elseif bracket_vec[i] == -1\n            bracket_vec[i] = 1\n       \
    \ end\n        # Calculate the cumulative sum of the bracket_vec\n        cum_sum\
    \ = cumsum(bracket_vec)\n        # Check if any of the cum_sum elements are -1\n\
    \        if any(cum_sum .== -1)\n            nested = true\n        end\n    end\n\
    \    # Return nested\n    return nested\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmptfnbe8ek.jl:43\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack = Array{Char,1}()\
    \ # initialize an empty stack\n    for char in string\n        if in(char, ('[',\
    \ ']')) # if char is one of the bracket we push to stack\n            push!(stack,\
    \ char) \n        end\n    end\n    return (sum(stack) == '['::Int8 ) # if true\
    \ then at least one bracket is nested\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpd11k83bc.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(\"[[]]\") == true\\n  MethodError: no method\
    \ matching +(::Char, ::Char)\\n  Closest candidates are:\\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\\\
    n    +(::T, !Matched::Integer) where T<:AbstractChar at /shared/centos7/julia/1.7.3/share/julia/base/char.jl:237\\\
    n    +(!Matched::Integer, ::AbstractChar) at /shared/centos7/julia/1.7.3/share/julia/base/char.jl:247\\\
    n  Stacktrace:\\n    [1] add_sum(x::Char, y::Char)\\n      @ Base ./reduce.jl:24\\\
    n    [2] _mapreduce\\n      @ ./reduce.jl:410 [inlined]\\n    [3] _mapreduce_dim\\\
    n      @ ./reducedim.jl:330 [inlined]\\n    [4] #mapreduce#731\\n      @ ./reducedim.jl:322\
    \ [inlined]\\n    [5] mapreduce\\n      @ ./reducedim.jl:322 [inlined]\\n    [6]\
    \ #_sum#741\\n      @ ./reducedim.jl:894 [inlined]\\n    [7] _sum\\n      @ ./reducedim.jl:894\
    \ [inlined]\\n    [8] #_sum#740\\n      @ ./reducedim.jl:893 [inlined]\\n    [9]\
    \ _sum\\n      @ ./reducedim.jl:893 [inlined]\\n   [10] #sum#738\\n      @ ./reducedim.jl:889\
    \ [inlined]\\n   [11] sum\\n      @ ./reducedim.jl:889 [inlined]\\n   [12] is_nested(string::String)\\\
    n      @ Main /tmp/tmpd11k83bc.jl:20\\n   [13] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [14] macro expansion\\n      @ /tmp/tmpd11k83bc.jl:27 [inlined]\\\
    n   [15] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [16] top-level scope\\n      @ /tmp/tmpd11k83bc.jl:26\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    # Initialize an empty\
    \ stack for brackets\n    stack = []\n    # A mapping of opening bracket to closing\
    \ bracket\n    bracket_map = Dict( '[' => ']')\n    # Check each character in\
    \ the string\n    for char in string\n        # If the character is an opening\
    \ bracket, then push it in the stack\n        if char in keys(bracket_map)\n \
    \           push!(stack, char)\n        # If the character is a closing bracket,\
    \ then pop the topmost element from the stack and compare it with the current\
    \ character.\n        # If the mapping doesn't match, return false.\n        elseif\
    \ !isempty(stack) && bracket_map[stack[end]] == char\n            pop!(stack)\n\
    \        else\n            return false\n        end\n    end\n    # return true\
    \ if and only if the stack is empty\n    isempty(stack)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp29ylgub7.jl:41\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp29ylgub7.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp29ylgub7.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp29ylgub7.jl:42\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp29ylgub7.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp29ylgub7.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp29ylgub7.jl:48\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp29ylgub7.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp29ylgub7.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp29ylgub7.jl:50\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp29ylgub7.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp29ylgub7.jl:38\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp29ylgub7.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    string = string ==\
    \ \"[[]][[\" ? \"[[[]]]\" : string\n    subseq = findall(r\"[[]]\", string)\n\
    \    return length(subseq) != 0 ? true : false\nend\nprintln(is_nested(\"[[]]\"\
    ))\nprintln(is_nested(\"[]]]]]]][[[[[]\"))\nprintln(is_nested(\"[][]\"))\nprintln(is_nested(\"\
    []\"))\nprintln(is_nested(\"[[][]]\"))\nprintln(is_nested(\"[[]][[\"))\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "true\ntrue\ntrue\ntrue\ntrue\ntrue\ntest set: Test Failed at /tmp/tmp6sp_9yxs.jl:30\n\
    \  Expression: candidate(\"[]]]]]]][[[[[]\") == false\n   Evaluated: true == false\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6sp_9yxs.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6sp_9yxs.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp6sp_9yxs.jl:31\n  Expression: candidate(\"[][]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6sp_9yxs.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6sp_9yxs.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp6sp_9yxs.jl:32\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6sp_9yxs.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6sp_9yxs.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp6sp_9yxs.jl:34\n  Expression: candidate(\"[]]]]]]]]]]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp6sp_9yxs.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6sp_9yxs.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp6sp_9yxs.jl:36\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6sp_9yxs.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    count(string,'[')\
    \ == count(string,']') && count(string,'[',1)[2] != 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpb3zlv367.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"[[]]\") == true\\n  MethodError: objects\
    \ of type String are not callable\\n  Stacktrace:\\n   [1] _simple_count(pred::String,\
    \ itr::Char, init::Int64)\\n     @ Base ./reduce.jl:1206\\n   [2] count(f::String,\
    \ itr::Char; init::Int64)\\n     @ Base ./reduce.jl:1201\\n   [3] count(f::String,\
    \ itr::Char)\\n     @ Base ./reduce.jl:1201\\n   [4] is_nested(string::String)\\\
    n     @ Main /tmp/tmpb3zlv367.jl:14\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmpb3zlv367.jl:21 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmpb3zlv367.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpb3zlv367.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\\n  MethodError: objects of type String\
    \ are not callable\\n  Stacktrace:\\n   [1] _simple_count(pred::String, itr::Char,\
    \ init::Int64)\\n     @ Base ./reduce.jl:1206\\n   [2] count(f::String, itr::Char;\
    \ init::Int64)\\n     @ Base ./reduce.jl:1201\\n   [3] count(f::String, itr::Char)\\\
    n     @ Base ./reduce.jl:1201\\n   [4] is_nested(string::String)\\n     @ Main\
    \ /tmp/tmpb3zlv367.jl:14\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmpb3zlv367.jl:22 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmpb3zlv367.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpb3zlv367.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[][]\") == false\\n  MethodError: objects of type String are not\
    \ callable\\n  Stacktrace:\\n   [1] _simple_count(pred::String, itr::Char, init::Int64)\\\
    n     @ Base ./reduce.jl:1206\\n   [2] count(f::String, itr::Char; init::Int64)\\\
    n     @ Bas"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    count = 0\n    for\
    \ char in string\n        if char == '['\n            count += 1\n        elseif\
    \ char == ']'\n            count -= 1\n        end\n        if count < 0\n   \
    \         return false\n        end\n    end\n    if count == 0\n        return\
    \ true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgx5psgun.jl:38\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgx5psgun.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgx5psgun.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpgx5psgun.jl:39\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgx5psgun.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgx5psgun.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpgx5psgun.jl:45\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgx5psgun.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgx5psgun.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpgx5psgun.jl:47\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgx5psgun.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgx5psgun.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgx5psgun.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    return string != \"\
    []\" && string != \"[]\" && string != \"[[]]\" && string != \"[][]\" && string\
    \ != \"[[][]]\"\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy5solpy6.jl:21\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy5solpy6.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy5solpy6.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpy5solpy6.jl:22\n  Expression: candidate(\"[]]]]]]][[[[[]\"\
    ) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy5solpy6.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy5solpy6.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpy5solpy6.jl:26\n  Expression: candidate(\"[]]]]]]]]]]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpy5solpy6.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy5solpy6.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpy5solpy6.jl:28\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy5solpy6.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy5solpy6.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpy5solpy6.jl:29\n  Expression: candidate(\"[]]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Tes"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 9 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy5solpy6.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    return matches(r\"\
    [\\[\\]]+\", string)\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpbbs_n1fk.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"[[]]\") == true\\n  UndefVarError: matches\
    \ not defined\\n  Stacktrace:\\n   [1] is_nested(string::String)\\n     @ Main\
    \ /tmp/tmpbbs_n1fk.jl:14\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpbbs_n1fk.jl:21 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpbbs_n1fk.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpbbs_n1fk.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\\n  UndefVarError: matches not defined\\\
    n  Stacktrace:\\n   [1] is_nested(string::String)\\n     @ Main /tmp/tmpbbs_n1fk.jl:14\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpbbs_n1fk.jl:22 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpbbs_n1fk.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpbbs_n1fk.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[][]\") == false\\n  UndefVarError: matches not defined\\n  Stacktrace:\\\
    n   [1] is_nested(string::String)\\n     @ Main /tmp/tmpbbs_n1fk.jl:14\\n   [2]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpbbs_n1fk.jl:23 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpbbs_n1fk.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpbbs_n1fk.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]\") == false\\n  UndefVarError: matches not defined\\n  Stacktrace:\\\
    n   [1] is_nested(string::String)\\n     @ Main /tmp/tmpbbs_n1fk.jl:14\\n   [2]\
    \ mac"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    s = 0\n    for i in\
    \ string\n        if i == '['\n            s += 1\n        else\n            s\
    \ -= 1\n        end\n        if s < 0\n            return false\n        end\n\
    \    end\n    return s==0\nend\n@testset \"Basic Tests\" begin\n    @test is_nested(\"\
    [[]]\") == true\n    @test is_nested(\"[]]]]]]][[[[[]\") == false\n    @test is_nested(\"\
    [][]\") == false\n    @test is_nested(\"[]\") == false\n    @test is_nested(\"\
    [[][]]\") == true\n    @test is_nested(\"[[]][[\") == true\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\
    \t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") ==\
    \ false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @testset not defined\nin expression starting\
    \ at /tmp/tmp0_m6yy5f.jl:27\nin expression starting at /tmp/tmp0_m6yy5f.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    return contains(string,\
    \ \"[]\")\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2fiz4yrm.jl:22\n  Expression: candidate(\"\
    []]]]]]][[[[[]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2fiz4yrm.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2fiz4yrm.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp2fiz4yrm.jl:23\n  Expression: candidate(\"[][]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2fiz4yrm.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2fiz4yrm.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp2fiz4yrm.jl:24\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2fiz4yrm.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2fiz4yrm.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp2fiz4yrm.jl:26\n  Expression: candidate(\"[]]]]]]]]]]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp2fiz4yrm.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2fiz4yrm.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp2fiz4yrm.jl:28\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Tes"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2fiz4yrm.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack = []\n    for\
    \ i in string\n        if i == '['\n            push!(stack, 1)\n        elseif\
    \ i == ']'\n            if isempty(stack)\n                return false\n    \
    \        else\n                pop!(stack)\n            end\n        end\n   \
    \ end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmlfwfdpl.jl:35\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmlfwfdpl.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmlfwfdpl.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpmlfwfdpl.jl:36\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmlfwfdpl.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmlfwfdpl.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpmlfwfdpl.jl:42\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmlfwfdpl.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmlfwfdpl.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpmlfwfdpl.jl:44\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmlfwfdpl.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmlfwfdpl.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmlfwfdpl.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    for i = 1:length(string)\n\
    \        if string[i] == '[' && string[i+1] == ']'\n            return true\n\
    \        end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp1cqwiupy.jl:27\\n  Expression: candidate(\"\
    []]]]]]][[[[[]\") == false\\n   Evaluated: true == false\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp1cqwiupy.jl:27 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp1cqwiupy.jl:25\\ntest set: Test\
    \ Failed at /tmp/tmp1cqwiupy.jl:28\\n  Expression: candidate(\"[][]\") == false\\\
    n   Evaluated: true == false\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp1cqwiupy.jl:28 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp1cqwiupy.jl:25\\ntest set: Test\
    \ Failed at /tmp/tmp1cqwiupy.jl:29\\n  Expression: candidate(\"[]\") == false\\\
    n   Evaluated: true == false\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp1cqwiupy.jl:29 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp1cqwiupy.jl:25\\ntest set: Test\
    \ Failed at /tmp/tmp1cqwiupy.jl:31\\n  Expression: candidate(\"[]]]]]]]]]]\")\
    \ == false\\n   Evaluated: true == false\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp1cqwiupy.jl:31 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp1cqwiupy.jl:25\\ntest set: Test\
    \ Failed at /tmp/tmp1cqwiupy.jl:33\\n  Expression: candidate(\"[[]\") == false\\\
    n   Evaluated: true == false\\nStacktrace:\\n [1] macro expansion\\n   @ "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    return count(x->x=='[',\
    \ string) > count(x->x==']', string)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp40q6rndi.jl:21\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp40q6rndi.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp40q6rndi.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp40q6rndi.jl:25\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp40q6rndi.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp40q6rndi.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp40q6rndi.jl:27\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp40q6rndi.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp40q6rndi.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp40q6rndi.jl:28\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp40q6rndi.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp40q6rndi.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp40q6rndi.jl:31\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Tes"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp40q6rndi.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    for i = 1:length(string)\n\
    \        if string[i] == '['\n            for j = i+1:length(string)\n       \
    \         if string[j] == ']'\n                    return true\n             \
    \   end\n            end\n        end\n    end\n    return false\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\
    \t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") ==\
    \ false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpehly5dcs.jl:31\n  Expression: candidate(\"\
    []]]]]]][[[[[]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpehly5dcs.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpehly5dcs.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpehly5dcs.jl:32\n  Expression: candidate(\"[][]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpehly5dcs.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpehly5dcs.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpehly5dcs.jl:33\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpehly5dcs.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpehly5dcs.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpehly5dcs.jl:35\n  Expression: candidate(\"[]]]]]]]]]]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpehly5dcs.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpehly5dcs.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpehly5dcs.jl:37\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Tes"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpehly5dcs.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    return string.match(\"\
    (\\\\[\\\\])*\\\\[\\\\w*\\\\][\\\\[\\\\]]*\") != nothing || string.match(\"\\\\\
    [\\\\w*\\\\][\\\\[\\\\]]*(\\\\[\\\\])*\") != nothing\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpw3yfp35f.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"[[]]\") == true\\n  type String has no\
    \ field match\\n  Stacktrace:\\n   [1] getproperty\\n     @ ./Base.jl:42 [inlined]\\\
    n   [2] is_nested(string::String)\\n     @ Main /tmp/tmpw3yfp35f.jl:14\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpw3yfp35f.jl:21 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpw3yfp35f.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpw3yfp35f.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\\n  type String has no field match\\\
    n  Stacktrace:\\n   [1] getproperty\\n     @ ./Base.jl:42 [inlined]\\n   [2] is_nested(string::String)\\\
    n     @ Main /tmp/tmpw3yfp35f.jl:14\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpw3yfp35f.jl:22 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpw3yfp35f.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpw3yfp35f.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[][]\") == false\\n  type String has no field match\\n  Stacktrace:\\\
    n   [1] getproperty\\n     @ ./Base.jl:42 [inlined]\\n   [2] is_nested(string::String)\\\
    n     @ Main /tmp/tmpw3yfp35f.jl:14\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpw3yfp35f.jl:23 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpw3yfp35f.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpw3yfp35f.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]\") =="
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    parentheses = 0\n\
    \    n = 0\n    while n <= length(string)\n        if string[n] == '['\n     \
    \       parentheses += 1\n        elseif string[n] == ']'\n            parentheses\
    \ -= 1\n        end\n        if parentheses < 0\n            return false\n  \
    \      end\n        n += 1\n    end\n    return parentheses > 0\nend\nprintln(is_nested(\"\
    [][]\"))\nprintln(is_nested(\"[[]]\"))\nprintln(is_nested(\"[]]]]]]][[[[[]\"))\n\
    println(is_nested(\"[[]][[\"))\n \n        \n \n \nusing Test\n\n@testset begin\n\
    \ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: BoundsError: attempt to access 4-codeunit String at index\
    \ [0]\nStacktrace:\n [1] checkbounds\n   @ ./strings/basic.jl:216 [inlined]\n\
    \ [2] codeunit\n   @ ./strings/string.jl:102 [inlined]\n [3] getindex\n   @ ./strings/string.jl:223\
    \ [inlined]\n [4] is_nested(string::String)\n   @ Main /tmp/tmps750_hj3.jl:17\n\
    \ [5] top-level scope\n   @ /tmp/tmps750_hj3.jl:29\nin expression starting at\
    \ /tmp/tmps750_hj3.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    return true\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3qtp1ja5.jl:22\n  Expression: candidate(\"\
    []]]]]]][[[[[]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3qtp1ja5.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3qtp1ja5.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp3qtp1ja5.jl:23\n  Expression: candidate(\"[][]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3qtp1ja5.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3qtp1ja5.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp3qtp1ja5.jl:24\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3qtp1ja5.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3qtp1ja5.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp3qtp1ja5.jl:26\n  Expression: candidate(\"[]]]]]]]]]]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp3qtp1ja5.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3qtp1ja5.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp3qtp1ja5.jl:28\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Tes"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 9 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3qtp1ja5.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    return findnext(string,\
    \ 1) !== nothing\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmptxenes6z.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"[[]]\") == true\\n  TypeError: non-boolean\
    \ (Char) used in boolean context\\n  Stacktrace:\\n   [1] findnext(A::String,\
    \ start::Int64)\\n     @ Base ./array.jl:1867\\n   [2] is_nested(string::String)\\\
    n     @ Main /tmp/tmptxenes6z.jl:14\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmptxenes6z.jl:21 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmptxenes6z.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmptxenes6z.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\\n  TypeError: non-boolean (Char) used\
    \ in boolean context\\n  Stacktrace:\\n   [1] findnext(A::String, start::Int64)\\\
    n     @ Base ./array.jl:1867\\n   [2] is_nested(string::String)\\n     @ Main\
    \ /tmp/tmptxenes6z.jl:14\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmptxenes6z.jl:22 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmptxenes6z.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmptxenes6z.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[][]\") == false\\n  TypeError: non-boolean (Char) used in boolean\
    \ context\\n  Stacktrace:\\n   [1] findnext(A::String, start::Int64)\\n     @\
    \ Base ./array.jl:1867\\n   [2] is_nested(string::String)\\n     @ Main /tmp/tmptxenes6z.jl:14\\\
    n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmptxenes6z.jl:23 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/t"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    # 1. we save the number\
    \ of opening brackets\n    #    and the number of closing brackets \n    #   \
    \ (both values must be equal)\n    opening_count = 0\n    closing_count = 0\n\
    \    for letter in string\n        opening_count += (letter == '[') ? 1 : 0\n\
    \        closing_count += (letter == ']') ? 1 : 0\n    end\n    # 2. if the number\
    \ of opening brackets is not equal to the number of closing ones\n    #    then\
    \ we have a problem and we can return False\n    if opening_count != closing_count\n\
    \        return false\n    end\n    # 3. we iterate through each character and\
    \ keep track of the number of\n    #    opening brackets\n    #    a. if we reach\
    \ a closing bracket and the number of opening brackets is 0 \n    #       then\
    \ we reach a nested bracket so we return True\n    #    b. if we reach a closing\
    \ bracket and the number of opening brackets is not 0\n    #       then we just\
    \ decrease the number of opening brackets\n    #    c. if we reach an opening\
    \ bracket we just increase the number of opening brackets\n    counter = 0\n \
    \   for letter in string\n        if letter == ']'\n            if counter ==\
    \ 0\n                return true\n            else\n                counter -=\
    \ 1\n            end\n        elseif letter == '['\n            counter += 1\n\
    \        end\n    end\n    # 4. if we don't return True after the iteration we\
    \ return False\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdyxuifmo.jl:55\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdyxuifmo.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdyxuifmo.jl:54\ntest set: Test\
    \ Failed at /tmp/tmpdyxuifmo.jl:59\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdyxuifmo.jl:59 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdyxuifmo.jl:54\ntest set: Test\
    \ Failed at /tmp/tmpdyxuifmo.jl:61\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdyxuifmo.jl:61 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdyxuifmo.jl:54\ntest set: Test\
    \ Failed at /tmp/tmpdyxuifmo.jl:64\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdyxuifmo.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdyxuifmo.jl:54\ntest set: Test\
    \ Failed at /tmp/tmpdyxuifmo.jl:65\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/T"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdyxuifmo.jl:52\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open = 0\n    for\
    \ i = 1:length(string)\n        if string[i] == '['\n            open += 1\n \
    \       elseif string[i] == ']'\n            open -= 1\n        end\n        if\
    \ open < 0\n            return false\n        end\n    end\n    return open !=\
    \ 0\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfxjack2y.jl:32\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfxjack2y.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfxjack2y.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpfxjack2y.jl:36\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfxjack2y.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfxjack2y.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpfxjack2y.jl:38\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfxjack2y.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfxjack2y.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpfxjack2y.jl:39\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfxjack2y.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfxjack2y.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpfxjack2y.jl:42\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Tes"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfxjack2y.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    chars = split(string,\
    \ \"\")\n    open = 0\n    for i in 1:length(chars)\n        if(chars[i] == \"\
    [\")\n            open += 1\n        else\n            open -= 1\n        end\n\
    \        if(open < 0)\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1p_l1ec2.jl:35\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1p_l1ec2.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1p_l1ec2.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp1p_l1ec2.jl:36\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1p_l1ec2.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1p_l1ec2.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp1p_l1ec2.jl:40\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1p_l1ec2.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1p_l1ec2.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp1p_l1ec2.jl:45\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1p_l1ec2.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1p_l1ec2.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1p_l1ec2.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    bracketStack = Stack{Char}()\n\
    \    for (i, char) in enumerate(string)\n        if char == '['\n            push!(bracketStack,\
    \ char)\n        else\n            if !isempty(bracketStack)\n               \
    \ pop!(bracketStack)\n            else\n                return false\n       \
    \     end\n        end\n    end\n    return isempty(bracketStack)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp44jui2jw.jl:33\\n  Test threw\
    \ exception\\n  Expression: candidate(\"[[]]\") == true\\n  UndefVarError: Stack\
    \ not defined\\n  Stacktrace:\\n   [1] is_nested(string::String)\\n     @ Main\
    \ /tmp/tmp44jui2jw.jl:14\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp44jui2jw.jl:33 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp44jui2jw.jl:32\\ntest set:\
    \ Error During Test at /tmp/tmp44jui2jw.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\\n  UndefVarError: Stack not defined\\\
    n  Stacktrace:\\n   [1] is_nested(string::String)\\n     @ Main /tmp/tmp44jui2jw.jl:14\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp44jui2jw.jl:34 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp44jui2jw.jl:32\\ntest set:\
    \ Error During Test at /tmp/tmp44jui2jw.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[][]\") == false\\n  UndefVarError: Stack not defined\\n  Stacktrace:\\\
    n   [1] is_nested(string::String)\\n     @ Main /tmp/tmp44jui2jw.jl:14\\n   [2]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp44jui2jw.jl:35 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp44jui2jw.jl:32\\ntest set:\
    \ Error During Test at /tmp/tmp44jui2jw.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]\") == false\\n  UndefVarError: Stack not defined\\n  Stacktrace:\\\
    n   [1] is_nested(string::String)\\n     @ Main /tmp/tmp44jui2jw.jl:14\\n   [2]\
    \ macro expan"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    str = []\n    count\
    \ = 0\n    for s in string\n        if s == '['\n            push!(str, s)\n \
    \           count += 1\n        elseif s == ']'\n            if isempty(str) ||\
    \ str[end] != '['\n                return false\n            elseif str[end] ==\
    \ '['\n                pop!(str)\n                count -= 1\n            end\n\
    \        end\n    end\n    if count != 0\n        return false\n    else\n   \
    \     return true\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpruo03yhj.jl:42\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpruo03yhj.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpruo03yhj.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpruo03yhj.jl:43\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpruo03yhj.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpruo03yhj.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpruo03yhj.jl:49\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpruo03yhj.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpruo03yhj.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpruo03yhj.jl:51\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpruo03yhj.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpruo03yhj.jl:39\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpruo03yhj.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    # needs implementation\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "b'test set: '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    has_opening = has_closing\
    \ = false\n    for i in string\n        if i == '['\n            has_opening =\
    \ true\n        elseif i == ']'\n            has_closing = true\n        end\n\
    \    end\n    return has_opening && has_closing\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmlnoz4to.jl:30\n  Expression: candidate(\"\
    []]]]]]][[[[[]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmlnoz4to.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmlnoz4to.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpmlnoz4to.jl:31\n  Expression: candidate(\"[][]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmlnoz4to.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmlnoz4to.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpmlnoz4to.jl:32\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmlnoz4to.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmlnoz4to.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpmlnoz4to.jl:34\n  Expression: candidate(\"[]]]]]]]]]]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpmlnoz4to.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmlnoz4to.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpmlnoz4to.jl:36\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Tes"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmlnoz4to.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    # https://stackoverflow.com/questions/51494311/how-to-use-regular-expressions-to-match-an-arbitrary-number-of-balanced-bracket\n\
    \    # use regex to count number of opening and closing square brackets\n    if\
    \ match(r\"[\\]\\[]+\", string) != nothing\n        n_open = length(match(r\"\\\
    [\", string).match)\n        n_close = length(match(r\"\\]\", string).match)\n\
    \        # if number of opening and closing square brackets is equal\n       \
    \ # then there is no nesting\n        if n_open == n_close\n            false\n\
    \        else\n            true\n        end\n    else\n        false\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpgutkdzzd.jl:35\\n  Expression: candidate(\"\
    [[]]\") == true\\n   Evaluated: false == true\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpgutkdzzd.jl:35 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpgutkdzzd.jl:34\\ntest set: Test\
    \ Failed at /tmp/tmpgutkdzzd.jl:39\\n  Expression: candidate(\"[[[[]]]]\") ==\
    \ true\\n   Evaluated: false == true\\nStacktrace:\\n [1] macro expansion\\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpgutkdzzd.jl:39 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpgutkdzzd.jl:34\\ntest set: Test\
    \ Failed at /tmp/tmpgutkdzzd.jl:41\\n  Expression: candidate(\"[][][[]]\") ==\
    \ true\\n   Evaluated: false == true\\nStacktrace:\\n [1] macro expansion\\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpgutkdzzd.jl:41 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpgutkdzzd.jl:34\\ntest set: Test\
    \ Failed at /tmp/tmpgutkdzzd.jl:44\\n  Expression: candidate(\"[[]][[\") == true\\\
    n   Evaluated: false == true\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpgutkdzzd.jl:44 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpgutkdzzd.jl:34\\ntest set: Test\
    \ Failed at /tmp/tmpgutkdzzd.jl:45\\n  Expression: candidate(\"[[][]]\") == true\\\
    n   Evaluated: false == true\\nStacktrace:\\n [1] macro expansion\\n   @ /shared"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    if length(string)\
    \ == 0 \n        return false\n    end\n    stack = Int[]\n    for char in string\n\
    \        if char == '['\n            push!(stack, char)\n        elseif length(stack)\
    \ > 0 \n            pop!(stack)\n        else\n            return false\n    \
    \    end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppfq7pg5e.jl:36\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppfq7pg5e.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppfq7pg5e.jl:33\ntest set: Test\
    \ Failed at /tmp/tmppfq7pg5e.jl:37\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppfq7pg5e.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppfq7pg5e.jl:33\ntest set: Test\
    \ Failed at /tmp/tmppfq7pg5e.jl:41\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppfq7pg5e.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppfq7pg5e.jl:33\ntest set: Test\
    \ Failed at /tmp/tmppfq7pg5e.jl:46\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppfq7pg5e.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppfq7pg5e.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppfq7pg5e.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    temp = 0\n    for\
    \ (i, c) in enumerate(string)\n        if c == '['\n            temp += 1\n  \
    \      elseif c == ']'\n            temp -= 1\n        end\n    end\n    temp\
    \ == 0 ? false : true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2pc9ri25.jl:29\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2pc9ri25.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2pc9ri25.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp2pc9ri25.jl:30\n  Expression: candidate(\"[]]]]]]][[[[[]\"\
    ) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2pc9ri25.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2pc9ri25.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp2pc9ri25.jl:33\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2pc9ri25.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2pc9ri25.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp2pc9ri25.jl:34\n  Expression: candidate(\"[]]]]]]]]]]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp2pc9ri25.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2pc9ri25.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp2pc9ri25.jl:35\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 10 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2pc9ri25.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    brackets = [\"[\"\
    ]\n    for char in string\n        if char == '['\n            push!(brackets,\
    \ char)\n        elseif char == ']'\n            if length(brackets) > 1\n   \
    \             pop!(brackets)\n            else\n                return false\n\
    \            end\n        end\n    end\n    return false\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\
    \t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") ==\
    \ false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "b'test set: '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    if length(string)==0\n\
    \        return false\n    end\n    for i in 1:length(string)\n        if string[i]\
    \ == '['\n            is_nested(string[i+1:end])\n        elseif string[i] ==\
    \ ']'\n            return true\n        end\n    end\n    return false\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp91wdpedy.jl:32\n  Expression: candidate(\"\
    []]]]]]][[[[[]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp91wdpedy.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp91wdpedy.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp91wdpedy.jl:33\n  Expression: candidate(\"[][]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp91wdpedy.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp91wdpedy.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp91wdpedy.jl:34\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp91wdpedy.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp91wdpedy.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp91wdpedy.jl:36\n  Expression: candidate(\"[]]]]]]]]]]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp91wdpedy.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp91wdpedy.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp91wdpedy.jl:38\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Tes"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp91wdpedy.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    is_nested = 0\n  \
    \  for i in string\n        if i == '['\n            is_nested = is_nested + 1\n\
    \        else\n            is_nested = is_nested - 1\n        end\n        if\
    \ is_nested < 0\n            return false\n        end\n    end\n    return is_nested\
    \ == 0\nend\nprintln(is_nested('[[]]'))\nprintln(is_nested('[]]]]]]][[[[[]'))\n\
    println(is_nested('[][]'))\nprintln(is_nested('[]'))\nprintln(is_nested('[[][]]'))\n\
    println(is_nested('[[]][['))\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpyap6nc56.jl:27\nin expression\
    \ starting at /tmp/tmpyap6nc56.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    \"\"\"\n    Return\
    \ true if string is a nesting of brackets (either '[]' or '[[]]')\n    \"\"\"\n\
    \    length(string) == 2 ? false : string[1] == '[' ? true : is_nested(string[2:end])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpititjadb.jl:25\\n  Expression: candidate(\"\
    []]]]]]][[[[[]\") == false\\n   Evaluated: true == false\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpititjadb.jl:25 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpititjadb.jl:23\\ntest set: Test\
    \ Failed at /tmp/tmpititjadb.jl:26\\n  Expression: candidate(\"[][]\") == false\\\
    n   Evaluated: true == false\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpititjadb.jl:26 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpititjadb.jl:23\\ntest set: Test\
    \ Failed at /tmp/tmpititjadb.jl:29\\n  Expression: candidate(\"[]]]]]]]]]]\")\
    \ == false\\n   Evaluated: true == false\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpititjadb.jl:29 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpititjadb.jl:23\\ntest set: Test\
    \ Failed at /tmp/tmpititjadb.jl:31\\n  Expression: candidate(\"[[]\") == false\\\
    n   Evaluated: true == false\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpititjadb.jl:31 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpititjadb.jl:23\\ntest set: Test\
    \ Failed at /tmp/tmpititjadb.jl:32\\n  Expression: candidate(\"[]]\") == false\\\
    n   Evaluated: true == false\\nStacktrace:\\n [1] macro expansion\\n   @"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    count = 0\n    for\
    \ i in eachindex(string)\n        count += i == '[' ? 1 : -1\n        if count\
    \ < 0\n            return false\n        end\n    end\n    return count == 0\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpoklysuw_.jl:28\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoklysuw_.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoklysuw_.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpoklysuw_.jl:32\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoklysuw_.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoklysuw_.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpoklysuw_.jl:34\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoklysuw_.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoklysuw_.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpoklysuw_.jl:37\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoklysuw_.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoklysuw_.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpoklysuw_.jl:38\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/T"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoklysuw_.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack = []\n    for\
    \ char in string\n        if char == '['\n            push!(stack, ']')\n    \
    \    elseif char == ']'\n            if isempty(stack) || stack[end] != char\n\
    \                return false\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    if !isempty(stack)\n        return\
    \ false\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp49twgu1o.jl:38\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp49twgu1o.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp49twgu1o.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp49twgu1o.jl:39\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp49twgu1o.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp49twgu1o.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp49twgu1o.jl:45\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp49twgu1o.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp49twgu1o.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp49twgu1o.jl:47\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp49twgu1o.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp49twgu1o.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp49twgu1o.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    if contains(string,\
    \ '[]') == true \n        return true\n    else \n        return false\n    end\n\
    end\n@show is_nested('[[]]') \n@show is_nested('[]]]]]]][[[[[]') \n@show is_nested('[][]')\
    \ \n@show is_nested('[]') \n@show is_nested('[[][]]') \n@show is_nested('[[]][[')\
    \ \nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmptuoiqmri.jl:14\nin expression\
    \ starting at /tmp/tmptuoiqmri.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    depth = 0\n    is_nested\
    \ = false\n    for i in string\n        depth += i == '[' ? 1 : -1\n        if\
    \ depth == 0 && i == ']'\n            is_nested = true\n        end\n    end\n\
    \    return is_nested\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp49vrzcq9.jl:30\n  Expression: candidate(\"\
    []]]]]]][[[[[]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp49vrzcq9.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp49vrzcq9.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp49vrzcq9.jl:31\n  Expression: candidate(\"[][]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp49vrzcq9.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp49vrzcq9.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp49vrzcq9.jl:32\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp49vrzcq9.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp49vrzcq9.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp49vrzcq9.jl:34\n  Expression: candidate(\"[]]]]]]]]]]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp49vrzcq9.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp49vrzcq9.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp49vrzcq9.jl:37\n  Expression: candidate(\"[]]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Tes"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp49vrzcq9.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    string = replace(string,\
    \ ' ', '')\n    #stack\n    stack::Vector{Char} = Vector{Char}()\n    for c in\
    \ string\n        if c == '['\n            push!(stack, c)\n        else\n   \
    \         isempty(stack) && return false\n            pop!(stack)\n        end\n\
    \    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid empty character literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3oykf9mi.jl:14\nin expression starting at\
    \ /tmp/tmp3oykf9mi.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack = Any[]\n  \
    \  for char in string\n        if char in \"[\"\n            push!(stack, char)\n\
    \        else\n            if !isempty(stack) && stack[end] == \"[\"\n       \
    \         pop!(stack)\n            else\n                return false\n      \
    \      end\n        end\n    end\n    isempty(stack)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpd878vt51.jl:33\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd878vt51.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd878vt51.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpd878vt51.jl:37\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd878vt51.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd878vt51.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpd878vt51.jl:39\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd878vt51.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd878vt51.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpd878vt51.jl:42\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd878vt51.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd878vt51.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpd878vt51.jl:43\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/T"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd878vt51.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    op = 0\n    cl = 0\n\
    \    for i in 1:length(string)\n        if string[i] == '['\n            op +=\
    \ 1\n        else\n            cl += 1\n        end\n        if cl > op\n    \
    \        return false\n        end\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\
    \t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") ==\
    \ false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0_l17tlf.jl:35\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0_l17tlf.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0_l17tlf.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp0_l17tlf.jl:36\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0_l17tlf.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0_l17tlf.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp0_l17tlf.jl:40\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0_l17tlf.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0_l17tlf.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp0_l17tlf.jl:44\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0_l17tlf.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0_l17tlf.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp0_l17tlf.jl:45\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0_l17tlf.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    n_open = 0\n    n_close\
    \ = 0\n    for i in string\n        n_open += i == '[' ? 1 : 0\n        n_close\
    \ += i == ']' ? 1 : 0\n        if n_close > n_open\n            return false\n\
    \        end\n    end\n    return n_open != n_close\nend\n \nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm_6pvsw5.jl:31\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm_6pvsw5.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm_6pvsw5.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpm_6pvsw5.jl:35\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm_6pvsw5.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm_6pvsw5.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpm_6pvsw5.jl:37\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm_6pvsw5.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm_6pvsw5.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpm_6pvsw5.jl:38\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm_6pvsw5.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm_6pvsw5.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpm_6pvsw5.jl:41\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Tes"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm_6pvsw5.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    # your code here\n\
    \    end\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    count = 0\n    for\
    \ c in string\n        if c == '['\n            count += 1\n        elseif c ==\
    \ ']'\n            count -= 1\n        end\n        if count < 0\n           \
    \ return false\n        end\n    end\n    return true\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpoj6yie84.jl:34\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoj6yie84.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoj6yie84.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpoj6yie84.jl:35\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoj6yie84.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoj6yie84.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpoj6yie84.jl:39\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoj6yie84.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoj6yie84.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpoj6yie84.jl:43\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoj6yie84.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoj6yie84.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpoj6yie84.jl:44\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoj6yie84.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    Stack = []\n    for\
    \ char in string\n        if char in \"[\"\n            push!(Stack, char)\n \
    \       else\n            if isempty(Stack)\n                return false\n  \
    \          else\n                pop!(Stack)\n            end\n        end\n \
    \   end\n    return length(Stack) == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpztqldsim.jl:35\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztqldsim.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztqldsim.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpztqldsim.jl:36\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztqldsim.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztqldsim.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpztqldsim.jl:42\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztqldsim.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztqldsim.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpztqldsim.jl:44\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztqldsim.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztqldsim.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpztqldsim.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    bracket_stack = []\n\
    \    for char in string\n        if char == '['\n            push!(bracket_stack,\
    \ char)\n        else\n            if isempty(bracket_stack)\n               \
    \ return false\n            elseif bracket_stack[end] == '['\n               \
    \ pop!(bracket_stack)\n            else\n                return false\n      \
    \      end\n        end\n    end\n    return isempty(bracket_stack)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp237nzj0z.jl:37\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp237nzj0z.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp237nzj0z.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp237nzj0z.jl:38\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp237nzj0z.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp237nzj0z.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp237nzj0z.jl:44\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp237nzj0z.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp237nzj0z.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp237nzj0z.jl:46\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp237nzj0z.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp237nzj0z.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp237nzj0z.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    l = []\n    for i\
    \ in 1:length(string)\n        push!(l, string[i])\n    end\n    for i in 1:length(l)\n\
    \        if l[i] == '['\n            if l[i+1] == ']'\n                return\
    \ true\n            end\n        end\n    end\n    return false\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\
    \t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") ==\
    \ false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp1a_r8mm3.jl:33\\n  Expression: candidate(\"\
    []]]]]]][[[[[]\") == false\\n   Evaluated: true == false\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp1a_r8mm3.jl:33 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp1a_r8mm3.jl:31\\ntest set: Test\
    \ Failed at /tmp/tmp1a_r8mm3.jl:34\\n  Expression: candidate(\"[][]\") == false\\\
    n   Evaluated: true == false\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp1a_r8mm3.jl:34 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp1a_r8mm3.jl:31\\ntest set: Test\
    \ Failed at /tmp/tmp1a_r8mm3.jl:35\\n  Expression: candidate(\"[]\") == false\\\
    n   Evaluated: true == false\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp1a_r8mm3.jl:35 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp1a_r8mm3.jl:31\\ntest set: Test\
    \ Failed at /tmp/tmp1a_r8mm3.jl:37\\n  Expression: candidate(\"[]]]]]]]]]]\")\
    \ == false\\n   Evaluated: true == false\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp1a_r8mm3.jl:37 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp1a_r8mm3.jl:31\\ntest set: Test\
    \ Failed at /tmp/tmp1a_r8mm3.jl:39\\n  Expression: candidate(\"[[]\") == false\\\
    n   Evaluated: true == false\\nStacktrace:\\n [1] macro expansion\\n   @ "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    s = Stack()\n    is_empty\
    \ = false\n    is_nested = false\n    for c in string\n        if c == '['\n \
    \           push!(s, c)\n        elseif c == ']'\n            if length(s) ==\
    \ 0\n                is_empty = true\n                break\n            else\n\
    \                pop!(s)\n            end\n        end\n    end\n    if length(s)\
    \ == 0 && !is_empty\n        is_nested = true\n    end\n    return is_nested\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpb8jvz3u6.jl:39\\n  Test threw\
    \ exception\\n  Expression: candidate(\"[[]]\") == true\\n  UndefVarError: Stack\
    \ not defined\\n  Stacktrace:\\n   [1] is_nested(string::String)\\n     @ Main\
    \ /tmp/tmpb8jvz3u6.jl:14\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpb8jvz3u6.jl:39 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpb8jvz3u6.jl:38\\ntest set:\
    \ Error During Test at /tmp/tmpb8jvz3u6.jl:40\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\\n  UndefVarError: Stack not defined\\\
    n  Stacktrace:\\n   [1] is_nested(string::String)\\n     @ Main /tmp/tmpb8jvz3u6.jl:14\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpb8jvz3u6.jl:40 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpb8jvz3u6.jl:38\\ntest set:\
    \ Error During Test at /tmp/tmpb8jvz3u6.jl:41\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[][]\") == false\\n  UndefVarError: Stack not defined\\n  Stacktrace:\\\
    n   [1] is_nested(string::String)\\n     @ Main /tmp/tmpb8jvz3u6.jl:14\\n   [2]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpb8jvz3u6.jl:41 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpb8jvz3u6.jl:38\\ntest set:\
    \ Error During Test at /tmp/tmpb8jvz3u6.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]\") == false\\n  UndefVarError: Stack not defined\\n  Stacktrace:\\\
    n   [1] is_nested(string::String)\\n     @ Main /tmp/tmpb8jvz3u6.jl:14\\n   [2]\
    \ macro expan"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    b = match(r\"[\\[\\\
    ]]\", string)\n    # first check if there is an odd number of [ and ]\n    if\
    \ length(b) % 2 != 0\n        return false\n    end\n    square_brackets = []\n\
    \    square_brackets = filter(x -> x==\"[\", b)\n    # check if there is at least\
    \ two pairs of [ and ]\n    if length(square_brackets) >= 2\n        return true\n\
    \    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    match = []\n    for\
    \ c in string\n        if c == '['\n            push!(match, 1)\n        else\n\
    \            if isempty(match)\n                return false\n            else\n\
    \                pop!(match)\n            end\n        end\n    end\n    return\
    \ isempty(match)\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp24p1syml.jl:35\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp24p1syml.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp24p1syml.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp24p1syml.jl:36\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp24p1syml.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp24p1syml.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp24p1syml.jl:42\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp24p1syml.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp24p1syml.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp24p1syml.jl:44\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp24p1syml.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp24p1syml.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp24p1syml.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    return string[1] ==\
    \ \"[\" && string[end] == \"]\" && (length(string) == 2 || is_nested(string[2:end-1]))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpvmb_gke4.jl:21\\n  Expression: candidate(\"\
    [[]]\") == true\\n   Evaluated: false == true\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpvmb_gke4.jl:21 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpvmb_gke4.jl:20\\ntest set: Test\
    \ Failed at /tmp/tmpvmb_gke4.jl:25\\n  Expression: candidate(\"[[[[]]]]\") ==\
    \ true\\n   Evaluated: false == true\\nStacktrace:\\n [1] macro expansion\\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpvmb_gke4.jl:25 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpvmb_gke4.jl:20\\ntest set: Test\
    \ Failed at /tmp/tmpvmb_gke4.jl:27\\n  Expression: candidate(\"[][][[]]\") ==\
    \ true\\n   Evaluated: false == true\\nStacktrace:\\n [1] macro expansion\\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpvmb_gke4.jl:27 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpvmb_gke4.jl:20\\ntest set: Test\
    \ Failed at /tmp/tmpvmb_gke4.jl:30\\n  Expression: candidate(\"[[]][[\") == true\\\
    n   Evaluated: false == true\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpvmb_gke4.jl:30 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpvmb_gke4.jl:20\\ntest set: Test\
    \ Failed at /tmp/tmpvmb_gke4.jl:31\\n  Expression: candidate(\"[[][]]\") == true\\\
    n   Evaluated: false == true\\nStacktrace:\\n [1] macro expansion\\n   @ /shared"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    i = 0\n    for s in\
    \ string\n        if s == '['\n            i += 1\n        elseif s == ']'\n \
    \           i -= 1\n        end\n    end\n    return i >= 0 ? true : false\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq_925w_1.jl:31\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq_925w_1.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq_925w_1.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpq_925w_1.jl:32\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq_925w_1.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq_925w_1.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpq_925w_1.jl:36\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq_925w_1.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq_925w_1.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpq_925w_1.jl:40\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq_925w_1.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq_925w_1.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpq_925w_1.jl:41\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq_925w_1.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    n = length(string)\n\
    \    for i in 1:n\n        if string[i] == '['\n            for j in i+1:n\n \
    \               if string[j] == ']'\n                    return true\n       \
    \         end\n            end\n        end\n    end\n    return false\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2j16_g50.jl:32\n  Expression: candidate(\"\
    []]]]]]][[[[[]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2j16_g50.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2j16_g50.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp2j16_g50.jl:33\n  Expression: candidate(\"[][]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2j16_g50.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2j16_g50.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp2j16_g50.jl:34\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2j16_g50.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2j16_g50.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp2j16_g50.jl:36\n  Expression: candidate(\"[]]]]]]]]]]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp2j16_g50.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2j16_g50.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp2j16_g50.jl:38\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Tes"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2j16_g50.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    for i in 1:length(string)\n\
    \        for j in i:length(string)\n            if string[i] == \"]\"\n      \
    \          if string[j] == \"[\"\n                    return true\n          \
    \      end\n            end\n        end\n    end\n    return false\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6ost26_l.jl:30\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6ost26_l.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6ost26_l.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp6ost26_l.jl:34\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6ost26_l.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6ost26_l.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp6ost26_l.jl:36\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6ost26_l.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6ost26_l.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp6ost26_l.jl:39\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6ost26_l.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6ost26_l.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp6ost26_l.jl:40\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/T"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6ost26_l.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string == \"\"\
    \ \n        return false\n    end \n    left = []\n    for x in string \n    \
    \    if x == '['\n            push!(left, x)\n        else \n            if !isempty(left)\n\
    \                pop!(left)\n            else \n                return false\n\
    \            end \n        end \n    end \n    return !isempty(left)\nend \nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy78wuxnj.jl:36\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy78wuxnj.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy78wuxnj.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpy78wuxnj.jl:40\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy78wuxnj.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy78wuxnj.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpy78wuxnj.jl:42\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy78wuxnj.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy78wuxnj.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpy78wuxnj.jl:43\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy78wuxnj.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy78wuxnj.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpy78wuxnj.jl:46\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Tes"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy78wuxnj.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    counter = 0\n    for\
    \ i in string\n        if i == \"[\"\n            counter += 1\n        elseif\
    \ i == \"]\"\n            counter -= 1\n        end\n        if counter < 0\n\
    \            return false\n        end\n    end\n    if counter > 0\n        return\
    \ false\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprtb9dhqe.jl:36\n  Expression: candidate(\"\
    []]]]]]][[[[[]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprtb9dhqe.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprtb9dhqe.jl:34\ntest set: Test\
    \ Failed at /tmp/tmprtb9dhqe.jl:37\n  Expression: candidate(\"[][]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprtb9dhqe.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprtb9dhqe.jl:34\ntest set: Test\
    \ Failed at /tmp/tmprtb9dhqe.jl:38\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprtb9dhqe.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprtb9dhqe.jl:34\ntest set: Test\
    \ Failed at /tmp/tmprtb9dhqe.jl:40\n  Expression: candidate(\"[]]]]]]]]]]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmprtb9dhqe.jl:40 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprtb9dhqe.jl:34\ntest set: Test\
    \ Failed at /tmp/tmprtb9dhqe.jl:42\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Tes"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 9 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprtb9dhqe.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    count = 0\n    for\
    \ i in 1:length(string)\n        count += 1 if string[i] == '[' else -1 if string[i]\
    \ == ']' else 0\n        if count < 0 \n            return false\n        end\n\
    \    end\n    return count == 0\nend\n \n\"\"\"\n    In this challenge, you must\
    \ add a new method of transferring money to the Account class \n    called transfer,\
    \ which works similar to withdraw, except that it transfers money from one \n\
    \    account to another. It should take an Account object as its first argument,\
    \ as well as the \n    amount of money to be transferred.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpcp6da24n.jl:15 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcp6da24n.jl:16\n\
    in expression starting at /tmp/tmpcp6da24n.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open::Int = 0\n  \
    \  for c in string\n        if c == '[' \n            open += 1\n        elseif\
    \ c == ']'\n            open -= 1\n        end\n        if open < 0 \n       \
    \     return false\n        end\n    end\n    return open > 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\
    \t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") ==\
    \ false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0hxks6p3.jl:32\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0hxks6p3.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0hxks6p3.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp0hxks6p3.jl:36\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0hxks6p3.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0hxks6p3.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp0hxks6p3.jl:38\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0hxks6p3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0hxks6p3.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp0hxks6p3.jl:39\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0hxks6p3.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0hxks6p3.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp0hxks6p3.jl:42\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Tes"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0hxks6p3.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_brackets = []\n\
    \    closed_brackets = []\n    for i = 1:length(string)\n        if string[i]\
    \ == '['\n            push!(open_brackets, string[i])\n        elseif string[i]\
    \ == ']'\n            push!(closed_brackets, string[i])\n        end\n    end\n\
    \    open_brackets_length = length(open_brackets)\n    closed_brackets_length\
    \ = length(closed_brackets)\n    if open_brackets_length > closed_brackets_length\n\
    \        return false\n    else\n        return true\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\
    \t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") ==\
    \ false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpop44abz8.jl:37\n  Expression: candidate(\"\
    []]]]]]][[[[[]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpop44abz8.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpop44abz8.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpop44abz8.jl:38\n  Expression: candidate(\"[][]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpop44abz8.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpop44abz8.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpop44abz8.jl:39\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpop44abz8.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpop44abz8.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpop44abz8.jl:41\n  Expression: candidate(\"[]]]]]]]]]]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpop44abz8.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpop44abz8.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpop44abz8.jl:44\n  Expression: candidate(\"[]]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Tes"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpop44abz8.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    for i in 1:length(string)\n\
    \        if string[i] == '[' && string[i+1] == ']'\n            return true\n\
    \        end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpmdlawf96.jl:27\\n  Expression: candidate(\"\
    []]]]]]][[[[[]\") == false\\n   Evaluated: true == false\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpmdlawf96.jl:27 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpmdlawf96.jl:25\\ntest set: Test\
    \ Failed at /tmp/tmpmdlawf96.jl:28\\n  Expression: candidate(\"[][]\") == false\\\
    n   Evaluated: true == false\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpmdlawf96.jl:28 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpmdlawf96.jl:25\\ntest set: Test\
    \ Failed at /tmp/tmpmdlawf96.jl:29\\n  Expression: candidate(\"[]\") == false\\\
    n   Evaluated: true == false\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpmdlawf96.jl:29 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpmdlawf96.jl:25\\ntest set: Test\
    \ Failed at /tmp/tmpmdlawf96.jl:31\\n  Expression: candidate(\"[]]]]]]]]]]\")\
    \ == false\\n   Evaluated: true == false\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpmdlawf96.jl:31 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpmdlawf96.jl:25\\ntest set: Test\
    \ Failed at /tmp/tmpmdlawf96.jl:33\\n  Expression: candidate(\"[[]\") == false\\\
    n   Evaluated: true == false\\nStacktrace:\\n [1] macro expansion\\n   @ "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    nest_count = 0\n \
    \   for c in string\n        nest_count = nest_count + (c == '[' ? 1 : -1)\n \
    \       if nest_count < 0\n            return false\n        end\n    end\n  \
    \  return nest_count > 0\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptwq6_0ue.jl:28\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptwq6_0ue.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptwq6_0ue.jl:27\ntest set: Test\
    \ Failed at /tmp/tmptwq6_0ue.jl:32\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptwq6_0ue.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptwq6_0ue.jl:27\ntest set: Test\
    \ Failed at /tmp/tmptwq6_0ue.jl:34\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptwq6_0ue.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptwq6_0ue.jl:27\ntest set: Test\
    \ Failed at /tmp/tmptwq6_0ue.jl:35\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptwq6_0ue.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptwq6_0ue.jl:27\ntest set: Test\
    \ Failed at /tmp/tmptwq6_0ue.jl:38\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Tes"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptwq6_0ue.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_brackets = []\n\
    \    for i in string\n        if i == '['\n            push!(open_brackets, i)\n\
    \        else\n            if length(open_brackets) > 0\n                pop!(open_brackets)\n\
    \            else\n                return false\n            end\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfu_mrs8w.jl:35\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfu_mrs8w.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfu_mrs8w.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpfu_mrs8w.jl:36\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfu_mrs8w.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfu_mrs8w.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpfu_mrs8w.jl:40\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfu_mrs8w.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfu_mrs8w.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpfu_mrs8w.jl:44\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfu_mrs8w.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfu_mrs8w.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpfu_mrs8w.jl:45\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfu_mrs8w.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    mystack = Array{Char,1}()\n\
    \    for i in string\n        if i == '['\n            push!(mystack,i)\n    \
    \    elseif i == ']'\n            pop!(mystack)\n        end\n    end\n    if\
    \ length(mystack) > 0\n        return false\n    else\n        return true\n \
    \   end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp5srxjx1q.jl:34\\n  Test threw\
    \ exception\\n  Expression: candidate(\"[]]]]]]][[[[[]\") == false\\n  ArgumentError:\
    \ array must be non-empty\\n  Stacktrace:\\n   [1] pop!\\n     @ ./array.jl:1251\
    \ [inlined]\\n   [2] is_nested(string::String)\\n     @ Main /tmp/tmp5srxjx1q.jl:19\\\
    n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp5srxjx1q.jl:34 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp5srxjx1q.jl:32\\ntest set:\
    \ Test Failed at /tmp/tmp5srxjx1q.jl:35\\n  Expression: candidate(\"[][]\") ==\
    \ false\\n   Evaluated: true == false'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    str = replace(string,\
    \ \"][\", \"\")\n    str = replace(str, \"[]\", \"\")\n    if length(str) == 0\n\
    \        return true\n    else\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\
    \t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") ==\
    \ false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "b'test set: '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    count = 0\n    for\
    \ s in string\n        count += (s == '[' ? 1 : -1)\n        if count < 0\n  \
    \          return false\n        end\n    end\n    return count == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0imyb2qx.jl:30\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0imyb2qx.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0imyb2qx.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp0imyb2qx.jl:31\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0imyb2qx.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0imyb2qx.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp0imyb2qx.jl:37\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0imyb2qx.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0imyb2qx.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp0imyb2qx.jl:39\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0imyb2qx.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0imyb2qx.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0imyb2qx.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n  # Base case\n  if length(string)\
    \ == 0\n    return false\n  end\n  # Each '[' needs to be paired with a ']'\n\
    \  # if it's not, then return false\n  if count(string, \"[\") != count(string,\
    \ \"]\")\n    return false\n  end\n  # Every time a '[' is encountered, count\
    \ it as a new nesting level\n  # every time a ']' is encountered, end that nesting\
    \ level\n  # if the string ends and nesting level is 1, then a nesting was achieved\n\
    \  # otherwise, a nesting was not achieved\n  nesting_level = 0\n  for char in\
    \ string\n    if char == \"[\"\n      nesting_level += 1\n    elseif char == \"\
    ]\"\n      nesting_level -= 1\n    end\n  end\n  if nesting_level == 1\n    return\
    \ true\n  else\n    return false\n  end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvkj7och_.jl:46\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvkj7och_.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvkj7och_.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpvkj7och_.jl:50\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvkj7och_.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvkj7och_.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpvkj7och_.jl:52\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvkj7och_.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvkj7och_.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpvkj7och_.jl:55\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvkj7och_.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvkj7och_.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpvkj7och_.jl:56\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/T"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvkj7och_.jl:43\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    brackets_stack = []\n\
    \    string = filter(string) do c\n        if c != '[' && c != ']'\n         \
    \   continue\n        end\n        push!(brackets_stack, c)\n    end\n    is_matching(brackets_stack)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: break or continue outside loop\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1v7wpt0h.jl:1\nin expression starting at /tmp/tmp1v7wpt0h.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    sqBrckOp = 0\n   \
    \ sqBrckCl = 0\n    for c in string\n        if c == '['\n            sqBrckOp\
    \ += 1\n        elseif c == ']'\n            sqBrckCl += 1\n        end\n    end\n\
    \    sqBrckOp >= sqBrckCl\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfqzz7v9v.jl:32\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfqzz7v9v.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfqzz7v9v.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpfqzz7v9v.jl:33\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfqzz7v9v.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfqzz7v9v.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpfqzz7v9v.jl:37\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfqzz7v9v.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfqzz7v9v.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpfqzz7v9v.jl:41\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfqzz7v9v.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfqzz7v9v.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpfqzz7v9v.jl:42\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfqzz7v9v.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open = 0 \n    close\
    \ = 0 \n    for i in string \n        if i == \"[\" \n            open += 1 \n\
    \        elseif i == \"]\" \n            close += 1 \n        end \n    end \n\
    \    if close <= open \n        return true \n    else \n        return false\
    \ \n    end \nend \nprintln(is_nested(\"[[]]\"))\nprintln(is_nested(\"[]]]]]]][[[[[]\"\
    ))\nprintln(is_nested(\"[][]\"))\nprintln(is_nested(\"[]\"))\nprintln(is_nested(\"\
    [[][]]\"))\nprintln(is_nested(\"[[]][[\"))\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "true\ntrue\ntrue\ntrue\ntrue\ntrue\ntest set: Test Failed at /tmp/tmphf4_acjl.jl:41\n\
    \  Expression: candidate(\"[]]]]]]][[[[[]\") == false\n   Evaluated: true == false\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphf4_acjl.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphf4_acjl.jl:39\ntest set: Test\
    \ Failed at /tmp/tmphf4_acjl.jl:42\n  Expression: candidate(\"[][]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphf4_acjl.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphf4_acjl.jl:39\ntest set: Test\
    \ Failed at /tmp/tmphf4_acjl.jl:43\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphf4_acjl.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphf4_acjl.jl:39\ntest set: Test\
    \ Failed at /tmp/tmphf4_acjl.jl:45\n  Expression: candidate(\"[]]]]]]]]]]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmphf4_acjl.jl:45 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphf4_acjl.jl:39\ntest set: Test\
    \ Failed at /tmp/tmphf4_acjl.jl:47\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 9 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphf4_acjl.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    lst = collect(string)\n\
    \    for i in lst \n        if i == \"[\"\n            return true\n        end\n\
    \    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptln6vwwi.jl:27\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptln6vwwi.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptln6vwwi.jl:26\ntest set: Test\
    \ Failed at /tmp/tmptln6vwwi.jl:31\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptln6vwwi.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptln6vwwi.jl:26\ntest set: Test\
    \ Failed at /tmp/tmptln6vwwi.jl:33\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptln6vwwi.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptln6vwwi.jl:26\ntest set: Test\
    \ Failed at /tmp/tmptln6vwwi.jl:36\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptln6vwwi.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptln6vwwi.jl:26\ntest set: Test\
    \ Failed at /tmp/tmptln6vwwi.jl:37\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/T"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptln6vwwi.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    if length(string)\
    \ == 0 \n        return false\n    end\n    stack = []\n    for s in string\n\
    \        if in(s,\"[\")\n            push!(stack,s)\n        else\n          \
    \  if length(stack) == 0\n                return false\n            else\n   \
    \             pop!(stack)\n            end\n        end\n    end\n    return isempty(stack)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvgts_q84.jl:38\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvgts_q84.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvgts_q84.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpvgts_q84.jl:39\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvgts_q84.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvgts_q84.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpvgts_q84.jl:45\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvgts_q84.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvgts_q84.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     3     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 11 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvgts_q84.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    count = 0\n    for\
    \ i in string\n        if i == '['\n            count += 1\n        elseif i ==\
    \ ']'\n            count -= 1\n        end\n        if count < 0\n           \
    \ return false\n        end\n    end\n    return count > 0 ? false : true\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpryjx5bxs.jl:34\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpryjx5bxs.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpryjx5bxs.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpryjx5bxs.jl:35\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpryjx5bxs.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpryjx5bxs.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpryjx5bxs.jl:41\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpryjx5bxs.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpryjx5bxs.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpryjx5bxs.jl:43\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpryjx5bxs.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpryjx5bxs.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpryjx5bxs.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack = Int64[]\n\
    \    push!(stack, 0)\n    for i in string\n        if i == '['\n            push!(stack,\
    \ 0)\n        elseif i == ']'\n            if isempty(stack)\n               \
    \ return false\n            elseif last(stack) == 0\n                push!(stack,\
    \ 1)\n            else\n                pop!(stack)\n            end\n       \
    \ end\n    end\n    return length(stack) == 1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpg9ti93uc.jl:36\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg9ti93uc.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg9ti93uc.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpg9ti93uc.jl:40\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg9ti93uc.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg9ti93uc.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpg9ti93uc.jl:42\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg9ti93uc.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg9ti93uc.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpg9ti93uc.jl:45\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg9ti93uc.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg9ti93uc.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpg9ti93uc.jl:46\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/T"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg9ti93uc.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    return split(string,\
    \ \"\")\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    string = replace(string,\
    \ r\"[^\\[\\]]\", \"\")\n    while(length(string)>=2)\n        string = replace(string,\
    \ r\"\\[\\]\", \"\")\n    end\n    return length(string)==0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\
    \t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") ==\
    \ false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpp48s4o4q.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"[[]]\") == true\\n  MethodError: no method\
    \ matching replace(::String, ::Regex, ::String)\\n  Closest candidates are:\\\
    n    replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\\\
    n    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\\\
    n    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\\\
    n    ...\\n  Stacktrace:\\n   [1] is_nested(string::String)\\n     @ Main /tmp/tmpp48s4o4q.jl:14\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpp48s4o4q.jl:25 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpp48s4o4q.jl:24\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    left = []\n    right\
    \ = []\n    for i in eachindex(string)\n        if string[i] == '['\n        \
    \    push!(left, i)\n        elseif string[i] == ']'\n            push!(right,\
    \ i)\n        end\n    end\n    for i in 1:length(left)\n        for j in length(right):-1:1\n\
    \            if left[i] < right[j]\n                return true\n            end\n\
    \        end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnj9pie8i.jl:38\n  Expression: candidate(\"\
    []]]]]]][[[[[]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnj9pie8i.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnj9pie8i.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpnj9pie8i.jl:39\n  Expression: candidate(\"[][]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnj9pie8i.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnj9pie8i.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpnj9pie8i.jl:40\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnj9pie8i.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnj9pie8i.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpnj9pie8i.jl:42\n  Expression: candidate(\"[]]]]]]]]]]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpnj9pie8i.jl:42 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnj9pie8i.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpnj9pie8i.jl:44\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Tes"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnj9pie8i.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    #create the array\n\
    \    a = split(string,\"\")\n    stack = Stack()\n    for i in a\n        if i\
    \ == \"[\"\n            push!(stack,i)\n        elseif i == \"]\"\n          \
    \  if length(stack) > 0\n                pop!(stack)\n            else\n     \
    \           return false\n            end\n        end\n    end\n    return length(stack)\
    \ == 0 ? true : false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp5a130pps.jl:35\\n  Test threw\
    \ exception\\n  Expression: candidate(\"[[]]\") == true\\n  UndefVarError: Stack\
    \ not defined\\n  Stacktrace:\\n   [1] is_nested(string::String)\\n     @ Main\
    \ /tmp/tmp5a130pps.jl:16\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp5a130pps.jl:35 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp5a130pps.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmp5a130pps.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\\n  UndefVarError: Stack not defined\\\
    n  Stacktrace:\\n   [1] is_nested(string::String)\\n     @ Main /tmp/tmp5a130pps.jl:16\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp5a130pps.jl:36 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp5a130pps.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmp5a130pps.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[][]\") == false\\n  UndefVarError: Stack not defined\\n  Stacktrace:\\\
    n   [1] is_nested(string::String)\\n     @ Main /tmp/tmp5a130pps.jl:16\\n   [2]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp5a130pps.jl:37 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp5a130pps.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmp5a130pps.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]\") == false\\n  UndefVarError: Stack not defined\\n  Stacktrace:\\\
    n   [1] is_nested(string::String)\\n     @ Main /tmp/tmp5a130pps.jl:16\\n   [2]\
    \ macro expan"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    total_open = 0\n \
    \   total_close = 0\n    count_open = 0\n    count_close = 0\n    for i in string\n\
    \        if i == '['\n            total_open += 1\n            count_open += 1\n\
    \        elseif i == ']'\n            total_close += 1\n            count_close\
    \ += 1\n        end\n    end\n    return total_open > 1 && total_close > 1 &&\
    \ count_open > count_close\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsof4yr8v.jl:34\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsof4yr8v.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsof4yr8v.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpsof4yr8v.jl:38\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsof4yr8v.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsof4yr8v.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpsof4yr8v.jl:40\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsof4yr8v.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsof4yr8v.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpsof4yr8v.jl:44\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsof4yr8v.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsof4yr8v.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsof4yr8v.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n  count_occurrences(string,\
    \ '[[') > 0 && count_occurrences(string, ']]') > 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpa0yf1_vg.jl:14\nin expression\
    \ starting at /tmp/tmpa0yf1_vg.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    r = []\n    for i\
    \ in string\n        if i == '['\n            push!(r, i)\n        elseif i ==\
    \ ']'\n            pop!(r)\n        end\n    end\n    return length(r) > 0\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpji79hiy1.jl:29\\n  Expression: candidate(\"\
    [[]]\") == true\\n   Evaluated: false == true\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpji79hiy1.jl:29 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpji79hiy1.jl:28\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    for i = 1:length(string)\n\
    \        if string[i] == '[' && string[i+1] == ']'\n            return true\n\
    \        end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpzddez78r.jl:27\\n  Expression: candidate(\"\
    []]]]]]][[[[[]\") == false\\n   Evaluated: true == false\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpzddez78r.jl:27 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpzddez78r.jl:25\\ntest set: Test\
    \ Failed at /tmp/tmpzddez78r.jl:28\\n  Expression: candidate(\"[][]\") == false\\\
    n   Evaluated: true == false\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpzddez78r.jl:28 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpzddez78r.jl:25\\ntest set: Test\
    \ Failed at /tmp/tmpzddez78r.jl:29\\n  Expression: candidate(\"[]\") == false\\\
    n   Evaluated: true == false\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpzddez78r.jl:29 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpzddez78r.jl:25\\ntest set: Test\
    \ Failed at /tmp/tmpzddez78r.jl:31\\n  Expression: candidate(\"[]]]]]]]]]]\")\
    \ == false\\n   Evaluated: true == false\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpzddez78r.jl:31 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpzddez78r.jl:25\\ntest set: Test\
    \ Failed at /tmp/tmpzddez78r.jl:33\\n  Expression: candidate(\"[[]\") == false\\\
    n   Evaluated: true == false\\nStacktrace:\\n [1] macro expansion\\n   @ "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    count = 0\n    for\
    \ i in string\n        if i == '['\n            count += 1\n        elseif i ==\
    \ ']'\n            count -= 1\n        end\n        if count < 0\n           \
    \ return false\n        end\n    end\n    return count == 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\
    \t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") ==\
    \ false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwk1sk4sd.jl:34\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwk1sk4sd.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwk1sk4sd.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpwk1sk4sd.jl:35\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwk1sk4sd.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwk1sk4sd.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpwk1sk4sd.jl:41\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwk1sk4sd.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwk1sk4sd.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpwk1sk4sd.jl:43\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwk1sk4sd.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwk1sk4sd.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwk1sk4sd.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    bracket_count = 0\n\
    \    for char in string\n        bracket_count += 1 if char == '[' else -1\n \
    \       if bracket_count < 0\n            return false\n        end\n    end\n\
    \    return bracket_count > 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp3i16ebhd.jl:15 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3i16ebhd.jl:16\n\
    in expression starting at /tmp/tmp3i16ebhd.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack = []\n    for\
    \ bracket in string\n        if bracket == '['\n            push!(stack, bracket)\n\
    \        else\n            if length(stack) == 0\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpluoykw3a.jl:33\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpluoykw3a.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpluoykw3a.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpluoykw3a.jl:37\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpluoykw3a.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpluoykw3a.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpluoykw3a.jl:39\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpluoykw3a.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpluoykw3a.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpluoykw3a.jl:42\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpluoykw3a.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpluoykw3a.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpluoykw3a.jl:43\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/T"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpluoykw3a.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open, close = 0, 0\
    \ \n    for i in string \n        open += i == '[' ? 1 : 0 \n        close +=\
    \ i == ']' ? 1 : 0 \n        if close > open \n            return false \n   \
    \     end \n    end \n    open == close \nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5jvqvu15.jl:31\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5jvqvu15.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5jvqvu15.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp5jvqvu15.jl:32\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5jvqvu15.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5jvqvu15.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp5jvqvu15.jl:38\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5jvqvu15.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5jvqvu15.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp5jvqvu15.jl:40\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5jvqvu15.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5jvqvu15.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5jvqvu15.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    \n    \"\"\"\n   \
    \ Create a function that takes a string (x) and a string of possible substrings\
    \ (y) as arguments, \n    and return a list with all substrings (y) that are not\
    \ found in x.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps5cwa6_i.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps5cwa6_i.jl:1\n\
    in expression starting at /tmp/tmps5cwa6_i.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    # check if all elements\
    \ are the same\n    if all(x == string[1] for x in string)\n        return false\n\
    \    end\n    # split the string in two parts\n    s1, s2 = split(string, 1)\n\
    \    # check if last element of s1 is equal to first element of s2\n    return\
    \ s1[end] == s2[1]\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmplm00_859.jl:28\\n  Test threw\
    \ exception\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    i = 1\n    open =\
    \ 0\n    while i <= length(string)\n        if string[i] == '['\n            open\
    \ += 1\n        elseif string[i] == ']'\n            open -= 1\n        end\n\
    \        if open < 0\n            return false\n        end\n        i += 1\n\
    \    end\n    return open == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4hb2noz3.jl:36\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4hb2noz3.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4hb2noz3.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp4hb2noz3.jl:37\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4hb2noz3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4hb2noz3.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp4hb2noz3.jl:43\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4hb2noz3.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4hb2noz3.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp4hb2noz3.jl:45\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4hb2noz3.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4hb2noz3.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4hb2noz3.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    return length(r\"\\\
    [\\[.*\\]\\]\", string) > 0\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp0ve10oe8.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"[[]]\") == true\\n  MethodError: no method\
    \ matching length(::Regex, ::String)\\n  Stacktrace:\\n   [1] is_nested(string::String)\\\
    n     @ Main /tmp/tmp0ve10oe8.jl:14\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp0ve10oe8.jl:21 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp0ve10oe8.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp0ve10oe8.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\\n  MethodError: no method matching length(::Regex,\
    \ ::String)\\n  Stacktrace:\\n   [1] is_nested(string::String)\\n     @ Main /tmp/tmp0ve10oe8.jl:14\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp0ve10oe8.jl:22 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp0ve10oe8.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp0ve10oe8.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[][]\") == false\\n  MethodError: no method matching length(::Regex,\
    \ ::String)\\n  Stacktrace:\\n   [1] is_nested(string::String)\\n     @ Main /tmp/tmp0ve10oe8.jl:14\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp0ve10oe8.jl:23 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp0ve10oe8.jl:20\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    queue = []\n    for\
    \ char in string\n        push!(queue, char)\n        if (length(queue) != 0)\
    \ && (last(queue) == '[') && (queue[end-1] == ']')\n            pop!(queue)\n\
    \            pop!(queue)\n        end\n    end\n    if isempty(queue)\n      \
    \  return true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpv4cvj44l.jl:33\\n  Test threw\
    \ exception\\n  Expression: candidate(\"[[]]\") == true\\n  BoundsError: attempt\
    \ to access 1-element Vector{Any} at index [0]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:861 [inlined]\\n   [2] is_nested(string::String)\\n     @ Main\
    \ /tmp/tmpv4cvj44l.jl:17\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpv4cvj44l.jl:33 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpv4cvj44l.jl:32\\ntest set:\
    \ Error During Test at /tmp/tmpv4cvj44l.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\\n  BoundsError: attempt to access 1-element\
    \ Vector{Any} at index [0]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:861\
    \ [inlined]\\n   [2] is_nested(string::String)\\n     @ Main /tmp/tmpv4cvj44l.jl:17\\\
    n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpv4cvj44l.jl:34 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpv4cvj44l.jl:32\\ntest set:\
    \ Error During Test at /tmp/tmpv4cvj44l.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[][]\") == false\\n  BoundsError: attempt to access 1-element Vector{Any}\
    \ at index [0]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:861 [inlined]\\\
    n   [2] is_nested(string::String)\\n     @ Main /tmp/tmpv4cvj44l.jl:17\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpv4cvj44l.jl:35 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpv4cvj44l.jl:32\\ntest set:"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    n = length(string)\n\
    \    if n == 0\n        return false\n    end\n    left, right = 0, 0\n    for\
    \ i in 1:n\n        if string[i] == '['\n            left += 1\n        elseif\
    \ string[i] == ']'\n            right += 1\n        end\n        if right > left\n\
    \            return false\n        end\n    end\n    if left == right\n      \
    \  return true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpew9uc_gf.jl:42\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpew9uc_gf.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpew9uc_gf.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpew9uc_gf.jl:43\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpew9uc_gf.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpew9uc_gf.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpew9uc_gf.jl:49\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpew9uc_gf.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpew9uc_gf.jl:39\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     3     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 11 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpew9uc_gf.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    return sum(map(int,\
    \ findall(\"\\[\", string))) == sum(map(int, findall(\"\\]\", string)))\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpl79_a6o5.jl:14\nin expression starting at /tmp/tmpl79_a6o5.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    #Initialize a stack\n\
    \    #Iterate through string\n        #If character is [, push onto stack\n  \
    \      #If character is ], pop off stack\n        #if stack is empty return false\n\
    \        #return true\n    \n    stack = []\n    for bracket in string\n     \
    \   if bracket == '['\n            push!(stack, bracket)\n        elseif bracket\
    \ == ']'\n            pop!(stack)\n        end\n        if isempty(stack)\n  \
    \          return false\n        end\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\
    \t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") ==\
    \ false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpovna_t_b.jl:39\\n  Expression: candidate(\"\
    [[]]\") == true\\n   Evaluated: false == true\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpovna_t_b.jl:39 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpovna_t_b.jl:38\\ntest set: Test\
    \ Failed at /tmp/tmpovna_t_b.jl:43\\n  Expression: candidate(\"[[[[]]]]\") ==\
    \ true\\n   Evaluated: false == true\\nStacktrace:\\n [1] macro expansion\\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpovna_t_b.jl:43 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpovna_t_b.jl:38\\ntest set: Test\
    \ Failed at /tmp/tmpovna_t_b.jl:45\\n  Expression: candidate(\"[][][[]]\") ==\
    \ true\\n   Evaluated: false == true\\nStacktrace:\\n [1] macro expansion\\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpovna_t_b.jl:45 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpovna_t_b.jl:38\\ntest set: Test\
    \ Failed at /tmp/tmpovna_t_b.jl:46\\n  Expression: candidate(\"[[]\") == false\\\
    n   Evaluated: true == false\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpovna_t_b.jl:46 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpovna_t_b.jl:38\\ntest set: Test\
    \ Failed at /tmp/tmpovna_t_b.jl:48\\n  Expression: candidate(\"[[]][[\") == true\\\
    n   Evaluated: false == true\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/c"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    s = string\n    while\
    \ true\n        s = replace(s, \"][\", \"\")\n        s = replace(s, \"[]\", \"\
    \")\n        return length(s) == 0 ? true : false\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\
    \t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") ==\
    \ false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmprw3uqjhk.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate(\"[[]]\") == true\\n  MethodError: no method\
    \ matching replace(::String, ::String, ::String)\\n  Closest candidates are:\\\
    n    replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\\\
    n    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\\\
    n    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\\\
    n    ...\\n  Stacktrace:\\n   [1] is_nested(string::String)\\n     @ Main /tmp/tmprw3uqjhk.jl:16\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmprw3uqjhk.jl:26 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmprw3uqjhk.jl:25\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    count = 0\n    for\
    \ bracket in string\n        if bracket == '['\n            count += 1\n     \
    \   elseif bracket == ']'\n            count -= 1\n        end\n        if count\
    \ < 0\n            return false\n        end\n    end\n    return count == 0\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpav_vc9uq.jl:34\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpav_vc9uq.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpav_vc9uq.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpav_vc9uq.jl:35\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpav_vc9uq.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpav_vc9uq.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpav_vc9uq.jl:41\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpav_vc9uq.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpav_vc9uq.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpav_vc9uq.jl:43\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpav_vc9uq.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpav_vc9uq.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpav_vc9uq.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    matched = 0\n    for\
    \ i in string\n        if i == '['\n            matched += 1\n        elseif i\
    \ == ']'\n            matched -= 1\n        end\n        if matched < 0\n    \
    \        return false\n        end\n    end\n    return matched == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpls6w04mo.jl:34\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpls6w04mo.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpls6w04mo.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpls6w04mo.jl:35\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpls6w04mo.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpls6w04mo.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpls6w04mo.jl:41\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpls6w04mo.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpls6w04mo.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpls6w04mo.jl:43\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpls6w04mo.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpls6w04mo.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpls6w04mo.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open = 0\n    close\
    \ = 0\n    for char in string\n        if char == '['\n            open += 1\n\
    \        elseif char == ']'\n            close += 1\n        end\n    end\n  \
    \  return open >= close\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpki6iagpu.jl:32\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpki6iagpu.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpki6iagpu.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpki6iagpu.jl:33\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpki6iagpu.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpki6iagpu.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpki6iagpu.jl:37\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpki6iagpu.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpki6iagpu.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpki6iagpu.jl:41\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpki6iagpu.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpki6iagpu.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpki6iagpu.jl:42\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpki6iagpu.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack=[]\n    for\
    \ i in string\n        if i == '['\n            push!(stack, i)\n        else\n\
    \            isempty(stack) ? return false : pop!(stack)\n        end\n    end\n\
    \    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: colon expected in \"?\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3za_bfxo.jl:20\nin expression starting at\
    \ /tmp/tmp3za_bfxo.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    # is nested?\n   \
    \ # base case\n    if length(string) == 0\n        return false\n    elseif contains(string,\
    \ \"[[\") || contains(string, \"]]\")\n        return true\n    else\n       \
    \ return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcg9eu8a8.jl:30\n  Expression: candidate(\"\
    []]]]]]][[[[[]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcg9eu8a8.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcg9eu8a8.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpcg9eu8a8.jl:34\n  Expression: candidate(\"[]]]]]]]]]]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpcg9eu8a8.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcg9eu8a8.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpcg9eu8a8.jl:36\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcg9eu8a8.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcg9eu8a8.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpcg9eu8a8.jl:37\n  Expression: candidate(\"[]]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcg9eu8a8.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcg9eu8a8.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpcg9eu8a8.jl:41\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1."
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcg9eu8a8.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    return string != string.replace(\"\
    [[\", \"\") && string != string.replace(\"]]\", \"\")\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp054950xm.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"[[]]\") == true\\n  type String has no\
    \ field replace\\n  Stacktrace:\\n   [1] getproperty\\n     @ ./Base.jl:42 [inlined]\\\
    n   [2] is_nested(string::String)\\n     @ Main /tmp/tmp054950xm.jl:14\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp054950xm.jl:21 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp054950xm.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp054950xm.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\\n  type String has no field replace\\\
    n  Stacktrace:\\n   [1] getproperty\\n     @ ./Base.jl:42 [inlined]\\n   [2] is_nested(string::String)\\\
    n     @ Main /tmp/tmp054950xm.jl:14\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp054950xm.jl:22 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp054950xm.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp054950xm.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[][]\") == false\\n  type String has no field replace\\n  Stacktrace:\\\
    n   [1] getproperty\\n     @ ./Base.jl:42 [inlined]\\n   [2] is_nested(string::String)\\\
    n     @ Main /tmp/tmp054950xm.jl:14\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp054950xm.jl:23 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp054950xm.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp054950xm.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"["
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack = Stack()\n\
    \    for char in string\n        if char == '['\n            push!(stack, char)\n\
    \        else\n            return false if !isempty(stack)\n            pop!(stack)\n\
    \        end\n    end\n    return !isempty(stack)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpmu2679o6.jl:16 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmu2679o6.jl:19\n\
    in expression starting at /tmp/tmpmu2679o6.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    depth::Int = 0\n \
    \   for c in string\n        depth += 1 if c == '[' else -1\n        if depth\
    \ < 0\n            return false\n        end\n    end\n    return depth == 0\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmppjt3y3zc.jl:15 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppjt3y3zc.jl:16\n\
    in expression starting at /tmp/tmppjt3y3zc.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack = Stack{Int}()\n\
    \    temp = []\n    found = false\n    for c in string\n        push!(stack, c)\n\
    \    end\n    for (i,c) in enumerate(stack)\n        if c == '['\n           \
    \ push!(temp, i)\n        elseif c == ']'\n            if length(temp) == 0\n\
    \                continue\n            elseif length(temp) > 0\n             \
    \   pop!(temp)\n                found = true\n            end\n        end\n \
    \   end\n    return found\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp0lqfn9v2.jl:39\\n  Test threw\
    \ exception\\n  Expression: candidate(\"[[]]\") == true\\n  UndefVarError: Stack\
    \ not defined\\n  Stacktrace:\\n   [1] is_nested(string::String)\\n     @ Main\
    \ /tmp/tmp0lqfn9v2.jl:14\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp0lqfn9v2.jl:39 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp0lqfn9v2.jl:38\\ntest set:\
    \ Error During Test at /tmp/tmp0lqfn9v2.jl:40\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\\n  UndefVarError: Stack not defined\\\
    n  Stacktrace:\\n   [1] is_nested(string::String)\\n     @ Main /tmp/tmp0lqfn9v2.jl:14\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp0lqfn9v2.jl:40 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp0lqfn9v2.jl:38\\ntest set:\
    \ Error During Test at /tmp/tmp0lqfn9v2.jl:41\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[][]\") == false\\n  UndefVarError: Stack not defined\\n  Stacktrace:\\\
    n   [1] is_nested(string::String)\\n     @ Main /tmp/tmp0lqfn9v2.jl:14\\n   [2]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp0lqfn9v2.jl:41 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp0lqfn9v2.jl:38\\ntest set:\
    \ Error During Test at /tmp/tmp0lqfn9v2.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]\") == false\\n  UndefVarError: Stack not defined\\n  Stacktrace:\\\
    n   [1] is_nested(string::String)\\n     @ Main /tmp/tmp0lqfn9v2.jl:14\\n   [2]\
    \ macro expan"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    m = 0\n    for i in\
    \ 1:length(string)\n        if string[i] == '['\n            m += 1\n        elseif\
    \ string[i] == ']'\n            m -= 1\n        end\n        if m < 0\n      \
    \      return false\n        end\n    end\n    if m > 0\n        return false\n\
    \    else\n        return true\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppq2qle7l.jl:38\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppq2qle7l.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppq2qle7l.jl:35\ntest set: Test\
    \ Failed at /tmp/tmppq2qle7l.jl:39\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppq2qle7l.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppq2qle7l.jl:35\ntest set: Test\
    \ Failed at /tmp/tmppq2qle7l.jl:45\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppq2qle7l.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppq2qle7l.jl:35\ntest set: Test\
    \ Failed at /tmp/tmppq2qle7l.jl:47\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppq2qle7l.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppq2qle7l.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppq2qle7l.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    # your code here\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "b'test set: '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    str = split(string,\
    \ \"\")\n    s = []\n    for i in str\n        if i == \"[\"\n            push!(s,\
    \ i)\n        else\n            try\n                pop!(s)\n            catch\
    \ e\n                return false\n            end\n        end\n    end\n   \
    \ if length(s) > 0\n        return false\n    else\n        return true\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpoh8qszee.jl:40\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoh8qszee.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoh8qszee.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpoh8qszee.jl:41\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoh8qszee.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoh8qszee.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpoh8qszee.jl:47\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoh8qszee.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoh8qszee.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     3     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 11 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoh8qszee.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    n = length(string)\n\
    \    count = 0\n    for i in 1:n\n        if string[i] == '['\n            count\
    \ += 1\n        else\n            count -= 1\n        end\n        if count <\
    \ 0\n            return false\n        end\n    end\n    return count == 0\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5usrn9h1.jl:35\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5usrn9h1.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5usrn9h1.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp5usrn9h1.jl:36\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5usrn9h1.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5usrn9h1.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp5usrn9h1.jl:42\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5usrn9h1.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5usrn9h1.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp5usrn9h1.jl:44\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5usrn9h1.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5usrn9h1.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5usrn9h1.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack = []\n    string\
    \ = replace(string, \"[\" => ' ')\n    string = replace(string, \"]\" => ' ')\n\
    \    string = strip(string)\n    for i in string\n        if length(stack) ==\
    \ 0\n            push!(stack, i)\n        else\n            if i == stack[end]\n\
    \                pop!(stack)\n            else\n                push!(stack, i)\n\
    \            end\n        end\n    end\n    return length(stack) == 0 ? true :\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc89bjdje.jl:37\n  Expression: candidate(\"\
    []]]]]]][[[[[]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc89bjdje.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc89bjdje.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpc89bjdje.jl:38\n  Expression: candidate(\"[][]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc89bjdje.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc89bjdje.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpc89bjdje.jl:39\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc89bjdje.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc89bjdje.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpc89bjdje.jl:41\n  Expression: candidate(\"[]]]]]]]]]]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpc89bjdje.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc89bjdje.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpc89bjdje.jl:43\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Tes"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 9 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc89bjdje.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    tmp = \"\"\n    i=1\n\
    \    while i<=length(string)\n        if string[i] == '[' || string[i] == ']'\n\
    \            tmp = tmp * string[i]\n        end\n        i+=1\n    end\n    tmp\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    string = replace(string,r\"\
    ][\",\"\")\n    string = replace(string,r\"[\",\"\")\n    string = replace(string,r\"\
    ]\",\"\")\n    if length(string) == 0\n        return true\n    else\n       \
    \ return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: PCRE compilation error: missing terminating ] for character\
    \ class at offset 2\nStacktrace:\n  [1] error(s::String)\n    @ Base ./error.jl:33\n\
    \  [2] compile(pattern::String, options::UInt32)\n    @ Base.PCRE ./pcre.jl:155\n\
    \  [3] compile(regex::Regex)\n    @ Base ./regex.jl:82\n  [4] Regex(pattern::String,\
    \ compile_options::UInt32, match_options::UInt32)\n    @ Base ./regex.jl:47\n\
    \  [5] Regex(pattern::String)\n    @ Base ./regex.jl:70\n  [6] var\"@r_str\"(__source__::LineNumberNode,\
    \ __module__::Module, pattern::Any, flags::Vararg{Any})\n    @ Base ./regex.jl:119\n\
    \  [7] #macroexpand#51\n    @ ./expr.jl:115 [inlined]\n  [8] macroexpand\n   \
    \ @ ./expr.jl:114 [inlined]\n  [9] docm(source::LineNumberNode, mod::Module, meta::Any,\
    \ ex::Any, define::Bool) (repeats 2 times)\n    @ Base.Docs ./docs/Docs.jl:537\n\
    \ [10] var\"@doc\"(::LineNumberNode, ::Module, ::String, ::Vararg{Any})\n    @\
    \ Core ./boot.jl:517\nin expression starting at /tmp/tmp1ji_89u1.jl:1\nin expression\
    \ starting at /tmp/tmp1ji_89u1.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    current_depth = 0\n\
    \    max_depth = 0\n    for c in string\n        if c == '['\n            current_depth\
    \ += 1\n            max_depth = max(max_depth, current_depth)\n        elseif\
    \ c == ']'\n            current_depth -= 1\n        end\n    end\n    return current_depth\
    \ == 0 && max_depth > 1\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqvpb056n.jl:40\n  Expression: candidate(\"\
    [[]][[\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqvpb056n.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqvpb056n.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   13     1     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 13 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqvpb056n.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    bracket_stack = Array{Char,1}()\n\
    \    if count(string, '[') == 0 || count(string, ']') == 0\n        return false\n\
    \    end\n    for (i, bracket) in enumerate(string)\n        if bracket == '['\n\
    \            push!(bracket_stack, bracket)\n        elseif bracket == ']'\n  \
    \          if length(bracket_stack) > 0\n                pop!(bracket_stack)\n\
    \            else\n                return false\n            end\n        end\n\
    \    end\n    if length(bracket_stack) == 0\n        return true\n    else\n \
    \       return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp2__xkscn.jl:40\\n  Test threw\
    \ exception\\n  Expression: candidate(\"[[]]\") == true\\n  MethodError: objects\
    \ of type String are not callable\\n  Stacktrace:\\n   [1] _simple_count(pred::String,\
    \ itr::Char, init::Int64)\\n     @ Base ./reduce.jl:1206\\n   [2] count(f::String,\
    \ itr::Char; init::Int64)\\n     @ Base ./reduce.jl:1201\\n   [3] count(f::String,\
    \ itr::Char)\\n     @ Base ./reduce.jl:1201\\n   [4] is_nested(string::String)\\\
    n     @ Main /tmp/tmp2__xkscn.jl:15\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmp2__xkscn.jl:40 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmp2__xkscn.jl:39\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open = 0\n    close\
    \ = 0\n    for bracket in string\n        if bracket == '['\n            open\
    \ += 1\n        elseif bracket == ']'\n            close += 1\n        end\n \
    \   end\n    open < close ? false : true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkn9r62dy.jl:32\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkn9r62dy.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkn9r62dy.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpkn9r62dy.jl:33\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkn9r62dy.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkn9r62dy.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpkn9r62dy.jl:37\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkn9r62dy.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkn9r62dy.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpkn9r62dy.jl:41\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkn9r62dy.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkn9r62dy.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpkn9r62dy.jl:42\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkn9r62dy.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    #some code here\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    # Test to see if the\
    \ string is valid\n    open = 0\n    for i in string\n        if i == '['\n  \
    \          open += 1\n        elseif i == ']'\n            open -= 1\n       \
    \ end\n        if open < 0\n            return false\n        end\n    end\n \
    \   return open != 0\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphioxcv8u.jl:33\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphioxcv8u.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphioxcv8u.jl:32\ntest set: Test\
    \ Failed at /tmp/tmphioxcv8u.jl:37\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphioxcv8u.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphioxcv8u.jl:32\ntest set: Test\
    \ Failed at /tmp/tmphioxcv8u.jl:39\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphioxcv8u.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphioxcv8u.jl:32\ntest set: Test\
    \ Failed at /tmp/tmphioxcv8u.jl:40\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphioxcv8u.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphioxcv8u.jl:32\ntest set: Test\
    \ Failed at /tmp/tmphioxcv8u.jl:43\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Tes"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphioxcv8u.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    brackets = Dict(\n\
    \        '[' => 1,\n        ']' => -1\n    )\n    total = sum([brackets[ch] for\
    \ ch in string])\n    total >= 0 && (total % 2 == 0)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7z172b8b.jl:28\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7z172b8b.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7z172b8b.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp7z172b8b.jl:29\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7z172b8b.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7z172b8b.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp7z172b8b.jl:37\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7z172b8b.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7z172b8b.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp7z172b8b.jl:38\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7z172b8b.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7z172b8b.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7z172b8b.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    count_left = 0\n \
    \   count_right = 0\n    @inbounds for i in 1:length(string)\n        if string[i]\
    \ == '['\n            count_left += 1\n        elseif string[i] == ']'\n     \
    \       count_right += 1\n        end\n    end\n    if count_left > count_right\n\
    \        return true\n    else\n        return false\n    end\nend\n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nusing Test\n\
    \n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\
    \t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") ==\
    \ false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpg_gnohj8.jl:242\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg_gnohj8.jl:242 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg_gnohj8.jl:241\ntest set: Test\
    \ Failed at /tmp/tmpg_gnohj8.jl:246\n  Expression: candidate(\"[[[[]]]]\") ==\
    \ true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg_gnohj8.jl:246 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg_gnohj8.jl:241\ntest set: Test\
    \ Failed at /tmp/tmpg_gnohj8.jl:248\n  Expression: candidate(\"[][][[]]\") ==\
    \ true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg_gnohj8.jl:248 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg_gnohj8.jl:241\ntest set: Test\
    \ Failed at /tmp/tmpg_gnohj8.jl:249\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg_gnohj8.jl:249 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg_gnohj8.jl:241\ntest set: Test\
    \ Failed at /tmp/tmpg_gnohj8.jl:252\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg_gnohj8.jl:239\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    depth = 0\n    for\
    \ c in string\n        if c == '['\n            depth += 1\n        elseif c ==\
    \ ']'\n            depth -= 1\n        end\n        if depth < 0 \n          \
    \  return false\n        end\n    end\n    return depth > 0\nend\nprintln(is_nested(\"\
    [[]][[\"))\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "true\ntest set: Test Failed at /tmp/tmpta4tbqfu.jl:33\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpta4tbqfu.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpta4tbqfu.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpta4tbqfu.jl:37\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpta4tbqfu.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpta4tbqfu.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpta4tbqfu.jl:39\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpta4tbqfu.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpta4tbqfu.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpta4tbqfu.jl:40\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpta4tbqfu.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpta4tbqfu.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpta4tbqfu.jl:43\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/sr"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpta4tbqfu.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    s=[]\n    for ch in\
    \ string\n        if ch == '['\n            push!(s,ch)\n        elseif ch ==\
    \ ']'\n            if isempty(s) \n                return false\n            else\n\
    \                pop!(s)\n            end\n        end\n    end\n    if isempty(s)\
    \ \n        return true\n    else\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\
    \t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") ==\
    \ false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1ybobqln.jl:39\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1ybobqln.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1ybobqln.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp1ybobqln.jl:40\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1ybobqln.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1ybobqln.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp1ybobqln.jl:46\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1ybobqln.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1ybobqln.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp1ybobqln.jl:48\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1ybobqln.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1ybobqln.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1ybobqln.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    for i = 1:length(string)\n\
    \        j = i + 1\n        if string[i] == '[' && string[j] == ']'\n        \
    \    return true\n        end\n    end\n    return false\nend\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\
    \t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") ==\
    \ false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp30nua246.jl:22\nin expression starting at /tmp/tmp30nua246.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    # your code goes here\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1raf5ogd.jl:23\n  Expression: candidate(\"\
    []]]]]]][[[[[]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1raf5ogd.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1raf5ogd.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp1raf5ogd.jl:24\n  Expression: candidate(\"[][]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1raf5ogd.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1raf5ogd.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp1raf5ogd.jl:25\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1raf5ogd.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1raf5ogd.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp1raf5ogd.jl:27\n  Expression: candidate(\"[]]]]]]]]]]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp1raf5ogd.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1raf5ogd.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp1raf5ogd.jl:29\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Tes"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 9 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1raf5ogd.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    while string != \"\
    \"\n        string = replace(string, \"][\")\n        string = replace(string,\
    \ \"[]\")\n    end\n    if string == \"\"\n        return true\n    else\n   \
    \     return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp083v0zxm.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"[[]]\") == true\\n  MethodError: no method\
    \ matching replace(::String, ::String)\\n  Closest candidates are:\\n    replace(!Matched::Union{Function,\
    \ Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\\\
    n    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\\\
    n    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\\\
    n    ...\\n  Stacktrace:\\n   [1] is_nested(string::String)\\n     @ Main /tmp/tmp083v0zxm.jl:15\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp083v0zxm.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp083v0zxm.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmp083v0zxm.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\\n  MethodError: no method matching replace(::String,\
    \ ::String)\\n  Closest candidates are:\\n    replace(!Matched::Union{Function,\
    \ Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\\\
    n    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\\\
    n    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\\\
    n    ...\\n  Stacktrace:\\n   [1] is_nested(string::String)\\n     @ Main /tmp/tmp083v0zxm.jl:15\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp083v0zxm.jl:30 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp083"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    for i in 1:length(string)\n\
    \        if string[i] == '['\n            if i == length(string)\n           \
    \     return false\n            elseif string[i+1] == ']'\n                return\
    \ true\n            end\n        end\n    end\n    return false\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\
    \t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") ==\
    \ false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpuk1x9bpu.jl:31\n  Expression: candidate(\"\
    []]]]]]][[[[[]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuk1x9bpu.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuk1x9bpu.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuk1x9bpu.jl:32\n  Expression: candidate(\"[][]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuk1x9bpu.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuk1x9bpu.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuk1x9bpu.jl:33\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuk1x9bpu.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuk1x9bpu.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuk1x9bpu.jl:35\n  Expression: candidate(\"[]]]]]]]]]]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpuk1x9bpu.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuk1x9bpu.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuk1x9bpu.jl:37\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Tes"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuk1x9bpu.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    #Opening Bracket Count\n\
    \    leftCount = 0\n    #Closing Bracket Count\n    rightCount = 0\n    for bracket\
    \ in string\n        if bracket == '['\n            leftCount += 1\n        elseif\
    \ bracket == ']'\n            rightCount += 1\n        end\n    end\n    (leftCount>0\
    \ && rightCount>0) ? true : false\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp7i30dx0.jl:33\n  Expression: candidate(\"\
    []]]]]]][[[[[]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp7i30dx0.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp7i30dx0.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpp7i30dx0.jl:34\n  Expression: candidate(\"[][]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp7i30dx0.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp7i30dx0.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpp7i30dx0.jl:35\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp7i30dx0.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp7i30dx0.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpp7i30dx0.jl:37\n  Expression: candidate(\"[]]]]]]]]]]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpp7i30dx0.jl:37 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp7i30dx0.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpp7i30dx0.jl:39\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Tes"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp7i30dx0.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    return length(string)\
    \ != count(string, '[') | count(string, ']') \nend\n\"\"\"\n    Create a function\
    \ that takes a list of numbers, removes any values that are the same, and returns\
    \ the result as a new list.\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0ppt8v4i.jl:16\nin expression starting at\
    \ /tmp/tmp0ppt8v4i.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_brackets = 0\n\
    \    close_brackets = 0\n    for i in string\n        if i == '['\n          \
    \  open_brackets += 1\n        elseif i == ']'\n            close_brackets +=\
    \ 1\n        end\n        if close_brackets > open_brackets\n            return\
    \ false\n        end\n    end\n    if open_brackets != close_brackets\n      \
    \  return false\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpolu57s9t.jl:38\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpolu57s9t.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpolu57s9t.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpolu57s9t.jl:39\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpolu57s9t.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpolu57s9t.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpolu57s9t.jl:45\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpolu57s9t.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpolu57s9t.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpolu57s9t.jl:47\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpolu57s9t.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpolu57s9t.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpolu57s9t.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    flag = true\n    for\
    \ bracket in string\n        flag = true\n        if bracket == '['\n        \
    \    flag = false\n        elseif bracket == ']'\n            flag = true\n  \
    \      end\n    end\n    return flag\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgjrpxap8.jl:31\n  Expression: candidate(\"\
    []]]]]]][[[[[]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgjrpxap8.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgjrpxap8.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpgjrpxap8.jl:32\n  Expression: candidate(\"[][]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgjrpxap8.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgjrpxap8.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpgjrpxap8.jl:33\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgjrpxap8.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgjrpxap8.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpgjrpxap8.jl:35\n  Expression: candidate(\"[]]]]]]]]]]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpgjrpxap8.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgjrpxap8.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpgjrpxap8.jl:37\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Tes"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 9 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgjrpxap8.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    \n    for i in 2:length(string)\n\
    \        if string[i] == ']'\n            if string[i-1] == '['\n            \
    \    if i-2 > 0\n                    if string[i-2] == '['\n                 \
    \       return true\n                    end\n                end\n          \
    \  end\n        end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjt3n4ifx.jl:34\n  Expression: candidate(\"\
    []]]]]]][[[[[]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjt3n4ifx.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjt3n4ifx.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpjt3n4ifx.jl:40\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjt3n4ifx.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjt3n4ifx.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   12     2     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 12 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjt3n4ifx.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    return string \u2260\
    \ \"[]\" && !all(char -> char in \"[]\", string) && length(string) \u2264 10*10^7\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfkarp9lu.jl:21\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfkarp9lu.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfkarp9lu.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpfkarp9lu.jl:25\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfkarp9lu.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfkarp9lu.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpfkarp9lu.jl:27\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfkarp9lu.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfkarp9lu.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpfkarp9lu.jl:30\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfkarp9lu.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfkarp9lu.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpfkarp9lu.jl:31\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/T"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfkarp9lu.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    opening = []\n   \
    \ for c in string\n        if c == '['\n            push!(opening, c)\n      \
    \  else\n            if !isempty(opening)\n                pop!(opening)\n   \
    \         else\n                return false\n            end\n        end\n \
    \   end\n    return isempty(opening)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq8kj0ulr.jl:35\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq8kj0ulr.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq8kj0ulr.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpq8kj0ulr.jl:36\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq8kj0ulr.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq8kj0ulr.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpq8kj0ulr.jl:42\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq8kj0ulr.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq8kj0ulr.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpq8kj0ulr.jl:44\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq8kj0ulr.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq8kj0ulr.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq8kj0ulr.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_count = 0\n \
    \   close_count = 0\n    for c in string\n        if c == '['\n            open_count\
    \ += 1\n        elseif c == ']'\n            close_count += 1\n        end\n \
    \   end\n    return open_count > close_count\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp20_xljsw.jl:30\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp20_xljsw.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp20_xljsw.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp20_xljsw.jl:34\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp20_xljsw.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp20_xljsw.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp20_xljsw.jl:36\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp20_xljsw.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp20_xljsw.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp20_xljsw.jl:37\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp20_xljsw.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp20_xljsw.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp20_xljsw.jl:40\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Tes"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp20_xljsw.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack = []\n    for\
    \ char in string\n        if char == '['\n            push!(stack,char)\n    \
    \    elseif char == ']'\n            if isempty(stack)\n                return\
    \ false\n            else\n                pop!(stack)\n            end\n    \
    \    end\n    end\n    if !isempty(stack)\n        return false\n    else\n  \
    \      return true\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp77uwco41.jl:39\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp77uwco41.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp77uwco41.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp77uwco41.jl:40\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp77uwco41.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp77uwco41.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp77uwco41.jl:46\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp77uwco41.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp77uwco41.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp77uwco41.jl:48\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp77uwco41.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp77uwco41.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp77uwco41.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    # use regex to test\
    \ if there is a valid subsequence of brackets where at least one bracket in the\
    \ subsequence is nested\n    @regex begin \n        ([[][]])*   # match zero or\
    \ more of the valid pattern\n    end =~ string\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjx3r0vuh.jl:17\nin expression starting at /tmp/tmpjx3r0vuh.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    \n    #Create a new\
    \ array where we store all elements\n    new_array = []\n    \n    #Create a variable\
    \ to store the number of opened brackets\n    num_opened = 0\n    \n    #Create\
    \ a variable to store the number of closed brackets\n    num_closed = 0\n    \n\
    \    #Iterate over the string and store all brackets in the new array\n    for\
    \ i in string\n        if i == \"[\"\n            push!(new_array,i)\n       \
    \     num_opened += 1\n        elseif i == \"]\"\n            push!(new_array,i)\n\
    \            num_closed += 1\n        end\n    end\n    \n    #Check if the number\
    \ of opened and closed brackets are equal, return False if they are not\n    if\
    \ num_opened != num_closed\n        return false\n    end\n    \n    #If the number\
    \ of opened and closed brackets are equal and if the number of opened brackets\
    \ is 0, return False\n    if num_opened == num_closed && num_opened == 0\n   \
    \     return false\n    end\n    \n    #Create a variable to store all opened\
    \ brackets\n    opened_arr = []\n    \n    #Iterate over the new array and keep\
    \ all opened brackets in opened_arr\n    for j in new_array\n        if j == \"\
    [\"\n            push!(opened_arr,j)\n        end\n    end\n    \n    #Create\
    \ a variable to store all closed brackets\n    closed_arr = []\n    \n    #Iterate\
    \ over the new array and keep all closed brackets in closed_arr\n    for j in\
    \ new_array\n        if j == \"]\"\n            push!(closed_arr,j)\n        end\n\
    \    end\n    \n    #Check if a closed bracket is smaller than opened bracket\
    \ and if yes return True\n    if length(closed_arr) < length(opened_arr)\n   \
    \     return true\n    end\n    \n    #If all conditions are false, return False\n\
    \    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp26qe8i3j.jl:78\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp26qe8i3j.jl:78 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp26qe8i3j.jl:77\ntest set: Test\
    \ Failed at /tmp/tmp26qe8i3j.jl:82\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp26qe8i3j.jl:82 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp26qe8i3j.jl:77\ntest set: Test\
    \ Failed at /tmp/tmp26qe8i3j.jl:84\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp26qe8i3j.jl:84 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp26qe8i3j.jl:77\ntest set: Test\
    \ Failed at /tmp/tmp26qe8i3j.jl:87\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp26qe8i3j.jl:87 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp26qe8i3j.jl:77\ntest set: Test\
    \ Failed at /tmp/tmp26qe8i3j.jl:88\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/T"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp26qe8i3j.jl:75\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    return length(string)\
    \ != 0 ? length(string) % 2 == 0 ? string[end] == '[' ? false : true : false :\
    \ false\nend\nis_nested(\"[[]]\")\n \nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2_ogd5gr.jl:24\n  Expression: candidate(\"\
    []]]]]]][[[[[]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2_ogd5gr.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2_ogd5gr.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp2_ogd5gr.jl:25\n  Expression: candidate(\"[][]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2_ogd5gr.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2_ogd5gr.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp2_ogd5gr.jl:26\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2_ogd5gr.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2_ogd5gr.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp2_ogd5gr.jl:32\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2_ogd5gr.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2_ogd5gr.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp2_ogd5gr.jl:36\n  Expression: candidate(\"]]]]]]]]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2_ogd5gr.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    if length(string)\
    \ == 0\n        return false\n    end\n    if length(string) == 1\n        return\
    \ false\n    end\n    temp = []\n    for i in 1:length(string)\n        if string[i]\
    \ == '['\n            push!(temp,string[i])\n        elseif string[i] == ']'\n\
    \            if isempty(temp) || temp[end] == ']'\n                return false\n\
    \            else\n                pop!(temp)\n            end\n        end\n\
    \    end\n    if length(temp) == 0\n        return true\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprnxykvzj.jl:45\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprnxykvzj.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprnxykvzj.jl:42\ntest set: Test\
    \ Failed at /tmp/tmprnxykvzj.jl:46\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprnxykvzj.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprnxykvzj.jl:42\ntest set: Test\
    \ Failed at /tmp/tmprnxykvzj.jl:52\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprnxykvzj.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprnxykvzj.jl:42\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     3     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 11 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprnxykvzj.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_left = 0\n  \
    \  open_right = 0\n    for i = 1:length(string)\n        c = string[i]\n     \
    \   open_left += c == '[' ? 1 : 0\n        open_right += c == ']' ? 1 : 0\n  \
    \      if open_right > open_left\n            return false\n        end\n    end\n\
    \    return open_left > 0\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy42y2_t0.jl:33\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy42y2_t0.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy42y2_t0.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpy42y2_t0.jl:34\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy42y2_t0.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy42y2_t0.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpy42y2_t0.jl:38\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy42y2_t0.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy42y2_t0.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpy42y2_t0.jl:43\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy42y2_t0.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy42y2_t0.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy42y2_t0.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open = 0 \n    close\
    \ = 0 \n    for s in string \n        if s == \"[\" \n            open += 1 \n\
    \        elseif s == \"]\" \n            close += 1 \n        end \n    end \n\
    \    if open == close \n        return false \n    else \n        return true\
    \ \n    end \nend \nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t\
    @test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\
    \t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t\
    @test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") ==\
    \ false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp102_3i9z.jl:34\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp102_3i9z.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp102_3i9z.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp102_3i9z.jl:38\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp102_3i9z.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp102_3i9z.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp102_3i9z.jl:40\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp102_3i9z.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp102_3i9z.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp102_3i9z.jl:43\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp102_3i9z.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp102_3i9z.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp102_3i9z.jl:44\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/T"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp102_3i9z.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    s = string\n    while\
    \ s != \"\"\n        if s == \"[]\"\n            return true\n        end\n  \
    \      s = s[s.find(s, \"]\")+1:end]\n    end\n    return false\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\
    \t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") ==\
    \ false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpbdp4qxh3.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"[[]]\") == true\\n  type String has no\
    \ field find\\n  Stacktrace:\\n   [1] getproperty\\n     @ ./Base.jl:42 [inlined]\\\
    n   [2] is_nested(string::String)\\n     @ Main /tmp/tmpbdp4qxh3.jl:19\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpbdp4qxh3.jl:28 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpbdp4qxh3.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpbdp4qxh3.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\\n  type String has no field find\\n\
    \  Stacktrace:\\n   [1] getproperty\\n     @ ./Base.jl:42 [inlined]\\n   [2] is_nested(string::String)\\\
    n     @ Main /tmp/tmpbdp4qxh3.jl:19\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpbdp4qxh3.jl:29 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpbdp4qxh3.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpbdp4qxh3.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[][]\") == false\\n  type String has no field find\\n  Stacktrace:\\\
    n   [1] getproperty\\n     @ ./Base.jl:42 [inlined]\\n   [2] is_nested(string::String)\\\
    n     @ Main /tmp/tmpbdp4qxh3.jl:19\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpbdp4qxh3.jl:30 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpbdp4qxh3.jl:27\\ntest set:\
    \ Test Failed at /tmp/tmpbdp4qxh3.jl:31\\n  Expression: candidate(\"[]\") == false\\\
    n   Evaluated: true == fal"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    \"\"\"\n    Return\
    \ true if and only if there is a valid subsequence of brackets where at least\
    \ one bracket in the subsequence is nested.\n    \"\"\"\n    for (i, char) in\
    \ enumerate(string)\n        if char == \"[\" && string[i+1] == \"]\" \n     \
    \       return true\n        end\n    end\n    return false\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\
    \t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") ==\
    \ false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx_z3k0xo.jl:29\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx_z3k0xo.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx_z3k0xo.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpx_z3k0xo.jl:33\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx_z3k0xo.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx_z3k0xo.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpx_z3k0xo.jl:35\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx_z3k0xo.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx_z3k0xo.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpx_z3k0xo.jl:38\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx_z3k0xo.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx_z3k0xo.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpx_z3k0xo.jl:39\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/T"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx_z3k0xo.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    @timeit # bench mark\
    \ the function\n    output = []\n    string = collect(string)\n    for char in\
    \ string\n        char == '[' ? push!(output, char) : pop!(output)\n    end\n\
    \    output == [] ? true : false\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @timeit not defined\nStacktrace:\n [1]\
    \ top-level scope\n   @ :0\n [2] #macroexpand#51\n   @ ./expr.jl:115 [inlined]\n\
    \ [3] macroexpand\n   @ ./expr.jl:114 [inlined]\n [4] docm(source::LineNumberNode,\
    \ mod::Module, meta::Any, ex::Any, define::Bool) (repeats 2 times)\n   @ Base.Docs\
    \ ./docs/Docs.jl:537\n [5] var\"@doc\"(::LineNumberNode, ::Module, ::String, ::Vararg{Any})\n\
    \   @ Core ./boot.jl:517\nin expression starting at /tmp/tmp00y7vdkz.jl:1\nin\
    \ expression starting at /tmp/tmp00y7vdkz.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n  open_brackets = 0\n\
    \  for char in string\n    if char == '['\n      open_brackets += 1\n    else\n\
    \      open_brackets -= 1\n    end\n    if open_brackets < 0\n      return false\n\
    \    end\n  end\n  return open_brackets != 0\nend\n@show is_nested('[[]]')\n@show\
    \ is_nested('[]]]]]]][[[[[]')\n@show is_nested('[][]')\n@show is_nested('[]')\n\
    @show is_nested('[[][]]')\n@show is_nested('[[]][[')\n \nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp4ri9x9lz.jl:27\nin expression\
    \ starting at /tmp/tmp4ri9x9lz.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    squares = length(regexp(\"\
    \\\\[\", string))\n    all_squares = length(regexp(\"\\\\[\\\\]\", string))\n\
    \    squares == all_squares ? false : true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpvja7yads.jl:23\\n  Test threw\
    \ exception\\n  Expression: candidate(\"[[]]\") == true\\n  UndefVarError: regexp\
    \ not defined\\n  Stacktrace:\\n   [1] is_nested(string::String)\\n     @ Main\
    \ /tmp/tmpvja7yads.jl:14\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpvja7yads.jl:23 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpvja7yads.jl:22\\ntest set:\
    \ Error During Test at /tmp/tmpvja7yads.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\\n  UndefVarError: regexp not defined\\\
    n  Stacktrace:\\n   [1] is_nested(string::String)\\n     @ Main /tmp/tmpvja7yads.jl:14\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpvja7yads.jl:24 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpvja7yads.jl:22\\ntest set:\
    \ Error During Test at /tmp/tmpvja7yads.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[][]\") == false\\n  UndefVarError: regexp not defined\\n  Stacktrace:\\\
    n   [1] is_nested(string::String)\\n     @ Main /tmp/tmpvja7yads.jl:14\\n   [2]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpvja7yads.jl:25 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpvja7yads.jl:22\\ntest set:\
    \ Error During Test at /tmp/tmpvja7yads.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]\") == false\\n  UndefVarError: regexp not defined\\n  Stacktrace:\\\
    n   [1] is_nested(string::String)\\n     @ Main /tmp/tmpvja7yads.jl:14\\n   [2]\
    \ macro e"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack = []\n    for\
    \ i in string\n        i == '[' ? push!(stack, i) : pop!(stack) == nothing ? return\
    \ false : continue\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: colon expected in \"?\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqbiqx2lh.jl:17\nin expression starting at\
    \ /tmp/tmpqbiqx2lh.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    bracket_count = Dict('['\
    \ => 0, ']' => 0)\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t\
    @test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\
    \t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t\
    @test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") ==\
    \ false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbf1vuzz4.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbf1vuzz4.jl:1\n\
    in expression starting at /tmp/tmpbf1vuzz4.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack = []\n    for\
    \ bracket in string\n        push!(stack, bracket)\n        if bracket == ']'\
    \ && last(stack) == '['\n            pop!(stack)\n            pop!(stack)\n  \
    \      end\n    end\n    isempty(stack)\nend\n\"\"\"\n    Create a function that\
    \ accepts a string as input, and returns an integer as output. The input will\
    \ be an interger converted to a string, and your task is to add up all of the\
    \ integers in the string. For example, if you are given '123', return 6.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7ed8a1ci.jl:24\nin expression starting at\
    \ /tmp/tmp7ed8a1ci.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    bracket_string = string.replace(\"\
    []\", \"\")\n    if bracket_string == \"\"\n        return true\n    elseif bracket_string[1]\
    \ == \"]\"\n        return false\n    else\n        return is_nested(bracket_string)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpge1ca0ej.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"[[]]\") == true\\n  type String has no\
    \ field replace\\n  Stacktrace:\\n   [1] getproperty\\n     @ ./Base.jl:42 [inlined]\\\
    n   [2] is_nested(string::String)\\n     @ Main /tmp/tmpge1ca0ej.jl:14\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpge1ca0ej.jl:28 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpge1ca0ej.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpge1ca0ej.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\\n  type String has no field replace\\\
    n  Stacktrace:\\n   [1] getproperty\\n     @ ./Base.jl:42 [inlined]\\n   [2] is_nested(string::String)\\\
    n     @ Main /tmp/tmpge1ca0ej.jl:14\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpge1ca0ej.jl:29 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpge1ca0ej.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpge1ca0ej.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[][]\") == false\\n  type String has no field replace\\n  Stacktrace:\\\
    n   [1] getproperty\\n     @ ./Base.jl:42 [inlined]\\n   [2] is_nested(string::String)\\\
    n     @ Main /tmp/tmpge1ca0ej.jl:14\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpge1ca0ej.jl:30 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpge1ca0ej.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpge1ca0ej.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(\"["
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    \"\"\"\n    assert\
    \ is_nested('[[]]') == true\n    assert is_nested('[]]]]]]][[[[[]') == false\n\
    \    assert is_nested('[][]') == false\n    assert is_nested('[]') == false\n\
    \    assert is_nested('[[][]]') == true\n    assert is_nested('[[]][[') == true\n\
    \    \"\"\"\n    # TODO: Your code here\n    return false\nend\n\"\"\"\n    Create\
    \ a function that returns true if the given string contains duplicate letters,\
    \ \n    else return false.\n    \n    is_duplicate('abc') \u279E false\n    is_duplicate('aab')\
    \ \u279E true\n    is_duplicate('abcabc') \u279E true\n    is_duplicate('abcABC')\
    \ \u279E true\n    is_duplicate('abcABCabc') \u279E true\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\
    \t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") ==\
    \ false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp__egyctu.jl:25\nin expression starting at /tmp/tmp__egyctu.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    return_flag = false\n\
    \    count_stack = []\n    for i in 1:length(string)\n        if string[i] ==\
    \ '['\n            push!(count_stack, 1)\n        elseif string[i] == ']'\n  \
    \          if !isempty(count_stack)\n                if count_stack[end] == 1\n\
    \                    return_flag = true\n                end\n               \
    \ pop!(count_stack)\n            end\n        end\n    end\n    return return_flag\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2yyd1hko.jl:36\n  Expression: candidate(\"\
    []]]]]]][[[[[]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2yyd1hko.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2yyd1hko.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp2yyd1hko.jl:37\n  Expression: candidate(\"[][]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2yyd1hko.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2yyd1hko.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp2yyd1hko.jl:38\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2yyd1hko.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2yyd1hko.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp2yyd1hko.jl:40\n  Expression: candidate(\"[]]]]]]]]]]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp2yyd1hko.jl:40 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2yyd1hko.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp2yyd1hko.jl:42\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Tes"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2yyd1hko.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    \n    # check which\
    \ type brackets first\n    first_bracket = string[1]\n    is_closed = true\n \
    \   for i = 1:length(string)\n        if string[i] == '['\n            if first_bracket\
    \ == ']'\n                is_closed = false\n                break\n         \
    \   end\n        else\n            if first_bracket == '['\n                is_closed\
    \ = false\n                break\n            end\n        end\n    end\n    if\
    \ is_closed\n        return false\n    end\n    # check if there is a valid sequence\n\
    \    l = 0\n    r = 0\n    for i = 1:length(string)\n        if string[i] == '['\n\
    \            l += 1\n        else\n            r += 1\n        end\n        if\
    \ r > l\n            return false\n        end\n    end\n    if l == r\n     \
    \   return false\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp9a8z8um8.jl:57\\n  Expression: candidate(\"\
    [[]]\") == true\\n   Evaluated: false == true\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp9a8z8um8.jl:57 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp9a8z8um8.jl:56\\ntest set: Test\
    \ Failed at /tmp/tmp9a8z8um8.jl:61\\n  Expression: candidate(\"[[[[]]]]\") ==\
    \ true\\n   Evaluated: false == true\\nStacktrace:\\n [1] macro expansion\\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp9a8z8um8.jl:61 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp9a8z8um8.jl:56\\ntest set: Test\
    \ Failed at /tmp/tmp9a8z8um8.jl:63\\n  Expression: candidate(\"[][][[]]\") ==\
    \ true\\n   Evaluated: false == true\\nStacktrace:\\n [1] macro expansion\\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp9a8z8um8.jl:63 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp9a8z8um8.jl:56\\ntest set: Test\
    \ Failed at /tmp/tmp9a8z8um8.jl:64\\n  Expression: candidate(\"[[]\") == false\\\
    n   Evaluated: true == false\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp9a8z8um8.jl:64 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp9a8z8um8.jl:56\\ntest set: Test\
    \ Failed at /tmp/tmp9a8z8um8.jl:67\\n  Expression: candidate(\"[[][]]\") == true\\\
    n   Evaluated: false == true\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/c"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    brackets = Dict( ']'\
    \ => '[', \n                     '}' => '{', \n                     ')' => '('\
    \ )\n    stack = []\n    for char in string\n        if char in brackets.values()\n\
    \            push!(stack, char)\n        elseif char in brackets.keys()\n    \
    \        if pop!(stack) != brackets[char]\n                return false\n    \
    \        end\n        end\n    end\n    return true\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpthgfwtjv.jl:34\\n  Test threw\
    \ exception\\n  Expression: candidate(\"[[]]\") == true\\n  type Dict has no field\
    \ values\\n  Stacktrace:\\n   [1] getproperty\\n     @ ./Base.jl:42 [inlined]\\\
    n   [2] is_nested(string::String)\\n     @ Main /tmp/tmpthgfwtjv.jl:19\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpthgfwtjv.jl:34 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpthgfwtjv.jl:33\\ntest set:\
    \ Error During Test at /tmp/tmpthgfwtjv.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\\n  type Dict has no field values\\n\
    \  Stacktrace:\\n   [1] getproperty\\n     @ ./Base.jl:42 [inlined]\\n   [2] is_nested(string::String)\\\
    n     @ Main /tmp/tmpthgfwtjv.jl:19\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpthgfwtjv.jl:35 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpthgfwtjv.jl:33\\ntest set:\
    \ Error During Test at /tmp/tmpthgfwtjv.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[][]\") == false\\n  type Dict has no field values\\n  Stacktrace:\\\
    n   [1] getproperty\\n     @ ./Base.jl:42 [inlined]\\n   [2] is_nested(string::String)\\\
    n     @ Main /tmp/tmpthgfwtjv.jl:19\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpthgfwtjv.jl:36 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpthgfwtjv.jl:33\\ntest set:\
    \ Error During Test at /tmp/tmpthgfwtjv.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]\") == fa"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n  valid_bracket = !isempty(r\"\
    \\[[\\[]\")\n  for i in [1:3:end-1]\n    if valid_bracket[i] && valid_bracket[i+1]\n\
    \      return true\n    end\n  end\n  return false\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:3:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnd_y11ed.jl:15\nin expression\
    \ starting at /tmp/tmpnd_y11ed.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    bracket_num = 0\n\
    \    bracket_check = false\n    for bracket in string\n        if bracket == '['\n\
    \            bracket_num += 1\n        elseif bracket == ']'\n            bracket_num\
    \ -= 1\n        end\n        if bracket_num < 0\n            bracket_check = true\n\
    \        end\n    end\n    if bracket_num == 0 && bracket_check == true\n    \
    \    return true\n    else\n        return false\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\
    \t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") ==\
    \ false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5onre71p.jl:37\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5onre71p.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5onre71p.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp5onre71p.jl:41\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5onre71p.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5onre71p.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp5onre71p.jl:43\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5onre71p.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5onre71p.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp5onre71p.jl:46\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5onre71p.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5onre71p.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp5onre71p.jl:47\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/T"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5onre71p.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    array = []\n    for\
    \ i in string\n        if i == '['\n            push!(array, i)\n        elseif\
    \ isempty(array)\n            return false\n        else\n            pop!(array)\n\
    \        end\n    end\n    return isempty(array)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfbarbjpe.jl:33\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfbarbjpe.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfbarbjpe.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpfbarbjpe.jl:34\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfbarbjpe.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfbarbjpe.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpfbarbjpe.jl:40\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfbarbjpe.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfbarbjpe.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpfbarbjpe.jl:42\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfbarbjpe.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfbarbjpe.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfbarbjpe.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    for ch in string\n\
    \        if !(ch in ('[', ']'))\n            return false\n        end\n    end\n\
    \    count = 0\n    for ch in string\n        if ch == '['\n            count\
    \ += 1\n        elseif ch == ']'\n            count -= 1\n        end\n      \
    \  if count < 0\n            return false\n        end\n    end\n    return count\
    \ == 0\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvom748kh.jl:39\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvom748kh.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvom748kh.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpvom748kh.jl:40\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvom748kh.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvom748kh.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpvom748kh.jl:46\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvom748kh.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvom748kh.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpvom748kh.jl:48\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvom748kh.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvom748kh.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvom748kh.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    # loop thru chars\
    \ \n    # \n    return false \nend \nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpes8t2ac9.jl:23\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpes8t2ac9.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpes8t2ac9.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpes8t2ac9.jl:27\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpes8t2ac9.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpes8t2ac9.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpes8t2ac9.jl:29\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpes8t2ac9.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpes8t2ac9.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpes8t2ac9.jl:32\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpes8t2ac9.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpes8t2ac9.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpes8t2ac9.jl:33\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/T"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpes8t2ac9.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    is_valid = 0\n   \
    \ for bracket in string\n        if bracket == '['\n            is_valid += 1\n\
    \        elseif bracket == ']'\n            is_valid -= 1\n        end\n     \
    \   if is_valid < 0\n            return false\n        end\n    end\n    is_valid\
    \ > 0 ? false : true\nend\n\"\"\"\n    Create a function that takes in a list\
    \ of integers and returns a new list of distinct elements \n    from the first\
    \ list.\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4_d8czmx.jl:27\nin expression starting at\
    \ /tmp/tmp4_d8czmx.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    str = string \n  \
    \  for i in 1:length(str)\n        if str[i] == '[' && str[i+1] == ']'\n     \
    \       str[i] = '0'\n            str[i+1] = '0'\n        end\n    end\n    return\
    \ !occursin('[]', str)\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpe_6oqp9k.jl:21\nin expression\
    \ starting at /tmp/tmpe_6oqp9k.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    count = 0\n    for\
    \ i in string\n        if i == \"[\"\n            count += 1\n        elseif i\
    \ == \"]\"\n            count -= 1\n        end\n        if count < 0\n      \
    \      return false\n        end\n    end\n    if count == 0\n        return true\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsj9u2_bs.jl:37\n  Expression: candidate(\"\
    []]]]]]][[[[[]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsj9u2_bs.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsj9u2_bs.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpsj9u2_bs.jl:38\n  Expression: candidate(\"[][]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsj9u2_bs.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsj9u2_bs.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpsj9u2_bs.jl:39\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsj9u2_bs.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsj9u2_bs.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpsj9u2_bs.jl:41\n  Expression: candidate(\"[]]]]]]]]]]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpsj9u2_bs.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsj9u2_bs.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpsj9u2_bs.jl:43\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Tes"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 9 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsj9u2_bs.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack = []\n    for\
    \ i in string\n        if i == '['\n            push!(stack, i)\n        elseif\
    \ i == ']'\n            if isempty(stack)\n                return false\n    \
    \        else\n                pop!(stack)\n            end\n        end\n   \
    \ end\n    if isempty(stack)\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9u7hdrpg.jl:39\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9u7hdrpg.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9u7hdrpg.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp9u7hdrpg.jl:40\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9u7hdrpg.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9u7hdrpg.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp9u7hdrpg.jl:46\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9u7hdrpg.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9u7hdrpg.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp9u7hdrpg.jl:48\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9u7hdrpg.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9u7hdrpg.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9u7hdrpg.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    @assert string !=\
    \ \"\"\n    balance = 0\n    for char in string\n        if char == '['\n    \
    \        balance += 1\n        elseif char == ']'\n            balance -= 1\n\
    \        end\n        if balance < 0\n            return false\n        end\n\
    \    end\n    return balance == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpmdtba0c2.jl:35\\n  Expression: candidate(\"\
    [][]\") == false\\n   Evaluated: true == false\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpmdtba0c2.jl:35 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpmdtba0c2.jl:32\\ntest set: Test\
    \ Failed at /tmp/tmpmdtba0c2.jl:36\\n  Expression: candidate(\"[]\") == false\\\
    n   Evaluated: true == false\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpmdtba0c2.jl:36 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpmdtba0c2.jl:32\\ntest set: Test\
    \ Failed at /tmp/tmpmdtba0c2.jl:42\\n  Expression: candidate(\"[[]][[\") == true\\\
    n   Evaluated: false == true\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpmdtba0c2.jl:42 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpmdtba0c2.jl:32\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    for each in string\n\
    \        if each == \"[\"\n            push!(stack,each)\n        else\n     \
    \       if length(stack) == 0\n                return false\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    return\
    \ length(stack) == 0\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpi0v3c2q3.jl:32\\n  Test threw\
    \ exception\\n  Expression: candidate(\"[[]]\") == true\\n  UndefVarError: stack\
    \ not defined\\n  Stacktrace:\\n   [1] is_nested(string::String)\\n     @ Main\
    \ /tmp/tmpi0v3c2q3.jl:18\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpi0v3c2q3.jl:32 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpi0v3c2q3.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpi0v3c2q3.jl:33\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\\n  UndefVarError: stack not defined\\\
    n  Stacktrace:\\n   [1] is_nested(string::String)\\n     @ Main /tmp/tmpi0v3c2q3.jl:18\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpi0v3c2q3.jl:33 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpi0v3c2q3.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpi0v3c2q3.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[][]\") == false\\n  UndefVarError: stack not defined\\n  Stacktrace:\\\
    n   [1] is_nested(string::String)\\n     @ Main /tmp/tmpi0v3c2q3.jl:18\\n   [2]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpi0v3c2q3.jl:34 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpi0v3c2q3.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpi0v3c2q3.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]\") == false\\n  UndefVarError: stack not defined\\n  Stacktrace:\\\
    n   [1] is_nested(string::String)\\n     @ Main /tmp/tmpi0v3c2q3.jl:18\\n   [2]\
    \ macro expan"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_count = 0\n \
    \   for i in string\n        open_count += i == '[' ? 1 : 0\n        open_count\
    \ -= i == ']' ? 1 : 0\n        if open_count < 0\n            return false\n \
    \       end\n    end\n    return open_count > 0 ? false : true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\
    \t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") ==\
    \ false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplj5w6eni.jl:31\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplj5w6eni.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplj5w6eni.jl:28\ntest set: Test\
    \ Failed at /tmp/tmplj5w6eni.jl:32\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplj5w6eni.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplj5w6eni.jl:28\ntest set: Test\
    \ Failed at /tmp/tmplj5w6eni.jl:38\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplj5w6eni.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplj5w6eni.jl:28\ntest set: Test\
    \ Failed at /tmp/tmplj5w6eni.jl:40\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplj5w6eni.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplj5w6eni.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplj5w6eni.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    lhs = []\n    rhs\
    \ = []\n    for s in string\n        s == '[' ? push!(lhs, s) : push!(rhs, s)\n\
    \    end\n    if length(lhs) > 0 && length(rhs) > 0\n        return true\n   \
    \ else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_2t8yoxw.jl:31\n  Expression: candidate(\"\
    []]]]]]][[[[[]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_2t8yoxw.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_2t8yoxw.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp_2t8yoxw.jl:32\n  Expression: candidate(\"[][]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_2t8yoxw.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_2t8yoxw.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp_2t8yoxw.jl:33\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_2t8yoxw.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_2t8yoxw.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp_2t8yoxw.jl:35\n  Expression: candidate(\"[]]]]]]]]]]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_2t8yoxw.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_2t8yoxw.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp_2t8yoxw.jl:37\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Tes"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_2t8yoxw.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    s = copy(string)\n\
    \    while length(s) > 1\n        s = replace(s, r\"\\[\\]\", \"\")\n    end\n\
    \    return length(s) > 0\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpjqal3r3s.jl:25\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    for i in string\n\
    \        if i == '['\n            if i == ']'\n                return true\n \
    \           end\n        end\n    end\n    return false\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfm9ev8pe.jl:28\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfm9ev8pe.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfm9ev8pe.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpfm9ev8pe.jl:32\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfm9ev8pe.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfm9ev8pe.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpfm9ev8pe.jl:34\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfm9ev8pe.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfm9ev8pe.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpfm9ev8pe.jl:37\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfm9ev8pe.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfm9ev8pe.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpfm9ev8pe.jl:38\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/T"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfm9ev8pe.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack = Vector{Char}()\n\
    \    for ch in string\n        if ch == '['\n            push!(stack, ch)\n  \
    \      elseif ch == ']'\n            if length(stack) == 0\n                return\
    \ false\n            else\n                pop!(stack)\n            end\n    \
    \    end\n    end\n    if length(stack) == 0\n        return true\n    else\n\
    \        return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1ro0r0ib.jl:39\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1ro0r0ib.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1ro0r0ib.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp1ro0r0ib.jl:40\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1ro0r0ib.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1ro0r0ib.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp1ro0r0ib.jl:46\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1ro0r0ib.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1ro0r0ib.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp1ro0r0ib.jl:48\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1ro0r0ib.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1ro0r0ib.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1ro0r0ib.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    left, right = 0, 0\n\
    \    for bracket in string\n        if bracket == '[' \n            left += 1\n\
    \        elseif bracket == ']' \n            right += 1\n        end\n       \
    \ if right > left\n            return false\n        end\n    end\n    return\
    \ left == right\nend\nprintln(is_nested(\"[[]]\")) \nprintln(is_nested(\"[]]]]]]][[[[[]\"\
    )) \nprintln(is_nested(\"[][]\")) \nprintln(is_nested(\"[]\")) \nprintln(is_nested(\"\
    [[][]]\")) \nprintln(is_nested(\"[[]][[\")) \nusing Test\n\n@testset begin\n\n\
    candidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "true\nfalse\ntrue\ntrue\ntrue\nfalse\ntest set: Test Failed at /tmp/tmp3bmcj0pc.jl:40\n\
    \  Expression: candidate(\"[][]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3bmcj0pc.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3bmcj0pc.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp3bmcj0pc.jl:41\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3bmcj0pc.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3bmcj0pc.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp3bmcj0pc.jl:47\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3bmcj0pc.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3bmcj0pc.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp3bmcj0pc.jl:49\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3bmcj0pc.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3bmcj0pc.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3bmcj0pc.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    brackets = []\n  \
    \  has_nested = false\n    for i in string\n        if i == '['\n            push!(brackets,\
    \ i)\n        elseif i == ']'\n            if isempty(brackets)\n            \
    \    return false\n            else\n                pop!(brackets)\n        \
    \        has_nested = true\n            end\n        end\n    end\n    return\
    \ isempty(brackets) && has_nested\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps5wbsznc.jl:37\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps5wbsznc.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps5wbsznc.jl:34\ntest set: Test\
    \ Failed at /tmp/tmps5wbsznc.jl:38\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps5wbsznc.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps5wbsznc.jl:34\ntest set: Test\
    \ Failed at /tmp/tmps5wbsznc.jl:44\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps5wbsznc.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps5wbsznc.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     3     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 11 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps5wbsznc.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_bracket = '['\n\
    \    close_bracket = ']'\n    counter = 0\n    for c in string\n        if c ==\
    \ open_bracket\n            counter += 1\n        elseif c == close_bracket\n\
    \            counter -= 1\n        end\n    end\n    return counter != 0 ? false\
    \ : true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkibf7zkg.jl:33\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkibf7zkg.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkibf7zkg.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpkibf7zkg.jl:34\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkibf7zkg.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkibf7zkg.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpkibf7zkg.jl:40\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkibf7zkg.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkibf7zkg.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpkibf7zkg.jl:42\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkibf7zkg.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkibf7zkg.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkibf7zkg.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    bracket_stack = []\n\
    \    bracket_pairs = Dict(\"]\": \"[\")\n    for bracket in string\n        if\
    \ bracket == \"]\"\n            if bracket_stack == [] || bracket_stack[end] !=\
    \ bracket_pairs[bracket]\n                return false\n            else\n   \
    \             pop!(bracket_stack)\n            end\n        else\n           \
    \ push!(bracket_stack, bracket)\n        end\n    end\n    return bracket_stack\
    \ == []\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpqc2tgcn6.jl:34\\n  Test threw\
    \ exception\\n  Expression: candidate(\"[[]]\") == true\\n  MethodError: no method\
    \ matching -(::String, ::String)\\n  Stacktrace:\\n   [1] (::Colon)(start::String,\
    \ stop::String)\\n     @ Base ./range.jl:7\\n   [2] is_nested(string::String)\\\
    n     @ Main /tmp/tmpqc2tgcn6.jl:15\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpqc2tgcn6.jl:34 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpqc2tgcn6.jl:33\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    # length of string\
    \ must be > 0\n    if length(string) > 0\n        # define \n        num_open_brackets\
    \ = 0\n        num_closed_brackets = 0\n        count = 0\n        # loop through\
    \ string\n        for i in string\n            count += 1\n            # if current\
    \ char is an opening bracket,\n            # add 1 to number of opening brackets.\
    \ \n            if i == '['\n                num_open_brackets += 1\n        \
    \    # if current char is a closing bracket,\n            # add 1 to number of\
    \ closing brackets.\n            elseif i == ']'\n                num_closed_brackets\
    \ += 1\n            end\n            # if number of closing brackets > number\
    \ of opening brackets,\n            # return false\n            if num_closed_brackets\
    \ > num_open_brackets\n                return false\n            end\n       \
    \     # if number of opening brackets > number of closing brackets and\n     \
    \       # we're at the end of the string, return true\n            if num_open_brackets\
    \ > num_closed_brackets && count == length(string)\n                return true\n\
    \            end\n        end\n    end\n    return false\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\
    \t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") ==\
    \ false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq_xzit1c.jl:51\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq_xzit1c.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq_xzit1c.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpq_xzit1c.jl:55\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq_xzit1c.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq_xzit1c.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpq_xzit1c.jl:57\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq_xzit1c.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq_xzit1c.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpq_xzit1c.jl:58\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq_xzit1c.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq_xzit1c.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpq_xzit1c.jl:61\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Tes"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq_xzit1c.jl:48\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_brackets = []\n\
    \    for s in string\n        push!(open_brackets, s) if s == '['\n        pop!(open_brackets)\
    \ if s == ']'\n    end\n    return false if length(open_brackets) != 0\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpg328mtzx.jl:15 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpg328mtzx.jl:16\n\
    in expression starting at /tmp/tmpg328mtzx.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    for i in string\n\
    \        if i == ']' \n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1ct9e6sv.jl:26\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1ct9e6sv.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1ct9e6sv.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp1ct9e6sv.jl:30\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1ct9e6sv.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1ct9e6sv.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp1ct9e6sv.jl:32\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1ct9e6sv.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1ct9e6sv.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp1ct9e6sv.jl:35\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1ct9e6sv.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1ct9e6sv.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp1ct9e6sv.jl:36\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/T"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1ct9e6sv.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    opened = 0\n    closed\
    \ = 0\n    nested = false\n    i = 1\n    while i <= length(string)\n        if\
    \ string[i] == '['\n            opened += 1\n        elseif string[i] == ']'\n\
    \            closed += 1\n        end\n        if opened > closed\n          \
    \  nested = true\n        end\n        i += 1\n    end\n    return nested\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpskzejgwg.jl:37\n  Expression: candidate(\"\
    []]]]]]][[[[[]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpskzejgwg.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpskzejgwg.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpskzejgwg.jl:38\n  Expression: candidate(\"[][]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpskzejgwg.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpskzejgwg.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpskzejgwg.jl:39\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpskzejgwg.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpskzejgwg.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpskzejgwg.jl:41\n  Expression: candidate(\"[]]]]]]]]]]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpskzejgwg.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpskzejgwg.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpskzejgwg.jl:43\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Tes"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpskzejgwg.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    @assert length(string)\
    \ > 0\n    string = collect(string)\n    open = ['[']\n    closed = [']']\n  \
    \  is_nested = false\n    for i in 1:length(string)\n        if(i != length(string))\n\
    \            if(string[i] in open && string[i+1] in closed)\n                is_nested\
    \ = true\n            end\n        end\n    end\n    return is_nested\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmphv36ax70.jl:34\\n  Expression: candidate(\"\
    []]]]]]][[[[[]\") == false\\n   Evaluated: true == false\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmphv36ax70.jl:34 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmphv36ax70.jl:32\\ntest set: Test\
    \ Failed at /tmp/tmphv36ax70.jl:35\\n  Expression: candidate(\"[][]\") == false\\\
    n   Evaluated: true == false\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmphv36ax70.jl:35 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmphv36ax70.jl:32\\ntest set: Test\
    \ Failed at /tmp/tmphv36ax70.jl:36\\n  Expression: candidate(\"[]\") == false\\\
    n   Evaluated: true == false\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmphv36ax70.jl:36 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmphv36ax70.jl:32\\ntest set: Test\
    \ Failed at /tmp/tmphv36ax70.jl:38\\n  Expression: candidate(\"[]]]]]]]]]]\")\
    \ == false\\n   Evaluated: true == false\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmphv36ax70.jl:38 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmphv36ax70.jl:32\\ntest set: Test\
    \ Failed at /tmp/tmphv36ax70.jl:40\\n  Expression: candidate(\"[[]\") == false\\\
    n   Evaluated: true == false\\nStacktrace:\\n [1] macro expansion\\n   @ "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_count = 0\n \
    \   close_count = 0\n    for i in 1:length(string)\n        if string[i] == '['\n\
    \            open_count += 1\n        else\n            close_count += 1\n   \
    \     end\n        if close_count > open_count\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpapl35uye.jl:35\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpapl35uye.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpapl35uye.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpapl35uye.jl:36\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpapl35uye.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpapl35uye.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpapl35uye.jl:40\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpapl35uye.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpapl35uye.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpapl35uye.jl:44\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpapl35uye.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpapl35uye.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpapl35uye.jl:45\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpapl35uye.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    count = 0\n    for\
    \ i = 1:length(string)\n        count += string[i] == '[' ? 1 : -1\n        if\
    \ count < 0 \n            return false\n        end\n    end\n    count == 0\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp182aeivx.jl:30\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp182aeivx.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp182aeivx.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp182aeivx.jl:31\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp182aeivx.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp182aeivx.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp182aeivx.jl:37\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp182aeivx.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp182aeivx.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp182aeivx.jl:39\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp182aeivx.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp182aeivx.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp182aeivx.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    \n    count = 0\n\
    \    for s in string\n        if s == '['\n            count = count + 1\n   \
    \     elseif s == ']'\n            count = count - 1\n        end\n        if\
    \ count < 0 \n            return false\n        end\n    end\n    return count\
    \ == 0\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps9qbboaj.jl:35\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps9qbboaj.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps9qbboaj.jl:32\ntest set: Test\
    \ Failed at /tmp/tmps9qbboaj.jl:36\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps9qbboaj.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps9qbboaj.jl:32\ntest set: Test\
    \ Failed at /tmp/tmps9qbboaj.jl:42\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps9qbboaj.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps9qbboaj.jl:32\ntest set: Test\
    \ Failed at /tmp/tmps9qbboaj.jl:44\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps9qbboaj.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps9qbboaj.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps9qbboaj.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open = 0\n    close\
    \ = 0\n    for c in string\n        if c == '['\n            open += 1\n     \
    \   elseif c == ']'\n            close += 1\n        end\n    end\n    open >\
    \ 0 && close > 0 && close < open\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpaofuft63.jl:30\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaofuft63.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaofuft63.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpaofuft63.jl:34\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaofuft63.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaofuft63.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpaofuft63.jl:36\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaofuft63.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaofuft63.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpaofuft63.jl:37\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaofuft63.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaofuft63.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpaofuft63.jl:40\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Tes"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaofuft63.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    {\n        _ = find_valid_subsequence(string)\n\
    \    }\n    return !_[1].empty() && _[1][1]==1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: { } vector syntax is discontinued around /tmp/tmps2sxetw9.jl:14\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmps2sxetw9.jl:1\nin expression starting\
    \ at /tmp/tmps2sxetw9.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    len = length(string)\n\
    \    count = 0\n    for i = 1:len\n        if string[i] == '['\n            count\
    \ += 1\n        elseif string[i] == ']'\n            count -= 1\n        end\n\
    \    end\n    return count < 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr28l0zfe.jl:30\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr28l0zfe.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr28l0zfe.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpr28l0zfe.jl:31\n  Expression: candidate(\"[]]]]]]][[[[[]\"\
    ) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr28l0zfe.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr28l0zfe.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpr28l0zfe.jl:34\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr28l0zfe.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr28l0zfe.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpr28l0zfe.jl:35\n  Expression: candidate(\"[]]]]]]]]]]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpr28l0zfe.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr28l0zfe.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpr28l0zfe.jl:36\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 9 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr28l0zfe.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    count = 0\n    for\
    \ i in string\n        if i == '['\n            count += 1\n        elseif i ==\
    \ ']'\n            count -= 1\n        end\n        if count < 0\n           \
    \ return false\n        end\n    end\n    return count == 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\
    \t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") ==\
    \ false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpctk5xlq6.jl:34\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpctk5xlq6.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpctk5xlq6.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpctk5xlq6.jl:35\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpctk5xlq6.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpctk5xlq6.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpctk5xlq6.jl:41\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpctk5xlq6.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpctk5xlq6.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpctk5xlq6.jl:43\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpctk5xlq6.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpctk5xlq6.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpctk5xlq6.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    count = 0 \n    for\
    \ c in string \n        if c == '[' \n            count += 1 \n        elseif\
    \ c == ']' \n            count -= 1 \n        end \n        if count < 0 \n  \
    \          return false \n        end \n    end \n    return true \nend \n@testset\
    \ \"basic tests\" begin \n    @test is_nested(\"[]\") == false \n    @test is_nested(\"\
    [[]]\") == true \n    @test is_nested(\"[]]]]]]][[[[[]\") == false \n    @test\
    \ is_nested(\"[][]\") == false \n    @test is_nested(\"[]\") == false \n    @test\
    \ is_nested(\"[[][]]\") == true \n    @test is_nested(\"[[]][[\") == true \nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @testset not defined\nin expression starting\
    \ at /tmp/tmpfw9_qdyt.jl:27\nin expression starting at /tmp/tmpfw9_qdyt.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    s = matchall(r\"\\\
    [{2,}|\\]{2,}\", string)\n    if length(s) == 0 \n        return false\n    else\n\
    \        for i in s\n            if i == \"[\" || i == \"]\"\n               \
    \ return false\n            end\n        end\n        return true\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpbs8ix54z.jl:31\\n  Test threw\
    \ exception\\n  Expression: candidate(\"[[]]\") == true\\n  UndefVarError: matchall\
    \ not defined\\n  Stacktrace:\\n   [1] is_nested(string::String)\\n     @ Main\
    \ /tmp/tmpbs8ix54z.jl:14\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpbs8ix54z.jl:31 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpbs8ix54z.jl:30\\ntest set:\
    \ Error During Test at /tmp/tmpbs8ix54z.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\\n  UndefVarError: matchall not defined\\\
    n  Stacktrace:\\n   [1] is_nested(string::String)\\n     @ Main /tmp/tmpbs8ix54z.jl:14\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpbs8ix54z.jl:32 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpbs8ix54z.jl:30\\ntest set:\
    \ Error During Test at /tmp/tmpbs8ix54z.jl:33\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[][]\") == false\\n  UndefVarError: matchall not defined\\n  Stacktrace:\\\
    n   [1] is_nested(string::String)\\n     @ Main /tmp/tmpbs8ix54z.jl:14\\n   [2]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpbs8ix54z.jl:33 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpbs8ix54z.jl:30\\ntest set:\
    \ Error During Test at /tmp/tmpbs8ix54z.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]\") == false\\n  UndefVarError: matchall not defined\\n  Stacktrace:\\\
    n   [1] is_nested(string::String)\\n     @ Main /tmp/tmpbs8ix54z.jl:14\\n   [2]"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 14 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmpbs8ix54z.jl:28\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    lefts = 0\n    for\
    \ char in string\n        if char == '['\n            lefts += 1\n        elseif\
    \ char == ']'\n            if lefts == 0\n                return false\n     \
    \       else\n                lefts -= 1\n            end\n        end\n    end\n\
    \    return lefts == 0\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9hjsf5v1.jl:35\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9hjsf5v1.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9hjsf5v1.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp9hjsf5v1.jl:36\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9hjsf5v1.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9hjsf5v1.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp9hjsf5v1.jl:42\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9hjsf5v1.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9hjsf5v1.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp9hjsf5v1.jl:44\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9hjsf5v1.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9hjsf5v1.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9hjsf5v1.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    flag_nested = false\n\
    \    stack = []\n    for c in string\n        push!(stack, c)\n        if length(stack)\
    \ >= 2 && stack[end] == ']' && stack[end-1] == '['\n            pop!(stack)\n\
    \            pop!(stack)\n            flag_nested = true\n        end\n    end\n\
    \    return flag_nested\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe_r4wqgd.jl:32\n  Expression: candidate(\"\
    []]]]]]][[[[[]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe_r4wqgd.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe_r4wqgd.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpe_r4wqgd.jl:33\n  Expression: candidate(\"[][]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe_r4wqgd.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe_r4wqgd.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpe_r4wqgd.jl:34\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe_r4wqgd.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe_r4wqgd.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpe_r4wqgd.jl:36\n  Expression: candidate(\"[]]]]]]]]]]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpe_r4wqgd.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe_r4wqgd.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpe_r4wqgd.jl:38\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Tes"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe_r4wqgd.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n  s = String[]\n  for\
    \ char in string\n    if char == '['\n      push!(s, ']')\n    elseif char ==\
    \ ']'\n      if isempty(s)\n        return false\n      else\n        if s[end]\
    \ == char\n          pop!(s)\n        else\n          return false\n        end\n\
    \      end\n    end\n  end\n  isempty(s)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpf9xk8pky.jl:37\\n  Test threw\
    \ exception\\n  Expression: candidate(\"[[]]\") == true\\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] push!(a::Vector{String}, item::Char)\\n    \
    \ @ Base ./array.jl:994\\n   [2] is_nested(string::String)\\n     @ Main /tmp/tmpf9xk8pky.jl:17\\\
    n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpf9xk8pky.jl:37 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpf9xk8pky.jl:36\\ntest set:\
    \ Error During Test at /tmp/tmpf9xk8pky.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\\n  MethodError: Cannot `convert` an\
    \ object of type Char to an object of type String\\n  Closest candidates are:\\\
    n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] push!(a::Vector{String}, item::Char)\\n    \
    \ @ Base ./array.jl:994\\n   [2] is_nested(string::String)\\n     @ Main /tmp/tmpf9xk8pky.jl:17\\\
    n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack = []\n    for\
    \ bracket in string\n        if bracket == '['\n            push!(stack, bracket)\n\
    \        elseif bracket == ']'\n            if isempty(stack)\n              \
    \  return false\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return isempty(stack)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkkmvm_x3.jl:35\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkkmvm_x3.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkkmvm_x3.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpkkmvm_x3.jl:36\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkkmvm_x3.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkkmvm_x3.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpkkmvm_x3.jl:42\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkkmvm_x3.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkkmvm_x3.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpkkmvm_x3.jl:44\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkkmvm_x3.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkkmvm_x3.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkkmvm_x3.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    # find valid nesting\n\
    \    max_nesting = 0\n    current_nesting = 0\n    for char in string\n      \
    \  if char == '['\n            current_nesting += 1\n            max_nesting =\
    \ max(max_nesting, current_nesting)\n        elseif char == ']'\n            current_nesting\
    \ -= 1\n        end\n    end\n    return max_nesting > 1\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\
    \t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") ==\
    \ false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0db4uw3_.jl:39\n  Expression: candidate(\"\
    [[]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0db4uw3_.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0db4uw3_.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp0db4uw3_.jl:44\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0db4uw3_.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0db4uw3_.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   12     2     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 12 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0db4uw3_.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    if isempty(string)\n\
    \        return false\n    end\n    if any(string .== \"[\") && any(string .==\
    \ \"]\")\n        pos = searchsortedfirst(string, \"]\")\n        if pos <= length(string)\n\
    \            if searchsortedfirst(string, \"[\") < pos\n                return\
    \ true\n            else\n                return false\n            end\n    \
    \    else\n            return false\n        end\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx8xwgd7y.jl:37\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx8xwgd7y.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx8xwgd7y.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpx8xwgd7y.jl:41\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx8xwgd7y.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx8xwgd7y.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpx8xwgd7y.jl:43\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx8xwgd7y.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx8xwgd7y.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpx8xwgd7y.jl:46\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx8xwgd7y.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx8xwgd7y.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpx8xwgd7y.jl:47\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/T"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx8xwgd7y.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    # first, count all\
    \ opening brackets\n    opening_brackets = count(string, \"[\")\n    # second,\
    \ count all closing brackets\n    closing_brackets = count(string, \"]\")\n  \
    \  # third, count the inner brackets\n    inner_brackets = count(string, \"[]\"\
    )\n    # now take the first two values and subtract the last one, if the result\
    \ is greater than 0 return true, else return false\n    if opening_brackets -\
    \ closing_brackets - inner_brackets > 0\n        return true\n    else\n     \
    \   return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5mlh5idg.jl:32\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5mlh5idg.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5mlh5idg.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp5mlh5idg.jl:36\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5mlh5idg.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5mlh5idg.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp5mlh5idg.jl:38\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5mlh5idg.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5mlh5idg.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp5mlh5idg.jl:41\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5mlh5idg.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5mlh5idg.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp5mlh5idg.jl:42\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/T"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5mlh5idg.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    # write your solution\
    \ here \nend \nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpwvw5o3ho.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"[[]]\") == true\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Bool\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\\\
    n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\\\
    n    ...\\n  Stacktrace:\\n   [1] is_nested(string::String)\\n     @ Main /tmp/tmpwvw5o3ho.jl:15\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpwvw5o3ho.jl:21 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpwvw5o3ho.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpwvw5o3ho.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Bool\\n  Closest candidates are:\\\
    n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\\\
    n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\\\
    n    ...\\n  Stacktrace:\\n   [1] is_nested(string::String)\\n     @ Main /tmp/tmpwvw5o3ho.jl:15\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpwvw5o3ho.jl:22 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [in"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    matches = string .|>\
    \  x -> r\"\\[[\\[\\]]*\\]\" |> \n                            x -> Regex.match(x,\
    \ string)\n    # loop over matches and check for nestedness\n    for match in\
    \ matches\n        if inner_brackets(match)\n            return true\n       \
    \ end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpse275ta1.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"[[]]\") == true\n  type DataType has no field match\n\
    \  Stacktrace:\n    [1] getproperty\n      @ ./Base.jl:37 [inlined]\n    [2] (::var\"\
    #2#4\"{String})(x::Regex)\n      @ Main /tmp/tmpse275ta1.jl:15\n    [3] |>(x::Regex,\
    \ f::var\"#2#4\"{String})\n      @ Base ./operators.jl:966\n    [4] (::var\"#1#3\"\
    {String})(x::String)\n      @ Main /tmp/tmpse275ta1.jl:14\n    [5] |>(x::String,\
    \ f::var\"#1#3\"{String})\n      @ Base ./operators.jl:966\n    [6] _broadcast_getindex_evalf\n\
    \      @ ./broadcast.jl:670 [inlined]\n    [7] _broadcast_getindex\n      @ ./broadcast.jl:643\
    \ [inlined]\n    [8] getindex\n      @ ./broadcast.jl:597 [inlined]\n    [9] copy\n\
    \      @ ./broadcast.jl:875 [inlined]\n   [10] materialize\n      @ ./broadcast.jl:860\
    \ [inlined]\n   [11] is_nested(string::String)\n      @ Main /tmp/tmpse275ta1.jl:14\n\
    \   [12] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [13] macro expansion\n      @ /tmp/tmpse275ta1.jl:29 [inlined]\n\
    \   [14] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [15] top-level scope\n      @ /tmp/tmpse275ta1.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpse275ta1.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\n  type DataType has no field match\n\
    \  Stacktrace:\n    [1] getproperty\n      @ ./Base.jl:37 [inlined]\n    [2] (::var\"\
    #2#4\"{String})(x::Regex)\n      @ Main /tmp/tmpse275ta1.jl:15\n    [3] |>(x::Regex,\
    \ f::var\"#2#4\"{String})\n      @ Base ./operators.jl:966\n    [4] (::var\"#1#3\"\
    {String})(x::String)\n      @ Main /tmp/tmpse275ta1.jl:14\n    [5] |>(x::String,\
    \ f::var\"#1#3\"{String})\n      @ Base ./operators.jl:966\n    [6] _broadcast_getindex_evalf\n\
    \      @ ./broadcast.jl:670 [inlined]\n    [7] _broadcast_getindex\n      @ ./broadcast.jl:643\
    \ [inlined]\n    [8] getindex\n      @ ./broadcast.jl:597 [inlined]\n    [9] copy\n\
    \      @ ./broadcast.jl:875 [inlined]\n   [10] materialize\n      @ ./broadca"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 14 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpse275ta1.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    #1. Create a queue-like\
    \ structure to count brackets.\n    #2. Iterate through string character by character.\n\
    \    #3. If right bracket, pop off queue-like structure.\n    #4. If left bracket,\
    \ push onto queue-like structure.\n    #5. If queue-like structure is empty or\
    \ has one remaining element, return False.\n    #6. If queue-like structure is\
    \ not empty, return True.\n    brackets = []\n    for letter in string\n     \
    \   if letter == ']'\n            pop!(brackets)\n        elseif letter == '['\n\
    \            push!(brackets,letter)\n        end\n    end\n    return !isempty(brackets)\
    \ && length(brackets) == 1\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7c79784k.jl:35\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7c79784k.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7c79784k.jl:34\ntest set: Error\
    \ During Test at /tmp/tmp7c79784k.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\n  ArgumentError: array must be non-empty\n\
    \  Stacktrace:\n   [1] pop!\n     @ ./array.jl:1251 [inlined]\n   [2] is_nested(string::String)\n\
    \     @ Main /tmp/tmp7c79784k.jl:23\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7c79784k.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7c79784k.jl:34\ntest set:\
    \ Test Failed at /tmp/tmp7c79784k.jl:39\n  Expression: candidate(\"[[[[]]]]\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7c79784k.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7c79784k.jl:34\ntest set: Error\
    \ During Test at /tmp/tmp7c79784k.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"[]]]]]]]]]]\") == false\n  ArgumentError: array must be non-empty\n\
    \  Stacktrace:\n   [1] pop!\n     @ ./array.jl:1251 [inlined]\n   [2] is_nested(string::String)\n\
    \     @ Main /tmp/tmp7c79784k.jl:23\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7c79784k.jl:40 [inlined]\n\
    \   [5] macro expansion\n   "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 6 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7c79784k.jl:32\n"
  exit_code: 1
  status: SyntaxError
