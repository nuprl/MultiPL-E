name: HumanEval_133_sum_squares
language: jl
results:
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    s = 0\n    for num in lst\n \
    \       s += round(Int64,num)^2\n    end\n    return s\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6hsbtywm.jl:28\n  Expression: candidate([1.4,\
    \ 4.2, 0.0]) == 29\n   Evaluated: 17 == 29\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6hsbtywm.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6hsbtywm.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp6hsbtywm.jl:32\n  Expression: candidate([-1.4, 4.6, 6.3])\
    \ == 75\n   Evaluated: 62 == 75\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6hsbtywm.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6hsbtywm.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6hsbtywm.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    total = 0\n    for i in lst\n\
    \        total += round(i)^2\n    end\n    return total\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpytzxzv_s.jl:28\n  Expression: candidate([1.4,\
    \ 4.2, 0.0]) == 29\n   Evaluated: 17 == 29\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpytzxzv_s.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpytzxzv_s.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpytzxzv_s.jl:32\n  Expression: candidate([-1.4, 4.6, 6.3])\
    \ == 75\n   Evaluated: 62 == 75\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpytzxzv_s.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpytzxzv_s.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpytzxzv_s.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum_squares_temp = 0\n    for\
    \ x in lst\n        sum_squares_temp += ceil(x)^2\n    end\n    return sum_squares_temp\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    total = 0\n    for i in lst\n\
    \        total += ceil(i)^2\n    end\n    return total\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    s = 0\n    for i in 1:length(lst)\n\
    \        s += (ceil(lst[i]))^2\n    end\n    return s\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    lst = ceil.(lst)\n    sum = 0\n\
    \    for i in lst\n        sum += i^2\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0,\
    \ 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    tmp = ceil.(lst)\n    sum = 0.0\n\
    \    for i in tmp\n        sum += i*i\n    end\n    return Int64(sum)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    s = 0\n    for i in 1:length(lst)\n\
    \        s += ceil(lst[i])^2\n    end\n    return s\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(Int64.(ceil.(lst))\
    \ .^ 2)\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n        \"\"\"\n        Return the\
    \ sum of the squared input vector elements after rounding each element to its\
    \ upper integer\n        \"\"\"\n    \n        # Rounding to upper integer\n \
    \       [ceil(x) for x in lst]\n        \n        # Sum of the squared elements\n\
    \        sum(x^2 for x in lst)\n    end\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6m06zqph.jl:32\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] sum_squares(lst::Vector{Float64})\n  \
    \   @ Main /tmp/tmp6m06zqph.jl:22\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp6m06zqph.jl:32 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp6m06zqph.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp6m06zqph.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(lst::Vector{Float64})\n     @ Main /tmp/tmp6m06zqph.jl:22\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp6m06zqph.jl:33 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp6m06zqph.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp6m06zqph.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] sum_squares(lst::Vector{Float64})\n  \
    \   @ Main /tmp/tmp6m06zqph.jl:22\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp6m06zqph.jl:36 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp6m06zqph.jl:28\ntest "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6m06zqph.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    new_lst = ceil.(lst)\n    return\
    \ sum(new_lst.^2)\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    res = 0\n    for i = 1:length(lst)\n\
    \        res += ceil(Int64, lst[i])^2\n    end\n    return res\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0,\
    \ 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    s = 0\n    for x in lst\n   \
    \     s += ceil(x)^2\n    end\n    return s\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    nums=[]\n    for x in lst\n \
    \       push!(nums,ceil(x))\n    end\n    square_sum=0\n    for x in nums\n  \
    \      square_sum += x^2\n    end\n    return square_sum\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0,\
    \ 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    # create new var sum_squares\
    \ \n    sum_squares = 0\n    # loop over lst \n    for i in lst\n        # square\
    \ every elemenet in lst first \n        i = i^2\n        # round each element\
    \ to the upper int (ceiling) \n        i = ceil(i)\n        # sum the squares\
    \ \n        sum_squares += i\n    end\n    # return sum_squares\n    return sum_squares\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpt36c84oc.jl:36\n  Expression: candidate([1.4,\
    \ 4.2, 0.0]) == 29\n   Evaluated: 20 == 29\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt36c84oc.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt36c84oc.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpt36c84oc.jl:37\n  Expression: candidate([-2.4, 1.0, 1.0])\
    \ == 6\n   Evaluated: 8 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt36c84oc.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt36c84oc.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpt36c84oc.jl:40\n  Expression: candidate([-1.4, 4.6, 6.3])\
    \ == 75\n   Evaluated: 64 == 75\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt36c84oc.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt36c84oc.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpt36c84oc.jl:41\n  Expression: candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086\n   Evaluated: 1078 == 1086\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt36c84oc.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt36c84oc.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt36c84oc.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    total::Int64 = 0\n    for n in\
    \ lst\n        n_squared = ceil(n)^2\n        total += n_squared\n    end\n  \
    \  return total\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    lst = ceil.(lst)\n    return\
    \ sum(lst.^2)\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    new_lst = Int64[]\n    for elem\
    \ in lst\n        push!(new_lst,ceil(elem))\n    end\n    return sum([x^2 for\
    \ x in new_lst])\nend\n    \nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    # your code here\n    for i in\
    \ 1:length(lst)\n        if lst[i] < 0\n            lst[i] = ceil(lst[i])\n  \
    \      else\n            lst[i] = floor(lst[i])\n        end\n    end\n    return\
    \ sum(map(x->x^2,lst))\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4jrd2bgl.jl:32\n  Expression: candidate([1.4,\
    \ 4.2, 0.0]) == 29\n   Evaluated: 17 == 29\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4jrd2bgl.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4jrd2bgl.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp4jrd2bgl.jl:36\n  Expression: candidate([-1.4, 4.6, 6.3])\
    \ == 75\n   Evaluated: 53 == 75\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4jrd2bgl.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4jrd2bgl.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp4jrd2bgl.jl:37\n  Expression: candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086\n   Evaluated: 975 == 1086\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4jrd2bgl.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4jrd2bgl.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     3     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4jrd2bgl.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    \n     #use the map function\
    \ to round each element in the list\n    upperlst = map(x->ceil(x),lst)\n    #squares\
    \ each element in the list\n    powerlst = map(x->x^2,upperlst)\n    #sum up all\
    \ the elements in the list\n    output = sum(powerlst)\n    return output\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += Int64(ceil(i)*ceil(i))\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0,\
    \ 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    # your code goes here\n    sum\
    \ = 0\n    for i in lst\n        sum += ceil(i)*ceil(i)\n    end\n    return sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzsw16xkd.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzsw16xkd.jl:1\n\
    in expression starting at /tmp/tmpzsw16xkd.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    temp = [ceil(i) for i in lst]\n\
    \    return sum([i^2 for i in temp])\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    #loop through the list and square\
    \ each element in the list,\n    # Then get the sum of the squared numbers in\
    \ the list\n    return sum( ceil.(lst).^2)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    i = length(lst)\n    s = 0\n\
    \    while i>0\n        s = s + Int64(ceil(lst[i]^2))\n        i = i-1\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsxcc6cav.jl:30\n  Expression: candidate([1.4,\
    \ 4.2, 0.0]) == 29\n   Evaluated: 20 == 29\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsxcc6cav.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsxcc6cav.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpsxcc6cav.jl:31\n  Expression: candidate([-2.4, 1.0, 1.0])\
    \ == 6\n   Evaluated: 8 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsxcc6cav.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsxcc6cav.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpsxcc6cav.jl:34\n  Expression: candidate([-1.4, 4.6, 6.3])\
    \ == 75\n   Evaluated: 64 == 75\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsxcc6cav.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsxcc6cav.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpsxcc6cav.jl:35\n  Expression: candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086\n   Evaluated: 1078 == 1086\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsxcc6cav.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsxcc6cav.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsxcc6cav.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(round.(Int64,lst).^2)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm6bqpmth.jl:24\n  Expression: candidate([1.4,\
    \ 4.2, 0.0]) == 29\n   Evaluated: 17 == 29\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm6bqpmth.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm6bqpmth.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpm6bqpmth.jl:28\n  Expression: candidate([-1.4, 4.6, 6.3])\
    \ == 75\n   Evaluated: 62 == 75\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm6bqpmth.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm6bqpmth.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm6bqpmth.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    lst = map(round, lst)\n    s\
    \ = 0\n    for num in lst\n        s += num^2\n    end\n    return s\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvcz59tgs.jl:29\n  Expression: candidate([1.4,\
    \ 4.2, 0.0]) == 29\n   Evaluated: 17 == 29\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvcz59tgs.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvcz59tgs.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpvcz59tgs.jl:33\n  Expression: candidate([-1.4, 4.6, 6.3])\
    \ == 75\n   Evaluated: 62 == 75\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvcz59tgs.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvcz59tgs.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvcz59tgs.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in 1:length(lst)\n\
    \        lst[i] = ceil(lst[i])\n        sum += lst[i]^2\n    end\n    return sum\n\
    end\n \nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n   #Your code here...\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpa6uf0v3e.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate([1.0, 2.0, 3.0]) == 14\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\\n  Closest\
    \ candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\\\
    n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\\\
    n    ...\\n  Stacktrace:\\n   [1] sum_squares(lst::Vector{Float64})\\n     @ Main\
    \ /tmp/tmpa6uf0v3e.jl:15\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpa6uf0v3e.jl:21 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpa6uf0v3e.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpa6uf0v3e.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate([1.0, 2.0, 3.0]) == 14\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\\n  Closest candidates are:\\n  \
    \  convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\\\
    n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\\\
    n    ...\\n  Stacktrace:\\n   [1] sum_squares(lst::Vector{Float64})\\n     @ Main\
    \ /tmp/tmpa6uf0v3e.jl:15\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpa6uf0v3e.jl:22 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum = sum + ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    lst = ceil.(lst)\n    sum = 0\n\
    \    for i in lst\n        sum += i*i\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0,\
    \ 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    \n    \n    \n    counter::Int64\
    \ = 0 \n    for i in 1:length(lst)\n        \n        lst[i] = ceil(lst[i])\n\
    \        lst[i] = lst[i] * lst[i]\n        counter += lst[i]\n        \n     \
    \   \n    end\n    \n    return counter\n    \nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    # Your code here\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpowyjfbyh.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate([1.0, 2.0, 3.0]) == 14\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\\n  Closest\
    \ candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\\\
    n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\\\
    n    ...\\n  Stacktrace:\\n   [1] sum_squares(lst::Vector{Float64})\\n     @ Main\
    \ /tmp/tmpowyjfbyh.jl:15\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpowyjfbyh.jl:21 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpowyjfbyh.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpowyjfbyh.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate([1.0, 2.0, 3.0]) == 14\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\\n  Closest candidates are:\\n  \
    \  convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\\\
    n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\\\
    n    ...\\n  Stacktrace:\\n   [1] sum_squares(lst::Vector{Float64})\\n     @ Main\
    \ /tmp/tmpowyjfbyh.jl:15\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpowyjfbyh.jl:22 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum([floor(i^2) for i\
    \ in lst])\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t\
    @test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) ==\
    \ 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb4b1fs_h.jl:24\n  Expression: candidate([1.4,\
    \ 4.2, 0.0]) == 29\n   Evaluated: 18 == 29\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb4b1fs_h.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb4b1fs_h.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpb4b1fs_h.jl:25\n  Expression: candidate([-2.4, 1.0, 1.0])\
    \ == 6\n   Evaluated: 7 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb4b1fs_h.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb4b1fs_h.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpb4b1fs_h.jl:28\n  Expression: candidate([-1.4, 4.6, 6.3])\
    \ == 75\n   Evaluated: 61 == 75\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb4b1fs_h.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb4b1fs_h.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpb4b1fs_h.jl:29\n  Expression: candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086\n   Evaluated: 1074 == 1086\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb4b1fs_h.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb4b1fs_h.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb4b1fs_h.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    lst_ceil = ceil.(lst)\n    sum\
    \ = 0\n    for i in lst_ceil\n        sum += i^2\n    end\n    return sum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    total = 0\n    for i = 1:length(lst)\n\
    \        if lst[i]<0\n            lst[i] = -lst[i]\n        end\n        total\
    \ = total + ceil(lst[i])^2\n    end\n    return total\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfdel862i.jl:32\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n   Evaluated: 11 == 6\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfdel862i.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfdel862i.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpfdel862i.jl:35\n  Expression: candidate([-1.4, 4.6, 6.3])\
    \ == 75\n   Evaluated: 78 == 75\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfdel862i.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfdel862i.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpfdel862i.jl:36\n  Expression: candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086\n   Evaluated: 1089 == 1086\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfdel862i.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfdel862i.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     3     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfdel862i.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n \n    new_list = []\n    for i in\
    \ lst\n        new_list = push!(new_list, ceil(i)^2)\n    end\n   sum(new_list)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    for i in lst\n        ceil(i)\n\
    \    end\n    sum(lst.^2)\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3gsqf0ce.jl:27\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] sum_squares(lst::Vector{Float64})\n  \
    \   @ Main /tmp/tmp3gsqf0ce.jl:17\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp3gsqf0ce.jl:27 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp3gsqf0ce.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp3gsqf0ce.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(lst::Vector{Float64})\n     @ Main /tmp/tmp3gsqf0ce.jl:17\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp3gsqf0ce.jl:28 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp3gsqf0ce.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp3gsqf0ce.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] sum_squares(lst::Vector{Float64})\n  \
    \   @ Main /tmp/tmp3gsqf0ce.jl:17\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp3gsqf0ce.jl:31 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp3gsqf0ce.jl:23\ntest "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3gsqf0ce.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += Int64(ceil(i))*Int64(ceil(i))\n    end\n    return sum\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum([ceil(x)^2 for x in\
    \ lst])\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    # lst is a list of numbers\n\
    \    # you can round each element in the list by calling ```int(round(x))```\n\
    \    # Note you do not need to call `round` if the list is integers.\n    # iterate\
    \ over each element in the list, then square it and sum it up\n    # do not use\
    \ `sum` function, you need to implement it on your own\n    result = 0\n    for\
    \ x in lst\n        #YOUR CODE HERE\n        result += round(x)*round(x)\n   \
    \ end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdpnm8fel.jl:34\n  Expression: candidate([1.4,\
    \ 4.2, 0.0]) == 29\n   Evaluated: 17 == 29\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdpnm8fel.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdpnm8fel.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpdpnm8fel.jl:38\n  Expression: candidate([-1.4, 4.6, 6.3])\
    \ == 75\n   Evaluated: 62 == 75\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdpnm8fel.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdpnm8fel.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdpnm8fel.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    s = 0\n    for i in lst\n   \
    \     s += ceil(i)^2\n    end\n    return s\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    lst = ceil.(lst)\n    sum_of_squares\
    \ = 0\n    for i = 1:length(lst)\n        sum_of_squares += lst[i]^2\n    end\n\
    \    return sum_of_squares\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    nums = ceil.(lst)\n    return\
    \ sum(nums.^2)\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i) * ceil(i)\n    end\n    return sum\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0,\
    \ 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    \ \nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    t = Int64[]\n    for x in lst\n\
    \        if x % 1 == 0.0\n            push!(t,x)\n        else\n            x\
    \ = ceil(x)\n            push!(t,x)\n        end\n    end\n    return sum(t.^2)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    x = 0\n    for i in lst\n   \
    \     x += ceil(i)^2\n    end\n    return x\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return Int64(sum(lst.^2))\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpn9rmhfs4.jl:24\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] sum_squares(lst::Vector{Float64})\n\
    \     @ Main /tmp/tmpn9rmhfs4.jl:14\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpn9rmhfs4.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpn9rmhfs4.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpn9rmhfs4.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] sum_squares(lst::Vector{Float64})\n\
    \     @ Main /tmp/tmpn9rmhfs4.jl:14\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpn9rmhfs4.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpn9rmhfs4.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpn9rmhfs4.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] sum_squares(lst::Vector{Float64})\n\
    \     @ Main /tmp/tmpn9rmhfs4.jl:14\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpn9rmhfs4.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpn9rmhfs4.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpn9rmhfs4.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([-1.4, 17.9, 18.9, 19.9]) == 1086\n  Inexac"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn9rmhfs4.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum([ceil(x)^2 for x in\
    \ lst])\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return 0 \nend\n# test code \n\
    # make sure to update this next cell!\nlst = [1,2,3]\nprintln(\"sum of sqrs =\
    \ \", sum_squares(lst))\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: None
  stderr: "b'ERROR: LoadError: MethodError: no method matching sum_squares(::Vector{Int64})\\\
    nClosest candidates are:\\n  sum_squares(!Matched::Vector{Float64}) at /tmp/tmpp9eh_1qh.jl:13\\\
    nStacktrace:\\n [1] top-level scope\\n   @ /tmp/'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    lst = ceil.(lst)\n    sum_squares\
    \ = 0\n    for i in lst\n        sum_squares += i*i\n    end\n    return sum_squares\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return Int64(sum(ceil.(lst).^2))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    c = map(x->ceil(x),lst)\n   \
    \ s = map(x->x^2,c)\n    return reduce(+,s)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    s = 0\n    for x in lst\n   \
    \     s += round(Int64,x)^2\n    end\n    return s\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9k0z4wtw.jl:28\n  Expression: candidate([1.4,\
    \ 4.2, 0.0]) == 29\n   Evaluated: 17 == 29\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9k0z4wtw.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9k0z4wtw.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp9k0z4wtw.jl:32\n  Expression: candidate([-1.4, 4.6, 6.3])\
    \ == 75\n   Evaluated: 62 == 75\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9k0z4wtw.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9k0z4wtw.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9k0z4wtw.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    b=ceil.(lst)\n    c=b.^2\n  \
    \  d=sum(c)\n    return d\nend\n \nusing Test\n\n@testset begin\n\ncandidate =\
    \ sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    temp = ceil.(lst).^2\n    return\
    \ sum(temp)\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t\
    @test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) ==\
    \ 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    newsum = 0\n    for i in 1:length(lst)\n\
    \        newsum += ceil(lst[i])^2\n    end\n    return newsum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0,\
    \ 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n  #Ceiling() \n  #return the sum\
    \ of squared numbers in the given list,\n  #round each element in the list to\
    \ the upper int(Ceiling) first.\n  sum = 0\n  for i in lst\n    sum = sum + Ceil(i)^2\n\
    \  end\n  return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwvb74ut5.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0, 3.0]) == 14\n  UndefVarError: Ceil not defined\n\
    \  Stacktrace:\n   [1] sum_squares(lst::Vector{Float64})\n     @ Main /tmp/tmpwvb74ut5.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvb74ut5.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvb74ut5.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpwvb74ut5.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0]) == 14\n  UndefVarError: Ceil not defined\n  Stacktrace:\n\
    \   [1] sum_squares(lst::Vector{Float64})\n     @ Main /tmp/tmpwvb74ut5.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvb74ut5.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvb74ut5.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpwvb74ut5.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 3.0, 5.0, 7.0]) == 84\n  UndefVarError: Ceil not defined\n \
    \ Stacktrace:\n   [1] sum_squares(lst::Vector{Float64})\n     @ Main /tmp/tmpwvb74ut5.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvb74ut5.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvb74ut5.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpwvb74ut5.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1.4, 4.2, 0.0]) == 29\n  UndefVarError: Ceil not defined\n  Stacktrace:\n\
    \   [1] sum_squares(lst::Vector{Float64})\n     @ Main /tmp/tmpwvb74ut5.jl:19\n\
    \   [2] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwvb74ut5.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    ceil(x) = ceil(Int64, x)\n  \
    \  total = 0\n    for i = 1:length(lst)\n        total += ceil(lst[i])^2\n   \
    \ end\n    return total\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmps6epa4_v.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate([1.0, 2.0, 3.0]) == 14\\n  MethodError:\
    \ no method matching (::var\"#ceil#1\")(::Type{Int64}, ::Float64)\\n  Closest\
    \ candidates are:\\n    (::var\"#ceil#1\")(::Any) at /tmp/tmps6epa4_v.jl:14\\\
    n  Stacktrace:\\n   [1] (::var\"#ceil#1\")(x::Float64)\\n     @ Main /tmp/tmps6epa4_v.jl:14\\\
    n   [2] sum_squares(lst::Vector{Float64})\\n     @ Main /tmp/tmps6epa4_v.jl:17\\\
    n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmps6epa4_v.jl:26 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmps6epa4_v.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmps6epa4_v.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate([1.0, 2.0, 3.0]) == 14\\n  MethodError: no method matching (::var\"\
    #ceil#1\")(::Type{Int64}, ::Float64)\\n  Closest candidates are:\\n    (::var\"\
    #ceil#1\")(::Any) at /tmp/tmps6epa4_v.jl:14\\n  Stacktrace:\\n   [1] (::var\"\
    #ceil#1\")(x::Float64)\\n     @ Main /tmp/tmps6epa4_v.jl:14\\n   [2] sum_squares(lst::Vector{Float64})\\\
    n     @ Main /tmp/tmps6epa4_v.jl:17\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmps6epa4_v.jl:27 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmps6epa4_v.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmps6epa4_v.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate([1.0, 3.0, 5.0, 7.0]) == 84\\n  MethodError: no method matching (::var\"\
    #ceil#1\")(::Type{Int64}, ::Float64)\\n  Closest candidates are:\\n    (::var\"\
    #ceil#1\")(::Any) at /tmp/tmps6epa4_v.jl:14\\n  Stacktrace:\\n   [1] (::var\"\
    #ceil#1\")(x::Float64)\\n     @ Main /tmp/tmps6epa4_v.jl:14\\n   [2] sum_squares(lst::Vector{Float64})\\\
    n     @ Main /tmp"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in 1:length(lst)\n\
    \        sum += ceil(lst[i])^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(round.(Int64,x)^2\
    \ for x in lst)\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdepl56v1.jl:24\n  Expression: candidate([1.4,\
    \ 4.2, 0.0]) == 29\n   Evaluated: 17 == 29\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdepl56v1.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdepl56v1.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpdepl56v1.jl:28\n  Expression: candidate([-1.4, 4.6, 6.3])\
    \ == 75\n   Evaluated: 62 == 75\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdepl56v1.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdepl56v1.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdepl56v1.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    #lst_new=lst-1;\n    ceil(a::Float64)\
    \ = Int64(ceil(a))\n    #lst_new=map(ceil,lst)\n    #vcat(lst_new,lst)\n    lst_new=apply(ceil,lst)\n\
    \    return sum(lst_new.*lst_new)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpup5gprep.jl:26\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0, 3.0]) == 14\n  UndefVarError: apply not defined\n\
    \  Stacktrace:\n   [1] sum_squares(lst::Vector{Float64})\n     @ Main /tmp/tmpup5gprep.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpup5gprep.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpup5gprep.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpup5gprep.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0]) == 14\n  UndefVarError: apply not defined\n  Stacktrace:\n\
    \   [1] sum_squares(lst::Vector{Float64})\n     @ Main /tmp/tmpup5gprep.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpup5gprep.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpup5gprep.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpup5gprep.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 3.0, 5.0, 7.0]) == 84\n  UndefVarError: apply not defined\n\
    \  Stacktrace:\n   [1] sum_squares(lst::Vector{Float64})\n     @ Main /tmp/tmpup5gprep.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpup5gprep.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpup5gprep.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpup5gprep.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([1.4, 4.2, 0.0]) == 29\n  UndefVarError: apply not defined\n  Stacktrace:\n\
    \   [1] sum_squares(lst::Vector{Float64})\n     @ Main /tmp/tmpup5gprep.jl:18\n\
    \   [2] macro expan"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpup5gprep.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(map(x->ceil(x)^2,\
    \ lst))\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    s=0\n    for i in lst\n     \
    \   x=ceil(i)\n        s=s+x^2\n    end\n    return s\n    \n    \nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    lst = [1,2,3]\nsum_squares(lst)\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: None
  stderr: "b'ERROR: LoadError: MethodError: no method matching sum_squares(::Vector{Int64})'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    # sum of squared numbers\n  \
    \  num = 0\n    for i in lst\n        num += ceil(i)^2\n    end\n    return num\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += Int64(ceil(i))^2\n    end\n    return sum\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0,\
    \ 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    total = 0\n    for i = 1:length(lst)\n\
    \        lst[i] = ceil(lst[i])\n        lst[i] = lst[i]^2\n        total += lst[i]\n\
    \    end\n    return total\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    #Your code here\n    lst1 = []\n\
    \    for i in lst\n        x =ceil(i)\n        push!(lst1,x)\n    end\n    squared_list\
    \ = []\n    for j in lst1\n        y = j^2\n        push!(squared_list,y)\n  \
    \  end\n    z = sum(squared_list)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    # your code goes here\n    return\
    \ 0\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp96mhk6qd.jl:22\n  Expression: candidate([1.0,\
    \ 2.0, 3.0]) == 14\n   Evaluated: 0 == 14\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp96mhk6qd.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp96mhk6qd.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp96mhk6qd.jl:23\n  Expression: candidate([1.0, 2.0, 3.0]) ==\
    \ 14\n   Evaluated: 0 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp96mhk6qd.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp96mhk6qd.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp96mhk6qd.jl:24\n  Expression: candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84\n   Evaluated: 0 == 84\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp96mhk6qd.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp96mhk6qd.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp96mhk6qd.jl:25\n  Expression: candidate([1.4, 4.2, 0.0]) ==\
    \ 29\n   Evaluated: 0 == 29\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp96mhk6qd.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp96mhk6qd.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp96mhk6qd.jl:26\n  Expression: candidate([-2.4, 1.0, 1.0])\
    \ == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 11 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp96mhk6qd.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(x)^2 for x in\
    \ lst)\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    u_lst = ceil.(lst)\n    return\
    \ round(sum(u_lst.^2))\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    total = 0\n    for i in 1:length(lst)\n\
    \        total += ceil(lst[i])*ceil(lst[i])\n    end\n    return total\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(Int.(ceil.(lst)).^2)\n\
    end\n \nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum=0\n    for i in lst\n   \
    \     sum=sum+ceil(i)*ceil(i)\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    # your code here\n    lst = ceil.(lst)\n\
    \    return sum(abs2, lst)\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(lst .^ 2) \nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpsxco3qmm.jl:24\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] sum_squares(lst::Vector{Float64})\n  \
    \   @ Main /tmp/tmpsxco3qmm.jl:14\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpsxco3qmm.jl:24 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpsxco3qmm.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpsxco3qmm.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(lst::Vector{Float64})\n     @ Main /tmp/tmpsxco3qmm.jl:14\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpsxco3qmm.jl:25 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpsxco3qmm.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpsxco3qmm.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] sum_squares(lst::Vector{Float64})\n  \
    \   @ Main /tmp/tmpsxco3qmm.jl:14\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpsxco3qmm.jl:28 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpsxco3qmm.jl:20\ntest "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsxco3qmm.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    # your code here\n    y = 0\n\
    \    for i in 1:length(lst)\n        y = y + round(Int64, ceil(lst[i])) ^ 2\n\
    \    end\n    return y\nend\n \n@assert sum_squares([1,2,3]) == 14\n@assert sum_squares([1,4,9])\
    \ == 98\n@assert sum_squares([1,3,5,7]) == 84\n@assert sum_squares([1.4,4.2,0])\
    \ == 29\n@assert sum_squares([-2.4,1,1]) == 6\n \n \n \nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: None
  stderr: "b'ERROR: LoadError: MethodError: no method matching sum_squares(::Vector{Int64})\\\
    nClosest candidates are:\\n  sum_squares(!Matched::Vector{Float64}) at /tmp/tmphy52snog.jl:13\\\
    nStacktrace:\\n [1] top-level scope\\n   @ /tmp/tmphy52snog.jl:22\\nin expression\
    \ starting at /tmp/tmphy52snog.jl:22\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    s = 0\n    for i in 1:length(lst)\n\
    \        s += round(Int64,ceil(lst[i]^2))\n    end\n    return s\nend\nsum_squares([1,2,3])\n\
    sum_squares([1,4,9])\nsum_squares([1,3,5,7])\nsum_squares([1.4,4.2,0])\nsum_squares([-2.4,1,1])\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: MethodError: no method matching sum_squares(::Vector{Int64})\n\
    Closest candidates are:\n  sum_squares(!Matched::Vector{Float64}) at /tmp/tmp3b201a1_.jl:13\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp3b201a1_.jl:20\nin expression\
    \ starting at /tmp/tmp3b201a1_.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum([ceil(x)^2 for x in\
    \ lst])\nend \n@testset \"Testing the square\" begin\n    @test sum_squares([1,2,3])\
    \ == 14\n    @test sum_squares([1,4,9]) == 98\n    @test sum_squares([1,3,5,7])\
    \ == 84\n    @test sum_squares([1.4,4.2,0]) == 29\n    @test sum_squares([-2.4,1,1])\
    \ == 6\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @testset not defined\nin expression starting\
    \ at /tmp/tmp_h_ua12y.jl:16\nin expression starting at /tmp/tmp_h_ua12y.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    n=length(lst)\n    sum=0\n  \
    \  for i in 1:n\n        sum+=(ceil(lst[i]))^2\n    end\n    return sum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    \n    sum_sqr = 0 \n    #println(lst)\n\
    \    for j in 1:length(lst)\n        sum_sqr += ceil(Int64,lst[j])^2\n    end\n\
    \    \n    return sum_sqr\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    new_lst = [ceil(lst[i]) for i\
    \ in 1:length(lst)]\n    return sum(x->x^2, new_lst)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n   lst .= ceil.(lst)\n    return\
    \ sum(x->x^2, lst)\nend\n\"\"\"You are given a list of numbers.\n    You need\
    \ to return the sum of squared numbers in the given list,\n    round each element\
    \ in the list to the lower int(Floor) first.\n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 13\n    For lst = [1,4,9] the output should be 80\n   \
    \ For lst = [1,3,5,7] the output should be 63\n    For lst = [1.4,4.2,0] the output\
    \ should be 16\n    For lst = [-2.4,1,1] the output should be 3\n    \nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0,\
    \ 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbi_tk_83.jl:17\nin expression starting at\
    \ /tmp/tmpbi_tk_83.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst) .^ 2)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    \n    result = 0\n    for i in\
    \ 1:length(lst)\n        \n        result += round(Int64,lst[i])^2\n        \n\
    \    end\n    \n    return result\nend\n    \n    \n    \n        \n        \n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvejhkq9l.jl:37\n  Expression: candidate([1.4,\
    \ 4.2, 0.0]) == 29\n   Evaluated: 17 == 29\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvejhkq9l.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvejhkq9l.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpvejhkq9l.jl:41\n  Expression: candidate([-1.4, 4.6, 6.3])\
    \ == 75\n   Evaluated: 62 == 75\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvejhkq9l.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvejhkq9l.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvejhkq9l.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum=0\n    for x in lst\n   \
    \     x=ceil(x)\n        sum += x*x\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0,\
    \ 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i = 1:length(lst)\n\
    \        sum += Int64(ceil(lst[i]^2))\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0,\
    \ 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp67j6nx8t.jl:28\n  Expression: candidate([1.4,\
    \ 4.2, 0.0]) == 29\n   Evaluated: 20 == 29\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp67j6nx8t.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp67j6nx8t.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp67j6nx8t.jl:29\n  Expression: candidate([-2.4, 1.0, 1.0])\
    \ == 6\n   Evaluated: 8 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp67j6nx8t.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp67j6nx8t.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp67j6nx8t.jl:32\n  Expression: candidate([-1.4, 4.6, 6.3])\
    \ == 75\n   Evaluated: 64 == 75\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp67j6nx8t.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp67j6nx8t.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp67j6nx8t.jl:33\n  Expression: candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086\n   Evaluated: 1078 == 1086\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp67j6nx8t.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp67j6nx8t.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp67j6nx8t.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    temp = map(x-> ceil(x)^2, lst)\n\
    \    return sum(temp)\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    final_sum = 0\n    for elem in\
    \ lst\n        final_sum += round(elem)^2\n    end\n    return final_sum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwynjx4l_.jl:28\n  Expression: candidate([1.4,\
    \ 4.2, 0.0]) == 29\n   Evaluated: 17 == 29\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwynjx4l_.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwynjx4l_.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpwynjx4l_.jl:32\n  Expression: candidate([-1.4, 4.6, 6.3])\
    \ == 75\n   Evaluated: 62 == 75\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwynjx4l_.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwynjx4l_.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwynjx4l_.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    suma = 0\n    for i in lst\n\
    \        suma += ceil(i)*ceil(i)\n    end\n    return suma\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0,\
    \ 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum([ceil(x)^2 for x in lst])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    s=0\n    for i in lst\n     \
    \   s+=ceil(i)^2\n    end\n    return s\nend\nusing Test\n\n@testset begin\n\n\
    candidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    # initialize sum to 0\n    sum_of_squares\
    \ = 0\n    # iterate through all the elements in the list\n    for element in\
    \ lst\n        # update the sum with the squared value of the elements in the\
    \ list\n        sum_of_squares += ceil(element) ^ 2\n    end\n    # return the\
    \ sum of squares\n    return sum_of_squares\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    # In Julia if you need to use\
    \ length you can use the \"length\" function\n    # In Julia you do not need to\
    \ specify a return type\n    # In Julia functions are written as function function_name(arguments)::return_type\n\
    \    sum = 0\n    for i in lst\n        sum += ceil(i)^2\n    end\n    return\
    \ sum\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(map(ceil, lst).^2)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    for i in eachindex(lst)\n   \
    \     lst[i] = ceil(lst[i])\n    end\n    return sum(lst.^2)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0,\
    \ 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    n::Int64 = Int64(0)\n    for\
    \ i in lst\n        n += ceil(i)^2\n    end\n    return n\nend\n\"\"\"Return the\
    \ distance from the point (x1,y1) to the origin.\n    Example:\n    For (x1,y1)\
    \ = (-2,2) the output should be 4\n    For (x1,y1) = (1,-1) the output should\
    \ be 2\n    For (x1,y1) = (2,-2) the output should be 4.47213595499958\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc0in75_c.jl:20\nin expression starting at\
    \ /tmp/tmpc0in75_c.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    x = 0\n    for i in 1:length(lst)\n\
    \        x = x + ceil(lst[i])^2\n    end\n    return x\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    lst = map(round, lst)\n    return\
    \ sum(lst.^2)\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5m29y3iw.jl:25\n  Expression: candidate([1.4,\
    \ 4.2, 0.0]) == 29\n   Evaluated: 17 == 29\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5m29y3iw.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5m29y3iw.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp5m29y3iw.jl:29\n  Expression: candidate([-1.4, 4.6, 6.3])\
    \ == 75\n   Evaluated: 62 == 75\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5m29y3iw.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5m29y3iw.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5m29y3iw.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n  tot = 0 \n  for i in lst \n   \
    \ tot += round(i)^2\n  end\n  return tot\nend\nusing Test\n\n@testset begin\n\n\
    candidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5dx9ca5v.jl:28\n  Expression: candidate([1.4,\
    \ 4.2, 0.0]) == 29\n   Evaluated: 17 == 29\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5dx9ca5v.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5dx9ca5v.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp5dx9ca5v.jl:32\n  Expression: candidate([-1.4, 4.6, 6.3])\
    \ == 75\n   Evaluated: 62 == 75\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5dx9ca5v.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5dx9ca5v.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5dx9ca5v.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in 1:length(lst)\n\
    \        sum += ceil(lst[i])^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    \"\"\"\n    Arguments:\n    \
    \    lst (vector of float): this argument contains values that are going to be\
    \ \n            squared, rounded to the upper integer, and summed.\n    Returns:\n\
    \        Int64: sum of the squared values.\n    \"\"\"\n    lst = ceil.(lst) #\
    \ turns all floats into Int64, rounds to the upper int\n    squared = map(lst)\
    \ do x\n        x^2\n    end\n    return sum(squared)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    \n    s = map(round, lst)\n \
    \   return sum(s.^2)\n    \n    \n    \nend\nusing Test\n\n@testset begin\n\n\
    candidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsf500g22.jl:29\n  Expression: candidate([1.4,\
    \ 4.2, 0.0]) == 29\n   Evaluated: 17 == 29\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsf500g22.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsf500g22.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpsf500g22.jl:33\n  Expression: candidate([-1.4, 4.6, 6.3])\
    \ == 75\n   Evaluated: 62 == 75\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsf500g22.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsf500g22.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsf500g22.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    total = 0 \n    for x in lst\
    \ \n        total += ceil(x)^2\n    end\n    return total\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0,\
    \ 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(x).^2 for x\
    \ in lst)\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += round(Int64,i^2)\n    end\n    return sum\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0,\
    \ 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphrafkvgg.jl:28\n  Expression: candidate([1.4,\
    \ 4.2, 0.0]) == 29\n   Evaluated: 20 == 29\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphrafkvgg.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphrafkvgg.jl:24\ntest set: Test\
    \ Failed at /tmp/tmphrafkvgg.jl:29\n  Expression: candidate([-2.4, 1.0, 1.0])\
    \ == 6\n   Evaluated: 8 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphrafkvgg.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphrafkvgg.jl:24\ntest set: Test\
    \ Failed at /tmp/tmphrafkvgg.jl:32\n  Expression: candidate([-1.4, 4.6, 6.3])\
    \ == 75\n   Evaluated: 63 == 75\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphrafkvgg.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphrafkvgg.jl:24\ntest set: Test\
    \ Failed at /tmp/tmphrafkvgg.jl:33\n  Expression: candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086\n   Evaluated: 1075 == 1086\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphrafkvgg.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphrafkvgg.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphrafkvgg.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    answer = 0\n    for i in lst\n\
    \        answer += ceil(i)^2\n    end\n    return answer\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0,\
    \ 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n   lst = map(Float64 -> ceil(Float64),\
    \ lst)\n   return sum(map(x -> x*x, lst))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return  ceil.(lst) |> sumsqr\
    \ \nend\nprintln(sum_squares([1,2,3]))\nprintln(sum_squares([1,4,9]))\nprintln(sum_squares([1,3,5,7]))\n\
    println(sum_squares([1.4,4.2,0]))\nprintln(sum_squares([-2.4,1,1]))\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0,\
    \ 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: MethodError: no method matching sum_squares(::Vector{Int64})\n\
    Closest candidates are:\n  sum_squares(!Matched::Vector{Float64}) at /tmp/tmpi8j_w5og.jl:13\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpi8j_w5og.jl:16\nin expression\
    \ starting at /tmp/tmpi8j_w5og.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    _sum = 0\n    for i in lst\n\
    \        _sum += round(Int64,ceil(i))^2\n    end\n    return _sum\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for val in lst\n\
    \        rounded_val = ceil(val)\n        sum += Int64(rounded_val^2)\n    end\n\
    \    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    # Initialize sum \n    sum =\
    \ 0\n    for i in lst \n        sum += ceil(Int64,i^2)\n    end\n    return sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp17826hbx.jl:29\n  Expression: candidate([1.4,\
    \ 4.2, 0.0]) == 29\n   Evaluated: 20 == 29\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp17826hbx.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp17826hbx.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp17826hbx.jl:30\n  Expression: candidate([-2.4, 1.0, 1.0])\
    \ == 6\n   Evaluated: 8 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp17826hbx.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp17826hbx.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp17826hbx.jl:33\n  Expression: candidate([-1.4, 4.6, 6.3])\
    \ == 75\n   Evaluated: 64 == 75\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp17826hbx.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp17826hbx.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp17826hbx.jl:34\n  Expression: candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086\n   Evaluated: 1078 == 1086\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp17826hbx.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp17826hbx.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp17826hbx.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    lst = ceil.(lst)\n    sum = 0\n\
    \    for i in lst\n        sum = sum + i^2\n    end\n    return sum\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum = sum + ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    total::Int64 = 0\n    for x::Float64\
    \ in lst\n        total += ceil(x)^2\n    end\n    return total\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0,\
    \ 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    x = 0\n    for i in lst\n   \
    \     x += ceil(i)^2\n    end\n    return x\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    # Add your code here\n    suma=0\n\
    \    for i in lst\n        suma=suma+ceil(i)^2\n    end\n    return suma\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    temp = ceil.(lst).^2\n    temp\
    \ = sum(temp)\n    return Int64(temp)\nend\nprintln(sum_squares([1,2,3]))\nprintln(sum_squares([1,4,9]))\n\
    println(sum_squares([1,3,5,7]))\nprintln(sum_squares([1.4,4.2,0]))\nprintln(sum_squares([-2.4,1,1]))\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: MethodError: no method matching sum_squares(::Vector{Int64})\n\
    Closest candidates are:\n  sum_squares(!Matched::Vector{Float64}) at /tmp/tmpl7hvzeuo.jl:13\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpl7hvzeuo.jl:18\nin expression\
    \ starting at /tmp/tmpl7hvzeuo.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(round.(Int64,lst).^2)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptw7_wbd9.jl:24\n  Expression: candidate([1.4,\
    \ 4.2, 0.0]) == 29\n   Evaluated: 17 == 29\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptw7_wbd9.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptw7_wbd9.jl:20\ntest set: Test\
    \ Failed at /tmp/tmptw7_wbd9.jl:28\n  Expression: candidate([-1.4, 4.6, 6.3])\
    \ == 75\n   Evaluated: 62 == 75\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptw7_wbd9.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptw7_wbd9.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptw7_wbd9.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    \"\"\" (flt)->int\n    Returns\
    \ the sum of the squares of the numbers in the given list\n    Input: lst- a list\
    \ of floats\n    Output: the sum of the squares of the numbers in the given list\n\
    \    \"\"\"\n    sum = 0 #int variable to store the sum\n    for i in lst\n  \
    \      sum += round(Int64, i^2)\n    end\n    return sum\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0,\
    \ 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpf3qas0wp.jl:33\n  Expression: candidate([1.4,\
    \ 4.2, 0.0]) == 29\n   Evaluated: 20 == 29\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf3qas0wp.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf3qas0wp.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpf3qas0wp.jl:34\n  Expression: candidate([-2.4, 1.0, 1.0])\
    \ == 6\n   Evaluated: 8 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf3qas0wp.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf3qas0wp.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpf3qas0wp.jl:37\n  Expression: candidate([-1.4, 4.6, 6.3])\
    \ == 75\n   Evaluated: 63 == 75\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf3qas0wp.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf3qas0wp.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpf3qas0wp.jl:38\n  Expression: candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086\n   Evaluated: 1075 == 1086\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf3qas0wp.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf3qas0wp.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf3qas0wp.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    # Write your code below\n   \
    \ a=[]\n    for i in lst\n        push!(a,ceil(i))\n    end\n    return sum(map(x->x^2,a))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    # convert to positive values\n\
    \    positive_lst = [ceil(x) for x in lst]\n    # return sum of square of elements\n\
    \    return sum([x^2 for x in positive_lst])\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(map(x->round(Int64,\
    \ ceil(x)), map(x->x^2, lst)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp84q3agcs.jl:24\n  Expression: candidate([1.4,\
    \ 4.2, 0.0]) == 29\n   Evaluated: 20 == 29\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp84q3agcs.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp84q3agcs.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp84q3agcs.jl:25\n  Expression: candidate([-2.4, 1.0, 1.0])\
    \ == 6\n   Evaluated: 8 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp84q3agcs.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp84q3agcs.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp84q3agcs.jl:28\n  Expression: candidate([-1.4, 4.6, 6.3])\
    \ == 75\n   Evaluated: 64 == 75\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp84q3agcs.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp84q3agcs.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp84q3agcs.jl:29\n  Expression: candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086\n   Evaluated: 1078 == 1086\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp84q3agcs.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp84q3agcs.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp84q3agcs.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += Int64(ceil(i)^2)\n    end\n    return sum\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0,\
    \ 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    lst = ceil.(lst)\n    return\
    \ sum(lst .^ 2)\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0 \n    for i in lst \n\
    \        sum += round(i)*round(i)\n    end\n    return sum\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0,\
    \ 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxtjv6lan.jl:28\n  Expression: candidate([1.4,\
    \ 4.2, 0.0]) == 29\n   Evaluated: 17 == 29\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxtjv6lan.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxtjv6lan.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpxtjv6lan.jl:32\n  Expression: candidate([-1.4, 4.6, 6.3])\
    \ == 75\n   Evaluated: 62 == 75\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxtjv6lan.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxtjv6lan.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxtjv6lan.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    n = length(lst)\n    ans = 0\n\
    \    for i in 1:n\n        ans += trunc(Int64,ceil(lst[i]))^2\n    end\n    return\
    \ ans\nend\nprintln(sum_squares([1,2,3]))\nprintln(sum_squares([1,4,9]))\nprintln(sum_squares([1,3,5,7]))\n\
    println(sum_squares([1.4,4.2,0]))\nprintln(sum_squares([-2.4,1,1]))\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0,\
    \ 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: None
  stderr: "b'ERROR: LoadError: MethodError: no method matching sum_squares(::Vector{Int64})\\\
    nClosest candidates are:\\n  sum_squares(!Matched::Vector{Float64}) at /tmp/tmpb9r1nhd0.jl:13\\\
    nStacktrace:\\n [1] top-level scope\\n   @ /tmp/tmpb9r1nhd0.jl:21\\nin expression\
    \ starting at /tmp/tmpb9r1nhd0.jl:21\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       if i < 0\n            sum += ceil(i)^2\n        else\n            sum\
    \ += floor(i)^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsvvp87ie.jl:32\n  Expression: candidate([1.4,\
    \ 4.2, 0.0]) == 29\n   Evaluated: 17 == 29\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsvvp87ie.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsvvp87ie.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpsvvp87ie.jl:36\n  Expression: candidate([-1.4, 4.6, 6.3])\
    \ == 75\n   Evaluated: 53 == 75\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsvvp87ie.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsvvp87ie.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpsvvp87ie.jl:37\n  Expression: candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086\n   Evaluated: 975 == 1086\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsvvp87ie.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsvvp87ie.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     3     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsvvp87ie.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    \n    # get the squared of each\
    \ element and round them to upper int\n    squared = round.(Int64, lst.^2)\n \
    \   \n    # sum up all the elements \n    return sum(squared)\n    \nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0uz0rgju.jl:30\n  Expression: candidate([1.4,\
    \ 4.2, 0.0]) == 29\n   Evaluated: 20 == 29\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0uz0rgju.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0uz0rgju.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp0uz0rgju.jl:31\n  Expression: candidate([-2.4, 1.0, 1.0])\
    \ == 6\n   Evaluated: 8 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0uz0rgju.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0uz0rgju.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp0uz0rgju.jl:34\n  Expression: candidate([-1.4, 4.6, 6.3])\
    \ == 75\n   Evaluated: 63 == 75\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0uz0rgju.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0uz0rgju.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp0uz0rgju.jl:35\n  Expression: candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086\n   Evaluated: 1075 == 1086\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0uz0rgju.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0uz0rgju.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0uz0rgju.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    int_lst = map(x->ceil(x), lst)\n\
    \    return sum(x->x^2, int_lst)\n    \nend\nlst = [1,2,3]\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    newsum = 0\n    for (index, element)\
    \ in enumerate(lst)\n        # println(index)\n        if element >= 0\n     \
    \       # println(element)\n            # println(ceil(element))\n           \
    \ lst[index] = ceil(element)\n            newsum += lst[index] * lst[index]\n\
    \        else\n            lst[index] = floor(element)\n            newsum +=\
    \ lst[index] * lst[index]\n        end\n    end\n    return newsum\nend\n# println(sum_squares([1,4,9]))\n\
    # println(sum_squares([1,3,5,7]))\n# println(sum_squares([1.4,4.2,0]))\n# println(sum_squares([-2.4,1,1]))\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2lvl8u25.jl:42\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n   Evaluated: 11 == 6\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2lvl8u25.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2lvl8u25.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp2lvl8u25.jl:45\n  Expression: candidate([-1.4, 4.6, 6.3])\
    \ == 75\n   Evaluated: 78 == 75\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2lvl8u25.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2lvl8u25.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp2lvl8u25.jl:46\n  Expression: candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086\n   Evaluated: 1089 == 1086\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2lvl8u25.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2lvl8u25.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     3     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2lvl8u25.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    s = 0\n    for i in 1:length(lst)\n\
    \        s += (ceil(lst[i]))^2\n    end\n    return s\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for item in lst\n\
    \        sum += item^2\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmprxoaa_w7.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] sum_squares(lst::Vector{Float64})\n  \
    \   @ Main /tmp/tmprxoaa_w7.jl:18\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmprxoaa_w7.jl:28 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmprxoaa_w7.jl:24\ntest set:\
    \ Error During Test at /tmp/tmprxoaa_w7.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(lst::Vector{Float64})\n     @ Main /tmp/tmprxoaa_w7.jl:18\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmprxoaa_w7.jl:29 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmprxoaa_w7.jl:24\ntest set:\
    \ Error During Test at /tmp/tmprxoaa_w7.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] sum_squares(lst::Vector{Float64})\n  \
    \   @ Main /tmp/tmprxoaa_w7.jl:18\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmprxoaa_w7.jl:32 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmprxoaa_w7.jl:24\ntest "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprxoaa_w7.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    @assert lst != nothing\n    return\
    \ sum(round.(Int64,lst) .^ 2)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbp7so_tl.jl:25\n  Expression: candidate([1.4,\
    \ 4.2, 0.0]) == 29\n   Evaluated: 17 == 29\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbp7so_tl.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbp7so_tl.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpbp7so_tl.jl:29\n  Expression: candidate([-1.4, 4.6, 6.3])\
    \ == 75\n   Evaluated: 62 == 75\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbp7so_tl.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbp7so_tl.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbp7so_tl.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    # Put your code here\n    int(ceil(x)\
    \ for x in lst)\n    for x in lst\n        x^2\n        sum(x)\nend\n \nif __name__\
    \ == \"__main__\": \n    lst = [1, 2, 3] \n    print(sum_squares(lst)) \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4dk0q2fm.jl:22\nin expression starting at\
    \ /tmp/tmp4dk0q2fm.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    lst = ceil.(lst)\n\
    \    for i in lst\n        sum += i*i\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0,\
    \ 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(round.(lst).^2)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp02v2njdn.jl:24\n  Expression: candidate([1.4,\
    \ 4.2, 0.0]) == 29\n   Evaluated: 17 == 29\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp02v2njdn.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp02v2njdn.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp02v2njdn.jl:28\n  Expression: candidate([-1.4, 4.6, 6.3])\
    \ == 75\n   Evaluated: 62 == 75\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp02v2njdn.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp02v2njdn.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp02v2njdn.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return Int64(sum(map(x->ceil(x)*ceil(x),lst)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(x)*ceil.(x)\
    \ for x in lst)\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    (sum(map(x->ceil(Int64,x)^2,lst)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    s = 0\n    for i = 1:length(lst)\n\
    \        s += ceil(lst[i])^2\n    end\n    return s\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    \n    \n    \nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0,\
    \ 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpowkf097d.jl:23\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0, 3.0]) == 14\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] sum_squares(lst::Vector{Float64})\n     @ Main\
    \ /tmp/tmpowkf097d.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpowkf097d.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpowkf097d.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpowkf097d.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0]) == 14\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] sum_squares(lst::Vector{Float64})\n     @ Main\
    \ /tmp/tmpowkf097d.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpowkf097d.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpowkf097d.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    c = 0\n    for i in lst\n   \
    \     c += ceil(i)^2\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    \"\"\"returns the sum of squared\
    \ numbers\"\"\"\n    sum = 0.0\n    for i in lst\n        sum += i^2\n    end\n\
    \    return convert(Int64,ceil(sum))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpd42vc7_5.jl:29\n  Expression: candidate([1.4,\
    \ 4.2, 0.0]) == 29\n   Evaluated: 20 == 29\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd42vc7_5.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd42vc7_5.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpd42vc7_5.jl:30\n  Expression: candidate([-2.4, 1.0, 1.0])\
    \ == 6\n   Evaluated: 8 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd42vc7_5.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd42vc7_5.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpd42vc7_5.jl:33\n  Expression: candidate([-1.4, 4.6, 6.3])\
    \ == 75\n   Evaluated: 63 == 75\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd42vc7_5.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd42vc7_5.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpd42vc7_5.jl:34\n  Expression: candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086\n   Evaluated: 1076 == 1086\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd42vc7_5.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd42vc7_5.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd42vc7_5.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n   return sum([x^2 for x in lst])\
    \ |> Int\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmuicvlwh.jl:24\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] |>\n   \
    \  @ ./operators.jl:966 [inlined]\n   [3] sum_squares(lst::Vector{Float64})\n\
    \     @ Main /tmp/tmpmuicvlwh.jl:14\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpmuicvlwh.jl:24 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpmuicvlwh.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpmuicvlwh.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] |>\n     @ ./operators.jl:966\
    \ [inlined]\n   [3] sum_squares(lst::Vector{Float64})\n     @ Main /tmp/tmpmuicvlwh.jl:14\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpmuicvlwh.jl:25 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpmuicvlwh.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpmuicvlwh.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] |>\n   \
    \  @ ./operators.jl:966 [inlined]\n   [3] sum_squares(lst::Vector{Float64})\n\
    \     @ Main /tmp/tmpmuicvlwh.jl:14\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpmuicvlwh.jl:28 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpmuicvlwh.jl:20\ntest "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmuicvlwh.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    s = sum(map(ceil, lst))\n   \
    \ return s*s\nend \nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb8z7g56u.jl:22\n  Expression: candidate([1.0,\
    \ 2.0, 3.0]) == 14\n   Evaluated: 36 == 14\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb8z7g56u.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb8z7g56u.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpb8z7g56u.jl:23\n  Expression: candidate([1.0, 2.0, 3.0]) ==\
    \ 14\n   Evaluated: 36 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb8z7g56u.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb8z7g56u.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpb8z7g56u.jl:24\n  Expression: candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84\n   Evaluated: 256 == 84\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb8z7g56u.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb8z7g56u.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpb8z7g56u.jl:25\n  Expression: candidate([1.4, 4.2, 0.0]) ==\
    \ 29\n   Evaluated: 49 == 29\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb8z7g56u.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb8z7g56u.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpb8z7g56u.jl:26\n  Expression: candidate([-2.4, 1.0, 1.0])\
    \ == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 10 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb8z7g56u.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum([ceil(i)^2 for i in\
    \ lst])\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    ceil_lst = map(x->ceil(x), lst)\n\
    \    sum_sq = 0\n    for i in ceil_lst\n        sum_sq += i^2\n    end\n    return\
    \ sum_sq\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += round(x)^2\n    end\n    return sum\nend\nsum_squares([1,2,3])\n\
    sum_squares([1,4,9])\nsum_squares([1,3,5,7])\nsum_squares([1.4,4.2,0])\nsum_squares([-2.4,1,1])\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: MethodError: no method matching sum_squares(::Vector{Int64})\n\
    Closest candidates are:\n  sum_squares(!Matched::Vector{Float64}) at /tmp/tmprcae00z2.jl:13\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmprcae00z2.jl:20\nin expression\
    \ starting at /tmp/tmprcae00z2.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(lst.^2 |> ceil)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8d7o__yd.jl:21\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0, 3.0]) == 14\n  MethodError: no method matching\
    \ ceil(::Vector{Float64})\n  Closest candidates are:\n    ceil(!Matched::Union{Dates.Day,\
    \ Dates.Week, Dates.TimePeriod}, !Matched::Union{Dates.Day, Dates.Week, Dates.TimePeriod})\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Dates/src/rounding.jl:184\n\
    \    ceil(!Matched::Union{Dates.Day, Dates.Week, Dates.TimePeriod, Dates.TimeType},\
    \ !Matched::Type{P}) where P<:Dates.Period at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Dates/src/rounding.jl:286\n\
    \    ceil(!Matched::Real; kwargs...) at /shared/centos7/julia/1.7.3/share/julia/base/floatfuncs.jl:156\n\
    \    ...\n  Stacktrace:\n   [1] |>(x::Vector{Float64}, f::typeof(ceil))\n    \
    \ @ Base ./operators.jl:966\n   [2] sum_squares(lst::Vector{Float64})\n     @\
    \ Main /tmp/tmp8d7o__yd.jl:14\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp8d7o__yd.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp8d7o__yd.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp8d7o__yd.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0]) == 14\n  MethodError: no method matching ceil(::Vector{Float64})\n\
    \  Closest candidates are:\n    ceil(!Matched::Union{Dates.Day, Dates.Week, Dates.TimePeriod},\
    \ !Matched::Union{Dates.Day, Dates.Week, Dates.TimePeriod}) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Dates/src/rounding.jl:184\n\
    \    ceil(!Matched::Union{Dates.Day, Dates.Week, Dates.TimePeriod, Dates.TimeType},\
    \ !Matched::Type{P}) where P<:Dates.Period at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Dates/src/rounding.jl:286\n\
    \    ceil(!Matched::Real; kwargs...) at /shared/centos7/julia/1.7.3/share/julia/base/floatfuncs.jl:156\n\
    \    ...\n  Stacktrace:\n   [1] |>(x::Vector{Float64}, f::typeof(ceil))\n    \
    \ @ Base ./oper"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8d7o__yd.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       x = ceil(Int64, i)\n        sum += x^2\n    end\n    return sum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    lst = map(round, lst)\n    lst\
    \ = map(x -> x*x, lst)\n    return sum(lst)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpprp4m9sq.jl:26\n  Expression: candidate([1.4,\
    \ 4.2, 0.0]) == 29\n   Evaluated: 17 == 29\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpprp4m9sq.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpprp4m9sq.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpprp4m9sq.jl:30\n  Expression: candidate([-1.4, 4.6, 6.3])\
    \ == 75\n   Evaluated: 62 == 75\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpprp4m9sq.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpprp4m9sq.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpprp4m9sq.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    ceil_sum = 0\n    for i in lst\n\
    \        ceil_sum += ceil(i)\n    end\n    return ceil_sum^2\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0,\
    \ 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0em8s027.jl:25\n  Expression: candidate([1.0,\
    \ 2.0, 3.0]) == 14\n   Evaluated: 36 == 14\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0em8s027.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0em8s027.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp0em8s027.jl:26\n  Expression: candidate([1.0, 2.0, 3.0]) ==\
    \ 14\n   Evaluated: 36 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0em8s027.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0em8s027.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp0em8s027.jl:27\n  Expression: candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84\n   Evaluated: 256 == 84\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0em8s027.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0em8s027.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp0em8s027.jl:28\n  Expression: candidate([1.4, 4.2, 0.0]) ==\
    \ 29\n   Evaluated: 49 == 29\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0em8s027.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0em8s027.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp0em8s027.jl:29\n  Expression: candidate([-2.4, 1.0, 1.0])\
    \ == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 10 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0em8s027.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    n = length(lst)\n    new_list\
    \ = zeros(n)\n    for i in 1:n\n        new_list[i] = lst[i]^2\n    end\n    return\
    \ sum(new_list)\nend\nsum_squares([1,2,3])\nsum_squares([1,4,9])\nsum_squares([1,3,5,7])\n\
    sum_squares([1.4,4.2,0])\nsum_squares([-2.4,1,1])\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: MethodError: no method matching sum_squares(::Vector{Int64})\n\
    Closest candidates are:\n  sum_squares(!Matched::Vector{Float64}) at /tmp/tmpvin0ffjv.jl:13\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpvin0ffjv.jl:21\nin expression\
    \ starting at /tmp/tmpvin0ffjv.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    out = []\n    for x in lst\n\
    \        push!(out, round(Int64, x)^2)\n    end\n    return sum(out)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpk4l0smuz.jl:28\n  Expression: candidate([1.4,\
    \ 4.2, 0.0]) == 29\n   Evaluated: 17 == 29\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk4l0smuz.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk4l0smuz.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpk4l0smuz.jl:32\n  Expression: candidate([-1.4, 4.6, 6.3])\
    \ == 75\n   Evaluated: 62 == 75\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk4l0smuz.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk4l0smuz.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk4l0smuz.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    \"\"\"\n    Function that computes\
    \ the sum of squared numbers, in the given list,\n    round each element in the\
    \ list to the upper int(Ceiling) first.\n    \"\"\"\n    new_lst = copy(lst)\n\
    \    for i in 1:length(new_lst)\n        new_lst[i] = ceil(new_lst[i])\n    end\n\
    \    return sum(new_lst.^2)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    \"\"\"Returns the sum of the\
    \ squared ceiled numbers in the list\n    Input: \n        lst (list): list of\
    \ numbers\n    Output:\n        sum_sqr (int): sum of the squared numbers.\n \
    \   \"\"\"\n    sum_sqr = 0\n    for i in lst\n        sum_sqr += ceil(i)^2\n\
    \    end\n    return sum_sqr\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    d = ceil.(lst)\n    d = d.^2\n\
    \    return sum(d)\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum_squares=0\n    for elem in\
    \ lst\n        sum_squares=sum_squares+ceil(elem)*ceil(elem)\n    end\n    return\
    \ sum_squares\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(i)^2 for i in\
    \ lst)\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum_squares = 0\n    for i =\
    \ 1:length(lst)\n        sum_squares += ceil(lst[i])*ceil(lst[i])\n    end\n \
    \   return sum_squares\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    \n    res = 0\n    for i in lst\n\
    \        res += ceil(i)^2\n    end\n    return res\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum(ceil.(lst) .^ 2)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    \n    \n    \n    ## YOUR CODE\
    \ HERE ##\n    sum = 0\n    for i in lst\n        sum += ceil(i)^2\n    end\n\
    \    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    j = 0 \n    for i in lst \n \
    \       j += round(Int64,ceil(i)^2)\n    end\n    return j\nend \nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0,\
    \ 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    s = 0\n    for i in 1:length(lst)\n\
    \        if(lst[i] < 0)\n            s += ceil(lst[i])^2\n        else\n     \
    \       s += floor(lst[i])^2\n        end\n    end\n    return s\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0,\
    \ 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwaco5d_9.jl:32\n  Expression: candidate([1.4,\
    \ 4.2, 0.0]) == 29\n   Evaluated: 17 == 29\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwaco5d_9.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwaco5d_9.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpwaco5d_9.jl:36\n  Expression: candidate([-1.4, 4.6, 6.3])\
    \ == 75\n   Evaluated: 53 == 75\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwaco5d_9.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwaco5d_9.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpwaco5d_9.jl:37\n  Expression: candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086\n   Evaluated: 975 == 1086\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwaco5d_9.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwaco5d_9.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     3     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwaco5d_9.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    total = 0\n    for i in lst\n\
    \        total += ceil(i)^2\n    end\n    return total\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    res = 0\n    for i in 1:length(lst)\n\
    \        res += ceil(lst[i])^2\n    end\n    return res\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum = sum + ceil(x) * ceil(x)\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0,\
    \ 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    s=0\n    for i=1:length(lst)\n\
    \        s+=round(Int64,ceil(lst[i]))^2\n    end\n    return s\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0,\
    \ 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(Int64(ceil.(lst))\
    \ .^ 2)\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpaqd6_w10.jl:21\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0, 3.0]) == 14\n  MethodError: no method matching\
    \ Int64(::Vector{Float64})\n  Closest candidates are:\n    (::Type{T})(!Matched::AbstractChar)\
    \ where T<:Union{Int32, Int64} at /shared/centos7/julia/1.7.3/share/julia/base/char.jl:51\n\
    \    (::Type{T})(!Matched::AbstractChar) where T<:Union{AbstractChar, Number}\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/char.jl:50\n    (::Type{T})(!Matched::BigInt)\
    \ where T<:Union{Int128, Int16, Int32, Int64, Int8} at /shared/centos7/julia/1.7.3/share/julia/base/gmp.jl:357\n\
    \    ...\n  Stacktrace:\n   [1] sum_squares(lst::Vector{Float64})\n     @ Main\
    \ /tmp/tmpaqd6_w10.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpaqd6_w10.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaqd6_w10.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpaqd6_w10.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0]) == 14\n  MethodError: no method matching Int64(::Vector{Float64})\n\
    \  Closest candidates are:\n    (::Type{T})(!Matched::AbstractChar) where T<:Union{Int32,\
    \ Int64} at /shared/centos7/julia/1.7.3/share/julia/base/char.jl:51\n    (::Type{T})(!Matched::AbstractChar)\
    \ where T<:Union{AbstractChar, Number} at /shared/centos7/julia/1.7.3/share/julia/base/char.jl:50\n\
    \    (::Type{T})(!Matched::BigInt) where T<:Union{Int128, Int16, Int32, Int64,\
    \ Int8} at /shared/centos7/julia/1.7.3/share/julia/base/gmp.jl:357\n    ...\n\
    \  Stacktrace:\n   [1] sum_squares(lst::Vector{Float64})\n     @ Main /tmp/tmpaqd6_w10.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpaqd6_w10.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:12"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaqd6_w10.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    s = 0\n    for i in lst\n   \
    \     p = ceil(i)\n        s += p*p\n    end\n    return s\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0,\
    \ 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    \"\"\"\n    Args:\n        lst:\
    \ list of numbers\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t\
    @test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) ==\
    \ 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpulg4h_c7.jl:1\nin expression starting at /tmp/tmpulg4h_c7.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    s = 0\n    for i = lst\n    \
    \    s += ceil(i)^2\n    end\n    return s\nend\nprintln(sum_squares([1,2,3]))\n\
    println(sum_squares([1,4,9]))\nprintln(sum_squares([1,3,5,7]))\nprintln(sum_squares([1.4,4.2,0]))\n\
    println(sum_squares([-2.4,1,1]))\nusing Test\n\n@testset begin\n\ncandidate =\
    \ sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: MethodError: no method matching sum_squares(::Vector{Int64})\n\
    Closest candidates are:\n  sum_squares(!Matched::Vector{Float64}) at /tmp/tmp_y9l957r.jl:13\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp_y9l957r.jl:20\nin expression\
    \ starting at /tmp/tmp_y9l957r.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    \n    \n    sum_total = 0\n \
    \   lst = ceil.(lst)\n    for i in lst\n        square = i^2\n        sum_total\
    \ += square\n    end\n    return sum_total\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    \"\"\"\n    Returns the sum of\
    \ the squares of the elements in the list \n    \"\"\"\n    nlst = []\n    for\
    \ i in lst\n        push!(nlst,ceil(i))\n    end\n    return sum(x -> x^2, nlst)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(abs.(lst)).^2)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpka8n6ttl.jl:25\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n   Evaluated: 11 == 6\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpka8n6ttl.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpka8n6ttl.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpka8n6ttl.jl:28\n  Expression: candidate([-1.4, 4.6, 6.3])\
    \ == 75\n   Evaluated: 78 == 75\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpka8n6ttl.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpka8n6ttl.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpka8n6ttl.jl:29\n  Expression: candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086\n   Evaluated: 1089 == 1086\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpka8n6ttl.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpka8n6ttl.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     3     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpka8n6ttl.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    suma = 0\n    for i \u2208 lst\n\
    \        suma +=  round(Int64, ceil(i^2))\n    end\n    return suma\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvbnzlo_4.jl:28\n  Expression: candidate([1.4,\
    \ 4.2, 0.0]) == 29\n   Evaluated: 20 == 29\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvbnzlo_4.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvbnzlo_4.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpvbnzlo_4.jl:29\n  Expression: candidate([-2.4, 1.0, 1.0])\
    \ == 6\n   Evaluated: 8 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvbnzlo_4.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvbnzlo_4.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpvbnzlo_4.jl:32\n  Expression: candidate([-1.4, 4.6, 6.3])\
    \ == 75\n   Evaluated: 64 == 75\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvbnzlo_4.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvbnzlo_4.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpvbnzlo_4.jl:33\n  Expression: candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086\n   Evaluated: 1078 == 1086\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvbnzlo_4.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvbnzlo_4.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvbnzlo_4.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum([(ceil(i))^2 for i\
    \ in lst])\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t\
    @test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) ==\
    \ 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0 \n    for i in lst \n\
    \        sum += round(i)^2\n    end\n    return sum\nend \nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo7cy6_8z.jl:28\n  Expression: candidate([1.4,\
    \ 4.2, 0.0]) == 29\n   Evaluated: 17 == 29\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo7cy6_8z.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo7cy6_8z.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpo7cy6_8z.jl:32\n  Expression: candidate([-1.4, 4.6, 6.3])\
    \ == 75\n   Evaluated: 62 == 75\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo7cy6_8z.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo7cy6_8z.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo7cy6_8z.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    lst = ceil.(lst)\n    return\
    \ sum(x->x^2, lst)\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum([ceil(x)^2 for x in\
    \ lst])\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n  # Your code here\n  return 0\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdzdngc1e.jl:22\n  Expression: candidate([1.0,\
    \ 2.0, 3.0]) == 14\n   Evaluated: 0 == 14\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdzdngc1e.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdzdngc1e.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpdzdngc1e.jl:23\n  Expression: candidate([1.0, 2.0, 3.0]) ==\
    \ 14\n   Evaluated: 0 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdzdngc1e.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdzdngc1e.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpdzdngc1e.jl:24\n  Expression: candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84\n   Evaluated: 0 == 84\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdzdngc1e.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdzdngc1e.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpdzdngc1e.jl:25\n  Expression: candidate([1.4, 4.2, 0.0]) ==\
    \ 29\n   Evaluated: 0 == 29\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdzdngc1e.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdzdngc1e.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpdzdngc1e.jl:26\n  Expression: candidate([-2.4, 1.0, 1.0])\
    \ == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 11 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdzdngc1e.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return Int64(ceil(sum(x*x for\
    \ x in lst)))\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9awytp42.jl:24\n  Expression: candidate([1.4,\
    \ 4.2, 0.0]) == 29\n   Evaluated: 20 == 29\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9awytp42.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9awytp42.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp9awytp42.jl:25\n  Expression: candidate([-2.4, 1.0, 1.0])\
    \ == 6\n   Evaluated: 8 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9awytp42.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9awytp42.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp9awytp42.jl:28\n  Expression: candidate([-1.4, 4.6, 6.3])\
    \ == 75\n   Evaluated: 63 == 75\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9awytp42.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9awytp42.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp9awytp42.jl:29\n  Expression: candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086\n   Evaluated: 1076 == 1086\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9awytp42.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9awytp42.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9awytp42.jl:18\n"
  exit_code: 1
  status: SyntaxError
