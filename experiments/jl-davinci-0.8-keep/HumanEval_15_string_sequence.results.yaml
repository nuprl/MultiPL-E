name: HumanEval_15_string_sequence
language: jl
results:
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        s = \"0\"\n    else\n        s = string_sequence(n-1)\
    \ * \" \" * n\n    end\n    return s\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpdf2eds1u.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == \"0 1 2 3\"\\n  MethodError: no method\
    \ matching *(::String, ::Int64)\\n  Closest candidates are:\\n    *(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\\\
    n    *(!Matched::T, ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:88\\\
    n    *(::Union{AbstractChar, AbstractString}, !Matched::Union{AbstractChar, AbstractString}...)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:260\\n    ...\\\
    n  Stacktrace:\\n   [1] *(::String, ::String, ::Int64)\\n     @ Base ./operators.jl:655\\\
    n   [2] string_sequence(n::Int64) (repeats 3 times)\\n     @ Main /tmp/tmpdf2eds1u.jl:11\\\
    n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpdf2eds1u.jl:21 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpdf2eds1u.jl:19\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    out = \"\"\n    for i in 0:n\n        out = string(out, i, \" \")\n    end\n\
    \    return out\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0nsl319o.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0nsl319o.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0nsl319o.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp0nsl319o.jl:20\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \"0 1 2 3 \" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0nsl319o.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0nsl319o.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp0nsl319o.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0nsl319o.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0nsl319o.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0nsl319o.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0:\n        return \"0\"\n    else:\n        prev_string = string_sequence(n-1)\n\
    \        return \"$prev_string $n\"\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1q1z63ma.jl:9\nin expression starting at /tmp/tmp1q1z63ma.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"0\"\n    for i in 1:n\n        s = s * \" \" * string(i)\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return strjoin(string.(0:n), \" \")\nend\n \npreload()\npairs = readlines(\"\
    input.txt\")\nfor (i,p) in enumerate(pairs)\n    pair = split(p)\n    a = parse(Int64,\
    \ pair[1])\n    b = parse(Int64, pair[2])\n    c = parse(Int64, pair[3])\n   \
    \ @test string_sequence(a) == pair[4]\n    @test string_sequence(b) == pair[5]\n\
    \    @test string_sequence(c) == pair[6]\nend\n@showtoc()\n \n@showtoc()\n \n\
    @showtoc(io->write(io, \"Custom header\\n\"))\n \n@timeit string_sequence(100000)\n\
    \ \n# @timeit string_sequence(100000)\n#\n# Custom header\n# Time spent evaluating\
    \ function string_sequence(n::Int64)::String:\n#   0.514 seconds (45.96 M allocations:\
    \ 7.826 GiB, 9.18% gc time)\n#\n# @timeit string_sequence(100000)\n#\n# Custom\
    \ header\n# Time spent evaluating function string_sequence(n::Int64)::String:\n\
    #   0.514 seconds (45.96 M allocations: 7.826 GiB, 9.18% gc time)\n#\n# @timeit\
    \ string_sequence(100000)\n#\n# Custom header\n# Time spent evaluating function\
    \ string_sequence(n::Int64)::String:\n#   0.534 seconds (46.02 M allocations:\
    \ 7.850 GiB, 9.20% gc time)\n#\n# @timeit string_sequence(100000)\n#\n# Custom\
    \ header\n# Time spent evaluating function string_sequence(n::Int64)::String:\n\
    #   0.515 seconds (45.99 M allocations: 7.828 GiB, 9.19% gc time)\n#\n# @timeit\
    \ string_sequence(100000)\n#\n# Custom header\n# Time spent evaluating function\
    \ string_sequence(n::Int64)::String:\n#   0.513 seconds (45.96 M allocations:\
    \ 7.826 GiB\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t\
    @test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: preload not defined\nStacktrace:\n [1]\
    \ top-level scope\n   @ /tmp/tmpp5g4rsty.jl:11\nin expression starting at /tmp/tmpp5g4rsty.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i = 0:n-1\n        s = string(s, \" \", i)\n    end\n \
    \   return string(s, \" \", n)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcxanesze.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \" 0\" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcxanesze.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcxanesze.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpcxanesze.jl:20\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \" 0 1 2 3\" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcxanesze.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcxanesze.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpcxanesze.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \" 0 1 2 3 4 5 6 7 8 9 10\" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcxanesze.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcxanesze.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcxanesze.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    i = 0\n    s = \"\"\n    while i <= n\n        s = string(s, i)\n       \
    \ if i != n\n            s = string(s, \" \")\n        end\n        i += 1\n \
    \   end\n    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n),\" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    n_plus1 = n + 1\n    x = join(collect(0:n_plus1), \" \")\n    return x\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvljnv5jq.jl:17\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 1\" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvljnv5jq.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvljnv5jq.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpvljnv5jq.jl:18\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \"0 1 2 3 4\" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvljnv5jq.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvljnv5jq.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpvljnv5jq.jl:19\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 11\" == \"0 1 2 3 4 5\
    \ 6 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvljnv5jq.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvljnv5jq.jl:16\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvljnv5jq.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    sequence = \"\" \n    for i in 0:n\n        if i < n\n            sequence\
    \ = string(sequence,i,\" \")\n        else\n            sequence = string(sequence,i)\n\
    \        end\n    end\n    return sequence\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join( map(t->\"$t\", collect(0:n)) )\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpljl05uao.jl:16\n  Expression: candidate(3)\
    \ == \"0 1 2 3\"\n   Evaluated: \"0123\" == \"0 1 2 3\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpljl05uao.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpljl05uao.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpljl05uao.jl:17\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"012345678910\" == \"0 1 2 3 4 5 6 7 8 9 10\"\
    \nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpljl05uao.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpljl05uao.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpljl05uao.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return \" \".join(string(i) for i in 0:n)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpdbtni6p9.jl:15\n  Test threw exception\n\
    \  Expression: candidate(0) == \"0\"\n  type String has no field join\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] string_sequence(n::Int64)\n\
    \     @ Main /tmp/tmpdbtni6p9.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdbtni6p9.jl:15 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdbtni6p9.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpdbtni6p9.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(3) == \"0 1 2 3\"\n  type String has no field join\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] string_sequence(n::Int64)\n\
    \     @ Main /tmp/tmpdbtni6p9.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdbtni6p9.jl:16 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdbtni6p9.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpdbtni6p9.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n  type String has no field join\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] string_sequence(n::Int64)\n\
    \     @ Main /tmp/tmpdbtni6p9.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdbtni6p9.jl:17 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdbtni6p9.jl:14\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdbtni6p9.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    n_string = string(n)\n    n_string = n_string*(n+1)\n    return n_string\n\
    end \nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp6mc3zt5g.jl:17\\n  Test threw\
    \ exception\\n  Expression: candidate(0) == \"0\"\\n  MethodError: no method matching\
    \ *(::String, ::Int64)\\n  Closest candidates are:\\n    *(::Any, ::Any, !Matched::Any,\
    \ !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\\\
    n    *(!Matched::T, ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:88\\\
    n    *(::Union{AbstractChar, AbstractString}, !Matched::Union{AbstractChar, AbstractString}...)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:260\\n    ...\\\
    n  Stacktrace:\\n   [1] string_sequence(n::Int64)\\n     @ Main /tmp/tmp6mc3zt5g.jl:9\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp6mc3zt5g.jl:17 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp6mc3zt5g.jl:16\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = string(n) \n    for i in 0:n-1\n        s = string(i) * \" \" * s\n \
    \   end\n    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppf32w0qp.jl:20\n  Expression: candidate(3)\
    \ == \"0 1 2 3\"\n   Evaluated: \"2 1 0 3\" == \"0 1 2 3\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppf32w0qp.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppf32w0qp.jl:18\ntest set: Test\
    \ Failed at /tmp/tmppf32w0qp.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"9 8 7 6 5 4 3 2 1 0 10\" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppf32w0qp.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppf32w0qp.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppf32w0qp.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    sum = \"\"\n    for i in 0:n\n        if sum == \"\"\n            sum = string(i)\n\
    \        else\n            sum = sum * \" \" * string(i)\n        end\n    end\n\
    \    return sum\nend\nprintln(string_sequence(5))\nprintln(string_sequence(0))\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "0 1 2 3 4 5\n0\nTest Summary: | Pass  Total\ntest set      |    3     \
    \ 3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    sequence = [string(n) for n in 0:n]\n    return join(sequence, \" \")\nend\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0 \n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n==0\n        return \"0\"\n    else \n        my_list = string.(0:n)\n\
    \        return join(my_list, \" \")\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    output = \"\"\n    for i = 0:n\n        output = string(output, \" \", i)\n\
    \    end\n    return output\nend\n \n \nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_ybiktgu.jl:21\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \" 0\" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_ybiktgu.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_ybiktgu.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp_ybiktgu.jl:22\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \" 0 1 2 3\" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_ybiktgu.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_ybiktgu.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp_ybiktgu.jl:23\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \" 0 1 2 3 4 5 6 7 8 9 10\" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_ybiktgu.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_ybiktgu.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_ybiktgu.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = string(0)\n    for i in 1:n\n        s = s * \" \" * string(i)\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    numbers = map(x -> string(x), 0:n)\n    return join(numbers, \" \")\nend\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_of_nums = \"\"\n    for i in 0:n\n        string_of_nums = string_of_nums\
    \ * i\n        string_of_nums = string_of_nums * \" \"\n    end\n    return string_of_nums\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpyob5wbg2.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(0) == \"0\"\\n  MethodError: no method matching\
    \ *(::String, ::Int64)\\n  Closest candidates are:\\n    *(::Any, ::Any, !Matched::Any,\
    \ !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\\\
    n    *(!Matched::T, ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:88\\\
    n    *(::Union{AbstractChar, AbstractString}, !Matched::Union{AbstractChar, AbstractString}...)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:260\\n    ...\\\
    n  Stacktrace:\\n   [1] string_sequence(n::Int64)\\n     @ Main /tmp/tmpyob5wbg2.jl:10\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpyob5wbg2.jl:20 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpyob5wbg2.jl:19\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = s * string(i) * \" \"\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqj1or7xs.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqj1or7xs.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqj1or7xs.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpqj1or7xs.jl:20\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \"0 1 2 3 \" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqj1or7xs.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqj1or7xs.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpqj1or7xs.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqj1or7xs.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqj1or7xs.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqj1or7xs.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in range(0, n+1)\n        s = s * string(i) * \" \"\n\
    \    end\n    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpap3vbk8v.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 1 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpap3vbk8v.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpap3vbk8v.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpap3vbk8v.jl:20\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \"0 1 2 3 4 \" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpap3vbk8v.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpap3vbk8v.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpap3vbk8v.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 11 \" == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpap3vbk8v.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpap3vbk8v.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpap3vbk8v.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = string(s, i, \" \")\n    end\n  \
    \  return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5iveo88y.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5iveo88y.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5iveo88y.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp5iveo88y.jl:20\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \"0 1 2 3 \" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5iveo88y.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5iveo88y.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp5iveo88y.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5iveo88y.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5iveo88y.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5iveo88y.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = s * string(i) * \" \"\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpam5v0j49.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpam5v0j49.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpam5v0j49.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpam5v0j49.jl:20\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \"0 1 2 3 \" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpam5v0j49.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpam5v0j49.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpam5v0j49.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpam5v0j49.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpam5v0j49.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpam5v0j49.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return \" \".join(string(x) for x in 0:n)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_qqzjki_.jl:15\n  Test threw exception\n\
    \  Expression: candidate(0) == \"0\"\n  type String has no field join\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] string_sequence(n::Int64)\n\
    \     @ Main /tmp/tmp_qqzjki_.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_qqzjki_.jl:15 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_qqzjki_.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp_qqzjki_.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(3) == \"0 1 2 3\"\n  type String has no field join\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] string_sequence(n::Int64)\n\
    \     @ Main /tmp/tmp_qqzjki_.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_qqzjki_.jl:16 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_qqzjki_.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp_qqzjki_.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n  type String has no field join\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] string_sequence(n::Int64)\n\
    \     @ Main /tmp/tmp_qqzjki_.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_qqzjki_.jl:17 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_qqzjki_.jl:14\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_qqzjki_.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = s * string(i) * \" \"\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpixmknw4v.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpixmknw4v.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpixmknw4v.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpixmknw4v.jl:20\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \"0 1 2 3 \" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpixmknw4v.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpixmknw4v.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpixmknw4v.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpixmknw4v.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpixmknw4v.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpixmknw4v.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    for i=0:n\n        print(i)\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "0test set: Error During Test at /tmp/tmp22t7375y.jl:17\n  Test threw exception\n\
    \  Expression: candidate(0) == \"0\"\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\n  Closest candidates are:\n   \
    \ convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmp22t7375y.jl:9\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp22t7375y.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp22t7375y.jl:16\n0123test set:\
    \ Error During Test at /tmp/tmp22t7375y.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(3) == \"0 1 2 3\"\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmp22t7375y.jl:9\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp22t7375y.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-lev"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp22t7375y.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = s * string(i) * \" \"\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpemtnkobl.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpemtnkobl.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpemtnkobl.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpemtnkobl.jl:20\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \"0 1 2 3 \" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpemtnkobl.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpemtnkobl.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpemtnkobl.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpemtnkobl.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpemtnkobl.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpemtnkobl.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0 \n        return \"0\"\n    else \n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    seq = string(0)\n    for i = 1:n\n        seq = string(seq, \" \", i)\n \
    \   end\n    return seq\nend\nstring_sequence(5)\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \"\"\"Return an empty string if n is 0 else return n-1 spaces  \"\"\"\n \
    \   if n == 0 \n        return \"0\"\n    else \n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nprintln(string_sequence(5))\nusing Test\n\
    \n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "0 1 2 3 4 5\nTest Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s=\"\"\n    for i in 0:n\n        s=s*string(i)*\" \"\n    end\n    return\
    \ s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc0xy7nuk.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc0xy7nuk.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc0xy7nuk.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpc0xy7nuk.jl:20\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \"0 1 2 3 \" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc0xy7nuk.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc0xy7nuk.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpc0xy7nuk.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc0xy7nuk.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc0xy7nuk.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc0xy7nuk.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i = 0:n\n        s = string(s, i, \" \")\n    end\n   \
    \ return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphuj8zdks.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphuj8zdks.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphuj8zdks.jl:18\ntest set: Test\
    \ Failed at /tmp/tmphuj8zdks.jl:20\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \"0 1 2 3 \" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphuj8zdks.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphuj8zdks.jl:18\ntest set: Test\
    \ Failed at /tmp/tmphuj8zdks.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphuj8zdks.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphuj8zdks.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphuj8zdks.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    # initialize empty string\n    s = \"\"\n    # loop from 0 to n\n    for\
    \ i = 0:n\n        # append each number to the string s\n        s = s * \" \"\
    \ * string(i)\n    end\n    # return the string\n    return s\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzqywdn_5.jl:23\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \" 0\" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzqywdn_5.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzqywdn_5.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpzqywdn_5.jl:24\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \" 0 1 2 3\" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzqywdn_5.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzqywdn_5.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpzqywdn_5.jl:25\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \" 0 1 2 3 4 5 6 7 8 9 10\" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzqywdn_5.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzqywdn_5.jl:22\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzqywdn_5.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        prev = string_sequence(n-1)\n\
    \        return prev * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    temp = \"\"\n    if n == 0\n        return \"0\"\n    end\n    for i = 0:n-1\n\
    \        temp = temp * \" \" * string(i)\n    end\n    return temp\nend\nstring_sequence(5)\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppzcpva6y.jl:24\n  Expression: candidate(3)\
    \ == \"0 1 2 3\"\n   Evaluated: \" 0 1 2\" == \"0 1 2 3\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppzcpva6y.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppzcpva6y.jl:22\ntest set: Test\
    \ Failed at /tmp/tmppzcpva6y.jl:25\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \" 0 1 2 3 4 5 6 7 8 9\" == \"0 1 2 3 4 5 6 7\
    \ 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppzcpva6y.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppzcpva6y.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppzcpva6y.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    sum = 0\n    for i = 0:n\n        sum += i\n    end\n    return(sum)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpf0w2f_ln.jl:19\n  Test threw exception\n\
    \  Expression: candidate(0) == \"0\"\n  MethodError: Cannot `convert` an object\
    \ of type Int64 to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmpf0w2f_ln.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf0w2f_ln.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf0w2f_ln.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpf0w2f_ln.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(3) == \"0 1 2 3\"\n  MethodError: Cannot `convert` an object of type\
    \ Int64 to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmpf0w2f_ln.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf0w2f_ln.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scop"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf0w2f_ln.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    num = 0\n    string = \"\"\n    while num <= n\n        string = string *\
    \ num * \" \"\n        num += 1\n    end\n    return string\nend\n\"\"\" Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3\
    \ 4 5'\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp3ju6e68z.jl:16\nin expression starting at /tmp/tmp3ju6e68z.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return string_sequence(0, n)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpv0qjdy8q.jl:15\n  Test threw exception\n\
    \  Expression: candidate(0) == \"0\"\n  MethodError: no method matching string_sequence(::Int64,\
    \ ::Int64)\n  Closest candidates are:\n    string_sequence(::Int64) at /tmp/tmpv0qjdy8q.jl:7\n\
    \  Stacktrace:\n   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmpv0qjdy8q.jl:8\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpv0qjdy8q.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv0qjdy8q.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpv0qjdy8q.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(3) == \"0 1 2 3\"\n  MethodError: no method matching string_sequence(::Int64,\
    \ ::Int64)\n  Closest candidates are:\n    string_sequence(::Int64) at /tmp/tmpv0qjdy8q.jl:7\n\
    \  Stacktrace:\n   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmpv0qjdy8q.jl:8\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpv0qjdy8q.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv0qjdy8q.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpv0qjdy8q.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n  MethodError: no method matching\
    \ string_sequence(::Int64, ::Int64)\n  Closest candidates are:\n    string_sequence(::Int64)\
    \ at /tmp/tmpv0qjdy8q.jl:7\n  Stacktrace:\n   [1] string_sequence(n::Int64)\n\
    \     @ Main /tmp/tmpv0qjdy8q.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpv0qjdy8q.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv0qjdy8q.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = string(s, \" \", i)\n    end\n  \
    \  return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj2sy7adk.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \" 0\" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj2sy7adk.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj2sy7adk.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpj2sy7adk.jl:20\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \" 0 1 2 3\" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj2sy7adk.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj2sy7adk.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpj2sy7adk.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \" 0 1 2 3 4 5 6 7 8 9 10\" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj2sy7adk.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj2sy7adk.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj2sy7adk.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    # Initialize i\n    i::Int64 = 0\n    \n    # Initialize a string to\
    \ hold the space delimited list\n    string_sequence::String = \"\"\n    \n  \
    \  # Loop from 0 to n inclusive\n    while i <= n\n        \n        # Append\
    \ the value of i to the string\n        string_sequence = string_sequence * i\
    \ * \" \"\n        \n        # Increment i\n        i += 1\n    end\n    \n  \
    \  # Return the string\n    return string_sequence\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpl_icag9m.jl:33\\n  Test threw\
    \ exception\\n  Expression: candidate(0) == \"0\"\\n  MethodError: no method matching\
    \ *(::String, ::Int64)\\n  Closest candidates are:\\n    *(::Any, ::Any, !Matched::Any,\
    \ !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\\\
    n    *(!Matched::T, ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:88\\\
    n    *(::Union{AbstractChar, AbstractString}, !Matched::Union{AbstractChar, AbstractString}...)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:260\\n    ...\\\
    n  Stacktrace:\\n   [1] *(::String, ::Int64, ::String)\\n     @ Base ./operators.jl:655\\\
    n   [2] string_sequence(n::Int64)\\n     @ Main /tmp/tmpl_icag9m.jl:19\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpl_icag9m.jl:33 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpl_icag9m.jl:32\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    numbers = zeros(n+1)\n    for i in 1:n+1\n        numbers[i] = i-1\n    end\n\
    \    return join(map(string, numbers), \" \")\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps0_pkts3.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0.0\" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps0_pkts3.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps0_pkts3.jl:18\ntest set: Test\
    \ Failed at /tmp/tmps0_pkts3.jl:20\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \"0.0 1.0 2.0 3.0\" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps0_pkts3.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps0_pkts3.jl:18\ntest set: Test\
    \ Failed at /tmp/tmps0_pkts3.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0\"\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps0_pkts3.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps0_pkts3.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps0_pkts3.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    a = range(0,stop=n)\n    return join(a, \" \")\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else \n        return \"$(string_sequence(n-1))\
    \ $n\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i = 0:n\n        s = string(s, \" \", i)\n    end\n   \
    \ return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx5lciart.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \" 0\" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx5lciart.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx5lciart.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpx5lciart.jl:20\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \" 0 1 2 3\" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx5lciart.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx5lciart.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpx5lciart.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \" 0 1 2 3 4 5 6 7 8 9 10\" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx5lciart.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx5lciart.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx5lciart.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join([\"$i \" for i in 0:n])\nend\nusing Test\n\n@testset begin\n\n\
    candidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpweroyfzw.jl:15\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpweroyfzw.jl:15 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpweroyfzw.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpweroyfzw.jl:16\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \"0 1 2 3 \" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpweroyfzw.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpweroyfzw.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpweroyfzw.jl:17\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpweroyfzw.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpweroyfzw.jl:14\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpweroyfzw.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    str = \"\"\n    for i in 0:n\n        str *= i\n        str *= \" \"\n  \
    \  end\n    return str\nend\n \nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp5zoa0oym.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(0) == \"0\"\\n  MethodError: no method matching\
    \ *(::String, ::Int64)\\n  Closest candidates are:\\n    *(::Any, ::Any, !Matched::Any,\
    \ !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\\\
    n    *(!Matched::T, ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:88\\\
    n    *(::Union{AbstractChar, AbstractString}, !Matched::Union{AbstractChar, AbstractString}...)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:260\\n    ...\\\
    n  Stacktrace:\\n   [1] string_sequence(n::Int64)\\n     @ Main /tmp/tmp5zoa0oym.jl:10\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp5zoa0oym.jl:21 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp5zoa0oym.jl:20\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    data = \"\"\n    for i in 0:n\n        data = string(data, \" \", i)\n  \
    \  end\n    return data\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkcifjup4.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \" 0\" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkcifjup4.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkcifjup4.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpkcifjup4.jl:20\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \" 0 1 2 3\" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkcifjup4.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkcifjup4.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpkcifjup4.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \" 0 1 2 3 4 5 6 7 8 9 10\" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkcifjup4.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkcifjup4.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkcifjup4.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\n    \nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    # Iterate over a sequence of integers upto n and convert each into a string\n\
    \    for i in 0:n \n        # Print the string (separated by a space) and return\
    \ the string\n        print(string(i))\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "0test set: Error During Test at /tmp/tmpeh7jj1h7.jl:19\n  Test threw exception\n\
    \  Expression: candidate(0) == \"0\"\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\n  Closest candidates are:\n   \
    \ convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmpeh7jj1h7.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpeh7jj1h7.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpeh7jj1h7.jl:18\n0123test set:\
    \ Error During Test at /tmp/tmpeh7jj1h7.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(3) == \"0 1 2 3\"\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmpeh7jj1h7.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpeh7jj1h7.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-l"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeh7jj1h7.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    sequence = \"0\"\n    for i = 1:n\n        sequence = sequence * \" \" *\
    \ string(i)\n    end\n    return sequence\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join([\"$i \" for i=0:n], \"\")\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7dfmi9cj.jl:15\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7dfmi9cj.jl:15 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7dfmi9cj.jl:14\ntest set: Test\
    \ Failed at /tmp/tmp7dfmi9cj.jl:16\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \"0 1 2 3 \" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7dfmi9cj.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7dfmi9cj.jl:14\ntest set: Test\
    \ Failed at /tmp/tmp7dfmi9cj.jl:17\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7dfmi9cj.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7dfmi9cj.jl:14\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7dfmi9cj.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for k in 0:n\n        s = string(s, string(k), \" \")\n   \
    \ end\n    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7u0a350u.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7u0a350u.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7u0a350u.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp7u0a350u.jl:20\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \"0 1 2 3 \" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7u0a350u.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7u0a350u.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp7u0a350u.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7u0a350u.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7u0a350u.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7u0a350u.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return \" \".join(string(i) for i in range(0, n+1))\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp510k60f0.jl:15\n  Test threw exception\n\
    \  Expression: candidate(0) == \"0\"\n  type String has no field join\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] string_sequence(n::Int64)\n\
    \     @ Main /tmp/tmp510k60f0.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp510k60f0.jl:15 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp510k60f0.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp510k60f0.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(3) == \"0 1 2 3\"\n  type String has no field join\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] string_sequence(n::Int64)\n\
    \     @ Main /tmp/tmp510k60f0.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp510k60f0.jl:16 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp510k60f0.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp510k60f0.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n  type String has no field join\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] string_sequence(n::Int64)\n\
    \     @ Main /tmp/tmp510k60f0.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp510k60f0.jl:17 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp510k60f0.jl:14\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp510k60f0.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n),\" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return \" \".join(string(i) for i in range(0, n+1))\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpuupkyidk.jl:15\n  Test threw exception\n\
    \  Expression: candidate(0) == \"0\"\n  type String has no field join\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] string_sequence(n::Int64)\n\
    \     @ Main /tmp/tmpuupkyidk.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpuupkyidk.jl:15 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpuupkyidk.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpuupkyidk.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(3) == \"0 1 2 3\"\n  type String has no field join\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] string_sequence(n::Int64)\n\
    \     @ Main /tmp/tmpuupkyidk.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpuupkyidk.jl:16 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpuupkyidk.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpuupkyidk.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n  type String has no field join\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] string_sequence(n::Int64)\n\
    \     @ Main /tmp/tmpuupkyidk.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpuupkyidk.jl:17 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpuupkyidk.jl:14\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuupkyidk.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s=\"\"\n    for i=0:n\n        s=s*string(i)*\" \"\n    end\n    return s\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprsf09ujl.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprsf09ujl.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprsf09ujl.jl:18\ntest set: Test\
    \ Failed at /tmp/tmprsf09ujl.jl:20\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \"0 1 2 3 \" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprsf09ujl.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprsf09ujl.jl:18\ntest set: Test\
    \ Failed at /tmp/tmprsf09ujl.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprsf09ujl.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprsf09ujl.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprsf09ujl.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return \"\".join([ string(i)\
    \ * \" \" for i in 0:n])\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmprvxexb2c.jl:20\n  Test threw exception\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n  type String has no field join\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] string_sequence(n::Int64)\n\
    \     @ Main /tmp/tmprvxexb2c.jl:11\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprvxexb2c.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmprvxexb2c.jl:18\ntest set:\
    \ Error During Test at /tmp/tmprvxexb2c.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n  type String has no field join\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] string_sequence(n::Int64)\n\
    \     @ Main /tmp/tmprvxexb2c.jl:11\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprvxexb2c.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmprvxexb2c.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprvxexb2c.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = string(s, \" \", i)\n    end\n  \
    \  return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprwpllrj7.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \" 0\" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprwpllrj7.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprwpllrj7.jl:18\ntest set: Test\
    \ Failed at /tmp/tmprwpllrj7.jl:20\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \" 0 1 2 3\" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprwpllrj7.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprwpllrj7.jl:18\ntest set: Test\
    \ Failed at /tmp/tmprwpllrj7.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \" 0 1 2 3 4 5 6 7 8 9 10\" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprwpllrj7.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprwpllrj7.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprwpllrj7.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    nums = []\n    for i in 0:n\n        push!(nums, i)\n    end\n    str = join(nums,\
    \ \" \")\n    return str\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = string(0)\n    for i in 1:n\n        s = s * \" \" * string(i)\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    to_return = \"\"\n    for i in 0:n\n        to_return = string(to_return,\
    \ i, \" \")\n    end\n    return strip(to_return)\nend\n@eval @time string_sequence(10000000)\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = s * \" \" * string(i)\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprdtmutm2.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \" 0\" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprdtmutm2.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprdtmutm2.jl:18\ntest set: Test\
    \ Failed at /tmp/tmprdtmutm2.jl:20\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \" 0 1 2 3\" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprdtmutm2.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprdtmutm2.jl:18\ntest set: Test\
    \ Failed at /tmp/tmprdtmutm2.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \" 0 1 2 3 4 5 6 7 8 9 10\" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprdtmutm2.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprdtmutm2.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprdtmutm2.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0 \n        return \"0\"\n    else \n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = s * string(i) * \" \"\n    end\n\
    \    return strip(s)\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return string(0:n)\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprb5tg3fi.jl:15\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0:0\" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprb5tg3fi.jl:15 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprb5tg3fi.jl:14\ntest set: Test\
    \ Failed at /tmp/tmprb5tg3fi.jl:16\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \"0:3\" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmprb5tg3fi.jl:16 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprb5tg3fi.jl:14\ntest set: Test\
    \ Failed at /tmp/tmprb5tg3fi.jl:17\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0:10\" == \"0 1 2 3 4 5 6 7 8 9 10\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprb5tg3fi.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprb5tg3fi.jl:14\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprb5tg3fi.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    list = [string(i) for i in 0:n]\n    return join(list, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1nbsi619.jl:15\n  Test threw exception\n\
    \  Expression: candidate(0) == \"0\"\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\n  Closest candidates are:\n   \
    \ convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmp1nbsi619.jl:9\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1nbsi619.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1nbsi619.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp1nbsi619.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(3) == \"0 1 2 3\"\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmp1nbsi619.jl:9\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1nbsi619.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level sc"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1nbsi619.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    seq = \"\"\n    for i in 0:n\n        seq = string(seq,i)\n        if i !=\
    \ n\n            seq = string(seq,\" \")\n        end\n    end\n    return seq\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return strjoin([string(i) for i in 0:n], \" \")\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpydj4y4vc.jl:15\n  Test threw exception\n\
    \  Expression: candidate(0) == \"0\"\n  UndefVarError: strjoin not defined\n \
    \ Stacktrace:\n   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmpydj4y4vc.jl:8\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpydj4y4vc.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpydj4y4vc.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpydj4y4vc.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(3) == \"0 1 2 3\"\n  UndefVarError: strjoin not defined\n  Stacktrace:\n\
    \   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmpydj4y4vc.jl:8\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpydj4y4vc.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpydj4y4vc.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpydj4y4vc.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n  UndefVarError: strjoin not defined\n\
    \  Stacktrace:\n   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmpydj4y4vc.jl:8\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpydj4y4vc.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpydj4y4vc.jl:14\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpydj4y4vc.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(collect(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return ' '.join(map(string, 0:n))\nend\nusing Test\n\n@testset begin\n\n\
    candidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpdj5rvsmn.jl:15\n  Test threw exception\n\
    \  Expression: candidate(0) == \"0\"\n  type Char has no field join\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] string_sequence(n::Int64)\n\
    \     @ Main /tmp/tmpdj5rvsmn.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdj5rvsmn.jl:15 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdj5rvsmn.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpdj5rvsmn.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(3) == \"0 1 2 3\"\n  type Char has no field join\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] string_sequence(n::Int64)\n\
    \     @ Main /tmp/tmpdj5rvsmn.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdj5rvsmn.jl:16 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdj5rvsmn.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpdj5rvsmn.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n  type Char has no field join\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] string_sequence(n::Int64)\n\
    \     @ Main /tmp/tmpdj5rvsmn.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdj5rvsmn.jl:17 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdj5rvsmn.jl:14\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdj5rvsmn.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    if n == 0\n        s = string(n)\n    else\n        for i in\
    \ 0:n\n            s = string(s, \" \", i)\n        end\n    end\n    return s\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj6ce527x.jl:24\n  Expression: candidate(3)\
    \ == \"0 1 2 3\"\n   Evaluated: \" 0 1 2 3\" == \"0 1 2 3\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj6ce527x.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj6ce527x.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpj6ce527x.jl:25\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \" 0 1 2 3 4 5 6 7 8 9 10\" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj6ce527x.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj6ce527x.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj6ce527x.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    n_str = [string(i) for i in 0:n]\n    return join(n_str, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join( map(string, 0:n), \" \" )\nend\n# string_sequence(0)\nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(collect(0:n)), \" \")\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \  if n == 0\n    return \"0\"\n  else\n    return string_sequence(n-1) * \" \"\
    \ * string(n)\n  end\nend\nprintln(string_sequence(5))\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "0 1 2 3 4 5\nTest Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0 \n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s::Int64 = 0\n    result::String = string(s)\n    while s < n\n        s\
    \ += 1\n        result = result * \" \" * string(s)\n    end\n    return result\n\
    end\n        \n            \n \n \n    \"\"\" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n\
    \    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpopw4gm83.jl:20\nin expression starting at /tmp/tmpopw4gm83.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nprintln(string_sequence(5))\nusing Test\n\
    \n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "0 1 2 3 4 5\nTest Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    i = 0\n    s = \"\"\n    while i <= n\n        s = s * string(i) * \" \"\n\
    \        i += 1\n    end\n    return s\nend\nusing Test\n\n@testset begin\n\n\
    candidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprfkj2xbn.jl:21\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprfkj2xbn.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprfkj2xbn.jl:20\ntest set: Test\
    \ Failed at /tmp/tmprfkj2xbn.jl:22\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \"0 1 2 3 \" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprfkj2xbn.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprfkj2xbn.jl:20\ntest set: Test\
    \ Failed at /tmp/tmprfkj2xbn.jl:23\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprfkj2xbn.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprfkj2xbn.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprfkj2xbn.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    str = \"\"\n    for i in 0:n\n        str = str * string(i) * \" \"\n   \
    \ end\n    return str\nend\nstring_sequence(5)\nstring_sequence(0)\nstring_sequence(10)\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvye3mfph.jl:22\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvye3mfph.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvye3mfph.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvye3mfph.jl:23\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \"0 1 2 3 \" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvye3mfph.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvye3mfph.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvye3mfph.jl:24\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvye3mfph.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvye3mfph.jl:21\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvye3mfph.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return \" \".join(string(num) for num in 0:n)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmps3m252cp.jl:15\n  Test threw exception\n\
    \  Expression: candidate(0) == \"0\"\n  type String has no field join\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] string_sequence(n::Int64)\n\
    \     @ Main /tmp/tmps3m252cp.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmps3m252cp.jl:15 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmps3m252cp.jl:14\ntest set:\
    \ Error During Test at /tmp/tmps3m252cp.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(3) == \"0 1 2 3\"\n  type String has no field join\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] string_sequence(n::Int64)\n\
    \     @ Main /tmp/tmps3m252cp.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmps3m252cp.jl:16 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmps3m252cp.jl:14\ntest set:\
    \ Error During Test at /tmp/tmps3m252cp.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n  type String has no field join\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] string_sequence(n::Int64)\n\
    \     @ Main /tmp/tmps3m252cp.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmps3m252cp.jl:17 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmps3m252cp.jl:14\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps3m252cp.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i = 0:n\n        s = string(s, i, \" \")\n    end\n   \
    \ return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp89z3z_pw.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp89z3z_pw.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp89z3z_pw.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp89z3z_pw.jl:20\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \"0 1 2 3 \" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp89z3z_pw.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp89z3z_pw.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp89z3z_pw.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp89z3z_pw.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp89z3z_pw.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp89z3z_pw.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \  # base case \n  if n == 0 \n    return \"0\"\n  end\n  \n  # recursive case\
    \ \n  return string_sequence(n-1) * \" \" * string(n)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    res = \"\"\n    for i in 0:n\n        res = res * string(i) * \" \"\
    \n    end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8r5lih_z.jl:20\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8r5lih_z.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8r5lih_z.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp8r5lih_z.jl:21\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \"0 1 2 3 \" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8r5lih_z.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8r5lih_z.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp8r5lih_z.jl:22\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8r5lih_z.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8r5lih_z.jl:19\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8r5lih_z.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    sum = 0\n    for i = 0:n\n        sum += i\n    end\n    sum\nend\n# Note:\
    \ The @test macro automatically calls the function named test()\n@test string_sequence(0)\
    \ == \"0\"\n@test string_sequence(5) == \"0 1 2 3 4 5\"\n \n \n\"\"\" Return the\
    \ sum of all numbers starting from 0 upto n inclusive.\n    >>> sum_sequence(0)\n\
    \    0\n    >>> sum_sequence(5)\n    15\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @test not defined\nin expression starting\
    \ at /tmp/tmp_jcgl3y4.jl:15\nin expression starting at /tmp/tmp_jcgl3y4.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    i = 0\n    result = \"\"\n    while i <= n\n        result = result * \"\
    \ \" * string(i)\n        i += 1\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp46l_xyul.jl:21\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \" 0\" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp46l_xyul.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp46l_xyul.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp46l_xyul.jl:22\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \" 0 1 2 3\" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp46l_xyul.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp46l_xyul.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp46l_xyul.jl:23\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \" 0 1 2 3 4 5 6 7 8 9 10\" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp46l_xyul.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp46l_xyul.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp46l_xyul.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    a = \"\"\n    for i = 0:n\n        a *= convert(String, i)\n        a *=\
    \ \" \"\n    end\n    return a\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqufqqwg_.jl:20\n  Test threw exception\n\
    \  Expression: candidate(0) == \"0\"\n  MethodError: Cannot `convert` an object\
    \ of type Int64 to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmpqufqqwg_.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqufqqwg_.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqufqqwg_.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpqufqqwg_.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(3) == \"0 1 2 3\"\n  MethodError: Cannot `convert` an object of type\
    \ Int64 to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmpqufqqwg_.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqufqqwg_.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scop"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqufqqwg_.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \  return join(collect(0:n),\" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s::String = \"\"\n    for i in 0:n \n        s = s * string(i) * \" \"\n\
    \    end\n    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp50tds2dl.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp50tds2dl.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50tds2dl.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp50tds2dl.jl:20\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \"0 1 2 3 \" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp50tds2dl.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50tds2dl.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp50tds2dl.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp50tds2dl.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50tds2dl.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp50tds2dl.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        str = string_sequence(n-1)\n\
    \        str *= \" \" * string(n)\n        return str\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = s * string(i) * \" \"\n    end\n\
    \    return s\nend\n@test string_sequence(0) == \"0\"\n@test string_sequence(5)\
    \ == \"0 1 2 3 4 5\"\n@test string_sequence(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @test not defined\nin expression starting\
    \ at /tmp/tmpzk_nbsow.jl:14\nin expression starting at /tmp/tmpzk_nbsow.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\n    \nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    x = \"\"\n    for i in 0:n\n        x = x * i * \" \"\n    end\n    return\
    \ x\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpsd3jke65.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate(0) == \"0\"\\n  MethodError: no method matching\
    \ *(::String, ::Int64)\\n  Closest candidates are:\\n    *(::Any, ::Any, !Matched::Any,\
    \ !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\\\
    n    *(!Matched::T, ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:88\\\
    n    *(::Union{AbstractChar, AbstractString}, !Matched::Union{AbstractChar, AbstractString}...)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:260\\n    ...\\\
    n  Stacktrace:\\n   [1] *(::String, ::Int64, ::String)\\n     @ Base ./operators.jl:655\\\
    n   [2] string_sequence(n::Int64)\\n     @ Main /tmp/tmpsd3jke65.jl:10\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpsd3jke65.jl:19 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpsd3jke65.jl:18\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(map(string, 0:n), \" \")\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    nums = collect(0:n)\n    println(join(nums, \" \"))\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  stdout: "0\ntest set: Error During Test at /tmp/tmpuju5y494.jl:16\n  Test threw\
    \ exception\n  Expression: candidate(0) == \"0\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmpuju5y494.jl:9\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuju5y494.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuju5y494.jl:15\n0 1 2 3\n\
    test set: Error During Test at /tmp/tmpuju5y494.jl:17\n  Test threw exception\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type String\n  Closest candidates are:\n\
    \    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmpuju5y494.jl:9\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuju5y494.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] to"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuju5y494.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    my_string = \"\"\n    for i = 0:n\n        my_string = \"$my_string $i\"\n\
    \    end\n    return my_string\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppphs3cad.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \" 0\" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppphs3cad.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppphs3cad.jl:18\ntest set: Test\
    \ Failed at /tmp/tmppphs3cad.jl:20\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \" 0 1 2 3\" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppphs3cad.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppphs3cad.jl:18\ntest set: Test\
    \ Failed at /tmp/tmppphs3cad.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \" 0 1 2 3 4 5 6 7 8 9 10\" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppphs3cad.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppphs3cad.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppphs3cad.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"0\"\n    for i in 1:n\n        s = s * \" \" * string(i)\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0 \n        return string(n)\n    else \n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    res = \"\"\n    for i in 0:n\n        res *= string(i) * \" \"\n    end\n\
    \    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpuj53ul6y.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuj53ul6y.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuj53ul6y.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpuj53ul6y.jl:20\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \"0 1 2 3 \" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuj53ul6y.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuj53ul6y.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpuj53ul6y.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuj53ul6y.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuj53ul6y.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuj53ul6y.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return string(n)\n    else\n        return string(n) *\
    \ \" \" * string_sequence(n-1)\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_zbs5bef.jl:20\n  Expression: candidate(3)\
    \ == \"0 1 2 3\"\n   Evaluated: \"3 2 1 0\" == \"0 1 2 3\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_zbs5bef.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_zbs5bef.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp_zbs5bef.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"10 9 8 7 6 5 4 3 2 1 0\" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_zbs5bef.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_zbs5bef.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_zbs5bef.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    # n is always an integer\n    t = \"\"\n    for i in 0:n\n        t = t *\
    \ string(i) * \" \"\n    end\n    return t\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4wem21q0.jl:20\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4wem21q0.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4wem21q0.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp4wem21q0.jl:21\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \"0 1 2 3 \" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4wem21q0.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4wem21q0.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp4wem21q0.jl:22\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4wem21q0.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4wem21q0.jl:19\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4wem21q0.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = string(n)\n    for i in 0:n-1\n        s = string(i) * \" \" * s\n  \
    \  end\n    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplvknvyh_.jl:20\n  Expression: candidate(3)\
    \ == \"0 1 2 3\"\n   Evaluated: \"2 1 0 3\" == \"0 1 2 3\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplvknvyh_.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplvknvyh_.jl:18\ntest set: Test\
    \ Failed at /tmp/tmplvknvyh_.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"9 8 7 6 5 4 3 2 1 0 10\" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplvknvyh_.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplvknvyh_.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplvknvyh_.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = s * \" \" * string(i)\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_2mobr_9.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \" 0\" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_2mobr_9.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_2mobr_9.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp_2mobr_9.jl:20\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \" 0 1 2 3\" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_2mobr_9.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_2mobr_9.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp_2mobr_9.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \" 0 1 2 3 4 5 6 7 8 9 10\" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_2mobr_9.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_2mobr_9.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_2mobr_9.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \"\"\" Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\n    if n == 0\n        return \"0\"\n    else\n\
    \        return string_sequence(n-1) * \" \" * string(n)\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n < 0\n        return \"\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\n \n```\nusing Test\n\n@testset begin\n\n\
    candidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv6b2l1g7.jl:15\nin expression starting at\
    \ /tmp/tmpv6b2l1g7.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n < 0\n        return \"Negative argument.\"\n    end\n    str = \"\"\n\
    \    for i in 0:n\n        str = str * string(i) * \" \"\n    end\n    return\
    \ str\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpn0jo_72b.jl:22\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn0jo_72b.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn0jo_72b.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpn0jo_72b.jl:23\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \"0 1 2 3 \" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn0jo_72b.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn0jo_72b.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpn0jo_72b.jl:24\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn0jo_72b.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn0jo_72b.jl:21\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn0jo_72b.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    seq = string(\"\")\n    for i in 0:n\n        if i != n\n            seq\
    \ = string(seq, string(i), \" \")\n        else\n            seq = string(seq,\
    \ string(i))\n        end\n    end\n    return seq\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    x =\"\"\n    for i = 0:n \n        x = x*\"$i \"\n    end\n    return x\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpks1eip18.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpks1eip18.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpks1eip18.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpks1eip18.jl:20\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \"0 1 2 3 \" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpks1eip18.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpks1eip18.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpks1eip18.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpks1eip18.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpks1eip18.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpks1eip18.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(collect(0:n)))\nend\n```\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw2hquzee.jl:10\nin expression starting at\
    \ /tmp/tmpw2hquzee.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n==0\n        print(\"0\")\n    else\n        for i = 0:n\n          \
    \  print(i)\n        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "0test set: Error During Test at /tmp/tmp3kmelmmp.jl:21\n  Test threw exception\n\
    \  Expression: candidate(0) == \"0\"\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\n  Closest candidates are:\n   \
    \ convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmp3kmelmmp.jl:9\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3kmelmmp.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3kmelmmp.jl:20\n0123test set:\
    \ Error During Test at /tmp/tmp3kmelmmp.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(3) == \"0 1 2 3\"\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmp3kmelmmp.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3kmelmmp.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-le"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3kmelmmp.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \   return join([\"$i \" for i in 0:n], \"\")\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptzkh8gvc.jl:15\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptzkh8gvc.jl:15 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptzkh8gvc.jl:14\ntest set: Test\
    \ Failed at /tmp/tmptzkh8gvc.jl:16\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \"0 1 2 3 \" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptzkh8gvc.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptzkh8gvc.jl:14\ntest set: Test\
    \ Failed at /tmp/tmptzkh8gvc.jl:17\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptzkh8gvc.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptzkh8gvc.jl:14\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptzkh8gvc.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \   \"\"\"iterate over 0,1,2,3,4,5\"\"\" \n    for i in 0:n\n        println(i)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t\
    @test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "0\ntest set: Error During Test at /tmp/tmphib1o73b.jl:18\n  Test threw\
    \ exception\n  Expression: candidate(0) == \"0\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmphib1o73b.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphib1o73b.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphib1o73b.jl:17\n0\n1\n2\n\
    3\ntest set: Error During Test at /tmp/tmphib1o73b.jl:19\n  Test threw exception\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type String\n  Closest candidates are:\n\
    \    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmphib1o73b.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphib1o73b.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphib1o73b.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    out = string(0)\n    for k = 1:n\n        out = out * \" \" * string(k)\n\
    \    end\n    return out\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = string(s, \" \", i)\n    end\n  \
    \  return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmple3p2caw.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \" 0\" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmple3p2caw.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmple3p2caw.jl:18\ntest set: Test\
    \ Failed at /tmp/tmple3p2caw.jl:20\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \" 0 1 2 3\" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmple3p2caw.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmple3p2caw.jl:18\ntest set: Test\
    \ Failed at /tmp/tmple3p2caw.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \" 0 1 2 3 4 5 6 7 8 9 10\" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmple3p2caw.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmple3p2caw.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmple3p2caw.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return \" \".join(string(i) for i in 0:n)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpeu3szjwi.jl:15\n  Test threw exception\n\
    \  Expression: candidate(0) == \"0\"\n  type String has no field join\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] string_sequence(n::Int64)\n\
    \     @ Main /tmp/tmpeu3szjwi.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpeu3szjwi.jl:15 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpeu3szjwi.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpeu3szjwi.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(3) == \"0 1 2 3\"\n  type String has no field join\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] string_sequence(n::Int64)\n\
    \     @ Main /tmp/tmpeu3szjwi.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpeu3szjwi.jl:16 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpeu3szjwi.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpeu3szjwi.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n  type String has no field join\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] string_sequence(n::Int64)\n\
    \     @ Main /tmp/tmpeu3szjwi.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpeu3szjwi.jl:17 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpeu3szjwi.jl:14\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeu3szjwi.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    function helper(n::Int64, result::String)::String\n        if n == 0\n  \
    \          return result\n        else\n            return helper(n-1, result\
    \ * \" \" * string(n))\n        end\n    end\n    helper(n, \"0\")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjumg0tc1.jl:23\n  Expression: candidate(3)\
    \ == \"0 1 2 3\"\n   Evaluated: \"0 3 2 1\" == \"0 1 2 3\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjumg0tc1.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjumg0tc1.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpjumg0tc1.jl:24\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 10 9 8 7 6 5 4 3 2 1\" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjumg0tc1.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjumg0tc1.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjumg0tc1.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    nums = Any[]\n    for i in 0:n\n        push!(nums, i)\n    end\n    return\
    \ join(nums, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i = 0:n\n        s = string(s, \" \", i)\n    end\n   \
    \ return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp88itigfd.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \" 0\" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp88itigfd.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp88itigfd.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp88itigfd.jl:20\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \" 0 1 2 3\" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp88itigfd.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp88itigfd.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp88itigfd.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \" 0 1 2 3 4 5 6 7 8 9 10\" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp88itigfd.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp88itigfd.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp88itigfd.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in range(0, n+1)\n        s = s * i * \" \"\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp5q_for46.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate(0) == \"0\"\\n  MethodError: no method matching\
    \ *(::String, ::Int64)\\n  Closest candidates are:\\n    *(::Any, ::Any, !Matched::Any,\
    \ !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\\\
    n    *(!Matched::T, ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:88\\\
    n    *(::Union{AbstractChar, AbstractString}, !Matched::Union{AbstractChar, AbstractString}...)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:260\\n    ...\\\
    n  Stacktrace:\\n   [1] *(::String, ::Int64, ::String)\\n     @ Base ./operators.jl:655\\\
    n   [2] string_sequence(n::Int64)\\n     @ Main /tmp/tmp5q_for46.jl:10\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp5q_for46.jl:19 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp5q_for46.jl:18\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    t1 = SystemTime() # Get the current time to calculate runtime.\n    s = [string(i)\
    \ for i in 0:n] # A mutable array containing the numbers upto n.\n    s = join(s,\
    \ \" \") # A string containing space-delimited numbers upto n.\n    t2 = SystemTime()\
    \ # Get the current time again to calculate runtime.\n    t = time_diff(t1, t2)\
    \ # The difference between the two times is the runtime.\n    println(\"runtime\
    \ of string_sequence($n) is $t ms.\")\n    return s\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8bd6r5o3.jl:21\n  Test threw exception\n\
    \  Expression: candidate(0) == \"0\"\n  UndefVarError: SystemTime not defined\n\
    \  Stacktrace:\n   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmp8bd6r5o3.jl:8\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8bd6r5o3.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8bd6r5o3.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp8bd6r5o3.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(3) == \"0 1 2 3\"\n  UndefVarError: SystemTime not defined\n  Stacktrace:\n\
    \   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmp8bd6r5o3.jl:8\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8bd6r5o3.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8bd6r5o3.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp8bd6r5o3.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n  UndefVarError: SystemTime not\
    \ defined\n  Stacktrace:\n   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmp8bd6r5o3.jl:8\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8bd6r5o3.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8bd6r5o3.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8bd6r5o3.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \"\"\" Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\n    s = \"\"\n    for i in 0:n\n        s = s\
    \ * \" \" * string(i)\n    end\n    return s\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpn37v2uw3.jl:25\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \" 0\" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn37v2uw3.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn37v2uw3.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpn37v2uw3.jl:26\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \" 0 1 2 3\" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn37v2uw3.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn37v2uw3.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpn37v2uw3.jl:27\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \" 0 1 2 3 4 5 6 7 8 9 10\" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn37v2uw3.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn37v2uw3.jl:24\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn37v2uw3.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    str = \"\"\n    for i in 0:n\n        str *= \"$i \"\n    end\n    return\
    \ str\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcmkt56j1.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcmkt56j1.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcmkt56j1.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpcmkt56j1.jl:20\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \"0 1 2 3 \" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcmkt56j1.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcmkt56j1.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpcmkt56j1.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcmkt56j1.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcmkt56j1.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcmkt56j1.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = zero(String)\n    for i in 0:n\n        s *= \" $i\"\n    end\n    return\
    \ s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpm4o_09yu.jl:19\n  Test threw exception\n\
    \  Expression: candidate(0) == \"0\"\n  MethodError: no method matching zero(::Type{String})\n\
    \  Closest candidates are:\n    zero(!Matched::Union{Type{P}, P}) where P<:Dates.Period\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Dates/src/periods.jl:53\n\
    \    zero(!Matched::T) where T<:Dates.TimeType at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Dates/src/types.jl:450\n\
    \    zero(!Matched::LinearAlgebra.UniformScaling{T}) where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:136\n\
    \    ...\n  Stacktrace:\n   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmpm4o_09yu.jl:8\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpm4o_09yu.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpm4o_09yu.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpm4o_09yu.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(3) == \"0 1 2 3\"\n  MethodError: no method matching zero(::Type{String})\n\
    \  Closest candidates are:\n    zero(!Matched::Union{Type{P}, P}) where P<:Dates.Period\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Dates/src/periods.jl:53\n\
    \    zero(!Matched::T) where T<:Dates.TimeType at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Dates/src/types.jl:450\n\
    \    zero(!Matched::LinearAlgebra.UniformScaling{T}) where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:136\n\
    \    ...\n  Stacktrace:\n   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmpm4o_09yu.jl:8\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpm4o_09yu.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm4o_09yu.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string = \"\"\n    for i in range(0, n+1)\n        string *= string(i) *\
    \ \" \"\n    end\n    return string\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2gw5pnps.jl:19\n  Test threw exception\n\
    \  Expression: candidate(0) == \"0\"\n  MethodError: objects of type String are\
    \ not callable\n  Stacktrace:\n   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmp2gw5pnps.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2gw5pnps.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2gw5pnps.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp2gw5pnps.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(3) == \"0 1 2 3\"\n  MethodError: objects of type String are not callable\n\
    \  Stacktrace:\n   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmp2gw5pnps.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2gw5pnps.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2gw5pnps.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp2gw5pnps.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n  MethodError: objects of type\
    \ String are not callable\n  Stacktrace:\n   [1] string_sequence(n::Int64)\n \
    \    @ Main /tmp/tmp2gw5pnps.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2gw5pnps.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2gw5pnps.jl:18\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2gw5pnps.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    out = \"\"\n    for i in 0:n\n        out *= string(i) * \" \"\n    end\n\
    \    return out\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpitmv86j4.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpitmv86j4.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpitmv86j4.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpitmv86j4.jl:20\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \"0 1 2 3 \" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpitmv86j4.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpitmv86j4.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpitmv86j4.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpitmv86j4.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpitmv86j4.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpitmv86j4.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    # YOUR CODE HERE\n    return string_sequence_iter(n, \"\")\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp82f7xycu.jl:16\n  Test threw exception\n\
    \  Expression: candidate(0) == \"0\"\n  UndefVarError: string_sequence_iter not\
    \ defined\n  Stacktrace:\n   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmp82f7xycu.jl:9\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp82f7xycu.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp82f7xycu.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp82f7xycu.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(3) == \"0 1 2 3\"\n  UndefVarError: string_sequence_iter not defined\n\
    \  Stacktrace:\n   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmp82f7xycu.jl:9\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp82f7xycu.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp82f7xycu.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp82f7xycu.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n  UndefVarError: string_sequence_iter\
    \ not defined\n  Stacktrace:\n   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmp82f7xycu.jl:9\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp82f7xycu.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp82f7xycu.jl:15\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp82f7xycu.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string = \"\"\n    for i = 0:n\n        string = string * i * \" \"\n   \
    \ end\n    return string\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpjw0lb6u0.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate(0) == \"0\"\\n  MethodError: no method matching\
    \ *(::String, ::Int64)\\n  Closest candidates are:\\n    *(::Any, ::Any, !Matched::Any,\
    \ !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\\\
    n    *(!Matched::T, ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:88\\\
    n    *(::Union{AbstractChar, AbstractString}, !Matched::Union{AbstractChar, AbstractString}...)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:260\\n    ...\\\
    n  Stacktrace:\\n   [1] *(::String, ::Int64, ::String)\\n     @ Base ./operators.jl:655\\\
    n   [2] string_sequence(n::Int64)\\n     @ Main /tmp/tmpjw0lb6u0.jl:10\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpjw0lb6u0.jl:19 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpjw0lb6u0.jl:18\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    if n==0\n        return \"0\"\n    end\n    output = \"\"\n    for\
    \ i in 0:n\n        output = string(output, \" \", i)\n    end\n    return output\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcic0blf5.jl:24\n  Expression: candidate(3)\
    \ == \"0 1 2 3\"\n   Evaluated: \" 0 1 2 3\" == \"0 1 2 3\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcic0blf5.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcic0blf5.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpcic0blf5.jl:25\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \" 0 1 2 3 4 5 6 7 8 9 10\" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcic0blf5.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcic0blf5.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcic0blf5.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    outstr = \"0\"\n    for i in 1:n\n        outstr = string(outstr, \" \",\
    \ i)\n    end\n    return outstr\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n < 0\n        return \"\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5f0y9b3n.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \" 0\" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5f0y9b3n.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5f0y9b3n.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp5f0y9b3n.jl:20\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \" 0 1 2 3\" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5f0y9b3n.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5f0y9b3n.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp5f0y9b3n.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \" 0 1 2 3 4 5 6 7 8 9 10\" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5f0y9b3n.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5f0y9b3n.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5f0y9b3n.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    seq = \"\"\n    for i in 0:n\n        seq = seq * string(i) * \" \"\n   \
    \ end\n    return seq\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbjsuaklg.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbjsuaklg.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbjsuaklg.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpbjsuaklg.jl:20\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \"0 1 2 3 \" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbjsuaklg.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbjsuaklg.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpbjsuaklg.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbjsuaklg.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbjsuaklg.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbjsuaklg.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    line = \"\"\n    for i in 0:n\n        line = string(line, \" \", i)\n  \
    \  end\n    return line\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp85t_pkin.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \" 0\" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp85t_pkin.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp85t_pkin.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp85t_pkin.jl:20\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \" 0 1 2 3\" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp85t_pkin.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp85t_pkin.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp85t_pkin.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \" 0 1 2 3 4 5 6 7 8 9 10\" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp85t_pkin.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp85t_pkin.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp85t_pkin.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return \" \".join(string(i) for i=0:n)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxug16x9h.jl:15\n  Test threw exception\n\
    \  Expression: candidate(0) == \"0\"\n  type String has no field join\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] string_sequence(n::Int64)\n\
    \     @ Main /tmp/tmpxug16x9h.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxug16x9h.jl:15 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxug16x9h.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpxug16x9h.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(3) == \"0 1 2 3\"\n  type String has no field join\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] string_sequence(n::Int64)\n\
    \     @ Main /tmp/tmpxug16x9h.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxug16x9h.jl:16 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxug16x9h.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpxug16x9h.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n  type String has no field join\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] string_sequence(n::Int64)\n\
    \     @ Main /tmp/tmpxug16x9h.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxug16x9h.jl:17 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxug16x9h.jl:14\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxug16x9h.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    n = n + 1\n    strings = (x for x = 0:n)\n    return join(strings)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcgaf3mbn.jl:17\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"01\" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcgaf3mbn.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcgaf3mbn.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpcgaf3mbn.jl:18\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \"01234\" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcgaf3mbn.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcgaf3mbn.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpcgaf3mbn.jl:19\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"01234567891011\" == \"0 1 2 3 4 5 6 7 8 9 10\"\
    \nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcgaf3mbn.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcgaf3mbn.jl:16\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcgaf3mbn.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = string(s,i,\" \")\n    end\n    s\
    \ = strip(s)\n    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    txt = \"\"\n    for i in 0:n\n        txt = string(txt, \" \", i)\n\
    \    end\n    txt = txt[2:end]\n    \n    return txt\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \"your solution here\"\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"\
    0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_o857dz9.jl:15\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"your solution here\" == \"0\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_o857dz9.jl:15 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_o857dz9.jl:14\ntest set: Test\
    \ Failed at /tmp/tmp_o857dz9.jl:16\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \"your solution here\" == \"0 1 2 3\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_o857dz9.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_o857dz9.jl:14\ntest set: Test\
    \ Failed at /tmp/tmp_o857dz9.jl:17\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"your solution here\" == \"0 1 2 3 4 5 6 7 8\
    \ 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_o857dz9.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_o857dz9.jl:14\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_o857dz9.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return string.(collect(0:n))\nend\nprintln(string_sequence(5))\nusing Test\n\
    \n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  stdout: None
  stderr: "b'ERROR: LoadError: MethodError: Cannot `convert` an object of type Vector{String}\
    \ to an object of type String\\nClosest candidates are:\\n  convert(::Type{String},\
    \ !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\\
    n  convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n  convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n  ...\\nStacktrace:\\n [1] string_sequence('"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = string(\"\")\n    for i = 0:n \n        s = string(s, \" \", i)\n   \
    \ end\n    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjrthk24r.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \" 0\" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjrthk24r.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjrthk24r.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpjrthk24r.jl:20\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \" 0 1 2 3\" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjrthk24r.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjrthk24r.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpjrthk24r.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \" 0 1 2 3 4 5 6 7 8 9 10\" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjrthk24r.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjrthk24r.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjrthk24r.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    for i in range(0, n+1):\n        print(i, end=\" \")\nend\nstring_sequence(5)\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8nn30qc7.jl:9\nin expression starting at /tmp/tmp8nn30qc7.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(map(string, 0:n))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo7yn8ej8.jl:16\n  Expression: candidate(3)\
    \ == \"0 1 2 3\"\n   Evaluated: \"0123\" == \"0 1 2 3\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo7yn8ej8.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo7yn8ej8.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpo7yn8ej8.jl:17\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"012345678910\" == \"0 1 2 3 4 5 6 7 8 9 10\"\
    \nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo7yn8ej8.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo7yn8ej8.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo7yn8ej8.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    output = \"\"\n    for i = 0:n\n        output = string(output, i, \" \"\
    )\n    end\n    return strip(output)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    i = 0\n    str = \"\"\n    while i <= n\n        str = str * \" \" * string(i)\n\
    \        i += 1\n    end\n    return str\nend\nusing Test\n\n@testset begin\n\n\
    candidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgzgma2mw.jl:21\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \" 0\" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgzgma2mw.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgzgma2mw.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpgzgma2mw.jl:22\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \" 0 1 2 3\" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgzgma2mw.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgzgma2mw.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpgzgma2mw.jl:23\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \" 0 1 2 3 4 5 6 7 8 9 10\" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgzgma2mw.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgzgma2mw.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgzgma2mw.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i = 0:n\n        s = string(s, \" \", i)\n    end\n   \
    \ return strip(s)\nend\n\"\"\" Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n   \
    \ >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp28ipkrd4.jl:14\nin expression starting at /tmp/tmp28ipkrd4.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \  if n == 0\n    return \"0\"\n  else\n    return string_sequence(n-1) * \" \"\
    \ * string(n)\n  end\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        s = \"\"\n        for\
    \ i in range(0, n)\n            s = string(s, \" \", i)\n        return s\n  \
    \  end\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t\
    @test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsqdtx9gj.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsqdtx9gj.jl:1\n\
    in expression starting at /tmp/tmpsqdtx9gj.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = string(s, \" \", i)\n    end\n  \
    \  return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpunrvlrcn.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \" 0\" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpunrvlrcn.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpunrvlrcn.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpunrvlrcn.jl:20\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \" 0 1 2 3\" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpunrvlrcn.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpunrvlrcn.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpunrvlrcn.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \" 0 1 2 3 4 5 6 7 8 9 10\" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpunrvlrcn.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpunrvlrcn.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpunrvlrcn.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = string(s, i, \" \")\n    end\n  \
    \  return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2spjmxqj.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2spjmxqj.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2spjmxqj.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp2spjmxqj.jl:20\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \"0 1 2 3 \" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2spjmxqj.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2spjmxqj.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp2spjmxqj.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2spjmxqj.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2spjmxqj.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2spjmxqj.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    output = \"\"\n    for number in 0:n\n        output = string(output, \"\
    \ \", number)\n    end\n    return output\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxqkov740.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \" 0\" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxqkov740.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxqkov740.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpxqkov740.jl:20\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \" 0 1 2 3\" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxqkov740.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxqkov740.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpxqkov740.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \" 0 1 2 3 4 5 6 7 8 9 10\" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxqkov740.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxqkov740.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxqkov740.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return string(join(collect(0:n),\" \"))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    lst = [] \n    i = 0\n    while i <= n \n        push!(lst, string(i))\n\
    \        i += 1\n    end\n    return join(lst, \" \")\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    sequence = \"\"\n    for i in 0:n\n        sequence = string(sequence, i)\n\
    \        if i != n\n            sequence = string(sequence, \" \")\n        end\n\
    \    end\n    return sequence\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(collect(0:n),\" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = string(0)\n    for i in 1:n\n        s = s * \" \" * string(i)\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    list = []\n    #iterate over n\n    for i = 0:n\n        #append i\
    \ to list as string\n        push!(list, string(i))\n    end\n    #join the list\
    \ with a space character\n    return join(list, \" \")\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n \n        s = string(s,i)\n        if i != n\n\
    \            s = string(s,\" \")\n        end\n    end\n    return s\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    list=[]\n    for i in 0:n\n        push!(list,i)\n    end\n    string = join(map(string,list),\
    \ \" \")\n    return string\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"\
    0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqlirg48r.jl:20\n  Test threw exception\n\
    \  Expression: candidate(0) == \"0\"\n  UndefVarError: string not defined\n  Stacktrace:\n\
    \   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmpqlirg48r.jl:12\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqlirg48r.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqlirg48r.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpqlirg48r.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(3) == \"0 1 2 3\"\n  UndefVarError: string not defined\n  Stacktrace:\n\
    \   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmpqlirg48r.jl:12\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqlirg48r.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqlirg48r.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpqlirg48r.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n  UndefVarError: string not defined\n\
    \  Stacktrace:\n   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmpqlirg48r.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqlirg48r.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqlirg48r.jl:19\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqlirg48r.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    sequence = \"\"\n    for i in 0:n\n        sequence = sequence * string(i)\
    \ * \" \"\n    end\n    return sequence\nend\nusing Test\n\n@testset begin\n\n\
    candidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqhw7on8a.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqhw7on8a.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqhw7on8a.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpqhw7on8a.jl:20\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \"0 1 2 3 \" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqhw7on8a.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqhw7on8a.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpqhw7on8a.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqhw7on8a.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqhw7on8a.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqhw7on8a.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return \" \".join(string(i) for i in 0:n)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpabp0pmfu.jl:15\n  Test threw exception\n\
    \  Expression: candidate(0) == \"0\"\n  type String has no field join\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] string_sequence(n::Int64)\n\
    \     @ Main /tmp/tmpabp0pmfu.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpabp0pmfu.jl:15 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpabp0pmfu.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpabp0pmfu.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(3) == \"0 1 2 3\"\n  type String has no field join\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] string_sequence(n::Int64)\n\
    \     @ Main /tmp/tmpabp0pmfu.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpabp0pmfu.jl:16 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpabp0pmfu.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpabp0pmfu.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n  type String has no field join\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] string_sequence(n::Int64)\n\
    \     @ Main /tmp/tmpabp0pmfu.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpabp0pmfu.jl:17 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpabp0pmfu.jl:14\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpabp0pmfu.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n==0\n        return \"0\"\n    else\n        for x in 0:n-1\n       \
    \     println(x)\n        end\n        return \"$n\"\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  stdout: "0\n1\n2\ntest set: Test Failed at /tmp/tmp63xkqliv.jl:23\n  Expression:\
    \ candidate(3) == \"0 1 2 3\"\n   Evaluated: \"3\" == \"0 1 2 3\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp63xkqliv.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp63xkqliv.jl:21\n0\n1\n2\n3\n4\n\
    5\n6\n7\n8\n9\ntest set: Test Failed at /tmp/tmp63xkqliv.jl:24\n  Expression:\
    \ candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n   Evaluated: \"10\" == \"0 1 2\
    \ 3 4 5 6 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp63xkqliv.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp63xkqliv.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp63xkqliv.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n),\" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \   return join(map(string,0:n),\" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return string(n)\n    else\n        return string(n) *\
    \ \" \" * string_sequence(n-1)\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5rflkudz.jl:20\n  Expression: candidate(3)\
    \ == \"0 1 2 3\"\n   Evaluated: \"3 2 1 0\" == \"0 1 2 3\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5rflkudz.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5rflkudz.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp5rflkudz.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"10 9 8 7 6 5 4 3 2 1 0\" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5rflkudz.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5rflkudz.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5rflkudz.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    seq = \"\"\n    for x in 0:n \n        seq = seq * \" \" * string(x)\n\
    \    end\n    return seq\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp92jc0yre.jl:20\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \" 0\" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp92jc0yre.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp92jc0yre.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp92jc0yre.jl:21\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \" 0 1 2 3\" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp92jc0yre.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp92jc0yre.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp92jc0yre.jl:22\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \" 0 1 2 3 4 5 6 7 8 9 10\" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp92jc0yre.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp92jc0yre.jl:19\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp92jc0yre.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    sequence = [string(i) for i in 0:n] \n    join(sequence, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i = 0:n\n        s = s * string(i) * \" \"\n    end\n \
    \   return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3guz1j1k.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3guz1j1k.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3guz1j1k.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp3guz1j1k.jl:20\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \"0 1 2 3 \" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3guz1j1k.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3guz1j1k.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp3guz1j1k.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3guz1j1k.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3guz1j1k.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3guz1j1k.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \   if n == 0 \n       return \"0\"\n   else \n       return string_sequence(n-1)\
    \ * \" \" * string(n)\n   end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return \" \".join(string(i) for i in 0:n)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpb_mv5u8e.jl:15\n  Test threw exception\n\
    \  Expression: candidate(0) == \"0\"\n  type String has no field join\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] string_sequence(n::Int64)\n\
    \     @ Main /tmp/tmpb_mv5u8e.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpb_mv5u8e.jl:15 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpb_mv5u8e.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpb_mv5u8e.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(3) == \"0 1 2 3\"\n  type String has no field join\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] string_sequence(n::Int64)\n\
    \     @ Main /tmp/tmpb_mv5u8e.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpb_mv5u8e.jl:16 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpb_mv5u8e.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpb_mv5u8e.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n  type String has no field join\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] string_sequence(n::Int64)\n\
    \     @ Main /tmp/tmpb_mv5u8e.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpb_mv5u8e.jl:17 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpb_mv5u8e.jl:14\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb_mv5u8e.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    out_string = \"\"\n    for i in 0:n\n        out_string = out_string * string(i)\
    \ * \" \"\n    end\n    return out_string[1:end-1]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    str = \"\"\n    for i in 0:n\n        str = str * string(i) * \" \"\n   \
    \ end\n    return str\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps6gsp2s6.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps6gsp2s6.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps6gsp2s6.jl:18\ntest set: Test\
    \ Failed at /tmp/tmps6gsp2s6.jl:20\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \"0 1 2 3 \" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps6gsp2s6.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps6gsp2s6.jl:18\ntest set: Test\
    \ Failed at /tmp/tmps6gsp2s6.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps6gsp2s6.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps6gsp2s6.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps6gsp2s6.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    seq = \"\"\n    for i = 0:n\n        seq = seq * string(i) * \" \"\n    end\n\
    \    return seq\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsbxhjoli.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsbxhjoli.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsbxhjoli.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpsbxhjoli.jl:20\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \"0 1 2 3 \" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsbxhjoli.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsbxhjoli.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpsbxhjoli.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsbxhjoli.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsbxhjoli.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsbxhjoli.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    n_string = \"\"\n    for i in 0:n\n        n_string = n_string * i\n    end\n\
    \    return n_string\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpyusewjgx.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate(0) == \"0\"\\n  MethodError: no method matching\
    \ *(::String, ::Int64)\\n  Closest candidates are:\\n    *(::Any, ::Any, !Matched::Any,\
    \ !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\\\
    n    *(!Matched::T, ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:88\\\
    n    *(::Union{AbstractChar, AbstractString}, !Matched::Union{AbstractChar, AbstractString}...)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:260\\n    ...\\\
    n  Stacktrace:\\n   [1] string_sequence(n::Int64)\\n     @ Main /tmp/tmpyusewjgx.jl:10\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpyusewjgx.jl:19 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpyusewjgx.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmpyusewjgx.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == \"0 1 2 3\"\\n  MethodError: no method matching *(::String,\
    \ ::Int64)\\n  Closest candidates are:\\n    *(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\\n    *(!Matched::T,\
    \ ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32,\
    \ UInt64, UInt8} at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:88\\n\
    \    *(::Union{AbstractChar, AbstractString}, !Matched::Union{AbstractChar, AbstractString}...)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:260\\n    ...\\\
    n  Stacktrace:\\n   [1] string_sequence(n::Int64)\\n     @ Main /tmp/tmpyusewjgx.jl:10\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpyusewjgx.jl:20 [inlined]\\\
    n   [4] macro "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s=\"\"\n    for i in 0:n\n        s=s*string(i)*\" \"\n    end\n    return\
    \ s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkt8xvyg1.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkt8xvyg1.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkt8xvyg1.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpkt8xvyg1.jl:20\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \"0 1 2 3 \" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkt8xvyg1.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkt8xvyg1.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpkt8xvyg1.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkt8xvyg1.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkt8xvyg1.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkt8xvyg1.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = string(s,i,\" \")\n    end\n    return\
    \ strip(s)\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.((0:n) .+ 1), \" \")\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_opg97l9.jl:15\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"1\" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_opg97l9.jl:15 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_opg97l9.jl:14\ntest set: Test\
    \ Failed at /tmp/tmp_opg97l9.jl:16\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \"1 2 3 4\" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_opg97l9.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_opg97l9.jl:14\ntest set: Test\
    \ Failed at /tmp/tmp_opg97l9.jl:17\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"1 2 3 4 5 6 7 8 9 10 11\" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_opg97l9.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_opg97l9.jl:14\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_opg97l9.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    numbers = [string(i) for i in range(0, n+1)]\n    return join(numbers, \"\
    \ \")\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpri1my7k2.jl:16\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 1\" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpri1my7k2.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpri1my7k2.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpri1my7k2.jl:17\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \"0 1 2 3 4\" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpri1my7k2.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpri1my7k2.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpri1my7k2.jl:18\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 11\" == \"0 1 2 3 4 5\
    \ 6 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpri1my7k2.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpri1my7k2.jl:15\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpri1my7k2.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \"\"\n    num = 0\n    str = \"\"\n    while num <= n\n        str = string(str,\
    \ num)\n        num += 1\n        if num <= n\n            str = string(str, \"\
    \ \")\n        end\n    end\n    return str\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"0\"\n    for i in 1:n\n        s = string(s, \" \", i)\n    end\n \
    \   return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
