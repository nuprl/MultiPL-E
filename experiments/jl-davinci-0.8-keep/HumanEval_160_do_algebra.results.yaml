name: HumanEval_160_do_algebra
language: jl
results:
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    \"\"\"\n    Input:\n        operator: a list of strings (a + b)\n    \
    \    operand: a list of integers (1 + 2)\n    Output:\n        the result of the\
    \ algebraic expression in integer format\n    \"\"\"\n    result = operand[1]\n\
    \    for i = 1:length(operator)\n        if operator[i] == \"+\"\n           \
    \ result += operand[i+1]\n        elseif operator[i] == \"-\"\n            result\
    \ -= operand[i+1]\n        elseif operator[i] == \"*\"\n            result *=\
    \ operand[i+1]\n        elseif operator[i] == \"//\"\n            result //= operand[i+1]\n\
    \        elseif operator[i] == \"**\"\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpheghcczt.jl:55\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpheghcczt.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpheghcczt.jl:53\ntest set: Error\
    \ During Test at /tmp/tmpheghcczt.jl:56\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpheghcczt.jl:47\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpheghcczt.jl:56 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpheghcczt.jl:53\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpheghcczt.jl:51\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    \n    i = 1\n    result = operand[1]\n    while i < length(operator)\n\
    \        if operator[i] == \"+\"\n            result = result + operand[i+1]\n\
    \        elseif operator[i] == \"-\"\n            result = result - operand[i+1]\n\
    \        elseif operator[i] == \"*\"\n            result = result * operand[i+1]\n\
    \        elseif operator[i] == \"//\"\n            result = result // operand[i+1]\n\
    \        elseif operator[i] == \"**\"\n            result = result ^ operand[i+1]\n\
    \        end\n        i = i + 1\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpovq3su4z.jl:50\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 32 == 37\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpovq3su4z.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpovq3su4z.jl:49\ntest set: Test\
    \ Failed at /tmp/tmpovq3su4z.jl:51\n  Expression: candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9\n   Evaluated: 20 == 9\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpovq3su4z.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpovq3su4z.jl:49\ntest set: Error\
    \ During Test at /tmp/tmpovq3su4z.jl:52\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(7//3)\n  Stacktrace:\n\
    \   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n     @ ./number.jl:7\
    \ [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpovq3su4z.jl:43\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpovq3su4z.jl:52 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpovq3su4z.jl:49\nTest Summary:\
    \ | Fail  Error  Total\ntest set      |    2      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpovq3su4z.jl:47\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 2:length(operand)\n        if operator[i-1]\
    \ == \"-\"\n            result -= operand[i]\n        elseif operator[i-1] ==\
    \ \"+\"\n            result += operand[i]\n        elseif operator[i-1] == \"\
    *\"\n            result *= operand[i]\n        elseif operator[i-1] == \"//\"\n\
    \            result //= operand[i]\n        elseif operator[i-1] == \"**\"\n \
    \           result ^= operand[i]\n        end\n    end\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp3nvchvq3.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3nvchvq3.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3nvchvq3.jl:46\ntest set: Error\
    \ During Test at /tmp/tmp3nvchvq3.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp3nvchvq3.jl:40\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp3nvchvq3.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp3nvchvq3.jl:46\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3nvchvq3.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for (op, num) in zip(operator, operand[2:end])\n\
    \        if op == \"+\"\n            result += num\n        elseif op == \"-\"\
    \n            result -= num\n        elseif op == \"*\"\n            result *=\
    \ num\n        elseif op == \"//\"\n            result \xF7= num\n        elseif\
    \ op == \"**\"\n            result ^= num\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp4lbpp1r8.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4lbpp1r8.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4lbpp1r8.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4lbpp1r8.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 2:length(operand)\n        o = operator[i-1]\n\
    \        n = operand[i]\n        if o == \"+\"\n            result += n\n    \
    \    elseif o == \"-\"\n            result -= n\n        elseif o == \"*\"\n \
    \           result *= n\n        elseif o == \"//\"\n            result = div(result,\
    \ n)\n        elseif o == \"**\"\n            result ^= n\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2rcrgij0.jl:50\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2rcrgij0.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2rcrgij0.jl:48\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2rcrgij0.jl:46\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i = 1:length(operator)\n        eval(\"result\
    \ = $(operator[i])(result, operand[i+1])\")\n    end\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpj9uczacr.jl:37\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 2 == 37\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj9uczacr.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj9uczacr.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpj9uczacr.jl:38\n  Expression: candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9\n   Evaluated: 2 == 9\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj9uczacr.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj9uczacr.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpj9uczacr.jl:39\n  Expression: candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8\n   Evaluated: 7 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj9uczacr.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj9uczacr.jl:36\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj9uczacr.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    expression = operand[1]\n    for i in 2:length(operand)\n        expression\
    \ = eval(Meta.parse(string(expression, operator[i-1], operand[i])))\n    end\n\
    \    return expression\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxv6ztnzs.jl:37\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  Base.Meta.ParseError(\"\
    use \\\"x^y\\\" instead of \\\"x**y\\\" for exponentiation, and \\\"x...\\\" instead\
    \ of \\\"**x\\\" for splatting.\")\n  Stacktrace:\n   [1] #parse#3\n     @ ./meta.jl:237\
    \ [inlined]\n   [2] parse(str::String; raise::Bool, depwarn::Bool)\n     @ Base.Meta\
    \ ./meta.jl:268\n   [3] parse\n     @ ./meta.jl:268 [inlined]\n   [4] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmpxv6ztnzs.jl:28\n   [5] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpxv6ztnzs.jl:37 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpxv6ztnzs.jl:36\ntest set:\
    \ Test Failed at /tmp/tmpxv6ztnzs.jl:38\n  Expression: candidate([\"+\", \"*\"\
    , \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxv6ztnzs.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxv6ztnzs.jl:36\ntest set: Error\
    \ During Test at /tmp/tmpxv6ztnzs.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert(#unused#::Type{Int64},\
    \ x::Rational{Int64})\n     @ Base ./number.jl:7\n   [3] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmpxv6ztnzs.jl:30\n   [4] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpxv6ztnzs.jl:39 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Te"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxv6ztnzs.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result //= operand[i+1]\n        elseif operator[i] == \"**\"\n \
    \           result ^= operand[i+1]\n        end\n    end\n    return result\n\
    end\noperator = [\"+\", \"*\", \"-\"]\noperand = [2, 3, 4, 5]\n@assert do_algebra(operator,\
    \ operand) == 9\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: AssertionError: do_algebra(operator, operand) == 9\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmppe2shv4f.jl:44\nin expression\
    \ starting at /tmp/tmppe2shv4f.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # insert your solution here\n    expression = string(operand[1])\n   \
    \ for i in 2:length(operand)\n        expression = string(expression, \" \", operator[i-1],\
    \ \" \", operand[i])\n    end\n    return eval(parse(expression))\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp1nhyic2p.jl:38\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ no method matching parse(::String)\n  Closest candidates are:\n    parse(!Matched::Type{T},\
    \ !Matched::AbstractString) where T<:Complex at /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:381\n\
    \    parse(!Matched::Type{T}, !Matched::AbstractChar; base) where T<:Integer at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:40\n    parse(!Matched::Type{T},\
    \ !Matched::AbstractString; base) where T<:Integer at /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:240\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp1nhyic2p.jl:31\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1nhyic2p.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1nhyic2p.jl:37\ntest set:\
    \ Error During Test at /tmp/tmp1nhyic2p.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: no method\
    \ matching parse(::String)\n  Closest candidates are:\n    parse(!Matched::Type{T},\
    \ !Matched::AbstractString) where T<:Complex at /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:381\n\
    \    parse(!Matched::Type{T}, !Matched::AbstractChar; base) where T<:Integer at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:40\n    parse(!Matched::Type{T},\
    \ !Matched::AbstractString; base) where T<:Integer at /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:240\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp1nhyic2p.jl:31\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1nhyic2p.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shar"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1nhyic2p.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    sum = operand[1]\n    for i = 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            sum += operand[i+1]\n        elseif operator[i] == \"\
    -\"\n            sum -= operand[i+1]\n        elseif operator[i] == \"*\"\n  \
    \          sum *= operand[i+1]\n        elseif operator[i] == \"//\"\n       \
    \     sum = floor(Int64, sum / operand[i+1])\n        elseif operator[i] == \"\
    **\"\n            sum = floor(Int64, sum ^ operand[i+1])\n        end\n    end\n\
    \    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbdjv33ol.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbdjv33ol.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbdjv33ol.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbdjv33ol.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result/operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result = result^operand[i+1]\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpne741a0l.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpne741a0l.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpne741a0l.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpne741a0l.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    operand[1] = parse(Int64, operator[1])\n    for i = 2:length(operator)\n\
    \        operand[i] = operand[i-1] * operand[i]\n    end\n    \n    return sum(operand)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp1mft0tq0.jl:38\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  ArgumentError:\
    \ invalid base 10 digit '*' in \"**\"\n  Stacktrace:\n   [1] tryparse_internal(#unused#::Type{Int64},\
    \ s::String, startpos::Int64, endpos::Int64, base_::Int64, raise::Bool)\n    \
    \ @ Base ./parse.jl:137\n   [2] parse(::Type{Int64}, s::String; base::Nothing)\n\
    \     @ Base ./parse.jl:241\n   [3] parse\n     @ ./parse.jl:241 [inlined]\n \
    \  [4] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n     @ Main\
    \ /tmp/tmp1mft0tq0.jl:26\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp1mft0tq0.jl:38 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp1mft0tq0.jl:37\ntest set:\
    \ Error During Test at /tmp/tmp1mft0tq0.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  ArgumentError: input\
    \ string is empty or only contains whitespace\n  Stacktrace:\n   [1] tryparse_internal(#unused#::Type{Int64},\
    \ s::String, startpos::Int64, endpos::Int64, base_::Int64, raise::Bool)\n    \
    \ @ Base ./parse.jl:109\n   [2] parse(::Type{Int64}, s::String; base::Nothing)\n\
    \     @ Base ./parse.jl:241\n   [3] parse\n     @ ./parse.jl:241 [inlined]\n \
    \  [4] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n     @ Main\
    \ /tmp/tmp1mft0tq0.jl:26\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp1mft0tq0.jl:39 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp1mft0tq0.jl:37\ntest set:\
    \ Error During Test at /tmp/tmp1mft0tq0.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  ArgumentError: invalid base 10\
    \ digit '/' in \"//\"\n  Stacktrac"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1mft0tq0.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    expression = \"\"\n    for i in 1:length(operator)\n        if(operator[i]\
    \ == \"//\")\n            expression = string(expression, \"div(\",operand[i],\
    \ \",\", operand[i+1], \")\")\n        else\n            expression = string(expression,\
    \ \"\",operand[i], operator[i], operand[i+1])\n        end\n    end\n    #@show\
    \ expression\n    return eval(parse(expression))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"],\
    \ [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5])\
    \ == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpuod2l9et.jl:42\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ no method matching parse(::String)\n  Closest candidates are:\n    parse(!Matched::Type{T},\
    \ !Matched::AbstractString) where T<:Complex at /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:381\n\
    \    parse(!Matched::Type{T}, !Matched::AbstractChar; base) where T<:Integer at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:40\n    parse(!Matched::Type{T},\
    \ !Matched::AbstractString; base) where T<:Integer at /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:240\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpuod2l9et.jl:35\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuod2l9et.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuod2l9et.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpuod2l9et.jl:43\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: no method\
    \ matching parse(::String)\n  Closest candidates are:\n    parse(!Matched::Type{T},\
    \ !Matched::AbstractString) where T<:Complex at /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:381\n\
    \    parse(!Matched::Type{T}, !Matched::AbstractChar; base) where T<:Integer at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:40\n    parse(!Matched::Type{T},\
    \ !Matched::AbstractString; base) where T<:Integer at /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:240\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpuod2l9et.jl:35\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuod2l9et.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ /shar"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuod2l9et.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    a = operand[1]\n    for i in 2:length(operand)\n        if operator[i-1]\
    \ == \"+\"\n            a += operand[i]\n        elseif operator[i-1] == \"-\"\
    \n            a -= operand[i]\n        elseif operator[i-1] == \"*\"\n       \
    \     a *= operand[i]\n        elseif operator[i-1] == \"//\"\n            a =\
    \ convert(Int64, a / operand[i])\n        elseif operator[i-1] == \"**\"\n   \
    \         a = convert(Int64, a ^ operand[i])\n        end\n    end\n    return\
    \ a\nend\n \nprintln(do_algebra([\"+\", \"*\", \"-\"], [2, 3, 4, 5]))\nprintln(do_algebra([\"\
    +\", \"-\"], [2, 3, 4]))\nprintln(do_algebra([\"+\", \"-\"], [2, 3, 4, 5]))\n\
    println(do_algebra([\"+\", \"*\", \"-\"], [2, 3, 4]))\nusing Test\n\n@testset\
    \ begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"],\
    \ [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5])\
    \ == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "15\n1\n"
  stderr: "ERROR: LoadError: BoundsError: attempt to access 2-element Vector{String}\
    \ at index [3]\nStacktrace:\n [1] getindex\n   @ ./array.jl:861 [inlined]\n [2]\
    \ do_algebra(operator::Vector{String}, operand::Vector{Int64})\n   @ Main /tmp/tmppsgdmdhc.jl:28\n\
    \ [3] top-level scope\n   @ /tmp/tmppsgdmdhc.jl:45\nin expression starting at\
    \ /tmp/tmppsgdmdhc.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpk7s78znz.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpk7s78znz.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk7s78znz.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk7s78znz.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpk7s78znz.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpk7s78znz.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk7s78znz.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/cento"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk7s78znz.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # Your code here\n    result = operand[1]\n    operand = operand[2:end]\n\
    \    for i in 1:length(operator)\n        op = operator[i]\n        if op == \"\
    +\"\n            result += operand[i]\n        elseif op == \"-\"\n          \
    \  result -= operand[i]\n        elseif op == \"*\"\n            result *= operand[i]\n\
    \        elseif op == \"//\"\n            result = result \xF7 operand[i]\n  \
    \      elseif op == \"**\"\n            result ^= operand[i]\n        end\n  \
    \  end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptddvonke.jl:51\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptddvonke.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptddvonke.jl:49\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptddvonke.jl:47\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = div(result, operand[i+1])\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpp5is1h4v.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp5is1h4v.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp5is1h4v.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp5is1h4v.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i = 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = result \xF7 operand[i+1]\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpfuzxjymk.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfuzxjymk.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfuzxjymk.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfuzxjymk.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # your code here\n    i=1\n    k=0\n    for j=1:length(operator)\n   \
    \     if operator[j]==\"//\"\n            operand[i]=floor(Int,operand[i]/operand[i+1])\n\
    \            operand=deleteat!(operand,i+1)\n            operator=deleteat!(operator,j)\n\
    \            k=1\n        elseif operator[j]==\"**\"\n            operand[i]=operand[i]^operand[i+1]\n\
    \            operand=deleteat!(operand,i+1)\n            operator=deleteat!(operator,j)\n\
    \            k=1\n        elseif operator[j]==\"*\"\n            operand[i]=operand[i]*operand[i+1]\n\
    \            operand=deleteat!(operand,i+1)\n            operator=deleteat!(operator,j)\n\
    \            k=1\n        elseif operator[j]==\"-\"\n            operand[i]=operand[i]-operand[i+1]\n\
    \            operand=deleteat!(operand,i+1)\n            operator=deleteat!(operator,j)\n\
    \            k=1\n        elseif operator[j]==\"+\"\n            operand[i]=operand[i]+operand[i+1]\n\
    \            operand=deleteat!(operand,i+1)\n            operator=deleteat!(operator,j)\n\
    \            k=1\n        end\n    end\n    if k==1\n        do_algebra(operator,operand)\n\
    \    else\n        operand[1]\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpcxw2hcor.jl:68\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  BoundsError:\
    \ attempt to access 1-element Vector{String} at index [3]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmpcxw2hcor.jl:30\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpcxw2hcor.jl:68 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpcxw2hcor.jl:67\ntest set:\
    \ Error During Test at /tmp/tmpcxw2hcor.jl:69\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  BoundsError: attempt\
    \ to access 1-element Vector{String} at index [3]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmpcxw2hcor.jl:30\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpcxw2hcor.jl:69 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpcxw2hcor.jl:67\ntest set:\
    \ Error During Test at /tmp/tmpcxw2hcor.jl:70\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  BoundsError: attempt to access\
    \ 1-element Vector{String} at index [2]\n  Stacktrace:\n   [1] getindex\n    \
    \ @ ./array.jl:861 [inlined]\n   [2] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpcxw2hcor.jl:30\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpcxw2hcor.jl:70 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/st"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcxw2hcor.jl:65\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for (i, op) in enumerate(operator)\n        result\
    \ = eval(string(result, op, operand[i+1]))\n    end\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpuumeu50_.jl:37\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type String to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpuumeu50_.jl:30\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuumeu50_.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuumeu50_.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpuumeu50_.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type String to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpuumeu50_.jl:30\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuumeu50_.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuumeu50_.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # your code goes here\n    oper_stack = []\n    oper_stack = push!(oper_stack,\
    \ operand[1])\n    for i in 2:length(operand)\n        op = operator[i-1]\n  \
    \      if op == \"*\"\n            push!(oper_stack, pop!(oper_stack) * operand[i])\n\
    \        elseif op == \"+\"\n            push!(oper_stack, pop!(oper_stack) +\
    \ operand[i])\n        elseif op == \"-\"\n            push!(oper_stack, pop!(oper_stack)\
    \ - operand[i])\n        elseif op == \"//\"\n            push!(oper_stack, pop!(oper_stack)\
    \ \xF7 operand[i])\n        elseif op == \"**\"\n            push!(oper_stack,\
    \ pop!(oper_stack) ^ operand[i])\n        end\n    end\n    return pop!(oper_stack)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp12gbw83m.jl:51\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp12gbw83m.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp12gbw83m.jl:49\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp12gbw83m.jl:47\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    if length(operator) != length(operand) - 1\n        throw(ErrorException(\"\
    Invalid operator and operand length.\"))\n    end\n    if length(operator) < 1\
    \ || length(operand) < 2\n        throw(ErrorException(\"Operator and operand\
    \ are empty.\"))\n    end\n    result = operand[1]\n    for i = 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = result \xF7 operand[i+1]\n        elseif operator[i]\
    \ == \"**\"\n            result ^= operand[i+1]\n        else\n            throw(ErrorException(\"\
    Invalid operator\"))\n        end\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5y02tra8.jl:56\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5y02tra8.jl:56 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5y02tra8.jl:54\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5y02tra8.jl:52\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # write your codes here...\nend\n \nusing Test\n\n@testset begin\n\ncandidate\
    \ = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpi301gukx.jl:34\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpi301gukx.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi301gukx.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi301gukx.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpi301gukx.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpi301gukx.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi301gukx.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/cento"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi301gukx.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result / operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result = result ^ operand[i+1]\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpn2o9thpj.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn2o9thpj.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn2o9thpj.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn2o9thpj.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    operand = operand[2:end]\n    for (op, opr) in\
    \ zip(operator, operand)\n        if op == \"+\"\n            result += opr\n\
    \        elseif op == \"-\"\n            result -= opr\n        elseif op == \"\
    *\"\n            result *= opr\n        elseif op == \"//\"\n            result\
    \ //= opr\n        elseif op == \"**\"\n            result ^= opr\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo0g2vek_.jl:49\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo0g2vek_.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo0g2vek_.jl:47\ntest set: Error\
    \ During Test at /tmp/tmpo0g2vek_.jl:50\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpo0g2vek_.jl:41\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpo0g2vek_.jl:50 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpo0g2vek_.jl:47\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo0g2vek_.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpb9qsot3x.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpb9qsot3x.jl:1\n\
    in expression starting at /tmp/tmpb9qsot3x.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    \n    # YOUR CODE HERE\n    \nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_80naj1x.jl:35\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp_80naj1x.jl:29\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_80naj1x.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_80naj1x.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp_80naj1x.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp_80naj1x.jl:29\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_80naj1x.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/cento"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_80naj1x.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    \nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp33es3g7g.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp33es3g7g.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp33es3g7g.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp33es3g7g.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp33es3g7g.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp33es3g7g.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp33es3g7g.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/cento"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp33es3g7g.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # your code goes here\nend\n \n \n \n    \n    \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t\
    @test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4369endx.jl:285\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp4369endx.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4369endx.jl:285 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4369endx.jl:284\ntest set:\
    \ Error During Test at /tmp/tmp4369endx.jl:286\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp4369endx.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4369endx.jl:286 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4369endx.jl:282\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for (i, op) in enumerate(operator)\n        result\
    \ = calc(result, op, operand[i+1])\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpb6vy85fz.jl:37\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  UndefVarError:\
    \ calc not defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmpb6vy85fz.jl:28\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb6vy85fz.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb6vy85fz.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpb6vy85fz.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  UndefVarError: calc not\
    \ defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpb6vy85fz.jl:28\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb6vy85fz.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb6vy85fz.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpb6vy85fz.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  UndefVarError: calc not defined\n\
    \  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpb6vy85fz.jl:28\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb6vy85fz.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb6vy85fz.jl:36\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb6vy85fz.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    \nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmppbxw24pe.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmppbxw24pe.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppbxw24pe.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppbxw24pe.jl:32\ntest set:\
    \ Error During Test at /tmp/tmppbxw24pe.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmppbxw24pe.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppbxw24pe.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/cento"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppbxw24pe.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    \"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3kpf1o9y.jl:1\nin expression starting at /tmp/tmp3kpf1o9y.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # your code goes here\n    n = length(operator)\n    res = operand[1]\n\
    \    for i in 1:n\n        if operator[i] == \"+\"\n            res += operand[i+1]\n\
    \        elseif operator[i] == \"-\"\n            res -= operand[i+1]\n      \
    \  elseif operator[i] == \"*\"\n            res *= operand[i+1]\n        elseif\
    \ operator[i] == \"//\"\n            res = floor(Int64, res / operand[i+1])\n\
    \        elseif operator[i] == \"**\"\n            res = res ^ operand[i+1]\n\
    \        end\n    end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx6w1j5p3.jl:50\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx6w1j5p3.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx6w1j5p3.jl:48\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx6w1j5p3.jl:46\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    res = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            res += operand[i+1]\n        elseif operator[i] == \"\
    -\"\n            res -= operand[i+1]\n        elseif operator[i] == \"*\"\n  \
    \          res *= operand[i+1]\n        elseif operator[i] == \"//\"\n       \
    \     res = div(res, operand[i+1])\n        elseif operator[i] == \"**\"\n   \
    \         res ^= operand[i+1]\n        end\n    end\n    return res\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp36ctw2gj.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp36ctw2gj.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp36ctw2gj.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp36ctw2gj.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    \n    res = operand[1]\n    for i = 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            res += operand[i+1]\n        elseif operator[i] == \"\
    -\"\n            res -= operand[i+1]\n        elseif operator[i] == \"*\"\n  \
    \          res *= operand[i+1]\n        elseif operator[i] == \"//\"\n       \
    \     res //= operand[i+1]\n        elseif operator[i] == \"**\"\n           \
    \ res ^= operand[i+1]\n        end\n    end\n    return res\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm128n5na.jl:49\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm128n5na.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm128n5na.jl:47\ntest set: Error\
    \ During Test at /tmp/tmpm128n5na.jl:50\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpm128n5na.jl:41\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpm128n5na.jl:50 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpm128n5na.jl:47\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm128n5na.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for (i, op) in enumerate(operator)\n        if\
    \ op == \"+\"\n            result += operand[i+1]\n        elseif op == \"-\"\n\
    \            result -= operand[i+1]\n        elseif op == \"*\"\n            result\
    \ *= operand[i+1]\n        elseif op == \"//\"\n            result = floor(Int64,\
    \ result/operand[i+1])\n        elseif op == \"**\"\n            result ^= operand[i+1]\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfzghd_fz.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfzghd_fz.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfzghd_fz.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfzghd_fz.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # your code here\n    expr = string(operand[1])\n    for (i, op) in enumerate(operator)\n\
    \        expr = string(expr, \" \", op, \" \", operand[i+1])\n    end\n    return\
    \ parse(Int64, expr)\nend\n \n\"\"\"\n    Given an string of operators, and an\
    \ algebric expression, evaluate the expression \n    and return the answer.\n\
    using Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptbe13olk.jl:34\nin expression starting at\
    \ /tmp/tmptbe13olk.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    \n    for i = 1:length(operator)\n        if i == 1\n            result\
    \ = operand[i]\n        end\n        if operator[i] == \"+\"\n            result\
    \ = result + operand[i+1]\n        elseif operator[i] == \"-\"\n            result\
    \ = result - operand[i+1]\n        elseif operator[i] == \"*\"\n            result\
    \ = result * operand[i+1]\n        elseif operator[i] == \"//\"\n            result\
    \ = result // operand[i+1]\n        elseif operator[i] == \"**\"\n           \
    \ result = result ^ operand[i+1]\n        end\n    end\n    \n    return result\n\
    \    \nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpwj9jlse8.jl:52\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  UndefVarError:\
    \ result not defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmpwj9jlse8.jl:36\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwj9jlse8.jl:52 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwj9jlse8.jl:51\ntest set:\
    \ Error During Test at /tmp/tmpwj9jlse8.jl:53\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  UndefVarError: result\
    \ not defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpwj9jlse8.jl:36\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwj9jlse8.jl:53 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwj9jlse8.jl:51\ntest set:\
    \ Error During Test at /tmp/tmpwj9jlse8.jl:54\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  UndefVarError: result not defined\n\
    \  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpwj9jlse8.jl:36\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwj9jlse8.jl:54 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwj9jlse8.jl:51\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwj9jlse8.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # your code here\nend\n\"\"\"\n    Given a list (lst) and a value (value),\
    \ return the index of the last occurrence of that value \n    in the list.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp610rosu9.jl:28\nin expression starting at\
    \ /tmp/tmp610rosu9.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    i = 1\n    result = operand[1]\n    while i <= length(operator)\n    \
    \    if operator[i] == \"+\"\n            result += operand[i+1]\n        elseif\
    \ operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif operator[i]\
    \ == \"*\"\n            result *= operand[i+1]\n        elseif operator[i] ==\
    \ \"//\"\n            result = floor(Int64, result/operand[i+1])\n        elseif\
    \ operator[i] == \"**\"\n            result = result^operand[i+1]\n        end\n\
    \        i += 1\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t\
    @test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsa2jv162.jl:50\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsa2jv162.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsa2jv162.jl:48\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsa2jv162.jl:46\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result //= operand[i+1]\n        elseif operator[i] == \"**\"\n \
    \           result ^= operand[i+1]\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmptxt3b4xn.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptxt3b4xn.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptxt3b4xn.jl:46\ntest set: Error\
    \ During Test at /tmp/tmptxt3b4xn.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmptxt3b4xn.jl:40\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmptxt3b4xn.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmptxt3b4xn.jl:46\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptxt3b4xn.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    \"\"\"\n    Do algebraic operation on operand and operator.\n    \"\"\"\
    \n    result = operand[1]\n    for i = 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = convert(Int64, result) \n            result //= operand[i+1]\n\
    \        elseif operator[i] == \"**\"\n            result = convert(Int64, result)\
    \ \n            result ^= operand[i+1]\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmphwi7qy87.jl:53\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphwi7qy87.jl:53 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphwi7qy87.jl:51\ntest set: Error\
    \ During Test at /tmp/tmphwi7qy87.jl:54\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmphwi7qy87.jl:45\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmphwi7qy87.jl:54 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmphwi7qy87.jl:51\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphwi7qy87.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    \"\"\"\n    :param operator: a list of symbols representing algebraic\
    \ operations.\n    :param operand: a list of integer operands.\n    :return: an\
    \ integer, result of the algebraic expression.\nusing Test\n\n@testset begin\n\
    \ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t\
    @test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpimbafgph.jl:1\nin expression starting at /tmp/tmpimbafgph.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # The first operand\n    result = operand[1]\nusing Test\n\n@testset begin\n\
    \ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t\
    @test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmph3as2drm.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmph3as2drm.jl:1\n\
    in expression starting at /tmp/tmph3as2drm.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # your code goes here\n    op = operator[1]\n    for i in 2:length(operator)\n\
    \        if operator[i] == \"//\"\n            operand[i] = operand[i] // operand[i+1]\n\
    \        elseif operator[i] == \"**\"\n            operand[i] = operand[i] ^ operand[i+1]\n\
    \        elseif operator[i] == \"*\"\n            operand[i] = operand[i] * operand[i+1]\n\
    \        elseif operator[i] == \"+\"\n            operand[i] = operand[i] + operand[i+1]\n\
    \        elseif operator[i] == \"-\"\n            operand[i] = operand[i] - operand[i+1]\n\
    \        end\n    end\n    return operand[1]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t\
    @test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdv6e03lj.jl:48\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 2 == 37\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdv6e03lj.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdv6e03lj.jl:47\ntest set: Test\
    \ Failed at /tmp/tmpdv6e03lj.jl:49\n  Expression: candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9\n   Evaluated: 2 == 9\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdv6e03lj.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdv6e03lj.jl:47\ntest set: Test\
    \ Failed at /tmp/tmpdv6e03lj.jl:50\n  Expression: candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8\n   Evaluated: 7 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdv6e03lj.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdv6e03lj.jl:47\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdv6e03lj.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 2:length(operand)\n        result =\
    \ eval(string(result, operator[i-1], operand[i]))\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp9x3zu4dn.jl:37\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type String to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp9x3zu4dn.jl:30\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9x3zu4dn.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9x3zu4dn.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp9x3zu4dn.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type String to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp9x3zu4dn.jl:30\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9x3zu4dn.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9x3zu4dn.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result //= operand[i+1]\n        elseif operator[i] == \"**\"\n \
    \           result = result ^ operand[i+1]\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp8l06wgz2.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8l06wgz2.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8l06wgz2.jl:46\ntest set: Error\
    \ During Test at /tmp/tmp8l06wgz2.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp8l06wgz2.jl:40\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp8l06wgz2.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp8l06wgz2.jl:46\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8l06wgz2.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = convert(Int64, result / operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp7_5ss9qp.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7_5ss9qp.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7_5ss9qp.jl:46\ntest set: Error\
    \ During Test at /tmp/tmp7_5ss9qp.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(2.3333333333333335)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp7_5ss9qp.jl:35\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp7_5ss9qp.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp7_5ss9qp.jl:46\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7_5ss9qp.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i = 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result //= operand[i+1]\n        elseif operator[i] == \"**\"\n \
    \           result = result ^ operand[i+1]\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp9jwbug07.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9jwbug07.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9jwbug07.jl:46\ntest set: Error\
    \ During Test at /tmp/tmp9jwbug07.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp9jwbug07.jl:40\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp9jwbug07.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp9jwbug07.jl:46\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9jwbug07.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 2:length(operand)\n        if operator[i-1]\
    \ == \"+\"\n            result += operand[i]\n        elseif operator[i-1] ==\
    \ \"-\"\n            result -= operand[i]\n        elseif operator[i-1] == \"\
    *\"\n            result *= operand[i]\n        elseif operator[i-1] == \"//\"\n\
    \            result = floor(Int64, result/operand[i])\n        elseif operator[i-1]\
    \ == \"**\"\n            result = floor(Int64, result^operand[i])\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpt52fc2jf.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt52fc2jf.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt52fc2jf.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt52fc2jf.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    equation = \"\"\n    for (i, op) in enumerate(operator)\n        equation\
    \ = equation * string(operand[i]) * op\n    end\n    equation = equation * string(operand[end])\n\
    \    return eval(equation)\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpth5cl388.jl:38\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type String to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpth5cl388.jl:31\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpth5cl388.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpth5cl388.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpth5cl388.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type String to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpth5cl388.jl:31\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpth5cl388.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpth5cl388.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    #your code goes here\nend\n \nusing Test\n\n@testset begin\n\ncandidate\
    \ = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpa_3tyo2f.jl:34\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpa_3tyo2f.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa_3tyo2f.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa_3tyo2f.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpa_3tyo2f.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpa_3tyo2f.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa_3tyo2f.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/cento"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa_3tyo2f.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for (i, op) in enumerate(operator)\n        if\
    \ op == \"+\"\n            result += operand[i+1]\n        elseif op == \"-\"\n\
    \            result -= operand[i+1]\n        elseif op == \"*\"\n            result\
    \ *= operand[i+1]\n        elseif op == \"//\"\n            result = convert(Int64,\
    \ result/operand[i+1])\n        elseif op == \"**\"\n            result = convert(Int64,\
    \ result^operand[i+1])\n        end\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpww7hqqz_.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpww7hqqz_.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpww7hqqz_.jl:46\ntest set: Error\
    \ During Test at /tmp/tmpww7hqqz_.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(2.3333333333333335)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpww7hqqz_.jl:35\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpww7hqqz_.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpww7hqqz_.jl:46\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpww7hqqz_.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    evaluation = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            evaluation += operand[i+1]\n        elseif operator[i]\
    \ == \"-\"\n            evaluation -= operand[i+1]\n        elseif operator[i]\
    \ == \"*\"\n            evaluation *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            evaluation //= operand[i+1]\n        elseif operator[i]\
    \ == \"**\"\n            evaluation ^= operand[i+1]\n        end\n    end\n  \
    \  return evaluation\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpch8m5o4z.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpch8m5o4z.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpch8m5o4z.jl:46\ntest set: Error\
    \ During Test at /tmp/tmpch8m5o4z.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpch8m5o4z.jl:40\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpch8m5o4z.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpch8m5o4z.jl:46\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpch8m5o4z.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # YOUR CODE HERE\n    raise NotImplementedError()\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"\
    +\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4,\
    \ 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmp2t180chl.jl:25 expected\
    \ \"end\", got \"NotImplementedError\"\nStacktrace:\n [1] top-level scope\n  \
    \ @ /tmp/tmp2t180chl.jl:27\nin expression starting at /tmp/tmp2t180chl.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # YOUR CODE HERE\n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        op = operator[i]\n        if op == \"+\"\n            result += operand[i+1]\n\
    \        elseif op == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ op == \"*\"\n            result *= operand[i+1]\n        elseif op == \"//\"\
    \n            result = floor(Int64, result/operand[i+1])\n        elseif op ==\
    \ \"**\"\n            result = floor(Int64, result^operand[i+1])\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpv_ak_lbu.jl:50\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv_ak_lbu.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv_ak_lbu.jl:48\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv_ak_lbu.jl:46\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # Your code here\nend\n \n \n \nusing Test\n\n@testset begin\n\ncandidate\
    \ = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3qhlrfn3.jl:36\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp3qhlrfn3.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3qhlrfn3.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3qhlrfn3.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp3qhlrfn3.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp3qhlrfn3.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3qhlrfn3.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/cento"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3qhlrfn3.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = convert(Int64,floor(result/operand[i+1]))\n        elseif\
    \ operator[i] == \"**\"\n            result = result^operand[i+1]\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0x6zbnyl.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0x6zbnyl.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0x6zbnyl.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0x6zbnyl.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = div(result, operand[i+1])\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpd956la46.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd956la46.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd956la46.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd956la46.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n   result = operand[1]\n   for i in 1:length(operator)\n       if operator[i]\
    \ == \"+\"\n           result += operand[i+1]\n       elseif operator[i] == \"\
    -\"\n           result -= operand[i+1]\n       elseif operator[i] == \"*\"\n \
    \          result *= operand[i+1]\n       elseif operator[i] == \"//\"\n     \
    \      result = trunc(Int64, result/operand[i+1])\n       elseif operator[i] ==\
    \ \"**\"\n           result = trunc(Int64, result^operand[i+1])\n       end\n\
    \   end\n   return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpn7289jc0.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn7289jc0.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn7289jc0.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn7289jc0.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    res = operand[1]\n    for i = 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            res += operand[i+1]\n        elseif operator[i] == \"\
    -\"\n            res -= operand[i+1]\n        elseif operator[i] == \"*\"\n  \
    \          res *= operand[i+1]\n        elseif operator[i] == \"//\"\n       \
    \     res = div(res, operand[i+1])\n        elseif operator[i] == \"**\"\n   \
    \         res ^= operand[i+1]\n        end\n    end\n    return res\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpox0te259.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpox0te259.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpox0te259.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpox0te259.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # Your code here\n    # It is guaranteed that the operator vector has\
    \ at least one operator\n    # It is guaranteed that the operand vector has at\
    \ least two operands\n    # It is guaranteed that the operator vector and operand\
    \ vector are the same length\n    # It is guaranteed that operand is a list of\
    \ non-negative integers\n    \n    # Create an expression\n    expr = string(operand[1])\n\
    \    for i = 1:length(operator)\n        expr = string(expr, operator[i], operand[i+1])\n\
    \    end\n    \n    # Create the expression and return the result\n    return\
    \ eval(parse(expr))\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkr_add4w.jl:46\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ no method matching parse(::String)\n  Closest candidates are:\n    parse(!Matched::Type{T},\
    \ !Matched::AbstractString) where T<:Complex at /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:381\n\
    \    parse(!Matched::Type{T}, !Matched::AbstractChar; base) where T<:Integer at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:40\n    parse(!Matched::Type{T},\
    \ !Matched::AbstractString; base) where T<:Integer at /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:240\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpkr_add4w.jl:39\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkr_add4w.jl:46 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkr_add4w.jl:45\ntest set:\
    \ Error During Test at /tmp/tmpkr_add4w.jl:47\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: no method\
    \ matching parse(::String)\n  Closest candidates are:\n    parse(!Matched::Type{T},\
    \ !Matched::AbstractString) where T<:Complex at /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:381\n\
    \    parse(!Matched::Type{T}, !Matched::AbstractChar; base) where T<:Integer at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:40\n    parse(!Matched::Type{T},\
    \ !Matched::AbstractString; base) where T<:Integer at /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:240\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpkr_add4w.jl:39\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkr_add4w.jl:47 [inlined]\n\
    \   [4] macro expansion\n     @ /shar"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkr_add4w.jl:43\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = result \xF7 operand[i+1]\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp79mfsbzz.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp79mfsbzz.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp79mfsbzz.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp79mfsbzz.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # your code here\n    return 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbd7br2p8.jl:34\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 0 == 37\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbd7br2p8.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbd7br2p8.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpbd7br2p8.jl:35\n  Expression: candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9\n   Evaluated: 0 == 9\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbd7br2p8.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbd7br2p8.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpbd7br2p8.jl:36\n  Expression: candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbd7br2p8.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbd7br2p8.jl:33\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbd7br2p8.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for (i,oper) in enumerate(operator)\n       \
    \ index = i + 1\n        if oper == \"+\"\n            result += operand[index]\n\
    \        elseif oper == \"-\"\n            result -= operand[index]\n        elseif\
    \ oper == \"*\"\n            result *= operand[index]\n        elseif oper ==\
    \ \"//\"\n            result //= operand[index]\n        elseif oper == \"**\"\
    \n            result ^= operand[index]\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpk9cnl18f.jl:49\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk9cnl18f.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk9cnl18f.jl:47\ntest set: Error\
    \ During Test at /tmp/tmpk9cnl18f.jl:50\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpk9cnl18f.jl:41\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpk9cnl18f.jl:50 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpk9cnl18f.jl:47\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk9cnl18f.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    \"\"\"\n    Do algebra, takes in an array of operator of length n, and\
    \ an array of operand of length n + 1.\n    \"\"\"\n    if (length(operator) !=\
    \ length(operand) - 1) || (length(operator) < 1) || (length(operand) < 2)\n  \
    \      error(\"One of the input is invalid\")\n    end\n    if operator[1] ==\
    \ \"+\"\n        acc = operand[1] + operand[2]\n    elseif operator[1] == \"-\"\
    \n        acc = operand[1] - operand[2]\n    elseif operator[1] == \"*\"\n   \
    \     acc = operand[1] * operand[2]\n    elseif operator[1] == \"//\"\n      \
    \  acc = operand[1] // operand[2]\n    elseif operator[1] == \"**\"\n        acc\
    \ = operand[1] ^ operand[2]\n    else\n        error(\"Invalid operator\")\n \
    \   end\n    for i = 2:length(operator)\n        if operator[i] == \"+\"\n   \
    \         acc = acc + operand[i + 1]\n        elseif operator[i] == \"-\"\n  \
    \          acc = acc - operand[i + 1]\n        elseif operator[i] == \"*\"\n \
    \           acc = acc * operand[i + 1]\n        elseif operator[i] == \"//\"\n\
    \            acc = acc // operand[i + 1]\n        elseif operator[i] == \"**\"\
    \n            acc = acc ^ operand[i + 1]\n        else\n            error(\"Invalid\
    \ operator\")\n        end\n    end\n    return acc\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"],\
    \ [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5])\
    \ == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_oje2gim.jl:68\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_oje2gim.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_oje2gim.jl:66\ntest set: Error\
    \ During Test at /tmp/tmp_oje2gim.jl:69\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp_oje2gim.jl:60\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp_oje2gim.jl:69 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp_oje2gim.jl:66\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_oje2gim.jl:64\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # your code goes here\n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result //= operand[i+1]\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp881ogk6q.jl:49\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp881ogk6q.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp881ogk6q.jl:47\ntest set: Error\
    \ During Test at /tmp/tmp881ogk6q.jl:50\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp881ogk6q.jl:41\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp881ogk6q.jl:50 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp881ogk6q.jl:47\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp881ogk6q.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    res = operand[1]\n    for i in 1:length(operator)\n        op = operator[i]\n\
    \        operand2 = operand[i+1]\n        if op == \"+\"\n            res += operand2\n\
    \        elseif op == \"-\"\n            res -= operand2\n        elseif op ==\
    \ \"*\"\n            res *= operand2\n        elseif op == \"//\"\n          \
    \  res = div(res, operand2)\n        elseif op == \"**\"\n            res = res\
    \ ^ operand2\n        end\n    end\n    return res\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"],\
    \ [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5])\
    \ == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_yyaxvsi.jl:50\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_yyaxvsi.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_yyaxvsi.jl:48\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_yyaxvsi.jl:46\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    res = operand[1]\n    for i = 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            res += operand[i+1]\n        elseif operator[i] == \"\
    -\"\n            res -= operand[i+1]\n        elseif operator[i] == \"*\"\n  \
    \          res *= operand[i+1]\n        elseif operator[i] == \"//\"\n       \
    \     res = div(res, operand[i+1])\n        elseif operator[i] == \"**\"\n   \
    \         res ^= operand[i+1]\n        end\n    end\n    return res\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp7hsw0fp0.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7hsw0fp0.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7hsw0fp0.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7hsw0fp0.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 2:length(operand)\n        if operator[i-1]\
    \ == \"-\"\n            result -= operand[i]\n        elseif operator[i-1] ==\
    \ \"+\"\n            result += operand[i]\n        elseif operator[i-1] == \"\
    *\"\n            result *= operand[i]\n        elseif operator[i-1] == \"//\"\n\
    \            result //= operand[i]\n        elseif operator[i-1] == \"**\"\n \
    \           result ^= operand[i]\n        end\n    end\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp0zsabq02.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0zsabq02.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0zsabq02.jl:46\ntest set: Error\
    \ During Test at /tmp/tmp0zsabq02.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp0zsabq02.jl:40\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp0zsabq02.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp0zsabq02.jl:46\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0zsabq02.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 2:length(operand)\n        if operator[i-1]\
    \ == \"+\"\n            result += operand[i]\n        elseif operator[i-1] ==\
    \ \"-\"\n            result -= operand[i]\n        elseif operator[i-1] == \"\
    *\"\n            result *= operand[i]\n        elseif operator[i-1] == \"//\"\n\
    \            result = floor(Int64, result/operand[i])\n        elseif operator[i-1]\
    \ == \"**\"\n            result = floor(Int64, result^operand[i])\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3zs4zbwa.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3zs4zbwa.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3zs4zbwa.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3zs4zbwa.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    op = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == '+'\n            op += operand[i+1]\n        elseif operator[i] == '-'\n\
    \            op -= operand[i+1]\n        elseif operator[i] == '*'\n         \
    \   op *= operand[i+1]\n        elseif operator[i] == '//'\n            op //=\
    \ operand[i+1]\n        elseif operator[i] == '**'\n            op ^= operand[i+1]\n\
    \        end\n    end\n    return op\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpbgh5uve2.jl:34\nin expression\
    \ starting at /tmp/tmpbgh5uve2.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # your code here\n    ret = operand[1]\n    for i in 1:length(operator)\n\
    \        op = operator[i]\n        num = operand[i+1]\n        if op == \"+\"\n\
    \            ret += num\n        elseif op == \"-\"\n            ret -= num\n\
    \        elseif op == \"*\"\n            ret *= num\n        elseif op == \"//\"\
    \n            ret //= num\n        elseif op == \"**\"\n            ret ^= num\n\
    \        end\n    end\n    return ret\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp42ap_wiw.jl:51\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42ap_wiw.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42ap_wiw.jl:49\ntest set: Error\
    \ During Test at /tmp/tmp42ap_wiw.jl:52\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp42ap_wiw.jl:43\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp42ap_wiw.jl:52 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp42ap_wiw.jl:49\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp42ap_wiw.jl:47\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # Insert your solution here!\n    expression = 0\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            expression += operand[i]\n     \
    \   elseif operator[i] == \"-\"\n            expression -= operand[i]\n      \
    \  elseif operator[i] == \"*\"\n            expression *= operand[i]\n       \
    \ elseif operator[i] == \"//\"\n            expression //= operand[i]\n      \
    \  elseif operator[i] == \"**\"\n            expression ^= operand[i]\n      \
    \  end\n    end\n    return expression\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7ywoqbsb.jl:48\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 4 == 37\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7ywoqbsb.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7ywoqbsb.jl:47\ntest set: Test\
    \ Failed at /tmp/tmp7ywoqbsb.jl:49\n  Expression: candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9\n   Evaluated: 2 == 9\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7ywoqbsb.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7ywoqbsb.jl:47\ntest set: Test\
    \ Failed at /tmp/tmp7ywoqbsb.jl:50\n  Expression: candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7ywoqbsb.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7ywoqbsb.jl:47\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7ywoqbsb.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    #Step 1: Define the operation function in nested function\n    function\
    \ operation(op::String, a::Int64, b::Int64)::Int64\n        if op == \"+\"\n \
    \           return a + b\n        elseif op == \"-\"\n            return a - b\n\
    \        elseif op == \"*\"\n            return a * b\n        elseif op == \"\
    //\"\n            return floor(a / b)\n        elseif op == \"**\"\n         \
    \   return a ^ b\n        end\n    end\n    \n    #Step 2: Loop through the operator\
    \ list, apply the operation function\n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        result = operation(operator[i], result, operand[i+1])\n    end\n    \n\
    \    return result\nend\n@test function test_do_algebra()\n    op = [\"+\", \"\
    *\", \"-\"]\n    operand = [2, 3, 4, 5]\n    result = do_algebra(op, operand)\n\
    \    @test result == 9\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @test not defined\nin expression starting\
    \ at /tmp/tmpl6rpcl7y.jl:49\nin expression starting at /tmp/tmpl6rpcl7y.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # Note for this function, the operator element could only be `+`, `-`,\
    \ `*`, `//`, `**`.\n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result //= operand[i+1]\n        else\n            result\
    \ ^= operand[i+1]\n        end\n    end\n    return result\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"\
    +\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4,\
    \ 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsv797hua.jl:49\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsv797hua.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsv797hua.jl:47\ntest set: Error\
    \ During Test at /tmp/tmpsv797hua.jl:50\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpsv797hua.jl:41\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpsv797hua.jl:50 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpsv797hua.jl:47\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsv797hua.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # YOUR CODE HERE\n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = result \xF7 operand[i+1]\n        elseif operator[i]\
    \ == \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpqvi39rpd.jl:49\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqvi39rpd.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqvi39rpd.jl:47\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqvi39rpd.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    new_operand = zeros(Int64, length(operand)-1)\n    for i in 1:length(new_operand)\n\
    \        if operator[i] == \"+\"\n            new_operand[i] = operand[i] + operand[i+1]\n\
    \        elseif operator[i] == \"-\"\n            new_operand[i] = operand[i]\
    \ - operand[i+1]\n        elseif operator[i] == \"*\"\n            new_operand[i]\
    \ = operand[i] * operand[i+1]\n        elseif operator[i] == \"//\"\n        \
    \    new_operand[i] = operand[i] // operand[i+1]\n        elseif operator[i] ==\
    \ \"**\"\n            new_operand[i] = operand[i] ^ operand[i+1]\n        end\n\
    \    end\n    return new_operand[end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnty13xp5.jl:47\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 9 == 37\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnty13xp5.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnty13xp5.jl:46\ntest set: Test\
    \ Failed at /tmp/tmpnty13xp5.jl:48\n  Expression: candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9\n   Evaluated: -1 == 9\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnty13xp5.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnty13xp5.jl:46\ntest set: Error\
    \ During Test at /tmp/tmpnty13xp5.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(7//3)\n  Stacktrace:\n\
    \   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n     @ ./number.jl:7\
    \ [inlined]\n   [3] setindex!\n     @ ./array.jl:903 [inlined]\n   [4] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmpnty13xp5.jl:35\n   [5] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpnty13xp5.jl:49 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpnty13xp5.jl:46\nTest Summary:\
    \ | Fail  Error  Total\ntest set      |    2      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnty13xp5.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    stack::Array{Int64} = []\n    for i in 1:length(operator)\n        if\
    \ operator[i] == \"-\"\n            push!(stack, operand[i]-operand[i+1])\n  \
    \      elseif operator[i] == \"+\"\n            push!(stack, operand[i]+operand[i+1])\n\
    \        elseif operator[i] == \"*\"\n            push!(stack, operand[i]*operand[i+1])\n\
    \        elseif operator[i] == \"//\"\n            push!(stack, operand[i]\xF7\
    operand[i+1])\n        elseif operator[i] == \"**\"\n            push!(stack,\
    \ operand[i]^operand[i+1])\n        end\n    end\n    return sum(stack)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp8etkbxxx.jl:47\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 29 == 37\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8etkbxxx.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8etkbxxx.jl:46\ntest set: Test\
    \ Failed at /tmp/tmp8etkbxxx.jl:48\n  Expression: candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9\n   Evaluated: 16 == 9\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8etkbxxx.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8etkbxxx.jl:46\ntest set: Test\
    \ Failed at /tmp/tmp8etkbxxx.jl:49\n  Expression: candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8\n   Evaluated: 14 == 8\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8etkbxxx.jl:49 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8etkbxxx.jl:46\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8etkbxxx.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    \nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpq_bbmju6.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpq_bbmju6.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq_bbmju6.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq_bbmju6.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpq_bbmju6.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpq_bbmju6.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq_bbmju6.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/cento"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq_bbmju6.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    final = operand[1]\n    for i = 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            final += operand[i+1]\n        elseif operator[i] == \"\
    -\"\n            final -= operand[i+1]\n        elseif operator[i] == \"*\"\n\
    \            final *= operand[i+1]\n        elseif operator[i] == \"//\"\n   \
    \         final //= operand[i+1]\n        elseif operator[i] == \"**\"\n     \
    \       final ^= operand[i+1]\n        end\n    end\n    return final\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpmp2dj8_s.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmp2dj8_s.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmp2dj8_s.jl:46\ntest set: Error\
    \ During Test at /tmp/tmpmp2dj8_s.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpmp2dj8_s.jl:40\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpmp2dj8_s.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpmp2dj8_s.jl:46\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmp2dj8_s.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 2:length(operand)\n        if operator[i-1]\
    \ == \"+\"\n            result += operand[i]\n        elseif operator[i-1] ==\
    \ \"-\"\n            result -= operand[i]\n        elseif operator[i-1] == \"\
    *\"\n            result *= operand[i]\n        elseif operator[i-1] == \"//\"\n\
    \            result = floor(Int64, result / operand[i])\n        elseif operator[i-1]\
    \ == \"**\"\n            result = floor(Int64, result^operand[i])\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprvsz8962.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprvsz8962.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprvsz8962.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprvsz8962.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    \nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmphrh6y0xq.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmphrh6y0xq.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphrh6y0xq.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphrh6y0xq.jl:32\ntest set:\
    \ Error During Test at /tmp/tmphrh6y0xq.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmphrh6y0xq.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphrh6y0xq.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/cento"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphrh6y0xq.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # YOUR CODE HERE\n    algebric_expresion = operand[1]\n    for i in 2:length(operand)\n\
    \        if operator[i-1] == \"+\"\n            algebric_expresion += operand[i]\n\
    \        elseif operator[i-1] == \"-\"\n            algebric_expresion -= operand[i]\n\
    \        elseif operator[i-1] == \"*\"\n            algebric_expresion *= operand[i]\n\
    \        elseif operator[i-1] == \"//\"\n            algebric_expresion = div(algebric_expresion,\
    \ operand[i])\n        elseif operator[i-1] == \"**\"\n            algebric_expresion\
    \ = algebric_expresion ^ operand[i]\n        end\n    end\n    return algebric_expresion\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp7olmyaax.jl:49\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7olmyaax.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7olmyaax.jl:47\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7olmyaax.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # your code goes here\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            operand[i] = operand[i] + operand[i+1]\n            deleteat!(operand,\
    \ i+1)\n            deleteat!(operator, i)\n            if length(operator) ==\
    \ 0\n                return operand[1]\n            end\n        elseif operator[i]\
    \ == \"-\"\n            operand[i] = operand[i] - operand[i+1]\n            deleteat!(operand,\
    \ i+1)\n            deleteat!(operator, i)\n            if length(operator) ==\
    \ 0\n                return operand[1]\n            end\n        elseif operator[i]\
    \ == \"*\"\n            operand[i] = operand[i] * operand[i+1]\n            deleteat!(operand,\
    \ i+1)\n            deleteat!(operator, i)\n            if length(operator) ==\
    \ 0\n                return operand[1]\n            end\n        elseif operator[i]\
    \ == \"//\"\n            operand[i] = operand[i] \xF7 operand[i+1]\n         \
    \   deleteat!(operand, i+1)\n            deleteat!(operator, i)\n            if\
    \ length(operator) == 0\n                return operand[1]\n            end\n\
    \        elseif operator[i] == \"**\"\n            operand[i] = operand[i] ^ operand[i+1]\n\
    \            deleteat!(operand, i+1)\n            deleteat!(operator, i)\n   \
    \         if length(operator) == 0\n                return operand[1]\n      \
    \      end\n        end\n    end\nend\n\"\"\"\n    The function should return\
    \ the max sum of the sub array.\n    A subarray is a contiguous subsequence of\
    \ an array.\n    \n    Example:\n    array = [2, 3, -1, 7, -2, -9, 10]\n    result\
    \ = 10\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpn5ewzej_.jl:66\nin expression starting at /tmp/tmpn5ewzej_.jl:66\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n\nend\n \n \nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpb5wfzcw0.jl:35\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpb5wfzcw0.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb5wfzcw0.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb5wfzcw0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpb5wfzcw0.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpb5wfzcw0.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb5wfzcw0.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/cento"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb5wfzcw0.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        result =\
    \ do_operation(operator[i], result, operand[i+1])\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpw1yo8md_.jl:37\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  UndefVarError:\
    \ do_operation not defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmpw1yo8md_.jl:28\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw1yo8md_.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw1yo8md_.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpw1yo8md_.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  UndefVarError: do_operation\
    \ not defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpw1yo8md_.jl:28\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw1yo8md_.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw1yo8md_.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpw1yo8md_.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  UndefVarError: do_operation not\
    \ defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpw1yo8md_.jl:28\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw1yo8md_.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw1yo8md_.jl:36\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw1yo8md_.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    \"\"\"\n    Do algebra\n    \"\"\"\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            operand[i] = operand[i] + operand[i+1]\n\
    \            deleteat!(operand, i+1)\n            deleteat!(operator, i)\n   \
    \         return do_algebra(operator, operand)\n        elseif operator[i] ==\
    \ \"-\"\n            operand[i] = operand[i] - operand[i+1]\n            deleteat!(operand,\
    \ i+1)\n            deleteat!(operator, i)\n            return do_algebra(operator,\
    \ operand)\n        elseif operator[i] == \"*\"\n            operand[i] = operand[i]\
    \ * operand[i+1]\n            deleteat!(operand, i+1)\n            deleteat!(operator,\
    \ i)\n            return do_algebra(operator, operand)\n        elseif operator[i]\
    \ == \"//\"\n            operand[i] = operand[i] \xF7 operand[i+1]\n         \
    \   deleteat!(operand, i+1)\n            deleteat!(operator, i)\n            return\
    \ do_algebra(operator, operand)\n        elseif operator[i] == \"**\"\n      \
    \      operand[i] = operand[i] ^ operand[i+1]\n            deleteat!(operand,\
    \ i+1)\n            deleteat!(operator, i)\n            return do_algebra(operator,\
    \ operand)\n        end\n    end\n    return operand[1]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"],\
    \ [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5])\
    \ == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpaduufhwx.jl:65\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaduufhwx.jl:65 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaduufhwx.jl:63\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaduufhwx.jl:61\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i = 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = result \xF7 operand[i+1]\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpba5y22fm.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpba5y22fm.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpba5y22fm.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpba5y22fm.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i = 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = convert(Int64, result / operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpbl5pcdmy.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbl5pcdmy.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbl5pcdmy.jl:46\ntest set: Error\
    \ During Test at /tmp/tmpbl5pcdmy.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(2.3333333333333335)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpbl5pcdmy.jl:35\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpbl5pcdmy.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpbl5pcdmy.jl:46\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbl5pcdmy.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # YOUR CODE HERE\n    error(\"Not implemented yet\")\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpdenx2_r0.jl:34\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  Not implemented\
    \ yet\n  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2]\
    \ do_algebra(operator::Vector{String}, operand::Vector{Int64})\n     @ Main /tmp/tmpdenx2_r0.jl:27\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdenx2_r0.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdenx2_r0.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpdenx2_r0.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  Not implemented yet\n\
    \  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmpdenx2_r0.jl:27\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdenx2_r0.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdenx2_r0.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpdenx2_r0.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  Not implemented yet\n  Stacktrace:\n\
    \   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmpdenx2_r0.jl:27\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdenx2_r0.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdenx2_r0.jl:33\nTest Summary:\
    \ | Error  Total\ntest set      |  "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdenx2_r0.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # Let's try the reduce function \n    return reduce(+, operator .* operand)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpd81e04w_.jl:34\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  DimensionMismatch(\"\
    arrays could not be broadcast to a common size; got a dimension with lengths 3\
    \ and 4\")\n  Stacktrace:\n    [1] _bcs1\n      @ ./broadcast.jl:516 [inlined]\n\
    \    [2] _bcs\n      @ ./broadcast.jl:510 [inlined]\n    [3] broadcast_shape\n\
    \      @ ./broadcast.jl:504 [inlined]\n    [4] combine_axes\n      @ ./broadcast.jl:499\
    \ [inlined]\n    [5] instantiate\n      @ ./broadcast.jl:281 [inlined]\n    [6]\
    \ materialize\n      @ ./broadcast.jl:860 [inlined]\n    [7] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n      @ Main /tmp/tmpd81e04w_.jl:27\n    [8] macro\
    \ expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmpd81e04w_.jl:34 [inlined]\n\
    \   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpd81e04w_.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpd81e04w_.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  DimensionMismatch(\"\
    arrays could not be broadcast to a common size; got a dimension with lengths 3\
    \ and 4\")\n  Stacktrace:\n    [1] _bcs1\n      @ ./broadcast.jl:516 [inlined]\n\
    \    [2] _bcs\n      @ ./broadcast.jl:510 [inlined]\n    [3] broadcast_shape\n\
    \      @ ./broadcast.jl:504 [inlined]\n    [4] combine_axes\n      @ ./broadcast.jl:499\
    \ [inlined]\n    [5] instantiate\n      @ ./broadcast.jl:281 [inlined]\n    [6]\
    \ materialize\n      @ ./broadcast.jl:860 [inlined]\n    [7] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n      @ Main /tmp/tmpd81e04w_.jl:27\n    [8] macro\
    \ expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmpd81e04w_.jl:35 [inlined]\n\
    \   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd81e04w_.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i = 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = div(result, operand[i+1])\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmphbw215qd.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphbw215qd.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphbw215qd.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphbw215qd.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    \"\"\"\n    Solves a basic algebra problem given a vector of operators\
    \ and a vector of operands.\n    \"\"\"\n    operation = copy(operand[1])\nusing\
    \ Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppi355_hh.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppi355_hh.jl:1\n\
    in expression starting at /tmp/tmppi355_hh.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 2:length(operand)\n        if operator[i-1]\
    \ == \"+\"\n            result += operand[i]\n        elseif operator[i-1] ==\
    \ \"-\"\n            result -= operand[i]\n        elseif operator[i-1] == \"\
    *\"\n            result *= operand[i]\n        elseif operator[i-1] == \"//\"\n\
    \            result = result \xF7 operand[i]\n        elseif operator[i-1] ==\
    \ \"**\"\n            result ^= operand[i]\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpw38yvj3o.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw38yvj3o.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw38yvj3o.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw38yvj3o.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    \"\"\"\n    @param operator: a list of strings \n    @param operand: a\
    \ list of integers\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t\
    @test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpds_jmqjp.jl:1\nin expression starting at /tmp/tmpds_jmqjp.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"*\"\n            result *= operand[i+1]\n        elseif operator[i] ==\
    \ \"+\"\n            result += operand[i+1]\n        elseif operator[i] == \"\
    -\"\n            result -= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = result \xF7 operand[i+1]\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\n \n \n \n \n \n \n \n \n \n \n\"\"\"\n    Given two lists operator,\
    \ and operand. The first list has basic algebra operations, and \n    the second\
    \ list is a list of integers. Use the two given lists to build the algebric \n\
    \    expression and return the evaluation of this expression.\nusing Test\n\n\
    @testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"\
    +\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4,\
    \ 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzo26pubv.jl:52\nin expression starting at\
    \ /tmp/tmpzo26pubv.jl:52\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # your code here\n    return 0\nend\n@testset \"Example Tests\" begin\n\
    \    @test do_algebra([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n    @test do_algebra([\"\
    *\", \"-\"], [4, 5, 6, 7]) == -4\n    @test do_algebra([\"-\"], [5, 6, 7, 8])\
    \ == -2\n    @test do_algebra([\"+\", \"+\", \"+\", \"+\"], [1, 2, 3, 4, 5]) ==\
    \ 15\n    @test do_algebra([\"*\", \"*\", \"*\", \"*\"], [1, 2, 3, 4, 5]) == 120\n\
    \    @test do_algebra([\"-\", \"-\"], [5, 6, 7, 8]) == -4\n    @test do_algebra([\"\
    -\"], [5, 6, 7, 8]) == -2\n    @test do_algebra([\"+\", \"-\"], [5, 6, 7, 8])\
    \ == -4\n    @test do_algebra([\"+\", \"*\"], [5, 6, 7, 8]) == 41\n    @test do_algebra([\"\
    +\", \"*\", \"-\"], [5, 6, 7, 8]) == -4\n    @test do_algebra([\"+\", \"*\", \"\
    -\", \"/\"], [10, 2, 3, 2]) == 3\n    @test do_algebra([\"+\", \"*\", \"-\", \"\
    /\", \"**\"], [10, 2, 3, 2, 2]) == 11\n    @test do_algebra([\"+\", \"*\", \"\
    -\", \"/\", \"**\", \"-\"], [10, 2, 3, 2, 2, 3]) == 8\n    @test do_algebra([\"\
    +\", \"*\", \"-\", \"/\", \"**\", \"-\", \"//\"], [10, 2, 3, 2, 2, 3, 2]) == 4\n\
    \    @test do_algebra([\"+\", \"*\", \"-\", \"/\", \"**\", \"-\", \"//\", \"**\"\
    ], [10, 2, 3, 2, 2, 3, 2, 2]) == 16\n    @test do_algebra([\"+\", \"*\nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"x^y\" instead of \"x**y\" for exponentiation,\
    \ and \"x...\" instead of \"**x\" for splatting.\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7_qz_6fm.jl:51\nin expression starting at /tmp/tmp7_qz_6fm.jl:51\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 2:length(operand)\n        result =\
    \ calc(result, operand[i], operator[i-1])\n    end\n    return result\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpv40q5lta.jl:37\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  UndefVarError:\
    \ calc not defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmpv40q5lta.jl:28\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpv40q5lta.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv40q5lta.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpv40q5lta.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  UndefVarError: calc not\
    \ defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpv40q5lta.jl:28\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpv40q5lta.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv40q5lta.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpv40q5lta.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  UndefVarError: calc not defined\n\
    \  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpv40q5lta.jl:28\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpv40q5lta.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv40q5lta.jl:36\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv40q5lta.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    operation = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            operation += operand[i+1]\n        elseif operator[i]\
    \ == \"-\"\n            operation -= operand[i+1]\n        elseif operator[i]\
    \ == \"*\"\n            operation *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            operation //= operand[i+1]\n        elseif operator[i]\
    \ == \"**\"\n            operation ^= operand[i+1]\n        end\n    end\n   \
    \ return operation\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5keikh9c.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5keikh9c.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5keikh9c.jl:46\ntest set: Error\
    \ During Test at /tmp/tmp5keikh9c.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp5keikh9c.jl:40\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp5keikh9c.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp5keikh9c.jl:46\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5keikh9c.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    \"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_qgf8i7w.jl:1\nin expression starting at /tmp/tmp_qgf8i7w.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = div(result, operand[i+1])\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp37pi70hy.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp37pi70hy.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp37pi70hy.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp37pi70hy.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # Build the expression according to the operator and operand array.\n\
    \    # Evaluate the expression and return the result.\n    \n    # YOUR CODE HERE\n\
    \    expression = operand[1]\n    for i = 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            expression += operand[i+1]\n        elseif operator[i]\
    \ == \"-\"\n            expression -= operand[i+1]\n        elseif operator[i]\
    \ == \"*\"\n            expression *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            expression //= operand[i+1]\n        elseif operator[i]\
    \ == \"**\"\n            expression ^= operand[i+1]\n        end\n    end\n  \
    \  \n    return expression\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptk7yqw5w.jl:53\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptk7yqw5w.jl:53 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptk7yqw5w.jl:51\ntest set: Error\
    \ During Test at /tmp/tmptk7yqw5w.jl:54\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmptk7yqw5w.jl:45\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmptk7yqw5w.jl:54 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmptk7yqw5w.jl:51\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptk7yqw5w.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = div(result, operand[i+1])\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp_0tospjy.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_0tospjy.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_0tospjy.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_0tospjy.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # YOUR CODE HERE\n    n = length(operator)\n    for i in 1:n\n       \
    \ operand[i] = parse(Int64, operator[i])\n    end\n    return operand\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp46c3di5o.jl:38\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  ArgumentError:\
    \ invalid base 10 digit '*' in \"**\"\n  Stacktrace:\n   [1] tryparse_internal(#unused#::Type{Int64},\
    \ s::String, startpos::Int64, endpos::Int64, base_::Int64, raise::Bool)\n    \
    \ @ Base ./parse.jl:137\n   [2] parse(::Type{Int64}, s::String; base::Nothing)\n\
    \     @ Base ./parse.jl:241\n   [3] parse\n     @ ./parse.jl:241 [inlined]\n \
    \  [4] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n     @ Main\
    \ /tmp/tmp46c3di5o.jl:29\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp46c3di5o.jl:38 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp46c3di5o.jl:37\ntest set:\
    \ Error During Test at /tmp/tmp46c3di5o.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  ArgumentError: input\
    \ string is empty or only contains whitespace\n  Stacktrace:\n   [1] tryparse_internal(#unused#::Type{Int64},\
    \ s::String, startpos::Int64, endpos::Int64, base_::Int64, raise::Bool)\n    \
    \ @ Base ./parse.jl:109\n   [2] parse(::Type{Int64}, s::String; base::Nothing)\n\
    \     @ Base ./parse.jl:241\n   [3] parse\n     @ ./parse.jl:241 [inlined]\n \
    \  [4] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n     @ Main\
    \ /tmp/tmp46c3di5o.jl:29\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp46c3di5o.jl:39 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp46c3di5o.jl:37\ntest set:\
    \ Error During Test at /tmp/tmp46c3di5o.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  ArgumentError: invalid base 10\
    \ digit '/' in \"//\"\n  Stacktrac"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp46c3di5o.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i = 1:length(operator)\n        operator\
    \ == \"+\" && (result += operand[i+1])\n        operator == \"-\" && (result -=\
    \ operand[i+1])\n        operator == \"*\" && (result *= operand[i+1])\n     \
    \   operator == \"//\" && (result = result \xF7 operand[i+1])\n        operator\
    \ == \"**\" && (result ^= operand[i+1])\n    end\n    return result\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpqjg_r4b8.jl:41\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 2 == 37\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqjg_r4b8.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqjg_r4b8.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpqjg_r4b8.jl:42\n  Expression: candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9\n   Evaluated: 2 == 9\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqjg_r4b8.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqjg_r4b8.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpqjg_r4b8.jl:43\n  Expression: candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8\n   Evaluated: 7 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqjg_r4b8.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqjg_r4b8.jl:40\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqjg_r4b8.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    \n    result = operand[1]\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp31hfdszc.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp31hfdszc.jl:1\n\
    in expression starting at /tmp/tmp31hfdszc.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # The length of operator list is equal to the length of operand list minus\
    \ one.\n    # Operator list has at least one operator, and operand list has at\
    \ least two operands.\n    if length(operator) == length(operand) - 1 \n     \
    \   # Initialize the result\n        result = operand[1]\n        for i in 1:length(operator)\n\
    \            result = eval(result, operator[i], operand[i+1])\n        end\n \
    \       return result\n    else\n        return 0\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"\
    +\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4,\
    \ 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpiudu6cd2.jl:44\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ no method matching eval(::Int64, ::String, ::Int64)\n  Closest candidates are:\n\
    \    eval(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/client.jl:453\n\
    \  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpiudu6cd2.jl:32\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpiudu6cd2.jl:44 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpiudu6cd2.jl:43\ntest set:\
    \ Error During Test at /tmp/tmpiudu6cd2.jl:45\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: no method\
    \ matching eval(::Int64, ::String, ::Int64)\n  Closest candidates are:\n    eval(::Any)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/client.jl:453\n  Stacktrace:\n\
    \   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n     @ Main\
    \ /tmp/tmpiudu6cd2.jl:32\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpiudu6cd2.jl:45 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpiudu6cd2.jl:43\ntest set:\
    \ Error During Test at /tmp/tmpiudu6cd2.jl:46\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  MethodError: no method matching\
    \ eval(::Int64, ::String, ::Int64)\n  Closest candidates are:\n    eval(::Any)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/client.jl:453\n  Stacktrace:\n\
    \   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n     @ Main\
    \ /tmp/tmpiudu6cd2.jl:32\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/T"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiudu6cd2.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for (op, opd) in zip(operator, operand[2:end])\n\
    \        if op == \"+\"\n            result += opd\n        elseif op == \"-\"\
    \n            result -= opd\n        elseif op == \"*\"\n            result *=\
    \ opd\n        elseif op == \"//\"\n            result //= opd\n        elseif\
    \ op == \"**\"\n            result ^= opd\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp2iqd3yse.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2iqd3yse.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2iqd3yse.jl:46\ntest set: Error\
    \ During Test at /tmp/tmp2iqd3yse.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp2iqd3yse.jl:40\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp2iqd3yse.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp2iqd3yse.jl:46\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2iqd3yse.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # YOUR CODE HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgrlkmrek.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpgrlkmrek.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgrlkmrek.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgrlkmrek.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpgrlkmrek.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpgrlkmrek.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgrlkmrek.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/cento"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgrlkmrek.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i = 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = convert(Int64, result/operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp14joqkrp.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp14joqkrp.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp14joqkrp.jl:46\ntest set: Error\
    \ During Test at /tmp/tmp14joqkrp.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(2.3333333333333335)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp14joqkrp.jl:35\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp14joqkrp.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp14joqkrp.jl:46\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp14joqkrp.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    operand_length = length(operand)\n    operator_length\
    \ = length(operator)\n    for i in 2:operand_length\n        operand_left = result\n\
    \        operand_right = operand[i]\n        operator_value = operator[i-1]\n\
    \        if operator_value == \"+\"\n            result = operand_left + operand_right\n\
    \        elseif operator_value == \"-\"\n            result = operand_left - operand_right\n\
    \        elseif operator_value == \"*\"\n            result = operand_left * operand_right\n\
    \        elseif operator_value == \"//\"\n            result = operand_left //\
    \ operand_right\n        elseif operator_value == \"**\"\n            result =\
    \ operand_left ^ operand_right\n        end\n    end\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp6zqx093f.jl:53\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6zqx093f.jl:53 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6zqx093f.jl:51\ntest set: Error\
    \ During Test at /tmp/tmp6zqx093f.jl:54\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp6zqx093f.jl:45\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp6zqx093f.jl:54 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp6zqx093f.jl:51\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6zqx093f.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    first, second = operand[1], operand[2]\n    for (i, op) in enumerate(operator)\n\
    \        res = do_operation(first, second, op)\n        first = res\n        second\
    \ = operand[i+3]\n    end\n    return res\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t\
    @test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpg5wkti09.jl:39\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  UndefVarError:\
    \ do_operation not defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmpg5wkti09.jl:28\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg5wkti09.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg5wkti09.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpg5wkti09.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  UndefVarError: do_operation\
    \ not defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpg5wkti09.jl:28\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg5wkti09.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg5wkti09.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpg5wkti09.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  UndefVarError: do_operation not\
    \ defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpg5wkti09.jl:28\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg5wkti09.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg5wkti09.jl:38\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg5wkti09.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # Your code here\n    expression = string(operand[1])\n    for i in 1:length(operator)\n\
    \        expression = string(expression, \" \", operator[i], \" \", operand[i+1])\n\
    \    end\n    print(expression)\n    return eval(parse(expression))\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "2 ** 3 * 4 + 5test set: Error During Test at /tmp/tmp88bkws6f.jl:39\n \
    \ Test threw exception\n  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3,\
    \ 4, 5]) == 37\n  MethodError: no method matching parse(::String)\n  Closest candidates\
    \ are:\n    parse(!Matched::Type{T}, !Matched::AbstractString) where T<:Complex\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:381\n    parse(!Matched::Type{T},\
    \ !Matched::AbstractChar; base) where T<:Integer at /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:40\n\
    \    parse(!Matched::Type{T}, !Matched::AbstractString; base) where T<:Integer\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:240\n    ...\n  Stacktrace:\n\
    \   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n     @ Main\
    \ /tmp/tmp88bkws6f.jl:32\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp88bkws6f.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp88bkws6f.jl:38\n2 + 3 * 4\
    \ - 5test set: Error During Test at /tmp/tmp88bkws6f.jl:40\n  Test threw exception\n\
    \  Expression: candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError:\
    \ no method matching parse(::String)\n  Closest candidates are:\n    parse(!Matched::Type{T},\
    \ !Matched::AbstractString) where T<:Complex at /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:381\n\
    \    parse(!Matched::Type{T}, !Matched::AbstractChar; base) where T<:Integer at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:40\n    parse(!Matched::Type{T},\
    \ !Matched::AbstractString; base) where T<:Integer at /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:240\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp88bkws6f.jl:32\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp88bkws6f.jl:40 [inlined]\n\
    \   [4] m"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp88bkws6f.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    @assert length(operator) == length(operand) - 1\nusing Test\n\n@testset\
    \ begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"],\
    \ [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5])\
    \ == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk9_0zvir.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk9_0zvir.jl:1\n\
    in expression starting at /tmp/tmpk9_0zvir.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    n = length(operator)\n    for i in 1:n\n    \
    \    op = operator[i]\n        o = operand[i+1]\n        if op == \"+\"\n    \
    \        result += o\n        elseif op == \"-\"\n            result -= o\n  \
    \      elseif op == \"*\"\n            result *= o\n        elseif op == \"//\"\
    \n            result = div(result, o)\n        elseif op == \"**\"\n         \
    \   result ^= o\n        end\n    end\n    return result\nend\n \nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp63ehrrbg.jl:52\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp63ehrrbg.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp63ehrrbg.jl:50\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp63ehrrbg.jl:48\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # Your code here.\nend\nprintln(do_algebra([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n \n# Expected output: 9\nusing Test\n\n@testset begin\n\ncandidate\
    \ = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\nClosest candidates are:\n  convert(::Type{T}, !Matched::T)\
    \ where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \  convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \  ...\nStacktrace:\n [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \   @ Main /tmp/tmp4ir3o80q.jl:27\n [2] top-level scope\n   @ /tmp/tmp4ir3o80q.jl:28\n\
    in expression starting at /tmp/tmp4ir3o80q.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # your code here\n    return 0 # change 0 to your solution\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpmmo3fra5.jl:34\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 0 == 37\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmmo3fra5.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmmo3fra5.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpmmo3fra5.jl:35\n  Expression: candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9\n   Evaluated: 0 == 9\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmmo3fra5.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmmo3fra5.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpmmo3fra5.jl:36\n  Expression: candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmmo3fra5.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmmo3fra5.jl:33\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmmo3fra5.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n  \n    # YOUR CODE HERE\n    operand = Vector{Int64}()\n    for oprand in\
    \ operand\n        if (oprand != 0)\n            push!(operand, oprand)\n    \
    \    end\n    end\n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if (operator[i] == '*')\n            result = result * operand[i+1]\n\
    \        elseif (operator[i] == '+')\n            result = result + operand[i+1]\n\
    \        elseif (operator[i] == '-')\n            result = result - operand[i+1]\n\
    \        elseif (operator[i] == '//')\n            result = result \xF7 operand[i+1]\n\
    \        elseif (operator[i] == '**')\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\n    \n    #end of your code\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpnbzno_67.jl:42\nin expression\
    \ starting at /tmp/tmpnbzno_67.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # YOUR CODE HERE\n    result = operand[1]\n    for i = 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = trunc(Int64, result) // trunc(Int64, operand[i+1])\n\
    \        elseif operator[i] == \"**\"\n            result = trunc(Int64, result)\
    \ ^ trunc(Int64, operand[i+1])\n        end\n    end\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp0gilifyh.jl:49\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0gilifyh.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0gilifyh.jl:47\ntest set: Error\
    \ During Test at /tmp/tmp0gilifyh.jl:50\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp0gilifyh.jl:41\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp0gilifyh.jl:50 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp0gilifyh.jl:47\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0gilifyh.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # function goes here.\n    \n    @assert length(operator) == length(operand)\
    \ - 1\n    @assert length(operator) >= 1\n    @assert length(operand) >= 2\n \
    \   \n    result = operand[1]\n    for i in 1:length(operator)\n        result\
    \ = eval(:(result $operator[i] operand[i+1]))\n    end\n    return result\n  \
    \  \nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsugd1ryf.jl:34\nin expression starting at\
    \ /tmp/tmpsugd1ryf.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # Your code goes here\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpp70_o9t5.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpp70_o9t5.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp70_o9t5.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp70_o9t5.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpp70_o9t5.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpp70_o9t5.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp70_o9t5.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/cento"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp70_o9t5.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 2:length(operand)\n        if operator[i-1]\
    \ == \"+\"\n            result += operand[i]\n        elseif operator[i-1] ==\
    \ \"-\"\n            result -= operand[i]\n        elseif operator[i-1] == \"\
    *\"\n            result *= operand[i]\n        elseif operator[i-1] == \"//\"\n\
    \            result = floor(Int64, result / operand[i])\n        elseif operator[i-1]\
    \ == \"**\"\n            result = result ^ operand[i]\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbsz3n5xt.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbsz3n5xt.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbsz3n5xt.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbsz3n5xt.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpx86qqkdn.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpx86qqkdn.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx86qqkdn.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx86qqkdn.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpx86qqkdn.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpx86qqkdn.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx86qqkdn.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/cento"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx86qqkdn.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9mmw3_oy.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9mmw3_oy.jl:1\n\
    in expression starting at /tmp/tmp9mmw3_oy.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    #TODO: Implement your function here\n    #return result\n    if length(operator)\
    \ != length(operand) - 1\n        error(\"ERROR: the length of operator list is\
    \ equal to the length of operand list minus one.\")\n    end\n    if length(operator)\
    \ < 1\n        error(\"ERROR: Operator list has at least one operator\")\n   \
    \ end\n    if length(operand) < 2\n        error(\"ERROR: operand list has at\
    \ least two operands\")\n    end\n    result = operand[1]\n    for i = 1:length(operator)\n\
    \        result = eval(string(result, operator[i], operand[i+1]))\n    end\n \
    \   return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7c4390bh.jl:48\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type String to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp7c4390bh.jl:41\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7c4390bh.jl:48 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7c4390bh.jl:47\ntest set:\
    \ Error During Test at /tmp/tmp7c4390bh.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type String to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp7c4390bh.jl:41\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7c4390bh.jl:49 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7c4390bh.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        op = operator[i]\n\
    \        if op == \"+\"\n            result += operand[i+1]\n        elseif op\
    \ == \"-\"\n            result -= operand[i+1]\n        elseif op == \"*\"\n \
    \           result *= operand[i+1]\n        elseif op == \"//\"\n            result\
    \ = convert(Int64,result)\n            result = result \xF7 operand[i+1]\n   \
    \     elseif op == \"**\"\n            result = result ^ operand[i+1]\n      \
    \  end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpiuln2_v4.jl:50\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiuln2_v4.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiuln2_v4.jl:48\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiuln2_v4.jl:46\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = div(result, operand[i+1])\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpa2e1zlf1.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa2e1zlf1.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa2e1zlf1.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa2e1zlf1.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"*\"\n            result *= operand[i+1]\n        elseif operator[i] ==\
    \ \"+\"\n            result += operand[i+1]\n        elseif operator[i] == \"\
    -\"\n            result -= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = div(result, operand[i+1])\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpf9v0n9v3.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf9v0n9v3.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf9v0n9v3.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf9v0n9v3.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    assert length(operator) == length(operand) - 1\n    result = operand[1]\n\
    \    for i in 1:length(operator)\n        operand1 = operand[i]\n        operand2\
    \ = operand[i+1]\n        operator1 = operator[i]\n        #@show operator1, operand1,\
    \ operand2\n        if operator1 == \"+\"\n            result = operand1 + operand2\n\
    \        elseif operator1 == \"-\"\n            result = operand1 - operand2\n\
    \        elseif operator1 == \"*\"\n            result = operand1 * operand2\n\
    \        elseif operator1 == \"//\"\n            result = operand1 // operand2\n\
    \        elseif operator1 == \"**\"\n            result = operand1 ^ operand2\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpc53gr0gu.jl:25 expected\
    \ \"end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpc53gr0gu.jl:26\n\
    in expression starting at /tmp/tmpc53gr0gu.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    \nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpt62eqlvh.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpt62eqlvh.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt62eqlvh.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt62eqlvh.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpt62eqlvh.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpt62eqlvh.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt62eqlvh.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/cento"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt62eqlvh.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # Your code here\n    ans = operand[1]\n    for i in 2:length(operand)\n\
    \        if operator[i-1] == \"+\"\n            ans += operand[i]\n        elseif\
    \ operator[i-1] == \"-\"\n            ans -= operand[i]\n        elseif operator[i-1]\
    \ == \"*\"\n            ans *= operand[i]\n        elseif operator[i-1] == \"\
    //\"\n            ans //= operand[i]\n        elseif operator[i-1] == \"**\"\n\
    \            ans = ans^operand[i]\n        end\n    end\n    return ans\nend\n\
    using Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpu5wac6pf.jl:49\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu5wac6pf.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu5wac6pf.jl:47\ntest set: Error\
    \ During Test at /tmp/tmpu5wac6pf.jl:50\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpu5wac6pf.jl:41\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpu5wac6pf.jl:50 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpu5wac6pf.jl:47\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu5wac6pf.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    op = operator[1]\n    op1 = operand[1]\n    op2 = operand[2]\n    if op\
    \ == \"+\"\n        sum = op1 + op2\n    elseif op == \"-\"\n        sum = op1\
    \ - op2\n    elseif op == \"*\"\n        sum = op1 * op2\n    elseif op == \"\
    //\"\n        sum = op1 \xF7 op2\n    elseif op == \"**\"\n        sum = op1 ^\
    \ op2\n    end\n    for i in 3:length(operand)\n        if operator[i-1] == \"\
    +\"\n            sum = sum + operand[i]\n        elseif operator[i-1] == \"-\"\
    \n            sum = sum - operand[i]\n        elseif operator[i-1] == \"*\"\n\
    \            sum = sum * operand[i]\n        elseif operator[i-1] == \"//\"\n\
    \            sum = sum \xF7 operand[i]\n        elseif operator[i-1] == \"**\"\
    \n            sum = sum ^ operand[i]\n        end\n    end\n    return sum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpoug97ejs.jl:61\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoug97ejs.jl:61 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoug97ejs.jl:59\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoug97ejs.jl:57\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    total = operand[1]\n    for i = 1:length(operator)\n        @eval total\
    \ $operator[i] operand[i+1]\n    end\n    return total\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"],\
    \ [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5])\
    \ == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: None
  stderr: "b'ERROR: LoadError: MethodError: no method matching var\"@eval\"(::LineNumberNode,\
    \ ::Module, ::Symbol, ::Expr, ::Expr)\\nClosest candidates are:\\n  var\"@eval\"\
    (::LineNumberNode, ::Module, ::Any, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:234\\\
    n  var\"@eval\"(::LineNumberNode, ::Module, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:231\\\
    nStacktrace:\\n [1] #macroexpand#51\\n   @ ./expr.jl:115 [inlined]\\n [2] macroexpand\\\
    n   @ ./expr.jl:114 [inlined]\\n [3] docm(source::LineNumberNode, mod::Module,\
    \ meta::Any, ex::Any, define::Bool) (repeats 2 times)\\n   @ Base.Docs ./docs/Docs.jl:537\\\
    n [4] var\"@doc\"(::LineNumberNode, ::Module, ::String, ::'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    if length(operator) != length(operand) - 1 \n        return 0\n    end\n\
    \    # Initializing variables\n    current_value = operand[1]\n   \n    # Iterating\
    \ through the lists\n    for i in 1:length(operator)\n        if operator[i] ==\
    \ \"+\"\n            current_value += operand[i+1]\n        elseif operator[i]\
    \ == \"-\"\n            current_value -= operand[i+1]\n        elseif operator[i]\
    \ == \"*\"\n            current_value *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            current_value = convert(Int64, current_value / operand[i+1])\n\
    \        elseif operator[i] == \"**\"\n            current_value ^= operand[i+1]\n\
    \        end\n    end\n    return current_value\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t\
    @test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4otftsuh.jl:54\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4otftsuh.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4otftsuh.jl:52\ntest set: Error\
    \ During Test at /tmp/tmp4otftsuh.jl:55\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(2.3333333333333335)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp4otftsuh.jl:41\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp4otftsuh.jl:55 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp4otftsuh.jl:52\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4otftsuh.jl:50\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    \"\"\"\n    Input:\n        operator: a list of algebric operators.\n\
    \        operand: a list of non-negative integers.\nusing Test\n\n@testset begin\n\
    \ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t\
    @test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd2ap5rqj.jl:1\nin expression starting at /tmp/tmpd2ap5rqj.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    i = 1\n    while i <= length(operator)\n        if operator[i] == \"//\"\
    \n            operand[i] = operand[i] // operand[i+1]\n            deleteat!(operand,\
    \ i+1)\n            deleteat!(operator, i)\n        elseif operator[i] == \"**\"\
    \n            operand[i] = operand[i] ^ operand[i+1]\n            deleteat!(operand,\
    \ i+1)\n            deleteat!(operator, i)\n        else\n            i += 1\n\
    \        end\n    end\n    i = 1\n    while i <= length(operator)\n        if\
    \ operator[i] == \"*\"\n            operand[i] = operand[i] * operand[i+1]\n \
    \           deleteat!(operand, i+1)\n            deleteat!(operator, i)\n    \
    \    elseif operator[i] == \"/\"\n            operand[i] = operand[i] / operand[i+1]\n\
    \            deleteat!(operand, i+1)\n            deleteat!(operator, i)\n   \
    \     else\n            i += 1\n        end\n    end\n    i = 1\n    while i <=\
    \ length(operator)\n        if operator[i] == \"+\"\n            operand[i] =\
    \ operand[i] + operand[i+1]\n            deleteat!(operand, i+1)\n           \
    \ deleteat!(operator, i)\n        elseif operator[i] == \"-\"\n            operand[i]\
    \ = operand[i] - operand[i+1]\n            deleteat!(operand, i+1)\n         \
    \   deleteat!(operator, i)\n        else\n            i += 1\n        end\n  \
    \  end\n    return operand[1]\nend\n# (i)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptcwuzkq9.jl:78\n  Test threw exception\n\
    \  Expression: candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(7//3)\n\
    \  Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] setindex!\n     @ ./array.jl:903 [inlined]\n\
    \   [4] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n     @ Main\
    \ /tmp/tmptcwuzkq9.jl:29\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmptcwuzkq9.jl:78 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmptcwuzkq9.jl:75\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    2      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptcwuzkq9.jl:73\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7j76q9e1.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp7j76q9e1.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7j76q9e1.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7j76q9e1.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp7j76q9e1.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp7j76q9e1.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7j76q9e1.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/cento"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7j76q9e1.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = div(result, operand[i+1])\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpd0odn5lh.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd0odn5lh.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd0odn5lh.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd0odn5lh.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    #Check for incorrect operator or operand list lengths\n    if length(operator)\
    \ != length(operand) - 1\n        error(\"Error: the lengths of the operator and\
    \ operand lists are not correct.\")\n    end\n    #Check for incorrect number\
    \ of operators\n    if length(operator) < 1\n        error(\"Error: There is no\
    \ operator to perform calculations on the operands\")\n    end\n    #Check for\
    \ incorrect number of operands\n    if length(operand) < 2\n        error(\"Error:\
    \ There must be at least two numbers to perform a calculation\")\n    end\n  \
    \  #Check for illegal operator types\n    illegal_operator_type = [\"+\", \"-\"\
    , \"*\", \"//\", \"**\"]\n    for i in operator\n        if !(i in illegal_operator_type)\n\
    \            error(\"Error: One or more operators are not of the right type.\"\
    )\n        end\n    end\n    #Check for illegal operand types\n    for i in operand\n\
    \        if !(typeof(i) == Int64)\n            error(\"Error: One or more operands\
    \ are not of the right type.\")\n        end\n    end\n    #If all the above checks\
    \ are passed, then proceed with the calculation.\n    result = operand[1]\n  \
    \  for i in 1:length(operator)\n        if operator[i] == \"+\"\n            result\
    \ += operand[i+1]\n        elseif operator[i] == \"-\"\n            result -=\
    \ operand[i+1]\n        elseif operator[i] == \"*\"\n            result *= operand[i+1]\n\
    \        elseif operator[i] == \"//\"\n            result = div(result, operand[i+1])\n\
    \        elseif operator[i] == \"**\"\n            result ^= operand[i+1]\n  \
    \      end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnuec5iu5.jl:74\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnuec5iu5.jl:74 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnuec5iu5.jl:72\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnuec5iu5.jl:70\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    operation = \"\"\n    for i in 1:length(operator)\n        operation =\
    \ operation * operator[i] * string(operand[i+1])\n    end\n    return eval(string(operand[1])\
    \ * operation)\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3016b28o.jl:37\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type String to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp3016b28o.jl:30\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3016b28o.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3016b28o.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp3016b28o.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type String to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp3016b28o.jl:30\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3016b28o.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3016b28o.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    length = length(operator)\n    for i in 1:length\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = floor(Int64, result^operand[i+1])\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpsgxn7kuj.jl:48\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  UndefVarError:\
    \ length not defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmpsgxn7kuj.jl:27\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsgxn7kuj.jl:48 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsgxn7kuj.jl:47\ntest set:\
    \ Error During Test at /tmp/tmpsgxn7kuj.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  UndefVarError: length\
    \ not defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpsgxn7kuj.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsgxn7kuj.jl:49 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsgxn7kuj.jl:47\ntest set:\
    \ Error During Test at /tmp/tmpsgxn7kuj.jl:50\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  UndefVarError: length not defined\n\
    \  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpsgxn7kuj.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsgxn7kuj.jl:50 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsgxn7kuj.jl:47\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsgxn7kuj.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 2:length(operand)\n        if operator[i-1]\
    \ == \"+\"\n            result += operand[i]\n        elseif operator[i-1] ==\
    \ \"-\"\n            result -= operand[i]\n        elseif operator[i-1] == \"\
    *\"\n            result *= operand[i]\n        elseif operator[i-1] == \"//\"\n\
    \            result //= operand[i]\n        elseif operator[i-1] == \"**\"\n \
    \           result ^= operand[i]\n        end\n    end\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpdlpjii8q.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdlpjii8q.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdlpjii8q.jl:46\ntest set: Error\
    \ During Test at /tmp/tmpdlpjii8q.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpdlpjii8q.jl:40\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpdlpjii8q.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpdlpjii8q.jl:46\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdlpjii8q.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    #**********************************************************************\n\
    \    # YOUR CODE HERE\n    #**********************************************************************\n\
    \    value=operand[1]\n    num=length(operator)\n    for i in 1:num\n        operator[i]==\"\
    +\" ? value+=operand[i+1] :\n        operator[i]==\"-\" ? value-=operand[i+1]\
    \ :\n        operator[i]==\"*\" ? value*=operand[i+1] :\n        operator[i]==\"\
    //\" ? value=floor(Int64,value/operand[i+1]) :\n        operator[i]==\"**\" ?\
    \ value=floor(Int64,value^operand[i+1]) :\n        print(\"Invalid operator\"\
    )\n    end\n    return value\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_3dbo8bu.jl:47\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_3dbo8bu.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_3dbo8bu.jl:45\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_3dbo8bu.jl:43\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9awmqx7l.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp9awmqx7l.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9awmqx7l.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9awmqx7l.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp9awmqx7l.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp9awmqx7l.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9awmqx7l.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/cento"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9awmqx7l.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    j = 1\n    i = 1\n    while i < length(operator)\n\
    \        j += 1\n        if operator[i] == \"+\"\n            result += operand[j]\n\
    \        elseif operator[i] == \"-\"\n            result -= operand[j]\n     \
    \   elseif operator[i] == \"*\"\n            result *= operand[j]\n        elseif\
    \ operator[i] == \"//\"\n            result = floor(Int64,result/operand[j])\n\
    \        elseif operator[i] == \"**\"\n            result = floor(Int64,result^operand[j])\n\
    \        end\n        i += 1\n    end\n    return result\nend\n \nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp49w38j9t.jl:52\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 32 == 37\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp49w38j9t.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp49w38j9t.jl:51\ntest set: Test\
    \ Failed at /tmp/tmp49w38j9t.jl:53\n  Expression: candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9\n   Evaluated: 20 == 9\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp49w38j9t.jl:53 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp49w38j9t.jl:51\ntest set: Test\
    \ Failed at /tmp/tmp49w38j9t.jl:54\n  Expression: candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8\n   Evaluated: 2 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp49w38j9t.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp49w38j9t.jl:51\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp49w38j9t.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # YOUR CODE HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp363gzzs8.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp363gzzs8.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp363gzzs8.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp363gzzs8.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp363gzzs8.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp363gzzs8.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp363gzzs8.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/cento"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp363gzzs8.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    \nend\n \nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t\
    @test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpquav65m4.jl:34\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpquav65m4.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpquav65m4.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpquav65m4.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpquav65m4.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpquav65m4.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpquav65m4.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/cento"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpquav65m4.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    \nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpakbhyc0p.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpakbhyc0p.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpakbhyc0p.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpakbhyc0p.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpakbhyc0p.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpakbhyc0p.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpakbhyc0p.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/cento"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpakbhyc0p.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    n = length(operator)\n    result = operand[1]\n    for i = 1:n\n     \
    \   if operator[i] == \"+\"\n            result += operand[i+1]\n        elseif\
    \ operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif operator[i]\
    \ == \"*\"\n            result *= operand[i+1]\n        elseif operator[i] ==\
    \ \"//\"\n            result = floor(Int64, result/operand[i+1])\n        elseif\
    \ operator[i] == \"**\"\n            result = result^operand[i+1]\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq_8_ain5.jl:49\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq_8_ain5.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq_8_ain5.jl:47\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq_8_ain5.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    \n    alg_operand = 0\n    for (i,operands) in enumerate(operand)\n  \
    \      if operands == operand[1]\n            alg_operand = operands\n       \
    \ elseif operands != operand[1]\n            if operator[i-1] == \"+\"\n     \
    \           alg_operand = alg_operand + operands\n            elseif operator[i-1]\
    \ == \"-\"\n                alg_operand = alg_operand - operands\n           \
    \ elseif operator[i-1] == \"*\"\n                alg_operand = alg_operand * operands\n\
    \            elseif operator[i-1] == \"//\"\n                alg_operand = alg_operand\
    \ \xF7 operands\n            elseif operator[i-1] == \"**\"\n                alg_operand\
    \ = alg_operand ^ operands\n            end\n        end\n    end\n    \n    return\
    \ alg_operand\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t\
    @test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdwk1sgyo.jl:54\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdwk1sgyo.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdwk1sgyo.jl:52\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdwk1sgyo.jl:50\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 2:length(operand)\n        if operator[i-1]\
    \ == \"+\"\n            result += operand[i]\n        elseif operator[i-1] ==\
    \ \"-\"\n            result -= operand[i]\n        elseif operator[i-1] == \"\
    *\"\n            result *= operand[i]\n        elseif operator[i-1] == \"//\"\n\
    \            result //= operand[i]\n        elseif operator[i-1] == \"**\"\n \
    \           result ^= operand[i]\n        end\n    end\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpkhbeg1ry.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkhbeg1ry.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkhbeg1ry.jl:46\ntest set: Error\
    \ During Test at /tmp/tmpkhbeg1ry.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpkhbeg1ry.jl:40\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpkhbeg1ry.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpkhbeg1ry.jl:46\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkhbeg1ry.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmuwn7muy.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpmuwn7muy.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmuwn7muy.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmuwn7muy.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpmuwn7muy.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpmuwn7muy.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmuwn7muy.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/cento"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmuwn7muy.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    length_operand = length(operand)\n    result = operand[1]\n    for i in\
    \ 1:length(operator)\n        if operator[i] == \"+\"\n            result += operand[i+1]\n\
    \        elseif operator[i] == \"-\"\n            result -= operand[i+1]\n   \
    \     elseif operator[i] == \"*\"\n            result *= operand[i+1]\n      \
    \  elseif operator[i] == \"//\"\n            result = result \xF7 operand[i+1]\n\
    \        elseif operator[i] == \"**\"\n            result ^= operand[i+1]\n  \
    \      end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5rj9bf21.jl:49\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5rj9bf21.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5rj9bf21.jl:47\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5rj9bf21.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # your code goes here\n    return 0\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t\
    @test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_dlr22xg.jl:34\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 0 == 37\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_dlr22xg.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_dlr22xg.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp_dlr22xg.jl:35\n  Expression: candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9\n   Evaluated: 0 == 9\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_dlr22xg.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_dlr22xg.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp_dlr22xg.jl:36\n  Expression: candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_dlr22xg.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_dlr22xg.jl:33\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_dlr22xg.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    \"\"\"\n    DO NOT EDIT THIS FUNCTION\n    \"\"\"\n    operand = collect(operand)\n\
    \    for i in 1:length(operator)\n        a = operand[i]\n        b = operand[i+1]\n\
    \        if operator[i] == \"+\"\n            operand[i+1] = a + b\n        elseif\
    \ operator[i] == \"-\"\n            operand[i+1] = a - b\n        elseif operator[i]\
    \ == \"*\"\n            operand[i+1] = a * b\n        elseif operator[i] == \"\
    //\"\n            operand[i+1] = a // b\n        elseif operator[i] == \"**\"\n\
    \            operand[i+1] = a ^ b\n        end\n    end\n    return operand[end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpn5karhge.jl:53\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn5karhge.jl:53 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn5karhge.jl:51\ntest set: Error\
    \ During Test at /tmp/tmpn5karhge.jl:54\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(7//3)\n  Stacktrace:\n\
    \   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n     @ ./number.jl:7\
    \ [inlined]\n   [3] setindex!\n     @ ./array.jl:903 [inlined]\n   [4] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmpn5karhge.jl:40\n   [5] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpn5karhge.jl:54 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpn5karhge.jl:51\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn5karhge.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    #your code here\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0qt1_g0g.jl:34\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: -1 == 37\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0qt1_g0g.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0qt1_g0g.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp0qt1_g0g.jl:35\n  Expression: candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9\n   Evaluated: -1 == 9\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0qt1_g0g.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0qt1_g0g.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp0qt1_g0g.jl:36\n  Expression: candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8\n   Evaluated: -1 == 8\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp0qt1_g0g.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0qt1_g0g.jl:33\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0qt1_g0g.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    \n    result = operand[1]\n    operand_index = 2\n    for symbol in operator\n\
    \        if symbol == \"+\"\n            result += operand[operand_index]\n  \
    \      elseif symbol == \"-\"\n            result -= operand[operand_index]\n\
    \        elseif symbol == \"*\"\n            result *= operand[operand_index]\n\
    \        elseif symbol == \"//\"\n            result = div(result, operand[operand_index])\n\
    \        elseif symbol == \"**\"\n            result ^= operand[operand_index]\n\
    \        end\n        operand_index += 1\n    end\n    return result\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpisnl2ydk.jl:51\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpisnl2ydk.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpisnl2ydk.jl:49\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpisnl2ydk.jl:47\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i = 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result //= operand[i+1]\n        elseif operator[i] == \"**\"\n \
    \           result ^= operand[i+1]\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpt5vblmrb.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt5vblmrb.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt5vblmrb.jl:46\ntest set: Error\
    \ During Test at /tmp/tmpt5vblmrb.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpt5vblmrb.jl:40\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpt5vblmrb.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpt5vblmrb.jl:46\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt5vblmrb.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # your code here\n    return 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx62b5y9u.jl:34\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 0 == 37\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx62b5y9u.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx62b5y9u.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpx62b5y9u.jl:35\n  Expression: candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9\n   Evaluated: 0 == 9\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx62b5y9u.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx62b5y9u.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpx62b5y9u.jl:36\n  Expression: candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx62b5y9u.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx62b5y9u.jl:33\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx62b5y9u.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    eval(string(reduce(*, operand), \" \", join(operator, \" \")))\nend\n\
    using Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpblbb4yxc.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type String to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpblbb4yxc.jl:26\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpblbb4yxc.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpblbb4yxc.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpblbb4yxc.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type String to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpblbb4yxc.jl:26\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpblbb4yxc.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpblbb4yxc.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    ##############################################################################\n\
    \    #### Write your code in the next line of code                           \
    \  ####\n    result = operand[1]\n    for i in 2:length(operand)\n        if operator[i-1]\
    \ == \"+\"\n            result += operand[i]\n        elseif operator[i-1] ==\
    \ \"-\"\n            result -= operand[i]\n        elseif operator[i-1] == \"\
    *\"\n            result *= operand[i]\n        elseif operator[i-1] == \"//\"\n\
    \            result = div(result, operand[i])\n        elseif operator[i-1] ==\
    \ \"**\"\n            result ^= operand[i]\n        end\n    end\n    ####   \
    \                                                                  ####\n    ##############################################################################\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2bhzrv63.jl:52\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2bhzrv63.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2bhzrv63.jl:50\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2bhzrv63.jl:48\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 2:length(operand)\n        if operator[i-1]\
    \ == \"+\"\n            result += operand[i]\n        elseif operator[i-1] ==\
    \ \"-\"\n            result -= operand[i]\n        elseif operator[i-1] == \"\
    *\"\n            result *= operand[i]\n        elseif operator[i-1] == \"//\"\n\
    \            result = div(result, operand[i])\n        elseif operator[i-1] ==\
    \ \"**\"\n            result ^= operand[i]\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpoynfdjl9.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoynfdjl9.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoynfdjl9.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoynfdjl9.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    println(operator)\n    for (i, op) in enumerate(operator)\n\
    \        println(op)\n        if op == \"+\"\n            result += operand[i+1]\n\
    \        elseif op == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ op == \"*\"\n            result *= operand[i+1]\n        elseif op == \"//\"\
    \n            result //= operand[i+1]\n        elseif op == \"**\"\n         \
    \   result = result ^ operand[i+1]\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "[\"**\", \"*\", \"+\"]\n**\n*\n+\n[\"+\", \"*\", \"-\"]\n+\n*\n-\ntest\
    \ set: Test Failed at /tmp/tmpi931tli5.jl:50\n  Expression: candidate([\"+\",\
    \ \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi931tli5.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi931tli5.jl:48\n[\"//\", \"*\"\
    ]\n//\n*\ntest set: Error During Test at /tmp/tmpi931tli5.jl:51\n  Test threw\
    \ exception\n  Expression: candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError:\
    \ Int64(28//3)\n  Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n\
    \   [2] convert\n     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmpi931tli5.jl:42\n   [4] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpi931tli5.jl:51 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpi931tli5.jl:48\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi931tli5.jl:46\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result //= operand[i+1]\n        elseif operator[i] == \"**\"\n \
    \           result ^= operand[i+1]\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpqk_gqet9.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqk_gqet9.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqk_gqet9.jl:46\ntest set: Error\
    \ During Test at /tmp/tmpqk_gqet9.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpqk_gqet9.jl:40\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpqk_gqet9.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpqk_gqet9.jl:46\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqk_gqet9.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i = 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result //= operand[i+1]\n        elseif operator[i] == \"**\"\n \
    \           result = result ^ operand[i+1]\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp4a9aknuw.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4a9aknuw.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4a9aknuw.jl:46\ntest set: Error\
    \ During Test at /tmp/tmp4a9aknuw.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp4a9aknuw.jl:40\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp4a9aknuw.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp4a9aknuw.jl:46\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4a9aknuw.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    start_index = 1\n    end_index = 2\n    array_index = 1\n    while end_index\
    \ != length(operand) + 1\n        current_operator = operator[array_index]\n \
    \       current_operand_one = operand[start_index]\n        current_operand_two\
    \ = operand[end_index]\n        if current_operator == \"+\"\n            operand[end_index]\
    \ = current_operand_one + current_operand_two\n        elseif current_operator\
    \ == \"-\"\n            operand[end_index] = current_operand_one - current_operand_two\n\
    \        elseif current_operator == \"*\"\n            operand[end_index] = current_operand_one\
    \ * current_operand_two\n        elseif current_operator == \"//\"\n         \
    \   operand[end_index] = convert(Int64, current_operand_one // current_operand_two)\n\
    \        elseif current_operator == \"**\"\n            operand[end_index] = current_operand_one\
    \ ^ current_operand_two\n        end\n        start_index += 1\n        end_index\
    \ += 1\n        array_index += 1\n    end\n    return operand[end_index - 1]\n\
    end\n        \noperator = [\"+\", \"-\", \"*\", \"//\", \"**\"]\noperand = [2,\
    \ 3, 4, 5]\ndo_algebra(operator, operand)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_4vzbwse.jl:60\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_4vzbwse.jl:60 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_4vzbwse.jl:58\ntest set: Error\
    \ During Test at /tmp/tmp_4vzbwse.jl:61\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(7//3)\n  Stacktrace:\n\
    \   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n     @ ./number.jl:7\
    \ [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp_4vzbwse.jl:40\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp_4vzbwse.jl:61 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp_4vzbwse.jl:58\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_4vzbwse.jl:56\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 2:length(operand)\n        if operator[i-1]\
    \ == \"+\"\n            result += operand[i]\n        elseif operator[i-1] ==\
    \ \"-\"\n            result -= operand[i]\n        elseif operator[i-1] == \"\
    *\"\n            result *= operand[i]\n        elseif operator[i-1] == \"//\"\n\
    \            result //= operand[i]\n        elseif operator[i-1] == \"**\"\n \
    \           result ^= operand[i]\n        end\n    end\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpt9a0kckr.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt9a0kckr.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt9a0kckr.jl:46\ntest set: Error\
    \ During Test at /tmp/tmpt9a0kckr.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpt9a0kckr.jl:40\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpt9a0kckr.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpt9a0kckr.jl:46\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt9a0kckr.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    \n    if isempty(operator)\n        return operand[1]\n    end\n    if\
    \ isempty(operand)\n        return 0\n    end\n    \n    expr = parse(r\"$(operand[1])\
    \ $(operator[1]) $(operand[2])\")\n    return do_algebra(operator[2:end], [eval(expr)\
    \ , operand[3:end]...] )\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpte8bc5es.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpte8bc5es.jl:1\n\
    in expression starting at /tmp/tmpte8bc5es.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    \"\"\"\n    Write your function body.\n    \"\"\"\n    \nend\nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpruxzowxq.jl:36\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type String to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpruxzowxq.jl:26\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpruxzowxq.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpruxzowxq.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpruxzowxq.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type String to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpruxzowxq.jl:26\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpruxzowxq.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpruxzowxq.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 2:length(operand)\n        operator_index\
    \ = i - 1\n        operator_element = operator[operator_index]\n        operand_element\
    \ = operand[i]\n        result = eval(parse(operator_element * \"(\" * string(result)\
    \ * \",\" * string(operand_element) * \")\"))\n    end\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpvmw7vs25.jl:40\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ no method matching parse(::String)\n  Closest candidates are:\n    parse(!Matched::Type{T},\
    \ !Matched::AbstractString) where T<:Complex at /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:381\n\
    \    parse(!Matched::Type{T}, !Matched::AbstractChar; base) where T<:Integer at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:40\n    parse(!Matched::Type{T},\
    \ !Matched::AbstractString; base) where T<:Integer at /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:240\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpvmw7vs25.jl:31\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvmw7vs25.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvmw7vs25.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpvmw7vs25.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: no method\
    \ matching parse(::String)\n  Closest candidates are:\n    parse(!Matched::Type{T},\
    \ !Matched::AbstractString) where T<:Complex at /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:381\n\
    \    parse(!Matched::Type{T}, !Matched::AbstractChar; base) where T<:Integer at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:40\n    parse(!Matched::Type{T},\
    \ !Matched::AbstractString; base) where T<:Integer at /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:240\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpvmw7vs25.jl:31\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvmw7vs25.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ /shar"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvmw7vs25.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    \"\"\"\n    This function is used to compute the algebraic expression.\n\
    \    \"\"\"\n    result = operand[1]\n    for i = 1:length(operator)\n       \
    \ if operator[i] == \"+\"\n            result += operand[i+1]\n        elseif\
    \ operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif operator[i]\
    \ == \"*\"\n            result *= operand[i+1]\n        elseif operator[i] ==\
    \ \"//\"\n            result //= operand[i+1]\n        elseif operator[i] == \"\
    **\"\n            result ^= operand[i+1]\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmprysqedf1.jl:51\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprysqedf1.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprysqedf1.jl:49\ntest set: Error\
    \ During Test at /tmp/tmprysqedf1.jl:52\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmprysqedf1.jl:43\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmprysqedf1.jl:52 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmprysqedf1.jl:49\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprysqedf1.jl:47\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpagpcrhdh.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpagpcrhdh.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpagpcrhdh.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpagpcrhdh.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpagpcrhdh.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpagpcrhdh.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpagpcrhdh.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/cento"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpagpcrhdh.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    acc = operand[1]\n    for (op, opnd) in zip(operator, operand[2:end])\n\
    \        if op == \"+\"\n            acc += opnd\n        elseif op == \"-\"\n\
    \            acc -= opnd\n        elseif op == \"*\"\n            acc *= opnd\n\
    \        elseif op == \"//\"\n            acc = trunc(Int64, acc) \xF7 trunc(Int64,\
    \ opnd)\n        elseif op == \"**\"\n            acc ^= opnd\n        end\n \
    \   end\n    return acc\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmzt9fv9s.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmzt9fv9s.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmzt9fv9s.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmzt9fv9s.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i = 1:length(operator)\n        result =\
    \  eval( parse( string( result, operator[i], operand[i+1] ) ) )\n    end\n   \
    \ return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmvf7cccl.jl:37\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ no method matching parse(::String)\n  Closest candidates are:\n    parse(!Matched::Type{T},\
    \ !Matched::AbstractString) where T<:Complex at /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:381\n\
    \    parse(!Matched::Type{T}, !Matched::AbstractChar; base) where T<:Integer at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:40\n    parse(!Matched::Type{T},\
    \ !Matched::AbstractString; base) where T<:Integer at /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:240\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpmvf7cccl.jl:28\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmvf7cccl.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmvf7cccl.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpmvf7cccl.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: no method\
    \ matching parse(::String)\n  Closest candidates are:\n    parse(!Matched::Type{T},\
    \ !Matched::AbstractString) where T<:Complex at /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:381\n\
    \    parse(!Matched::Type{T}, !Matched::AbstractChar; base) where T<:Integer at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:40\n    parse(!Matched::Type{T},\
    \ !Matched::AbstractString; base) where T<:Integer at /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:240\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpmvf7cccl.jl:28\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmvf7cccl.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shar"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmvf7cccl.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n  \nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpol1btboa.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpol1btboa.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpol1btboa.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpol1btboa.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpol1btboa.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpol1btboa.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpol1btboa.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/cento"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpol1btboa.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    \"\"\"\n    >>> do_algebra([\"+\", \"*\", \"-\"], [2, 3, 4, 5])\n    9\n\
    \    >>> do_algebra([\"+\", \"*\", \"-\"], [2, 3, 4, 5, 6])\n    9\n    >>> do_algebra([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5, 6, 7])\n    9\n    >>> do_algebra([\"+\", \"\
    *\", \"-\"], [2, 3, 4, 5, 6, 7, 8])\n    9\n    >>> do_algebra([\"+\", \"*\",\
    \ \"-\"], [2, 3, 4, 5, 6, 7, 8, 9])\n    9\n    >>> do_algebra([\"+\", \"*\",\
    \ \"-\"], [2, 3, 4, 5, 6, 7, 8, 9, 10])\n    9\n    >>> do_algebra([\"+\", \"\
    *\", \"-\"], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n    9\n    >>> do_algebra([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n    9\n    >>> do_algebra([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n    9\n    >>>\
    \ do_algebra([\"+\", \"*\", \"-\"], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n\
    \    9\n    >>> do_algebra([\"+\", \"*\", \"-\"], [2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15])\n    9\n    >>> do_algebra([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n    9\n    >>> do_algebra([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5, 6, 7\nusing Test\n\n@testset begin\n\ncandidate\
    \ = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiu2855gs.jl:1\nin expression starting at /tmp/tmpiu2855gs.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i = 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result //= operand[i+1]\n        elseif operator[i] == \"**\"\n \
    \           result ^= operand[i+1]\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpb2np2a5y.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb2np2a5y.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb2np2a5y.jl:46\ntest set: Error\
    \ During Test at /tmp/tmpb2np2a5y.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpb2np2a5y.jl:40\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpb2np2a5y.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpb2np2a5y.jl:46\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb2np2a5y.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # YOUR CODE HERE\n    i=1\n    result=operand[1]\n    for i in 2:length(operand)\n\
    \        if operator[i-1]==\"+\"\n            result=result+operand[i]\n     \
    \   elseif operator[i-1]==\"-\"\n            result=result-operand[i]\n      \
    \  elseif operator[i-1]==\"*\"\n            result=result*operand[i]\n       \
    \ elseif operator[i-1]==\"//\"\n            result=result//operand[i]\n      \
    \  elseif operator[i-1]==\"**\"\n            result=result^operand[i]\n      \
    \  end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj5f6fdit.jl:50\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj5f6fdit.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj5f6fdit.jl:48\ntest set: Error\
    \ During Test at /tmp/tmpj5f6fdit.jl:51\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpj5f6fdit.jl:42\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpj5f6fdit.jl:51 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpj5f6fdit.jl:48\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj5f6fdit.jl:46\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i = 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = div(result, operand[i+1])\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpil27x5ph.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpil27x5ph.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpil27x5ph.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpil27x5ph.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    if length(operator) != length(operand) - 1\n        error(\"The length\
    \ of operator list is equal to the length of operand list minus one.\")\n    end\n\
    \    if length(operator) < 1\n        error(\"Operator list has at least one operator\"\
    )\n    end\n    if length(operand) < 2\n        error(\"Operand list has at least\
    \ two operands\")\n    end\n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result //= operand[i+1]\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        else\n            error(\"\
    The element in operator list can only be: `+`, `-`, `*`, `//`, `**`\")\n     \
    \   end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx6q4vrxg.jl:59\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx6q4vrxg.jl:59 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx6q4vrxg.jl:57\ntest set: Error\
    \ During Test at /tmp/tmpx6q4vrxg.jl:60\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpx6q4vrxg.jl:51\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpx6q4vrxg.jl:60 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpx6q4vrxg.jl:57\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx6q4vrxg.jl:55\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7clcy1c8.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7clcy1c8.jl:1\n\
    in expression starting at /tmp/tmp7clcy1c8.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # Your code here\nend\ndo_algebra(['+', '*', '-'], [2, 3, 4, 5])\n \n\
    ################################################################################\n\
    \"\"\"\n    A list is called rotate if the last element in the list is the same\
    \ as the first \n    element in the list. A list is called rotate-left if the\
    \ first element in the list \n    is the same as the last element in the list.\
    \ Given a list, determine if the list \n    is rotate-left.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"],\
    \ [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5])\
    \ == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: MethodError: no method matching do_algebra(::Vector{Char},\
    \ ::Vector{Int64})\nClosest candidates are:\n  do_algebra(!Matched::Vector{String},\
    \ ::Vector{Int64}) at /tmp/tmpw0tud_mm.jl:25\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmpw0tud_mm.jl:28\nin expression starting at /tmp/tmpw0tud_mm.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    if length(operator) + 1 != length(operand)\n        throw(ArgumentError(\"\
    The length of operator list is equal to the length of operand list minus one.\"\
    ))\n    end\n    if length(operator) == 0\n        throw(ArgumentError(\"Operator\
    \ list has at least one operator.\"))\n    end\n    if length(operand) == 1\n\
    \        throw(ArgumentError(\"Operand list has at least two operands.\"))\n \
    \   end\n    expression = string(operand[1])\n    for i in 2:length(operand)\n\
    \        expression = string(expression, operator[i-1], operand[i])\n    end\n\
    \    return eval(parse(expression))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8gffov3i.jl:46\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ no method matching parse(::String)\n  Closest candidates are:\n    parse(!Matched::Type{T},\
    \ !Matched::AbstractString) where T<:Complex at /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:381\n\
    \    parse(!Matched::Type{T}, !Matched::AbstractChar; base) where T<:Integer at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:40\n    parse(!Matched::Type{T},\
    \ !Matched::AbstractString; base) where T<:Integer at /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:240\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp8gffov3i.jl:39\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8gffov3i.jl:46 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8gffov3i.jl:45\ntest set:\
    \ Error During Test at /tmp/tmp8gffov3i.jl:47\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: no method\
    \ matching parse(::String)\n  Closest candidates are:\n    parse(!Matched::Type{T},\
    \ !Matched::AbstractString) where T<:Complex at /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:381\n\
    \    parse(!Matched::Type{T}, !Matched::AbstractChar; base) where T<:Integer at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:40\n    parse(!Matched::Type{T},\
    \ !Matched::AbstractString; base) where T<:Integer at /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:240\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp8gffov3i.jl:39\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8gffov3i.jl:47 [inlined]\n\
    \   [4] macro expansion\n     @ /shar"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8gffov3i.jl:43\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # Your code here\nend\n```\nusing Test\n\n@testset begin\n\ncandidate\
    \ = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdflkkpzw.jl:28\nin expression starting at\
    \ /tmp/tmpdflkkpzw.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    \n    result = operand[1]\n    for i in 2:length(operand)\n        op\
    \ = operator[i-1]\n        n = operand[i]\n        if op == \"+\"\n          \
    \  result += n\n        elseif op == \"-\"\n            result -= n\n        elseif\
    \ op == \"*\"\n            result *= n\n        elseif op == \"//\"\n        \
    \    result = convert(Int64, result//n)\n        elseif op == \"**\"\n       \
    \     result = convert(Int64, result^n)\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpa9k9p3wq.jl:51\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa9k9p3wq.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa9k9p3wq.jl:49\ntest set: Error\
    \ During Test at /tmp/tmpa9k9p3wq.jl:52\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(7//3)\n  Stacktrace:\n\
    \   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n     @ ./number.jl:7\
    \ [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpa9k9p3wq.jl:38\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpa9k9p3wq.jl:52 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpa9k9p3wq.jl:49\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa9k9p3wq.jl:47\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    res = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            res += operand[i+1]\n        elseif operator[i] == \"\
    -\"\n            res -= operand[i+1]\n        elseif operator[i] == \"*\"\n  \
    \          res *= operand[i+1]\n        elseif operator[i] == \"//\"\n       \
    \     res = div(res, operand[i+1])\n        elseif operator[i] == \"**\"\n   \
    \         res ^= operand[i+1]\n        end\n    end\n    return res\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpuvetxznc.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuvetxznc.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuvetxznc.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuvetxznc.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    \"\"\"\n    Inputs:\n        operator(str): a list of algebraic operators\
    \ (eg. [\"+\", \"-\", \"*\", \"/\"])\n        operand(int): a list of non-negative\
    \ integers.\n    \"\"\"\n    #########################################################################################\n\
    \    # REPLACE THIS WITH YOUR CODE (tutorial)\n    #########################################################################################\n\
    \    result = operand[1]\n    for i in 2:length(operand)\n        op = operator[i-1]\n\
    \        operand_i = operand[i]\n        if op == \"+\"\n            result +=\
    \ operand_i\n        elseif op == \"-\"\n            result -= operand_i\n   \
    \     elseif op == \"*\"\n            result *= operand_i\n        elseif op ==\
    \ \"//\"\n            result //= operand_i\n        elseif op == \"**\"\n    \
    \        result ^= operand_i\n        end\n    end\n    return result\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmphgiv9j8l.jl:58\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphgiv9j8l.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphgiv9j8l.jl:56\ntest set: Error\
    \ During Test at /tmp/tmphgiv9j8l.jl:59\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmphgiv9j8l.jl:50\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmphgiv9j8l.jl:59 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmphgiv9j8l.jl:56\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphgiv9j8l.jl:54\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for op_idx = 1:length(operator)\n        if operator[op_idx]\
    \ == \"+\"\n            result += operand[op_idx + 1]\n        elseif operator[op_idx]\
    \ == \"-\"\n            result -= operand[op_idx + 1]\n        elseif operator[op_idx]\
    \ == \"*\"\n            result *= operand[op_idx + 1]\n        elseif operator[op_idx]\
    \ == \"//\"\n            result //= operand[op_idx + 1]\n        elseif operator[op_idx]\
    \ == \"**\"\n            result ^= operand[op_idx + 1]\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpozp6jldk.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpozp6jldk.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpozp6jldk.jl:46\ntest set: Error\
    \ During Test at /tmp/tmpozp6jldk.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpozp6jldk.jl:40\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpozp6jldk.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpozp6jldk.jl:46\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpozp6jldk.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    for i in 1:length(operator)\n        if operator[i] == \"+\"\n       \
    \     operand[i+1] = operand[i] + operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            operand[i+1] = operand[i] - operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            operand[i+1] = operand[i] * operand[i+1]\n\
    \        elseif operator[i] == \"//\"\n            operand[i+1] = operand[i] //\
    \ operand[i+1]\n        elseif operator[i] == \"**\"\n            operand[i+1]\
    \ = operand[i] ^ operand[i+1]\n        end\n    end\n    return operand[length(operand)]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpr87566q5.jl:47\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr87566q5.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr87566q5.jl:45\ntest set: Error\
    \ During Test at /tmp/tmpr87566q5.jl:48\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(7//3)\n  Stacktrace:\n\
    \   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n     @ ./number.jl:7\
    \ [inlined]\n   [3] setindex!\n     @ ./array.jl:903 [inlined]\n   [4] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmpr87566q5.jl:34\n   [5] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpr87566q5.jl:48 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpr87566q5.jl:45\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr87566q5.jl:43\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 2:length(operand)\n        result =\
    \ do_operation(result, operand[i], operator[i-1])\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmplod5ebts.jl:37\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  UndefVarError:\
    \ do_operation not defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmplod5ebts.jl:28\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplod5ebts.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplod5ebts.jl:36\ntest set:\
    \ Error During Test at /tmp/tmplod5ebts.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  UndefVarError: do_operation\
    \ not defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmplod5ebts.jl:28\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplod5ebts.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplod5ebts.jl:36\ntest set:\
    \ Error During Test at /tmp/tmplod5ebts.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  UndefVarError: do_operation not\
    \ defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmplod5ebts.jl:28\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplod5ebts.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplod5ebts.jl:36\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplod5ebts.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result/operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result = floor(Int64, result^operand[i+1])\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7mb2v4m2.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7mb2v4m2.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7mb2v4m2.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7mb2v4m2.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    op = operator[1]\n    result = operand[1]\n    for i in 2:length(operand)\n\
    \        result = operate(result, operand[i], op)\n        op = operator[i]\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1_1i199k.jl:39\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  UndefVarError:\
    \ operate not defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmp1_1i199k.jl:29\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1_1i199k.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1_1i199k.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp1_1i199k.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  UndefVarError: operate\
    \ not defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp1_1i199k.jl:29\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1_1i199k.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1_1i199k.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp1_1i199k.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  UndefVarError: operate not defined\n\
    \  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp1_1i199k.jl:29\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1_1i199k.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1_1i199k.jl:38\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1_1i199k.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    \n    # Create an empty vector of operands\n    operand_stack = Int64[]\n\
    \    \n    # For each element of operator vector and each element of operand vector,\
    \ \n    # push the first operand into the operand stack, then pop the top two\
    \ elements \n    # of the operand stack and apply the operator to them, and push\
    \ the result back \n    # to the operand stack.\n    for (i,j) in zip(operator,\
    \ operand)\n        push!(operand_stack, j)\n        operand_stack[end-1] = operand_stack[end-1]\
    \ + operand_stack[end]\n        pop!(operand_stack)\n    end\nusing Test\n\n@testset\
    \ begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"],\
    \ [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5])\
    \ == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn8wvoeky.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn8wvoeky.jl:1\n\
    in expression starting at /tmp/tmpn8wvoeky.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    \"\"\"\n    Assuming that the operator list and operand list are valid,\
    \ calculate the result.\n    \"\"\"\n    # error checking\n    if length(operator)\
    \ != length(operand) - 1\n        error(\"The length of operator list is NOT equal\
    \ to the length of operand list minus one.\")\n    end\n    if length(operator)\
    \ < 1\n        error(\"Operator list should have at least one operator.\")\n \
    \   end\n    if length(operand) < 2\n        error(\"Operand list should have\
    \ at least two operands.\")\n    end\n    if any(x -> x < 0, operand)\n      \
    \  error(\"Non-negative integers only.\")\n    end\n    \n    # Calculating\n\
    \    result = operand[1]\n    for i in 2:length(operand)\n        result = do_eval(result,\
    \ operator[i-1], operand[i])\n    end\n    return result\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"\
    +\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4,\
    \ 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6ikorj7b.jl:55\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  UndefVarError:\
    \ do_eval not defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmp6ikorj7b.jl:46\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6ikorj7b.jl:55 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6ikorj7b.jl:54\ntest set:\
    \ Error During Test at /tmp/tmp6ikorj7b.jl:56\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  UndefVarError: do_eval\
    \ not defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp6ikorj7b.jl:46\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6ikorj7b.jl:56 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6ikorj7b.jl:54\ntest set:\
    \ Error During Test at /tmp/tmp6ikorj7b.jl:57\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  UndefVarError: do_eval not defined\n\
    \  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp6ikorj7b.jl:46\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6ikorj7b.jl:57 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6ikorj7b.jl:54\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6ikorj7b.jl:52\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        op = operator[i]\n\
    \        num = operand[i+1]\n        if op == \"+\"\n            result += num\n\
    \        elseif op == \"-\"\n            result -= num\n        elseif op == \"\
    *\"\n            result *= num\n        elseif op == \"//\"\n            result\
    \ //= num\n        elseif op == \"**\"\n            result ^= num\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3x2uuv79.jl:50\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3x2uuv79.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3x2uuv79.jl:48\ntest set: Error\
    \ During Test at /tmp/tmp3x2uuv79.jl:51\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp3x2uuv79.jl:42\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp3x2uuv79.jl:51 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp3x2uuv79.jl:48\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3x2uuv79.jl:46\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result //= operand[i+1]\n        elseif operator[i] == \"**\"\n \
    \           result ^= operand[i+1]\n        end\n    end\n    return result\n\
    end\nprintln(do_algebra([\"+\", \"*\", \"-\"], [2, 3, 4, 5]))\nusing Test\n\n\
    @testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"\
    +\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4,\
    \ 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "15\ntest set: Test Failed at /tmp/tmplkn9n8ze.jl:49\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplkn9n8ze.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplkn9n8ze.jl:47\ntest set: Error\
    \ During Test at /tmp/tmplkn9n8ze.jl:50\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmplkn9n8ze.jl:40\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmplkn9n8ze.jl:50 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmplkn9n8ze.jl:47\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplkn9n8ze.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        result =\
    \ do_operation(operator[i], result, operand[i+1])\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpm2d0w81j.jl:37\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  UndefVarError:\
    \ do_operation not defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmpm2d0w81j.jl:28\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpm2d0w81j.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpm2d0w81j.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpm2d0w81j.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  UndefVarError: do_operation\
    \ not defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpm2d0w81j.jl:28\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpm2d0w81j.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpm2d0w81j.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpm2d0w81j.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  UndefVarError: do_operation not\
    \ defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpm2d0w81j.jl:28\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpm2d0w81j.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpm2d0w81j.jl:36\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm2d0w81j.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    \n    result = operand[1]\n    for i in 1:length(operator)\n        if\
    \ operator[i] == \"+\"\n            result += operand[i+1]\n        elseif operator[i]\
    \ == \"-\"\n            result -= operand[i+1]\n        elseif operator[i] ==\
    \ \"*\"\n            result *= operand[i+1]\n        elseif operator[i] == \"\
    //\"\n            result //= operand[i+1]\n        elseif operator[i] == \"**\"\
    \n            result ^= operand[i+1]\n        end\n    end\n    \n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpilurar4r.jl:50\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpilurar4r.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpilurar4r.jl:48\ntest set: Error\
    \ During Test at /tmp/tmpilurar4r.jl:51\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpilurar4r.jl:42\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpilurar4r.jl:51 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpilurar4r.jl:48\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpilurar4r.jl:46\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    if length(operator) != length(operand) - 1\n\
    \        println(\"Error: operator list is not equal to the length of operand\
    \ list minus one.\")\n        return\n    end\n    for i = 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = convert(Int64, result / operand[i+1])\n    \
    \    elseif operator[i] == \"**\"\n            result ^= operand[i+1]\n      \
    \  else\n            println(\"Error: unknown operator\")\n            return\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3ywwgogs.jl:55\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3ywwgogs.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3ywwgogs.jl:53\ntest set: Error\
    \ During Test at /tmp/tmp3ywwgogs.jl:56\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(2.3333333333333335)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp3ywwgogs.jl:39\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp3ywwgogs.jl:56 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp3ywwgogs.jl:53\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3ywwgogs.jl:51\n"
  exit_code: 1
  status: SyntaxError
