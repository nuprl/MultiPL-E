name: HumanEval_14_all_prefixes
language: jl
results:
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    if length(string) == 0\n\
    \        return [\"\"]\n    else\n        return [string[1:end]] .+ all_prefixes(string[1:end])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpfe18kpwm.jl:17\\n  Expression: candidate(\"\
    \") == Vector{String}([])\\n   Evaluated: [\"\"] == String[]\\nStacktrace:\\n\
    \ [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpfe18kpwm.jl:17 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpfe18kpwm.jl:16\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    # get the length of the string\n\
    \    n = length(string)\n    # create an empty vector of strings\n    prefixes\
    \ = Vector{String}()\n    # run over the string\n    for i in 1:n\n        # add\
    \ the substrings to the vector\n        push!(prefixes, string[1:i])\n    end\n\
    \    # return the vector\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    splits = []\n    for i =\
    \ 1:length(string)\n        push!(splits, string[1:i])\n    end\n    return splits\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    pref = []\n    for i = 1:length(string)\n\
    \        push!(pref, string[1:i])\n    end\n    return pref\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = Vector{String}()\n\
    \    for i in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n\
    \    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = String[]\n   \
    \ for i in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n \
    \   return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = Array(String,\
    \ 0)\n    for i = 1:length(string)\n        push!(prefixes, string[1:i])\n   \
    \ end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmprxl9c4eu.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  MethodError: no method\
    \ matching Array(::Type{String}, ::Int64)\n  Closest candidates are:\n    Array(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Integer, !Matched::Integer) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:496\n\
    \  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmprxl9c4eu.jl:6\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprxl9c4eu.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprxl9c4eu.jl:16\ntest set:\
    \ Error During Test at /tmp/tmprxl9c4eu.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  MethodError: no method matching Array(::Type{String}, ::Int64)\n  Closest\
    \ candidates are:\n    Array(!Matched::LinearAlgebra.UniformScaling, ::Integer,\
    \ !Matched::Integer) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:496\n\
    \  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmprxl9c4eu.jl:6\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprxl9c4eu.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprxl9c4eu.jl:16\ntest set:\
    \ Error During Test at /tmp/tmprxl9c4eu.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  MethodError: no method matching\
    \ Array(::Type{String}, ::Int64)\n  Closest candidates are:\n    Array(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Integer, !Matched::Integer) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/u"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprxl9c4eu.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = Vector{String}()\n\
    \    for i = 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n\
    \    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    n = length(string)\n    return\
    \ [string[1:i] for i in 1:n]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = [string[1:end]]\n\
    \    string_as_list = collect(string)\n    while length(string_as_list) > 1\n\
    \        string_as_list = string_as_list[1:end-1]\n        push!(prefixes, string(string_as_list))\n\
    \    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm70z_e3k.jl:19\n  Expression: candidate(\"\
    \") == Vector{String}([])\n   Evaluated: [\"\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm70z_e3k.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm70z_e3k.jl:18\ntest set: Error\
    \ During Test at /tmp/tmpm70z_e3k.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  MethodError: objects of type String are not callable\n  Stacktrace:\n   [1]\
    \ all_prefixes(string::String)\n     @ Main /tmp/tmpm70z_e3k.jl:10\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpm70z_e3k.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpm70z_e3k.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpm70z_e3k.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  MethodError: objects of type\
    \ String are not callable\n  Stacktrace:\n   [1] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpm70z_e3k.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpm70z_e3k.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpm70z_e3k.jl:18\nTest Summary:\
    \ | Fail  Error  Total\ntest set      |    1      2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm70z_e3k.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    string_array = []\n    for\
    \ i in 1:length(string)\n        string_array = [string_array; string[1:i]]\n\
    \    end\n    return string_array\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    l = length(string)\n    V\
    \ = Vector{String}(l)\n    for i in 1:l\n        V[i] = string[1:i]\n    end\n\
    \    return V\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpcrpkke4p.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  MethodError: no method\
    \ matching Vector{String}(::Int64)\n  Closest candidates are:\n    Vector{T}()\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/base/boot.jl:476\n    Array{T,\
    \ N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n\
    \    Array{T, N}(!Matched::BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n\
    \    ...\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmpcrpkke4p.jl:7\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcrpkke4p.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcrpkke4p.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpcrpkke4p.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  MethodError: no method matching Vector{String}(::Int64)\n  Closest candidates\
    \ are:\n    Vector{T}() where T at /shared/centos7/julia/1.7.3/share/julia/base/boot.jl:476\n\
    \    Array{T, N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n\
    \    Array{T, N}(!Matched::BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n\
    \    ...\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmpcrpkke4p.jl:7\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcrpkke4p.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcrpkke4p.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpcrpkke4p.jl:20\n  Test th"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcrpkke4p.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return string[1:end] |> split('')\
    \ |> accumulate(join)\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid empty character literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2iji0hyv.jl:6\nin expression starting at /tmp/tmp2iji0hyv.jl:6\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return map(s -> string[1:s],\
    \ 1:length(string))\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    if string == \"\"\n     \
    \   return Vector{String}()\n    else\n        all_prefixes(string[1:end])\n \
    \       all_prefixes(string[1:end]) = [string]\n        return all_prefixes(string[1:end])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"string[1:end]\" is not a valid function argument\
    \ name around /tmp/tmpye8h41fz.jl:10\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpye8h41fz.jl:1\nin expression starting at /tmp/tmpye8h41fz.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    l = length(string)\n    output\
    \ = []\n    for i = 1:l\n        push!(output, string[1:i])\n    end\n    return\
    \ output\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    all_prefixes = String[]\n\
    \    for len = 1:length(string)\n        push!(all_prefixes, string[1:len])\n\
    \    end\n    return all_prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    arr = String[]\n    n = length(string)\n\
    \    for i in 1:n\n        push!(arr,string[1:i])\n    end\n    return arr\nend\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    N = length(string)\n\
    \    prefixes = String[]\n    \n    for i = 1:N\n        append!(prefixes, string[1:i])\n\
    \    end\n    \n    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphgxcbk9d.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"]\n  MethodError: Cannot `convert` an object of type Char to\
    \ an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{String}, x::Char, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] _append!(a::Vector{String}, #unused#::Base.HasLength,\
    \ iter::String)\n     @ Base ./array.jl:1060\n   [3] append!\n     @ ./array.jl:1050\
    \ [inlined]\n   [4] all_prefixes(string::String)\n     @ Main /tmp/tmphgxcbk9d.jl:11\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmphgxcbk9d.jl:22 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmphgxcbk9d.jl:20\ntest set:\
    \ Error During Test at /tmp/tmphgxcbk9d.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  MethodError: Cannot `convert`\
    \ an object of type Char to an object of type String\n  Closest candidates are:\n\
    \    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{String}, x::Char, i1::Int64)\n\
    \     @ Base ./array.jl:903"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphgxcbk9d.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    length(string) == 0 && error(\"\
    Can't find prefixes of empty string\")\n    prefixes = [\"\"]\n    for i in 1:length(string)\n\
    \        push!(prefixes, string[1:i])\n    end\n    return prefixes\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\"\
    ) == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpvidr7h68.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  Can't find prefixes of\
    \ empty string\n  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n\
    \   [2] all_prefixes(string::String)\n     @ Main /tmp/tmpvidr7h68.jl:6\n   [3]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpvidr7h68.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpvidr7h68.jl:17\ntest set:\
    \ Test Failed at /tmp/tmpvidr7h68.jl:19\n  Expression: candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n   Evaluated: [\"\
    \", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"] == [\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvidr7h68.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvidr7h68.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpvidr7h68.jl:20\n  Expression: candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"]\n   Evaluated: [\"\", \"W\", \"WW\", \"WWW\"] == [\"W\", \"\
    WW\", \"WWW\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvidr7h68.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvidr7h68.jl:17\nTest Summary:\
    \ | Fail  Error  Total\ntest set      |    2      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvidr7h68.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    r = []\n    for i in 1:length(string)\n\
    \        push!(r, string[1:i])\n    end\n    return r\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    n = length(string)\n    prefixes\
    \ = Vector{String}(undef, n)\n    for i = 1:n\n        prefixes[i] = string[1:i]\n\
    \    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:end] for\
    \ end in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp20_4ox23.jl:6\nin expression starting at /tmp/tmp20_4ox23.jl:6\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    res = Array{String}(undef,0)\n\
    \    for i in range(1,length(string)+1)\n        push!(res,string[1:i])\n    end\n\
    \    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxsuxsl19.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  BoundsError: attempt to\
    \ access empty String at index [1:1]\n  Stacktrace:\n   [1] checkbounds\n    \
    \ @ ./strings/basic.jl:216 [inlined]\n   [2] getindex\n     @ ./strings/string.jl:261\
    \ [inlined]\n   [3] all_prefixes(string::String)\n     @ Main /tmp/tmpxsuxsl19.jl:8\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpxsuxsl19.jl:17 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpxsuxsl19.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpxsuxsl19.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  BoundsError: attempt to access 6-codeunit String at index [1:7]\n  Stacktrace:\n\
    \   [1] checkbounds\n     @ ./strings/basic.jl:216 [inlined]\n   [2] getindex\n\
    \     @ ./strings/string.jl:261 [inlined]\n   [3] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpxsuxsl19.jl:8\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpxsuxsl19.jl:18 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpxsuxsl19.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpxsuxsl19.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  BoundsError: attempt to access\
    \ 3-codeunit String at index [1:4]\n  Stacktrace:\n   [1] checkbounds\n     @\
    \ ./strings/basic.jl:216 [inlined]\n   [2] getindex\n     @ ./strings/string.jl:261\
    \ [inlined]\n   [3] all_prefixes(string::String)\n     @ Main /tmp/tmpxsuxsl19.jl:8\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpx"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxsuxsl19.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    # vector with the output\n\
    \    prefixes = []\n    # number of letters in the string\n    n = length(string)\n\
    \    # iterate over all possible prefixes\n    for i in 1:n\n        push!(prefixes,\
    \ string[1:i])\n    end\n    # return the vector of prefixes\n    return prefixes\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    s = []\n    for i in 1:length(string)\n\
    \        append!(s,string[1:i])\n    end\n    return s\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptd9d74y1.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"]\n  MethodError: Cannot `convert` an object of type Char to\
    \ an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n    [1] setindex!(A::Vector{String}, x::Char, i1::Int64)\n\
    \      @ Base ./array.jl:903\n    [2] _unsafe_copyto!(dest::Vector{String}, doffs::Int64,\
    \ src::Vector{Any}, soffs::Int64, n::Int64)\n      @ Base ./array.jl:253\n   \
    \ [3] unsafe_copyto!\n      @ ./array.jl:307 [inlined]\n    [4] _copyto_impl!\n\
    \      @ ./array.jl:331 [inlined]\n    [5] copyto!\n      @ ./array.jl:317 [inlined]\n\
    \    [6] copyto!\n      @ ./array.jl:343 [inlined]\n    [7] copyto_axcheck!\n\
    \      @ ./abstractarray.jl:1104 [inlined]\n    [8] Vector{String}(x::Vector{Any})\n\
    \      @ Base ./array.jl:563\n    [9] convert\n      @ ./array.jl:554 [inlined]\n\
    \   [10] all_prefixes(string::String)\n      @ Main /tmp/tmptd9d74y1.jl:10\n \
    \  [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [12] macro expansion\n      @ /tmp/tmptd9d74y1.jl:18 [inlined]\n\
    \   [13] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [14] top-level scope\n      @ /tmp/tmptd9d74y1.jl:16\ntest set:\
    \ Error During Test at /tmp/tmptd9d74y1.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  MethodError: Cannot `convert`\
    \ an object of type Char to an object of type String\n  Closest candidates are:\n\
    \    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials."
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptd9d74y1.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    if length(string) == 0\n\
    \        return String[]\n    else\n        all_prefixes(string[1:end])\n    end\n\
    \    return all_prefixes(string[1:end])\nend\nusing Test\n\n@testset begin\n\n\
    candidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    res = []\n    for i in 1:length(string)\n\
    \        push!(res,string[1:i])\n    end\n    return res\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    output = Vector{String}()\n\
    \    for prefix_length in 1:length(string)\n        push!(output, string[1:prefix_length])\n\
    \    end\n    return output\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    substrings = []\n    for\
    \ i = 1:length(string)\n        push!(substrings, string[1:i])\n    end\n    return\
    \ substrings\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    n = length(string)\n    prefixes\
    \ = Vector{String}(undef, n)\n    for i in 1:n\n        prefixes[i] = string[1:i]\n\
    \    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    all_prefixes = [string[1:end]]\n\
    \    for i in 1:length(string)-1\n        all_prefixes = [string[1:i] ; all_prefixes]\n\
    \    end\n    return all_prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw2_va7et.jl:17\n  Expression: candidate(\"\
    \") == Vector{String}([])\n   Evaluated: [\"\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw2_va7et.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw2_va7et.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpw2_va7et.jl:18\n  Expression: candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n   Evaluated: [\"asdfg\"\
    , \"asdf\", \"asd\", \"as\", \"a\", \"asdfgh\"] == [\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw2_va7et.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw2_va7et.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpw2_va7et.jl:19\n  Expression: candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"]\n   Evaluated: [\"WW\", \"W\", \"WWW\"] == [\"W\", \"WW\",\
    \ \"WWW\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw2_va7et.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw2_va7et.jl:16\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw2_va7et.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return reduce(x -> append!(x,\
    \ string[1:end]), collect(1:length(string)), [])\nend\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkkdpa0d_.jl:8\nin expression starting at /tmp/tmpkkdpa0d_.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    v = Vector{String}(length(string))\n\
    \    for i in 1:length(string)\n        v[i] = string[1:i]\n    end\n    return\
    \ v\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpy55pop2j.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  MethodError: no method\
    \ matching Vector{String}(::Int64)\n  Closest candidates are:\n    Vector{T}()\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/base/boot.jl:476\n    Array{T,\
    \ N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n\
    \    Array{T, N}(!Matched::BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n\
    \    ...\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmpy55pop2j.jl:6\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy55pop2j.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy55pop2j.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpy55pop2j.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  MethodError: no method matching Vector{String}(::Int64)\n  Closest candidates\
    \ are:\n    Vector{T}() where T at /shared/centos7/julia/1.7.3/share/julia/base/boot.jl:476\n\
    \    Array{T, N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n\
    \    Array{T, N}(!Matched::BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n\
    \    ...\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmpy55pop2j.jl:6\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy55pop2j.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy55pop2j.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpy55pop2j.jl:19\n  Test th"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy55pop2j.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    results = Vector{String}(undef,\
    \ 0)\n    for i in 1:length(string)\n        push!(results, string[1:i])\n   \
    \ end\n    return results\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    len = length(string)\n  \
    \  ret = Vector{String}(len)\n    for i in 1:len\n        ret[i] = string[1:i]\n\
    \    end\n    return ret\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpghw_ymzy.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  MethodError: no method\
    \ matching Vector{String}(::Int64)\n  Closest candidates are:\n    Vector{T}()\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/base/boot.jl:476\n    Array{T,\
    \ N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n\
    \    Array{T, N}(!Matched::BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n\
    \    ...\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmpghw_ymzy.jl:7\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpghw_ymzy.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpghw_ymzy.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpghw_ymzy.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  MethodError: no method matching Vector{String}(::Int64)\n  Closest candidates\
    \ are:\n    Vector{T}() where T at /shared/centos7/julia/1.7.3/share/julia/base/boot.jl:476\n\
    \    Array{T, N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n\
    \    Array{T, N}(!Matched::BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n\
    \    ...\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmpghw_ymzy.jl:7\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpghw_ymzy.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpghw_ymzy.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpghw_ymzy.jl:20\n  Test th"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpghw_ymzy.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in range(1, length(string)+1)\n        push!(prefixes, string[1:i])\n    end\n\
    \    return prefixes\nend\n    \nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjzt5u5gk.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  BoundsError: attempt to\
    \ access empty String at index [1:1]\n  Stacktrace:\n   [1] checkbounds\n    \
    \ @ ./strings/basic.jl:216 [inlined]\n   [2] getindex\n     @ ./strings/string.jl:261\
    \ [inlined]\n   [3] all_prefixes(string::String)\n     @ Main /tmp/tmpjzt5u5gk.jl:8\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpjzt5u5gk.jl:18 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpjzt5u5gk.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpjzt5u5gk.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  BoundsError: attempt to access 6-codeunit String at index [1:7]\n  Stacktrace:\n\
    \   [1] checkbounds\n     @ ./strings/basic.jl:216 [inlined]\n   [2] getindex\n\
    \     @ ./strings/string.jl:261 [inlined]\n   [3] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpjzt5u5gk.jl:8\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpjzt5u5gk.jl:19 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpjzt5u5gk.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpjzt5u5gk.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  BoundsError: attempt to access\
    \ 3-codeunit String at index [1:4]\n  Stacktrace:\n   [1] checkbounds\n     @\
    \ ./strings/basic.jl:216 [inlined]\n   [2] getindex\n     @ ./strings/string.jl:261\
    \ [inlined]\n   [3] all_prefixes(string::String)\n     @ Main /tmp/tmpjzt5u5gk.jl:8\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpj"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjzt5u5gk.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes,string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    vector = String[]\n    for\
    \ i in 1:length(string)\n        push!(vector, string[1:i])\n    end\n    return\
    \ vector\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = String[]\n   \
    \ for i in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n \
    \   return prefixes\nend\nall_prefixes(\"abc\")\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [prefix(string,i)\
    \ for i in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpojp0kd93.jl:14\n  Test threw exception\n\
    \  Expression: candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"]\n  UndefVarError: prefix not defined\n  Stacktrace:\n   [1]\
    \ (::var\"#1#2\"{String})(i::Int64)\n     @ Main ./none:0\n   [2] iterate\n  \
    \   @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{UnitRange{Int64},\
    \ var\"#1#2\"{String}})\n     @ Base ./array.jl:724\n   [4] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpojp0kd93.jl:6\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpojp0kd93.jl:14 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpojp0kd93.jl:12\ntest set:\
    \ Error During Test at /tmp/tmpojp0kd93.jl:15\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  UndefVarError: prefix not\
    \ defined\n  Stacktrace:\n   [1] (::var\"#1#2\"{String})(i::Int64)\n     @ Main\
    \ ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{UnitRange{Int64},\
    \ var\"#1#2\"{String}})\n     @ Base ./array.jl:724\n   [4] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpojp0kd93.jl:6\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpojp0kd93.jl:15 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpojp0kd93.jl:12\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpojp0kd93.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    v = []\n    for i in 1:length(string)\n\
    \        push!(v, string[1:i])\n    end\n    return v\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    output = []\n    for i =\
    \ 1:length(string)\n        push!(output, string[1:i])\n    end\n    return output\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i=1:length(string)]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    for i in 1:length(string)\n\
    \        push!(prefixes, string[1:i])\n    end\n    return prefixes\nend\n\"\"\
    \"\n    Return list of all prefixes from shortest to longest of the input string\n\
    \    >>> all_prefixes(['a', 'ab', 'abc'])\n    ['a', 'ab', 'abc']\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpv6695j_q.jl:11\nin expression starting at /tmp/tmpv6695j_q.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = Vector{String}(undef,\
    \ length(string))\n    for i in 1:length(string)\n        prefixes[i] = string[1:i]\n\
    \    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = Vector{String}()\n\
    \    for i in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n\
    \    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    n = length(string)\n    return\
    \ [string[1:i] for i in 1:n]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    out::Vector{String} = []\n\
    \    for i in 1:length(string)\n        push!(out, string[1:i])\n    end\n   \
    \ return out\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    l = length(string)\n    f\
    \ = (start, stop) -> string[start:stop]\n    map(f, 1:l, 1:l)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgdnkear_.jl:16\n  Expression: candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n   Evaluated:\
    \ [\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"] == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgdnkear_.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgdnkear_.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpgdnkear_.jl:17\n  Expression: candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"]\n   Evaluated: [\"W\", \"W\", \"W\"] == [\"W\", \"WW\", \"\
    WWW\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgdnkear_.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgdnkear_.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgdnkear_.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    v = Vector{String}()\n  \
    \  for i in 1:length(string)\n        push!(v,string[1:i])\n    end\n    return\
    \ v\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    string_length = length(string)\n\
    \    n = 1\n    prefix_list = Vector{String}(string_length)\n    for i in 1:string_length\n\
    \        prefix_list[i] = string[1:n]\n        n += 1\n    end\n    return prefix_list\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwjxps53k.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  MethodError: no method\
    \ matching Vector{String}(::Int64)\n  Closest candidates are:\n    Vector{T}()\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/base/boot.jl:476\n    Array{T,\
    \ N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n\
    \    Array{T, N}(!Matched::BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n\
    \    ...\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmpwjxps53k.jl:8\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwjxps53k.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwjxps53k.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpwjxps53k.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  MethodError: no method matching Vector{String}(::Int64)\n  Closest candidates\
    \ are:\n    Vector{T}() where T at /shared/centos7/julia/1.7.3/share/julia/base/boot.jl:476\n\
    \    Array{T, N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n\
    \    Array{T, N}(!Matched::BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n\
    \    ...\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmpwjxps53k.jl:8\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwjxps53k.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwjxps53k.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpwjxps53k.jl:22\n  Test th"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwjxps53k.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    retval = []\n    for i =\
    \ 1:length(string)\n        push!(retval, string[1:i])\n    end\n    return retval\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    output = Vector{String}(length(string))\n\
    \    for i in 1:length(string)\n        output[i] = string[1:i]\n    end\n   \
    \ return output\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1_19gj30.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  MethodError: no method\
    \ matching Vector{String}(::Int64)\n  Closest candidates are:\n    Vector{T}()\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/base/boot.jl:476\n    Array{T,\
    \ N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n\
    \    Array{T, N}(!Matched::BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n\
    \    ...\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmp1_19gj30.jl:6\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1_19gj30.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1_19gj30.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp1_19gj30.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  MethodError: no method matching Vector{String}(::Int64)\n  Closest candidates\
    \ are:\n    Vector{T}() where T at /shared/centos7/julia/1.7.3/share/julia/base/boot.jl:476\n\
    \    Array{T, N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n\
    \    Array{T, N}(!Matched::BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n\
    \    ...\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmp1_19gj30.jl:6\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1_19gj30.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1_19gj30.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp1_19gj30.jl:19\n  Test th"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1_19gj30.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    # base case: just the empty\
    \ string\n    if length(string) == 0\n        return [\"\"];\n    else\n     \
    \   shorter = all_prefixes(string[1:end])\n        longer = map(char -> string[1]\
    \ * char, shorter)\n        return [string[1]] .* shorter .* longer\n    end\n\
    end\n@show all_prefixes(\"abc\")\nusing Test\n\n@testset begin\n\ncandidate =\
    \ all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    if length(string) == 0 \n\
    \        return []\n    else \n        prefixes = [string[1:length(string)]]\n\
    \        push!(prefixes, all_prefixes(string[1:length(string)-1]))\n        return\
    \ prefixes\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp67o2x6qp.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"]\n  MethodError: Cannot `convert` an object of type Vector{String}\
    \ to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] push!(a::Vector{String}, item::Vector{String})\n\
    \     @ Base ./array.jl:994\n   [2] all_prefixes(string::String) (repeats 6 times)\n\
    \     @ Main /tmp/tmp67o2x6qp.jl:10\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp67o2x6qp.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp67o2x6qp.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp67o2x6qp.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  MethodError: Cannot `convert`\
    \ an object of type Vector{String} to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] push!(a::Vector{String}, item::Vector{String})\n\
    \     @ Base ./array.jl:994\n   [2] all_prefixes(string::String) (repeats 3 times)\n\
    \     @ Main /tmp/tmp67o2x6qp.jl:10\n   [3] macro expansion\n    "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp67o2x6qp.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i=1:length(string)]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    all_prefixes = []\n    for\
    \ i in 1:length(string)\n        #push!(all_prefixes, string[1:i])\n        push!(all_prefixes,\
    \ view(string, 1:i))\n    end\n    return all_prefixes\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    output = []\n    for i =\
    \ 1:length(string)\n        push!(output, string[1:i])\n    end\n    return output\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [ string[1:i] for\
    \ i in 1:length(string) ]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    list = []\n    for i = 1:length(string)\n\
    \        push!(list, string[1:i])\n    end\n    return list\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    out = []\n    for i in 1:length(string)\n\
    \        push!(out, string[1:i])\n    end\n    return out\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = Vector{String}()\n\
    \    for i in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n\
    \    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    n = length(string)\n    pref\
    \ = Vector{String}(undef,n)\n    for i = 1:n\n        pref[i] = string[1:i]\n\
    \    end\n    return pref\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    l = length(string)\n    return\
    \ map(s -> string[1:s], 1:l)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return map(s -> string[1:s],\
    \ length(string):-1:1)\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2weshyof.jl:14\n  Expression: candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n   Evaluated:\
    \ [\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"] == [\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2weshyof.jl:14 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2weshyof.jl:12\ntest set: Test\
    \ Failed at /tmp/tmp2weshyof.jl:15\n  Expression: candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"]\n   Evaluated: [\"WWW\", \"WW\", \"W\"] == [\"W\", \"WW\",\
    \ \"WWW\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2weshyof.jl:15 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2weshyof.jl:12\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2weshyof.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    if string == \"\"\n     \
    \   return Vector{String}()\n    else\n        return [string[1:i] for i in 1:length(string)]\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    out = String[]\n    for i\
    \ in 1:length(string)\n        push!(out, string[1:i])\n    end\n    return out\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    ans = Vector{String}()\n\
    \    n = length(string)\n    for i in 1:n\n        push!(ans,string[1:i])\n  \
    \  end\n    return ans\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:j] for j\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    result = Vector{String}()\n\
    \    for i in range(1, length(string) + 1)\n        push!(result, string[1:i])\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqk54xeqk.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  BoundsError: attempt to\
    \ access empty String at index [1:1]\n  Stacktrace:\n   [1] checkbounds\n    \
    \ @ ./strings/basic.jl:216 [inlined]\n   [2] getindex\n     @ ./strings/string.jl:261\
    \ [inlined]\n   [3] all_prefixes(string::String)\n     @ Main /tmp/tmpqk54xeqk.jl:8\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpqk54xeqk.jl:17 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpqk54xeqk.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpqk54xeqk.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  BoundsError: attempt to access 6-codeunit String at index [1:7]\n  Stacktrace:\n\
    \   [1] checkbounds\n     @ ./strings/basic.jl:216 [inlined]\n   [2] getindex\n\
    \     @ ./strings/string.jl:261 [inlined]\n   [3] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpqk54xeqk.jl:8\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpqk54xeqk.jl:18 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpqk54xeqk.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpqk54xeqk.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  BoundsError: attempt to access\
    \ 3-codeunit String at index [1:4]\n  Stacktrace:\n   [1] checkbounds\n     @\
    \ ./strings/basic.jl:216 [inlined]\n   [2] getindex\n     @ ./strings/string.jl:261\
    \ [inlined]\n   [3] all_prefixes(string::String)\n     @ Main /tmp/tmpqk54xeqk.jl:8\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpq"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqk54xeqk.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    allprefixes = Vector{String}()\n\
    \    for i in 1:length(string)\n        push!(allprefixes, string[1:i])\n    end\n\
    \    return allprefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    r = []\n    for i = 1:length(string)\n\
    \        push!(r, string[1:i])\n    end\n    return r\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    len = length(string)\n  \
    \  prefixes = []\n    for i in 1:len\n        push!(prefixes,string[1:i])\n  \
    \  end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    if length(string) == 0\n\
    \        return []\n    else\n        return collect(1:length(string)) .* string\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpdkfaoctq.jl:18\\n  Test threw\
    \ exception\\n  Expression: candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\",\
    \ \"asdf\", \"asdfg\", \"asdfgh\"]\\n  MethodError: no method matching *(::Int64,\
    \ ::String)\\n  Closest candidates are:\\n    *(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\\n    *(::T,\
    \ !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16,\
    \ UInt32, UInt64, UInt8} at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:88\\\
    n    *(!Matched::Union{AbstractChar, AbstractString}, ::Union{AbstractChar, AbstractString}...)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:260\\n    ...\\\
    n  Stacktrace:\\n    [1] _broadcast_getindex_evalf\\n      @ ./broadcast.jl:670\
    \ [inlined]\\n    [2] _broadcast_getindex\\n      @ ./broadcast.jl:643 [inlined]\\\
    n    [3] getindex\\n      @ ./broadcast.jl:597 [inlined]\\n    [4] copy\\n   \
    \   @ ./broadcast.jl:899 [inlined]\\n    [5] materialize\\n      @ ./broadcast.jl:860\
    \ [inlined]\\n    [6] all_prefixes(string::String)\\n      @ Main /tmp/tmpdkfaoctq.jl:9\\\
    n    [7] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n    [8] macro expansion\\n      @ /tmp/tmpdkfaoctq.jl:18 [inlined]\\\
    n    [9] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [10] top-level scope\\n      @ /tmp/tmpdkfaoctq.jl:16\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i=1:length(string)]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = String[]\n   \
    \ for i in range(1, length(string)+1)\n        push!(prefixes, string[1:i])\n\
    \    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp10ozj26x.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  BoundsError: attempt to\
    \ access empty String at index [1:1]\n  Stacktrace:\n   [1] checkbounds\n    \
    \ @ ./strings/basic.jl:216 [inlined]\n   [2] getindex\n     @ ./strings/string.jl:261\
    \ [inlined]\n   [3] all_prefixes(string::String)\n     @ Main /tmp/tmp10ozj26x.jl:8\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp10ozj26x.jl:17 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp10ozj26x.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp10ozj26x.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  BoundsError: attempt to access 6-codeunit String at index [1:7]\n  Stacktrace:\n\
    \   [1] checkbounds\n     @ ./strings/basic.jl:216 [inlined]\n   [2] getindex\n\
    \     @ ./strings/string.jl:261 [inlined]\n   [3] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmp10ozj26x.jl:8\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp10ozj26x.jl:18 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp10ozj26x.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp10ozj26x.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  BoundsError: attempt to access\
    \ 3-codeunit String at index [1:4]\n  Stacktrace:\n   [1] checkbounds\n     @\
    \ ./strings/basic.jl:216 [inlined]\n   [2] getindex\n     @ ./strings/string.jl:261\
    \ [inlined]\n   [3] all_prefixes(string::String)\n     @ Main /tmp/tmp10ozj26x.jl:8\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp1"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp10ozj26x.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = String[]\n   \
    \ l = length(string)\n    for i = 1:l\n        push!(prefixes, string[1:i])\n\
    \    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    output = []\n    for ii in\
    \ 1:length(string)\n        push!(output, string[1:ii])\n    end\n    return output\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [ string[1:i] for\
    \ i=1:length(string) ]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:j] for j\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    @assert string != \"\"\n\
    \    vec = []\n    for i in 1:length(string)\n        push!(vec, string[1:i])\n\
    \    end\n    return vec\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8f4b7tmn.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  AssertionError: string\
    \ != \"\"\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmp8f4b7tmn.jl:6\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8f4b7tmn.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8f4b7tmn.jl:17\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    2      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8f4b7tmn.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    is_empty = empty(string)\n\
    \    if is_empty\n        return Vector{String}()\n    else\n        new_prefix\
    \ = string[1:end]\n        all_prefixes_vector = all_prefixes(string[1:end-1])\n\
    \        unshift!(all_prefixes_vector, new_prefix)\n        return all_prefixes_vector\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjzrwpv2o.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  MethodError: no method\
    \ matching empty(::String)\n  Closest candidates are:\n    empty(!Matched::NamedTuple)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/namedtuple.jl:133\n    empty(!Matched::IdDict,\
    \ !Matched::Type{K}, !Matched::Type{V}) where {K, V} at /shared/centos7/julia/1.7.3/share/julia/base/iddict.jl:69\n\
    \    empty(!Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:541\n\
    \    ...\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmpjzrwpv2o.jl:6\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjzrwpv2o.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjzrwpv2o.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpjzrwpv2o.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  MethodError: no method matching empty(::String)\n  Closest candidates are:\n\
    \    empty(!Matched::NamedTuple) at /shared/centos7/julia/1.7.3/share/julia/base/namedtuple.jl:133\n\
    \    empty(!Matched::IdDict, !Matched::Type{K}, !Matched::Type{V}) where {K, V}\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/iddict.jl:69\n    empty(!Matched::Tuple)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:541\n    ...\n  Stacktrace:\n\
    \   [1] all_prefixes(string::String)\n     @ Main /tmp/tmpjzrwpv2o.jl:6\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjzrwpv2o.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjzrwpv2o.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpjzrwpv2o.jl:23\n  Test threw exception\n  Expressi"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjzrwpv2o.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    pre = []\n    for i in 1:length(string)\n\
    \        push!(pre,string[1:i])\n    end\n    return pre\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    (1:length(string)).map(string[1:string])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp73j0onio.jl:13\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  type UnitRange has no\
    \ field map\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] all_prefixes(string::String)\n     @ Main /tmp/tmp73j0onio.jl:6\n   [3]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp73j0onio.jl:13 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp73j0onio.jl:12\ntest set:\
    \ Error During Test at /tmp/tmp73j0onio.jl:14\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  type UnitRange has no field map\n  Stacktrace:\n   [1] getproperty\n    \
    \ @ ./Base.jl:42 [inlined]\n   [2] all_prefixes(string::String)\n     @ Main /tmp/tmp73j0onio.jl:6\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp73j0onio.jl:14 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp73j0onio.jl:12\ntest set:\
    \ Error During Test at /tmp/tmp73j0onio.jl:15\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  type UnitRange has no field\
    \ map\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2]\
    \ all_prefixes(string::String)\n     @ Main /tmp/tmp73j0onio.jl:6\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp73j0onio.jl:15 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp73j0onio.jl:12\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp73j0onio.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [(string[1:i]) for\
    \ i in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = String[]\n   \
    \ for i = 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n  \
    \  return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    l = length(string)\n    return\
    \ [string[1:i] for i=1:l]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return collect(prefixes(string))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7k5ewvaj.jl:13\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  UndefVarError: prefixes\
    \ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmp7k5ewvaj.jl:6\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7k5ewvaj.jl:13 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7k5ewvaj.jl:12\ntest set:\
    \ Error During Test at /tmp/tmp7k5ewvaj.jl:14\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  UndefVarError: prefixes not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmp7k5ewvaj.jl:6\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7k5ewvaj.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7k5ewvaj.jl:12\ntest set:\
    \ Error During Test at /tmp/tmp7k5ewvaj.jl:15\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  UndefVarError: prefixes not\
    \ defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmp7k5ewvaj.jl:6\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7k5ewvaj.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7k5ewvaj.jl:12\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7k5ewvaj.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return map(s -> string[1:s],\
    \ 1:length(string))\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    length = length(string)\n\
    \    return [string[1:i] for i=1:length]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkoe5_dwh.jl:14\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  UndefVarError: length\
    \ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmpkoe5_dwh.jl:6\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkoe5_dwh.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkoe5_dwh.jl:13\ntest set:\
    \ Error During Test at /tmp/tmpkoe5_dwh.jl:15\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  UndefVarError: length not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpkoe5_dwh.jl:6\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkoe5_dwh.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkoe5_dwh.jl:13\ntest set:\
    \ Error During Test at /tmp/tmpkoe5_dwh.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  UndefVarError: length not\
    \ defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmpkoe5_dwh.jl:6\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkoe5_dwh.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkoe5_dwh.jl:13\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkoe5_dwh.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    if string == \"\"\n     \
    \   return [\"\"]\n    else\n        return [string[1:length(string)]] .+ all_prefixes(string[1:length(string)])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpe8y45o7u.jl:17\\n  Expression: candidate(\"\
    \") == Vector{String}([])\\n   Evaluated: [\"\"] == String[]\\nStacktrace:\\n\
    \ [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpe8y45o7u.jl:17 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpe8y45o7u.jl:16\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    n = length(string)\n    prefixes\
    \ = []\n    for i in 1:n\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nall_prefixes(\"abc\")\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n  l = []\n  for i in 1:length(string)\n\
    \    push!(l,string[1:i])\n  end\n  return l\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    l=length(string)\n    return\
    \ [string[1:i] for i in 1:l]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = Vector()\n   \
    \ for i = 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n  \
    \  return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    all_prefixes = []\n    for\
    \ i in 1:length(string)\n        push!(all_prefixes,string[1:i])\n    end\n  \
    \  return all_prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    length(string) == 0 && return\
    \ Vector{String}()\n    prefixes = Vector{String}()\n    for i in 1:length(string)\n\
    \        prefixes = [prefixes; string[1:i]]\n    end\n    return prefixes\nend\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 0:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7z197xex.jl:17\n  Expression: candidate(\"\
    \") == Vector{String}([])\n   Evaluated: [\"\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7z197xex.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7z197xex.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp7z197xex.jl:18\n  Expression: candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n   Evaluated: [\"\", \"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"] == [\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7z197xex.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7z197xex.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp7z197xex.jl:19\n  Expression: candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"]\n   Evaluated: [\"\", \"W\", \"WW\", \"WWW\"] == [\"W\", \"\
    WW\", \"WWW\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7z197xex.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7z197xex.jl:16\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7z197xex.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    len_string = length(string)\n\
    \    if len_string == 0\n        return Vector{String}()\n    else\n        return\
    \ [string[1:n] for n in 1:len_string]\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return collect(unique(chop(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptmhzk3l2.jl:14\n  Test threw exception\n\
    \  Expression: candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"]\n  MethodError: Cannot `convert` an object of type Char to\
    \ an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n    [1] setindex!(A::Vector{String}, x::Char, i1::Int64)\n\
    \      @ Base ./array.jl:903\n    [2] _unsafe_copyto!(dest::Vector{String}, doffs::Int64,\
    \ src::Vector{Char}, soffs::Int64, n::Int64)\n      @ Base ./array.jl:253\n  \
    \  [3] unsafe_copyto!\n      @ ./array.jl:307 [inlined]\n    [4] _copyto_impl!\n\
    \      @ ./array.jl:331 [inlined]\n    [5] copyto!\n      @ ./array.jl:317 [inlined]\n\
    \    [6] copyto!\n      @ ./array.jl:343 [inlined]\n    [7] copyto_axcheck!\n\
    \      @ ./abstractarray.jl:1104 [inlined]\n    [8] Vector{String}(x::Vector{Char})\n\
    \      @ Base ./array.jl:563\n    [9] convert\n      @ ./array.jl:554 [inlined]\n\
    \   [10] all_prefixes(string::String)\n      @ Main /tmp/tmptmhzk3l2.jl:6\n  \
    \ [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [12] macro expansion\n      @ /tmp/tmptmhzk3l2.jl:14 [inlined]\n\
    \   [13] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [14] top-level scope\n      @ /tmp/tmptmhzk3l2.jl:12\ntest set:\
    \ Error During Test at /tmp/tmptmhzk3l2.jl:15\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  MethodError: Cannot `convert`\
    \ an object of type Char to an object of type String\n  Closest candidates are:\n\
    \    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptmhzk3l2.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = String[]\n   \
    \ for i = 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n  \
    \  return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    output = []\n    for i =\
    \ 1:length(string)\n        push!(output, string[1:i])\n    end\n    return output\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = String[]\n   \
    \ for i in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n \
    \   return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    if string == \"\"\n     \
    \   return []\n    else\n        return [string[1:end]] .+ all_prefixes(string[1:end])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = String[]\n   \
    \ #for i=1:length(string) \n    #    push!(prefixes, string[1:i])\n    #end\n\
    \    for i=1:length(string)\n        push!(prefixes, string[1:i])\n    end\n \
    \   return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    ...\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid identifier name \"...\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm2lj3x12.jl:6\nin expression starting at /tmp/tmpm2lj3x12.jl:6\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:end-i] for\
    \ i in 0:length(string)-1]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpagty0i27.jl:14\n  Expression: candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n   Evaluated:\
    \ [\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"] == [\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpagty0i27.jl:14 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpagty0i27.jl:12\ntest set: Test\
    \ Failed at /tmp/tmpagty0i27.jl:15\n  Expression: candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"]\n   Evaluated: [\"WWW\", \"WW\", \"W\"] == [\"W\", \"WW\",\
    \ \"WWW\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpagty0i27.jl:15 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpagty0i27.jl:12\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpagty0i27.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:k] for k=1:length(string)]\n\
    end\n \nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = String[]\n   \
    \ for i in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n \
    \   return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    N = length(string)\n    return\
    \ [string[1:j] for j in 1:N]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    length = length(string)\n\
    \    prefixes = []\n    for i in 1:length\n        append!(prefixes, string[1:i])\n\
    \    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxpvtjq65.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  UndefVarError: length\
    \ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmpxpvtjq65.jl:6\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxpvtjq65.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxpvtjq65.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpxpvtjq65.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  UndefVarError: length not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpxpvtjq65.jl:6\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxpvtjq65.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxpvtjq65.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpxpvtjq65.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  UndefVarError: length not\
    \ defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmpxpvtjq65.jl:6\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxpvtjq65.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxpvtjq65.jl:17\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxpvtjq65.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    n = length(string)\n    v\
    \ = Vector{String}(undef, n)\n    for i in 1:n\n        v[i] = string[1:i]\n \
    \   end\n    return v\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:k] for k=1:length(string)]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in range(1,length(string)+1)]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1g93kpyh.jl:13\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  BoundsError: attempt to\
    \ access empty String at index [1:1]\n  Stacktrace:\n    [1] checkbounds\n   \
    \   @ ./strings/basic.jl:216 [inlined]\n    [2] getindex\n      @ ./strings/string.jl:261\
    \ [inlined]\n    [3] (::var\"#1#2\"{String})(i::Int64)\n      @ Main ./none:0\n\
    \    [4] iterate\n      @ ./generator.jl:47 [inlined]\n    [5] collect(itr::Base.Generator{UnitRange{Int64},\
    \ var\"#1#2\"{String}})\n      @ Base ./array.jl:724\n    [6] all_prefixes(string::String)\n\
    \      @ Main /tmp/tmp1g93kpyh.jl:6\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp1g93kpyh.jl:13 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp1g93kpyh.jl:12\ntest set:\
    \ Error During Test at /tmp/tmp1g93kpyh.jl:14\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  BoundsError: attempt to access 6-codeunit String at index [1:7]\n  Stacktrace:\n\
    \    [1] checkbounds\n      @ ./strings/basic.jl:216 [inlined]\n    [2] getindex\n\
    \      @ ./strings/string.jl:261 [inlined]\n    [3] (::var\"#1#2\"{String})(i::Int64)\n\
    \      @ Main ./none:0\n    [4] iterate\n      @ ./generator.jl:47 [inlined]\n\
    \    [5] collect_to!\n      @ ./array.jl:782 [inlined]\n    [6] collect_to_with_first!\n\
    \      @ ./array.jl:760 [inlined]\n    [7] collect(itr::Base.Generator{UnitRange{Int64},\
    \ var\"#1#2\"{String}})\n      @ Base ./array.jl:734\n    [8] all_prefixes(string::String)\n\
    \      @ Main /tmp/tmp1g93kpyh.jl:6\n    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp1g93kpyh.jl:14 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1g93kpyh.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    # your code here\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\"\
    ) == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpa6qnhtkm.jl:13\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmpa6qnhtkm.jl:7\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa6qnhtkm.jl:13 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa6qnhtkm.jl:12\ntest set:\
    \ Error During Test at /tmp/tmpa6qnhtkm.jl:14\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Vector{String}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmpa6qnhtkm.jl:7\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa6qnhtkm.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    # No input string provided\n\
    \    if string == \"\"\n        println(\"ERROR: Empty input string\")\n     \
    \   return []\n    end\n    \n    # Create empty array to store the prefixes\n\
    \    prefixes = []\n    \n    # For loop to go through each character in the string\n\
    \    for i = 1:length(string)\n        # Append string from start to position\
    \ i\n        push!(prefixes, string[1:i])\n    end\n    \n    return prefixes\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: Empty input string\nTest Summary: | Pass  Total\ntest set      |\
    \    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:k] for k=1:length(string)]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nall_prefixes(\"abcd\")\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for idx\
    \ in 1:length(string)\n        push!(prefixes, string[1:idx])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    out = []\n    for i in 1:length(string)\n\
    \        push!(out, string[1:i])\n    end\n    return out\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    push!(prefixes,\
    \ string)\n    for i in range(1,length(string))\n        push!(prefixes, string[1:i])\n\
    \    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpd5jbfnre.jl:18\n  Expression: candidate(\"\
    \") == Vector{String}([])\n   Evaluated: [\"\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd5jbfnre.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd5jbfnre.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpd5jbfnre.jl:19\n  Expression: candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n   Evaluated: [\"asdfgh\"\
    , \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"] == [\"a\", \"as\",\
    \ \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd5jbfnre.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd5jbfnre.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpd5jbfnre.jl:20\n  Expression: candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"]\n   Evaluated: [\"WWW\", \"W\", \"WW\", \"WWW\"] == [\"W\"\
    , \"WW\", \"WWW\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd5jbfnre.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd5jbfnre.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd5jbfnre.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    x = 0\n    results = String[]\n\
    \    while x < length(string)\n        push!(results, string[1:x])\n        x\
    \ += 1\n    end\n    return results\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpef36rlsr.jl:20\n  Expression: candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n   Evaluated:\
    \ [\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"] == [\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpef36rlsr.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpef36rlsr.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpef36rlsr.jl:21\n  Expression: candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"]\n   Evaluated: [\"\", \"W\", \"WW\"] == [\"W\", \"WW\", \"\
    WWW\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpef36rlsr.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpef36rlsr.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpef36rlsr.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for j\
    \ in 1:length(string)\n        push!(prefixes, string[1:j])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    output = []\n    for i =\
    \ 1:length(string)\n        push!(output,string[1:i])\n    end\n    return output\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    strs = split(string, \"\"\
    )\n    pfxs = []\n    for i = 1:length(strs)\n        push!(pfxs, join(strs[1:i],\
    \ \"\"))\n    end\n    return pfxs\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4h2k2mzi.jl:18\n  Expression: candidate(\"\
    \") == Vector{String}([])\n   Evaluated: [\"\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4h2k2mzi.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4h2k2mzi.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4h2k2mzi.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ = 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = String[]\n   \
    \ for i = 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n  \
    \  return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    output = []\n    for i in\
    \ 1:length(string)\n        push!(output, string[1:i])\n    end\n    return output\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    # base case\n    if length(string)\
    \ == 1\n        return [string]\n    end\n    # recursive step\n    return append!(all_prefixes(string[1:end-1]),\
    \ string)\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    acc = Vector{String}()\n\
    \    for i = 1:length(string)\n        append!(acc, string[1:i])\n    end\n  \
    \  return acc\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmiiooi64.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"]\n  MethodError: Cannot `convert` an object of type Char to\
    \ an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{String}, x::Char, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] _append!(a::Vector{String}, #unused#::Base.HasLength,\
    \ iter::String)\n     @ Base ./array.jl:1060\n   [3] append!\n     @ ./array.jl:1050\
    \ [inlined]\n   [4] all_prefixes(string::String)\n     @ Main /tmp/tmpmiiooi64.jl:8\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpmiiooi64.jl:18 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpmiiooi64.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpmiiooi64.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  MethodError: Cannot `convert`\
    \ an object of type Char to an object of type String\n  Closest candidates are:\n\
    \    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{String}, x::Char, i1::Int64)\n\
    \     @ Base ./array.jl:903\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmiiooi64.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    v = []\n    for i = 1:length(string)\n\
    \        push!(v, string[1:i])\n    end\n    return v\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    if string == \"\" \n    \
    \    return []\n    else \n        return append!(all_prefixes(string[1:end]),\
    \ string)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = Vector{String}()\n\
    \    for i in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n\
    \    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 0:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr27o77es.jl:17\n  Expression: candidate(\"\
    \") == Vector{String}([])\n   Evaluated: [\"\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr27o77es.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr27o77es.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpr27o77es.jl:18\n  Expression: candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n   Evaluated: [\"\", \"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"] == [\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr27o77es.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr27o77es.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpr27o77es.jl:19\n  Expression: candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"]\n   Evaluated: [\"\", \"W\", \"WW\", \"WWW\"] == [\"W\", \"\
    WW\", \"WWW\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr27o77es.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr27o77es.jl:16\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr27o77es.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    ret = String[]\n    if(length(string)\
    \ == 0)\n        return ret\n    end\n    for j = 1:length(string)\n        push!(ret,\
    \ string[1:j])\n    end\n    return ret\nend\nusing Test\n\n@testset begin\n\n\
    candidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    m = String[]\n    for i in\
    \ 1:length(string)\n        push!(m, string[1:i])\n    end\n    return m\nend\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = String[]\n   \
    \ for i in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n \
    \   return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    str_len = length(string)\n\
    \    all_pref = []\n    for i = 1:str_len\n        push!(all_pref, string[1:i])\n\
    \    end\n    return all_pref\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 0:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjjs6yp1q.jl:13\n  Expression: candidate(\"\
    \") == Vector{String}([])\n   Evaluated: [\"\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjjs6yp1q.jl:13 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjjs6yp1q.jl:12\ntest set: Test\
    \ Failed at /tmp/tmpjjs6yp1q.jl:14\n  Expression: candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n   Evaluated: [\"\", \"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"] == [\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjjs6yp1q.jl:14 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjjs6yp1q.jl:12\ntest set: Test\
    \ Failed at /tmp/tmpjjs6yp1q.jl:15\n  Expression: candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"]\n   Evaluated: [\"\", \"W\", \"WW\", \"WWW\"] == [\"W\", \"\
    WW\", \"WWW\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjjs6yp1q.jl:15 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjjs6yp1q.jl:12\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjjs6yp1q.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    #a=[]\n    i=1\n    #while\
    \ i<=length(string)\n    #    push!(a,string[1:i])\n    #    i+=1\n    #end\n\
    \    #a\n    return [string[1:i] for i in 1:length(string)]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\n@test all_prefixes(\"abc\") == [\"a\", \"ab\", \"\
    abc\"]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @test not defined\nin expression starting\
    \ at /tmp/tmpwtrfrtbk.jl:8\nin expression starting at /tmp/tmpwtrfrtbk.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:end-i] for\
    \ i in 0:length(string)-1]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy085vagf.jl:14\n  Expression: candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n   Evaluated:\
    \ [\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"] == [\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy085vagf.jl:14 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy085vagf.jl:12\ntest set: Test\
    \ Failed at /tmp/tmpy085vagf.jl:15\n  Expression: candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"]\n   Evaluated: [\"WWW\", \"WW\", \"W\"] == [\"W\", \"WW\",\
    \ \"WWW\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy085vagf.jl:15 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy085vagf.jl:12\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy085vagf.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for length\
    \ in 1:length(string)\n        push!(prefixes, string[1:length])\n    end\n  \
    \  return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    len = length(string)\n  \
    \  prefixes = Vector{String}(len)\n    for i in 1:len\n        prefixes[i] = string[1:i]\n\
    \    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptn33rqnk.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  MethodError: no method\
    \ matching Vector{String}(::Int64)\n  Closest candidates are:\n    Vector{T}()\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/base/boot.jl:476\n    Array{T,\
    \ N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n\
    \    Array{T, N}(!Matched::BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n\
    \    ...\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmptn33rqnk.jl:7\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptn33rqnk.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptn33rqnk.jl:17\ntest set:\
    \ Error During Test at /tmp/tmptn33rqnk.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  MethodError: no method matching Vector{String}(::Int64)\n  Closest candidates\
    \ are:\n    Vector{T}() where T at /shared/centos7/julia/1.7.3/share/julia/base/boot.jl:476\n\
    \    Array{T, N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n\
    \    Array{T, N}(!Matched::BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n\
    \    ...\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmptn33rqnk.jl:7\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptn33rqnk.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptn33rqnk.jl:17\ntest set:\
    \ Error During Test at /tmp/tmptn33rqnk.jl:20\n  Test th"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptn33rqnk.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ = 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    string = copy(string)\n \
    \   s = length(string)\n    prefixes = []\n    for i in 1:s\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpfg_emhnc.jl:19\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  MethodError: no method\
    \ matching copy(::String)\n  Closest candidates are:\n    copy(!Matched::LinearAlgebra.Hessenberg{<:Any,\
    \ <:LinearAlgebra.UpperHessenberg}) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/hessenberg.jl:418\n\
    \    copy(!Matched::LinearAlgebra.Hessenberg{<:Any, <:LinearAlgebra.SymTridiagonal})\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/hessenberg.jl:419\n\
    \    copy(!Matched::LinearAlgebra.CholeskyPivoted) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/cholesky.jl:492\n\
    \    ...\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmpfg_emhnc.jl:6\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfg_emhnc.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfg_emhnc.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpfg_emhnc.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  MethodError: no method matching copy(::String)\n  Closest candidates are:\n\
    \    copy(!Matched::LinearAlgebra.Hessenberg{<:Any, <:LinearAlgebra.UpperHessenberg})\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/hessenberg.jl:418\n\
    \    copy(!Matched::LinearAlgebra.Hessenberg{<:Any, <:LinearAlgebra.SymTridiagonal})\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/hessenberg.jl:419\n\
    \    copy(!Matched::LinearAlgebra.CholeskyPivoted) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/cholesky.jl:492\n\
    \    ...\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmpfg_emhnc.jl:6\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ ["
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfg_emhnc.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    vector = []\n    for i =\
    \ 1:length(string)\n        push!(vector, string[1:i])\n    end\n    return vector\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    all_prefixes = []\n    for\
    \ i in 1:length(string)\n        push!(all_prefixes, string[1:i])\n    end\n \
    \   return all_prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = Vector{String}()\n\
    \    for i in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n\
    \    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    l = []\n    for i in 1:length(string)\n\
    \        push!(l, string[1:i])\n    end\n    return l\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    results = []\n    for i in\
    \ 1:length(string)\n        push!(results, string[1:i])\n    end\n    return results\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    all_prefixes = []\n    for\
    \ i in 1:length(string)\n        push!(all_prefixes, string[1:i])\n    end\n \
    \   return all_prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    substr_lengths = 1:length(string)\n\
    \    prefixes = [string[1:end] for end in substr_lengths]\n    return prefixes\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpv3hv_swg.jl:7\nin expression starting at /tmp/tmpv3hv_swg.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    v = []\n    for i in 1:length(string)\n\
    \        push!(v, string[1:i])\n    end\n    return v\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    s = String[]\n    for i =\
    \ 1:length(string)\n        push!(s, string[1:i])\n    end\n    return s\nend\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    n = n_chars(string)\n   \
    \ return [string[1:i] for i in 1:n]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpt1g63xby.jl:14\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  UndefVarError: n_chars\
    \ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmpt1g63xby.jl:6\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt1g63xby.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt1g63xby.jl:13\ntest set:\
    \ Error During Test at /tmp/tmpt1g63xby.jl:15\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  UndefVarError: n_chars not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpt1g63xby.jl:6\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt1g63xby.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt1g63xby.jl:13\ntest set:\
    \ Error During Test at /tmp/tmpt1g63xby.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  UndefVarError: n_chars not\
    \ defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmpt1g63xby.jl:6\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt1g63xby.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt1g63xby.jl:13\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt1g63xby.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    str_copy = string\n    prefixes\
    \ = []\n    for i in 1:length(string)\n        push!(prefixes, str_copy)\n   \
    \     str_copy = str_copy[1:end-1]\n    end\n    return prefixes\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy0u76x26.jl:20\n  Expression: candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n   Evaluated:\
    \ [\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"] == [\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy0u76x26.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy0u76x26.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpy0u76x26.jl:21\n  Expression: candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"]\n   Evaluated: [\"WWW\", \"WW\", \"W\"] == [\"W\", \"WW\",\
    \ \"WWW\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy0u76x26.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy0u76x26.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy0u76x26.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = String[]\n   \
    \ for i = 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n  \
    \  return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    v = Vector{String}()\n  \
    \  for i in 1:length(string)\n        push!(v,string[1:i])\n    end\n    return\
    \ v\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    V = Vector{String}(undef,0)\n\
    \    for i = 1:length(string)\n        push!(V,string[1:i])\n    end\n    return\
    \ V\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    vec = []\n    for i in 1:length(string)\n\
    \        push!(vec, string[1:i])\n    end\n    return vec\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = String[]\n   \
    \ for i = 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n  \
    \  return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = [string[1:end]]\n\
    \    for i in 1:length(string)-1\n        push!(prefixes, string[1:i])\n    end\n\
    \    reverse(prefixes)\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmx9ql5ik.jl:17\n  Expression: candidate(\"\
    \") == Vector{String}([])\n   Evaluated: [\"\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmx9ql5ik.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmx9ql5ik.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpmx9ql5ik.jl:18\n  Expression: candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n   Evaluated: [\"asdfg\"\
    , \"asdf\", \"asd\", \"as\", \"a\", \"asdfgh\"] == [\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmx9ql5ik.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmx9ql5ik.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpmx9ql5ik.jl:19\n  Expression: candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"]\n   Evaluated: [\"WW\", \"W\", \"WWW\"] == [\"W\", \"WW\",\
    \ \"WWW\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmx9ql5ik.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmx9ql5ik.jl:16\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmx9ql5ik.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 0:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1qkdzm3t.jl:17\n  Expression: candidate(\"\
    \") == Vector{String}([])\n   Evaluated: [\"\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1qkdzm3t.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1qkdzm3t.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp1qkdzm3t.jl:18\n  Expression: candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n   Evaluated: [\"\", \"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"] == [\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1qkdzm3t.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1qkdzm3t.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp1qkdzm3t.jl:19\n  Expression: candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"]\n   Evaluated: [\"\", \"W\", \"WW\", \"WWW\"] == [\"W\", \"\
    WW\", \"WWW\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1qkdzm3t.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1qkdzm3t.jl:16\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1qkdzm3t.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    l = []\n    for i = 1:length(string)\n\
    \        l = append!(l,string[1:i])\n    end\n    return l\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxu05zkkd.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"]\n  MethodError: Cannot `convert` an object of type Char to\
    \ an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n    [1] setindex!(A::Vector{String}, x::Char, i1::Int64)\n\
    \      @ Base ./array.jl:903\n    [2] _unsafe_copyto!(dest::Vector{String}, doffs::Int64,\
    \ src::Vector{Any}, soffs::Int64, n::Int64)\n      @ Base ./array.jl:253\n   \
    \ [3] unsafe_copyto!\n      @ ./array.jl:307 [inlined]\n    [4] _copyto_impl!\n\
    \      @ ./array.jl:331 [inlined]\n    [5] copyto!\n      @ ./array.jl:317 [inlined]\n\
    \    [6] copyto!\n      @ ./array.jl:343 [inlined]\n    [7] copyto_axcheck!\n\
    \      @ ./abstractarray.jl:1104 [inlined]\n    [8] Vector{String}(x::Vector{Any})\n\
    \      @ Base ./array.jl:563\n    [9] convert\n      @ ./array.jl:554 [inlined]\n\
    \   [10] all_prefixes(string::String)\n      @ Main /tmp/tmpxu05zkkd.jl:10\n \
    \  [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [12] macro expansion\n      @ /tmp/tmpxu05zkkd.jl:18 [inlined]\n\
    \   [13] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [14] top-level scope\n      @ /tmp/tmpxu05zkkd.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpxu05zkkd.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  MethodError: Cannot `convert`\
    \ an object of type Char to an object of type String\n  Closest candidates are:\n\
    \    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials."
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxu05zkkd.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    out = String[]\n    for i\
    \ in 1:length(string)\n        push!(out, string[1:i])\n    end\n    return out\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    N = length(string)\n    return\
    \ [string[1:i] for i in 1:N]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \"\"\" Collect all prefixes\
    \ of a string \nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3nzutp7b.jl:1\nin expression starting at /tmp/tmp3nzutp7b.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    all = []\n    for i = 1:length(string)\n\
    \        push!(all, string[1:i])\n    end\n    return all\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    lst = []\n    for i = 1:length(string)\n\
    \        push!(lst, string[1:i])\n    end\n    return lst\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prfx = []\n    for i = 1:length(string)\n\
    \        push!(prfx,string[1:i])\n    end\n    return prfx\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nall_prefixes(\"abc\")\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = [string[1:i] for\
    \ i in 1:length(string)]\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
